
Test_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08009d10  08009d10  00019d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a10c  0800a10c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a114  0800a114  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200001dc  0800a2f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800a2f8  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d895  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f3  00000000  00000000  0002daa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002fb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  000306d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001624f  00000000  00000000  00031168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e665  00000000  00000000  000473b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089297  00000000  00000000  00055a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000decb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  000ded04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009cf8 	.word	0x08009cf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009cf8 	.word	0x08009cf8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2319      	movs	r3, #25
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	463b      	mov	r3, r7
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2288      	movs	r2, #136	; 0x88
 8001014:	21ec      	movs	r1, #236	; 0xec
 8001016:	483a      	ldr	r0, [pc, #232]	; (8001100 <TrimRead+0x104>)
 8001018:	f002 fb7e 	bl	8003718 <HAL_I2C_Mem_Read>

	//	// Read NVM from 0xE1 to 0xE7
	//	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	783b      	ldrb	r3, [r7, #0]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <TrimRead+0x108>)
 800102e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	78bb      	ldrb	r3, [r7, #2]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <TrimRead+0x10c>)
 8001040:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001042:	797b      	ldrb	r3, [r7, #5]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <TrimRead+0x110>)
 8001052:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	797b      	ldrb	r3, [r7, #5]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21b      	sxth	r3, r3
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <TrimRead+0x114>)
 8001066:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001068:	7a7b      	ldrb	r3, [r7, #9]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <TrimRead+0x118>)
 8001078:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	7abb      	ldrb	r3, [r7, #10]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <TrimRead+0x11c>)
 800108a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	7b3b      	ldrb	r3, [r7, #12]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <TrimRead+0x120>)
 800109c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <TrimRead+0x124>)
 80010ae:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010b0:	7c7b      	ldrb	r3, [r7, #17]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7c3b      	ldrb	r3, [r7, #16]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <TrimRead+0x128>)
 80010c0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010c2:	7cfb      	ldrb	r3, [r7, #19]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7cbb      	ldrb	r3, [r7, #18]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <TrimRead+0x12c>)
 80010d2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010d4:	7d7b      	ldrb	r3, [r7, #21]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7d3b      	ldrb	r3, [r7, #20]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <TrimRead+0x130>)
 80010e4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7dbb      	ldrb	r3, [r7, #22]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <TrimRead+0x134>)
 80010f6:	801a      	strh	r2, [r3, #0]
	//	dig_H2 = (trimdata[26]<<8) | trimdata[25];
	//	dig_H3 = (trimdata[27]);
	//	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
	//	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
	//	dig_H6 = (trimdata[31]);
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000284 	.word	0x20000284
 8001104:	20000210 	.word	0x20000210
 8001108:	20000218 	.word	0x20000218
 800110c:	2000021a 	.word	0x2000021a
 8001110:	20000212 	.word	0x20000212
 8001114:	2000021c 	.word	0x2000021c
 8001118:	2000021e 	.word	0x2000021e
 800111c:	20000220 	.word	0x20000220
 8001120:	20000222 	.word	0x20000222
 8001124:	20000224 	.word	0x20000224
 8001128:	20000226 	.word	0x20000226
 800112c:	20000228 	.word	0x20000228
 8001130:	2000022a 	.word	0x2000022a

08001134 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af04      	add	r7, sp, #16
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4623      	mov	r3, r4
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	4603      	mov	r3, r0
 8001148:	71bb      	strb	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	717b      	strb	r3, [r7, #5]
 800114e:	4613      	mov	r3, r2
 8001150:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001152:	f7ff ff53 	bl	8000ffc <TrimRead>


	uint8_t datatowrite = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800115e:	23b6      	movs	r3, #182	; 0xb6
 8001160:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f107 030f 	add.w	r3, r7, #15
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	22e0      	movs	r2, #224	; 0xe0
 8001176:	21ec      	movs	r1, #236	; 0xec
 8001178:	4841      	ldr	r0, [pc, #260]	; (8001280 <BME280_Config+0x14c>)
 800117a:	f002 f9d3 	bl	8003524 <HAL_I2C_Mem_Write>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <BME280_Config+0x56>
	{
		return -1;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	e075      	b.n	8001276 <BME280_Config+0x142>
	}

	HAL_Delay (100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f001 fa28 	bl	80025e0 <HAL_Delay>
		return -1;
	}
	*/ //BMP280 no sensa humedad

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	b25a      	sxtb	r2, r3
 8001198:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f107 030f 	add.w	r3, r7, #15
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	22f5      	movs	r2, #245	; 0xf5
 80011bc:	21ec      	movs	r1, #236	; 0xec
 80011be:	4830      	ldr	r0, [pc, #192]	; (8001280 <BME280_Config+0x14c>)
 80011c0:	f002 f9b0 	bl	8003524 <HAL_I2C_Mem_Write>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <BME280_Config+0x9c>
	{
		return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	e052      	b.n	8001276 <BME280_Config+0x142>
	}
	HAL_Delay (100);
 80011d0:	2064      	movs	r0, #100	; 0x64
 80011d2:	f001 fa05 	bl	80025e0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 030e 	add.w	r3, r7, #14
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	22f5      	movs	r2, #245	; 0xf5
 80011ea:	21ec      	movs	r1, #236	; 0xec
 80011ec:	4824      	ldr	r0, [pc, #144]	; (8001280 <BME280_Config+0x14c>)
 80011ee:	f002 fa93 	bl	8003718 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80011f2:	7bba      	ldrb	r2, [r7, #14]
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d002      	beq.n	8001200 <BME280_Config+0xcc>
	{
		return -1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e03a      	b.n	8001276 <BME280_Config+0x142>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	015b      	lsls	r3, r3, #5
 8001204:	b25a      	sxtb	r2, r3
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b25b      	sxtb	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b25a      	sxtb	r2, r3
 8001210:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	b25b      	sxtb	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2301      	movs	r3, #1
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	f107 030f 	add.w	r3, r7, #15
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	22f4      	movs	r2, #244	; 0xf4
 8001230:	21ec      	movs	r1, #236	; 0xec
 8001232:	4813      	ldr	r0, [pc, #76]	; (8001280 <BME280_Config+0x14c>)
 8001234:	f002 f976 	bl	8003524 <HAL_I2C_Mem_Write>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <BME280_Config+0x110>
	{
		return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	e018      	b.n	8001276 <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f001 f9cb 	bl	80025e0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2301      	movs	r3, #1
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	f107 030e 	add.w	r3, r7, #14
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	22f4      	movs	r2, #244	; 0xf4
 800125e:	21ec      	movs	r1, #236	; 0xec
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <BME280_Config+0x14c>)
 8001262:	f002 fa59 	bl	8003718 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001266:	7bba      	ldrb	r2, [r7, #14]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	429a      	cmp	r2, r3
 800126c:	d002      	beq.n	8001274 <BME280_Config+0x140>
	{
		return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e000      	b.n	8001276 <BME280_Config+0x142>
	}

	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	bf00      	nop
 8001280:	20000284 	.word	0x20000284

08001284 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af02      	add	r7, sp, #8
	 * Si trato de leer el chip ID de alguna forma no bloqueante (IT, DMA, ...) no lee bien
	 * despues los datos, no se porque. Entonces hardcodeo que estoy comunicandome bien con el
	 * chip para poder levantar los datos crudos y anda bien.
	 */

	chipID = 0x58;
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <BMEReadRaw+0x38>)
 800128c:	2258      	movs	r2, #88	; 0x58
 800128e:	701a      	strb	r2, [r3, #0]
	if (chipID == 0x58) // original era 0x60 pero en BMP280 es 0x58
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <BMEReadRaw+0x38>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b58      	cmp	r3, #88	; 0x58
 8001296:	d10b      	bne.n	80012b0 <BMEReadRaw+0x2c>
	{
		// Read the Registers 0xF7 to 0xFE
		//HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
		//MemRxCallback_Function= READ_RAW_DATA;
		HAL_I2C_Mem_Read_IT(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8);
 8001298:	2308      	movs	r3, #8
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <BMEReadRaw+0x3c>)
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	22f7      	movs	r2, #247	; 0xf7
 80012a4:	21ec      	movs	r1, #236	; 0xec
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <BMEReadRaw+0x40>)
 80012a8:	f002 fc5c 	bl	8003b64 <HAL_I2C_Mem_Read_IT>
		 *//*
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
		hRaw = (RawData[6]<<8)|(RawData[7]);
*/
		return 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e001      	b.n	80012b4 <BMEReadRaw+0x30>
	}

	else return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200001f8 	.word	0x200001f8
 80012c0:	20000208 	.word	0x20000208
 80012c4:	20000284 	.word	0x20000284

080012c8 <BMP280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
//BMP280_S32_t t_fine;
BMP280_S32_t BMP280_compensate_T_int32(BMP280_S32_t adc_T)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	10da      	asrs	r2, r3, #3
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <BMP280_compensate_T_int32+0x74>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <BMP280_compensate_T_int32+0x78>)
 80012de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	12db      	asrs	r3, r3, #11
 80012e8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	111b      	asrs	r3, r3, #4
 80012ee:	4a13      	ldr	r2, [pc, #76]	; (800133c <BMP280_compensate_T_int32+0x74>)
 80012f0:	8812      	ldrh	r2, [r2, #0]
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	1112      	asrs	r2, r2, #4
 80012f8:	4910      	ldr	r1, [pc, #64]	; (800133c <BMP280_compensate_T_int32+0x74>)
 80012fa:	8809      	ldrh	r1, [r1, #0]
 80012fc:	1a52      	subs	r2, r2, r1
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	131b      	asrs	r3, r3, #12
 8001304:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <BMP280_compensate_T_int32+0x7c>)
 8001306:	f9b2 2000 	ldrsh.w	r2, [r2]
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	139b      	asrs	r3, r3, #14
 8001310:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4413      	add	r3, r2
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <BMP280_compensate_T_int32+0x80>)
 800131a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <BMP280_compensate_T_int32+0x80>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	3380      	adds	r3, #128	; 0x80
 8001328:	121b      	asrs	r3, r3, #8
 800132a:	60fb      	str	r3, [r7, #12]
	return T;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	4618      	mov	r0, r3
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000210 	.word	0x20000210
 8001340:	20000218 	.word	0x20000218
 8001344:	2000021a 	.word	0x2000021a
 8001348:	20000234 	.word	0x20000234

0800134c <BMP280_compensate_P_int64>:
}

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t BMP280_compensate_P_int64(BMP280_S32_t adc_P)
{
 800134c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001350:	b0ca      	sub	sp, #296	; 0x128
 8001352:	af00      	add	r7, sp, #0
 8001354:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8001358:	4baf      	ldr	r3, [pc, #700]	; (8001618 <BMP280_compensate_P_int64+0x2cc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	17da      	asrs	r2, r3, #31
 800135e:	461c      	mov	r4, r3
 8001360:	4615      	mov	r5, r2
 8001362:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001366:	f145 3bff 	adc.w	fp, r5, #4294967295
 800136a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 800136e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001372:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001376:	fb03 f102 	mul.w	r1, r3, r2
 800137a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800137e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	18ca      	adds	r2, r1, r3
 8001388:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800138c:	fba3 8903 	umull	r8, r9, r3, r3
 8001390:	eb02 0309 	add.w	r3, r2, r9
 8001394:	4699      	mov	r9, r3
 8001396:	4ba1      	ldr	r3, [pc, #644]	; (800161c <BMP280_compensate_P_int64+0x2d0>)
 8001398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139c:	b21b      	sxth	r3, r3
 800139e:	17da      	asrs	r2, r3, #31
 80013a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80013a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80013a8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80013ac:	4603      	mov	r3, r0
 80013ae:	fb03 f209 	mul.w	r2, r3, r9
 80013b2:	460b      	mov	r3, r1
 80013b4:	fb08 f303 	mul.w	r3, r8, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	4602      	mov	r2, r0
 80013bc:	fba8 1202 	umull	r1, r2, r8, r2
 80013c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013c4:	460a      	mov	r2, r1
 80013c6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80013ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013ce:	4413      	add	r3, r2
 80013d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013d4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80013d8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80013dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 80013e0:	4b8f      	ldr	r3, [pc, #572]	; (8001620 <BMP280_compensate_P_int64+0x2d4>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	17da      	asrs	r2, r3, #31
 80013ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80013ee:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80013f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013f6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80013fa:	462a      	mov	r2, r5
 80013fc:	fb02 f203 	mul.w	r2, r2, r3
 8001400:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001404:	4621      	mov	r1, r4
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	441a      	add	r2, r3
 800140c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001410:	4621      	mov	r1, r4
 8001412:	fba3 1301 	umull	r1, r3, r3, r1
 8001416:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800141a:	460b      	mov	r3, r1
 800141c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800142a:	f04f 0000 	mov.w	r0, #0
 800142e:	f04f 0100 	mov.w	r1, #0
 8001432:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001436:	462b      	mov	r3, r5
 8001438:	0459      	lsls	r1, r3, #17
 800143a:	4623      	mov	r3, r4
 800143c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001440:	4623      	mov	r3, r4
 8001442:	0458      	lsls	r0, r3, #17
 8001444:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001448:	1814      	adds	r4, r2, r0
 800144a:	643c      	str	r4, [r7, #64]	; 0x40
 800144c:	414b      	adcs	r3, r1
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
 8001450:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001454:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 8001458:	4b72      	ldr	r3, [pc, #456]	; (8001624 <BMP280_compensate_P_int64+0x2d8>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	b21b      	sxth	r3, r3
 8001460:	17da      	asrs	r2, r3, #31
 8001462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001466:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	f04f 0100 	mov.w	r1, #0
 8001472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001476:	00d9      	lsls	r1, r3, #3
 8001478:	2000      	movs	r0, #0
 800147a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800147e:	1814      	adds	r4, r2, r0
 8001480:	63bc      	str	r4, [r7, #56]	; 0x38
 8001482:	414b      	adcs	r3, r1
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001486:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800148a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 800148e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001492:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001496:	fb03 f102 	mul.w	r1, r3, r2
 800149a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800149e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	18ca      	adds	r2, r1, r3
 80014a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ac:	fba3 1303 	umull	r1, r3, r3, r3
 80014b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80014b4:	460b      	mov	r3, r1
 80014b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80014ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014be:	18d3      	adds	r3, r2, r3
 80014c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80014c4:	4b58      	ldr	r3, [pc, #352]	; (8001628 <BMP280_compensate_P_int64+0x2dc>)
 80014c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	17da      	asrs	r2, r3, #31
 80014ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80014d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80014d6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80014da:	462b      	mov	r3, r5
 80014dc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80014e0:	4642      	mov	r2, r8
 80014e2:	fb02 f203 	mul.w	r2, r2, r3
 80014e6:	464b      	mov	r3, r9
 80014e8:	4621      	mov	r1, r4
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	4622      	mov	r2, r4
 80014f2:	4641      	mov	r1, r8
 80014f4:	fba2 1201 	umull	r1, r2, r2, r1
 80014f8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80014fc:	460a      	mov	r2, r1
 80014fe:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001502:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001506:	4413      	add	r3, r2
 8001508:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800150c:	f04f 0000 	mov.w	r0, #0
 8001510:	f04f 0100 	mov.w	r1, #0
 8001514:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001518:	4623      	mov	r3, r4
 800151a:	0a18      	lsrs	r0, r3, #8
 800151c:	462b      	mov	r3, r5
 800151e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001522:	462b      	mov	r3, r5
 8001524:	1219      	asrs	r1, r3, #8
 8001526:	4b41      	ldr	r3, [pc, #260]	; (800162c <BMP280_compensate_P_int64+0x2e0>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	b21b      	sxth	r3, r3
 800152e:	17da      	asrs	r2, r3, #31
 8001530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001534:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001538:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001540:	464a      	mov	r2, r9
 8001542:	fb02 f203 	mul.w	r2, r2, r3
 8001546:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800154a:	4644      	mov	r4, r8
 800154c:	fb04 f303 	mul.w	r3, r4, r3
 8001550:	441a      	add	r2, r3
 8001552:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001556:	4644      	mov	r4, r8
 8001558:	fba3 4304 	umull	r4, r3, r3, r4
 800155c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001560:	4623      	mov	r3, r4
 8001562:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001566:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800156a:	18d3      	adds	r3, r2, r3
 800156c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800157c:	464c      	mov	r4, r9
 800157e:	0323      	lsls	r3, r4, #12
 8001580:	4644      	mov	r4, r8
 8001582:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001586:	4644      	mov	r4, r8
 8001588:	0322      	lsls	r2, r4, #12
 800158a:	1884      	adds	r4, r0, r2
 800158c:	633c      	str	r4, [r7, #48]	; 0x30
 800158e:	eb41 0303 	adc.w	r3, r1, r3
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
 8001594:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001598:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 800159c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015a0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80015a4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80015a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <BMP280_compensate_P_int64+0x2e4>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015bc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80015c0:	462b      	mov	r3, r5
 80015c2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80015c6:	4642      	mov	r2, r8
 80015c8:	fb02 f203 	mul.w	r2, r2, r3
 80015cc:	464b      	mov	r3, r9
 80015ce:	4621      	mov	r1, r4
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	4622      	mov	r2, r4
 80015d8:	4641      	mov	r1, r8
 80015da:	fba2 1201 	umull	r1, r2, r2, r1
 80015de:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80015e2:	460a      	mov	r2, r1
 80015e4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80015e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80015ec:	4413      	add	r3, r2
 80015ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80015fe:	4629      	mov	r1, r5
 8001600:	104a      	asrs	r2, r1, #1
 8001602:	4629      	mov	r1, r5
 8001604:	17cb      	asrs	r3, r1, #31
 8001606:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 800160a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800160e:	4313      	orrs	r3, r2
 8001610:	d110      	bne.n	8001634 <BMP280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 8001612:	2300      	movs	r3, #0
 8001614:	e154      	b.n	80018c0 <BMP280_compensate_P_int64+0x574>
 8001616:	bf00      	nop
 8001618:	20000234 	.word	0x20000234
 800161c:	20000224 	.word	0x20000224
 8001620:	20000222 	.word	0x20000222
 8001624:	20000220 	.word	0x20000220
 8001628:	2000021e 	.word	0x2000021e
 800162c:	2000021c 	.word	0x2000021c
 8001630:	20000212 	.word	0x20000212

	p = 1048576-adc_P;
 8001634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001638:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800163c:	17da      	asrs	r2, r3, #31
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001642:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001646:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800164a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800164e:	105b      	asrs	r3, r3, #1
 8001650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001654:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001658:	07db      	lsls	r3, r3, #31
 800165a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800165e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001662:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001666:	4621      	mov	r1, r4
 8001668:	1a89      	subs	r1, r1, r2
 800166a:	67b9      	str	r1, [r7, #120]	; 0x78
 800166c:	4629      	mov	r1, r5
 800166e:	eb61 0303 	sbc.w	r3, r1, r3
 8001672:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001674:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001678:	4622      	mov	r2, r4
 800167a:	462b      	mov	r3, r5
 800167c:	1891      	adds	r1, r2, r2
 800167e:	6239      	str	r1, [r7, #32]
 8001680:	415b      	adcs	r3, r3
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
 8001684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001688:	4621      	mov	r1, r4
 800168a:	1851      	adds	r1, r2, r1
 800168c:	61b9      	str	r1, [r7, #24]
 800168e:	4629      	mov	r1, r5
 8001690:	414b      	adcs	r3, r1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016a0:	4649      	mov	r1, r9
 80016a2:	018b      	lsls	r3, r1, #6
 80016a4:	4641      	mov	r1, r8
 80016a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016aa:	4641      	mov	r1, r8
 80016ac:	018a      	lsls	r2, r1, #6
 80016ae:	4641      	mov	r1, r8
 80016b0:	1889      	adds	r1, r1, r2
 80016b2:	6139      	str	r1, [r7, #16]
 80016b4:	4649      	mov	r1, r9
 80016b6:	eb43 0101 	adc.w	r1, r3, r1
 80016ba:	6179      	str	r1, [r7, #20]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80016c8:	4649      	mov	r1, r9
 80016ca:	008b      	lsls	r3, r1, #2
 80016cc:	4641      	mov	r1, r8
 80016ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016d2:	4641      	mov	r1, r8
 80016d4:	008a      	lsls	r2, r1, #2
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	4622      	mov	r2, r4
 80016de:	189b      	adds	r3, r3, r2
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	460b      	mov	r3, r1
 80016e4:	462a      	mov	r2, r5
 80016e6:	eb42 0303 	adc.w	r3, r2, r3
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80016f8:	4649      	mov	r1, r9
 80016fa:	008b      	lsls	r3, r1, #2
 80016fc:	4641      	mov	r1, r8
 80016fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001702:	4641      	mov	r1, r8
 8001704:	008a      	lsls	r2, r1, #2
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	4603      	mov	r3, r0
 800170c:	4622      	mov	r2, r4
 800170e:	189b      	adds	r3, r3, r2
 8001710:	673b      	str	r3, [r7, #112]	; 0x70
 8001712:	462b      	mov	r3, r5
 8001714:	460a      	mov	r2, r1
 8001716:	eb42 0303 	adc.w	r3, r2, r3
 800171a:	677b      	str	r3, [r7, #116]	; 0x74
 800171c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001720:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001724:	f7ff fa98 	bl	8000c58 <__aeabi_ldivmod>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001730:	4b66      	ldr	r3, [pc, #408]	; (80018cc <BMP280_compensate_P_int64+0x580>)
 8001732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001736:	b21b      	sxth	r3, r3
 8001738:	17da      	asrs	r2, r3, #31
 800173a:	66bb      	str	r3, [r7, #104]	; 0x68
 800173c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800173e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001742:	f04f 0000 	mov.w	r0, #0
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	0b50      	lsrs	r0, r2, #13
 800174c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001750:	1359      	asrs	r1, r3, #13
 8001752:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001756:	462b      	mov	r3, r5
 8001758:	fb00 f203 	mul.w	r2, r0, r3
 800175c:	4623      	mov	r3, r4
 800175e:	fb03 f301 	mul.w	r3, r3, r1
 8001762:	4413      	add	r3, r2
 8001764:	4622      	mov	r2, r4
 8001766:	fba2 1200 	umull	r1, r2, r2, r0
 800176a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800176e:	460a      	mov	r2, r1
 8001770:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001774:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001778:	4413      	add	r3, r2
 800177a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800177e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	0b50      	lsrs	r0, r2, #13
 800178c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001790:	1359      	asrs	r1, r3, #13
 8001792:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001796:	462b      	mov	r3, r5
 8001798:	fb00 f203 	mul.w	r2, r0, r3
 800179c:	4623      	mov	r3, r4
 800179e:	fb03 f301 	mul.w	r3, r3, r1
 80017a2:	4413      	add	r3, r2
 80017a4:	4622      	mov	r2, r4
 80017a6:	fba2 1200 	umull	r1, r2, r2, r0
 80017aa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80017ae:	460a      	mov	r2, r1
 80017b0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80017b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80017b8:	4413      	add	r3, r2
 80017ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80017ca:	4621      	mov	r1, r4
 80017cc:	0e4a      	lsrs	r2, r1, #25
 80017ce:	4629      	mov	r1, r5
 80017d0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80017d4:	4629      	mov	r1, r5
 80017d6:	164b      	asrs	r3, r1, #25
 80017d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 80017dc:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <BMP280_compensate_P_int64+0x584>)
 80017de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	17da      	asrs	r2, r3, #31
 80017e6:	663b      	str	r3, [r7, #96]	; 0x60
 80017e8:	667a      	str	r2, [r7, #100]	; 0x64
 80017ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017f2:	462a      	mov	r2, r5
 80017f4:	fb02 f203 	mul.w	r2, r2, r3
 80017f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017fc:	4621      	mov	r1, r4
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001808:	4621      	mov	r1, r4
 800180a:	fba2 1201 	umull	r1, r2, r2, r1
 800180e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001812:	460a      	mov	r2, r1
 8001814:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001818:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800181c:	4413      	add	r3, r2
 800181e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800182e:	4621      	mov	r1, r4
 8001830:	0cca      	lsrs	r2, r1, #19
 8001832:	4629      	mov	r1, r5
 8001834:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001838:	4629      	mov	r1, r5
 800183a:	14cb      	asrs	r3, r1, #19
 800183c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 8001840:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001844:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001848:	1884      	adds	r4, r0, r2
 800184a:	65bc      	str	r4, [r7, #88]	; 0x58
 800184c:	eb41 0303 	adc.w	r3, r1, r3
 8001850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001852:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001856:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800185a:	4621      	mov	r1, r4
 800185c:	1889      	adds	r1, r1, r2
 800185e:	6539      	str	r1, [r7, #80]	; 0x50
 8001860:	4629      	mov	r1, r5
 8001862:	eb43 0101 	adc.w	r1, r3, r1
 8001866:	6579      	str	r1, [r7, #84]	; 0x54
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001874:	4623      	mov	r3, r4
 8001876:	0a18      	lsrs	r0, r3, #8
 8001878:	462b      	mov	r3, r5
 800187a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800187e:	462b      	mov	r3, r5
 8001880:	1219      	asrs	r1, r3, #8
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <BMP280_compensate_P_int64+0x588>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	b21b      	sxth	r3, r3
 800188a:	17da      	asrs	r2, r3, #31
 800188c:	64bb      	str	r3, [r7, #72]	; 0x48
 800188e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800189c:	464c      	mov	r4, r9
 800189e:	0123      	lsls	r3, r4, #4
 80018a0:	4644      	mov	r4, r8
 80018a2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018a6:	4644      	mov	r4, r8
 80018a8:	0122      	lsls	r2, r4, #4
 80018aa:	1884      	adds	r4, r0, r2
 80018ac:	603c      	str	r4, [r7, #0]
 80018ae:	eb41 0303 	adc.w	r3, r1, r3
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018b8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110

	return (BMP280_U32_t)p;
 80018bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80018c6:	46bd      	mov	sp, r7
 80018c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018cc:	2000022a 	.word	0x2000022a
 80018d0:	20000228 	.word	0x20000228
 80018d4:	20000226 	.word	0x20000226

080018d8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80018e0:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <bme280_compensate_H_int32+0xbc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80018e8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	039a      	lsls	r2, r3, #14
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <bme280_compensate_H_int32+0xc0>)
 80018f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f4:	051b      	lsls	r3, r3, #20
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <bme280_compensate_H_int32+0xc4>)
 80018fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fe:	4619      	mov	r1, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001908:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800190c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800190e:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <bme280_compensate_H_int32+0xc8>)
 8001910:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001914:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800191c:	1292      	asrs	r2, r2, #10
 800191e:	4921      	ldr	r1, [pc, #132]	; (80019a4 <bme280_compensate_H_int32+0xcc>)
 8001920:	8809      	ldrh	r1, [r1, #0]
 8001922:	4608      	mov	r0, r1
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	fb00 f101 	mul.w	r1, r0, r1
 800192a:	12c9      	asrs	r1, r1, #11
 800192c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001930:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001934:	1292      	asrs	r2, r2, #10
 8001936:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <bme280_compensate_H_int32+0xd0>)
 800193c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001940:	fb01 f202 	mul.w	r2, r1, r2
 8001944:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001948:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	13db      	asrs	r3, r3, #15
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	13d2      	asrs	r2, r2, #15
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <bme280_compensate_H_int32+0xd4>)
 8001960:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001962:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001966:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001974:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800197c:	bfa8      	it	ge
 800197e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001982:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	131b      	asrs	r3, r3, #12
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	20000234 	.word	0x20000234
 8001998:	2000022e 	.word	0x2000022e
 800199c:	20000230 	.word	0x20000230
 80019a0:	20000232 	.word	0x20000232
 80019a4:	20000216 	.word	0x20000216
 80019a8:	2000022c 	.word	0x2000022c
 80019ac:	20000214 	.word	0x20000214

080019b0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80019b4:	f7ff fc66 	bl	8001284 <BMEReadRaw>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d163      	bne.n	8001a86 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <BME280_Measure+0xf4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019c6:	d104      	bne.n	80019d2 <BME280_Measure+0x22>
 80019c8:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <BME280_Measure+0xf8>)
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e016      	b.n	8001a00 <BME280_Measure+0x50>
		  else
		  {
			  //Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
			  Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <BME280_Measure+0xf4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fc76 	bl	80012c8 <BMP280_compensate_T_int32>
 80019dc:	4603      	mov	r3, r0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fda8 	bl	8000534 <__aeabi_i2d>
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b30      	ldr	r3, [pc, #192]	; (8001aac <BME280_Measure+0xfc>)
 80019ea:	f7fe ff37 	bl	800085c <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f8df 	bl	8000bb8 <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <BME280_Measure+0xf8>)
 80019fe:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <BME280_Measure+0x100>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a08:	d104      	bne.n	8001a14 <BME280_Measure+0x64>
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <BME280_Measure+0x104>)
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e016      	b.n	8001a42 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  //Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
			  Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <BME280_Measure+0x100>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fc97 	bl	800134c <BMP280_compensate_P_int64>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd77 	bl	8000514 <__aeabi_ui2d>
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <BME280_Measure+0x108>)
 8001a2c:	f7fe ff16 	bl	800085c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f8be 	bl	8000bb8 <__aeabi_d2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <BME280_Measure+0x104>)
 8001a40:	6013      	str	r3, [r2, #0]
			  //Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <BME280_Measure+0x10c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a4a:	d104      	bne.n	8001a56 <BME280_Measure+0xa6>
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <BME280_Measure+0x110>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001a54:	e023      	b.n	8001a9e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <BME280_Measure+0x10c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff3c 	bl	80018d8 <bme280_compensate_H_int32>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd56 	bl	8000514 <__aeabi_ui2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <BME280_Measure+0x114>)
 8001a6e:	f7fe fef5 	bl	800085c <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f89d 	bl	8000bb8 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <BME280_Measure+0x110>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	e00b      	b.n	8001a9e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <BME280_Measure+0x110>)
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <BME280_Measure+0x110>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <BME280_Measure+0x104>)
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <BME280_Measure+0x104>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <BME280_Measure+0xf8>)
 8001a9c:	6013      	str	r3, [r2, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200001fc 	.word	0x200001fc
 8001aa8:	20000420 	.word	0x20000420
 8001aac:	40590000 	.word	0x40590000
 8001ab0:	20000200 	.word	0x20000200
 8001ab4:	20000424 	.word	0x20000424
 8001ab8:	40700000 	.word	0x40700000
 8001abc:	20000204 	.word	0x20000204
 8001ac0:	20000428 	.word	0x20000428
 8001ac4:	40900000 	.word	0x40900000

08001ac8 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ade:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d007      	beq.n	8001afa <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	79f9      	ldrb	r1, [r7, #7]
 8001af2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <Uart_isr>:
	else return -1;
}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d013      	beq.n	8001b52 <Uart_isr+0x4a>
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00e      	beq.n	8001b52 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <Uart_isr+0xac>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ffbc 	bl	8001ac8 <store_char>
        return;
 8001b50:	e02c      	b.n	8001bac <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d027      	beq.n	8001bac <Uart_isr+0xa4>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d022      	beq.n	8001bac <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <Uart_isr+0xb0>)
 8001b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <Uart_isr+0xb0>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d108      	bne.n	8001b84 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b80:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001b82:	e012      	b.n	8001baa <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <Uart_isr+0xb0>)
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <Uart_isr+0xb0>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <Uart_isr+0xb0>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	3301      	adds	r3, #1
 8001b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <Uart_isr+0xb0>)
 8001b9a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	7bba      	ldrb	r2, [r7, #14]
 8001ba8:	605a      	str	r2, [r3, #4]
    	return;
 8001baa:	bf00      	nop
    }
}
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000280 	.word	0x20000280
 8001bb8:	20000238 	.word	0x20000238

08001bbc <HAL_I2C_MemRxCpltCallback>:
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_I2C_MemRxCpltCallback+0x64>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d123      	bne.n	8001c14 <HAL_I2C_MemRxCpltCallback+0x58>
	{
		/* Calculate the Raw data for the parameters
		* Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		*/
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	031a      	lsls	r2, r3, #12
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001bdc:	7892      	ldrb	r2, [r2, #2]
 8001bde:	0912      	lsrs	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	4313      	orrs	r3, r2
 8001be4:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8001be6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001bea:	78db      	ldrb	r3, [r3, #3]
 8001bec:	031a      	lsls	r2, r3, #12
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001bf0:	791b      	ldrb	r3, [r3, #4]
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001bf8:	7952      	ldrb	r2, [r2, #5]
 8001bfa:	0912      	lsrs	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_I2C_MemRxCpltCallback+0x70>)
 8001c02:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001c06:	799b      	ldrb	r3, [r3, #6]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001c0c:	79d2      	ldrb	r2, [r2, #7]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001c12:	6013      	str	r3, [r2, #0]
	}
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	20000284 	.word	0x20000284
 8001c24:	20000208 	.word	0x20000208
 8001c28:	20000200 	.word	0x20000200
 8001c2c:	200001fc 	.word	0x200001fc
 8001c30:	20000204 	.word	0x20000204

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3a:	f000 fc5f 	bl	80024fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3e:	f000 f81b 	bl	8001c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c42:	f000 f92d 	bl	8001ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c46:	f000 f903 	bl	8001e50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c4a:	f000 f8d7 	bl	8001dfc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c4e:	f000 f87d 	bl	8001d4c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c52:	f000 f8a9 	bl	8001da8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BME280_Config(OSRS_1, OSRS_4, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001c56:	2304      	movs	r3, #4
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2303      	movs	r3, #3
 8001c60:	2201      	movs	r2, #1
 8001c62:	2103      	movs	r1, #3
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff fa65 	bl	8001134 <BME280_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BME280_Measure();
 8001c6a:	f7ff fea1 	bl	80019b0 <BME280_Measure>
	  HAL_Delay(500);
 8001c6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c72:	f000 fcb5 	bl	80025e0 <HAL_Delay>
	  BME280_Measure();
 8001c76:	e7f8      	b.n	8001c6a <main+0x36>

08001c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b094      	sub	sp, #80	; 0x50
 8001c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7e:	f107 0320 	add.w	r3, r7, #32
 8001c82:	2230      	movs	r2, #48	; 0x30
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f005 fb16 	bl	80072b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <SystemClock_Config+0xcc>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <SystemClock_Config+0xcc>)
 8001ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001caa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <SystemClock_Config+0xcc>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <SystemClock_Config+0xd0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cc4:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <SystemClock_Config+0xd0>)
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <SystemClock_Config+0xd0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cec:	2304      	movs	r3, #4
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001cf0:	2354      	movs	r3, #84	; 0x54
 8001cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 ff03 	bl	8005b0c <HAL_RCC_OscConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d0c:	f000 f936 	bl	8001f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d10:	230f      	movs	r3, #15
 8001d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d14:	2302      	movs	r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 f965 	bl	8005ffc <HAL_RCC_ClockConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d38:	f000 f920 	bl	8001f7c <Error_Handler>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3750      	adds	r7, #80	; 0x50
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40007000 	.word	0x40007000

08001d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <MX_I2C1_Init+0x54>)
 8001d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <MX_I2C1_Init+0x58>)
 8001d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_I2C1_Init+0x50>)
 8001d8a:	f001 fa87 	bl	800329c <HAL_I2C_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d94:	f000 f8f2 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000284 	.word	0x20000284
 8001da0:	40005400 	.word	0x40005400
 8001da4:	000186a0 	.word	0x000186a0

08001da8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <MX_USART1_UART_Init+0x50>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_USART1_UART_Init+0x4c>)
 8001de0:	f004 fb2c 	bl	800643c <HAL_UART_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dea:	f000 f8c7 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000398 	.word	0x20000398
 8001df8:	40011000 	.word	0x40011000

08001dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <MX_USART2_UART_Init+0x50>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_USART2_UART_Init+0x4c>)
 8001e34:	f004 fb02 	bl	800643c <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e3e:	f000 f89d 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200003dc 	.word	0x200003dc
 8001e4c:	40004400 	.word	0x40004400

08001e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_DMA_Init+0x4c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <MX_DMA_Init+0x4c>)
 8001e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <MX_DMA_Init+0x4c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	200b      	movs	r0, #11
 8001e78:	f000 fcb1 	bl	80027de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e7c:	200b      	movs	r0, #11
 8001e7e:	f000 fcca 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2011      	movs	r0, #17
 8001e88:	f000 fca9 	bl	80027de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e8c:	2011      	movs	r0, #17
 8001e8e:	f000 fcc2 	bl	8002816 <HAL_NVIC_EnableIRQ>

}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a2c      	ldr	r2, [pc, #176]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <MX_GPIO_Init+0xd0>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2120      	movs	r1, #32
 8001f2a:	4812      	ldr	r0, [pc, #72]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f2c:	f001 f99c 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	480c      	ldr	r0, [pc, #48]	; (8001f78 <MX_GPIO_Init+0xd8>)
 8001f48:	f001 f80a 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f64:	f000 fffc 	bl	8002f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020800 	.word	0x40020800

08001f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <Error_Handler+0x8>
	...

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fc6:	2007      	movs	r0, #7
 8001fc8:	f000 fbfe 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_I2C_MspInit+0x154>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f040 8093 	bne.w	8002122 <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	4b4b      	ldr	r3, [pc, #300]	; (8002130 <HAL_I2C_MspInit+0x158>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <HAL_I2C_MspInit+0x158>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	6313      	str	r3, [r2, #48]	; 0x30
 800200c:	4b48      	ldr	r3, [pc, #288]	; (8002130 <HAL_I2C_MspInit+0x158>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002018:	f44f 7340 	mov.w	r3, #768	; 0x300
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201e:	2312      	movs	r3, #18
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800202a:	2304      	movs	r3, #4
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	483f      	ldr	r0, [pc, #252]	; (8002134 <HAL_I2C_MspInit+0x15c>)
 8002036:	f000 ff93 	bl	8002f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b3c      	ldr	r3, [pc, #240]	; (8002130 <HAL_I2C_MspInit+0x158>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a3b      	ldr	r2, [pc, #236]	; (8002130 <HAL_I2C_MspInit+0x158>)
 8002044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_I2C_MspInit+0x158>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_I2C_MspInit+0x160>)
 8002058:	4a38      	ldr	r2, [pc, #224]	; (800213c <HAL_I2C_MspInit+0x164>)
 800205a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_I2C_MspInit+0x160>)
 800205e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002062:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_I2C_MspInit+0x160>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_I2C_MspInit+0x160>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_I2C_MspInit+0x160>)
 8002072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002076:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_I2C_MspInit+0x160>)
 800207a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800207e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_I2C_MspInit+0x160>)
 8002082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002086:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002088:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_I2C_MspInit+0x160>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_I2C_MspInit+0x160>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_I2C_MspInit+0x160>)
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800209a:	4827      	ldr	r0, [pc, #156]	; (8002138 <HAL_I2C_MspInit+0x160>)
 800209c:	f000 fbd6 	bl	800284c <HAL_DMA_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_MspInit+0xd2>
    {
      Error_Handler();
 80020a6:	f7ff ff69 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_I2C_MspInit+0x160>)
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
 80020b0:	4a21      	ldr	r2, [pc, #132]	; (8002138 <HAL_I2C_MspInit+0x160>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020b8:	4a22      	ldr	r2, [pc, #136]	; (8002144 <HAL_I2C_MspInit+0x16c>)
 80020ba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80020bc:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80020f6:	4812      	ldr	r0, [pc, #72]	; (8002140 <HAL_I2C_MspInit+0x168>)
 80020f8:	f000 fba8 	bl	800284c <HAL_DMA_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8002102:	f7ff ff3b 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_I2C_MspInit+0x168>)
 800210a:	635a      	str	r2, [r3, #52]	; 0x34
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_I2C_MspInit+0x168>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	201f      	movs	r0, #31
 8002118:	f000 fb61 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800211c:	201f      	movs	r0, #31
 800211e:	f000 fb7a 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40005400 	.word	0x40005400
 8002130:	40023800 	.word	0x40023800
 8002134:	40020400 	.word	0x40020400
 8002138:	200002d8 	.word	0x200002d8
 800213c:	40026010 	.word	0x40026010
 8002140:	20000338 	.word	0x20000338
 8002144:	400260a0 	.word	0x400260a0

08002148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a36      	ldr	r2, [pc, #216]	; (8002240 <HAL_UART_MspInit+0xf8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d135      	bne.n	80021d6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_UART_MspInit+0xfc>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a34      	ldr	r2, [pc, #208]	; (8002244 <HAL_UART_MspInit+0xfc>)
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_UART_MspInit+0xfc>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <HAL_UART_MspInit+0xfc>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <HAL_UART_MspInit+0xfc>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_UART_MspInit+0xfc>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b4:	2307      	movs	r3, #7
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	4822      	ldr	r0, [pc, #136]	; (8002248 <HAL_UART_MspInit+0x100>)
 80021c0:	f000 fece 	bl	8002f60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	2025      	movs	r0, #37	; 0x25
 80021ca:	f000 fb08 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ce:	2025      	movs	r0, #37	; 0x25
 80021d0:	f000 fb21 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021d4:	e030      	b.n	8002238 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1c      	ldr	r2, [pc, #112]	; (800224c <HAL_UART_MspInit+0x104>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d12b      	bne.n	8002238 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_UART_MspInit+0xfc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a16      	ldr	r2, [pc, #88]	; (8002244 <HAL_UART_MspInit+0xfc>)
 80021ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_UART_MspInit+0xfc>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_UART_MspInit+0xfc>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <HAL_UART_MspInit+0xfc>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6313      	str	r3, [r2, #48]	; 0x30
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <HAL_UART_MspInit+0xfc>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002218:	230c      	movs	r3, #12
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002228:	2307      	movs	r3, #7
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4619      	mov	r1, r3
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <HAL_UART_MspInit+0x100>)
 8002234:	f000 fe94 	bl	8002f60 <HAL_GPIO_Init>
}
 8002238:	bf00      	nop
 800223a:	3730      	adds	r7, #48	; 0x30
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40011000 	.word	0x40011000
 8002244:	40023800 	.word	0x40023800
 8002248:	40020000 	.word	0x40020000
 800224c:	40004400 	.word	0x40004400

08002250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <NMI_Handler+0x4>

08002256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <MemManage_Handler+0x4>

08002262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	e7fe      	b.n	800226c <UsageFault_Handler+0x4>

0800226e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229c:	f000 f980 	bl	80025a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA1_Stream0_IRQHandler+0x10>)
 80022aa:	f000 fc0f 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200002d8 	.word	0x200002d8

080022b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <DMA1_Stream6_IRQHandler+0x10>)
 80022be:	f000 fc05 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000338 	.word	0x20000338

080022cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <I2C1_EV_IRQHandler+0x10>)
 80022d2:	f001 fd05 	bl	8003ce0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000284 	.word	0x20000284

080022e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <USART1_IRQHandler+0x14>)
 80022e6:	f7ff fc0f 	bl	8001b08 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022ea:	4802      	ldr	r0, [pc, #8]	; (80022f4 <USART1_IRQHandler+0x14>)
 80022ec:	f004 f8f4 	bl	80064d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000398 	.word	0x20000398

080022f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_kill>:

int _kill(int pid, int sig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002312:	f004 ffa7 	bl	8007264 <__errno>
 8002316:	4603      	mov	r3, r0
 8002318:	2216      	movs	r2, #22
 800231a:	601a      	str	r2, [r3, #0]
  return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_exit>:

void _exit (int status)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffe7 	bl	8002308 <_kill>
  while (1) {}    /* Make sure we hang here */
 800233a:	e7fe      	b.n	800233a <_exit+0x12>

0800233c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e00a      	b.n	8002364 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800234e:	f3af 8000 	nop.w
 8002352:	4601      	mov	r1, r0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	60ba      	str	r2, [r7, #8]
 800235a:	b2ca      	uxtb	r2, r1
 800235c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf0      	blt.n	800234e <_read+0x12>
  }

  return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e009      	b.n	800239c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	60ba      	str	r2, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbf1      	blt.n	8002388 <_write+0x12>
  }
  return len;
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_close>:

int _close(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d6:	605a      	str	r2, [r3, #4]
  return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_isatty>:

int _isatty(int file)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f004 ff0c 	bl	8007264 <__errno>
 800244c:	4603      	mov	r3, r0
 800244e:	220c      	movs	r2, #12
 8002450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <_sbrk+0x64>)
 8002468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20018000 	.word	0x20018000
 8002478:	00000400 	.word	0x00000400
 800247c:	2000042c 	.word	0x2000042c
 8002480:	20000448 	.word	0x20000448

08002484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <SystemInit+0x20>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <SystemInit+0x20>)
 8002490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ac:	480d      	ldr	r0, [pc, #52]	; (80024e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b0:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024c4:	4c0b      	ldr	r4, [pc, #44]	; (80024f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024d2:	f7ff ffd7 	bl	8002484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024d6:	f004 fecb 	bl	8007270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024da:	f7ff fbab 	bl	8001c34 <main>
  bx  lr    
 80024de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024ec:	0800a11c 	.word	0x0800a11c
  ldr r2, =_sbss
 80024f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024f4:	20000444 	.word	0x20000444

080024f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC_IRQHandler>
	...

080024fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_Init+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <HAL_Init+0x40>)
 8002506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_Init+0x40>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_Init+0x40>)
 8002512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a07      	ldr	r2, [pc, #28]	; (800253c <HAL_Init+0x40>)
 800251e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002524:	2003      	movs	r0, #3
 8002526:	f000 f94f 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252a:	2000      	movs	r0, #0
 800252c:	f000 f808 	bl	8002540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002530:	f7ff fd2a 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023c00 	.word	0x40023c00

08002540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_InitTick+0x54>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_InitTick+0x58>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002556:	fbb3 f3f1 	udiv	r3, r3, r1
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f967 	bl	8002832 <HAL_SYSTICK_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e00e      	b.n	800258c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b0f      	cmp	r3, #15
 8002572:	d80a      	bhi.n	800258a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002574:	2200      	movs	r2, #0
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f000 f92f 	bl	80027de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <HAL_InitTick+0x5c>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000000 	.word	0x20000000
 8002598:	20000008 	.word	0x20000008
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000430 	.word	0x20000430

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000430 	.word	0x20000430

080025e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff ffee 	bl	80025c8 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d005      	beq.n	8002606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_Delay+0x44>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002606:	bf00      	nop
 8002608:	f7ff ffde 	bl	80025c8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d8f7      	bhi.n	8002608 <HAL_Delay+0x28>
  {
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000008 	.word	0x20000008

08002628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265a:	4a04      	ldr	r2, [pc, #16]	; (800266c <__NVIC_SetPriorityGrouping+0x44>)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	60d3      	str	r3, [r2, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <__NVIC_GetPriorityGrouping+0x18>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	f003 0307 	and.w	r3, r3, #7
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	db0b      	blt.n	80026b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4907      	ldr	r1, [pc, #28]	; (80026c4 <__NVIC_EnableIRQ+0x38>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2001      	movs	r0, #1
 80026ae:	fa00 f202 	lsl.w	r2, r0, r2
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db0a      	blt.n	80026f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	490c      	ldr	r1, [pc, #48]	; (8002714 <__NVIC_SetPriority+0x4c>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	440b      	add	r3, r1
 80026ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f0:	e00a      	b.n	8002708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4908      	ldr	r1, [pc, #32]	; (8002718 <__NVIC_SetPriority+0x50>)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3b04      	subs	r3, #4
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	440b      	add	r3, r1
 8002706:	761a      	strb	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000e100 	.word	0xe000e100
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f1c3 0307 	rsb	r3, r3, #7
 8002736:	2b04      	cmp	r3, #4
 8002738:	bf28      	it	cs
 800273a:	2304      	movcs	r3, #4
 800273c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3304      	adds	r3, #4
 8002742:	2b06      	cmp	r3, #6
 8002744:	d902      	bls.n	800274c <NVIC_EncodePriority+0x30>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3b03      	subs	r3, #3
 800274a:	e000      	b.n	800274e <NVIC_EncodePriority+0x32>
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	401a      	ands	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002764:	f04f 31ff 	mov.w	r1, #4294967295
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43d9      	mvns	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	4313      	orrs	r3, r2
         );
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002794:	d301      	bcc.n	800279a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002796:	2301      	movs	r3, #1
 8002798:	e00f      	b.n	80027ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <SysTick_Config+0x40>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a2:	210f      	movs	r1, #15
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f7ff ff8e 	bl	80026c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <SysTick_Config+0x40>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <SysTick_Config+0x40>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff29 	bl	8002628 <__NVIC_SetPriorityGrouping>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f0:	f7ff ff3e 	bl	8002670 <__NVIC_GetPriorityGrouping>
 80027f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	6978      	ldr	r0, [r7, #20]
 80027fc:	f7ff ff8e 	bl	800271c <NVIC_EncodePriority>
 8002800:	4602      	mov	r2, r0
 8002802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff5d 	bl	80026c8 <__NVIC_SetPriority>
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff31 	bl	800268c <__NVIC_EnableIRQ>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffa2 	bl	8002784 <SysTick_Config>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff feb6 	bl	80025c8 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e099      	b.n	800299c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002888:	e00f      	b.n	80028aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800288a:	f7ff fe9d 	bl	80025c8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b05      	cmp	r3, #5
 8002896:	d908      	bls.n	80028aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2203      	movs	r2, #3
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e078      	b.n	800299c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e8      	bne.n	800288a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <HAL_DMA_Init+0x158>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	2b04      	cmp	r3, #4
 8002902:	d107      	bne.n	8002914 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4313      	orrs	r3, r2
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0307 	bic.w	r3, r3, #7
 800292a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b04      	cmp	r3, #4
 800293c:	d117      	bne.n	800296e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00e      	beq.n	800296e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fa89 	bl	8002e68 <DMA_CheckFifoParam>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800296a:	2301      	movs	r3, #1
 800296c:	e016      	b.n	800299c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa40 	bl	8002dfc <DMA_CalcBaseAndBitshift>
 800297c:	4603      	mov	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	223f      	movs	r2, #63	; 0x3f
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	f010803f 	.word	0xf010803f

080029a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029b6:	f7ff fe07 	bl	80025c8 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d008      	beq.n	80029da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e052      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0216 	bic.w	r2, r2, #22
 80029e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_DMA_Abort+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	e013      	b.n	8002a54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2c:	f7ff fdcc 	bl	80025c8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d90c      	bls.n	8002a54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2203      	movs	r2, #3
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e015      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e4      	bne.n	8002a2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	223f      	movs	r2, #63	; 0x3f
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00c      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ad8:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <HAL_DMA_IRQHandler+0x248>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a8e      	ldr	r2, [pc, #568]	; (8002d18 <HAL_DMA_IRQHandler+0x24c>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2208      	movs	r2, #8
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01a      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2208      	movs	r2, #8
 8002b26:	409a      	lsls	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f043 0202 	orr.w	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2204      	movs	r2, #4
 8002b74:	409a      	lsls	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2204      	movs	r2, #4
 8002b92:	409a      	lsls	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	2210      	movs	r2, #16
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d043      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d024      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
 8002bfa:	e01f      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	e016      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0208 	bic.w	r2, r2, #8
 8002c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2220      	movs	r2, #32
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 808f 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8087 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	2220      	movs	r2, #32
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d136      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0216 	bic.w	r2, r2, #22
 8002c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x1da>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	223f      	movs	r2, #63	; 0x3f
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d07e      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
        }
        return;
 8002ce2:	e079      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
 8002d10:	e02c      	b.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000
 8002d18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
 8002d2c:	e01e      	b.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0210 	bic.w	r2, r2, #16
 8002d4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d032      	beq.n	8002dda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2205      	movs	r2, #5
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d307      	bcc.n	8002db4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f2      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x2cc>
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002db4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dd8:	bf00      	nop
    }
  }
}
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dee:	b2db      	uxtb	r3, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3b10      	subs	r3, #16
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <DMA_CalcBaseAndBitshift+0x64>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <DMA_CalcBaseAndBitshift+0x68>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d909      	bls.n	8002e3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	1d1a      	adds	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e3c:	e007      	b.n	8002e4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	aaaaaaab 	.word	0xaaaaaaab
 8002e64:	08009d28 	.word	0x08009d28

08002e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11f      	bne.n	8002ec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d856      	bhi.n	8002f36 <DMA_CheckFifoParam+0xce>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <DMA_CheckFifoParam+0x28>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002eb3 	.word	0x08002eb3
 8002e98:	08002ea1 	.word	0x08002ea1
 8002e9c:	08002f37 	.word	0x08002f37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d046      	beq.n	8002f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e043      	b.n	8002f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eba:	d140      	bne.n	8002f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec0:	e03d      	b.n	8002f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	d121      	bne.n	8002f10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d837      	bhi.n	8002f42 <DMA_CheckFifoParam+0xda>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <DMA_CheckFifoParam+0x70>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002eef 	.word	0x08002eef
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f01 	.word	0x08002f01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      break;
 8002eec:	e030      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d025      	beq.n	8002f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efe:	e022      	b.n	8002f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f08:	d11f      	bne.n	8002f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f0e:	e01c      	b.n	8002f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d903      	bls.n	8002f1e <DMA_CheckFifoParam+0xb6>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d003      	beq.n	8002f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f1c:	e018      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      break;
 8002f22:	e015      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e00b      	b.n	8002f4e <DMA_CheckFifoParam+0xe6>
      break;
 8002f36:	bf00      	nop
 8002f38:	e00a      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e008      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e006      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e004      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	e159      	b.n	8003230 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f040 8148 	bne.w	800322a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d005      	beq.n	8002fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d130      	bne.n	8003014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 0201 	and.w	r2, r3, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b03      	cmp	r3, #3
 800301e:	d017      	beq.n	8003050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d123      	bne.n	80030a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0203 	and.w	r2, r3, #3
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a2 	beq.w	800322a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b57      	ldr	r3, [pc, #348]	; (8003248 <HAL_GPIO_Init+0x2e8>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a56      	ldr	r2, [pc, #344]	; (8003248 <HAL_GPIO_Init+0x2e8>)
 80030f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b54      	ldr	r3, [pc, #336]	; (8003248 <HAL_GPIO_Init+0x2e8>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003102:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_GPIO_Init+0x2ec>)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	220f      	movs	r2, #15
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a49      	ldr	r2, [pc, #292]	; (8003250 <HAL_GPIO_Init+0x2f0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d019      	beq.n	8003162 <HAL_GPIO_Init+0x202>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a48      	ldr	r2, [pc, #288]	; (8003254 <HAL_GPIO_Init+0x2f4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_GPIO_Init+0x1fe>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a47      	ldr	r2, [pc, #284]	; (8003258 <HAL_GPIO_Init+0x2f8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00d      	beq.n	800315a <HAL_GPIO_Init+0x1fa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a46      	ldr	r2, [pc, #280]	; (800325c <HAL_GPIO_Init+0x2fc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <HAL_GPIO_Init+0x1f6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a45      	ldr	r2, [pc, #276]	; (8003260 <HAL_GPIO_Init+0x300>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d101      	bne.n	8003152 <HAL_GPIO_Init+0x1f2>
 800314e:	2304      	movs	r3, #4
 8003150:	e008      	b.n	8003164 <HAL_GPIO_Init+0x204>
 8003152:	2307      	movs	r3, #7
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x204>
 8003156:	2303      	movs	r3, #3
 8003158:	e004      	b.n	8003164 <HAL_GPIO_Init+0x204>
 800315a:	2302      	movs	r3, #2
 800315c:	e002      	b.n	8003164 <HAL_GPIO_Init+0x204>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_GPIO_Init+0x204>
 8003162:	2300      	movs	r3, #0
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f002 0203 	and.w	r2, r2, #3
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4093      	lsls	r3, r2
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003174:	4935      	ldr	r1, [pc, #212]	; (800324c <HAL_GPIO_Init+0x2ec>)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_GPIO_Init+0x304>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031a6:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <HAL_GPIO_Init+0x304>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_GPIO_Init+0x304>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <HAL_GPIO_Init+0x304>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <HAL_GPIO_Init+0x304>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fa:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <HAL_GPIO_Init+0x304>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003200:	4b18      	ldr	r3, [pc, #96]	; (8003264 <HAL_GPIO_Init+0x304>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003224:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <HAL_GPIO_Init+0x304>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3301      	adds	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	f67f aea2 	bls.w	8002f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
 800324c:	40013800 	.word	0x40013800
 8003250:	40020000 	.word	0x40020000
 8003254:	40020400 	.word	0x40020400
 8003258:	40020800 	.word	0x40020800
 800325c:	40020c00 	.word	0x40020c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40013c00 	.word	0x40013c00

08003268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003278:	787b      	ldrb	r3, [r7, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003284:	e003      	b.n	800328e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	041a      	lsls	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e12b      	b.n	8003506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe fe88 	bl	8001fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003300:	f003 f874 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a81      	ldr	r2, [pc, #516]	; (8003510 <HAL_I2C_Init+0x274>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d807      	bhi.n	8003320 <HAL_I2C_Init+0x84>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a80      	ldr	r2, [pc, #512]	; (8003514 <HAL_I2C_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e006      	b.n	800332e <HAL_I2C_Init+0x92>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a7d      	ldr	r2, [pc, #500]	; (8003518 <HAL_I2C_Init+0x27c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0e7      	b.n	8003506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a78      	ldr	r2, [pc, #480]	; (800351c <HAL_I2C_Init+0x280>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a6a      	ldr	r2, [pc, #424]	; (8003510 <HAL_I2C_Init+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d802      	bhi.n	8003370 <HAL_I2C_Init+0xd4>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3301      	adds	r3, #1
 800336e:	e009      	b.n	8003384 <HAL_I2C_Init+0xe8>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <HAL_I2C_Init+0x284>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	430b      	orrs	r3, r1
 800338a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	495c      	ldr	r1, [pc, #368]	; (8003510 <HAL_I2C_Init+0x274>)
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d819      	bhi.n	80033d8 <HAL_I2C_Init+0x13c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e59      	subs	r1, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b8:	400b      	ands	r3, r1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_I2C_Init+0x138>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e59      	subs	r1, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	e051      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e04f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_I2C_Init+0x168>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_I2C_Init+0x18e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x196>
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_I2C_Init+0x1bc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e58      	subs	r0, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	fbb0 f3f3 	udiv	r3, r0, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6809      	ldr	r1, [r1, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6911      	ldr	r1, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	000186a0 	.word	0x000186a0
 8003514:	001e847f 	.word	0x001e847f
 8003518:	003d08ff 	.word	0x003d08ff
 800351c:	431bde83 	.word	0x431bde83
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	817b      	strh	r3, [r7, #10]
 8003536:	460b      	mov	r3, r1
 8003538:	813b      	strh	r3, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800353e:	f7ff f843 	bl	80025c8 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b20      	cmp	r3, #32
 800354e:	f040 80d9 	bne.w	8003704 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2319      	movs	r3, #25
 8003558:	2201      	movs	r2, #1
 800355a:	496d      	ldr	r1, [pc, #436]	; (8003710 <HAL_I2C_Mem_Write+0x1ec>)
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f002 f8ab 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	e0cc      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2C_Mem_Write+0x56>
 8003576:	2302      	movs	r3, #2
 8003578:	e0c5      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d007      	beq.n	80035a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2221      	movs	r2, #33	; 0x21
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2240      	movs	r2, #64	; 0x40
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <HAL_I2C_Mem_Write+0x1f0>)
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e2:	88f8      	ldrh	r0, [r7, #6]
 80035e4:	893a      	ldrh	r2, [r7, #8]
 80035e6:	8979      	ldrh	r1, [r7, #10]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4603      	mov	r3, r0
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f001 fe3a 	bl	800526c <I2C_RequestMemoryWrite>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d052      	beq.n	80036a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e081      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f002 f92c 	bl	8005864 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_I2C_Mem_Write+0x180>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d017      	beq.n	80036a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1aa      	bne.n	8003602 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f002 f918 	bl	80058e6 <I2C_WaitOnBTFFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e016      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	00100002 	.word	0x00100002
 8003714:	ffff0000 	.word	0xffff0000

08003718 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	; 0x30
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4603      	mov	r3, r0
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	460b      	mov	r3, r1
 800372c:	813b      	strh	r3, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7fe ff49 	bl	80025c8 <HAL_GetTick>
 8003736:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	f040 8208 	bne.w	8003b56 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2319      	movs	r3, #25
 800374c:	2201      	movs	r2, #1
 800374e:	497b      	ldr	r1, [pc, #492]	; (800393c <HAL_I2C_Mem_Read+0x224>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f001 ffb1 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	e1fb      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_I2C_Mem_Read+0x56>
 800376a:	2302      	movs	r3, #2
 800376c:	e1f4      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d007      	beq.n	8003794 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2222      	movs	r2, #34	; 0x22
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a5b      	ldr	r2, [pc, #364]	; (8003940 <HAL_I2C_Mem_Read+0x228>)
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037d6:	88f8      	ldrh	r0, [r7, #6]
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	8979      	ldrh	r1, [r7, #10]
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4603      	mov	r3, r0
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f001 fdd6 	bl	8005398 <I2C_RequestMemoryRead>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1b0      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d113      	bne.n	8003826 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	623b      	str	r3, [r7, #32]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e184      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	2b01      	cmp	r3, #1
 800382c:	d11b      	bne.n	8003866 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e164      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	2b02      	cmp	r3, #2
 800386c:	d11b      	bne.n	80038a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800388c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	e144      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038bc:	e138      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	f200 80f1 	bhi.w	8003aaa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d123      	bne.n	8003918 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f002 f879 	bl	80059cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e139      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003916:	e10b      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	2b02      	cmp	r3, #2
 800391e:	d14e      	bne.n	80039be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	2200      	movs	r2, #0
 8003928:	4906      	ldr	r1, [pc, #24]	; (8003944 <HAL_I2C_Mem_Read+0x22c>)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f001 fec4 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e10e      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
 800393a:	bf00      	nop
 800393c:	00100002 	.word	0x00100002
 8003940:	ffff0000 	.word	0xffff0000
 8003944:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039bc:	e0b8      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2200      	movs	r2, #0
 80039c6:	4966      	ldr	r1, [pc, #408]	; (8003b60 <HAL_I2C_Mem_Read+0x448>)
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f001 fe75 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0bf      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2200      	movs	r2, #0
 8003a22:	494f      	ldr	r1, [pc, #316]	; (8003b60 <HAL_I2C_Mem_Read+0x448>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f001 fe47 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e091      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa8:	e042      	b.n	8003b30 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 ff8c 	bl	80059cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e04c      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d118      	bne.n	8003b30 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f aec2 	bne.w	80038be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	; 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010004 	.word	0x00010004

08003b64 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	460b      	mov	r3, r1
 8003b78:	813b      	strh	r3, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	f040 809a 	bne.w	8003cc4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <HAL_I2C_Mem_Read_IT+0x170>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	08db      	lsrs	r3, r3, #3
 8003b96:	4a50      	ldr	r2, [pc, #320]	; (8003cd8 <HAL_I2C_Mem_Read_IT+0x174>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	0a1a      	lsrs	r2, r3, #8
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e070      	b.n	8003cc6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d0db      	beq.n	8003baa <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2C_Mem_Read_IT+0x9c>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e062      	b.n	8003cc6 <HAL_I2C_Mem_Read_IT+0x162>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d007      	beq.n	8003c26 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c34:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2222      	movs	r2, #34	; 0x22
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2240      	movs	r2, #64	; 0x40
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a3a      	ldr	r2, [r7, #32]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <HAL_I2C_Mem_Read_IT+0x178>)
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c68:	897a      	ldrh	r2, [r7, #10]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003c6e:	893a      	ldrh	r2, [r7, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003cbe:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000000 	.word	0x20000000
 8003cd8:	14f8b589 	.word	0x14f8b589
 8003cdc:	ffff0000 	.word	0xffff0000

08003ce0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d003      	beq.n	8003d18 <HAL_I2C_EV_IRQHandler+0x38>
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	f040 80c1 	bne.w	8003e9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <HAL_I2C_EV_IRQHandler+0x6e>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d38:	d003      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x62>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d40:	d101      	bne.n	8003d46 <HAL_I2C_EV_IRQHandler+0x66>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x68>
 8003d46:	2300      	movs	r3, #0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	f000 8132 	beq.w	8003fb2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00c      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0x92>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	0a5b      	lsrs	r3, r3, #9
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 feb6 	bl	8005ad6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fcd2 	bl	8004714 <I2C_Master_SB>
 8003d70:	e092      	b.n	8003e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	08db      	lsrs	r3, r3, #3
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_I2C_EV_IRQHandler+0xb2>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	0a5b      	lsrs	r3, r3, #9
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fd48 	bl	8004820 <I2C_Master_ADD10>
 8003d90:	e082      	b.n	8003e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_I2C_EV_IRQHandler+0xd2>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	0a5b      	lsrs	r3, r3, #9
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fd62 	bl	8004874 <I2C_Master_ADDR>
 8003db0:	e072      	b.n	8003e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d03b      	beq.n	8003e36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	f000 80f3 	beq.w	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	09db      	lsrs	r3, r3, #7
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00f      	beq.n	8003dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	0a9b      	lsrs	r3, r3, #10
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f942 	bl	800407e <I2C_MasterTransmit_TXE>
 8003dfa:	e04d      	b.n	8003e98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80d6 	beq.w	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	0a5b      	lsrs	r3, r3, #9
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80cf 	beq.w	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e18:	7bbb      	ldrb	r3, [r7, #14]
 8003e1a:	2b21      	cmp	r3, #33	; 0x21
 8003e1c:	d103      	bne.n	8003e26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f9c9 	bl	80041b6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e24:	e0c7      	b.n	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	f040 80c4 	bne.w	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa37 	bl	80042a2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e34:	e0bf      	b.n	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e44:	f000 80b7 	beq.w	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	099b      	lsrs	r3, r3, #6
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00f      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x194>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x194>
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 faac 	bl	80043ca <I2C_MasterReceive_RXNE>
 8003e72:	e011      	b.n	8003e98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 809a 	beq.w	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	0a5b      	lsrs	r3, r3, #9
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8093 	beq.w	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb55 	bl	8004540 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e96:	e08e      	b.n	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e98:	e08d      	b.n	8003fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e007      	b.n	8003ebc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d012      	beq.n	8003eee <HAL_I2C_EV_IRQHandler+0x20e>
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	0a5b      	lsrs	r3, r3, #9
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 ff13 	bl	8004d12 <I2C_Slave_ADDR>
 8003eec:	e066      	b.n	8003fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_I2C_EV_IRQHandler+0x22e>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	0a5b      	lsrs	r3, r3, #9
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 ff4e 	bl	8004da8 <I2C_Slave_STOPF>
 8003f0c:	e056      	b.n	8003fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f0e:	7bbb      	ldrb	r3, [r7, #14]
 8003f10:	2b21      	cmp	r3, #33	; 0x21
 8003f12:	d002      	beq.n	8003f1a <HAL_I2C_EV_IRQHandler+0x23a>
 8003f14:	7bbb      	ldrb	r3, [r7, #14]
 8003f16:	2b29      	cmp	r3, #41	; 0x29
 8003f18:	d125      	bne.n	8003f66 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	09db      	lsrs	r3, r3, #7
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00f      	beq.n	8003f46 <HAL_I2C_EV_IRQHandler+0x266>
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	0a9b      	lsrs	r3, r3, #10
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_I2C_EV_IRQHandler+0x266>
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fe29 	bl	8004b96 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f44:	e039      	b.n	8003fba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d033      	beq.n	8003fba <HAL_I2C_EV_IRQHandler+0x2da>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	0a5b      	lsrs	r3, r3, #9
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02d      	beq.n	8003fba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fe56 	bl	8004c10 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f64:	e029      	b.n	8003fba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	099b      	lsrs	r3, r3, #6
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00f      	beq.n	8003f92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	0a9b      	lsrs	r3, r3, #10
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fe61 	bl	8004c52 <I2C_SlaveReceive_RXNE>
 8003f90:	e014      	b.n	8003fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00e      	beq.n	8003fbc <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	0a5b      	lsrs	r3, r3, #9
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fe8f 	bl	8004cce <I2C_SlaveReceive_BTF>
 8003fb0:	e004      	b.n	8003fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003fb2:	bf00      	nop
 8003fb4:	e002      	b.n	8003fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	70fb      	strb	r3, [r7, #3]
 800401e:	4613      	mov	r3, r2
 8004020:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004094:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d150      	bne.n	8004146 <I2C_MasterTransmit_TXE+0xc8>
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b21      	cmp	r3, #33	; 0x21
 80040a8:	d14d      	bne.n	8004146 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d01d      	beq.n	80040ec <I2C_MasterTransmit_TXE+0x6e>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d01a      	beq.n	80040ec <I2C_MasterTransmit_TXE+0x6e>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040bc:	d016      	beq.n	80040ec <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040cc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2211      	movs	r2, #17
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff6c 	bl	8003fc2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ea:	e060      	b.n	80041ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040fa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d107      	bne.n	8004136 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ff87 	bl	8004042 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004134:	e03b      	b.n	80041ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff ff3f 	bl	8003fc2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004144:	e033      	b.n	80041ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b21      	cmp	r3, #33	; 0x21
 800414a:	d005      	beq.n	8004158 <I2C_MasterTransmit_TXE+0xda>
 800414c:	7bbb      	ldrb	r3, [r7, #14]
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d12d      	bne.n	80041ae <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b22      	cmp	r3, #34	; 0x22
 8004156:	d12a      	bne.n	80041ae <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d108      	bne.n	8004174 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004170:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004172:	e01c      	b.n	80041ae <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d103      	bne.n	8004188 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f88e 	bl	80042a2 <I2C_MemoryTransmit_TXE_BTF>
}
 8004186:	e012      	b.n	80041ae <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041ac:	e7ff      	b.n	80041ae <I2C_MasterTransmit_TXE+0x130>
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b21      	cmp	r3, #33	; 0x21
 80041ce:	d164      	bne.n	800429a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d012      	beq.n	8004200 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041fe:	e04c      	b.n	800429a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d01d      	beq.n	8004242 <I2C_MasterTransmit_BTF+0x8c>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b20      	cmp	r3, #32
 800420a:	d01a      	beq.n	8004242 <I2C_MasterTransmit_BTF+0x8c>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004212:	d016      	beq.n	8004242 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004222:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2211      	movs	r2, #17
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fec1 	bl	8003fc2 <HAL_I2C_MasterTxCpltCallback>
}
 8004240:	e02b      	b.n	800429a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004250:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004260:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d107      	bne.n	800428c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff fedc 	bl	8004042 <HAL_I2C_MemTxCpltCallback>
}
 800428a:	e006      	b.n	800429a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fe94 	bl	8003fc2 <HAL_I2C_MasterTxCpltCallback>
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11d      	bne.n	80042f6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10b      	bne.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d2:	1c9a      	adds	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042d8:	e073      	b.n	80043c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042de:	b29b      	uxth	r3, r3
 80042e0:	121b      	asrs	r3, r3, #8
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042f4:	e065      	b.n	80043c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10b      	bne.n	8004316 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004302:	b2da      	uxtb	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004314:	e055      	b.n	80043c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431a:	2b02      	cmp	r3, #2
 800431c:	d151      	bne.n	80043c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b22      	cmp	r3, #34	; 0x22
 8004322:	d10d      	bne.n	8004340 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004332:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800433e:	e040      	b.n	80043c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d015      	beq.n	8004376 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	2b21      	cmp	r3, #33	; 0x21
 800434e:	d112      	bne.n	8004376 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	781a      	ldrb	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004374:	e025      	b.n	80043c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d120      	bne.n	80043c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b21      	cmp	r3, #33	; 0x21
 8004384:	d11d      	bne.n	80043c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004394:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fe40 	bl	8004042 <HAL_I2C_MemTxCpltCallback>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b22      	cmp	r3, #34	; 0x22
 80043dc:	f040 80ac 	bne.w	8004538 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d921      	bls.n	8004432 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b03      	cmp	r3, #3
 800441c:	f040 808c 	bne.w	8004538 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004430:	e082      	b.n	8004538 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2b02      	cmp	r3, #2
 8004438:	d075      	beq.n	8004526 <I2C_MasterReceive_RXNE+0x15c>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d002      	beq.n	8004446 <I2C_MasterReceive_RXNE+0x7c>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d16f      	bne.n	8004526 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f001 fa8e 	bl	8005968 <I2C_WaitOnSTOPRequestThroughIT>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d142      	bne.n	80044d8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004460:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004470:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d10a      	bne.n	80044c2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd fb7e 	bl	8001bbc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044c0:	e03a      	b.n	8004538 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2212      	movs	r2, #18
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fd80 	bl	8003fd6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044d6:	e02f      	b.n	8004538 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fd99 	bl	8004056 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004524:	e008      	b.n	8004538 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004534:	605a      	str	r2, [r3, #4]
}
 8004536:	e7ff      	b.n	8004538 <I2C_MasterReceive_RXNE+0x16e>
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004566:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800458e:	e0bd      	b.n	800470c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b03      	cmp	r3, #3
 8004598:	d129      	bne.n	80045ee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d00a      	beq.n	80045c6 <I2C_MasterReceive_BTF+0x86>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d007      	beq.n	80045c6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045ec:	e08e      	b.n	800470c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d176      	bne.n	80046e6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d002      	beq.n	8004604 <I2C_MasterReceive_BTF+0xc4>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b10      	cmp	r3, #16
 8004602:	d108      	bne.n	8004616 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e019      	b.n	800464a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d002      	beq.n	8004622 <I2C_MasterReceive_BTF+0xe2>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d108      	bne.n	8004634 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e00a      	b.n	800464a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b10      	cmp	r3, #16
 8004638:	d007      	beq.n	800464a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004648:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046a4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d10a      	bne.n	80046d0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fd fa77 	bl	8001bbc <HAL_I2C_MemRxCpltCallback>
}
 80046ce:	e01d      	b.n	800470c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2212      	movs	r2, #18
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fc79 	bl	8003fd6 <HAL_I2C_MasterRxCpltCallback>
}
 80046e4:	e012      	b.n	800470c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d117      	bne.n	8004758 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004740:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004742:	e067      	b.n	8004814 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	b2da      	uxtb	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	611a      	str	r2, [r3, #16]
}
 8004756:	e05d      	b.n	8004814 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004760:	d133      	bne.n	80047ca <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b21      	cmp	r3, #33	; 0x21
 800476c:	d109      	bne.n	8004782 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800477e:	611a      	str	r2, [r3, #16]
 8004780:	e008      	b.n	8004794 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	b2da      	uxtb	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <I2C_Master_SB+0x92>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d108      	bne.n	80047b8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d032      	beq.n	8004814 <I2C_Master_SB+0x100>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02d      	beq.n	8004814 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c6:	605a      	str	r2, [r3, #4]
}
 80047c8:	e024      	b.n	8004814 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10e      	bne.n	80047f0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	11db      	asrs	r3, r3, #7
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f003 0306 	and.w	r3, r3, #6
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f063 030f 	orn	r3, r3, #15
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	611a      	str	r2, [r3, #16]
}
 80047ee:	e011      	b.n	8004814 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10d      	bne.n	8004814 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	11db      	asrs	r3, r3, #7
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0306 	and.w	r3, r3, #6
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f063 030e 	orn	r3, r3, #14
 800480c:	b2da      	uxtb	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	611a      	str	r2, [r3, #16]
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482c:	b2da      	uxtb	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <I2C_Master_ADD10+0x26>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00c      	beq.n	8004868 <I2C_Master_ADD10+0x48>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004866:	605a      	str	r2, [r3, #4]
  }
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004874:	b480      	push	{r7}
 8004876:	b091      	sub	sp, #68	; 0x44
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b22      	cmp	r3, #34	; 0x22
 800489c:	f040 8169 	bne.w	8004b72 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10f      	bne.n	80048c8 <I2C_Master_ADDR+0x54>
 80048a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d10b      	bne.n	80048c8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b0:	2300      	movs	r3, #0
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	e160      	b.n	8004b8a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d11d      	bne.n	800490c <I2C_Master_ADDR+0x98>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048d8:	d118      	bne.n	800490c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048fe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	651a      	str	r2, [r3, #80]	; 0x50
 800490a:	e13e      	b.n	8004b8a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d113      	bne.n	800493e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e115      	b.n	8004b6a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	f040 808a 	bne.w	8004a5e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004950:	d137      	bne.n	80049c2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004960:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004970:	d113      	bne.n	800499a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004980:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	e0e7      	b.n	8004b6a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499a:	2300      	movs	r3, #0
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	e0d3      	b.n	8004b6a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d02e      	beq.n	8004a26 <I2C_Master_ADDR+0x1b2>
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d02b      	beq.n	8004a26 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d0:	2b12      	cmp	r3, #18
 80049d2:	d102      	bne.n	80049da <I2C_Master_ADDR+0x166>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d125      	bne.n	8004a26 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d00e      	beq.n	80049fe <I2C_Master_ADDR+0x18a>
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d00b      	beq.n	80049fe <I2C_Master_ADDR+0x18a>
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d008      	beq.n	80049fe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e007      	b.n	8004a0e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	e0a1      	b.n	8004b6a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a34:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e085      	b.n	8004b6a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d14d      	bne.n	8004b04 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d016      	beq.n	8004a9c <I2C_Master_ADDR+0x228>
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d013      	beq.n	8004a9c <I2C_Master_ADDR+0x228>
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d010      	beq.n	8004a9c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a88:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e007      	b.n	8004aac <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aaa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aba:	d117      	bne.n	8004aec <I2C_Master_ADDR+0x278>
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ac2:	d00b      	beq.n	8004adc <I2C_Master_ADDR+0x268>
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d008      	beq.n	8004adc <I2C_Master_ADDR+0x268>
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d005      	beq.n	8004adc <I2C_Master_ADDR+0x268>
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d002      	beq.n	8004adc <I2C_Master_ADDR+0x268>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d107      	bne.n	8004aec <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	e032      	b.n	8004b6a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b12:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b22:	d117      	bne.n	8004b54 <I2C_Master_ADDR+0x2e0>
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b2a:	d00b      	beq.n	8004b44 <I2C_Master_ADDR+0x2d0>
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d008      	beq.n	8004b44 <I2C_Master_ADDR+0x2d0>
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d005      	beq.n	8004b44 <I2C_Master_ADDR+0x2d0>
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d002      	beq.n	8004b44 <I2C_Master_ADDR+0x2d0>
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d107      	bne.n	8004b54 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b52:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b54:	2300      	movs	r3, #0
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b70:	e00b      	b.n	8004b8a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
}
 8004b88:	e7ff      	b.n	8004b8a <I2C_Master_ADDR+0x316>
 8004b8a:	bf00      	nop
 8004b8c:	3744      	adds	r7, #68	; 0x44
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02b      	beq.n	8004c08 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d114      	bne.n	8004c08 <I2C_SlaveTransmit_TXE+0x72>
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b29      	cmp	r3, #41	; 0x29
 8004be2:	d111      	bne.n	8004c08 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2221      	movs	r2, #33	; 0x21
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2228      	movs	r2, #40	; 0x28
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff f9f1 	bl	8003fea <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d011      	beq.n	8004c46 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	781a      	ldrb	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d02c      	beq.n	8004cc6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d114      	bne.n	8004cc6 <I2C_SlaveReceive_RXNE+0x74>
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca0:	d111      	bne.n	8004cc6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2222      	movs	r2, #34	; 0x22
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2228      	movs	r2, #40	; 0x28
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff f99c 	bl	8003ffe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d2c:	2b28      	cmp	r3, #40	; 0x28
 8004d2e:	d127      	bne.n	8004d80 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	09db      	lsrs	r3, r3, #7
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	81bb      	strh	r3, [r7, #12]
 8004d62:	e002      	b.n	8004d6a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d72:	89ba      	ldrh	r2, [r7, #12]
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff f94a 	bl	8004012 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d7e:	e00e      	b.n	8004d9e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d80:	2300      	movs	r3, #0
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e04:	d172      	bne.n	8004eec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b22      	cmp	r3, #34	; 0x22
 8004e0a:	d002      	beq.n	8004e12 <I2C_Slave_STOPF+0x6a>
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e10:	d135      	bne.n	8004e7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f043 0204 	orr.w	r2, r3, #4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fd ffc8 	bl	8002de0 <HAL_DMA_GetState>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d049      	beq.n	8004eea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	4a69      	ldr	r2, [pc, #420]	; (8005000 <I2C_Slave_STOPF+0x258>)
 8004e5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd fe10 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d03d      	beq.n	8004eea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e7c:	e035      	b.n	8004eea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f043 0204 	orr.w	r2, r3, #4
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fd ff92 	bl	8002de0 <HAL_DMA_GetState>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d014      	beq.n	8004eec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	4a4e      	ldr	r2, [pc, #312]	; (8005000 <I2C_Slave_STOPF+0x258>)
 8004ec8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd fdda 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4798      	blx	r3
 8004ee8:	e000      	b.n	8004eec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d03e      	beq.n	8004f74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d112      	bne.n	8004f2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b40      	cmp	r3, #64	; 0x40
 8004f36:	d112      	bne.n	8004f5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f043 0204 	orr.w	r2, r3, #4
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f843 	bl	8005008 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f82:	e039      	b.n	8004ff8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b2a      	cmp	r3, #42	; 0x2a
 8004f88:	d109      	bne.n	8004f9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2228      	movs	r2, #40	; 0x28
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff f830 	bl	8003ffe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b28      	cmp	r3, #40	; 0x28
 8004fa8:	d111      	bne.n	8004fce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <I2C_Slave_STOPF+0x25c>)
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff f831 	bl	800402e <HAL_I2C_ListenCpltCallback>
}
 8004fcc:	e014      	b.n	8004ff8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	2b22      	cmp	r3, #34	; 0x22
 8004fd4:	d002      	beq.n	8004fdc <I2C_Slave_STOPF+0x234>
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b22      	cmp	r3, #34	; 0x22
 8004fda:	d10d      	bne.n	8004ff8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff f803 	bl	8003ffe <HAL_I2C_SlaveRxCpltCallback>
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	08005569 	.word	0x08005569
 8005004:	ffff0000 	.word	0xffff0000

08005008 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	2b10      	cmp	r3, #16
 8005024:	d002      	beq.n	800502c <I2C_ITError+0x24>
 8005026:	7bbb      	ldrb	r3, [r7, #14]
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d10a      	bne.n	8005042 <I2C_ITError+0x3a>
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b22      	cmp	r3, #34	; 0x22
 8005030:	d107      	bne.n	8005042 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005040:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005048:	2b28      	cmp	r3, #40	; 0x28
 800504a:	d107      	bne.n	800505c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2228      	movs	r2, #40	; 0x28
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800505a:	e015      	b.n	8005088 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506a:	d00a      	beq.n	8005082 <I2C_ITError+0x7a>
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b60      	cmp	r3, #96	; 0x60
 8005070:	d007      	beq.n	8005082 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005096:	d162      	bne.n	800515e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d020      	beq.n	80050f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ba:	4a6a      	ldr	r2, [pc, #424]	; (8005264 <I2C_ITError+0x25c>)
 80050bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fd fce0 	bl	8002a88 <HAL_DMA_Abort_IT>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8089 	beq.w	80051e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050f2:	4610      	mov	r0, r2
 80050f4:	4798      	blx	r3
 80050f6:	e074      	b.n	80051e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	4a59      	ldr	r2, [pc, #356]	; (8005264 <I2C_ITError+0x25c>)
 80050fe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	4618      	mov	r0, r3
 8005106:	f7fd fcbf 	bl	8002a88 <HAL_DMA_Abort_IT>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d068      	beq.n	80051e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d10b      	bne.n	8005136 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005158:	4610      	mov	r0, r2
 800515a:	4798      	blx	r3
 800515c:	e041      	b.n	80051e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b60      	cmp	r3, #96	; 0x60
 8005168:	d125      	bne.n	80051b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d10b      	bne.n	800519e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fe ff5b 	bl	800406a <HAL_I2C_AbortCpltCallback>
 80051b4:	e015      	b.n	80051e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d10b      	bne.n	80051dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7fe ff3a 	bl	8004056 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10e      	bne.n	8005210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005226:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b04      	cmp	r3, #4
 8005232:	d113      	bne.n	800525c <I2C_ITError+0x254>
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b28      	cmp	r3, #40	; 0x28
 8005238:	d110      	bne.n	800525c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a0a      	ldr	r2, [pc, #40]	; (8005268 <I2C_ITError+0x260>)
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fe fee9 	bl	800402e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	08005569 	.word	0x08005569
 8005268:	ffff0000 	.word	0xffff0000

0800526c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	461a      	mov	r2, r3
 800527a:	4603      	mov	r3, r0
 800527c:	817b      	strh	r3, [r7, #10]
 800527e:	460b      	mov	r3, r1
 8005280:	813b      	strh	r3, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	2200      	movs	r2, #0
 800529e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fa08 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052bc:	d103      	bne.n	80052c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e05f      	b.n	800538a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ca:	897b      	ldrh	r3, [r7, #10]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	6a3a      	ldr	r2, [r7, #32]
 80052de:	492d      	ldr	r1, [pc, #180]	; (8005394 <I2C_RequestMemoryWrite+0x128>)
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fa40 	bl	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e04c      	b.n	800538a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005308:	6a39      	ldr	r1, [r7, #32]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 faaa 	bl	8005864 <I2C_WaitOnTXEFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	2b04      	cmp	r3, #4
 800531c:	d107      	bne.n	800532e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e02b      	b.n	800538a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d105      	bne.n	8005344 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005338:	893b      	ldrh	r3, [r7, #8]
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	611a      	str	r2, [r3, #16]
 8005342:	e021      	b.n	8005388 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005344:	893b      	ldrh	r3, [r7, #8]
 8005346:	0a1b      	lsrs	r3, r3, #8
 8005348:	b29b      	uxth	r3, r3
 800534a:	b2da      	uxtb	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005354:	6a39      	ldr	r1, [r7, #32]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fa84 	bl	8005864 <I2C_WaitOnTXEFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	2b04      	cmp	r3, #4
 8005368:	d107      	bne.n	800537a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005378:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e005      	b.n	800538a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800537e:	893b      	ldrh	r3, [r7, #8]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	00010002 	.word	0x00010002

08005398 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	460b      	mov	r3, r1
 80053ac:	813b      	strh	r3, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	2200      	movs	r2, #0
 80053da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f96a 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f8:	d103      	bne.n	8005402 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e0aa      	b.n	800555c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005406:	897b      	ldrh	r3, [r7, #10]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005414:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	6a3a      	ldr	r2, [r7, #32]
 800541a:	4952      	ldr	r1, [pc, #328]	; (8005564 <I2C_RequestMemoryRead+0x1cc>)
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f9a2 	bl	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e097      	b.n	800555c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	6a39      	ldr	r1, [r7, #32]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fa0c 	bl	8005864 <I2C_WaitOnTXEFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2b04      	cmp	r3, #4
 8005458:	d107      	bne.n	800546a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005468:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e076      	b.n	800555c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005474:	893b      	ldrh	r3, [r7, #8]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	611a      	str	r2, [r3, #16]
 800547e:	e021      	b.n	80054c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005480:	893b      	ldrh	r3, [r7, #8]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	b29b      	uxth	r3, r3
 8005486:	b2da      	uxtb	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	6a39      	ldr	r1, [r7, #32]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f9e6 	bl	8005864 <I2C_WaitOnTXEFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d107      	bne.n	80054b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e050      	b.n	800555c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ba:	893b      	ldrh	r3, [r7, #8]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	6a39      	ldr	r1, [r7, #32]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f9cb 	bl	8005864 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d107      	bne.n	80054ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e035      	b.n	800555c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	2200      	movs	r2, #0
 8005508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f8d3 	bl	80056b8 <I2C_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00d      	beq.n	8005534 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005526:	d103      	bne.n	8005530 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e013      	b.n	800555c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005534:	897b      	ldrh	r3, [r7, #10]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	6a3a      	ldr	r2, [r7, #32]
 8005548:	4906      	ldr	r1, [pc, #24]	; (8005564 <I2C_RequestMemoryRead+0x1cc>)
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f90b 	bl	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	00010002 	.word	0x00010002

08005568 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005582:	4b4b      	ldr	r3, [pc, #300]	; (80056b0 <I2C_DMAAbort+0x148>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	08db      	lsrs	r3, r3, #3
 8005588:	4a4a      	ldr	r2, [pc, #296]	; (80056b4 <I2C_DMAAbort+0x14c>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	0a1a      	lsrs	r2, r3, #8
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	00da      	lsls	r2, r3, #3
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80055ae:	e00a      	b.n	80055c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c4:	d0ea      	beq.n	800559c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	2200      	movs	r2, #0
 80055d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	2200      	movs	r2, #0
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2200      	movs	r2, #0
 80055fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	2200      	movs	r2, #0
 800560a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	2200      	movs	r2, #0
 800561a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b60      	cmp	r3, #96	; 0x60
 8005636:	d10e      	bne.n	8005656 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800564e:	6978      	ldr	r0, [r7, #20]
 8005650:	f7fe fd0b 	bl	800406a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005654:	e027      	b.n	80056a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800565c:	2b28      	cmp	r3, #40	; 0x28
 800565e:	d117      	bne.n	8005690 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800567e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2228      	movs	r2, #40	; 0x28
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800568e:	e007      	b.n	80056a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80056a0:	6978      	ldr	r0, [r7, #20]
 80056a2:	f7fe fcd8 	bl	8004056 <HAL_I2C_ErrorCallback>
}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000000 	.word	0x20000000
 80056b4:	14f8b589 	.word	0x14f8b589

080056b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c8:	e025      	b.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d021      	beq.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d2:	f7fc ff79 	bl	80025c8 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d116      	bne.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e023      	b.n	800575e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d10d      	bne.n	800573c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	43da      	mvns	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4013      	ands	r3, r2
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	bf0c      	ite	eq
 8005732:	2301      	moveq	r3, #1
 8005734:	2300      	movne	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	e00c      	b.n	8005756 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	43da      	mvns	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	429a      	cmp	r2, r3
 800575a:	d0b6      	beq.n	80056ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005774:	e051      	b.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005784:	d123      	bne.n	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005794:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800579e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0204 	orr.w	r2, r3, #4
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e046      	b.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d021      	beq.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d6:	f7fc fef7 	bl	80025c8 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d302      	bcc.n	80057ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d116      	bne.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e020      	b.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10c      	bne.n	800583e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	43da      	mvns	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4013      	ands	r3, r2
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	bf14      	ite	ne
 8005836:	2301      	movne	r3, #1
 8005838:	2300      	moveq	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	e00b      	b.n	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	43da      	mvns	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d18d      	bne.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005870:	e02d      	b.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f900 	bl	8005a78 <I2C_IsAcknowledgeFailed>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e02d      	b.n	80058de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d021      	beq.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588a:	f7fc fe9d 	bl	80025c8 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d116      	bne.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e007      	b.n	80058de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d1ca      	bne.n	8005872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f2:	e02d      	b.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f8bf 	bl	8005a78 <I2C_IsAcknowledgeFailed>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e02d      	b.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d021      	beq.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590c:	f7fc fe5c 	bl	80025c8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d116      	bne.n	8005950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e007      	b.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b04      	cmp	r3, #4
 800595c:	d1ca      	bne.n	80058f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005974:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	08db      	lsrs	r3, r3, #3
 800597a:	4a13      	ldr	r2, [pc, #76]	; (80059c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	0a1a      	lsrs	r2, r3, #8
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3b01      	subs	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d107      	bne.n	80059a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e008      	b.n	80059b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b4:	d0e9      	beq.n	800598a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	20000000 	.word	0x20000000
 80059c8:	14f8b589 	.word	0x14f8b589

080059cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059d8:	e042      	b.n	8005a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d119      	bne.n	8005a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0210 	mvn.w	r2, #16
 80059f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e029      	b.n	8005a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1c:	f7fc fdd4 	bl	80025c8 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d116      	bne.n	8005a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e007      	b.n	8005a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d1b5      	bne.n	80059da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8e:	d11b      	bne.n	8005ac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	f043 0204 	orr.w	r2, r3, #4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ae6:	d103      	bne.n	8005af0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005aee:	e007      	b.n	8005b00 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005af8:	d102      	bne.n	8005b00 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2208      	movs	r2, #8
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e267      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d075      	beq.n	8005c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b2a:	4b88      	ldr	r3, [pc, #544]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d00c      	beq.n	8005b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b36:	4b85      	ldr	r3, [pc, #532]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d112      	bne.n	8005b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b42:	4b82      	ldr	r3, [pc, #520]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b4e:	d10b      	bne.n	8005b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	4b7e      	ldr	r3, [pc, #504]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05b      	beq.n	8005c14 <HAL_RCC_OscConfig+0x108>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d157      	bne.n	8005c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e242      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d106      	bne.n	8005b80 <HAL_RCC_OscConfig+0x74>
 8005b72:	4b76      	ldr	r3, [pc, #472]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a75      	ldr	r2, [pc, #468]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e01d      	b.n	8005bbc <HAL_RCC_OscConfig+0xb0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x98>
 8005b8a:	4b70      	ldr	r3, [pc, #448]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6f      	ldr	r2, [pc, #444]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b6d      	ldr	r3, [pc, #436]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6c      	ldr	r2, [pc, #432]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e00b      	b.n	8005bbc <HAL_RCC_OscConfig+0xb0>
 8005ba4:	4b69      	ldr	r3, [pc, #420]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a68      	ldr	r2, [pc, #416]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b66      	ldr	r3, [pc, #408]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a65      	ldr	r2, [pc, #404]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d013      	beq.n	8005bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fc fd00 	bl	80025c8 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fc fcfc 	bl	80025c8 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e207      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	4b5b      	ldr	r3, [pc, #364]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0xc0>
 8005bea:	e014      	b.n	8005c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fc fcec 	bl	80025c8 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fc fce8 	bl	80025c8 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e1f3      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c06:	4b51      	ldr	r3, [pc, #324]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0xe8>
 8005c12:	e000      	b.n	8005c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d063      	beq.n	8005cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c22:	4b4a      	ldr	r3, [pc, #296]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2e:	4b47      	ldr	r3, [pc, #284]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d11c      	bne.n	8005c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c3a:	4b44      	ldr	r3, [pc, #272]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d116      	bne.n	8005c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c46:	4b41      	ldr	r3, [pc, #260]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_RCC_OscConfig+0x152>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d001      	beq.n	8005c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e1c7      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5e:	4b3b      	ldr	r3, [pc, #236]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4937      	ldr	r1, [pc, #220]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c72:	e03a      	b.n	8005cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d020      	beq.n	8005cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c7c:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <HAL_RCC_OscConfig+0x244>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c82:	f7fc fca1 	bl	80025c8 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8a:	f7fc fc9d 	bl	80025c8 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e1a8      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9c:	4b2b      	ldr	r3, [pc, #172]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca8:	4b28      	ldr	r3, [pc, #160]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4925      	ldr	r1, [pc, #148]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]
 8005cbc:	e015      	b.n	8005cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCC_OscConfig+0x244>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fc fc80 	bl	80025c8 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ccc:	f7fc fc7c 	bl	80025c8 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e187      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cde:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d036      	beq.n	8005d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d016      	beq.n	8005d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <HAL_RCC_OscConfig+0x248>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fc fc60 	bl	80025c8 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d0c:	f7fc fc5c 	bl	80025c8 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e167      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f0      	beq.n	8005d0c <HAL_RCC_OscConfig+0x200>
 8005d2a:	e01b      	b.n	8005d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_RCC_OscConfig+0x248>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d32:	f7fc fc49 	bl	80025c8 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d38:	e00e      	b.n	8005d58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d3a:	f7fc fc45 	bl	80025c8 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d907      	bls.n	8005d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e150      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	42470000 	.word	0x42470000
 8005d54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ea      	bne.n	8005d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8097 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d72:	2300      	movs	r3, #0
 8005d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d76:	4b81      	ldr	r3, [pc, #516]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10f      	bne.n	8005da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	4b7d      	ldr	r3, [pc, #500]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	4a7c      	ldr	r2, [pc, #496]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d90:	6413      	str	r3, [r2, #64]	; 0x40
 8005d92:	4b7a      	ldr	r3, [pc, #488]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	60bb      	str	r3, [r7, #8]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da2:	4b77      	ldr	r3, [pc, #476]	; (8005f80 <HAL_RCC_OscConfig+0x474>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d118      	bne.n	8005de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dae:	4b74      	ldr	r3, [pc, #464]	; (8005f80 <HAL_RCC_OscConfig+0x474>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a73      	ldr	r2, [pc, #460]	; (8005f80 <HAL_RCC_OscConfig+0x474>)
 8005db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dba:	f7fc fc05 	bl	80025c8 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc2:	f7fc fc01 	bl	80025c8 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e10c      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd4:	4b6a      	ldr	r3, [pc, #424]	; (8005f80 <HAL_RCC_OscConfig+0x474>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d106      	bne.n	8005df6 <HAL_RCC_OscConfig+0x2ea>
 8005de8:	4b64      	ldr	r3, [pc, #400]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dec:	4a63      	ldr	r2, [pc, #396]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	6713      	str	r3, [r2, #112]	; 0x70
 8005df4:	e01c      	b.n	8005e30 <HAL_RCC_OscConfig+0x324>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x30c>
 8005dfe:	4b5f      	ldr	r3, [pc, #380]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	4a5e      	ldr	r2, [pc, #376]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e04:	f043 0304 	orr.w	r3, r3, #4
 8005e08:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0a:	4b5c      	ldr	r3, [pc, #368]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	4a5b      	ldr	r2, [pc, #364]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6713      	str	r3, [r2, #112]	; 0x70
 8005e16:	e00b      	b.n	8005e30 <HAL_RCC_OscConfig+0x324>
 8005e18:	4b58      	ldr	r3, [pc, #352]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	4a57      	ldr	r2, [pc, #348]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e1e:	f023 0301 	bic.w	r3, r3, #1
 8005e22:	6713      	str	r3, [r2, #112]	; 0x70
 8005e24:	4b55      	ldr	r3, [pc, #340]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	4a54      	ldr	r2, [pc, #336]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e2a:	f023 0304 	bic.w	r3, r3, #4
 8005e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d015      	beq.n	8005e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fc fbc6 	bl	80025c8 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fc fbc2 	bl	80025c8 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e0cb      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e56:	4b49      	ldr	r3, [pc, #292]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0ee      	beq.n	8005e40 <HAL_RCC_OscConfig+0x334>
 8005e62:	e014      	b.n	8005e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e64:	f7fc fbb0 	bl	80025c8 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e6c:	f7fc fbac 	bl	80025c8 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e0b5      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e82:	4b3e      	ldr	r3, [pc, #248]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1ee      	bne.n	8005e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e94:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	4a38      	ldr	r2, [pc, #224]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80a1 	beq.w	8005fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eaa:	4b34      	ldr	r3, [pc, #208]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d05c      	beq.n	8005f70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d141      	bne.n	8005f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_RCC_OscConfig+0x478>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fc fb80 	bl	80025c8 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ecc:	f7fc fb7c 	bl	80025c8 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e087      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ede:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	3b01      	subs	r3, #1
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	061b      	lsls	r3, r3, #24
 8005f0e:	491b      	ldr	r1, [pc, #108]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <HAL_RCC_OscConfig+0x478>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1a:	f7fc fb55 	bl	80025c8 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f22:	f7fc fb51 	bl	80025c8 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e05c      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f34:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0f0      	beq.n	8005f22 <HAL_RCC_OscConfig+0x416>
 8005f40:	e054      	b.n	8005fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <HAL_RCC_OscConfig+0x478>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f48:	f7fc fb3e 	bl	80025c8 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f50:	f7fc fb3a 	bl	80025c8 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e045      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x444>
 8005f6e:	e03d      	b.n	8005fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d107      	bne.n	8005f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e038      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	40007000 	.word	0x40007000
 8005f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f88:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <HAL_RCC_OscConfig+0x4ec>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d028      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d121      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d11a      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fb8:	4013      	ands	r3, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d111      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d107      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800

08005ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0cc      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b68      	ldr	r3, [pc, #416]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d90c      	bls.n	8006038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b65      	ldr	r3, [pc, #404]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006026:	4b63      	ldr	r3, [pc, #396]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0b8      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006050:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4a58      	ldr	r2, [pc, #352]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800605a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006068:	4b53      	ldr	r3, [pc, #332]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4a52      	ldr	r2, [pc, #328]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006074:	4b50      	ldr	r3, [pc, #320]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	494d      	ldr	r1, [pc, #308]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	4313      	orrs	r3, r2
 8006084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d044      	beq.n	800611c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609a:	4b47      	ldr	r3, [pc, #284]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d119      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e07f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d003      	beq.n	80060ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d107      	bne.n	80060ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ba:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e06f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ca:	4b3b      	ldr	r3, [pc, #236]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e067      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060da:	4b37      	ldr	r3, [pc, #220]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f023 0203 	bic.w	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4934      	ldr	r1, [pc, #208]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060ec:	f7fc fa6c 	bl	80025c8 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f2:	e00a      	b.n	800610a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f4:	f7fc fa68 	bl	80025c8 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e04f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800610a:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 020c 	and.w	r2, r3, #12
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	429a      	cmp	r2, r3
 800611a:	d1eb      	bne.n	80060f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800611c:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d20c      	bcs.n	8006144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	4b20      	ldr	r3, [pc, #128]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e032      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006150:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4916      	ldr	r1, [pc, #88]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	490e      	ldr	r1, [pc, #56]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006182:	f000 f821 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8006186:	4602      	mov	r2, r0
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	490a      	ldr	r1, [pc, #40]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 8006194:	5ccb      	ldrb	r3, [r1, r3]
 8006196:	fa22 f303 	lsr.w	r3, r2, r3
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800619c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800619e:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_ClockConfig+0x1c8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fc f9cc 	bl	8002540 <HAL_InitTick>

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40023c00 	.word	0x40023c00
 80061b8:	40023800 	.word	0x40023800
 80061bc:	08009d10 	.word	0x08009d10
 80061c0:	20000000 	.word	0x20000000
 80061c4:	20000004 	.word	0x20000004

080061c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061cc:	b094      	sub	sp, #80	; 0x50
 80061ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	647b      	str	r3, [r7, #68]	; 0x44
 80061d4:	2300      	movs	r3, #0
 80061d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d8:	2300      	movs	r3, #0
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061e0:	4b79      	ldr	r3, [pc, #484]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d00d      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0x40>
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	f200 80e1 	bhi.w	80063b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x34>
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d003      	beq.n	8006202 <HAL_RCC_GetSysClockFreq+0x3a>
 80061fa:	e0db      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061fc:	4b73      	ldr	r3, [pc, #460]	; (80063cc <HAL_RCC_GetSysClockFreq+0x204>)
 80061fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006200:	e0db      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006202:	4b73      	ldr	r3, [pc, #460]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006206:	e0d8      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006208:	4b6f      	ldr	r3, [pc, #444]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006210:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006212:	4b6d      	ldr	r3, [pc, #436]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d063      	beq.n	80062e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800621e:	4b6a      	ldr	r3, [pc, #424]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	099b      	lsrs	r3, r3, #6
 8006224:	2200      	movs	r2, #0
 8006226:	63bb      	str	r3, [r7, #56]	; 0x38
 8006228:	63fa      	str	r2, [r7, #60]	; 0x3c
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
 8006232:	2300      	movs	r3, #0
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
 8006236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800623a:	4622      	mov	r2, r4
 800623c:	462b      	mov	r3, r5
 800623e:	f04f 0000 	mov.w	r0, #0
 8006242:	f04f 0100 	mov.w	r1, #0
 8006246:	0159      	lsls	r1, r3, #5
 8006248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800624c:	0150      	lsls	r0, r2, #5
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4621      	mov	r1, r4
 8006254:	1a51      	subs	r1, r2, r1
 8006256:	6139      	str	r1, [r7, #16]
 8006258:	4629      	mov	r1, r5
 800625a:	eb63 0301 	sbc.w	r3, r3, r1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800626c:	4659      	mov	r1, fp
 800626e:	018b      	lsls	r3, r1, #6
 8006270:	4651      	mov	r1, sl
 8006272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006276:	4651      	mov	r1, sl
 8006278:	018a      	lsls	r2, r1, #6
 800627a:	4651      	mov	r1, sl
 800627c:	ebb2 0801 	subs.w	r8, r2, r1
 8006280:	4659      	mov	r1, fp
 8006282:	eb63 0901 	sbc.w	r9, r3, r1
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800629a:	4690      	mov	r8, r2
 800629c:	4699      	mov	r9, r3
 800629e:	4623      	mov	r3, r4
 80062a0:	eb18 0303 	adds.w	r3, r8, r3
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	462b      	mov	r3, r5
 80062a8:	eb49 0303 	adc.w	r3, r9, r3
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062ba:	4629      	mov	r1, r5
 80062bc:	024b      	lsls	r3, r1, #9
 80062be:	4621      	mov	r1, r4
 80062c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062c4:	4621      	mov	r1, r4
 80062c6:	024a      	lsls	r2, r1, #9
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ce:	2200      	movs	r2, #0
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062d8:	f7fa fd0e 	bl	8000cf8 <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4613      	mov	r3, r2
 80062e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e4:	e058      	b.n	8006398 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062e6:	4b38      	ldr	r3, [pc, #224]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	099b      	lsrs	r3, r3, #6
 80062ec:	2200      	movs	r2, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	4611      	mov	r1, r2
 80062f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062f6:	623b      	str	r3, [r7, #32]
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
 80062fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006300:	4642      	mov	r2, r8
 8006302:	464b      	mov	r3, r9
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f04f 0100 	mov.w	r1, #0
 800630c:	0159      	lsls	r1, r3, #5
 800630e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006312:	0150      	lsls	r0, r2, #5
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4641      	mov	r1, r8
 800631a:	ebb2 0a01 	subs.w	sl, r2, r1
 800631e:	4649      	mov	r1, r9
 8006320:	eb63 0b01 	sbc.w	fp, r3, r1
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006330:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006334:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006338:	ebb2 040a 	subs.w	r4, r2, sl
 800633c:	eb63 050b 	sbc.w	r5, r3, fp
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	00eb      	lsls	r3, r5, #3
 800634a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800634e:	00e2      	lsls	r2, r4, #3
 8006350:	4614      	mov	r4, r2
 8006352:	461d      	mov	r5, r3
 8006354:	4643      	mov	r3, r8
 8006356:	18e3      	adds	r3, r4, r3
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	464b      	mov	r3, r9
 800635c:	eb45 0303 	adc.w	r3, r5, r3
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800636e:	4629      	mov	r1, r5
 8006370:	028b      	lsls	r3, r1, #10
 8006372:	4621      	mov	r1, r4
 8006374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006378:	4621      	mov	r1, r4
 800637a:	028a      	lsls	r2, r1, #10
 800637c:	4610      	mov	r0, r2
 800637e:	4619      	mov	r1, r3
 8006380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006382:	2200      	movs	r2, #0
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	61fa      	str	r2, [r7, #28]
 8006388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800638c:	f7fa fcb4 	bl	8000cf8 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4613      	mov	r3, r2
 8006396:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	0c1b      	lsrs	r3, r3, #16
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	3301      	adds	r3, #1
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063b2:	e002      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <HAL_RCC_GetSysClockFreq+0x204>)
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3750      	adds	r7, #80	; 0x50
 80063c0:	46bd      	mov	sp, r7
 80063c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063c6:	bf00      	nop
 80063c8:	40023800 	.word	0x40023800
 80063cc:	00f42400 	.word	0x00f42400
 80063d0:	007a1200 	.word	0x007a1200

080063d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d8:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80063da:	681b      	ldr	r3, [r3, #0]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	20000000 	.word	0x20000000

080063ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063f0:	f7ff fff0 	bl	80063d4 <HAL_RCC_GetHCLKFreq>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <HAL_RCC_GetPCLK1Freq+0x20>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	0a9b      	lsrs	r3, r3, #10
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	4903      	ldr	r1, [pc, #12]	; (8006410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006402:	5ccb      	ldrb	r3, [r1, r3]
 8006404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	bd80      	pop	{r7, pc}
 800640c:	40023800 	.word	0x40023800
 8006410:	08009d20 	.word	0x08009d20

08006414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006418:	f7ff ffdc 	bl	80063d4 <HAL_RCC_GetHCLKFreq>
 800641c:	4602      	mov	r2, r0
 800641e:	4b05      	ldr	r3, [pc, #20]	; (8006434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	0b5b      	lsrs	r3, r3, #13
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	4903      	ldr	r1, [pc, #12]	; (8006438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800642a:	5ccb      	ldrb	r3, [r1, r3]
 800642c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006430:	4618      	mov	r0, r3
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40023800 	.word	0x40023800
 8006438:	08009d20 	.word	0x08009d20

0800643c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e03f      	b.n	80064ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fb fe70 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fc7b 	bl	8006d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b0ba      	sub	sp, #232	; 0xe8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064fe:	2300      	movs	r3, #0
 8006500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006504:	2300      	movs	r3, #0
 8006506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10f      	bne.n	800653e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <HAL_UART_IRQHandler+0x66>
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fb65 	bl	8006c06 <UART_Receive_IT>
      return;
 800653c:	e256      	b.n	80069ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800653e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80de 	beq.w	8006704 <HAL_UART_IRQHandler+0x22c>
 8006548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80d1 	beq.w	8006704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <HAL_UART_IRQHandler+0xae>
 800656e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f043 0201 	orr.w	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <HAL_UART_IRQHandler+0xd2>
 8006592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f043 0202 	orr.w	r2, r3, #2
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_UART_IRQHandler+0xf6>
 80065b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f043 0204 	orr.w	r2, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d011      	beq.n	80065fe <HAL_UART_IRQHandler+0x126>
 80065da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f043 0208 	orr.w	r2, r3, #8
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 81ed 	beq.w	80069e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <HAL_UART_IRQHandler+0x14e>
 8006614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 faf0 	bl	8006c06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	bf0c      	ite	eq
 8006634:	2301      	moveq	r3, #1
 8006636:	2300      	movne	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <HAL_UART_IRQHandler+0x17a>
 800664a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d04f      	beq.n	80066f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9f8 	bl	8006a48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d141      	bne.n	80066ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3314      	adds	r3, #20
 800666c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800667c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3314      	adds	r3, #20
 800668e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800669e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1d9      	bne.n	8006666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d013      	beq.n	80066e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	4a7d      	ldr	r2, [pc, #500]	; (80068b4 <HAL_UART_IRQHandler+0x3dc>)
 80066c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fc f9de 	bl	8002a88 <HAL_DMA_Abort_IT>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d016      	beq.n	8006700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	e00e      	b.n	8006700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f99a 	bl	8006a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e8:	e00a      	b.n	8006700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f996 	bl	8006a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	e006      	b.n	8006700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f992 	bl	8006a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066fe:	e170      	b.n	80069e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	bf00      	nop
    return;
 8006702:	e16e      	b.n	80069e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	2b01      	cmp	r3, #1
 800670a:	f040 814a 	bne.w	80069a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800670e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8143 	beq.w	80069a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800671c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 813c 	beq.w	80069a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60bb      	str	r3, [r7, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	f040 80b4 	bne.w	80068b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800675c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8140 	beq.w	80069e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800676a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800676e:	429a      	cmp	r2, r3
 8006770:	f080 8139 	bcs.w	80069e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800677a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006786:	f000 8088 	beq.w	800689a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	330c      	adds	r3, #12
 80067b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1d9      	bne.n	800678a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3314      	adds	r3, #20
 80067dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800680c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e1      	bne.n	80067d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800683c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e3      	bne.n	8006812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686a:	f023 0310 	bic.w	r3, r3, #16
 800686e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	330c      	adds	r3, #12
 8006878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800687c:	65ba      	str	r2, [r7, #88]	; 0x58
 800687e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800688a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e3      	bne.n	8006858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	4618      	mov	r0, r3
 8006896:	f7fc f887 	bl	80029a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8c0 	bl	8006a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068b0:	e099      	b.n	80069e6 <HAL_UART_IRQHandler+0x50e>
 80068b2:	bf00      	nop
 80068b4:	08006b0f 	.word	0x08006b0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 808b 	beq.w	80069ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80068d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8086 	beq.w	80069ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006902:	647a      	str	r2, [r7, #68]	; 0x44
 8006904:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e3      	bne.n	80068de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3314      	adds	r3, #20
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	623b      	str	r3, [r7, #32]
   return(result);
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3314      	adds	r3, #20
 8006936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800693a:	633a      	str	r2, [r7, #48]	; 0x30
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e3      	bne.n	8006916 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	60fb      	str	r3, [r7, #12]
   return(result);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0310 	bic.w	r3, r3, #16
 8006972:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006980:	61fa      	str	r2, [r7, #28]
 8006982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	69b9      	ldr	r1, [r7, #24]
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	617b      	str	r3, [r7, #20]
   return(result);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e3      	bne.n	800695c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f848 	bl	8006a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069a0:	e023      	b.n	80069ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <HAL_UART_IRQHandler+0x4ea>
 80069ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f8bb 	bl	8006b36 <UART_Transmit_IT>
    return;
 80069c0:	e014      	b.n	80069ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <HAL_UART_IRQHandler+0x514>
 80069ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d008      	beq.n	80069ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8fb 	bl	8006bd6 <UART_EndTransmit_IT>
    return;
 80069e0:	e004      	b.n	80069ec <HAL_UART_IRQHandler+0x514>
    return;
 80069e2:	bf00      	nop
 80069e4:	e002      	b.n	80069ec <HAL_UART_IRQHandler+0x514>
      return;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <HAL_UART_IRQHandler+0x514>
      return;
 80069ea:	bf00      	nop
  }
}
 80069ec:	37e8      	adds	r7, #232	; 0xe8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop

080069f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b095      	sub	sp, #84	; 0x54
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a70:	643a      	str	r2, [r7, #64]	; 0x40
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3314      	adds	r3, #20
 8006a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3314      	adds	r3, #20
 8006aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e5      	bne.n	8006a84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d119      	bne.n	8006af4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f023 0310 	bic.w	r3, r3, #16
 8006ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae0:	61ba      	str	r2, [r7, #24]
 8006ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6979      	ldr	r1, [r7, #20]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	613b      	str	r3, [r7, #16]
   return(result);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e5      	bne.n	8006ac0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b02:	bf00      	nop
 8006b04:	3754      	adds	r7, #84	; 0x54
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff ff77 	bl	8006a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b21      	cmp	r3, #33	; 0x21
 8006b48:	d13e      	bne.n	8006bc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b52:	d114      	bne.n	8006b7e <UART_Transmit_IT+0x48>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d110      	bne.n	8006b7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	1c9a      	adds	r2, r3, #2
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	621a      	str	r2, [r3, #32]
 8006b7c:	e008      	b.n	8006b90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6211      	str	r1, [r2, #32]
 8006b88:	781a      	ldrb	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e000      	b.n	8006bca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bc8:	2302      	movs	r3, #2
  }
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fefc 	bl	80069f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b08c      	sub	sp, #48	; 0x30
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b22      	cmp	r3, #34	; 0x22
 8006c18:	f040 80ab 	bne.w	8006d72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c24:	d117      	bne.n	8006c56 <UART_Receive_IT+0x50>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d113      	bne.n	8006c56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	1c9a      	adds	r2, r3, #2
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
 8006c54:	e026      	b.n	8006ca4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c68:	d007      	beq.n	8006c7a <UART_Receive_IT+0x74>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <UART_Receive_IT+0x82>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e008      	b.n	8006c9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d15a      	bne.n	8006d6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0220 	bic.w	r2, r2, #32
 8006cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695a      	ldr	r2, [r3, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0201 	bic.w	r2, r2, #1
 8006ce6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d135      	bne.n	8006d64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f023 0310 	bic.w	r3, r3, #16
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	330c      	adds	r3, #12
 8006d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1e:	623a      	str	r2, [r7, #32]
 8006d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	69f9      	ldr	r1, [r7, #28]
 8006d24:	6a3a      	ldr	r2, [r7, #32]
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e5      	bne.n	8006cfe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d10a      	bne.n	8006d56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe67 	bl	8006a30 <HAL_UARTEx_RxEventCallback>
 8006d62:	e002      	b.n	8006d6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff fe4f 	bl	8006a08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e002      	b.n	8006d74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e000      	b.n	8006d74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d72:	2302      	movs	r3, #2
  }
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3730      	adds	r7, #48	; 0x30
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d80:	b0c0      	sub	sp, #256	; 0x100
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d98:	68d9      	ldr	r1, [r3, #12]
 8006d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	ea40 0301 	orr.w	r3, r0, r1
 8006da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dd4:	f021 010c 	bic.w	r1, r1, #12
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006de2:	430b      	orrs	r3, r1
 8006de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df6:	6999      	ldr	r1, [r3, #24]
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	ea40 0301 	orr.w	r3, r0, r1
 8006e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	4b8f      	ldr	r3, [pc, #572]	; (8007048 <UART_SetConfig+0x2cc>)
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d005      	beq.n	8006e1c <UART_SetConfig+0xa0>
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b8d      	ldr	r3, [pc, #564]	; (800704c <UART_SetConfig+0x2d0>)
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d104      	bne.n	8006e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e1c:	f7ff fafa 	bl	8006414 <HAL_RCC_GetPCLK2Freq>
 8006e20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e24:	e003      	b.n	8006e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e26:	f7ff fae1 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 8006e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e38:	f040 810c 	bne.w	8007054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e56:	415b      	adcs	r3, r3
 8006e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e5e:	4621      	mov	r1, r4
 8006e60:	eb12 0801 	adds.w	r8, r2, r1
 8006e64:	4629      	mov	r1, r5
 8006e66:	eb43 0901 	adc.w	r9, r3, r1
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e7e:	4690      	mov	r8, r2
 8006e80:	4699      	mov	r9, r3
 8006e82:	4623      	mov	r3, r4
 8006e84:	eb18 0303 	adds.w	r3, r8, r3
 8006e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	eb49 0303 	adc.w	r3, r9, r3
 8006e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006eaa:	460b      	mov	r3, r1
 8006eac:	18db      	adds	r3, r3, r3
 8006eae:	653b      	str	r3, [r7, #80]	; 0x50
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	eb42 0303 	adc.w	r3, r2, r3
 8006eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8006eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ec0:	f7f9 ff1a 	bl	8000cf8 <__aeabi_uldivmod>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4b61      	ldr	r3, [pc, #388]	; (8007050 <UART_SetConfig+0x2d4>)
 8006eca:	fba3 2302 	umull	r2, r3, r3, r2
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	011c      	lsls	r4, r3, #4
 8006ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006edc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	1891      	adds	r1, r2, r2
 8006eea:	64b9      	str	r1, [r7, #72]	; 0x48
 8006eec:	415b      	adcs	r3, r3
 8006eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8006efa:	4649      	mov	r1, r9
 8006efc:	eb43 0b01 	adc.w	fp, r3, r1
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f14:	4692      	mov	sl, r2
 8006f16:	469b      	mov	fp, r3
 8006f18:	4643      	mov	r3, r8
 8006f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8006f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f22:	464b      	mov	r3, r9
 8006f24:	eb4b 0303 	adc.w	r3, fp, r3
 8006f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f40:	460b      	mov	r3, r1
 8006f42:	18db      	adds	r3, r3, r3
 8006f44:	643b      	str	r3, [r7, #64]	; 0x40
 8006f46:	4613      	mov	r3, r2
 8006f48:	eb42 0303 	adc.w	r3, r2, r3
 8006f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f56:	f7f9 fecf 	bl	8000cf8 <__aeabi_uldivmod>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4611      	mov	r1, r2
 8006f60:	4b3b      	ldr	r3, [pc, #236]	; (8007050 <UART_SetConfig+0x2d4>)
 8006f62:	fba3 2301 	umull	r2, r3, r3, r1
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	2264      	movs	r2, #100	; 0x64
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
 8006f6e:	1acb      	subs	r3, r1, r3
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f76:	4b36      	ldr	r3, [pc, #216]	; (8007050 <UART_SetConfig+0x2d4>)
 8006f78:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f84:	441c      	add	r4, r3
 8006f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	1891      	adds	r1, r2, r2
 8006f9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fa0:	415b      	adcs	r3, r3
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fa8:	4641      	mov	r1, r8
 8006faa:	1851      	adds	r1, r2, r1
 8006fac:	6339      	str	r1, [r7, #48]	; 0x30
 8006fae:	4649      	mov	r1, r9
 8006fb0:	414b      	adcs	r3, r1
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006fc0:	4659      	mov	r1, fp
 8006fc2:	00cb      	lsls	r3, r1, #3
 8006fc4:	4651      	mov	r1, sl
 8006fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fca:	4651      	mov	r1, sl
 8006fcc:	00ca      	lsls	r2, r1, #3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	189b      	adds	r3, r3, r2
 8006fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fdc:	464b      	mov	r3, r9
 8006fde:	460a      	mov	r2, r1
 8006fe0:	eb42 0303 	adc.w	r3, r2, r3
 8006fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	18db      	adds	r3, r3, r3
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
 8007002:	4613      	mov	r3, r2
 8007004:	eb42 0303 	adc.w	r3, r2, r3
 8007008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800700a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800700e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007012:	f7f9 fe71 	bl	8000cf8 <__aeabi_uldivmod>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <UART_SetConfig+0x2d4>)
 800701c:	fba3 1302 	umull	r1, r3, r3, r2
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	2164      	movs	r1, #100	; 0x64
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	3332      	adds	r3, #50	; 0x32
 800702e:	4a08      	ldr	r2, [pc, #32]	; (8007050 <UART_SetConfig+0x2d4>)
 8007030:	fba2 2303 	umull	r2, r3, r2, r3
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	f003 0207 	and.w	r2, r3, #7
 800703a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4422      	add	r2, r4
 8007042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007044:	e105      	b.n	8007252 <UART_SetConfig+0x4d6>
 8007046:	bf00      	nop
 8007048:	40011000 	.word	0x40011000
 800704c:	40011400 	.word	0x40011400
 8007050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007058:	2200      	movs	r2, #0
 800705a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800705e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	1891      	adds	r1, r2, r2
 800706c:	6239      	str	r1, [r7, #32]
 800706e:	415b      	adcs	r3, r3
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
 8007072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007076:	4641      	mov	r1, r8
 8007078:	1854      	adds	r4, r2, r1
 800707a:	4649      	mov	r1, r9
 800707c:	eb43 0501 	adc.w	r5, r3, r1
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	00eb      	lsls	r3, r5, #3
 800708a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800708e:	00e2      	lsls	r2, r4, #3
 8007090:	4614      	mov	r4, r2
 8007092:	461d      	mov	r5, r3
 8007094:	4643      	mov	r3, r8
 8007096:	18e3      	adds	r3, r4, r3
 8007098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800709c:	464b      	mov	r3, r9
 800709e:	eb45 0303 	adc.w	r3, r5, r3
 80070a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070c2:	4629      	mov	r1, r5
 80070c4:	008b      	lsls	r3, r1, #2
 80070c6:	4621      	mov	r1, r4
 80070c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070cc:	4621      	mov	r1, r4
 80070ce:	008a      	lsls	r2, r1, #2
 80070d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070d4:	f7f9 fe10 	bl	8000cf8 <__aeabi_uldivmod>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4b60      	ldr	r3, [pc, #384]	; (8007260 <UART_SetConfig+0x4e4>)
 80070de:	fba3 2302 	umull	r2, r3, r3, r2
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	011c      	lsls	r4, r3, #4
 80070e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	1891      	adds	r1, r2, r2
 80070fe:	61b9      	str	r1, [r7, #24]
 8007100:	415b      	adcs	r3, r3
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007108:	4641      	mov	r1, r8
 800710a:	1851      	adds	r1, r2, r1
 800710c:	6139      	str	r1, [r7, #16]
 800710e:	4649      	mov	r1, r9
 8007110:	414b      	adcs	r3, r1
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007120:	4659      	mov	r1, fp
 8007122:	00cb      	lsls	r3, r1, #3
 8007124:	4651      	mov	r1, sl
 8007126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712a:	4651      	mov	r1, sl
 800712c:	00ca      	lsls	r2, r1, #3
 800712e:	4610      	mov	r0, r2
 8007130:	4619      	mov	r1, r3
 8007132:	4603      	mov	r3, r0
 8007134:	4642      	mov	r2, r8
 8007136:	189b      	adds	r3, r3, r2
 8007138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800713c:	464b      	mov	r3, r9
 800713e:	460a      	mov	r2, r1
 8007140:	eb42 0303 	adc.w	r3, r2, r3
 8007144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	67bb      	str	r3, [r7, #120]	; 0x78
 8007152:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007160:	4649      	mov	r1, r9
 8007162:	008b      	lsls	r3, r1, #2
 8007164:	4641      	mov	r1, r8
 8007166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800716a:	4641      	mov	r1, r8
 800716c:	008a      	lsls	r2, r1, #2
 800716e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007172:	f7f9 fdc1 	bl	8000cf8 <__aeabi_uldivmod>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4b39      	ldr	r3, [pc, #228]	; (8007260 <UART_SetConfig+0x4e4>)
 800717c:	fba3 1302 	umull	r1, r3, r3, r2
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	2164      	movs	r1, #100	; 0x64
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	3332      	adds	r3, #50	; 0x32
 800718e:	4a34      	ldr	r2, [pc, #208]	; (8007260 <UART_SetConfig+0x4e4>)
 8007190:	fba2 2303 	umull	r2, r3, r2, r3
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800719a:	441c      	add	r4, r3
 800719c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a0:	2200      	movs	r2, #0
 80071a2:	673b      	str	r3, [r7, #112]	; 0x70
 80071a4:	677a      	str	r2, [r7, #116]	; 0x74
 80071a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071aa:	4642      	mov	r2, r8
 80071ac:	464b      	mov	r3, r9
 80071ae:	1891      	adds	r1, r2, r2
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	415b      	adcs	r3, r3
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071ba:	4641      	mov	r1, r8
 80071bc:	1851      	adds	r1, r2, r1
 80071be:	6039      	str	r1, [r7, #0]
 80071c0:	4649      	mov	r1, r9
 80071c2:	414b      	adcs	r3, r1
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071d2:	4659      	mov	r1, fp
 80071d4:	00cb      	lsls	r3, r1, #3
 80071d6:	4651      	mov	r1, sl
 80071d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071dc:	4651      	mov	r1, sl
 80071de:	00ca      	lsls	r2, r1, #3
 80071e0:	4610      	mov	r0, r2
 80071e2:	4619      	mov	r1, r3
 80071e4:	4603      	mov	r3, r0
 80071e6:	4642      	mov	r2, r8
 80071e8:	189b      	adds	r3, r3, r2
 80071ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ec:	464b      	mov	r3, r9
 80071ee:	460a      	mov	r2, r1
 80071f0:	eb42 0303 	adc.w	r3, r2, r3
 80071f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	663b      	str	r3, [r7, #96]	; 0x60
 8007200:	667a      	str	r2, [r7, #100]	; 0x64
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800720e:	4649      	mov	r1, r9
 8007210:	008b      	lsls	r3, r1, #2
 8007212:	4641      	mov	r1, r8
 8007214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007218:	4641      	mov	r1, r8
 800721a:	008a      	lsls	r2, r1, #2
 800721c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007220:	f7f9 fd6a 	bl	8000cf8 <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <UART_SetConfig+0x4e4>)
 800722a:	fba3 1302 	umull	r1, r3, r3, r2
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	2164      	movs	r1, #100	; 0x64
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	3332      	adds	r3, #50	; 0x32
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <UART_SetConfig+0x4e4>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	f003 020f 	and.w	r2, r3, #15
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4422      	add	r2, r4
 8007250:	609a      	str	r2, [r3, #8]
}
 8007252:	bf00      	nop
 8007254:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007258:	46bd      	mov	sp, r7
 800725a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800725e:	bf00      	nop
 8007260:	51eb851f 	.word	0x51eb851f

08007264 <__errno>:
 8007264:	4b01      	ldr	r3, [pc, #4]	; (800726c <__errno+0x8>)
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	2000000c 	.word	0x2000000c

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4d0d      	ldr	r5, [pc, #52]	; (80072a8 <__libc_init_array+0x38>)
 8007274:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007276:	1b64      	subs	r4, r4, r5
 8007278:	10a4      	asrs	r4, r4, #2
 800727a:	2600      	movs	r6, #0
 800727c:	42a6      	cmp	r6, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	4d0b      	ldr	r5, [pc, #44]	; (80072b0 <__libc_init_array+0x40>)
 8007282:	4c0c      	ldr	r4, [pc, #48]	; (80072b4 <__libc_init_array+0x44>)
 8007284:	f002 fd38 	bl	8009cf8 <_init>
 8007288:	1b64      	subs	r4, r4, r5
 800728a:	10a4      	asrs	r4, r4, #2
 800728c:	2600      	movs	r6, #0
 800728e:	42a6      	cmp	r6, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	f855 3b04 	ldr.w	r3, [r5], #4
 8007298:	4798      	blx	r3
 800729a:	3601      	adds	r6, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a2:	4798      	blx	r3
 80072a4:	3601      	adds	r6, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	0800a114 	.word	0x0800a114
 80072ac:	0800a114 	.word	0x0800a114
 80072b0:	0800a114 	.word	0x0800a114
 80072b4:	0800a118 	.word	0x0800a118

080072b8 <memset>:
 80072b8:	4402      	add	r2, r0
 80072ba:	4603      	mov	r3, r0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d100      	bne.n	80072c2 <memset+0xa>
 80072c0:	4770      	bx	lr
 80072c2:	f803 1b01 	strb.w	r1, [r3], #1
 80072c6:	e7f9      	b.n	80072bc <memset+0x4>

080072c8 <__cvt>:
 80072c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072cc:	ec55 4b10 	vmov	r4, r5, d0
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	460e      	mov	r6, r1
 80072d4:	4619      	mov	r1, r3
 80072d6:	462b      	mov	r3, r5
 80072d8:	bfbb      	ittet	lt
 80072da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072de:	461d      	movlt	r5, r3
 80072e0:	2300      	movge	r3, #0
 80072e2:	232d      	movlt	r3, #45	; 0x2d
 80072e4:	700b      	strb	r3, [r1, #0]
 80072e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072ec:	4691      	mov	r9, r2
 80072ee:	f023 0820 	bic.w	r8, r3, #32
 80072f2:	bfbc      	itt	lt
 80072f4:	4622      	movlt	r2, r4
 80072f6:	4614      	movlt	r4, r2
 80072f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072fc:	d005      	beq.n	800730a <__cvt+0x42>
 80072fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007302:	d100      	bne.n	8007306 <__cvt+0x3e>
 8007304:	3601      	adds	r6, #1
 8007306:	2102      	movs	r1, #2
 8007308:	e000      	b.n	800730c <__cvt+0x44>
 800730a:	2103      	movs	r1, #3
 800730c:	ab03      	add	r3, sp, #12
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	ab02      	add	r3, sp, #8
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	ec45 4b10 	vmov	d0, r4, r5
 8007318:	4653      	mov	r3, sl
 800731a:	4632      	mov	r2, r6
 800731c:	f000 fccc 	bl	8007cb8 <_dtoa_r>
 8007320:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007324:	4607      	mov	r7, r0
 8007326:	d102      	bne.n	800732e <__cvt+0x66>
 8007328:	f019 0f01 	tst.w	r9, #1
 800732c:	d022      	beq.n	8007374 <__cvt+0xac>
 800732e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007332:	eb07 0906 	add.w	r9, r7, r6
 8007336:	d110      	bne.n	800735a <__cvt+0x92>
 8007338:	783b      	ldrb	r3, [r7, #0]
 800733a:	2b30      	cmp	r3, #48	; 0x30
 800733c:	d10a      	bne.n	8007354 <__cvt+0x8c>
 800733e:	2200      	movs	r2, #0
 8007340:	2300      	movs	r3, #0
 8007342:	4620      	mov	r0, r4
 8007344:	4629      	mov	r1, r5
 8007346:	f7f9 fbc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800734a:	b918      	cbnz	r0, 8007354 <__cvt+0x8c>
 800734c:	f1c6 0601 	rsb	r6, r6, #1
 8007350:	f8ca 6000 	str.w	r6, [sl]
 8007354:	f8da 3000 	ldr.w	r3, [sl]
 8007358:	4499      	add	r9, r3
 800735a:	2200      	movs	r2, #0
 800735c:	2300      	movs	r3, #0
 800735e:	4620      	mov	r0, r4
 8007360:	4629      	mov	r1, r5
 8007362:	f7f9 fbb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007366:	b108      	cbz	r0, 800736c <__cvt+0xa4>
 8007368:	f8cd 900c 	str.w	r9, [sp, #12]
 800736c:	2230      	movs	r2, #48	; 0x30
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	454b      	cmp	r3, r9
 8007372:	d307      	bcc.n	8007384 <__cvt+0xbc>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007378:	1bdb      	subs	r3, r3, r7
 800737a:	4638      	mov	r0, r7
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	b004      	add	sp, #16
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	1c59      	adds	r1, r3, #1
 8007386:	9103      	str	r1, [sp, #12]
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	e7f0      	b.n	800736e <__cvt+0xa6>

0800738c <__exponent>:
 800738c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800738e:	4603      	mov	r3, r0
 8007390:	2900      	cmp	r1, #0
 8007392:	bfb8      	it	lt
 8007394:	4249      	neglt	r1, r1
 8007396:	f803 2b02 	strb.w	r2, [r3], #2
 800739a:	bfb4      	ite	lt
 800739c:	222d      	movlt	r2, #45	; 0x2d
 800739e:	222b      	movge	r2, #43	; 0x2b
 80073a0:	2909      	cmp	r1, #9
 80073a2:	7042      	strb	r2, [r0, #1]
 80073a4:	dd2a      	ble.n	80073fc <__exponent+0x70>
 80073a6:	f10d 0407 	add.w	r4, sp, #7
 80073aa:	46a4      	mov	ip, r4
 80073ac:	270a      	movs	r7, #10
 80073ae:	46a6      	mov	lr, r4
 80073b0:	460a      	mov	r2, r1
 80073b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80073b6:	fb07 1516 	mls	r5, r7, r6, r1
 80073ba:	3530      	adds	r5, #48	; 0x30
 80073bc:	2a63      	cmp	r2, #99	; 0x63
 80073be:	f104 34ff 	add.w	r4, r4, #4294967295
 80073c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073c6:	4631      	mov	r1, r6
 80073c8:	dcf1      	bgt.n	80073ae <__exponent+0x22>
 80073ca:	3130      	adds	r1, #48	; 0x30
 80073cc:	f1ae 0502 	sub.w	r5, lr, #2
 80073d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073d4:	1c44      	adds	r4, r0, #1
 80073d6:	4629      	mov	r1, r5
 80073d8:	4561      	cmp	r1, ip
 80073da:	d30a      	bcc.n	80073f2 <__exponent+0x66>
 80073dc:	f10d 0209 	add.w	r2, sp, #9
 80073e0:	eba2 020e 	sub.w	r2, r2, lr
 80073e4:	4565      	cmp	r5, ip
 80073e6:	bf88      	it	hi
 80073e8:	2200      	movhi	r2, #0
 80073ea:	4413      	add	r3, r2
 80073ec:	1a18      	subs	r0, r3, r0
 80073ee:	b003      	add	sp, #12
 80073f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073fa:	e7ed      	b.n	80073d8 <__exponent+0x4c>
 80073fc:	2330      	movs	r3, #48	; 0x30
 80073fe:	3130      	adds	r1, #48	; 0x30
 8007400:	7083      	strb	r3, [r0, #2]
 8007402:	70c1      	strb	r1, [r0, #3]
 8007404:	1d03      	adds	r3, r0, #4
 8007406:	e7f1      	b.n	80073ec <__exponent+0x60>

08007408 <_printf_float>:
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	ed2d 8b02 	vpush	{d8}
 8007410:	b08d      	sub	sp, #52	; 0x34
 8007412:	460c      	mov	r4, r1
 8007414:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007418:	4616      	mov	r6, r2
 800741a:	461f      	mov	r7, r3
 800741c:	4605      	mov	r5, r0
 800741e:	f001 fa39 	bl	8008894 <_localeconv_r>
 8007422:	f8d0 a000 	ldr.w	sl, [r0]
 8007426:	4650      	mov	r0, sl
 8007428:	f7f8 feda 	bl	80001e0 <strlen>
 800742c:	2300      	movs	r3, #0
 800742e:	930a      	str	r3, [sp, #40]	; 0x28
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	f8d8 3000 	ldr.w	r3, [r8]
 8007438:	f894 b018 	ldrb.w	fp, [r4, #24]
 800743c:	3307      	adds	r3, #7
 800743e:	f023 0307 	bic.w	r3, r3, #7
 8007442:	f103 0208 	add.w	r2, r3, #8
 8007446:	f8c8 2000 	str.w	r2, [r8]
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007452:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007456:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800745a:	9307      	str	r3, [sp, #28]
 800745c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007460:	ee08 0a10 	vmov	s16, r0
 8007464:	4b9f      	ldr	r3, [pc, #636]	; (80076e4 <_printf_float+0x2dc>)
 8007466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800746a:	f04f 32ff 	mov.w	r2, #4294967295
 800746e:	f7f9 fb65 	bl	8000b3c <__aeabi_dcmpun>
 8007472:	bb88      	cbnz	r0, 80074d8 <_printf_float+0xd0>
 8007474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007478:	4b9a      	ldr	r3, [pc, #616]	; (80076e4 <_printf_float+0x2dc>)
 800747a:	f04f 32ff 	mov.w	r2, #4294967295
 800747e:	f7f9 fb3f 	bl	8000b00 <__aeabi_dcmple>
 8007482:	bb48      	cbnz	r0, 80074d8 <_printf_float+0xd0>
 8007484:	2200      	movs	r2, #0
 8007486:	2300      	movs	r3, #0
 8007488:	4640      	mov	r0, r8
 800748a:	4649      	mov	r1, r9
 800748c:	f7f9 fb2e 	bl	8000aec <__aeabi_dcmplt>
 8007490:	b110      	cbz	r0, 8007498 <_printf_float+0x90>
 8007492:	232d      	movs	r3, #45	; 0x2d
 8007494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007498:	4b93      	ldr	r3, [pc, #588]	; (80076e8 <_printf_float+0x2e0>)
 800749a:	4894      	ldr	r0, [pc, #592]	; (80076ec <_printf_float+0x2e4>)
 800749c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074a0:	bf94      	ite	ls
 80074a2:	4698      	movls	r8, r3
 80074a4:	4680      	movhi	r8, r0
 80074a6:	2303      	movs	r3, #3
 80074a8:	6123      	str	r3, [r4, #16]
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	f023 0204 	bic.w	r2, r3, #4
 80074b0:	6022      	str	r2, [r4, #0]
 80074b2:	f04f 0900 	mov.w	r9, #0
 80074b6:	9700      	str	r7, [sp, #0]
 80074b8:	4633      	mov	r3, r6
 80074ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80074bc:	4621      	mov	r1, r4
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 f9d8 	bl	8007874 <_printf_common>
 80074c4:	3001      	adds	r0, #1
 80074c6:	f040 8090 	bne.w	80075ea <_printf_float+0x1e2>
 80074ca:	f04f 30ff 	mov.w	r0, #4294967295
 80074ce:	b00d      	add	sp, #52	; 0x34
 80074d0:	ecbd 8b02 	vpop	{d8}
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	4642      	mov	r2, r8
 80074da:	464b      	mov	r3, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	4649      	mov	r1, r9
 80074e0:	f7f9 fb2c 	bl	8000b3c <__aeabi_dcmpun>
 80074e4:	b140      	cbz	r0, 80074f8 <_printf_float+0xf0>
 80074e6:	464b      	mov	r3, r9
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfbc      	itt	lt
 80074ec:	232d      	movlt	r3, #45	; 0x2d
 80074ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074f2:	487f      	ldr	r0, [pc, #508]	; (80076f0 <_printf_float+0x2e8>)
 80074f4:	4b7f      	ldr	r3, [pc, #508]	; (80076f4 <_printf_float+0x2ec>)
 80074f6:	e7d1      	b.n	800749c <_printf_float+0x94>
 80074f8:	6863      	ldr	r3, [r4, #4]
 80074fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074fe:	9206      	str	r2, [sp, #24]
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	d13f      	bne.n	8007584 <_printf_float+0x17c>
 8007504:	2306      	movs	r3, #6
 8007506:	6063      	str	r3, [r4, #4]
 8007508:	9b05      	ldr	r3, [sp, #20]
 800750a:	6861      	ldr	r1, [r4, #4]
 800750c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007510:	2300      	movs	r3, #0
 8007512:	9303      	str	r3, [sp, #12]
 8007514:	ab0a      	add	r3, sp, #40	; 0x28
 8007516:	e9cd b301 	strd	fp, r3, [sp, #4]
 800751a:	ab09      	add	r3, sp, #36	; 0x24
 800751c:	ec49 8b10 	vmov	d0, r8, r9
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007528:	4628      	mov	r0, r5
 800752a:	f7ff fecd 	bl	80072c8 <__cvt>
 800752e:	9b06      	ldr	r3, [sp, #24]
 8007530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007532:	2b47      	cmp	r3, #71	; 0x47
 8007534:	4680      	mov	r8, r0
 8007536:	d108      	bne.n	800754a <_printf_float+0x142>
 8007538:	1cc8      	adds	r0, r1, #3
 800753a:	db02      	blt.n	8007542 <_printf_float+0x13a>
 800753c:	6863      	ldr	r3, [r4, #4]
 800753e:	4299      	cmp	r1, r3
 8007540:	dd41      	ble.n	80075c6 <_printf_float+0x1be>
 8007542:	f1ab 0b02 	sub.w	fp, fp, #2
 8007546:	fa5f fb8b 	uxtb.w	fp, fp
 800754a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800754e:	d820      	bhi.n	8007592 <_printf_float+0x18a>
 8007550:	3901      	subs	r1, #1
 8007552:	465a      	mov	r2, fp
 8007554:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007558:	9109      	str	r1, [sp, #36]	; 0x24
 800755a:	f7ff ff17 	bl	800738c <__exponent>
 800755e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007560:	1813      	adds	r3, r2, r0
 8007562:	2a01      	cmp	r2, #1
 8007564:	4681      	mov	r9, r0
 8007566:	6123      	str	r3, [r4, #16]
 8007568:	dc02      	bgt.n	8007570 <_printf_float+0x168>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d2      	lsls	r2, r2, #31
 800756e:	d501      	bpl.n	8007574 <_printf_float+0x16c>
 8007570:	3301      	adds	r3, #1
 8007572:	6123      	str	r3, [r4, #16]
 8007574:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007578:	2b00      	cmp	r3, #0
 800757a:	d09c      	beq.n	80074b6 <_printf_float+0xae>
 800757c:	232d      	movs	r3, #45	; 0x2d
 800757e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007582:	e798      	b.n	80074b6 <_printf_float+0xae>
 8007584:	9a06      	ldr	r2, [sp, #24]
 8007586:	2a47      	cmp	r2, #71	; 0x47
 8007588:	d1be      	bne.n	8007508 <_printf_float+0x100>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1bc      	bne.n	8007508 <_printf_float+0x100>
 800758e:	2301      	movs	r3, #1
 8007590:	e7b9      	b.n	8007506 <_printf_float+0xfe>
 8007592:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007596:	d118      	bne.n	80075ca <_printf_float+0x1c2>
 8007598:	2900      	cmp	r1, #0
 800759a:	6863      	ldr	r3, [r4, #4]
 800759c:	dd0b      	ble.n	80075b6 <_printf_float+0x1ae>
 800759e:	6121      	str	r1, [r4, #16]
 80075a0:	b913      	cbnz	r3, 80075a8 <_printf_float+0x1a0>
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	07d0      	lsls	r0, r2, #31
 80075a6:	d502      	bpl.n	80075ae <_printf_float+0x1a6>
 80075a8:	3301      	adds	r3, #1
 80075aa:	440b      	add	r3, r1
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80075b0:	f04f 0900 	mov.w	r9, #0
 80075b4:	e7de      	b.n	8007574 <_printf_float+0x16c>
 80075b6:	b913      	cbnz	r3, 80075be <_printf_float+0x1b6>
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	07d2      	lsls	r2, r2, #31
 80075bc:	d501      	bpl.n	80075c2 <_printf_float+0x1ba>
 80075be:	3302      	adds	r3, #2
 80075c0:	e7f4      	b.n	80075ac <_printf_float+0x1a4>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e7f2      	b.n	80075ac <_printf_float+0x1a4>
 80075c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075cc:	4299      	cmp	r1, r3
 80075ce:	db05      	blt.n	80075dc <_printf_float+0x1d4>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	6121      	str	r1, [r4, #16]
 80075d4:	07d8      	lsls	r0, r3, #31
 80075d6:	d5ea      	bpl.n	80075ae <_printf_float+0x1a6>
 80075d8:	1c4b      	adds	r3, r1, #1
 80075da:	e7e7      	b.n	80075ac <_printf_float+0x1a4>
 80075dc:	2900      	cmp	r1, #0
 80075de:	bfd4      	ite	le
 80075e0:	f1c1 0202 	rsble	r2, r1, #2
 80075e4:	2201      	movgt	r2, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	e7e0      	b.n	80075ac <_printf_float+0x1a4>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	055a      	lsls	r2, r3, #21
 80075ee:	d407      	bmi.n	8007600 <_printf_float+0x1f8>
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	4642      	mov	r2, r8
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	d12c      	bne.n	8007658 <_printf_float+0x250>
 80075fe:	e764      	b.n	80074ca <_printf_float+0xc2>
 8007600:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007604:	f240 80e0 	bls.w	80077c8 <_printf_float+0x3c0>
 8007608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800760c:	2200      	movs	r2, #0
 800760e:	2300      	movs	r3, #0
 8007610:	f7f9 fa62 	bl	8000ad8 <__aeabi_dcmpeq>
 8007614:	2800      	cmp	r0, #0
 8007616:	d034      	beq.n	8007682 <_printf_float+0x27a>
 8007618:	4a37      	ldr	r2, [pc, #220]	; (80076f8 <_printf_float+0x2f0>)
 800761a:	2301      	movs	r3, #1
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f af51 	beq.w	80074ca <_printf_float+0xc2>
 8007628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800762c:	429a      	cmp	r2, r3
 800762e:	db02      	blt.n	8007636 <_printf_float+0x22e>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	07d8      	lsls	r0, r3, #31
 8007634:	d510      	bpl.n	8007658 <_printf_float+0x250>
 8007636:	ee18 3a10 	vmov	r3, s16
 800763a:	4652      	mov	r2, sl
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af41 	beq.w	80074ca <_printf_float+0xc2>
 8007648:	f04f 0800 	mov.w	r8, #0
 800764c:	f104 091a 	add.w	r9, r4, #26
 8007650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007652:	3b01      	subs	r3, #1
 8007654:	4543      	cmp	r3, r8
 8007656:	dc09      	bgt.n	800766c <_printf_float+0x264>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	079b      	lsls	r3, r3, #30
 800765c:	f100 8105 	bmi.w	800786a <_printf_float+0x462>
 8007660:	68e0      	ldr	r0, [r4, #12]
 8007662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007664:	4298      	cmp	r0, r3
 8007666:	bfb8      	it	lt
 8007668:	4618      	movlt	r0, r3
 800766a:	e730      	b.n	80074ce <_printf_float+0xc6>
 800766c:	2301      	movs	r3, #1
 800766e:	464a      	mov	r2, r9
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	47b8      	blx	r7
 8007676:	3001      	adds	r0, #1
 8007678:	f43f af27 	beq.w	80074ca <_printf_float+0xc2>
 800767c:	f108 0801 	add.w	r8, r8, #1
 8007680:	e7e6      	b.n	8007650 <_printf_float+0x248>
 8007682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc39      	bgt.n	80076fc <_printf_float+0x2f4>
 8007688:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <_printf_float+0x2f0>)
 800768a:	2301      	movs	r3, #1
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	f43f af19 	beq.w	80074ca <_printf_float+0xc2>
 8007698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800769c:	4313      	orrs	r3, r2
 800769e:	d102      	bne.n	80076a6 <_printf_float+0x29e>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	07d9      	lsls	r1, r3, #31
 80076a4:	d5d8      	bpl.n	8007658 <_printf_float+0x250>
 80076a6:	ee18 3a10 	vmov	r3, s16
 80076aa:	4652      	mov	r2, sl
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	f43f af09 	beq.w	80074ca <_printf_float+0xc2>
 80076b8:	f04f 0900 	mov.w	r9, #0
 80076bc:	f104 0a1a 	add.w	sl, r4, #26
 80076c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c2:	425b      	negs	r3, r3
 80076c4:	454b      	cmp	r3, r9
 80076c6:	dc01      	bgt.n	80076cc <_printf_float+0x2c4>
 80076c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ca:	e792      	b.n	80075f2 <_printf_float+0x1ea>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4652      	mov	r2, sl
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f aef7 	beq.w	80074ca <_printf_float+0xc2>
 80076dc:	f109 0901 	add.w	r9, r9, #1
 80076e0:	e7ee      	b.n	80076c0 <_printf_float+0x2b8>
 80076e2:	bf00      	nop
 80076e4:	7fefffff 	.word	0x7fefffff
 80076e8:	08009d34 	.word	0x08009d34
 80076ec:	08009d38 	.word	0x08009d38
 80076f0:	08009d40 	.word	0x08009d40
 80076f4:	08009d3c 	.word	0x08009d3c
 80076f8:	08009d44 	.word	0x08009d44
 80076fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007700:	429a      	cmp	r2, r3
 8007702:	bfa8      	it	ge
 8007704:	461a      	movge	r2, r3
 8007706:	2a00      	cmp	r2, #0
 8007708:	4691      	mov	r9, r2
 800770a:	dc37      	bgt.n	800777c <_printf_float+0x374>
 800770c:	f04f 0b00 	mov.w	fp, #0
 8007710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007714:	f104 021a 	add.w	r2, r4, #26
 8007718:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	eba3 0309 	sub.w	r3, r3, r9
 8007720:	455b      	cmp	r3, fp
 8007722:	dc33      	bgt.n	800778c <_printf_float+0x384>
 8007724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007728:	429a      	cmp	r2, r3
 800772a:	db3b      	blt.n	80077a4 <_printf_float+0x39c>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	07da      	lsls	r2, r3, #31
 8007730:	d438      	bmi.n	80077a4 <_printf_float+0x39c>
 8007732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007734:	9a05      	ldr	r2, [sp, #20]
 8007736:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007738:	1a9a      	subs	r2, r3, r2
 800773a:	eba3 0901 	sub.w	r9, r3, r1
 800773e:	4591      	cmp	r9, r2
 8007740:	bfa8      	it	ge
 8007742:	4691      	movge	r9, r2
 8007744:	f1b9 0f00 	cmp.w	r9, #0
 8007748:	dc35      	bgt.n	80077b6 <_printf_float+0x3ae>
 800774a:	f04f 0800 	mov.w	r8, #0
 800774e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007752:	f104 0a1a 	add.w	sl, r4, #26
 8007756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	eba3 0309 	sub.w	r3, r3, r9
 8007760:	4543      	cmp	r3, r8
 8007762:	f77f af79 	ble.w	8007658 <_printf_float+0x250>
 8007766:	2301      	movs	r3, #1
 8007768:	4652      	mov	r2, sl
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	f43f aeaa 	beq.w	80074ca <_printf_float+0xc2>
 8007776:	f108 0801 	add.w	r8, r8, #1
 800777a:	e7ec      	b.n	8007756 <_printf_float+0x34e>
 800777c:	4613      	mov	r3, r2
 800777e:	4631      	mov	r1, r6
 8007780:	4642      	mov	r2, r8
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	d1c0      	bne.n	800770c <_printf_float+0x304>
 800778a:	e69e      	b.n	80074ca <_printf_float+0xc2>
 800778c:	2301      	movs	r3, #1
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	9205      	str	r2, [sp, #20]
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f ae97 	beq.w	80074ca <_printf_float+0xc2>
 800779c:	9a05      	ldr	r2, [sp, #20]
 800779e:	f10b 0b01 	add.w	fp, fp, #1
 80077a2:	e7b9      	b.n	8007718 <_printf_float+0x310>
 80077a4:	ee18 3a10 	vmov	r3, s16
 80077a8:	4652      	mov	r2, sl
 80077aa:	4631      	mov	r1, r6
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	d1be      	bne.n	8007732 <_printf_float+0x32a>
 80077b4:	e689      	b.n	80074ca <_printf_float+0xc2>
 80077b6:	9a05      	ldr	r2, [sp, #20]
 80077b8:	464b      	mov	r3, r9
 80077ba:	4442      	add	r2, r8
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	d1c1      	bne.n	800774a <_printf_float+0x342>
 80077c6:	e680      	b.n	80074ca <_printf_float+0xc2>
 80077c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ca:	2a01      	cmp	r2, #1
 80077cc:	dc01      	bgt.n	80077d2 <_printf_float+0x3ca>
 80077ce:	07db      	lsls	r3, r3, #31
 80077d0:	d538      	bpl.n	8007844 <_printf_float+0x43c>
 80077d2:	2301      	movs	r3, #1
 80077d4:	4642      	mov	r2, r8
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f ae74 	beq.w	80074ca <_printf_float+0xc2>
 80077e2:	ee18 3a10 	vmov	r3, s16
 80077e6:	4652      	mov	r2, sl
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f ae6b 	beq.w	80074ca <_printf_float+0xc2>
 80077f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077f8:	2200      	movs	r2, #0
 80077fa:	2300      	movs	r3, #0
 80077fc:	f7f9 f96c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007800:	b9d8      	cbnz	r0, 800783a <_printf_float+0x432>
 8007802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007804:	f108 0201 	add.w	r2, r8, #1
 8007808:	3b01      	subs	r3, #1
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	d10e      	bne.n	8007832 <_printf_float+0x42a>
 8007814:	e659      	b.n	80074ca <_printf_float+0xc2>
 8007816:	2301      	movs	r3, #1
 8007818:	4652      	mov	r2, sl
 800781a:	4631      	mov	r1, r6
 800781c:	4628      	mov	r0, r5
 800781e:	47b8      	blx	r7
 8007820:	3001      	adds	r0, #1
 8007822:	f43f ae52 	beq.w	80074ca <_printf_float+0xc2>
 8007826:	f108 0801 	add.w	r8, r8, #1
 800782a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782c:	3b01      	subs	r3, #1
 800782e:	4543      	cmp	r3, r8
 8007830:	dcf1      	bgt.n	8007816 <_printf_float+0x40e>
 8007832:	464b      	mov	r3, r9
 8007834:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007838:	e6dc      	b.n	80075f4 <_printf_float+0x1ec>
 800783a:	f04f 0800 	mov.w	r8, #0
 800783e:	f104 0a1a 	add.w	sl, r4, #26
 8007842:	e7f2      	b.n	800782a <_printf_float+0x422>
 8007844:	2301      	movs	r3, #1
 8007846:	4642      	mov	r2, r8
 8007848:	e7df      	b.n	800780a <_printf_float+0x402>
 800784a:	2301      	movs	r3, #1
 800784c:	464a      	mov	r2, r9
 800784e:	4631      	mov	r1, r6
 8007850:	4628      	mov	r0, r5
 8007852:	47b8      	blx	r7
 8007854:	3001      	adds	r0, #1
 8007856:	f43f ae38 	beq.w	80074ca <_printf_float+0xc2>
 800785a:	f108 0801 	add.w	r8, r8, #1
 800785e:	68e3      	ldr	r3, [r4, #12]
 8007860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007862:	1a5b      	subs	r3, r3, r1
 8007864:	4543      	cmp	r3, r8
 8007866:	dcf0      	bgt.n	800784a <_printf_float+0x442>
 8007868:	e6fa      	b.n	8007660 <_printf_float+0x258>
 800786a:	f04f 0800 	mov.w	r8, #0
 800786e:	f104 0919 	add.w	r9, r4, #25
 8007872:	e7f4      	b.n	800785e <_printf_float+0x456>

08007874 <_printf_common>:
 8007874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007878:	4616      	mov	r6, r2
 800787a:	4699      	mov	r9, r3
 800787c:	688a      	ldr	r2, [r1, #8]
 800787e:	690b      	ldr	r3, [r1, #16]
 8007880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007884:	4293      	cmp	r3, r2
 8007886:	bfb8      	it	lt
 8007888:	4613      	movlt	r3, r2
 800788a:	6033      	str	r3, [r6, #0]
 800788c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007890:	4607      	mov	r7, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b10a      	cbz	r2, 800789a <_printf_common+0x26>
 8007896:	3301      	adds	r3, #1
 8007898:	6033      	str	r3, [r6, #0]
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	0699      	lsls	r1, r3, #26
 800789e:	bf42      	ittt	mi
 80078a0:	6833      	ldrmi	r3, [r6, #0]
 80078a2:	3302      	addmi	r3, #2
 80078a4:	6033      	strmi	r3, [r6, #0]
 80078a6:	6825      	ldr	r5, [r4, #0]
 80078a8:	f015 0506 	ands.w	r5, r5, #6
 80078ac:	d106      	bne.n	80078bc <_printf_common+0x48>
 80078ae:	f104 0a19 	add.w	sl, r4, #25
 80078b2:	68e3      	ldr	r3, [r4, #12]
 80078b4:	6832      	ldr	r2, [r6, #0]
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	dc26      	bgt.n	800790a <_printf_common+0x96>
 80078bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078c0:	1e13      	subs	r3, r2, #0
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	bf18      	it	ne
 80078c6:	2301      	movne	r3, #1
 80078c8:	0692      	lsls	r2, r2, #26
 80078ca:	d42b      	bmi.n	8007924 <_printf_common+0xb0>
 80078cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078d0:	4649      	mov	r1, r9
 80078d2:	4638      	mov	r0, r7
 80078d4:	47c0      	blx	r8
 80078d6:	3001      	adds	r0, #1
 80078d8:	d01e      	beq.n	8007918 <_printf_common+0xa4>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	68e5      	ldr	r5, [r4, #12]
 80078de:	6832      	ldr	r2, [r6, #0]
 80078e0:	f003 0306 	and.w	r3, r3, #6
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	bf08      	it	eq
 80078e8:	1aad      	subeq	r5, r5, r2
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	bf0c      	ite	eq
 80078f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f4:	2500      	movne	r5, #0
 80078f6:	4293      	cmp	r3, r2
 80078f8:	bfc4      	itt	gt
 80078fa:	1a9b      	subgt	r3, r3, r2
 80078fc:	18ed      	addgt	r5, r5, r3
 80078fe:	2600      	movs	r6, #0
 8007900:	341a      	adds	r4, #26
 8007902:	42b5      	cmp	r5, r6
 8007904:	d11a      	bne.n	800793c <_printf_common+0xc8>
 8007906:	2000      	movs	r0, #0
 8007908:	e008      	b.n	800791c <_printf_common+0xa8>
 800790a:	2301      	movs	r3, #1
 800790c:	4652      	mov	r2, sl
 800790e:	4649      	mov	r1, r9
 8007910:	4638      	mov	r0, r7
 8007912:	47c0      	blx	r8
 8007914:	3001      	adds	r0, #1
 8007916:	d103      	bne.n	8007920 <_printf_common+0xac>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007920:	3501      	adds	r5, #1
 8007922:	e7c6      	b.n	80078b2 <_printf_common+0x3e>
 8007924:	18e1      	adds	r1, r4, r3
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	2030      	movs	r0, #48	; 0x30
 800792a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800792e:	4422      	add	r2, r4
 8007930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007938:	3302      	adds	r3, #2
 800793a:	e7c7      	b.n	80078cc <_printf_common+0x58>
 800793c:	2301      	movs	r3, #1
 800793e:	4622      	mov	r2, r4
 8007940:	4649      	mov	r1, r9
 8007942:	4638      	mov	r0, r7
 8007944:	47c0      	blx	r8
 8007946:	3001      	adds	r0, #1
 8007948:	d0e6      	beq.n	8007918 <_printf_common+0xa4>
 800794a:	3601      	adds	r6, #1
 800794c:	e7d9      	b.n	8007902 <_printf_common+0x8e>
	...

08007950 <_printf_i>:
 8007950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	7e0f      	ldrb	r7, [r1, #24]
 8007956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007958:	2f78      	cmp	r7, #120	; 0x78
 800795a:	4691      	mov	r9, r2
 800795c:	4680      	mov	r8, r0
 800795e:	460c      	mov	r4, r1
 8007960:	469a      	mov	sl, r3
 8007962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007966:	d807      	bhi.n	8007978 <_printf_i+0x28>
 8007968:	2f62      	cmp	r7, #98	; 0x62
 800796a:	d80a      	bhi.n	8007982 <_printf_i+0x32>
 800796c:	2f00      	cmp	r7, #0
 800796e:	f000 80d8 	beq.w	8007b22 <_printf_i+0x1d2>
 8007972:	2f58      	cmp	r7, #88	; 0x58
 8007974:	f000 80a3 	beq.w	8007abe <_printf_i+0x16e>
 8007978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800797c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007980:	e03a      	b.n	80079f8 <_printf_i+0xa8>
 8007982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007986:	2b15      	cmp	r3, #21
 8007988:	d8f6      	bhi.n	8007978 <_printf_i+0x28>
 800798a:	a101      	add	r1, pc, #4	; (adr r1, 8007990 <_printf_i+0x40>)
 800798c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007990:	080079e9 	.word	0x080079e9
 8007994:	080079fd 	.word	0x080079fd
 8007998:	08007979 	.word	0x08007979
 800799c:	08007979 	.word	0x08007979
 80079a0:	08007979 	.word	0x08007979
 80079a4:	08007979 	.word	0x08007979
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	08007979 	.word	0x08007979
 80079b0:	08007979 	.word	0x08007979
 80079b4:	08007979 	.word	0x08007979
 80079b8:	08007979 	.word	0x08007979
 80079bc:	08007b09 	.word	0x08007b09
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007aeb 	.word	0x08007aeb
 80079c8:	08007979 	.word	0x08007979
 80079cc:	08007979 	.word	0x08007979
 80079d0:	08007b2b 	.word	0x08007b2b
 80079d4:	08007979 	.word	0x08007979
 80079d8:	08007a2d 	.word	0x08007a2d
 80079dc:	08007979 	.word	0x08007979
 80079e0:	08007979 	.word	0x08007979
 80079e4:	08007af3 	.word	0x08007af3
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	1d1a      	adds	r2, r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	602a      	str	r2, [r5, #0]
 80079f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0a3      	b.n	8007b44 <_printf_i+0x1f4>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	6829      	ldr	r1, [r5, #0]
 8007a00:	0606      	lsls	r6, r0, #24
 8007a02:	f101 0304 	add.w	r3, r1, #4
 8007a06:	d50a      	bpl.n	8007a1e <_printf_i+0xce>
 8007a08:	680e      	ldr	r6, [r1, #0]
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	2e00      	cmp	r6, #0
 8007a0e:	da03      	bge.n	8007a18 <_printf_i+0xc8>
 8007a10:	232d      	movs	r3, #45	; 0x2d
 8007a12:	4276      	negs	r6, r6
 8007a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a18:	485e      	ldr	r0, [pc, #376]	; (8007b94 <_printf_i+0x244>)
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	e019      	b.n	8007a52 <_printf_i+0x102>
 8007a1e:	680e      	ldr	r6, [r1, #0]
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a26:	bf18      	it	ne
 8007a28:	b236      	sxthne	r6, r6
 8007a2a:	e7ef      	b.n	8007a0c <_printf_i+0xbc>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	6820      	ldr	r0, [r4, #0]
 8007a30:	1d19      	adds	r1, r3, #4
 8007a32:	6029      	str	r1, [r5, #0]
 8007a34:	0601      	lsls	r1, r0, #24
 8007a36:	d501      	bpl.n	8007a3c <_printf_i+0xec>
 8007a38:	681e      	ldr	r6, [r3, #0]
 8007a3a:	e002      	b.n	8007a42 <_printf_i+0xf2>
 8007a3c:	0646      	lsls	r6, r0, #25
 8007a3e:	d5fb      	bpl.n	8007a38 <_printf_i+0xe8>
 8007a40:	881e      	ldrh	r6, [r3, #0]
 8007a42:	4854      	ldr	r0, [pc, #336]	; (8007b94 <_printf_i+0x244>)
 8007a44:	2f6f      	cmp	r7, #111	; 0x6f
 8007a46:	bf0c      	ite	eq
 8007a48:	2308      	moveq	r3, #8
 8007a4a:	230a      	movne	r3, #10
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a52:	6865      	ldr	r5, [r4, #4]
 8007a54:	60a5      	str	r5, [r4, #8]
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	bfa2      	ittt	ge
 8007a5a:	6821      	ldrge	r1, [r4, #0]
 8007a5c:	f021 0104 	bicge.w	r1, r1, #4
 8007a60:	6021      	strge	r1, [r4, #0]
 8007a62:	b90e      	cbnz	r6, 8007a68 <_printf_i+0x118>
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	d04d      	beq.n	8007b04 <_printf_i+0x1b4>
 8007a68:	4615      	mov	r5, r2
 8007a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a72:	5dc7      	ldrb	r7, [r0, r7]
 8007a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a78:	4637      	mov	r7, r6
 8007a7a:	42bb      	cmp	r3, r7
 8007a7c:	460e      	mov	r6, r1
 8007a7e:	d9f4      	bls.n	8007a6a <_printf_i+0x11a>
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d10b      	bne.n	8007a9c <_printf_i+0x14c>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	07de      	lsls	r6, r3, #31
 8007a88:	d508      	bpl.n	8007a9c <_printf_i+0x14c>
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	6861      	ldr	r1, [r4, #4]
 8007a8e:	4299      	cmp	r1, r3
 8007a90:	bfde      	ittt	le
 8007a92:	2330      	movle	r3, #48	; 0x30
 8007a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a9c:	1b52      	subs	r2, r2, r5
 8007a9e:	6122      	str	r2, [r4, #16]
 8007aa0:	f8cd a000 	str.w	sl, [sp]
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	aa03      	add	r2, sp, #12
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4640      	mov	r0, r8
 8007aac:	f7ff fee2 	bl	8007874 <_printf_common>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d14c      	bne.n	8007b4e <_printf_i+0x1fe>
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	b004      	add	sp, #16
 8007aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abe:	4835      	ldr	r0, [pc, #212]	; (8007b94 <_printf_i+0x244>)
 8007ac0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ac4:	6829      	ldr	r1, [r5, #0]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007acc:	6029      	str	r1, [r5, #0]
 8007ace:	061d      	lsls	r5, r3, #24
 8007ad0:	d514      	bpl.n	8007afc <_printf_i+0x1ac>
 8007ad2:	07df      	lsls	r7, r3, #31
 8007ad4:	bf44      	itt	mi
 8007ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8007ada:	6023      	strmi	r3, [r4, #0]
 8007adc:	b91e      	cbnz	r6, 8007ae6 <_printf_i+0x196>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	f023 0320 	bic.w	r3, r3, #32
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	2310      	movs	r3, #16
 8007ae8:	e7b0      	b.n	8007a4c <_printf_i+0xfc>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	f043 0320 	orr.w	r3, r3, #32
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	2378      	movs	r3, #120	; 0x78
 8007af4:	4828      	ldr	r0, [pc, #160]	; (8007b98 <_printf_i+0x248>)
 8007af6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007afa:	e7e3      	b.n	8007ac4 <_printf_i+0x174>
 8007afc:	0659      	lsls	r1, r3, #25
 8007afe:	bf48      	it	mi
 8007b00:	b2b6      	uxthmi	r6, r6
 8007b02:	e7e6      	b.n	8007ad2 <_printf_i+0x182>
 8007b04:	4615      	mov	r5, r2
 8007b06:	e7bb      	b.n	8007a80 <_printf_i+0x130>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	6826      	ldr	r6, [r4, #0]
 8007b0c:	6961      	ldr	r1, [r4, #20]
 8007b0e:	1d18      	adds	r0, r3, #4
 8007b10:	6028      	str	r0, [r5, #0]
 8007b12:	0635      	lsls	r5, r6, #24
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	d501      	bpl.n	8007b1c <_printf_i+0x1cc>
 8007b18:	6019      	str	r1, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <_printf_i+0x1d2>
 8007b1c:	0670      	lsls	r0, r6, #25
 8007b1e:	d5fb      	bpl.n	8007b18 <_printf_i+0x1c8>
 8007b20:	8019      	strh	r1, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	4615      	mov	r5, r2
 8007b28:	e7ba      	b.n	8007aa0 <_printf_i+0x150>
 8007b2a:	682b      	ldr	r3, [r5, #0]
 8007b2c:	1d1a      	adds	r2, r3, #4
 8007b2e:	602a      	str	r2, [r5, #0]
 8007b30:	681d      	ldr	r5, [r3, #0]
 8007b32:	6862      	ldr	r2, [r4, #4]
 8007b34:	2100      	movs	r1, #0
 8007b36:	4628      	mov	r0, r5
 8007b38:	f7f8 fb5a 	bl	80001f0 <memchr>
 8007b3c:	b108      	cbz	r0, 8007b42 <_printf_i+0x1f2>
 8007b3e:	1b40      	subs	r0, r0, r5
 8007b40:	6060      	str	r0, [r4, #4]
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	2300      	movs	r3, #0
 8007b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b4c:	e7a8      	b.n	8007aa0 <_printf_i+0x150>
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	462a      	mov	r2, r5
 8007b52:	4649      	mov	r1, r9
 8007b54:	4640      	mov	r0, r8
 8007b56:	47d0      	blx	sl
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d0ab      	beq.n	8007ab4 <_printf_i+0x164>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	079b      	lsls	r3, r3, #30
 8007b60:	d413      	bmi.n	8007b8a <_printf_i+0x23a>
 8007b62:	68e0      	ldr	r0, [r4, #12]
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	4298      	cmp	r0, r3
 8007b68:	bfb8      	it	lt
 8007b6a:	4618      	movlt	r0, r3
 8007b6c:	e7a4      	b.n	8007ab8 <_printf_i+0x168>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4632      	mov	r2, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d09b      	beq.n	8007ab4 <_printf_i+0x164>
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	68e3      	ldr	r3, [r4, #12]
 8007b80:	9903      	ldr	r1, [sp, #12]
 8007b82:	1a5b      	subs	r3, r3, r1
 8007b84:	42ab      	cmp	r3, r5
 8007b86:	dcf2      	bgt.n	8007b6e <_printf_i+0x21e>
 8007b88:	e7eb      	b.n	8007b62 <_printf_i+0x212>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	f104 0619 	add.w	r6, r4, #25
 8007b90:	e7f5      	b.n	8007b7e <_printf_i+0x22e>
 8007b92:	bf00      	nop
 8007b94:	08009d46 	.word	0x08009d46
 8007b98:	08009d57 	.word	0x08009d57

08007b9c <quorem>:
 8007b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba0:	6903      	ldr	r3, [r0, #16]
 8007ba2:	690c      	ldr	r4, [r1, #16]
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	f2c0 8081 	blt.w	8007cae <quorem+0x112>
 8007bac:	3c01      	subs	r4, #1
 8007bae:	f101 0814 	add.w	r8, r1, #20
 8007bb2:	f100 0514 	add.w	r5, r0, #20
 8007bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd4:	d331      	bcc.n	8007c3a <quorem+0x9e>
 8007bd6:	f04f 0e00 	mov.w	lr, #0
 8007bda:	4640      	mov	r0, r8
 8007bdc:	46ac      	mov	ip, r5
 8007bde:	46f2      	mov	sl, lr
 8007be0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007be4:	b293      	uxth	r3, r2
 8007be6:	fb06 e303 	mla	r3, r6, r3, lr
 8007bea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	ebaa 0303 	sub.w	r3, sl, r3
 8007bf4:	f8dc a000 	ldr.w	sl, [ip]
 8007bf8:	0c12      	lsrs	r2, r2, #16
 8007bfa:	fa13 f38a 	uxtah	r3, r3, sl
 8007bfe:	fb06 e202 	mla	r2, r6, r2, lr
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c0a:	b292      	uxth	r2, r2
 8007c0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c14:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c18:	4581      	cmp	r9, r0
 8007c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c1e:	f84c 3b04 	str.w	r3, [ip], #4
 8007c22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c26:	d2db      	bcs.n	8007be0 <quorem+0x44>
 8007c28:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c2c:	b92b      	cbnz	r3, 8007c3a <quorem+0x9e>
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	3b04      	subs	r3, #4
 8007c32:	429d      	cmp	r5, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	d32e      	bcc.n	8007c96 <quorem+0xfa>
 8007c38:	613c      	str	r4, [r7, #16]
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	f001 f8c6 	bl	8008dcc <__mcmp>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	db24      	blt.n	8007c8e <quorem+0xf2>
 8007c44:	3601      	adds	r6, #1
 8007c46:	4628      	mov	r0, r5
 8007c48:	f04f 0c00 	mov.w	ip, #0
 8007c4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c50:	f8d0 e000 	ldr.w	lr, [r0]
 8007c54:	b293      	uxth	r3, r2
 8007c56:	ebac 0303 	sub.w	r3, ip, r3
 8007c5a:	0c12      	lsrs	r2, r2, #16
 8007c5c:	fa13 f38e 	uxtah	r3, r3, lr
 8007c60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c6e:	45c1      	cmp	r9, r8
 8007c70:	f840 3b04 	str.w	r3, [r0], #4
 8007c74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c78:	d2e8      	bcs.n	8007c4c <quorem+0xb0>
 8007c7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c82:	b922      	cbnz	r2, 8007c8e <quorem+0xf2>
 8007c84:	3b04      	subs	r3, #4
 8007c86:	429d      	cmp	r5, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	d30a      	bcc.n	8007ca2 <quorem+0x106>
 8007c8c:	613c      	str	r4, [r7, #16]
 8007c8e:	4630      	mov	r0, r6
 8007c90:	b003      	add	sp, #12
 8007c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	2a00      	cmp	r2, #0
 8007c9c:	d1cc      	bne.n	8007c38 <quorem+0x9c>
 8007c9e:	3c01      	subs	r4, #1
 8007ca0:	e7c7      	b.n	8007c32 <quorem+0x96>
 8007ca2:	6812      	ldr	r2, [r2, #0]
 8007ca4:	3b04      	subs	r3, #4
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	d1f0      	bne.n	8007c8c <quorem+0xf0>
 8007caa:	3c01      	subs	r4, #1
 8007cac:	e7eb      	b.n	8007c86 <quorem+0xea>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e7ee      	b.n	8007c90 <quorem+0xf4>
 8007cb2:	0000      	movs	r0, r0
 8007cb4:	0000      	movs	r0, r0
	...

08007cb8 <_dtoa_r>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	ed2d 8b04 	vpush	{d8-d9}
 8007cc0:	ec57 6b10 	vmov	r6, r7, d0
 8007cc4:	b093      	sub	sp, #76	; 0x4c
 8007cc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ccc:	9106      	str	r1, [sp, #24]
 8007cce:	ee10 aa10 	vmov	sl, s0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cd8:	46bb      	mov	fp, r7
 8007cda:	b975      	cbnz	r5, 8007cfa <_dtoa_r+0x42>
 8007cdc:	2010      	movs	r0, #16
 8007cde:	f000 fddd 	bl	800889c <malloc>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ce6:	b920      	cbnz	r0, 8007cf2 <_dtoa_r+0x3a>
 8007ce8:	4ba7      	ldr	r3, [pc, #668]	; (8007f88 <_dtoa_r+0x2d0>)
 8007cea:	21ea      	movs	r1, #234	; 0xea
 8007cec:	48a7      	ldr	r0, [pc, #668]	; (8007f8c <_dtoa_r+0x2d4>)
 8007cee:	f001 fa75 	bl	80091dc <__assert_func>
 8007cf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cf6:	6005      	str	r5, [r0, #0]
 8007cf8:	60c5      	str	r5, [r0, #12]
 8007cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cfc:	6819      	ldr	r1, [r3, #0]
 8007cfe:	b151      	cbz	r1, 8007d16 <_dtoa_r+0x5e>
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	604a      	str	r2, [r1, #4]
 8007d04:	2301      	movs	r3, #1
 8007d06:	4093      	lsls	r3, r2
 8007d08:	608b      	str	r3, [r1, #8]
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 fe1c 	bl	8008948 <_Bfree>
 8007d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	1e3b      	subs	r3, r7, #0
 8007d18:	bfaa      	itet	ge
 8007d1a:	2300      	movge	r3, #0
 8007d1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d20:	f8c8 3000 	strge.w	r3, [r8]
 8007d24:	4b9a      	ldr	r3, [pc, #616]	; (8007f90 <_dtoa_r+0x2d8>)
 8007d26:	bfbc      	itt	lt
 8007d28:	2201      	movlt	r2, #1
 8007d2a:	f8c8 2000 	strlt.w	r2, [r8]
 8007d2e:	ea33 030b 	bics.w	r3, r3, fp
 8007d32:	d11b      	bne.n	8007d6c <_dtoa_r+0xb4>
 8007d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d36:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d40:	4333      	orrs	r3, r6
 8007d42:	f000 8592 	beq.w	800886a <_dtoa_r+0xbb2>
 8007d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d48:	b963      	cbnz	r3, 8007d64 <_dtoa_r+0xac>
 8007d4a:	4b92      	ldr	r3, [pc, #584]	; (8007f94 <_dtoa_r+0x2dc>)
 8007d4c:	e022      	b.n	8007d94 <_dtoa_r+0xdc>
 8007d4e:	4b92      	ldr	r3, [pc, #584]	; (8007f98 <_dtoa_r+0x2e0>)
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	3308      	adds	r3, #8
 8007d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	9801      	ldr	r0, [sp, #4]
 8007d5a:	b013      	add	sp, #76	; 0x4c
 8007d5c:	ecbd 8b04 	vpop	{d8-d9}
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	4b8b      	ldr	r3, [pc, #556]	; (8007f94 <_dtoa_r+0x2dc>)
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	3303      	adds	r3, #3
 8007d6a:	e7f3      	b.n	8007d54 <_dtoa_r+0x9c>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4650      	mov	r0, sl
 8007d72:	4659      	mov	r1, fp
 8007d74:	f7f8 feb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d78:	ec4b ab19 	vmov	d9, sl, fp
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	b158      	cbz	r0, 8007d98 <_dtoa_r+0xe0>
 8007d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d82:	2301      	movs	r3, #1
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 856b 	beq.w	8008864 <_dtoa_r+0xbac>
 8007d8e:	4883      	ldr	r0, [pc, #524]	; (8007f9c <_dtoa_r+0x2e4>)
 8007d90:	6018      	str	r0, [r3, #0]
 8007d92:	1e43      	subs	r3, r0, #1
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	e7df      	b.n	8007d58 <_dtoa_r+0xa0>
 8007d98:	ec4b ab10 	vmov	d0, sl, fp
 8007d9c:	aa10      	add	r2, sp, #64	; 0x40
 8007d9e:	a911      	add	r1, sp, #68	; 0x44
 8007da0:	4620      	mov	r0, r4
 8007da2:	f001 f8b9 	bl	8008f18 <__d2b>
 8007da6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007daa:	ee08 0a10 	vmov	s16, r0
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	f000 8084 	beq.w	8007ebc <_dtoa_r+0x204>
 8007db4:	ee19 3a90 	vmov	r3, s19
 8007db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007dc0:	4656      	mov	r6, sl
 8007dc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dce:	4b74      	ldr	r3, [pc, #464]	; (8007fa0 <_dtoa_r+0x2e8>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fa5f 	bl	8000298 <__aeabi_dsub>
 8007dda:	a365      	add	r3, pc, #404	; (adr r3, 8007f70 <_dtoa_r+0x2b8>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fc12 	bl	8000608 <__aeabi_dmul>
 8007de4:	a364      	add	r3, pc, #400	; (adr r3, 8007f78 <_dtoa_r+0x2c0>)
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	f7f8 fa57 	bl	800029c <__adddf3>
 8007dee:	4606      	mov	r6, r0
 8007df0:	4628      	mov	r0, r5
 8007df2:	460f      	mov	r7, r1
 8007df4:	f7f8 fb9e 	bl	8000534 <__aeabi_i2d>
 8007df8:	a361      	add	r3, pc, #388	; (adr r3, 8007f80 <_dtoa_r+0x2c8>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fc03 	bl	8000608 <__aeabi_dmul>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4630      	mov	r0, r6
 8007e08:	4639      	mov	r1, r7
 8007e0a:	f7f8 fa47 	bl	800029c <__adddf3>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460f      	mov	r7, r1
 8007e12:	f7f8 fea9 	bl	8000b68 <__aeabi_d2iz>
 8007e16:	2200      	movs	r2, #0
 8007e18:	9000      	str	r0, [sp, #0]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fe64 	bl	8000aec <__aeabi_dcmplt>
 8007e24:	b150      	cbz	r0, 8007e3c <_dtoa_r+0x184>
 8007e26:	9800      	ldr	r0, [sp, #0]
 8007e28:	f7f8 fb84 	bl	8000534 <__aeabi_i2d>
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	f7f8 fe52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e34:	b910      	cbnz	r0, 8007e3c <_dtoa_r+0x184>
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	9b00      	ldr	r3, [sp, #0]
 8007e3e:	2b16      	cmp	r3, #22
 8007e40:	d85a      	bhi.n	8007ef8 <_dtoa_r+0x240>
 8007e42:	9a00      	ldr	r2, [sp, #0]
 8007e44:	4b57      	ldr	r3, [pc, #348]	; (8007fa4 <_dtoa_r+0x2ec>)
 8007e46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	ec51 0b19 	vmov	r0, r1, d9
 8007e52:	f7f8 fe4b 	bl	8000aec <__aeabi_dcmplt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d050      	beq.n	8007efc <_dtoa_r+0x244>
 8007e5a:	9b00      	ldr	r3, [sp, #0]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2300      	movs	r3, #0
 8007e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e66:	1b5d      	subs	r5, r3, r5
 8007e68:	1e6b      	subs	r3, r5, #1
 8007e6a:	9305      	str	r3, [sp, #20]
 8007e6c:	bf45      	ittet	mi
 8007e6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e72:	9304      	strmi	r3, [sp, #16]
 8007e74:	2300      	movpl	r3, #0
 8007e76:	2300      	movmi	r3, #0
 8007e78:	bf4c      	ite	mi
 8007e7a:	9305      	strmi	r3, [sp, #20]
 8007e7c:	9304      	strpl	r3, [sp, #16]
 8007e7e:	9b00      	ldr	r3, [sp, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	db3d      	blt.n	8007f00 <_dtoa_r+0x248>
 8007e84:	9b05      	ldr	r3, [sp, #20]
 8007e86:	9a00      	ldr	r2, [sp, #0]
 8007e88:	920a      	str	r2, [sp, #40]	; 0x28
 8007e8a:	4413      	add	r3, r2
 8007e8c:	9305      	str	r3, [sp, #20]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9307      	str	r3, [sp, #28]
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	2b09      	cmp	r3, #9
 8007e96:	f200 8089 	bhi.w	8007fac <_dtoa_r+0x2f4>
 8007e9a:	2b05      	cmp	r3, #5
 8007e9c:	bfc4      	itt	gt
 8007e9e:	3b04      	subgt	r3, #4
 8007ea0:	9306      	strgt	r3, [sp, #24]
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ea8:	bfcc      	ite	gt
 8007eaa:	2500      	movgt	r5, #0
 8007eac:	2501      	movle	r5, #1
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	f200 8087 	bhi.w	8007fc2 <_dtoa_r+0x30a>
 8007eb4:	e8df f003 	tbb	[pc, r3]
 8007eb8:	59383a2d 	.word	0x59383a2d
 8007ebc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ec0:	441d      	add	r5, r3
 8007ec2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	bfc1      	itttt	gt
 8007eca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ece:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ed2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ed6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eda:	bfda      	itte	le
 8007edc:	f1c3 0320 	rsble	r3, r3, #32
 8007ee0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ee4:	4318      	orrgt	r0, r3
 8007ee6:	f7f8 fb15 	bl	8000514 <__aeabi_ui2d>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4606      	mov	r6, r0
 8007eee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ef2:	3d01      	subs	r5, #1
 8007ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ef6:	e76a      	b.n	8007dce <_dtoa_r+0x116>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7b2      	b.n	8007e62 <_dtoa_r+0x1aa>
 8007efc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007efe:	e7b1      	b.n	8007e64 <_dtoa_r+0x1ac>
 8007f00:	9b04      	ldr	r3, [sp, #16]
 8007f02:	9a00      	ldr	r2, [sp, #0]
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	4253      	negs	r3, r2
 8007f0a:	9307      	str	r3, [sp, #28]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f10:	e7bf      	b.n	8007e92 <_dtoa_r+0x1da>
 8007f12:	2300      	movs	r3, #0
 8007f14:	9308      	str	r3, [sp, #32]
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc55      	bgt.n	8007fc8 <_dtoa_r+0x310>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f22:	461a      	mov	r2, r3
 8007f24:	9209      	str	r2, [sp, #36]	; 0x24
 8007f26:	e00c      	b.n	8007f42 <_dtoa_r+0x28a>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e7f3      	b.n	8007f14 <_dtoa_r+0x25c>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f30:	9308      	str	r3, [sp, #32]
 8007f32:	9b00      	ldr	r3, [sp, #0]
 8007f34:	4413      	add	r3, r2
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	bfb8      	it	lt
 8007f40:	2301      	movlt	r3, #1
 8007f42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f44:	2200      	movs	r2, #0
 8007f46:	6042      	str	r2, [r0, #4]
 8007f48:	2204      	movs	r2, #4
 8007f4a:	f102 0614 	add.w	r6, r2, #20
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	6841      	ldr	r1, [r0, #4]
 8007f52:	d93d      	bls.n	8007fd0 <_dtoa_r+0x318>
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 fcb7 	bl	80088c8 <_Balloc>
 8007f5a:	9001      	str	r0, [sp, #4]
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d13b      	bne.n	8007fd8 <_dtoa_r+0x320>
 8007f60:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <_dtoa_r+0x2f0>)
 8007f62:	4602      	mov	r2, r0
 8007f64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f68:	e6c0      	b.n	8007cec <_dtoa_r+0x34>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e7df      	b.n	8007f2e <_dtoa_r+0x276>
 8007f6e:	bf00      	nop
 8007f70:	636f4361 	.word	0x636f4361
 8007f74:	3fd287a7 	.word	0x3fd287a7
 8007f78:	8b60c8b3 	.word	0x8b60c8b3
 8007f7c:	3fc68a28 	.word	0x3fc68a28
 8007f80:	509f79fb 	.word	0x509f79fb
 8007f84:	3fd34413 	.word	0x3fd34413
 8007f88:	08009d75 	.word	0x08009d75
 8007f8c:	08009d8c 	.word	0x08009d8c
 8007f90:	7ff00000 	.word	0x7ff00000
 8007f94:	08009d71 	.word	0x08009d71
 8007f98:	08009d68 	.word	0x08009d68
 8007f9c:	08009d45 	.word	0x08009d45
 8007fa0:	3ff80000 	.word	0x3ff80000
 8007fa4:	08009e80 	.word	0x08009e80
 8007fa8:	08009de7 	.word	0x08009de7
 8007fac:	2501      	movs	r5, #1
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9306      	str	r3, [sp, #24]
 8007fb2:	9508      	str	r5, [sp, #32]
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2312      	movs	r3, #18
 8007fc0:	e7b0      	b.n	8007f24 <_dtoa_r+0x26c>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	9308      	str	r3, [sp, #32]
 8007fc6:	e7f5      	b.n	8007fb4 <_dtoa_r+0x2fc>
 8007fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fce:	e7b8      	b.n	8007f42 <_dtoa_r+0x28a>
 8007fd0:	3101      	adds	r1, #1
 8007fd2:	6041      	str	r1, [r0, #4]
 8007fd4:	0052      	lsls	r2, r2, #1
 8007fd6:	e7b8      	b.n	8007f4a <_dtoa_r+0x292>
 8007fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fda:	9a01      	ldr	r2, [sp, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	2b0e      	cmp	r3, #14
 8007fe2:	f200 809d 	bhi.w	8008120 <_dtoa_r+0x468>
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	f000 809a 	beq.w	8008120 <_dtoa_r+0x468>
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	dd32      	ble.n	8008058 <_dtoa_r+0x3a0>
 8007ff2:	4ab7      	ldr	r2, [pc, #732]	; (80082d0 <_dtoa_r+0x618>)
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008000:	9b00      	ldr	r3, [sp, #0]
 8008002:	05d8      	lsls	r0, r3, #23
 8008004:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008008:	d516      	bpl.n	8008038 <_dtoa_r+0x380>
 800800a:	4bb2      	ldr	r3, [pc, #712]	; (80082d4 <_dtoa_r+0x61c>)
 800800c:	ec51 0b19 	vmov	r0, r1, d9
 8008010:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008014:	f7f8 fc22 	bl	800085c <__aeabi_ddiv>
 8008018:	f007 070f 	and.w	r7, r7, #15
 800801c:	4682      	mov	sl, r0
 800801e:	468b      	mov	fp, r1
 8008020:	2503      	movs	r5, #3
 8008022:	4eac      	ldr	r6, [pc, #688]	; (80082d4 <_dtoa_r+0x61c>)
 8008024:	b957      	cbnz	r7, 800803c <_dtoa_r+0x384>
 8008026:	4642      	mov	r2, r8
 8008028:	464b      	mov	r3, r9
 800802a:	4650      	mov	r0, sl
 800802c:	4659      	mov	r1, fp
 800802e:	f7f8 fc15 	bl	800085c <__aeabi_ddiv>
 8008032:	4682      	mov	sl, r0
 8008034:	468b      	mov	fp, r1
 8008036:	e028      	b.n	800808a <_dtoa_r+0x3d2>
 8008038:	2502      	movs	r5, #2
 800803a:	e7f2      	b.n	8008022 <_dtoa_r+0x36a>
 800803c:	07f9      	lsls	r1, r7, #31
 800803e:	d508      	bpl.n	8008052 <_dtoa_r+0x39a>
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008048:	f7f8 fade 	bl	8000608 <__aeabi_dmul>
 800804c:	3501      	adds	r5, #1
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	107f      	asrs	r7, r7, #1
 8008054:	3608      	adds	r6, #8
 8008056:	e7e5      	b.n	8008024 <_dtoa_r+0x36c>
 8008058:	f000 809b 	beq.w	8008192 <_dtoa_r+0x4da>
 800805c:	9b00      	ldr	r3, [sp, #0]
 800805e:	4f9d      	ldr	r7, [pc, #628]	; (80082d4 <_dtoa_r+0x61c>)
 8008060:	425e      	negs	r6, r3
 8008062:	4b9b      	ldr	r3, [pc, #620]	; (80082d0 <_dtoa_r+0x618>)
 8008064:	f006 020f 	and.w	r2, r6, #15
 8008068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	ec51 0b19 	vmov	r0, r1, d9
 8008074:	f7f8 fac8 	bl	8000608 <__aeabi_dmul>
 8008078:	1136      	asrs	r6, r6, #4
 800807a:	4682      	mov	sl, r0
 800807c:	468b      	mov	fp, r1
 800807e:	2300      	movs	r3, #0
 8008080:	2502      	movs	r5, #2
 8008082:	2e00      	cmp	r6, #0
 8008084:	d17a      	bne.n	800817c <_dtoa_r+0x4c4>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1d3      	bne.n	8008032 <_dtoa_r+0x37a>
 800808a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8082 	beq.w	8008196 <_dtoa_r+0x4de>
 8008092:	4b91      	ldr	r3, [pc, #580]	; (80082d8 <_dtoa_r+0x620>)
 8008094:	2200      	movs	r2, #0
 8008096:	4650      	mov	r0, sl
 8008098:	4659      	mov	r1, fp
 800809a:	f7f8 fd27 	bl	8000aec <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d079      	beq.n	8008196 <_dtoa_r+0x4de>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d076      	beq.n	8008196 <_dtoa_r+0x4de>
 80080a8:	9b02      	ldr	r3, [sp, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dd36      	ble.n	800811c <_dtoa_r+0x464>
 80080ae:	9b00      	ldr	r3, [sp, #0]
 80080b0:	4650      	mov	r0, sl
 80080b2:	4659      	mov	r1, fp
 80080b4:	1e5f      	subs	r7, r3, #1
 80080b6:	2200      	movs	r2, #0
 80080b8:	4b88      	ldr	r3, [pc, #544]	; (80082dc <_dtoa_r+0x624>)
 80080ba:	f7f8 faa5 	bl	8000608 <__aeabi_dmul>
 80080be:	9e02      	ldr	r6, [sp, #8]
 80080c0:	4682      	mov	sl, r0
 80080c2:	468b      	mov	fp, r1
 80080c4:	3501      	adds	r5, #1
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7f8 fa34 	bl	8000534 <__aeabi_i2d>
 80080cc:	4652      	mov	r2, sl
 80080ce:	465b      	mov	r3, fp
 80080d0:	f7f8 fa9a 	bl	8000608 <__aeabi_dmul>
 80080d4:	4b82      	ldr	r3, [pc, #520]	; (80082e0 <_dtoa_r+0x628>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	f7f8 f8e0 	bl	800029c <__adddf3>
 80080dc:	46d0      	mov	r8, sl
 80080de:	46d9      	mov	r9, fp
 80080e0:	4682      	mov	sl, r0
 80080e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080e6:	2e00      	cmp	r6, #0
 80080e8:	d158      	bne.n	800819c <_dtoa_r+0x4e4>
 80080ea:	4b7e      	ldr	r3, [pc, #504]	; (80082e4 <_dtoa_r+0x62c>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	4640      	mov	r0, r8
 80080f0:	4649      	mov	r1, r9
 80080f2:	f7f8 f8d1 	bl	8000298 <__aeabi_dsub>
 80080f6:	4652      	mov	r2, sl
 80080f8:	465b      	mov	r3, fp
 80080fa:	4680      	mov	r8, r0
 80080fc:	4689      	mov	r9, r1
 80080fe:	f7f8 fd13 	bl	8000b28 <__aeabi_dcmpgt>
 8008102:	2800      	cmp	r0, #0
 8008104:	f040 8295 	bne.w	8008632 <_dtoa_r+0x97a>
 8008108:	4652      	mov	r2, sl
 800810a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800810e:	4640      	mov	r0, r8
 8008110:	4649      	mov	r1, r9
 8008112:	f7f8 fceb 	bl	8000aec <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	f040 8289 	bne.w	800862e <_dtoa_r+0x976>
 800811c:	ec5b ab19 	vmov	sl, fp, d9
 8008120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008122:	2b00      	cmp	r3, #0
 8008124:	f2c0 8148 	blt.w	80083b8 <_dtoa_r+0x700>
 8008128:	9a00      	ldr	r2, [sp, #0]
 800812a:	2a0e      	cmp	r2, #14
 800812c:	f300 8144 	bgt.w	80083b8 <_dtoa_r+0x700>
 8008130:	4b67      	ldr	r3, [pc, #412]	; (80082d0 <_dtoa_r+0x618>)
 8008132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800813a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	f280 80d5 	bge.w	80082ec <_dtoa_r+0x634>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f300 80d1 	bgt.w	80082ec <_dtoa_r+0x634>
 800814a:	f040 826f 	bne.w	800862c <_dtoa_r+0x974>
 800814e:	4b65      	ldr	r3, [pc, #404]	; (80082e4 <_dtoa_r+0x62c>)
 8008150:	2200      	movs	r2, #0
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f7f8 fa57 	bl	8000608 <__aeabi_dmul>
 800815a:	4652      	mov	r2, sl
 800815c:	465b      	mov	r3, fp
 800815e:	f7f8 fcd9 	bl	8000b14 <__aeabi_dcmpge>
 8008162:	9e03      	ldr	r6, [sp, #12]
 8008164:	4637      	mov	r7, r6
 8008166:	2800      	cmp	r0, #0
 8008168:	f040 8245 	bne.w	80085f6 <_dtoa_r+0x93e>
 800816c:	9d01      	ldr	r5, [sp, #4]
 800816e:	2331      	movs	r3, #49	; 0x31
 8008170:	f805 3b01 	strb.w	r3, [r5], #1
 8008174:	9b00      	ldr	r3, [sp, #0]
 8008176:	3301      	adds	r3, #1
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	e240      	b.n	80085fe <_dtoa_r+0x946>
 800817c:	07f2      	lsls	r2, r6, #31
 800817e:	d505      	bpl.n	800818c <_dtoa_r+0x4d4>
 8008180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008184:	f7f8 fa40 	bl	8000608 <__aeabi_dmul>
 8008188:	3501      	adds	r5, #1
 800818a:	2301      	movs	r3, #1
 800818c:	1076      	asrs	r6, r6, #1
 800818e:	3708      	adds	r7, #8
 8008190:	e777      	b.n	8008082 <_dtoa_r+0x3ca>
 8008192:	2502      	movs	r5, #2
 8008194:	e779      	b.n	800808a <_dtoa_r+0x3d2>
 8008196:	9f00      	ldr	r7, [sp, #0]
 8008198:	9e03      	ldr	r6, [sp, #12]
 800819a:	e794      	b.n	80080c6 <_dtoa_r+0x40e>
 800819c:	9901      	ldr	r1, [sp, #4]
 800819e:	4b4c      	ldr	r3, [pc, #304]	; (80082d0 <_dtoa_r+0x618>)
 80081a0:	4431      	add	r1, r6
 80081a2:	910d      	str	r1, [sp, #52]	; 0x34
 80081a4:	9908      	ldr	r1, [sp, #32]
 80081a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d043      	beq.n	800823a <_dtoa_r+0x582>
 80081b2:	494d      	ldr	r1, [pc, #308]	; (80082e8 <_dtoa_r+0x630>)
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7f8 fb51 	bl	800085c <__aeabi_ddiv>
 80081ba:	4652      	mov	r2, sl
 80081bc:	465b      	mov	r3, fp
 80081be:	f7f8 f86b 	bl	8000298 <__aeabi_dsub>
 80081c2:	9d01      	ldr	r5, [sp, #4]
 80081c4:	4682      	mov	sl, r0
 80081c6:	468b      	mov	fp, r1
 80081c8:	4649      	mov	r1, r9
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7f8 fccc 	bl	8000b68 <__aeabi_d2iz>
 80081d0:	4606      	mov	r6, r0
 80081d2:	f7f8 f9af 	bl	8000534 <__aeabi_i2d>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 f85b 	bl	8000298 <__aeabi_dsub>
 80081e2:	3630      	adds	r6, #48	; 0x30
 80081e4:	f805 6b01 	strb.w	r6, [r5], #1
 80081e8:	4652      	mov	r2, sl
 80081ea:	465b      	mov	r3, fp
 80081ec:	4680      	mov	r8, r0
 80081ee:	4689      	mov	r9, r1
 80081f0:	f7f8 fc7c 	bl	8000aec <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d163      	bne.n	80082c0 <_dtoa_r+0x608>
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4936      	ldr	r1, [pc, #216]	; (80082d8 <_dtoa_r+0x620>)
 80081fe:	2000      	movs	r0, #0
 8008200:	f7f8 f84a 	bl	8000298 <__aeabi_dsub>
 8008204:	4652      	mov	r2, sl
 8008206:	465b      	mov	r3, fp
 8008208:	f7f8 fc70 	bl	8000aec <__aeabi_dcmplt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f040 80b5 	bne.w	800837c <_dtoa_r+0x6c4>
 8008212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008214:	429d      	cmp	r5, r3
 8008216:	d081      	beq.n	800811c <_dtoa_r+0x464>
 8008218:	4b30      	ldr	r3, [pc, #192]	; (80082dc <_dtoa_r+0x624>)
 800821a:	2200      	movs	r2, #0
 800821c:	4650      	mov	r0, sl
 800821e:	4659      	mov	r1, fp
 8008220:	f7f8 f9f2 	bl	8000608 <__aeabi_dmul>
 8008224:	4b2d      	ldr	r3, [pc, #180]	; (80082dc <_dtoa_r+0x624>)
 8008226:	4682      	mov	sl, r0
 8008228:	468b      	mov	fp, r1
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	2200      	movs	r2, #0
 8008230:	f7f8 f9ea 	bl	8000608 <__aeabi_dmul>
 8008234:	4680      	mov	r8, r0
 8008236:	4689      	mov	r9, r1
 8008238:	e7c6      	b.n	80081c8 <_dtoa_r+0x510>
 800823a:	4650      	mov	r0, sl
 800823c:	4659      	mov	r1, fp
 800823e:	f7f8 f9e3 	bl	8000608 <__aeabi_dmul>
 8008242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008244:	9d01      	ldr	r5, [sp, #4]
 8008246:	930f      	str	r3, [sp, #60]	; 0x3c
 8008248:	4682      	mov	sl, r0
 800824a:	468b      	mov	fp, r1
 800824c:	4649      	mov	r1, r9
 800824e:	4640      	mov	r0, r8
 8008250:	f7f8 fc8a 	bl	8000b68 <__aeabi_d2iz>
 8008254:	4606      	mov	r6, r0
 8008256:	f7f8 f96d 	bl	8000534 <__aeabi_i2d>
 800825a:	3630      	adds	r6, #48	; 0x30
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4640      	mov	r0, r8
 8008262:	4649      	mov	r1, r9
 8008264:	f7f8 f818 	bl	8000298 <__aeabi_dsub>
 8008268:	f805 6b01 	strb.w	r6, [r5], #1
 800826c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800826e:	429d      	cmp	r5, r3
 8008270:	4680      	mov	r8, r0
 8008272:	4689      	mov	r9, r1
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	d124      	bne.n	80082c4 <_dtoa_r+0x60c>
 800827a:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <_dtoa_r+0x630>)
 800827c:	4650      	mov	r0, sl
 800827e:	4659      	mov	r1, fp
 8008280:	f7f8 f80c 	bl	800029c <__adddf3>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	f7f8 fc4c 	bl	8000b28 <__aeabi_dcmpgt>
 8008290:	2800      	cmp	r0, #0
 8008292:	d173      	bne.n	800837c <_dtoa_r+0x6c4>
 8008294:	4652      	mov	r2, sl
 8008296:	465b      	mov	r3, fp
 8008298:	4913      	ldr	r1, [pc, #76]	; (80082e8 <_dtoa_r+0x630>)
 800829a:	2000      	movs	r0, #0
 800829c:	f7f7 fffc 	bl	8000298 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	f7f8 fc20 	bl	8000aec <__aeabi_dcmplt>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f43f af35 	beq.w	800811c <_dtoa_r+0x464>
 80082b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082b4:	1e6b      	subs	r3, r5, #1
 80082b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082bc:	2b30      	cmp	r3, #48	; 0x30
 80082be:	d0f8      	beq.n	80082b2 <_dtoa_r+0x5fa>
 80082c0:	9700      	str	r7, [sp, #0]
 80082c2:	e049      	b.n	8008358 <_dtoa_r+0x6a0>
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <_dtoa_r+0x624>)
 80082c6:	f7f8 f99f 	bl	8000608 <__aeabi_dmul>
 80082ca:	4680      	mov	r8, r0
 80082cc:	4689      	mov	r9, r1
 80082ce:	e7bd      	b.n	800824c <_dtoa_r+0x594>
 80082d0:	08009e80 	.word	0x08009e80
 80082d4:	08009e58 	.word	0x08009e58
 80082d8:	3ff00000 	.word	0x3ff00000
 80082dc:	40240000 	.word	0x40240000
 80082e0:	401c0000 	.word	0x401c0000
 80082e4:	40140000 	.word	0x40140000
 80082e8:	3fe00000 	.word	0x3fe00000
 80082ec:	9d01      	ldr	r5, [sp, #4]
 80082ee:	4656      	mov	r6, sl
 80082f0:	465f      	mov	r7, fp
 80082f2:	4642      	mov	r2, r8
 80082f4:	464b      	mov	r3, r9
 80082f6:	4630      	mov	r0, r6
 80082f8:	4639      	mov	r1, r7
 80082fa:	f7f8 faaf 	bl	800085c <__aeabi_ddiv>
 80082fe:	f7f8 fc33 	bl	8000b68 <__aeabi_d2iz>
 8008302:	4682      	mov	sl, r0
 8008304:	f7f8 f916 	bl	8000534 <__aeabi_i2d>
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	f7f8 f97c 	bl	8000608 <__aeabi_dmul>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800831c:	f7f7 ffbc 	bl	8000298 <__aeabi_dsub>
 8008320:	f805 6b01 	strb.w	r6, [r5], #1
 8008324:	9e01      	ldr	r6, [sp, #4]
 8008326:	9f03      	ldr	r7, [sp, #12]
 8008328:	1bae      	subs	r6, r5, r6
 800832a:	42b7      	cmp	r7, r6
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	d135      	bne.n	800839e <_dtoa_r+0x6e6>
 8008332:	f7f7 ffb3 	bl	800029c <__adddf3>
 8008336:	4642      	mov	r2, r8
 8008338:	464b      	mov	r3, r9
 800833a:	4606      	mov	r6, r0
 800833c:	460f      	mov	r7, r1
 800833e:	f7f8 fbf3 	bl	8000b28 <__aeabi_dcmpgt>
 8008342:	b9d0      	cbnz	r0, 800837a <_dtoa_r+0x6c2>
 8008344:	4642      	mov	r2, r8
 8008346:	464b      	mov	r3, r9
 8008348:	4630      	mov	r0, r6
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008350:	b110      	cbz	r0, 8008358 <_dtoa_r+0x6a0>
 8008352:	f01a 0f01 	tst.w	sl, #1
 8008356:	d110      	bne.n	800837a <_dtoa_r+0x6c2>
 8008358:	4620      	mov	r0, r4
 800835a:	ee18 1a10 	vmov	r1, s16
 800835e:	f000 faf3 	bl	8008948 <_Bfree>
 8008362:	2300      	movs	r3, #0
 8008364:	9800      	ldr	r0, [sp, #0]
 8008366:	702b      	strb	r3, [r5, #0]
 8008368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800836a:	3001      	adds	r0, #1
 800836c:	6018      	str	r0, [r3, #0]
 800836e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008370:	2b00      	cmp	r3, #0
 8008372:	f43f acf1 	beq.w	8007d58 <_dtoa_r+0xa0>
 8008376:	601d      	str	r5, [r3, #0]
 8008378:	e4ee      	b.n	8007d58 <_dtoa_r+0xa0>
 800837a:	9f00      	ldr	r7, [sp, #0]
 800837c:	462b      	mov	r3, r5
 800837e:	461d      	mov	r5, r3
 8008380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008384:	2a39      	cmp	r2, #57	; 0x39
 8008386:	d106      	bne.n	8008396 <_dtoa_r+0x6de>
 8008388:	9a01      	ldr	r2, [sp, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d1f7      	bne.n	800837e <_dtoa_r+0x6c6>
 800838e:	9901      	ldr	r1, [sp, #4]
 8008390:	2230      	movs	r2, #48	; 0x30
 8008392:	3701      	adds	r7, #1
 8008394:	700a      	strb	r2, [r1, #0]
 8008396:	781a      	ldrb	r2, [r3, #0]
 8008398:	3201      	adds	r2, #1
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	e790      	b.n	80082c0 <_dtoa_r+0x608>
 800839e:	4ba6      	ldr	r3, [pc, #664]	; (8008638 <_dtoa_r+0x980>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	f7f8 f931 	bl	8000608 <__aeabi_dmul>
 80083a6:	2200      	movs	r2, #0
 80083a8:	2300      	movs	r3, #0
 80083aa:	4606      	mov	r6, r0
 80083ac:	460f      	mov	r7, r1
 80083ae:	f7f8 fb93 	bl	8000ad8 <__aeabi_dcmpeq>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d09d      	beq.n	80082f2 <_dtoa_r+0x63a>
 80083b6:	e7cf      	b.n	8008358 <_dtoa_r+0x6a0>
 80083b8:	9a08      	ldr	r2, [sp, #32]
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	f000 80d7 	beq.w	800856e <_dtoa_r+0x8b6>
 80083c0:	9a06      	ldr	r2, [sp, #24]
 80083c2:	2a01      	cmp	r2, #1
 80083c4:	f300 80ba 	bgt.w	800853c <_dtoa_r+0x884>
 80083c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	f000 80b2 	beq.w	8008534 <_dtoa_r+0x87c>
 80083d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083d4:	9e07      	ldr	r6, [sp, #28]
 80083d6:	9d04      	ldr	r5, [sp, #16]
 80083d8:	9a04      	ldr	r2, [sp, #16]
 80083da:	441a      	add	r2, r3
 80083dc:	9204      	str	r2, [sp, #16]
 80083de:	9a05      	ldr	r2, [sp, #20]
 80083e0:	2101      	movs	r1, #1
 80083e2:	441a      	add	r2, r3
 80083e4:	4620      	mov	r0, r4
 80083e6:	9205      	str	r2, [sp, #20]
 80083e8:	f000 fb66 	bl	8008ab8 <__i2b>
 80083ec:	4607      	mov	r7, r0
 80083ee:	2d00      	cmp	r5, #0
 80083f0:	dd0c      	ble.n	800840c <_dtoa_r+0x754>
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd09      	ble.n	800840c <_dtoa_r+0x754>
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	9a04      	ldr	r2, [sp, #16]
 80083fc:	bfa8      	it	ge
 80083fe:	462b      	movge	r3, r5
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	9204      	str	r2, [sp, #16]
 8008404:	9a05      	ldr	r2, [sp, #20]
 8008406:	1aed      	subs	r5, r5, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	9305      	str	r3, [sp, #20]
 800840c:	9b07      	ldr	r3, [sp, #28]
 800840e:	b31b      	cbz	r3, 8008458 <_dtoa_r+0x7a0>
 8008410:	9b08      	ldr	r3, [sp, #32]
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 80af 	beq.w	8008576 <_dtoa_r+0x8be>
 8008418:	2e00      	cmp	r6, #0
 800841a:	dd13      	ble.n	8008444 <_dtoa_r+0x78c>
 800841c:	4639      	mov	r1, r7
 800841e:	4632      	mov	r2, r6
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fc09 	bl	8008c38 <__pow5mult>
 8008426:	ee18 2a10 	vmov	r2, s16
 800842a:	4601      	mov	r1, r0
 800842c:	4607      	mov	r7, r0
 800842e:	4620      	mov	r0, r4
 8008430:	f000 fb58 	bl	8008ae4 <__multiply>
 8008434:	ee18 1a10 	vmov	r1, s16
 8008438:	4680      	mov	r8, r0
 800843a:	4620      	mov	r0, r4
 800843c:	f000 fa84 	bl	8008948 <_Bfree>
 8008440:	ee08 8a10 	vmov	s16, r8
 8008444:	9b07      	ldr	r3, [sp, #28]
 8008446:	1b9a      	subs	r2, r3, r6
 8008448:	d006      	beq.n	8008458 <_dtoa_r+0x7a0>
 800844a:	ee18 1a10 	vmov	r1, s16
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fbf2 	bl	8008c38 <__pow5mult>
 8008454:	ee08 0a10 	vmov	s16, r0
 8008458:	2101      	movs	r1, #1
 800845a:	4620      	mov	r0, r4
 800845c:	f000 fb2c 	bl	8008ab8 <__i2b>
 8008460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	4606      	mov	r6, r0
 8008466:	f340 8088 	ble.w	800857a <_dtoa_r+0x8c2>
 800846a:	461a      	mov	r2, r3
 800846c:	4601      	mov	r1, r0
 800846e:	4620      	mov	r0, r4
 8008470:	f000 fbe2 	bl	8008c38 <__pow5mult>
 8008474:	9b06      	ldr	r3, [sp, #24]
 8008476:	2b01      	cmp	r3, #1
 8008478:	4606      	mov	r6, r0
 800847a:	f340 8081 	ble.w	8008580 <_dtoa_r+0x8c8>
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	6933      	ldr	r3, [r6, #16]
 8008484:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008488:	6918      	ldr	r0, [r3, #16]
 800848a:	f000 fac5 	bl	8008a18 <__hi0bits>
 800848e:	f1c0 0020 	rsb	r0, r0, #32
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	4418      	add	r0, r3
 8008496:	f010 001f 	ands.w	r0, r0, #31
 800849a:	f000 8092 	beq.w	80085c2 <_dtoa_r+0x90a>
 800849e:	f1c0 0320 	rsb	r3, r0, #32
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	f340 808a 	ble.w	80085bc <_dtoa_r+0x904>
 80084a8:	f1c0 001c 	rsb	r0, r0, #28
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	4403      	add	r3, r0
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	9b05      	ldr	r3, [sp, #20]
 80084b4:	4403      	add	r3, r0
 80084b6:	4405      	add	r5, r0
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dd07      	ble.n	80084d0 <_dtoa_r+0x818>
 80084c0:	ee18 1a10 	vmov	r1, s16
 80084c4:	461a      	mov	r2, r3
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 fc10 	bl	8008cec <__lshift>
 80084cc:	ee08 0a10 	vmov	s16, r0
 80084d0:	9b05      	ldr	r3, [sp, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd05      	ble.n	80084e2 <_dtoa_r+0x82a>
 80084d6:	4631      	mov	r1, r6
 80084d8:	461a      	mov	r2, r3
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 fc06 	bl	8008cec <__lshift>
 80084e0:	4606      	mov	r6, r0
 80084e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d06e      	beq.n	80085c6 <_dtoa_r+0x90e>
 80084e8:	ee18 0a10 	vmov	r0, s16
 80084ec:	4631      	mov	r1, r6
 80084ee:	f000 fc6d 	bl	8008dcc <__mcmp>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	da67      	bge.n	80085c6 <_dtoa_r+0x90e>
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	ee18 1a10 	vmov	r1, s16
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	220a      	movs	r2, #10
 8008502:	2300      	movs	r3, #0
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fa41 	bl	800898c <__multadd>
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	ee08 0a10 	vmov	s16, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 81b1 	beq.w	8008878 <_dtoa_r+0xbc0>
 8008516:	2300      	movs	r3, #0
 8008518:	4639      	mov	r1, r7
 800851a:	220a      	movs	r2, #10
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fa35 	bl	800898c <__multadd>
 8008522:	9b02      	ldr	r3, [sp, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	4607      	mov	r7, r0
 8008528:	f300 808e 	bgt.w	8008648 <_dtoa_r+0x990>
 800852c:	9b06      	ldr	r3, [sp, #24]
 800852e:	2b02      	cmp	r3, #2
 8008530:	dc51      	bgt.n	80085d6 <_dtoa_r+0x91e>
 8008532:	e089      	b.n	8008648 <_dtoa_r+0x990>
 8008534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800853a:	e74b      	b.n	80083d4 <_dtoa_r+0x71c>
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	1e5e      	subs	r6, r3, #1
 8008540:	9b07      	ldr	r3, [sp, #28]
 8008542:	42b3      	cmp	r3, r6
 8008544:	bfbf      	itttt	lt
 8008546:	9b07      	ldrlt	r3, [sp, #28]
 8008548:	9607      	strlt	r6, [sp, #28]
 800854a:	1af2      	sublt	r2, r6, r3
 800854c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800854e:	bfb6      	itet	lt
 8008550:	189b      	addlt	r3, r3, r2
 8008552:	1b9e      	subge	r6, r3, r6
 8008554:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	bfb8      	it	lt
 800855a:	2600      	movlt	r6, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfb7      	itett	lt
 8008560:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008564:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008568:	1a9d      	sublt	r5, r3, r2
 800856a:	2300      	movlt	r3, #0
 800856c:	e734      	b.n	80083d8 <_dtoa_r+0x720>
 800856e:	9e07      	ldr	r6, [sp, #28]
 8008570:	9d04      	ldr	r5, [sp, #16]
 8008572:	9f08      	ldr	r7, [sp, #32]
 8008574:	e73b      	b.n	80083ee <_dtoa_r+0x736>
 8008576:	9a07      	ldr	r2, [sp, #28]
 8008578:	e767      	b.n	800844a <_dtoa_r+0x792>
 800857a:	9b06      	ldr	r3, [sp, #24]
 800857c:	2b01      	cmp	r3, #1
 800857e:	dc18      	bgt.n	80085b2 <_dtoa_r+0x8fa>
 8008580:	f1ba 0f00 	cmp.w	sl, #0
 8008584:	d115      	bne.n	80085b2 <_dtoa_r+0x8fa>
 8008586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800858a:	b993      	cbnz	r3, 80085b2 <_dtoa_r+0x8fa>
 800858c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008590:	0d1b      	lsrs	r3, r3, #20
 8008592:	051b      	lsls	r3, r3, #20
 8008594:	b183      	cbz	r3, 80085b8 <_dtoa_r+0x900>
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	3301      	adds	r3, #1
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	9b05      	ldr	r3, [sp, #20]
 800859e:	3301      	adds	r3, #1
 80085a0:	9305      	str	r3, [sp, #20]
 80085a2:	f04f 0801 	mov.w	r8, #1
 80085a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f47f af6a 	bne.w	8008482 <_dtoa_r+0x7ca>
 80085ae:	2001      	movs	r0, #1
 80085b0:	e76f      	b.n	8008492 <_dtoa_r+0x7da>
 80085b2:	f04f 0800 	mov.w	r8, #0
 80085b6:	e7f6      	b.n	80085a6 <_dtoa_r+0x8ee>
 80085b8:	4698      	mov	r8, r3
 80085ba:	e7f4      	b.n	80085a6 <_dtoa_r+0x8ee>
 80085bc:	f43f af7d 	beq.w	80084ba <_dtoa_r+0x802>
 80085c0:	4618      	mov	r0, r3
 80085c2:	301c      	adds	r0, #28
 80085c4:	e772      	b.n	80084ac <_dtoa_r+0x7f4>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dc37      	bgt.n	800863c <_dtoa_r+0x984>
 80085cc:	9b06      	ldr	r3, [sp, #24]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	dd34      	ble.n	800863c <_dtoa_r+0x984>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	9302      	str	r3, [sp, #8]
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	b96b      	cbnz	r3, 80085f6 <_dtoa_r+0x93e>
 80085da:	4631      	mov	r1, r6
 80085dc:	2205      	movs	r2, #5
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 f9d4 	bl	800898c <__multadd>
 80085e4:	4601      	mov	r1, r0
 80085e6:	4606      	mov	r6, r0
 80085e8:	ee18 0a10 	vmov	r0, s16
 80085ec:	f000 fbee 	bl	8008dcc <__mcmp>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f73f adbb 	bgt.w	800816c <_dtoa_r+0x4b4>
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	9d01      	ldr	r5, [sp, #4]
 80085fa:	43db      	mvns	r3, r3
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	f04f 0800 	mov.w	r8, #0
 8008602:	4631      	mov	r1, r6
 8008604:	4620      	mov	r0, r4
 8008606:	f000 f99f 	bl	8008948 <_Bfree>
 800860a:	2f00      	cmp	r7, #0
 800860c:	f43f aea4 	beq.w	8008358 <_dtoa_r+0x6a0>
 8008610:	f1b8 0f00 	cmp.w	r8, #0
 8008614:	d005      	beq.n	8008622 <_dtoa_r+0x96a>
 8008616:	45b8      	cmp	r8, r7
 8008618:	d003      	beq.n	8008622 <_dtoa_r+0x96a>
 800861a:	4641      	mov	r1, r8
 800861c:	4620      	mov	r0, r4
 800861e:	f000 f993 	bl	8008948 <_Bfree>
 8008622:	4639      	mov	r1, r7
 8008624:	4620      	mov	r0, r4
 8008626:	f000 f98f 	bl	8008948 <_Bfree>
 800862a:	e695      	b.n	8008358 <_dtoa_r+0x6a0>
 800862c:	2600      	movs	r6, #0
 800862e:	4637      	mov	r7, r6
 8008630:	e7e1      	b.n	80085f6 <_dtoa_r+0x93e>
 8008632:	9700      	str	r7, [sp, #0]
 8008634:	4637      	mov	r7, r6
 8008636:	e599      	b.n	800816c <_dtoa_r+0x4b4>
 8008638:	40240000 	.word	0x40240000
 800863c:	9b08      	ldr	r3, [sp, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 80ca 	beq.w	80087d8 <_dtoa_r+0xb20>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	2d00      	cmp	r5, #0
 800864a:	dd05      	ble.n	8008658 <_dtoa_r+0x9a0>
 800864c:	4639      	mov	r1, r7
 800864e:	462a      	mov	r2, r5
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fb4b 	bl	8008cec <__lshift>
 8008656:	4607      	mov	r7, r0
 8008658:	f1b8 0f00 	cmp.w	r8, #0
 800865c:	d05b      	beq.n	8008716 <_dtoa_r+0xa5e>
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4620      	mov	r0, r4
 8008662:	f000 f931 	bl	80088c8 <_Balloc>
 8008666:	4605      	mov	r5, r0
 8008668:	b928      	cbnz	r0, 8008676 <_dtoa_r+0x9be>
 800866a:	4b87      	ldr	r3, [pc, #540]	; (8008888 <_dtoa_r+0xbd0>)
 800866c:	4602      	mov	r2, r0
 800866e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008672:	f7ff bb3b 	b.w	8007cec <_dtoa_r+0x34>
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	3202      	adds	r2, #2
 800867a:	0092      	lsls	r2, r2, #2
 800867c:	f107 010c 	add.w	r1, r7, #12
 8008680:	300c      	adds	r0, #12
 8008682:	f000 f913 	bl	80088ac <memcpy>
 8008686:	2201      	movs	r2, #1
 8008688:	4629      	mov	r1, r5
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fb2e 	bl	8008cec <__lshift>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	f103 0901 	add.w	r9, r3, #1
 8008696:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800869a:	4413      	add	r3, r2
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	f00a 0301 	and.w	r3, sl, #1
 80086a2:	46b8      	mov	r8, r7
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	4607      	mov	r7, r0
 80086a8:	4631      	mov	r1, r6
 80086aa:	ee18 0a10 	vmov	r0, s16
 80086ae:	f7ff fa75 	bl	8007b9c <quorem>
 80086b2:	4641      	mov	r1, r8
 80086b4:	9002      	str	r0, [sp, #8]
 80086b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086ba:	ee18 0a10 	vmov	r0, s16
 80086be:	f000 fb85 	bl	8008dcc <__mcmp>
 80086c2:	463a      	mov	r2, r7
 80086c4:	9003      	str	r0, [sp, #12]
 80086c6:	4631      	mov	r1, r6
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fb9b 	bl	8008e04 <__mdiff>
 80086ce:	68c2      	ldr	r2, [r0, #12]
 80086d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80086d4:	4605      	mov	r5, r0
 80086d6:	bb02      	cbnz	r2, 800871a <_dtoa_r+0xa62>
 80086d8:	4601      	mov	r1, r0
 80086da:	ee18 0a10 	vmov	r0, s16
 80086de:	f000 fb75 	bl	8008dcc <__mcmp>
 80086e2:	4602      	mov	r2, r0
 80086e4:	4629      	mov	r1, r5
 80086e6:	4620      	mov	r0, r4
 80086e8:	9207      	str	r2, [sp, #28]
 80086ea:	f000 f92d 	bl	8008948 <_Bfree>
 80086ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086f2:	ea43 0102 	orr.w	r1, r3, r2
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	430b      	orrs	r3, r1
 80086fa:	464d      	mov	r5, r9
 80086fc:	d10f      	bne.n	800871e <_dtoa_r+0xa66>
 80086fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008702:	d02a      	beq.n	800875a <_dtoa_r+0xaa2>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	dd02      	ble.n	8008710 <_dtoa_r+0xa58>
 800870a:	9b02      	ldr	r3, [sp, #8]
 800870c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008710:	f88b a000 	strb.w	sl, [fp]
 8008714:	e775      	b.n	8008602 <_dtoa_r+0x94a>
 8008716:	4638      	mov	r0, r7
 8008718:	e7ba      	b.n	8008690 <_dtoa_r+0x9d8>
 800871a:	2201      	movs	r2, #1
 800871c:	e7e2      	b.n	80086e4 <_dtoa_r+0xa2c>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db04      	blt.n	800872e <_dtoa_r+0xa76>
 8008724:	9906      	ldr	r1, [sp, #24]
 8008726:	430b      	orrs	r3, r1
 8008728:	9904      	ldr	r1, [sp, #16]
 800872a:	430b      	orrs	r3, r1
 800872c:	d122      	bne.n	8008774 <_dtoa_r+0xabc>
 800872e:	2a00      	cmp	r2, #0
 8008730:	ddee      	ble.n	8008710 <_dtoa_r+0xa58>
 8008732:	ee18 1a10 	vmov	r1, s16
 8008736:	2201      	movs	r2, #1
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fad7 	bl	8008cec <__lshift>
 800873e:	4631      	mov	r1, r6
 8008740:	ee08 0a10 	vmov	s16, r0
 8008744:	f000 fb42 	bl	8008dcc <__mcmp>
 8008748:	2800      	cmp	r0, #0
 800874a:	dc03      	bgt.n	8008754 <_dtoa_r+0xa9c>
 800874c:	d1e0      	bne.n	8008710 <_dtoa_r+0xa58>
 800874e:	f01a 0f01 	tst.w	sl, #1
 8008752:	d0dd      	beq.n	8008710 <_dtoa_r+0xa58>
 8008754:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008758:	d1d7      	bne.n	800870a <_dtoa_r+0xa52>
 800875a:	2339      	movs	r3, #57	; 0x39
 800875c:	f88b 3000 	strb.w	r3, [fp]
 8008760:	462b      	mov	r3, r5
 8008762:	461d      	mov	r5, r3
 8008764:	3b01      	subs	r3, #1
 8008766:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800876a:	2a39      	cmp	r2, #57	; 0x39
 800876c:	d071      	beq.n	8008852 <_dtoa_r+0xb9a>
 800876e:	3201      	adds	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e746      	b.n	8008602 <_dtoa_r+0x94a>
 8008774:	2a00      	cmp	r2, #0
 8008776:	dd07      	ble.n	8008788 <_dtoa_r+0xad0>
 8008778:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800877c:	d0ed      	beq.n	800875a <_dtoa_r+0xaa2>
 800877e:	f10a 0301 	add.w	r3, sl, #1
 8008782:	f88b 3000 	strb.w	r3, [fp]
 8008786:	e73c      	b.n	8008602 <_dtoa_r+0x94a>
 8008788:	9b05      	ldr	r3, [sp, #20]
 800878a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800878e:	4599      	cmp	r9, r3
 8008790:	d047      	beq.n	8008822 <_dtoa_r+0xb6a>
 8008792:	ee18 1a10 	vmov	r1, s16
 8008796:	2300      	movs	r3, #0
 8008798:	220a      	movs	r2, #10
 800879a:	4620      	mov	r0, r4
 800879c:	f000 f8f6 	bl	800898c <__multadd>
 80087a0:	45b8      	cmp	r8, r7
 80087a2:	ee08 0a10 	vmov	s16, r0
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	f04f 020a 	mov.w	r2, #10
 80087ae:	4641      	mov	r1, r8
 80087b0:	4620      	mov	r0, r4
 80087b2:	d106      	bne.n	80087c2 <_dtoa_r+0xb0a>
 80087b4:	f000 f8ea 	bl	800898c <__multadd>
 80087b8:	4680      	mov	r8, r0
 80087ba:	4607      	mov	r7, r0
 80087bc:	f109 0901 	add.w	r9, r9, #1
 80087c0:	e772      	b.n	80086a8 <_dtoa_r+0x9f0>
 80087c2:	f000 f8e3 	bl	800898c <__multadd>
 80087c6:	4639      	mov	r1, r7
 80087c8:	4680      	mov	r8, r0
 80087ca:	2300      	movs	r3, #0
 80087cc:	220a      	movs	r2, #10
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 f8dc 	bl	800898c <__multadd>
 80087d4:	4607      	mov	r7, r0
 80087d6:	e7f1      	b.n	80087bc <_dtoa_r+0xb04>
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	9d01      	ldr	r5, [sp, #4]
 80087de:	ee18 0a10 	vmov	r0, s16
 80087e2:	4631      	mov	r1, r6
 80087e4:	f7ff f9da 	bl	8007b9c <quorem>
 80087e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087ec:	9b01      	ldr	r3, [sp, #4]
 80087ee:	f805 ab01 	strb.w	sl, [r5], #1
 80087f2:	1aea      	subs	r2, r5, r3
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	4293      	cmp	r3, r2
 80087f8:	dd09      	ble.n	800880e <_dtoa_r+0xb56>
 80087fa:	ee18 1a10 	vmov	r1, s16
 80087fe:	2300      	movs	r3, #0
 8008800:	220a      	movs	r2, #10
 8008802:	4620      	mov	r0, r4
 8008804:	f000 f8c2 	bl	800898c <__multadd>
 8008808:	ee08 0a10 	vmov	s16, r0
 800880c:	e7e7      	b.n	80087de <_dtoa_r+0xb26>
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfc8      	it	gt
 8008814:	461d      	movgt	r5, r3
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	bfd8      	it	le
 800881a:	2501      	movle	r5, #1
 800881c:	441d      	add	r5, r3
 800881e:	f04f 0800 	mov.w	r8, #0
 8008822:	ee18 1a10 	vmov	r1, s16
 8008826:	2201      	movs	r2, #1
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fa5f 	bl	8008cec <__lshift>
 800882e:	4631      	mov	r1, r6
 8008830:	ee08 0a10 	vmov	s16, r0
 8008834:	f000 faca 	bl	8008dcc <__mcmp>
 8008838:	2800      	cmp	r0, #0
 800883a:	dc91      	bgt.n	8008760 <_dtoa_r+0xaa8>
 800883c:	d102      	bne.n	8008844 <_dtoa_r+0xb8c>
 800883e:	f01a 0f01 	tst.w	sl, #1
 8008842:	d18d      	bne.n	8008760 <_dtoa_r+0xaa8>
 8008844:	462b      	mov	r3, r5
 8008846:	461d      	mov	r5, r3
 8008848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800884c:	2a30      	cmp	r2, #48	; 0x30
 800884e:	d0fa      	beq.n	8008846 <_dtoa_r+0xb8e>
 8008850:	e6d7      	b.n	8008602 <_dtoa_r+0x94a>
 8008852:	9a01      	ldr	r2, [sp, #4]
 8008854:	429a      	cmp	r2, r3
 8008856:	d184      	bne.n	8008762 <_dtoa_r+0xaaa>
 8008858:	9b00      	ldr	r3, [sp, #0]
 800885a:	3301      	adds	r3, #1
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	2331      	movs	r3, #49	; 0x31
 8008860:	7013      	strb	r3, [r2, #0]
 8008862:	e6ce      	b.n	8008602 <_dtoa_r+0x94a>
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <_dtoa_r+0xbd4>)
 8008866:	f7ff ba95 	b.w	8007d94 <_dtoa_r+0xdc>
 800886a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800886c:	2b00      	cmp	r3, #0
 800886e:	f47f aa6e 	bne.w	8007d4e <_dtoa_r+0x96>
 8008872:	4b07      	ldr	r3, [pc, #28]	; (8008890 <_dtoa_r+0xbd8>)
 8008874:	f7ff ba8e 	b.w	8007d94 <_dtoa_r+0xdc>
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dcae      	bgt.n	80087dc <_dtoa_r+0xb24>
 800887e:	9b06      	ldr	r3, [sp, #24]
 8008880:	2b02      	cmp	r3, #2
 8008882:	f73f aea8 	bgt.w	80085d6 <_dtoa_r+0x91e>
 8008886:	e7a9      	b.n	80087dc <_dtoa_r+0xb24>
 8008888:	08009de7 	.word	0x08009de7
 800888c:	08009d44 	.word	0x08009d44
 8008890:	08009d68 	.word	0x08009d68

08008894 <_localeconv_r>:
 8008894:	4800      	ldr	r0, [pc, #0]	; (8008898 <_localeconv_r+0x4>)
 8008896:	4770      	bx	lr
 8008898:	20000160 	.word	0x20000160

0800889c <malloc>:
 800889c:	4b02      	ldr	r3, [pc, #8]	; (80088a8 <malloc+0xc>)
 800889e:	4601      	mov	r1, r0
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	f000 bc17 	b.w	80090d4 <_malloc_r>
 80088a6:	bf00      	nop
 80088a8:	2000000c 	.word	0x2000000c

080088ac <memcpy>:
 80088ac:	440a      	add	r2, r1
 80088ae:	4291      	cmp	r1, r2
 80088b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088b4:	d100      	bne.n	80088b8 <memcpy+0xc>
 80088b6:	4770      	bx	lr
 80088b8:	b510      	push	{r4, lr}
 80088ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c2:	4291      	cmp	r1, r2
 80088c4:	d1f9      	bne.n	80088ba <memcpy+0xe>
 80088c6:	bd10      	pop	{r4, pc}

080088c8 <_Balloc>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088cc:	4604      	mov	r4, r0
 80088ce:	460d      	mov	r5, r1
 80088d0:	b976      	cbnz	r6, 80088f0 <_Balloc+0x28>
 80088d2:	2010      	movs	r0, #16
 80088d4:	f7ff ffe2 	bl	800889c <malloc>
 80088d8:	4602      	mov	r2, r0
 80088da:	6260      	str	r0, [r4, #36]	; 0x24
 80088dc:	b920      	cbnz	r0, 80088e8 <_Balloc+0x20>
 80088de:	4b18      	ldr	r3, [pc, #96]	; (8008940 <_Balloc+0x78>)
 80088e0:	4818      	ldr	r0, [pc, #96]	; (8008944 <_Balloc+0x7c>)
 80088e2:	2166      	movs	r1, #102	; 0x66
 80088e4:	f000 fc7a 	bl	80091dc <__assert_func>
 80088e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088ec:	6006      	str	r6, [r0, #0]
 80088ee:	60c6      	str	r6, [r0, #12]
 80088f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088f2:	68f3      	ldr	r3, [r6, #12]
 80088f4:	b183      	cbz	r3, 8008918 <_Balloc+0x50>
 80088f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088fe:	b9b8      	cbnz	r0, 8008930 <_Balloc+0x68>
 8008900:	2101      	movs	r1, #1
 8008902:	fa01 f605 	lsl.w	r6, r1, r5
 8008906:	1d72      	adds	r2, r6, #5
 8008908:	0092      	lsls	r2, r2, #2
 800890a:	4620      	mov	r0, r4
 800890c:	f000 fb60 	bl	8008fd0 <_calloc_r>
 8008910:	b160      	cbz	r0, 800892c <_Balloc+0x64>
 8008912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008916:	e00e      	b.n	8008936 <_Balloc+0x6e>
 8008918:	2221      	movs	r2, #33	; 0x21
 800891a:	2104      	movs	r1, #4
 800891c:	4620      	mov	r0, r4
 800891e:	f000 fb57 	bl	8008fd0 <_calloc_r>
 8008922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008924:	60f0      	str	r0, [r6, #12]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e4      	bne.n	80088f6 <_Balloc+0x2e>
 800892c:	2000      	movs	r0, #0
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	6802      	ldr	r2, [r0, #0]
 8008932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008936:	2300      	movs	r3, #0
 8008938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800893c:	e7f7      	b.n	800892e <_Balloc+0x66>
 800893e:	bf00      	nop
 8008940:	08009d75 	.word	0x08009d75
 8008944:	08009df8 	.word	0x08009df8

08008948 <_Bfree>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800894c:	4605      	mov	r5, r0
 800894e:	460c      	mov	r4, r1
 8008950:	b976      	cbnz	r6, 8008970 <_Bfree+0x28>
 8008952:	2010      	movs	r0, #16
 8008954:	f7ff ffa2 	bl	800889c <malloc>
 8008958:	4602      	mov	r2, r0
 800895a:	6268      	str	r0, [r5, #36]	; 0x24
 800895c:	b920      	cbnz	r0, 8008968 <_Bfree+0x20>
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <_Bfree+0x3c>)
 8008960:	4809      	ldr	r0, [pc, #36]	; (8008988 <_Bfree+0x40>)
 8008962:	218a      	movs	r1, #138	; 0x8a
 8008964:	f000 fc3a 	bl	80091dc <__assert_func>
 8008968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800896c:	6006      	str	r6, [r0, #0]
 800896e:	60c6      	str	r6, [r0, #12]
 8008970:	b13c      	cbz	r4, 8008982 <_Bfree+0x3a>
 8008972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008974:	6862      	ldr	r2, [r4, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800897c:	6021      	str	r1, [r4, #0]
 800897e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	08009d75 	.word	0x08009d75
 8008988:	08009df8 	.word	0x08009df8

0800898c <__multadd>:
 800898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008990:	690d      	ldr	r5, [r1, #16]
 8008992:	4607      	mov	r7, r0
 8008994:	460c      	mov	r4, r1
 8008996:	461e      	mov	r6, r3
 8008998:	f101 0c14 	add.w	ip, r1, #20
 800899c:	2000      	movs	r0, #0
 800899e:	f8dc 3000 	ldr.w	r3, [ip]
 80089a2:	b299      	uxth	r1, r3
 80089a4:	fb02 6101 	mla	r1, r2, r1, r6
 80089a8:	0c1e      	lsrs	r6, r3, #16
 80089aa:	0c0b      	lsrs	r3, r1, #16
 80089ac:	fb02 3306 	mla	r3, r2, r6, r3
 80089b0:	b289      	uxth	r1, r1
 80089b2:	3001      	adds	r0, #1
 80089b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089b8:	4285      	cmp	r5, r0
 80089ba:	f84c 1b04 	str.w	r1, [ip], #4
 80089be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089c2:	dcec      	bgt.n	800899e <__multadd+0x12>
 80089c4:	b30e      	cbz	r6, 8008a0a <__multadd+0x7e>
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	dc19      	bgt.n	8008a00 <__multadd+0x74>
 80089cc:	6861      	ldr	r1, [r4, #4]
 80089ce:	4638      	mov	r0, r7
 80089d0:	3101      	adds	r1, #1
 80089d2:	f7ff ff79 	bl	80088c8 <_Balloc>
 80089d6:	4680      	mov	r8, r0
 80089d8:	b928      	cbnz	r0, 80089e6 <__multadd+0x5a>
 80089da:	4602      	mov	r2, r0
 80089dc:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <__multadd+0x84>)
 80089de:	480d      	ldr	r0, [pc, #52]	; (8008a14 <__multadd+0x88>)
 80089e0:	21b5      	movs	r1, #181	; 0xb5
 80089e2:	f000 fbfb 	bl	80091dc <__assert_func>
 80089e6:	6922      	ldr	r2, [r4, #16]
 80089e8:	3202      	adds	r2, #2
 80089ea:	f104 010c 	add.w	r1, r4, #12
 80089ee:	0092      	lsls	r2, r2, #2
 80089f0:	300c      	adds	r0, #12
 80089f2:	f7ff ff5b 	bl	80088ac <memcpy>
 80089f6:	4621      	mov	r1, r4
 80089f8:	4638      	mov	r0, r7
 80089fa:	f7ff ffa5 	bl	8008948 <_Bfree>
 80089fe:	4644      	mov	r4, r8
 8008a00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a04:	3501      	adds	r5, #1
 8008a06:	615e      	str	r6, [r3, #20]
 8008a08:	6125      	str	r5, [r4, #16]
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a10:	08009de7 	.word	0x08009de7
 8008a14:	08009df8 	.word	0x08009df8

08008a18 <__hi0bits>:
 8008a18:	0c03      	lsrs	r3, r0, #16
 8008a1a:	041b      	lsls	r3, r3, #16
 8008a1c:	b9d3      	cbnz	r3, 8008a54 <__hi0bits+0x3c>
 8008a1e:	0400      	lsls	r0, r0, #16
 8008a20:	2310      	movs	r3, #16
 8008a22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a26:	bf04      	itt	eq
 8008a28:	0200      	lsleq	r0, r0, #8
 8008a2a:	3308      	addeq	r3, #8
 8008a2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a30:	bf04      	itt	eq
 8008a32:	0100      	lsleq	r0, r0, #4
 8008a34:	3304      	addeq	r3, #4
 8008a36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a3a:	bf04      	itt	eq
 8008a3c:	0080      	lsleq	r0, r0, #2
 8008a3e:	3302      	addeq	r3, #2
 8008a40:	2800      	cmp	r0, #0
 8008a42:	db05      	blt.n	8008a50 <__hi0bits+0x38>
 8008a44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a48:	f103 0301 	add.w	r3, r3, #1
 8008a4c:	bf08      	it	eq
 8008a4e:	2320      	moveq	r3, #32
 8008a50:	4618      	mov	r0, r3
 8008a52:	4770      	bx	lr
 8008a54:	2300      	movs	r3, #0
 8008a56:	e7e4      	b.n	8008a22 <__hi0bits+0xa>

08008a58 <__lo0bits>:
 8008a58:	6803      	ldr	r3, [r0, #0]
 8008a5a:	f013 0207 	ands.w	r2, r3, #7
 8008a5e:	4601      	mov	r1, r0
 8008a60:	d00b      	beq.n	8008a7a <__lo0bits+0x22>
 8008a62:	07da      	lsls	r2, r3, #31
 8008a64:	d423      	bmi.n	8008aae <__lo0bits+0x56>
 8008a66:	0798      	lsls	r0, r3, #30
 8008a68:	bf49      	itett	mi
 8008a6a:	085b      	lsrmi	r3, r3, #1
 8008a6c:	089b      	lsrpl	r3, r3, #2
 8008a6e:	2001      	movmi	r0, #1
 8008a70:	600b      	strmi	r3, [r1, #0]
 8008a72:	bf5c      	itt	pl
 8008a74:	600b      	strpl	r3, [r1, #0]
 8008a76:	2002      	movpl	r0, #2
 8008a78:	4770      	bx	lr
 8008a7a:	b298      	uxth	r0, r3
 8008a7c:	b9a8      	cbnz	r0, 8008aaa <__lo0bits+0x52>
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	2010      	movs	r0, #16
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	b90a      	cbnz	r2, 8008a8a <__lo0bits+0x32>
 8008a86:	3008      	adds	r0, #8
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	071a      	lsls	r2, r3, #28
 8008a8c:	bf04      	itt	eq
 8008a8e:	091b      	lsreq	r3, r3, #4
 8008a90:	3004      	addeq	r0, #4
 8008a92:	079a      	lsls	r2, r3, #30
 8008a94:	bf04      	itt	eq
 8008a96:	089b      	lsreq	r3, r3, #2
 8008a98:	3002      	addeq	r0, #2
 8008a9a:	07da      	lsls	r2, r3, #31
 8008a9c:	d403      	bmi.n	8008aa6 <__lo0bits+0x4e>
 8008a9e:	085b      	lsrs	r3, r3, #1
 8008aa0:	f100 0001 	add.w	r0, r0, #1
 8008aa4:	d005      	beq.n	8008ab2 <__lo0bits+0x5a>
 8008aa6:	600b      	str	r3, [r1, #0]
 8008aa8:	4770      	bx	lr
 8008aaa:	4610      	mov	r0, r2
 8008aac:	e7e9      	b.n	8008a82 <__lo0bits+0x2a>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	4770      	bx	lr
 8008ab2:	2020      	movs	r0, #32
 8008ab4:	4770      	bx	lr
	...

08008ab8 <__i2b>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	460c      	mov	r4, r1
 8008abc:	2101      	movs	r1, #1
 8008abe:	f7ff ff03 	bl	80088c8 <_Balloc>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	b928      	cbnz	r0, 8008ad2 <__i2b+0x1a>
 8008ac6:	4b05      	ldr	r3, [pc, #20]	; (8008adc <__i2b+0x24>)
 8008ac8:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <__i2b+0x28>)
 8008aca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ace:	f000 fb85 	bl	80091dc <__assert_func>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	6144      	str	r4, [r0, #20]
 8008ad6:	6103      	str	r3, [r0, #16]
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	08009de7 	.word	0x08009de7
 8008ae0:	08009df8 	.word	0x08009df8

08008ae4 <__multiply>:
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	4691      	mov	r9, r2
 8008aea:	690a      	ldr	r2, [r1, #16]
 8008aec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	bfb8      	it	lt
 8008af4:	460b      	movlt	r3, r1
 8008af6:	460c      	mov	r4, r1
 8008af8:	bfbc      	itt	lt
 8008afa:	464c      	movlt	r4, r9
 8008afc:	4699      	movlt	r9, r3
 8008afe:	6927      	ldr	r7, [r4, #16]
 8008b00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b04:	68a3      	ldr	r3, [r4, #8]
 8008b06:	6861      	ldr	r1, [r4, #4]
 8008b08:	eb07 060a 	add.w	r6, r7, sl
 8008b0c:	42b3      	cmp	r3, r6
 8008b0e:	b085      	sub	sp, #20
 8008b10:	bfb8      	it	lt
 8008b12:	3101      	addlt	r1, #1
 8008b14:	f7ff fed8 	bl	80088c8 <_Balloc>
 8008b18:	b930      	cbnz	r0, 8008b28 <__multiply+0x44>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4b44      	ldr	r3, [pc, #272]	; (8008c30 <__multiply+0x14c>)
 8008b1e:	4845      	ldr	r0, [pc, #276]	; (8008c34 <__multiply+0x150>)
 8008b20:	f240 115d 	movw	r1, #349	; 0x15d
 8008b24:	f000 fb5a 	bl	80091dc <__assert_func>
 8008b28:	f100 0514 	add.w	r5, r0, #20
 8008b2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b30:	462b      	mov	r3, r5
 8008b32:	2200      	movs	r2, #0
 8008b34:	4543      	cmp	r3, r8
 8008b36:	d321      	bcc.n	8008b7c <__multiply+0x98>
 8008b38:	f104 0314 	add.w	r3, r4, #20
 8008b3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b40:	f109 0314 	add.w	r3, r9, #20
 8008b44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b48:	9202      	str	r2, [sp, #8]
 8008b4a:	1b3a      	subs	r2, r7, r4
 8008b4c:	3a15      	subs	r2, #21
 8008b4e:	f022 0203 	bic.w	r2, r2, #3
 8008b52:	3204      	adds	r2, #4
 8008b54:	f104 0115 	add.w	r1, r4, #21
 8008b58:	428f      	cmp	r7, r1
 8008b5a:	bf38      	it	cc
 8008b5c:	2204      	movcc	r2, #4
 8008b5e:	9201      	str	r2, [sp, #4]
 8008b60:	9a02      	ldr	r2, [sp, #8]
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d80c      	bhi.n	8008b82 <__multiply+0x9e>
 8008b68:	2e00      	cmp	r6, #0
 8008b6a:	dd03      	ble.n	8008b74 <__multiply+0x90>
 8008b6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d05a      	beq.n	8008c2a <__multiply+0x146>
 8008b74:	6106      	str	r6, [r0, #16]
 8008b76:	b005      	add	sp, #20
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	f843 2b04 	str.w	r2, [r3], #4
 8008b80:	e7d8      	b.n	8008b34 <__multiply+0x50>
 8008b82:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b86:	f1ba 0f00 	cmp.w	sl, #0
 8008b8a:	d024      	beq.n	8008bd6 <__multiply+0xf2>
 8008b8c:	f104 0e14 	add.w	lr, r4, #20
 8008b90:	46a9      	mov	r9, r5
 8008b92:	f04f 0c00 	mov.w	ip, #0
 8008b96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b9a:	f8d9 1000 	ldr.w	r1, [r9]
 8008b9e:	fa1f fb82 	uxth.w	fp, r2
 8008ba2:	b289      	uxth	r1, r1
 8008ba4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ba8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008bac:	f8d9 2000 	ldr.w	r2, [r9]
 8008bb0:	4461      	add	r1, ip
 8008bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bbe:	b289      	uxth	r1, r1
 8008bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bc4:	4577      	cmp	r7, lr
 8008bc6:	f849 1b04 	str.w	r1, [r9], #4
 8008bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bce:	d8e2      	bhi.n	8008b96 <__multiply+0xb2>
 8008bd0:	9a01      	ldr	r2, [sp, #4]
 8008bd2:	f845 c002 	str.w	ip, [r5, r2]
 8008bd6:	9a03      	ldr	r2, [sp, #12]
 8008bd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	f1b9 0f00 	cmp.w	r9, #0
 8008be2:	d020      	beq.n	8008c26 <__multiply+0x142>
 8008be4:	6829      	ldr	r1, [r5, #0]
 8008be6:	f104 0c14 	add.w	ip, r4, #20
 8008bea:	46ae      	mov	lr, r5
 8008bec:	f04f 0a00 	mov.w	sl, #0
 8008bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8008bf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bf8:	fb09 220b 	mla	r2, r9, fp, r2
 8008bfc:	4492      	add	sl, r2
 8008bfe:	b289      	uxth	r1, r1
 8008c00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c04:	f84e 1b04 	str.w	r1, [lr], #4
 8008c08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c0c:	f8be 1000 	ldrh.w	r1, [lr]
 8008c10:	0c12      	lsrs	r2, r2, #16
 8008c12:	fb09 1102 	mla	r1, r9, r2, r1
 8008c16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008c1a:	4567      	cmp	r7, ip
 8008c1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c20:	d8e6      	bhi.n	8008bf0 <__multiply+0x10c>
 8008c22:	9a01      	ldr	r2, [sp, #4]
 8008c24:	50a9      	str	r1, [r5, r2]
 8008c26:	3504      	adds	r5, #4
 8008c28:	e79a      	b.n	8008b60 <__multiply+0x7c>
 8008c2a:	3e01      	subs	r6, #1
 8008c2c:	e79c      	b.n	8008b68 <__multiply+0x84>
 8008c2e:	bf00      	nop
 8008c30:	08009de7 	.word	0x08009de7
 8008c34:	08009df8 	.word	0x08009df8

08008c38 <__pow5mult>:
 8008c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c3c:	4615      	mov	r5, r2
 8008c3e:	f012 0203 	ands.w	r2, r2, #3
 8008c42:	4606      	mov	r6, r0
 8008c44:	460f      	mov	r7, r1
 8008c46:	d007      	beq.n	8008c58 <__pow5mult+0x20>
 8008c48:	4c25      	ldr	r4, [pc, #148]	; (8008ce0 <__pow5mult+0xa8>)
 8008c4a:	3a01      	subs	r2, #1
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c52:	f7ff fe9b 	bl	800898c <__multadd>
 8008c56:	4607      	mov	r7, r0
 8008c58:	10ad      	asrs	r5, r5, #2
 8008c5a:	d03d      	beq.n	8008cd8 <__pow5mult+0xa0>
 8008c5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c5e:	b97c      	cbnz	r4, 8008c80 <__pow5mult+0x48>
 8008c60:	2010      	movs	r0, #16
 8008c62:	f7ff fe1b 	bl	800889c <malloc>
 8008c66:	4602      	mov	r2, r0
 8008c68:	6270      	str	r0, [r6, #36]	; 0x24
 8008c6a:	b928      	cbnz	r0, 8008c78 <__pow5mult+0x40>
 8008c6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ce4 <__pow5mult+0xac>)
 8008c6e:	481e      	ldr	r0, [pc, #120]	; (8008ce8 <__pow5mult+0xb0>)
 8008c70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c74:	f000 fab2 	bl	80091dc <__assert_func>
 8008c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c7c:	6004      	str	r4, [r0, #0]
 8008c7e:	60c4      	str	r4, [r0, #12]
 8008c80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c88:	b94c      	cbnz	r4, 8008c9e <__pow5mult+0x66>
 8008c8a:	f240 2171 	movw	r1, #625	; 0x271
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f7ff ff12 	bl	8008ab8 <__i2b>
 8008c94:	2300      	movs	r3, #0
 8008c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	6003      	str	r3, [r0, #0]
 8008c9e:	f04f 0900 	mov.w	r9, #0
 8008ca2:	07eb      	lsls	r3, r5, #31
 8008ca4:	d50a      	bpl.n	8008cbc <__pow5mult+0x84>
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7ff ff1a 	bl	8008ae4 <__multiply>
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7ff fe47 	bl	8008948 <_Bfree>
 8008cba:	4647      	mov	r7, r8
 8008cbc:	106d      	asrs	r5, r5, #1
 8008cbe:	d00b      	beq.n	8008cd8 <__pow5mult+0xa0>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	b938      	cbnz	r0, 8008cd4 <__pow5mult+0x9c>
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff ff0b 	bl	8008ae4 <__multiply>
 8008cce:	6020      	str	r0, [r4, #0]
 8008cd0:	f8c0 9000 	str.w	r9, [r0]
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	e7e4      	b.n	8008ca2 <__pow5mult+0x6a>
 8008cd8:	4638      	mov	r0, r7
 8008cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cde:	bf00      	nop
 8008ce0:	08009f48 	.word	0x08009f48
 8008ce4:	08009d75 	.word	0x08009d75
 8008ce8:	08009df8 	.word	0x08009df8

08008cec <__lshift>:
 8008cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	6849      	ldr	r1, [r1, #4]
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	4607      	mov	r7, r0
 8008cfe:	4691      	mov	r9, r2
 8008d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d04:	f108 0601 	add.w	r6, r8, #1
 8008d08:	42b3      	cmp	r3, r6
 8008d0a:	db0b      	blt.n	8008d24 <__lshift+0x38>
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7ff fddb 	bl	80088c8 <_Balloc>
 8008d12:	4605      	mov	r5, r0
 8008d14:	b948      	cbnz	r0, 8008d2a <__lshift+0x3e>
 8008d16:	4602      	mov	r2, r0
 8008d18:	4b2a      	ldr	r3, [pc, #168]	; (8008dc4 <__lshift+0xd8>)
 8008d1a:	482b      	ldr	r0, [pc, #172]	; (8008dc8 <__lshift+0xdc>)
 8008d1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d20:	f000 fa5c 	bl	80091dc <__assert_func>
 8008d24:	3101      	adds	r1, #1
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	e7ee      	b.n	8008d08 <__lshift+0x1c>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f100 0114 	add.w	r1, r0, #20
 8008d30:	f100 0210 	add.w	r2, r0, #16
 8008d34:	4618      	mov	r0, r3
 8008d36:	4553      	cmp	r3, sl
 8008d38:	db37      	blt.n	8008daa <__lshift+0xbe>
 8008d3a:	6920      	ldr	r0, [r4, #16]
 8008d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d40:	f104 0314 	add.w	r3, r4, #20
 8008d44:	f019 091f 	ands.w	r9, r9, #31
 8008d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d50:	d02f      	beq.n	8008db2 <__lshift+0xc6>
 8008d52:	f1c9 0e20 	rsb	lr, r9, #32
 8008d56:	468a      	mov	sl, r1
 8008d58:	f04f 0c00 	mov.w	ip, #0
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	fa02 f209 	lsl.w	r2, r2, r9
 8008d62:	ea42 020c 	orr.w	r2, r2, ip
 8008d66:	f84a 2b04 	str.w	r2, [sl], #4
 8008d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d6e:	4298      	cmp	r0, r3
 8008d70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d74:	d8f2      	bhi.n	8008d5c <__lshift+0x70>
 8008d76:	1b03      	subs	r3, r0, r4
 8008d78:	3b15      	subs	r3, #21
 8008d7a:	f023 0303 	bic.w	r3, r3, #3
 8008d7e:	3304      	adds	r3, #4
 8008d80:	f104 0215 	add.w	r2, r4, #21
 8008d84:	4290      	cmp	r0, r2
 8008d86:	bf38      	it	cc
 8008d88:	2304      	movcc	r3, #4
 8008d8a:	f841 c003 	str.w	ip, [r1, r3]
 8008d8e:	f1bc 0f00 	cmp.w	ip, #0
 8008d92:	d001      	beq.n	8008d98 <__lshift+0xac>
 8008d94:	f108 0602 	add.w	r6, r8, #2
 8008d98:	3e01      	subs	r6, #1
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	612e      	str	r6, [r5, #16]
 8008d9e:	4621      	mov	r1, r4
 8008da0:	f7ff fdd2 	bl	8008948 <_Bfree>
 8008da4:	4628      	mov	r0, r5
 8008da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dae:	3301      	adds	r3, #1
 8008db0:	e7c1      	b.n	8008d36 <__lshift+0x4a>
 8008db2:	3904      	subs	r1, #4
 8008db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dbc:	4298      	cmp	r0, r3
 8008dbe:	d8f9      	bhi.n	8008db4 <__lshift+0xc8>
 8008dc0:	e7ea      	b.n	8008d98 <__lshift+0xac>
 8008dc2:	bf00      	nop
 8008dc4:	08009de7 	.word	0x08009de7
 8008dc8:	08009df8 	.word	0x08009df8

08008dcc <__mcmp>:
 8008dcc:	b530      	push	{r4, r5, lr}
 8008dce:	6902      	ldr	r2, [r0, #16]
 8008dd0:	690c      	ldr	r4, [r1, #16]
 8008dd2:	1b12      	subs	r2, r2, r4
 8008dd4:	d10e      	bne.n	8008df4 <__mcmp+0x28>
 8008dd6:	f100 0314 	add.w	r3, r0, #20
 8008dda:	3114      	adds	r1, #20
 8008ddc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008de0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008de4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008de8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008dec:	42a5      	cmp	r5, r4
 8008dee:	d003      	beq.n	8008df8 <__mcmp+0x2c>
 8008df0:	d305      	bcc.n	8008dfe <__mcmp+0x32>
 8008df2:	2201      	movs	r2, #1
 8008df4:	4610      	mov	r0, r2
 8008df6:	bd30      	pop	{r4, r5, pc}
 8008df8:	4283      	cmp	r3, r0
 8008dfa:	d3f3      	bcc.n	8008de4 <__mcmp+0x18>
 8008dfc:	e7fa      	b.n	8008df4 <__mcmp+0x28>
 8008dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008e02:	e7f7      	b.n	8008df4 <__mcmp+0x28>

08008e04 <__mdiff>:
 8008e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	460c      	mov	r4, r1
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4690      	mov	r8, r2
 8008e12:	f7ff ffdb 	bl	8008dcc <__mcmp>
 8008e16:	1e05      	subs	r5, r0, #0
 8008e18:	d110      	bne.n	8008e3c <__mdiff+0x38>
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f7ff fd53 	bl	80088c8 <_Balloc>
 8008e22:	b930      	cbnz	r0, 8008e32 <__mdiff+0x2e>
 8008e24:	4b3a      	ldr	r3, [pc, #232]	; (8008f10 <__mdiff+0x10c>)
 8008e26:	4602      	mov	r2, r0
 8008e28:	f240 2132 	movw	r1, #562	; 0x232
 8008e2c:	4839      	ldr	r0, [pc, #228]	; (8008f14 <__mdiff+0x110>)
 8008e2e:	f000 f9d5 	bl	80091dc <__assert_func>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3c:	bfa4      	itt	ge
 8008e3e:	4643      	movge	r3, r8
 8008e40:	46a0      	movge	r8, r4
 8008e42:	4630      	mov	r0, r6
 8008e44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e48:	bfa6      	itte	ge
 8008e4a:	461c      	movge	r4, r3
 8008e4c:	2500      	movge	r5, #0
 8008e4e:	2501      	movlt	r5, #1
 8008e50:	f7ff fd3a 	bl	80088c8 <_Balloc>
 8008e54:	b920      	cbnz	r0, 8008e60 <__mdiff+0x5c>
 8008e56:	4b2e      	ldr	r3, [pc, #184]	; (8008f10 <__mdiff+0x10c>)
 8008e58:	4602      	mov	r2, r0
 8008e5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e5e:	e7e5      	b.n	8008e2c <__mdiff+0x28>
 8008e60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e64:	6926      	ldr	r6, [r4, #16]
 8008e66:	60c5      	str	r5, [r0, #12]
 8008e68:	f104 0914 	add.w	r9, r4, #20
 8008e6c:	f108 0514 	add.w	r5, r8, #20
 8008e70:	f100 0e14 	add.w	lr, r0, #20
 8008e74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e7c:	f108 0210 	add.w	r2, r8, #16
 8008e80:	46f2      	mov	sl, lr
 8008e82:	2100      	movs	r1, #0
 8008e84:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e8c:	fa1f f883 	uxth.w	r8, r3
 8008e90:	fa11 f18b 	uxtah	r1, r1, fp
 8008e94:	0c1b      	lsrs	r3, r3, #16
 8008e96:	eba1 0808 	sub.w	r8, r1, r8
 8008e9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ea2:	fa1f f888 	uxth.w	r8, r8
 8008ea6:	1419      	asrs	r1, r3, #16
 8008ea8:	454e      	cmp	r6, r9
 8008eaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008eae:	f84a 3b04 	str.w	r3, [sl], #4
 8008eb2:	d8e7      	bhi.n	8008e84 <__mdiff+0x80>
 8008eb4:	1b33      	subs	r3, r6, r4
 8008eb6:	3b15      	subs	r3, #21
 8008eb8:	f023 0303 	bic.w	r3, r3, #3
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	3415      	adds	r4, #21
 8008ec0:	42a6      	cmp	r6, r4
 8008ec2:	bf38      	it	cc
 8008ec4:	2304      	movcc	r3, #4
 8008ec6:	441d      	add	r5, r3
 8008ec8:	4473      	add	r3, lr
 8008eca:	469e      	mov	lr, r3
 8008ecc:	462e      	mov	r6, r5
 8008ece:	4566      	cmp	r6, ip
 8008ed0:	d30e      	bcc.n	8008ef0 <__mdiff+0xec>
 8008ed2:	f10c 0203 	add.w	r2, ip, #3
 8008ed6:	1b52      	subs	r2, r2, r5
 8008ed8:	f022 0203 	bic.w	r2, r2, #3
 8008edc:	3d03      	subs	r5, #3
 8008ede:	45ac      	cmp	ip, r5
 8008ee0:	bf38      	it	cc
 8008ee2:	2200      	movcc	r2, #0
 8008ee4:	441a      	add	r2, r3
 8008ee6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008eea:	b17b      	cbz	r3, 8008f0c <__mdiff+0x108>
 8008eec:	6107      	str	r7, [r0, #16]
 8008eee:	e7a3      	b.n	8008e38 <__mdiff+0x34>
 8008ef0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ef4:	fa11 f288 	uxtah	r2, r1, r8
 8008ef8:	1414      	asrs	r4, r2, #16
 8008efa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008efe:	b292      	uxth	r2, r2
 8008f00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f04:	f84e 2b04 	str.w	r2, [lr], #4
 8008f08:	1421      	asrs	r1, r4, #16
 8008f0a:	e7e0      	b.n	8008ece <__mdiff+0xca>
 8008f0c:	3f01      	subs	r7, #1
 8008f0e:	e7ea      	b.n	8008ee6 <__mdiff+0xe2>
 8008f10:	08009de7 	.word	0x08009de7
 8008f14:	08009df8 	.word	0x08009df8

08008f18 <__d2b>:
 8008f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	2101      	movs	r1, #1
 8008f20:	ec57 6b10 	vmov	r6, r7, d0
 8008f24:	4690      	mov	r8, r2
 8008f26:	f7ff fccf 	bl	80088c8 <_Balloc>
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	b930      	cbnz	r0, 8008f3c <__d2b+0x24>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b25      	ldr	r3, [pc, #148]	; (8008fc8 <__d2b+0xb0>)
 8008f32:	4826      	ldr	r0, [pc, #152]	; (8008fcc <__d2b+0xb4>)
 8008f34:	f240 310a 	movw	r1, #778	; 0x30a
 8008f38:	f000 f950 	bl	80091dc <__assert_func>
 8008f3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f44:	bb35      	cbnz	r5, 8008f94 <__d2b+0x7c>
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	d028      	beq.n	8008f9e <__d2b+0x86>
 8008f4c:	4668      	mov	r0, sp
 8008f4e:	9600      	str	r6, [sp, #0]
 8008f50:	f7ff fd82 	bl	8008a58 <__lo0bits>
 8008f54:	9900      	ldr	r1, [sp, #0]
 8008f56:	b300      	cbz	r0, 8008f9a <__d2b+0x82>
 8008f58:	9a01      	ldr	r2, [sp, #4]
 8008f5a:	f1c0 0320 	rsb	r3, r0, #32
 8008f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f62:	430b      	orrs	r3, r1
 8008f64:	40c2      	lsrs	r2, r0
 8008f66:	6163      	str	r3, [r4, #20]
 8008f68:	9201      	str	r2, [sp, #4]
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	61a3      	str	r3, [r4, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bf14      	ite	ne
 8008f72:	2202      	movne	r2, #2
 8008f74:	2201      	moveq	r2, #1
 8008f76:	6122      	str	r2, [r4, #16]
 8008f78:	b1d5      	cbz	r5, 8008fb0 <__d2b+0x98>
 8008f7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f7e:	4405      	add	r5, r0
 8008f80:	f8c9 5000 	str.w	r5, [r9]
 8008f84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f88:	f8c8 0000 	str.w	r0, [r8]
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	b003      	add	sp, #12
 8008f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f98:	e7d5      	b.n	8008f46 <__d2b+0x2e>
 8008f9a:	6161      	str	r1, [r4, #20]
 8008f9c:	e7e5      	b.n	8008f6a <__d2b+0x52>
 8008f9e:	a801      	add	r0, sp, #4
 8008fa0:	f7ff fd5a 	bl	8008a58 <__lo0bits>
 8008fa4:	9b01      	ldr	r3, [sp, #4]
 8008fa6:	6163      	str	r3, [r4, #20]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	6122      	str	r2, [r4, #16]
 8008fac:	3020      	adds	r0, #32
 8008fae:	e7e3      	b.n	8008f78 <__d2b+0x60>
 8008fb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fb8:	f8c9 0000 	str.w	r0, [r9]
 8008fbc:	6918      	ldr	r0, [r3, #16]
 8008fbe:	f7ff fd2b 	bl	8008a18 <__hi0bits>
 8008fc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fc6:	e7df      	b.n	8008f88 <__d2b+0x70>
 8008fc8:	08009de7 	.word	0x08009de7
 8008fcc:	08009df8 	.word	0x08009df8

08008fd0 <_calloc_r>:
 8008fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fd2:	fba1 2402 	umull	r2, r4, r1, r2
 8008fd6:	b94c      	cbnz	r4, 8008fec <_calloc_r+0x1c>
 8008fd8:	4611      	mov	r1, r2
 8008fda:	9201      	str	r2, [sp, #4]
 8008fdc:	f000 f87a 	bl	80090d4 <_malloc_r>
 8008fe0:	9a01      	ldr	r2, [sp, #4]
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	b930      	cbnz	r0, 8008ff4 <_calloc_r+0x24>
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	b003      	add	sp, #12
 8008fea:	bd30      	pop	{r4, r5, pc}
 8008fec:	220c      	movs	r2, #12
 8008fee:	6002      	str	r2, [r0, #0]
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	e7f8      	b.n	8008fe6 <_calloc_r+0x16>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f7fe f95f 	bl	80072b8 <memset>
 8008ffa:	e7f4      	b.n	8008fe6 <_calloc_r+0x16>

08008ffc <_free_r>:
 8008ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ffe:	2900      	cmp	r1, #0
 8009000:	d044      	beq.n	800908c <_free_r+0x90>
 8009002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009006:	9001      	str	r0, [sp, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	f1a1 0404 	sub.w	r4, r1, #4
 800900e:	bfb8      	it	lt
 8009010:	18e4      	addlt	r4, r4, r3
 8009012:	f000 f925 	bl	8009260 <__malloc_lock>
 8009016:	4a1e      	ldr	r2, [pc, #120]	; (8009090 <_free_r+0x94>)
 8009018:	9801      	ldr	r0, [sp, #4]
 800901a:	6813      	ldr	r3, [r2, #0]
 800901c:	b933      	cbnz	r3, 800902c <_free_r+0x30>
 800901e:	6063      	str	r3, [r4, #4]
 8009020:	6014      	str	r4, [r2, #0]
 8009022:	b003      	add	sp, #12
 8009024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009028:	f000 b920 	b.w	800926c <__malloc_unlock>
 800902c:	42a3      	cmp	r3, r4
 800902e:	d908      	bls.n	8009042 <_free_r+0x46>
 8009030:	6825      	ldr	r5, [r4, #0]
 8009032:	1961      	adds	r1, r4, r5
 8009034:	428b      	cmp	r3, r1
 8009036:	bf01      	itttt	eq
 8009038:	6819      	ldreq	r1, [r3, #0]
 800903a:	685b      	ldreq	r3, [r3, #4]
 800903c:	1949      	addeq	r1, r1, r5
 800903e:	6021      	streq	r1, [r4, #0]
 8009040:	e7ed      	b.n	800901e <_free_r+0x22>
 8009042:	461a      	mov	r2, r3
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	b10b      	cbz	r3, 800904c <_free_r+0x50>
 8009048:	42a3      	cmp	r3, r4
 800904a:	d9fa      	bls.n	8009042 <_free_r+0x46>
 800904c:	6811      	ldr	r1, [r2, #0]
 800904e:	1855      	adds	r5, r2, r1
 8009050:	42a5      	cmp	r5, r4
 8009052:	d10b      	bne.n	800906c <_free_r+0x70>
 8009054:	6824      	ldr	r4, [r4, #0]
 8009056:	4421      	add	r1, r4
 8009058:	1854      	adds	r4, r2, r1
 800905a:	42a3      	cmp	r3, r4
 800905c:	6011      	str	r1, [r2, #0]
 800905e:	d1e0      	bne.n	8009022 <_free_r+0x26>
 8009060:	681c      	ldr	r4, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	6053      	str	r3, [r2, #4]
 8009066:	4421      	add	r1, r4
 8009068:	6011      	str	r1, [r2, #0]
 800906a:	e7da      	b.n	8009022 <_free_r+0x26>
 800906c:	d902      	bls.n	8009074 <_free_r+0x78>
 800906e:	230c      	movs	r3, #12
 8009070:	6003      	str	r3, [r0, #0]
 8009072:	e7d6      	b.n	8009022 <_free_r+0x26>
 8009074:	6825      	ldr	r5, [r4, #0]
 8009076:	1961      	adds	r1, r4, r5
 8009078:	428b      	cmp	r3, r1
 800907a:	bf04      	itt	eq
 800907c:	6819      	ldreq	r1, [r3, #0]
 800907e:	685b      	ldreq	r3, [r3, #4]
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	bf04      	itt	eq
 8009084:	1949      	addeq	r1, r1, r5
 8009086:	6021      	streq	r1, [r4, #0]
 8009088:	6054      	str	r4, [r2, #4]
 800908a:	e7ca      	b.n	8009022 <_free_r+0x26>
 800908c:	b003      	add	sp, #12
 800908e:	bd30      	pop	{r4, r5, pc}
 8009090:	20000434 	.word	0x20000434

08009094 <sbrk_aligned>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	4e0e      	ldr	r6, [pc, #56]	; (80090d0 <sbrk_aligned+0x3c>)
 8009098:	460c      	mov	r4, r1
 800909a:	6831      	ldr	r1, [r6, #0]
 800909c:	4605      	mov	r5, r0
 800909e:	b911      	cbnz	r1, 80090a6 <sbrk_aligned+0x12>
 80090a0:	f000 f88c 	bl	80091bc <_sbrk_r>
 80090a4:	6030      	str	r0, [r6, #0]
 80090a6:	4621      	mov	r1, r4
 80090a8:	4628      	mov	r0, r5
 80090aa:	f000 f887 	bl	80091bc <_sbrk_r>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	d00a      	beq.n	80090c8 <sbrk_aligned+0x34>
 80090b2:	1cc4      	adds	r4, r0, #3
 80090b4:	f024 0403 	bic.w	r4, r4, #3
 80090b8:	42a0      	cmp	r0, r4
 80090ba:	d007      	beq.n	80090cc <sbrk_aligned+0x38>
 80090bc:	1a21      	subs	r1, r4, r0
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 f87c 	bl	80091bc <_sbrk_r>
 80090c4:	3001      	adds	r0, #1
 80090c6:	d101      	bne.n	80090cc <sbrk_aligned+0x38>
 80090c8:	f04f 34ff 	mov.w	r4, #4294967295
 80090cc:	4620      	mov	r0, r4
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	20000438 	.word	0x20000438

080090d4 <_malloc_r>:
 80090d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d8:	1ccd      	adds	r5, r1, #3
 80090da:	f025 0503 	bic.w	r5, r5, #3
 80090de:	3508      	adds	r5, #8
 80090e0:	2d0c      	cmp	r5, #12
 80090e2:	bf38      	it	cc
 80090e4:	250c      	movcc	r5, #12
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	4607      	mov	r7, r0
 80090ea:	db01      	blt.n	80090f0 <_malloc_r+0x1c>
 80090ec:	42a9      	cmp	r1, r5
 80090ee:	d905      	bls.n	80090fc <_malloc_r+0x28>
 80090f0:	230c      	movs	r3, #12
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	2600      	movs	r6, #0
 80090f6:	4630      	mov	r0, r6
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090fc:	4e2e      	ldr	r6, [pc, #184]	; (80091b8 <_malloc_r+0xe4>)
 80090fe:	f000 f8af 	bl	8009260 <__malloc_lock>
 8009102:	6833      	ldr	r3, [r6, #0]
 8009104:	461c      	mov	r4, r3
 8009106:	bb34      	cbnz	r4, 8009156 <_malloc_r+0x82>
 8009108:	4629      	mov	r1, r5
 800910a:	4638      	mov	r0, r7
 800910c:	f7ff ffc2 	bl	8009094 <sbrk_aligned>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	4604      	mov	r4, r0
 8009114:	d14d      	bne.n	80091b2 <_malloc_r+0xde>
 8009116:	6834      	ldr	r4, [r6, #0]
 8009118:	4626      	mov	r6, r4
 800911a:	2e00      	cmp	r6, #0
 800911c:	d140      	bne.n	80091a0 <_malloc_r+0xcc>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	4631      	mov	r1, r6
 8009122:	4638      	mov	r0, r7
 8009124:	eb04 0803 	add.w	r8, r4, r3
 8009128:	f000 f848 	bl	80091bc <_sbrk_r>
 800912c:	4580      	cmp	r8, r0
 800912e:	d13a      	bne.n	80091a6 <_malloc_r+0xd2>
 8009130:	6821      	ldr	r1, [r4, #0]
 8009132:	3503      	adds	r5, #3
 8009134:	1a6d      	subs	r5, r5, r1
 8009136:	f025 0503 	bic.w	r5, r5, #3
 800913a:	3508      	adds	r5, #8
 800913c:	2d0c      	cmp	r5, #12
 800913e:	bf38      	it	cc
 8009140:	250c      	movcc	r5, #12
 8009142:	4629      	mov	r1, r5
 8009144:	4638      	mov	r0, r7
 8009146:	f7ff ffa5 	bl	8009094 <sbrk_aligned>
 800914a:	3001      	adds	r0, #1
 800914c:	d02b      	beq.n	80091a6 <_malloc_r+0xd2>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	442b      	add	r3, r5
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	e00e      	b.n	8009174 <_malloc_r+0xa0>
 8009156:	6822      	ldr	r2, [r4, #0]
 8009158:	1b52      	subs	r2, r2, r5
 800915a:	d41e      	bmi.n	800919a <_malloc_r+0xc6>
 800915c:	2a0b      	cmp	r2, #11
 800915e:	d916      	bls.n	800918e <_malloc_r+0xba>
 8009160:	1961      	adds	r1, r4, r5
 8009162:	42a3      	cmp	r3, r4
 8009164:	6025      	str	r5, [r4, #0]
 8009166:	bf18      	it	ne
 8009168:	6059      	strne	r1, [r3, #4]
 800916a:	6863      	ldr	r3, [r4, #4]
 800916c:	bf08      	it	eq
 800916e:	6031      	streq	r1, [r6, #0]
 8009170:	5162      	str	r2, [r4, r5]
 8009172:	604b      	str	r3, [r1, #4]
 8009174:	4638      	mov	r0, r7
 8009176:	f104 060b 	add.w	r6, r4, #11
 800917a:	f000 f877 	bl	800926c <__malloc_unlock>
 800917e:	f026 0607 	bic.w	r6, r6, #7
 8009182:	1d23      	adds	r3, r4, #4
 8009184:	1af2      	subs	r2, r6, r3
 8009186:	d0b6      	beq.n	80090f6 <_malloc_r+0x22>
 8009188:	1b9b      	subs	r3, r3, r6
 800918a:	50a3      	str	r3, [r4, r2]
 800918c:	e7b3      	b.n	80090f6 <_malloc_r+0x22>
 800918e:	6862      	ldr	r2, [r4, #4]
 8009190:	42a3      	cmp	r3, r4
 8009192:	bf0c      	ite	eq
 8009194:	6032      	streq	r2, [r6, #0]
 8009196:	605a      	strne	r2, [r3, #4]
 8009198:	e7ec      	b.n	8009174 <_malloc_r+0xa0>
 800919a:	4623      	mov	r3, r4
 800919c:	6864      	ldr	r4, [r4, #4]
 800919e:	e7b2      	b.n	8009106 <_malloc_r+0x32>
 80091a0:	4634      	mov	r4, r6
 80091a2:	6876      	ldr	r6, [r6, #4]
 80091a4:	e7b9      	b.n	800911a <_malloc_r+0x46>
 80091a6:	230c      	movs	r3, #12
 80091a8:	603b      	str	r3, [r7, #0]
 80091aa:	4638      	mov	r0, r7
 80091ac:	f000 f85e 	bl	800926c <__malloc_unlock>
 80091b0:	e7a1      	b.n	80090f6 <_malloc_r+0x22>
 80091b2:	6025      	str	r5, [r4, #0]
 80091b4:	e7de      	b.n	8009174 <_malloc_r+0xa0>
 80091b6:	bf00      	nop
 80091b8:	20000434 	.word	0x20000434

080091bc <_sbrk_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d06      	ldr	r5, [pc, #24]	; (80091d8 <_sbrk_r+0x1c>)
 80091c0:	2300      	movs	r3, #0
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	602b      	str	r3, [r5, #0]
 80091c8:	f7f9 f926 	bl	8002418 <_sbrk>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_sbrk_r+0x1a>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_sbrk_r+0x1a>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	2000043c 	.word	0x2000043c

080091dc <__assert_func>:
 80091dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091de:	4614      	mov	r4, r2
 80091e0:	461a      	mov	r2, r3
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <__assert_func+0x2c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4605      	mov	r5, r0
 80091e8:	68d8      	ldr	r0, [r3, #12]
 80091ea:	b14c      	cbz	r4, 8009200 <__assert_func+0x24>
 80091ec:	4b07      	ldr	r3, [pc, #28]	; (800920c <__assert_func+0x30>)
 80091ee:	9100      	str	r1, [sp, #0]
 80091f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091f4:	4906      	ldr	r1, [pc, #24]	; (8009210 <__assert_func+0x34>)
 80091f6:	462b      	mov	r3, r5
 80091f8:	f000 f80e 	bl	8009218 <fiprintf>
 80091fc:	f000 fa64 	bl	80096c8 <abort>
 8009200:	4b04      	ldr	r3, [pc, #16]	; (8009214 <__assert_func+0x38>)
 8009202:	461c      	mov	r4, r3
 8009204:	e7f3      	b.n	80091ee <__assert_func+0x12>
 8009206:	bf00      	nop
 8009208:	2000000c 	.word	0x2000000c
 800920c:	08009f54 	.word	0x08009f54
 8009210:	08009f61 	.word	0x08009f61
 8009214:	08009f8f 	.word	0x08009f8f

08009218 <fiprintf>:
 8009218:	b40e      	push	{r1, r2, r3}
 800921a:	b503      	push	{r0, r1, lr}
 800921c:	4601      	mov	r1, r0
 800921e:	ab03      	add	r3, sp, #12
 8009220:	4805      	ldr	r0, [pc, #20]	; (8009238 <fiprintf+0x20>)
 8009222:	f853 2b04 	ldr.w	r2, [r3], #4
 8009226:	6800      	ldr	r0, [r0, #0]
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	f000 f84f 	bl	80092cc <_vfiprintf_r>
 800922e:	b002      	add	sp, #8
 8009230:	f85d eb04 	ldr.w	lr, [sp], #4
 8009234:	b003      	add	sp, #12
 8009236:	4770      	bx	lr
 8009238:	2000000c 	.word	0x2000000c

0800923c <__ascii_mbtowc>:
 800923c:	b082      	sub	sp, #8
 800923e:	b901      	cbnz	r1, 8009242 <__ascii_mbtowc+0x6>
 8009240:	a901      	add	r1, sp, #4
 8009242:	b142      	cbz	r2, 8009256 <__ascii_mbtowc+0x1a>
 8009244:	b14b      	cbz	r3, 800925a <__ascii_mbtowc+0x1e>
 8009246:	7813      	ldrb	r3, [r2, #0]
 8009248:	600b      	str	r3, [r1, #0]
 800924a:	7812      	ldrb	r2, [r2, #0]
 800924c:	1e10      	subs	r0, r2, #0
 800924e:	bf18      	it	ne
 8009250:	2001      	movne	r0, #1
 8009252:	b002      	add	sp, #8
 8009254:	4770      	bx	lr
 8009256:	4610      	mov	r0, r2
 8009258:	e7fb      	b.n	8009252 <__ascii_mbtowc+0x16>
 800925a:	f06f 0001 	mvn.w	r0, #1
 800925e:	e7f8      	b.n	8009252 <__ascii_mbtowc+0x16>

08009260 <__malloc_lock>:
 8009260:	4801      	ldr	r0, [pc, #4]	; (8009268 <__malloc_lock+0x8>)
 8009262:	f000 bbf1 	b.w	8009a48 <__retarget_lock_acquire_recursive>
 8009266:	bf00      	nop
 8009268:	20000440 	.word	0x20000440

0800926c <__malloc_unlock>:
 800926c:	4801      	ldr	r0, [pc, #4]	; (8009274 <__malloc_unlock+0x8>)
 800926e:	f000 bbec 	b.w	8009a4a <__retarget_lock_release_recursive>
 8009272:	bf00      	nop
 8009274:	20000440 	.word	0x20000440

08009278 <__sfputc_r>:
 8009278:	6893      	ldr	r3, [r2, #8]
 800927a:	3b01      	subs	r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	b410      	push	{r4}
 8009280:	6093      	str	r3, [r2, #8]
 8009282:	da08      	bge.n	8009296 <__sfputc_r+0x1e>
 8009284:	6994      	ldr	r4, [r2, #24]
 8009286:	42a3      	cmp	r3, r4
 8009288:	db01      	blt.n	800928e <__sfputc_r+0x16>
 800928a:	290a      	cmp	r1, #10
 800928c:	d103      	bne.n	8009296 <__sfputc_r+0x1e>
 800928e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009292:	f000 b94b 	b.w	800952c <__swbuf_r>
 8009296:	6813      	ldr	r3, [r2, #0]
 8009298:	1c58      	adds	r0, r3, #1
 800929a:	6010      	str	r0, [r2, #0]
 800929c:	7019      	strb	r1, [r3, #0]
 800929e:	4608      	mov	r0, r1
 80092a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <__sfputs_r>:
 80092a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a8:	4606      	mov	r6, r0
 80092aa:	460f      	mov	r7, r1
 80092ac:	4614      	mov	r4, r2
 80092ae:	18d5      	adds	r5, r2, r3
 80092b0:	42ac      	cmp	r4, r5
 80092b2:	d101      	bne.n	80092b8 <__sfputs_r+0x12>
 80092b4:	2000      	movs	r0, #0
 80092b6:	e007      	b.n	80092c8 <__sfputs_r+0x22>
 80092b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092bc:	463a      	mov	r2, r7
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff ffda 	bl	8009278 <__sfputc_r>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d1f3      	bne.n	80092b0 <__sfputs_r+0xa>
 80092c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092cc <_vfiprintf_r>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	460d      	mov	r5, r1
 80092d2:	b09d      	sub	sp, #116	; 0x74
 80092d4:	4614      	mov	r4, r2
 80092d6:	4698      	mov	r8, r3
 80092d8:	4606      	mov	r6, r0
 80092da:	b118      	cbz	r0, 80092e4 <_vfiprintf_r+0x18>
 80092dc:	6983      	ldr	r3, [r0, #24]
 80092de:	b90b      	cbnz	r3, 80092e4 <_vfiprintf_r+0x18>
 80092e0:	f000 fb14 	bl	800990c <__sinit>
 80092e4:	4b89      	ldr	r3, [pc, #548]	; (800950c <_vfiprintf_r+0x240>)
 80092e6:	429d      	cmp	r5, r3
 80092e8:	d11b      	bne.n	8009322 <_vfiprintf_r+0x56>
 80092ea:	6875      	ldr	r5, [r6, #4]
 80092ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ee:	07d9      	lsls	r1, r3, #31
 80092f0:	d405      	bmi.n	80092fe <_vfiprintf_r+0x32>
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	059a      	lsls	r2, r3, #22
 80092f6:	d402      	bmi.n	80092fe <_vfiprintf_r+0x32>
 80092f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092fa:	f000 fba5 	bl	8009a48 <__retarget_lock_acquire_recursive>
 80092fe:	89ab      	ldrh	r3, [r5, #12]
 8009300:	071b      	lsls	r3, r3, #28
 8009302:	d501      	bpl.n	8009308 <_vfiprintf_r+0x3c>
 8009304:	692b      	ldr	r3, [r5, #16]
 8009306:	b9eb      	cbnz	r3, 8009344 <_vfiprintf_r+0x78>
 8009308:	4629      	mov	r1, r5
 800930a:	4630      	mov	r0, r6
 800930c:	f000 f96e 	bl	80095ec <__swsetup_r>
 8009310:	b1c0      	cbz	r0, 8009344 <_vfiprintf_r+0x78>
 8009312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009314:	07dc      	lsls	r4, r3, #31
 8009316:	d50e      	bpl.n	8009336 <_vfiprintf_r+0x6a>
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	b01d      	add	sp, #116	; 0x74
 800931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009322:	4b7b      	ldr	r3, [pc, #492]	; (8009510 <_vfiprintf_r+0x244>)
 8009324:	429d      	cmp	r5, r3
 8009326:	d101      	bne.n	800932c <_vfiprintf_r+0x60>
 8009328:	68b5      	ldr	r5, [r6, #8]
 800932a:	e7df      	b.n	80092ec <_vfiprintf_r+0x20>
 800932c:	4b79      	ldr	r3, [pc, #484]	; (8009514 <_vfiprintf_r+0x248>)
 800932e:	429d      	cmp	r5, r3
 8009330:	bf08      	it	eq
 8009332:	68f5      	ldreq	r5, [r6, #12]
 8009334:	e7da      	b.n	80092ec <_vfiprintf_r+0x20>
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	0598      	lsls	r0, r3, #22
 800933a:	d4ed      	bmi.n	8009318 <_vfiprintf_r+0x4c>
 800933c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800933e:	f000 fb84 	bl	8009a4a <__retarget_lock_release_recursive>
 8009342:	e7e9      	b.n	8009318 <_vfiprintf_r+0x4c>
 8009344:	2300      	movs	r3, #0
 8009346:	9309      	str	r3, [sp, #36]	; 0x24
 8009348:	2320      	movs	r3, #32
 800934a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800934e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009352:	2330      	movs	r3, #48	; 0x30
 8009354:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009518 <_vfiprintf_r+0x24c>
 8009358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800935c:	f04f 0901 	mov.w	r9, #1
 8009360:	4623      	mov	r3, r4
 8009362:	469a      	mov	sl, r3
 8009364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009368:	b10a      	cbz	r2, 800936e <_vfiprintf_r+0xa2>
 800936a:	2a25      	cmp	r2, #37	; 0x25
 800936c:	d1f9      	bne.n	8009362 <_vfiprintf_r+0x96>
 800936e:	ebba 0b04 	subs.w	fp, sl, r4
 8009372:	d00b      	beq.n	800938c <_vfiprintf_r+0xc0>
 8009374:	465b      	mov	r3, fp
 8009376:	4622      	mov	r2, r4
 8009378:	4629      	mov	r1, r5
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff ff93 	bl	80092a6 <__sfputs_r>
 8009380:	3001      	adds	r0, #1
 8009382:	f000 80aa 	beq.w	80094da <_vfiprintf_r+0x20e>
 8009386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009388:	445a      	add	r2, fp
 800938a:	9209      	str	r2, [sp, #36]	; 0x24
 800938c:	f89a 3000 	ldrb.w	r3, [sl]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 80a2 	beq.w	80094da <_vfiprintf_r+0x20e>
 8009396:	2300      	movs	r3, #0
 8009398:	f04f 32ff 	mov.w	r2, #4294967295
 800939c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093a0:	f10a 0a01 	add.w	sl, sl, #1
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	9307      	str	r3, [sp, #28]
 80093a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ac:	931a      	str	r3, [sp, #104]	; 0x68
 80093ae:	4654      	mov	r4, sl
 80093b0:	2205      	movs	r2, #5
 80093b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b6:	4858      	ldr	r0, [pc, #352]	; (8009518 <_vfiprintf_r+0x24c>)
 80093b8:	f7f6 ff1a 	bl	80001f0 <memchr>
 80093bc:	9a04      	ldr	r2, [sp, #16]
 80093be:	b9d8      	cbnz	r0, 80093f8 <_vfiprintf_r+0x12c>
 80093c0:	06d1      	lsls	r1, r2, #27
 80093c2:	bf44      	itt	mi
 80093c4:	2320      	movmi	r3, #32
 80093c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ca:	0713      	lsls	r3, r2, #28
 80093cc:	bf44      	itt	mi
 80093ce:	232b      	movmi	r3, #43	; 0x2b
 80093d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093d4:	f89a 3000 	ldrb.w	r3, [sl]
 80093d8:	2b2a      	cmp	r3, #42	; 0x2a
 80093da:	d015      	beq.n	8009408 <_vfiprintf_r+0x13c>
 80093dc:	9a07      	ldr	r2, [sp, #28]
 80093de:	4654      	mov	r4, sl
 80093e0:	2000      	movs	r0, #0
 80093e2:	f04f 0c0a 	mov.w	ip, #10
 80093e6:	4621      	mov	r1, r4
 80093e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ec:	3b30      	subs	r3, #48	; 0x30
 80093ee:	2b09      	cmp	r3, #9
 80093f0:	d94e      	bls.n	8009490 <_vfiprintf_r+0x1c4>
 80093f2:	b1b0      	cbz	r0, 8009422 <_vfiprintf_r+0x156>
 80093f4:	9207      	str	r2, [sp, #28]
 80093f6:	e014      	b.n	8009422 <_vfiprintf_r+0x156>
 80093f8:	eba0 0308 	sub.w	r3, r0, r8
 80093fc:	fa09 f303 	lsl.w	r3, r9, r3
 8009400:	4313      	orrs	r3, r2
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	46a2      	mov	sl, r4
 8009406:	e7d2      	b.n	80093ae <_vfiprintf_r+0xe2>
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	1d19      	adds	r1, r3, #4
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	9103      	str	r1, [sp, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	bfbb      	ittet	lt
 8009414:	425b      	neglt	r3, r3
 8009416:	f042 0202 	orrlt.w	r2, r2, #2
 800941a:	9307      	strge	r3, [sp, #28]
 800941c:	9307      	strlt	r3, [sp, #28]
 800941e:	bfb8      	it	lt
 8009420:	9204      	strlt	r2, [sp, #16]
 8009422:	7823      	ldrb	r3, [r4, #0]
 8009424:	2b2e      	cmp	r3, #46	; 0x2e
 8009426:	d10c      	bne.n	8009442 <_vfiprintf_r+0x176>
 8009428:	7863      	ldrb	r3, [r4, #1]
 800942a:	2b2a      	cmp	r3, #42	; 0x2a
 800942c:	d135      	bne.n	800949a <_vfiprintf_r+0x1ce>
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	1d1a      	adds	r2, r3, #4
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	9203      	str	r2, [sp, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	bfb8      	it	lt
 800943a:	f04f 33ff 	movlt.w	r3, #4294967295
 800943e:	3402      	adds	r4, #2
 8009440:	9305      	str	r3, [sp, #20]
 8009442:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009528 <_vfiprintf_r+0x25c>
 8009446:	7821      	ldrb	r1, [r4, #0]
 8009448:	2203      	movs	r2, #3
 800944a:	4650      	mov	r0, sl
 800944c:	f7f6 fed0 	bl	80001f0 <memchr>
 8009450:	b140      	cbz	r0, 8009464 <_vfiprintf_r+0x198>
 8009452:	2340      	movs	r3, #64	; 0x40
 8009454:	eba0 000a 	sub.w	r0, r0, sl
 8009458:	fa03 f000 	lsl.w	r0, r3, r0
 800945c:	9b04      	ldr	r3, [sp, #16]
 800945e:	4303      	orrs	r3, r0
 8009460:	3401      	adds	r4, #1
 8009462:	9304      	str	r3, [sp, #16]
 8009464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009468:	482c      	ldr	r0, [pc, #176]	; (800951c <_vfiprintf_r+0x250>)
 800946a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800946e:	2206      	movs	r2, #6
 8009470:	f7f6 febe 	bl	80001f0 <memchr>
 8009474:	2800      	cmp	r0, #0
 8009476:	d03f      	beq.n	80094f8 <_vfiprintf_r+0x22c>
 8009478:	4b29      	ldr	r3, [pc, #164]	; (8009520 <_vfiprintf_r+0x254>)
 800947a:	bb1b      	cbnz	r3, 80094c4 <_vfiprintf_r+0x1f8>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	3307      	adds	r3, #7
 8009480:	f023 0307 	bic.w	r3, r3, #7
 8009484:	3308      	adds	r3, #8
 8009486:	9303      	str	r3, [sp, #12]
 8009488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948a:	443b      	add	r3, r7
 800948c:	9309      	str	r3, [sp, #36]	; 0x24
 800948e:	e767      	b.n	8009360 <_vfiprintf_r+0x94>
 8009490:	fb0c 3202 	mla	r2, ip, r2, r3
 8009494:	460c      	mov	r4, r1
 8009496:	2001      	movs	r0, #1
 8009498:	e7a5      	b.n	80093e6 <_vfiprintf_r+0x11a>
 800949a:	2300      	movs	r3, #0
 800949c:	3401      	adds	r4, #1
 800949e:	9305      	str	r3, [sp, #20]
 80094a0:	4619      	mov	r1, r3
 80094a2:	f04f 0c0a 	mov.w	ip, #10
 80094a6:	4620      	mov	r0, r4
 80094a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ac:	3a30      	subs	r2, #48	; 0x30
 80094ae:	2a09      	cmp	r2, #9
 80094b0:	d903      	bls.n	80094ba <_vfiprintf_r+0x1ee>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0c5      	beq.n	8009442 <_vfiprintf_r+0x176>
 80094b6:	9105      	str	r1, [sp, #20]
 80094b8:	e7c3      	b.n	8009442 <_vfiprintf_r+0x176>
 80094ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80094be:	4604      	mov	r4, r0
 80094c0:	2301      	movs	r3, #1
 80094c2:	e7f0      	b.n	80094a6 <_vfiprintf_r+0x1da>
 80094c4:	ab03      	add	r3, sp, #12
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	462a      	mov	r2, r5
 80094ca:	4b16      	ldr	r3, [pc, #88]	; (8009524 <_vfiprintf_r+0x258>)
 80094cc:	a904      	add	r1, sp, #16
 80094ce:	4630      	mov	r0, r6
 80094d0:	f7fd ff9a 	bl	8007408 <_printf_float>
 80094d4:	4607      	mov	r7, r0
 80094d6:	1c78      	adds	r0, r7, #1
 80094d8:	d1d6      	bne.n	8009488 <_vfiprintf_r+0x1bc>
 80094da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094dc:	07d9      	lsls	r1, r3, #31
 80094de:	d405      	bmi.n	80094ec <_vfiprintf_r+0x220>
 80094e0:	89ab      	ldrh	r3, [r5, #12]
 80094e2:	059a      	lsls	r2, r3, #22
 80094e4:	d402      	bmi.n	80094ec <_vfiprintf_r+0x220>
 80094e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094e8:	f000 faaf 	bl	8009a4a <__retarget_lock_release_recursive>
 80094ec:	89ab      	ldrh	r3, [r5, #12]
 80094ee:	065b      	lsls	r3, r3, #25
 80094f0:	f53f af12 	bmi.w	8009318 <_vfiprintf_r+0x4c>
 80094f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094f6:	e711      	b.n	800931c <_vfiprintf_r+0x50>
 80094f8:	ab03      	add	r3, sp, #12
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	462a      	mov	r2, r5
 80094fe:	4b09      	ldr	r3, [pc, #36]	; (8009524 <_vfiprintf_r+0x258>)
 8009500:	a904      	add	r1, sp, #16
 8009502:	4630      	mov	r0, r6
 8009504:	f7fe fa24 	bl	8007950 <_printf_i>
 8009508:	e7e4      	b.n	80094d4 <_vfiprintf_r+0x208>
 800950a:	bf00      	nop
 800950c:	0800a0cc 	.word	0x0800a0cc
 8009510:	0800a0ec 	.word	0x0800a0ec
 8009514:	0800a0ac 	.word	0x0800a0ac
 8009518:	08009f9a 	.word	0x08009f9a
 800951c:	08009fa4 	.word	0x08009fa4
 8009520:	08007409 	.word	0x08007409
 8009524:	080092a7 	.word	0x080092a7
 8009528:	08009fa0 	.word	0x08009fa0

0800952c <__swbuf_r>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	460e      	mov	r6, r1
 8009530:	4614      	mov	r4, r2
 8009532:	4605      	mov	r5, r0
 8009534:	b118      	cbz	r0, 800953e <__swbuf_r+0x12>
 8009536:	6983      	ldr	r3, [r0, #24]
 8009538:	b90b      	cbnz	r3, 800953e <__swbuf_r+0x12>
 800953a:	f000 f9e7 	bl	800990c <__sinit>
 800953e:	4b21      	ldr	r3, [pc, #132]	; (80095c4 <__swbuf_r+0x98>)
 8009540:	429c      	cmp	r4, r3
 8009542:	d12b      	bne.n	800959c <__swbuf_r+0x70>
 8009544:	686c      	ldr	r4, [r5, #4]
 8009546:	69a3      	ldr	r3, [r4, #24]
 8009548:	60a3      	str	r3, [r4, #8]
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	071a      	lsls	r2, r3, #28
 800954e:	d52f      	bpl.n	80095b0 <__swbuf_r+0x84>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	b36b      	cbz	r3, 80095b0 <__swbuf_r+0x84>
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	6820      	ldr	r0, [r4, #0]
 8009558:	1ac0      	subs	r0, r0, r3
 800955a:	6963      	ldr	r3, [r4, #20]
 800955c:	b2f6      	uxtb	r6, r6
 800955e:	4283      	cmp	r3, r0
 8009560:	4637      	mov	r7, r6
 8009562:	dc04      	bgt.n	800956e <__swbuf_r+0x42>
 8009564:	4621      	mov	r1, r4
 8009566:	4628      	mov	r0, r5
 8009568:	f000 f93c 	bl	80097e4 <_fflush_r>
 800956c:	bb30      	cbnz	r0, 80095bc <__swbuf_r+0x90>
 800956e:	68a3      	ldr	r3, [r4, #8]
 8009570:	3b01      	subs	r3, #1
 8009572:	60a3      	str	r3, [r4, #8]
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	6022      	str	r2, [r4, #0]
 800957a:	701e      	strb	r6, [r3, #0]
 800957c:	6963      	ldr	r3, [r4, #20]
 800957e:	3001      	adds	r0, #1
 8009580:	4283      	cmp	r3, r0
 8009582:	d004      	beq.n	800958e <__swbuf_r+0x62>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	07db      	lsls	r3, r3, #31
 8009588:	d506      	bpl.n	8009598 <__swbuf_r+0x6c>
 800958a:	2e0a      	cmp	r6, #10
 800958c:	d104      	bne.n	8009598 <__swbuf_r+0x6c>
 800958e:	4621      	mov	r1, r4
 8009590:	4628      	mov	r0, r5
 8009592:	f000 f927 	bl	80097e4 <_fflush_r>
 8009596:	b988      	cbnz	r0, 80095bc <__swbuf_r+0x90>
 8009598:	4638      	mov	r0, r7
 800959a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800959c:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <__swbuf_r+0x9c>)
 800959e:	429c      	cmp	r4, r3
 80095a0:	d101      	bne.n	80095a6 <__swbuf_r+0x7a>
 80095a2:	68ac      	ldr	r4, [r5, #8]
 80095a4:	e7cf      	b.n	8009546 <__swbuf_r+0x1a>
 80095a6:	4b09      	ldr	r3, [pc, #36]	; (80095cc <__swbuf_r+0xa0>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	bf08      	it	eq
 80095ac:	68ec      	ldreq	r4, [r5, #12]
 80095ae:	e7ca      	b.n	8009546 <__swbuf_r+0x1a>
 80095b0:	4621      	mov	r1, r4
 80095b2:	4628      	mov	r0, r5
 80095b4:	f000 f81a 	bl	80095ec <__swsetup_r>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d0cb      	beq.n	8009554 <__swbuf_r+0x28>
 80095bc:	f04f 37ff 	mov.w	r7, #4294967295
 80095c0:	e7ea      	b.n	8009598 <__swbuf_r+0x6c>
 80095c2:	bf00      	nop
 80095c4:	0800a0cc 	.word	0x0800a0cc
 80095c8:	0800a0ec 	.word	0x0800a0ec
 80095cc:	0800a0ac 	.word	0x0800a0ac

080095d0 <__ascii_wctomb>:
 80095d0:	b149      	cbz	r1, 80095e6 <__ascii_wctomb+0x16>
 80095d2:	2aff      	cmp	r2, #255	; 0xff
 80095d4:	bf85      	ittet	hi
 80095d6:	238a      	movhi	r3, #138	; 0x8a
 80095d8:	6003      	strhi	r3, [r0, #0]
 80095da:	700a      	strbls	r2, [r1, #0]
 80095dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80095e0:	bf98      	it	ls
 80095e2:	2001      	movls	r0, #1
 80095e4:	4770      	bx	lr
 80095e6:	4608      	mov	r0, r1
 80095e8:	4770      	bx	lr
	...

080095ec <__swsetup_r>:
 80095ec:	4b32      	ldr	r3, [pc, #200]	; (80096b8 <__swsetup_r+0xcc>)
 80095ee:	b570      	push	{r4, r5, r6, lr}
 80095f0:	681d      	ldr	r5, [r3, #0]
 80095f2:	4606      	mov	r6, r0
 80095f4:	460c      	mov	r4, r1
 80095f6:	b125      	cbz	r5, 8009602 <__swsetup_r+0x16>
 80095f8:	69ab      	ldr	r3, [r5, #24]
 80095fa:	b913      	cbnz	r3, 8009602 <__swsetup_r+0x16>
 80095fc:	4628      	mov	r0, r5
 80095fe:	f000 f985 	bl	800990c <__sinit>
 8009602:	4b2e      	ldr	r3, [pc, #184]	; (80096bc <__swsetup_r+0xd0>)
 8009604:	429c      	cmp	r4, r3
 8009606:	d10f      	bne.n	8009628 <__swsetup_r+0x3c>
 8009608:	686c      	ldr	r4, [r5, #4]
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009610:	0719      	lsls	r1, r3, #28
 8009612:	d42c      	bmi.n	800966e <__swsetup_r+0x82>
 8009614:	06dd      	lsls	r5, r3, #27
 8009616:	d411      	bmi.n	800963c <__swsetup_r+0x50>
 8009618:	2309      	movs	r3, #9
 800961a:	6033      	str	r3, [r6, #0]
 800961c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009620:	81a3      	strh	r3, [r4, #12]
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	e03e      	b.n	80096a6 <__swsetup_r+0xba>
 8009628:	4b25      	ldr	r3, [pc, #148]	; (80096c0 <__swsetup_r+0xd4>)
 800962a:	429c      	cmp	r4, r3
 800962c:	d101      	bne.n	8009632 <__swsetup_r+0x46>
 800962e:	68ac      	ldr	r4, [r5, #8]
 8009630:	e7eb      	b.n	800960a <__swsetup_r+0x1e>
 8009632:	4b24      	ldr	r3, [pc, #144]	; (80096c4 <__swsetup_r+0xd8>)
 8009634:	429c      	cmp	r4, r3
 8009636:	bf08      	it	eq
 8009638:	68ec      	ldreq	r4, [r5, #12]
 800963a:	e7e6      	b.n	800960a <__swsetup_r+0x1e>
 800963c:	0758      	lsls	r0, r3, #29
 800963e:	d512      	bpl.n	8009666 <__swsetup_r+0x7a>
 8009640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009642:	b141      	cbz	r1, 8009656 <__swsetup_r+0x6a>
 8009644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009648:	4299      	cmp	r1, r3
 800964a:	d002      	beq.n	8009652 <__swsetup_r+0x66>
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff fcd5 	bl	8008ffc <_free_r>
 8009652:	2300      	movs	r3, #0
 8009654:	6363      	str	r3, [r4, #52]	; 0x34
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	2300      	movs	r3, #0
 8009660:	6063      	str	r3, [r4, #4]
 8009662:	6923      	ldr	r3, [r4, #16]
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f043 0308 	orr.w	r3, r3, #8
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	b94b      	cbnz	r3, 8009686 <__swsetup_r+0x9a>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800967c:	d003      	beq.n	8009686 <__swsetup_r+0x9a>
 800967e:	4621      	mov	r1, r4
 8009680:	4630      	mov	r0, r6
 8009682:	f000 fa09 	bl	8009a98 <__smakebuf_r>
 8009686:	89a0      	ldrh	r0, [r4, #12]
 8009688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800968c:	f010 0301 	ands.w	r3, r0, #1
 8009690:	d00a      	beq.n	80096a8 <__swsetup_r+0xbc>
 8009692:	2300      	movs	r3, #0
 8009694:	60a3      	str	r3, [r4, #8]
 8009696:	6963      	ldr	r3, [r4, #20]
 8009698:	425b      	negs	r3, r3
 800969a:	61a3      	str	r3, [r4, #24]
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	b943      	cbnz	r3, 80096b2 <__swsetup_r+0xc6>
 80096a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096a4:	d1ba      	bne.n	800961c <__swsetup_r+0x30>
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	0781      	lsls	r1, r0, #30
 80096aa:	bf58      	it	pl
 80096ac:	6963      	ldrpl	r3, [r4, #20]
 80096ae:	60a3      	str	r3, [r4, #8]
 80096b0:	e7f4      	b.n	800969c <__swsetup_r+0xb0>
 80096b2:	2000      	movs	r0, #0
 80096b4:	e7f7      	b.n	80096a6 <__swsetup_r+0xba>
 80096b6:	bf00      	nop
 80096b8:	2000000c 	.word	0x2000000c
 80096bc:	0800a0cc 	.word	0x0800a0cc
 80096c0:	0800a0ec 	.word	0x0800a0ec
 80096c4:	0800a0ac 	.word	0x0800a0ac

080096c8 <abort>:
 80096c8:	b508      	push	{r3, lr}
 80096ca:	2006      	movs	r0, #6
 80096cc:	f000 fa4c 	bl	8009b68 <raise>
 80096d0:	2001      	movs	r0, #1
 80096d2:	f7f8 fe29 	bl	8002328 <_exit>
	...

080096d8 <__sflush_r>:
 80096d8:	898a      	ldrh	r2, [r1, #12]
 80096da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096de:	4605      	mov	r5, r0
 80096e0:	0710      	lsls	r0, r2, #28
 80096e2:	460c      	mov	r4, r1
 80096e4:	d458      	bmi.n	8009798 <__sflush_r+0xc0>
 80096e6:	684b      	ldr	r3, [r1, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dc05      	bgt.n	80096f8 <__sflush_r+0x20>
 80096ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dc02      	bgt.n	80096f8 <__sflush_r+0x20>
 80096f2:	2000      	movs	r0, #0
 80096f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d0f9      	beq.n	80096f2 <__sflush_r+0x1a>
 80096fe:	2300      	movs	r3, #0
 8009700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009704:	682f      	ldr	r7, [r5, #0]
 8009706:	602b      	str	r3, [r5, #0]
 8009708:	d032      	beq.n	8009770 <__sflush_r+0x98>
 800970a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	075a      	lsls	r2, r3, #29
 8009710:	d505      	bpl.n	800971e <__sflush_r+0x46>
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	1ac0      	subs	r0, r0, r3
 8009716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009718:	b10b      	cbz	r3, 800971e <__sflush_r+0x46>
 800971a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800971c:	1ac0      	subs	r0, r0, r3
 800971e:	2300      	movs	r3, #0
 8009720:	4602      	mov	r2, r0
 8009722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009724:	6a21      	ldr	r1, [r4, #32]
 8009726:	4628      	mov	r0, r5
 8009728:	47b0      	blx	r6
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	d106      	bne.n	800973e <__sflush_r+0x66>
 8009730:	6829      	ldr	r1, [r5, #0]
 8009732:	291d      	cmp	r1, #29
 8009734:	d82c      	bhi.n	8009790 <__sflush_r+0xb8>
 8009736:	4a2a      	ldr	r2, [pc, #168]	; (80097e0 <__sflush_r+0x108>)
 8009738:	40ca      	lsrs	r2, r1
 800973a:	07d6      	lsls	r6, r2, #31
 800973c:	d528      	bpl.n	8009790 <__sflush_r+0xb8>
 800973e:	2200      	movs	r2, #0
 8009740:	6062      	str	r2, [r4, #4]
 8009742:	04d9      	lsls	r1, r3, #19
 8009744:	6922      	ldr	r2, [r4, #16]
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	d504      	bpl.n	8009754 <__sflush_r+0x7c>
 800974a:	1c42      	adds	r2, r0, #1
 800974c:	d101      	bne.n	8009752 <__sflush_r+0x7a>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b903      	cbnz	r3, 8009754 <__sflush_r+0x7c>
 8009752:	6560      	str	r0, [r4, #84]	; 0x54
 8009754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009756:	602f      	str	r7, [r5, #0]
 8009758:	2900      	cmp	r1, #0
 800975a:	d0ca      	beq.n	80096f2 <__sflush_r+0x1a>
 800975c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009760:	4299      	cmp	r1, r3
 8009762:	d002      	beq.n	800976a <__sflush_r+0x92>
 8009764:	4628      	mov	r0, r5
 8009766:	f7ff fc49 	bl	8008ffc <_free_r>
 800976a:	2000      	movs	r0, #0
 800976c:	6360      	str	r0, [r4, #52]	; 0x34
 800976e:	e7c1      	b.n	80096f4 <__sflush_r+0x1c>
 8009770:	6a21      	ldr	r1, [r4, #32]
 8009772:	2301      	movs	r3, #1
 8009774:	4628      	mov	r0, r5
 8009776:	47b0      	blx	r6
 8009778:	1c41      	adds	r1, r0, #1
 800977a:	d1c7      	bne.n	800970c <__sflush_r+0x34>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d0c4      	beq.n	800970c <__sflush_r+0x34>
 8009782:	2b1d      	cmp	r3, #29
 8009784:	d001      	beq.n	800978a <__sflush_r+0xb2>
 8009786:	2b16      	cmp	r3, #22
 8009788:	d101      	bne.n	800978e <__sflush_r+0xb6>
 800978a:	602f      	str	r7, [r5, #0]
 800978c:	e7b1      	b.n	80096f2 <__sflush_r+0x1a>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	e7ad      	b.n	80096f4 <__sflush_r+0x1c>
 8009798:	690f      	ldr	r7, [r1, #16]
 800979a:	2f00      	cmp	r7, #0
 800979c:	d0a9      	beq.n	80096f2 <__sflush_r+0x1a>
 800979e:	0793      	lsls	r3, r2, #30
 80097a0:	680e      	ldr	r6, [r1, #0]
 80097a2:	bf08      	it	eq
 80097a4:	694b      	ldreq	r3, [r1, #20]
 80097a6:	600f      	str	r7, [r1, #0]
 80097a8:	bf18      	it	ne
 80097aa:	2300      	movne	r3, #0
 80097ac:	eba6 0807 	sub.w	r8, r6, r7
 80097b0:	608b      	str	r3, [r1, #8]
 80097b2:	f1b8 0f00 	cmp.w	r8, #0
 80097b6:	dd9c      	ble.n	80096f2 <__sflush_r+0x1a>
 80097b8:	6a21      	ldr	r1, [r4, #32]
 80097ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097bc:	4643      	mov	r3, r8
 80097be:	463a      	mov	r2, r7
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b0      	blx	r6
 80097c4:	2800      	cmp	r0, #0
 80097c6:	dc06      	bgt.n	80097d6 <__sflush_r+0xfe>
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e78e      	b.n	80096f4 <__sflush_r+0x1c>
 80097d6:	4407      	add	r7, r0
 80097d8:	eba8 0800 	sub.w	r8, r8, r0
 80097dc:	e7e9      	b.n	80097b2 <__sflush_r+0xda>
 80097de:	bf00      	nop
 80097e0:	20400001 	.word	0x20400001

080097e4 <_fflush_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	690b      	ldr	r3, [r1, #16]
 80097e8:	4605      	mov	r5, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	b913      	cbnz	r3, 80097f4 <_fflush_r+0x10>
 80097ee:	2500      	movs	r5, #0
 80097f0:	4628      	mov	r0, r5
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	b118      	cbz	r0, 80097fe <_fflush_r+0x1a>
 80097f6:	6983      	ldr	r3, [r0, #24]
 80097f8:	b90b      	cbnz	r3, 80097fe <_fflush_r+0x1a>
 80097fa:	f000 f887 	bl	800990c <__sinit>
 80097fe:	4b14      	ldr	r3, [pc, #80]	; (8009850 <_fflush_r+0x6c>)
 8009800:	429c      	cmp	r4, r3
 8009802:	d11b      	bne.n	800983c <_fflush_r+0x58>
 8009804:	686c      	ldr	r4, [r5, #4]
 8009806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0ef      	beq.n	80097ee <_fflush_r+0xa>
 800980e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009810:	07d0      	lsls	r0, r2, #31
 8009812:	d404      	bmi.n	800981e <_fflush_r+0x3a>
 8009814:	0599      	lsls	r1, r3, #22
 8009816:	d402      	bmi.n	800981e <_fflush_r+0x3a>
 8009818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800981a:	f000 f915 	bl	8009a48 <__retarget_lock_acquire_recursive>
 800981e:	4628      	mov	r0, r5
 8009820:	4621      	mov	r1, r4
 8009822:	f7ff ff59 	bl	80096d8 <__sflush_r>
 8009826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009828:	07da      	lsls	r2, r3, #31
 800982a:	4605      	mov	r5, r0
 800982c:	d4e0      	bmi.n	80097f0 <_fflush_r+0xc>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	059b      	lsls	r3, r3, #22
 8009832:	d4dd      	bmi.n	80097f0 <_fflush_r+0xc>
 8009834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009836:	f000 f908 	bl	8009a4a <__retarget_lock_release_recursive>
 800983a:	e7d9      	b.n	80097f0 <_fflush_r+0xc>
 800983c:	4b05      	ldr	r3, [pc, #20]	; (8009854 <_fflush_r+0x70>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <_fflush_r+0x62>
 8009842:	68ac      	ldr	r4, [r5, #8]
 8009844:	e7df      	b.n	8009806 <_fflush_r+0x22>
 8009846:	4b04      	ldr	r3, [pc, #16]	; (8009858 <_fflush_r+0x74>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68ec      	ldreq	r4, [r5, #12]
 800984e:	e7da      	b.n	8009806 <_fflush_r+0x22>
 8009850:	0800a0cc 	.word	0x0800a0cc
 8009854:	0800a0ec 	.word	0x0800a0ec
 8009858:	0800a0ac 	.word	0x0800a0ac

0800985c <std>:
 800985c:	2300      	movs	r3, #0
 800985e:	b510      	push	{r4, lr}
 8009860:	4604      	mov	r4, r0
 8009862:	e9c0 3300 	strd	r3, r3, [r0]
 8009866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800986a:	6083      	str	r3, [r0, #8]
 800986c:	8181      	strh	r1, [r0, #12]
 800986e:	6643      	str	r3, [r0, #100]	; 0x64
 8009870:	81c2      	strh	r2, [r0, #14]
 8009872:	6183      	str	r3, [r0, #24]
 8009874:	4619      	mov	r1, r3
 8009876:	2208      	movs	r2, #8
 8009878:	305c      	adds	r0, #92	; 0x5c
 800987a:	f7fd fd1d 	bl	80072b8 <memset>
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <std+0x38>)
 8009880:	6263      	str	r3, [r4, #36]	; 0x24
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <std+0x3c>)
 8009884:	62a3      	str	r3, [r4, #40]	; 0x28
 8009886:	4b05      	ldr	r3, [pc, #20]	; (800989c <std+0x40>)
 8009888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800988a:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <std+0x44>)
 800988c:	6224      	str	r4, [r4, #32]
 800988e:	6323      	str	r3, [r4, #48]	; 0x30
 8009890:	bd10      	pop	{r4, pc}
 8009892:	bf00      	nop
 8009894:	08009ba1 	.word	0x08009ba1
 8009898:	08009bc3 	.word	0x08009bc3
 800989c:	08009bfb 	.word	0x08009bfb
 80098a0:	08009c1f 	.word	0x08009c1f

080098a4 <_cleanup_r>:
 80098a4:	4901      	ldr	r1, [pc, #4]	; (80098ac <_cleanup_r+0x8>)
 80098a6:	f000 b8af 	b.w	8009a08 <_fwalk_reent>
 80098aa:	bf00      	nop
 80098ac:	080097e5 	.word	0x080097e5

080098b0 <__sfmoreglue>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	2268      	movs	r2, #104	; 0x68
 80098b4:	1e4d      	subs	r5, r1, #1
 80098b6:	4355      	muls	r5, r2
 80098b8:	460e      	mov	r6, r1
 80098ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098be:	f7ff fc09 	bl	80090d4 <_malloc_r>
 80098c2:	4604      	mov	r4, r0
 80098c4:	b140      	cbz	r0, 80098d8 <__sfmoreglue+0x28>
 80098c6:	2100      	movs	r1, #0
 80098c8:	e9c0 1600 	strd	r1, r6, [r0]
 80098cc:	300c      	adds	r0, #12
 80098ce:	60a0      	str	r0, [r4, #8]
 80098d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098d4:	f7fd fcf0 	bl	80072b8 <memset>
 80098d8:	4620      	mov	r0, r4
 80098da:	bd70      	pop	{r4, r5, r6, pc}

080098dc <__sfp_lock_acquire>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__sfp_lock_acquire+0x8>)
 80098de:	f000 b8b3 	b.w	8009a48 <__retarget_lock_acquire_recursive>
 80098e2:	bf00      	nop
 80098e4:	20000441 	.word	0x20000441

080098e8 <__sfp_lock_release>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__sfp_lock_release+0x8>)
 80098ea:	f000 b8ae 	b.w	8009a4a <__retarget_lock_release_recursive>
 80098ee:	bf00      	nop
 80098f0:	20000441 	.word	0x20000441

080098f4 <__sinit_lock_acquire>:
 80098f4:	4801      	ldr	r0, [pc, #4]	; (80098fc <__sinit_lock_acquire+0x8>)
 80098f6:	f000 b8a7 	b.w	8009a48 <__retarget_lock_acquire_recursive>
 80098fa:	bf00      	nop
 80098fc:	20000442 	.word	0x20000442

08009900 <__sinit_lock_release>:
 8009900:	4801      	ldr	r0, [pc, #4]	; (8009908 <__sinit_lock_release+0x8>)
 8009902:	f000 b8a2 	b.w	8009a4a <__retarget_lock_release_recursive>
 8009906:	bf00      	nop
 8009908:	20000442 	.word	0x20000442

0800990c <__sinit>:
 800990c:	b510      	push	{r4, lr}
 800990e:	4604      	mov	r4, r0
 8009910:	f7ff fff0 	bl	80098f4 <__sinit_lock_acquire>
 8009914:	69a3      	ldr	r3, [r4, #24]
 8009916:	b11b      	cbz	r3, 8009920 <__sinit+0x14>
 8009918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800991c:	f7ff bff0 	b.w	8009900 <__sinit_lock_release>
 8009920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009924:	6523      	str	r3, [r4, #80]	; 0x50
 8009926:	4b13      	ldr	r3, [pc, #76]	; (8009974 <__sinit+0x68>)
 8009928:	4a13      	ldr	r2, [pc, #76]	; (8009978 <__sinit+0x6c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	62a2      	str	r2, [r4, #40]	; 0x28
 800992e:	42a3      	cmp	r3, r4
 8009930:	bf04      	itt	eq
 8009932:	2301      	moveq	r3, #1
 8009934:	61a3      	streq	r3, [r4, #24]
 8009936:	4620      	mov	r0, r4
 8009938:	f000 f820 	bl	800997c <__sfp>
 800993c:	6060      	str	r0, [r4, #4]
 800993e:	4620      	mov	r0, r4
 8009940:	f000 f81c 	bl	800997c <__sfp>
 8009944:	60a0      	str	r0, [r4, #8]
 8009946:	4620      	mov	r0, r4
 8009948:	f000 f818 	bl	800997c <__sfp>
 800994c:	2200      	movs	r2, #0
 800994e:	60e0      	str	r0, [r4, #12]
 8009950:	2104      	movs	r1, #4
 8009952:	6860      	ldr	r0, [r4, #4]
 8009954:	f7ff ff82 	bl	800985c <std>
 8009958:	68a0      	ldr	r0, [r4, #8]
 800995a:	2201      	movs	r2, #1
 800995c:	2109      	movs	r1, #9
 800995e:	f7ff ff7d 	bl	800985c <std>
 8009962:	68e0      	ldr	r0, [r4, #12]
 8009964:	2202      	movs	r2, #2
 8009966:	2112      	movs	r1, #18
 8009968:	f7ff ff78 	bl	800985c <std>
 800996c:	2301      	movs	r3, #1
 800996e:	61a3      	str	r3, [r4, #24]
 8009970:	e7d2      	b.n	8009918 <__sinit+0xc>
 8009972:	bf00      	nop
 8009974:	08009d30 	.word	0x08009d30
 8009978:	080098a5 	.word	0x080098a5

0800997c <__sfp>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	4607      	mov	r7, r0
 8009980:	f7ff ffac 	bl	80098dc <__sfp_lock_acquire>
 8009984:	4b1e      	ldr	r3, [pc, #120]	; (8009a00 <__sfp+0x84>)
 8009986:	681e      	ldr	r6, [r3, #0]
 8009988:	69b3      	ldr	r3, [r6, #24]
 800998a:	b913      	cbnz	r3, 8009992 <__sfp+0x16>
 800998c:	4630      	mov	r0, r6
 800998e:	f7ff ffbd 	bl	800990c <__sinit>
 8009992:	3648      	adds	r6, #72	; 0x48
 8009994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009998:	3b01      	subs	r3, #1
 800999a:	d503      	bpl.n	80099a4 <__sfp+0x28>
 800999c:	6833      	ldr	r3, [r6, #0]
 800999e:	b30b      	cbz	r3, 80099e4 <__sfp+0x68>
 80099a0:	6836      	ldr	r6, [r6, #0]
 80099a2:	e7f7      	b.n	8009994 <__sfp+0x18>
 80099a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099a8:	b9d5      	cbnz	r5, 80099e0 <__sfp+0x64>
 80099aa:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <__sfp+0x88>)
 80099ac:	60e3      	str	r3, [r4, #12]
 80099ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099b2:	6665      	str	r5, [r4, #100]	; 0x64
 80099b4:	f000 f847 	bl	8009a46 <__retarget_lock_init_recursive>
 80099b8:	f7ff ff96 	bl	80098e8 <__sfp_lock_release>
 80099bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099c4:	6025      	str	r5, [r4, #0]
 80099c6:	61a5      	str	r5, [r4, #24]
 80099c8:	2208      	movs	r2, #8
 80099ca:	4629      	mov	r1, r5
 80099cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099d0:	f7fd fc72 	bl	80072b8 <memset>
 80099d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099dc:	4620      	mov	r0, r4
 80099de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e0:	3468      	adds	r4, #104	; 0x68
 80099e2:	e7d9      	b.n	8009998 <__sfp+0x1c>
 80099e4:	2104      	movs	r1, #4
 80099e6:	4638      	mov	r0, r7
 80099e8:	f7ff ff62 	bl	80098b0 <__sfmoreglue>
 80099ec:	4604      	mov	r4, r0
 80099ee:	6030      	str	r0, [r6, #0]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d1d5      	bne.n	80099a0 <__sfp+0x24>
 80099f4:	f7ff ff78 	bl	80098e8 <__sfp_lock_release>
 80099f8:	230c      	movs	r3, #12
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	e7ee      	b.n	80099dc <__sfp+0x60>
 80099fe:	bf00      	nop
 8009a00:	08009d30 	.word	0x08009d30
 8009a04:	ffff0001 	.word	0xffff0001

08009a08 <_fwalk_reent>:
 8009a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	4688      	mov	r8, r1
 8009a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a14:	2700      	movs	r7, #0
 8009a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8009a1e:	d505      	bpl.n	8009a2c <_fwalk_reent+0x24>
 8009a20:	6824      	ldr	r4, [r4, #0]
 8009a22:	2c00      	cmp	r4, #0
 8009a24:	d1f7      	bne.n	8009a16 <_fwalk_reent+0xe>
 8009a26:	4638      	mov	r0, r7
 8009a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2c:	89ab      	ldrh	r3, [r5, #12]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d907      	bls.n	8009a42 <_fwalk_reent+0x3a>
 8009a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a36:	3301      	adds	r3, #1
 8009a38:	d003      	beq.n	8009a42 <_fwalk_reent+0x3a>
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	47c0      	blx	r8
 8009a40:	4307      	orrs	r7, r0
 8009a42:	3568      	adds	r5, #104	; 0x68
 8009a44:	e7e9      	b.n	8009a1a <_fwalk_reent+0x12>

08009a46 <__retarget_lock_init_recursive>:
 8009a46:	4770      	bx	lr

08009a48 <__retarget_lock_acquire_recursive>:
 8009a48:	4770      	bx	lr

08009a4a <__retarget_lock_release_recursive>:
 8009a4a:	4770      	bx	lr

08009a4c <__swhatbuf_r>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	460e      	mov	r6, r1
 8009a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a54:	2900      	cmp	r1, #0
 8009a56:	b096      	sub	sp, #88	; 0x58
 8009a58:	4614      	mov	r4, r2
 8009a5a:	461d      	mov	r5, r3
 8009a5c:	da08      	bge.n	8009a70 <__swhatbuf_r+0x24>
 8009a5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	061a      	lsls	r2, r3, #24
 8009a68:	d410      	bmi.n	8009a8c <__swhatbuf_r+0x40>
 8009a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a6e:	e00e      	b.n	8009a8e <__swhatbuf_r+0x42>
 8009a70:	466a      	mov	r2, sp
 8009a72:	f000 f8fb 	bl	8009c6c <_fstat_r>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	dbf1      	blt.n	8009a5e <__swhatbuf_r+0x12>
 8009a7a:	9a01      	ldr	r2, [sp, #4]
 8009a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a84:	425a      	negs	r2, r3
 8009a86:	415a      	adcs	r2, r3
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	e7ee      	b.n	8009a6a <__swhatbuf_r+0x1e>
 8009a8c:	2340      	movs	r3, #64	; 0x40
 8009a8e:	2000      	movs	r0, #0
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	b016      	add	sp, #88	; 0x58
 8009a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a98 <__smakebuf_r>:
 8009a98:	898b      	ldrh	r3, [r1, #12]
 8009a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a9c:	079d      	lsls	r5, r3, #30
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	d507      	bpl.n	8009ab4 <__smakebuf_r+0x1c>
 8009aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	6123      	str	r3, [r4, #16]
 8009aac:	2301      	movs	r3, #1
 8009aae:	6163      	str	r3, [r4, #20]
 8009ab0:	b002      	add	sp, #8
 8009ab2:	bd70      	pop	{r4, r5, r6, pc}
 8009ab4:	ab01      	add	r3, sp, #4
 8009ab6:	466a      	mov	r2, sp
 8009ab8:	f7ff ffc8 	bl	8009a4c <__swhatbuf_r>
 8009abc:	9900      	ldr	r1, [sp, #0]
 8009abe:	4605      	mov	r5, r0
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7ff fb07 	bl	80090d4 <_malloc_r>
 8009ac6:	b948      	cbnz	r0, 8009adc <__smakebuf_r+0x44>
 8009ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009acc:	059a      	lsls	r2, r3, #22
 8009ace:	d4ef      	bmi.n	8009ab0 <__smakebuf_r+0x18>
 8009ad0:	f023 0303 	bic.w	r3, r3, #3
 8009ad4:	f043 0302 	orr.w	r3, r3, #2
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	e7e3      	b.n	8009aa4 <__smakebuf_r+0xc>
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <__smakebuf_r+0x7c>)
 8009ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	6020      	str	r0, [r4, #0]
 8009ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae8:	81a3      	strh	r3, [r4, #12]
 8009aea:	9b00      	ldr	r3, [sp, #0]
 8009aec:	6163      	str	r3, [r4, #20]
 8009aee:	9b01      	ldr	r3, [sp, #4]
 8009af0:	6120      	str	r0, [r4, #16]
 8009af2:	b15b      	cbz	r3, 8009b0c <__smakebuf_r+0x74>
 8009af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009af8:	4630      	mov	r0, r6
 8009afa:	f000 f8c9 	bl	8009c90 <_isatty_r>
 8009afe:	b128      	cbz	r0, 8009b0c <__smakebuf_r+0x74>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	f023 0303 	bic.w	r3, r3, #3
 8009b06:	f043 0301 	orr.w	r3, r3, #1
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	89a0      	ldrh	r0, [r4, #12]
 8009b0e:	4305      	orrs	r5, r0
 8009b10:	81a5      	strh	r5, [r4, #12]
 8009b12:	e7cd      	b.n	8009ab0 <__smakebuf_r+0x18>
 8009b14:	080098a5 	.word	0x080098a5

08009b18 <_raise_r>:
 8009b18:	291f      	cmp	r1, #31
 8009b1a:	b538      	push	{r3, r4, r5, lr}
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	460d      	mov	r5, r1
 8009b20:	d904      	bls.n	8009b2c <_raise_r+0x14>
 8009b22:	2316      	movs	r3, #22
 8009b24:	6003      	str	r3, [r0, #0]
 8009b26:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b2e:	b112      	cbz	r2, 8009b36 <_raise_r+0x1e>
 8009b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b34:	b94b      	cbnz	r3, 8009b4a <_raise_r+0x32>
 8009b36:	4620      	mov	r0, r4
 8009b38:	f000 f830 	bl	8009b9c <_getpid_r>
 8009b3c:	462a      	mov	r2, r5
 8009b3e:	4601      	mov	r1, r0
 8009b40:	4620      	mov	r0, r4
 8009b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b46:	f000 b817 	b.w	8009b78 <_kill_r>
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d00a      	beq.n	8009b64 <_raise_r+0x4c>
 8009b4e:	1c59      	adds	r1, r3, #1
 8009b50:	d103      	bne.n	8009b5a <_raise_r+0x42>
 8009b52:	2316      	movs	r3, #22
 8009b54:	6003      	str	r3, [r0, #0]
 8009b56:	2001      	movs	r0, #1
 8009b58:	e7e7      	b.n	8009b2a <_raise_r+0x12>
 8009b5a:	2400      	movs	r4, #0
 8009b5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b60:	4628      	mov	r0, r5
 8009b62:	4798      	blx	r3
 8009b64:	2000      	movs	r0, #0
 8009b66:	e7e0      	b.n	8009b2a <_raise_r+0x12>

08009b68 <raise>:
 8009b68:	4b02      	ldr	r3, [pc, #8]	; (8009b74 <raise+0xc>)
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	f7ff bfd3 	b.w	8009b18 <_raise_r>
 8009b72:	bf00      	nop
 8009b74:	2000000c 	.word	0x2000000c

08009b78 <_kill_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4d07      	ldr	r5, [pc, #28]	; (8009b98 <_kill_r+0x20>)
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4604      	mov	r4, r0
 8009b80:	4608      	mov	r0, r1
 8009b82:	4611      	mov	r1, r2
 8009b84:	602b      	str	r3, [r5, #0]
 8009b86:	f7f8 fbbf 	bl	8002308 <_kill>
 8009b8a:	1c43      	adds	r3, r0, #1
 8009b8c:	d102      	bne.n	8009b94 <_kill_r+0x1c>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	b103      	cbz	r3, 8009b94 <_kill_r+0x1c>
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	bd38      	pop	{r3, r4, r5, pc}
 8009b96:	bf00      	nop
 8009b98:	2000043c 	.word	0x2000043c

08009b9c <_getpid_r>:
 8009b9c:	f7f8 bbac 	b.w	80022f8 <_getpid>

08009ba0 <__sread>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba8:	f000 f894 	bl	8009cd4 <_read_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	bfab      	itete	ge
 8009bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8009bb4:	181b      	addge	r3, r3, r0
 8009bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bba:	bfac      	ite	ge
 8009bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bbe:	81a3      	strhlt	r3, [r4, #12]
 8009bc0:	bd10      	pop	{r4, pc}

08009bc2 <__swrite>:
 8009bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	898b      	ldrh	r3, [r1, #12]
 8009bca:	05db      	lsls	r3, r3, #23
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	4616      	mov	r6, r2
 8009bd2:	d505      	bpl.n	8009be0 <__swrite+0x1e>
 8009bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd8:	2302      	movs	r3, #2
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f000 f868 	bl	8009cb0 <_lseek_r>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	4632      	mov	r2, r6
 8009bee:	463b      	mov	r3, r7
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf6:	f000 b817 	b.w	8009c28 <_write_r>

08009bfa <__sseek>:
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c02:	f000 f855 	bl	8009cb0 <_lseek_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	bf15      	itete	ne
 8009c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c16:	81a3      	strheq	r3, [r4, #12]
 8009c18:	bf18      	it	ne
 8009c1a:	81a3      	strhne	r3, [r4, #12]
 8009c1c:	bd10      	pop	{r4, pc}

08009c1e <__sclose>:
 8009c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c22:	f000 b813 	b.w	8009c4c <_close_r>
	...

08009c28 <_write_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d07      	ldr	r5, [pc, #28]	; (8009c48 <_write_r+0x20>)
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	4608      	mov	r0, r1
 8009c30:	4611      	mov	r1, r2
 8009c32:	2200      	movs	r2, #0
 8009c34:	602a      	str	r2, [r5, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	f7f8 fb9d 	bl	8002376 <_write>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	d102      	bne.n	8009c46 <_write_r+0x1e>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	b103      	cbz	r3, 8009c46 <_write_r+0x1e>
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
 8009c48:	2000043c 	.word	0x2000043c

08009c4c <_close_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4d06      	ldr	r5, [pc, #24]	; (8009c68 <_close_r+0x1c>)
 8009c50:	2300      	movs	r3, #0
 8009c52:	4604      	mov	r4, r0
 8009c54:	4608      	mov	r0, r1
 8009c56:	602b      	str	r3, [r5, #0]
 8009c58:	f7f8 fba9 	bl	80023ae <_close>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_close_r+0x1a>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_close_r+0x1a>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	2000043c 	.word	0x2000043c

08009c6c <_fstat_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4d07      	ldr	r5, [pc, #28]	; (8009c8c <_fstat_r+0x20>)
 8009c70:	2300      	movs	r3, #0
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	4611      	mov	r1, r2
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	f7f8 fba4 	bl	80023c6 <_fstat>
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d102      	bne.n	8009c88 <_fstat_r+0x1c>
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	b103      	cbz	r3, 8009c88 <_fstat_r+0x1c>
 8009c86:	6023      	str	r3, [r4, #0]
 8009c88:	bd38      	pop	{r3, r4, r5, pc}
 8009c8a:	bf00      	nop
 8009c8c:	2000043c 	.word	0x2000043c

08009c90 <_isatty_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4d06      	ldr	r5, [pc, #24]	; (8009cac <_isatty_r+0x1c>)
 8009c94:	2300      	movs	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	4608      	mov	r0, r1
 8009c9a:	602b      	str	r3, [r5, #0]
 8009c9c:	f7f8 fba3 	bl	80023e6 <_isatty>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_isatty_r+0x1a>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_isatty_r+0x1a>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	2000043c 	.word	0x2000043c

08009cb0 <_lseek_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4d07      	ldr	r5, [pc, #28]	; (8009cd0 <_lseek_r+0x20>)
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	4611      	mov	r1, r2
 8009cba:	2200      	movs	r2, #0
 8009cbc:	602a      	str	r2, [r5, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f7f8 fb9c 	bl	80023fc <_lseek>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	d102      	bne.n	8009cce <_lseek_r+0x1e>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	b103      	cbz	r3, 8009cce <_lseek_r+0x1e>
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	2000043c 	.word	0x2000043c

08009cd4 <_read_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4d07      	ldr	r5, [pc, #28]	; (8009cf4 <_read_r+0x20>)
 8009cd8:	4604      	mov	r4, r0
 8009cda:	4608      	mov	r0, r1
 8009cdc:	4611      	mov	r1, r2
 8009cde:	2200      	movs	r2, #0
 8009ce0:	602a      	str	r2, [r5, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f7f8 fb2a 	bl	800233c <_read>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_read_r+0x1e>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_read_r+0x1e>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	2000043c 	.word	0x2000043c

08009cf8 <_init>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr

08009d04 <_fini>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr
