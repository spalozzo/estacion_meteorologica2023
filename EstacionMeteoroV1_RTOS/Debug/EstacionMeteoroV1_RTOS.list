
EstacionMeteoroV1_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016de4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de4  08016f88  08016f88  00026f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d6c  08017d6c  000302f4  2**0
                  CONTENTS
  4 .ARM          00000008  08017d6c  08017d6c  00027d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017d74  08017d74  000302f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017d74  08017d74  00027d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017d78  08017d78  00027d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  08017d7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057f8  200002f4  08018070  000302f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005aec  08018070  00035aec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d44c  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000069e1  00000000  00000000  0005d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002488  00000000  00000000  00064158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021b0  00000000  00000000  000665e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f96  00000000  00000000  00068790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000339a3  00000000  00000000  0008b726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2458  00000000  00000000  000bf0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9d0  00000000  00000000  00171574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f4 	.word	0x200002f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016f6c 	.word	0x08016f6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f8 	.word	0x200002f8
 80001dc:	08016f6c 	.word	0x08016f6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Mostrar_Temperatura>:
//----------------------------------------------------------------------//
//---------- Funciones -------------------------------------------------//
//----------------------------------------------------------------------//

void Mostrar_Temperatura()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	float Temperatura = MedicionesEstacion.Temperature;
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <Mostrar_Temperatura+0xc0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <Mostrar_Temperatura+0xc4>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001012:	da08      	bge.n	8001026 <Mostrar_Temperatura+0x2a>
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <Mostrar_Temperatura+0xc8>)
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101a:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800101e:	da02      	bge.n	8001026 <Mostrar_Temperatura+0x2a>
	{
		Cambio_Pantalla = 1;
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <Mostrar_Temperatura+0xcc>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
	}

	if(!Cambio_Pantalla && iD <= 140 && jD <= 140)
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <Mostrar_Temperatura+0xcc>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d142      	bne.n	80010b4 <Mostrar_Temperatura+0xb8>
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <Mostrar_Temperatura+0xd0>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	2b8c      	cmp	r3, #140	; 0x8c
 8001036:	dc3d      	bgt.n	80010b4 <Mostrar_Temperatura+0xb8>
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <Mostrar_Temperatura+0xd4>)
 800103a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103e:	2b8c      	cmp	r3, #140	; 0x8c
 8001040:	dc38      	bgt.n	80010b4 <Mostrar_Temperatura+0xb8>
	{
		ssd1306_SetCursor(i - 3, 20);
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <Mostrar_Temperatura+0xc4>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	b29b      	uxth	r3, r3
 800104a:	3b03      	subs	r3, #3
 800104c:	b29b      	uxth	r3, r3
 800104e:	b21b      	sxth	r3, r3
 8001050:	2114      	movs	r1, #20
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fe3a 	bl	8001ccc <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Temp.", Font_7x10, White);
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <Mostrar_Temperatura+0xd8>)
 800105a:	2301      	movs	r3, #1
 800105c:	ca06      	ldmia	r2, {r1, r2}
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <Mostrar_Temperatura+0xdc>)
 8001060:	f000 fe0e 	bl	8001c80 <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 10, 35);
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <Mostrar_Temperatura+0xc8>)
 8001066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106a:	b29b      	uxth	r3, r3
 800106c:	3b0a      	subs	r3, #10
 800106e:	b29b      	uxth	r3, r3
 8001070:	b21b      	sxth	r3, r3
 8001072:	2123      	movs	r1, #35	; 0x23
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fe29 	bl	8001ccc <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Temperatura);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fa6c 	bl	8000558 <__aeabi_f2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4915      	ldr	r1, [pc, #84]	; (80010dc <Mostrar_Temperatura+0xe0>)
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <Mostrar_Temperatura+0xe4>)
 8001088:	f013 fe6a 	bl	8014d60 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <Mostrar_Temperatura+0xd8>)
 800108e:	2301      	movs	r3, #1
 8001090:	ca06      	ldmia	r2, {r1, r2}
 8001092:	4813      	ldr	r0, [pc, #76]	; (80010e0 <Mostrar_Temperatura+0xe4>)
 8001094:	f000 fdf4 	bl	8001c80 <ssd1306_WriteString>

		ssd1306_WriteChar(32, Font_7x10, White);
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <Mostrar_Temperatura+0xd8>)
 800109a:	2301      	movs	r3, #1
 800109c:	ca06      	ldmia	r2, {r1, r2}
 800109e:	2020      	movs	r0, #32
 80010a0:	f000 fd6e 	bl	8001b80 <ssd1306_WriteChar>

		Grados();
 80010a4:	f000 ffe2 	bl	800206c <Grados>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("C", Font_7x10, White);
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <Mostrar_Temperatura+0xd8>)
 80010aa:	2301      	movs	r3, #1
 80010ac:	ca06      	ldmia	r2, {r1, r2}
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <Mostrar_Temperatura+0xe8>)
 80010b0:	f000 fde6 	bl	8001c80 <ssd1306_WriteString>
		#endif
	}
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000129c 	.word	0x2000129c
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000002 	.word	0x20000002
 80010c8:	20000311 	.word	0x20000311
 80010cc:	20000004 	.word	0x20000004
 80010d0:	20000006 	.word	0x20000006
 80010d4:	20000008 	.word	0x20000008
 80010d8:	08016f88 	.word	0x08016f88
 80010dc:	08016f90 	.word	0x08016f90
 80010e0:	20000318 	.word	0x20000318
 80010e4:	08016f98 	.word	0x08016f98

080010e8 <Mostrar_Humedad>:

void Mostrar_Humedad()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	//Humedad = 35.456;

	Humedad = MedicionesEstacion.Humidity;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <Mostrar_Humedad+0x78>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <Mostrar_Humedad+0x7c>)
 80010f2:	6013      	str	r3, [r2, #0]

	if(!Cambio_Pantalla)
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <Mostrar_Humedad+0x80>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d12e      	bne.n	800115a <Mostrar_Humedad+0x72>
	{
		ssd1306_SetCursor(iD, 20);
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <Mostrar_Humedad+0x84>)
 80010fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001102:	2114      	movs	r1, #20
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fde1 	bl	8001ccc <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Hum.", Font_7x10, White);
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <Mostrar_Humedad+0x88>)
 800110c:	2301      	movs	r3, #1
 800110e:	ca06      	ldmia	r2, {r1, r2}
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <Mostrar_Humedad+0x8c>)
 8001112:	f000 fdb5 	bl	8001c80 <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD - 3, 35);
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <Mostrar_Humedad+0x90>)
 8001118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111c:	b29b      	uxth	r3, r3
 800111e:	3b03      	subs	r3, #3
 8001120:	b29b      	uxth	r3, r3
 8001122:	b21b      	sxth	r3, r3
 8001124:	2123      	movs	r1, #35	; 0x23
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fdd0 	bl	8001ccc <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Humedad);
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <Mostrar_Humedad+0x7c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa11 	bl	8000558 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4910      	ldr	r1, [pc, #64]	; (800117c <Mostrar_Humedad+0x94>)
 800113c:	4810      	ldr	r0, [pc, #64]	; (8001180 <Mostrar_Humedad+0x98>)
 800113e:	f013 fe0f 	bl	8014d60 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <Mostrar_Humedad+0x88>)
 8001144:	2301      	movs	r3, #1
 8001146:	ca06      	ldmia	r2, {r1, r2}
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <Mostrar_Humedad+0x98>)
 800114a:	f000 fd99 	bl	8001c80 <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" %", Font_7x10, White);
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <Mostrar_Humedad+0x88>)
 8001150:	2301      	movs	r3, #1
 8001152:	ca06      	ldmia	r2, {r1, r2}
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <Mostrar_Humedad+0x9c>)
 8001156:	f000 fd93 	bl	8001c80 <ssd1306_WriteString>
		#endif
	}
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000129c 	.word	0x2000129c
 8001164:	20000314 	.word	0x20000314
 8001168:	20000311 	.word	0x20000311
 800116c:	20000004 	.word	0x20000004
 8001170:	20000008 	.word	0x20000008
 8001174:	08016f9c 	.word	0x08016f9c
 8001178:	20000006 	.word	0x20000006
 800117c:	08016f90 	.word	0x08016f90
 8001180:	20000318 	.word	0x20000318
 8001184:	08016fa4 	.word	0x08016fa4

08001188 <Mostrar_Presion>:

uint16_t read;

void Mostrar_Presion()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	float Presion = MedicionesEstacion.Pressure;
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <Mostrar_Presion+0x9c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <Mostrar_Presion+0xa0>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800119e:	da08      	bge.n	80011b2 <Mostrar_Presion+0x2a>
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <Mostrar_Presion+0xa4>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80011aa:	da02      	bge.n	80011b2 <Mostrar_Presion+0x2a>
	{
		Cambio_Pantalla = 2;
 80011ac:	4b20      	ldr	r3, [pc, #128]	; (8001230 <Mostrar_Presion+0xa8>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	701a      	strb	r2, [r3, #0]
	}

	if(Cambio_Pantalla == 1)
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <Mostrar_Presion+0xa8>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d130      	bne.n	800121c <Mostrar_Presion+0x94>
	{
		ssd1306_SetCursor(i + 2, 20);
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <Mostrar_Presion+0xa0>)
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3302      	adds	r3, #2
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	2114      	movs	r1, #20
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fd7e 	bl	8001ccc <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Pres.", Font_7x10, White);
 80011d0:	4a18      	ldr	r2, [pc, #96]	; (8001234 <Mostrar_Presion+0xac>)
 80011d2:	2301      	movs	r3, #1
 80011d4:	ca06      	ldmia	r2, {r1, r2}
 80011d6:	4818      	ldr	r0, [pc, #96]	; (8001238 <Mostrar_Presion+0xb0>)
 80011d8:	f000 fd52 	bl	8001c80 <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 9, 35);
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <Mostrar_Presion+0xa4>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3b09      	subs	r3, #9
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	2123      	movs	r1, #35	; 0x23
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fd6d 	bl	8001ccc <ssd1306_SetCursor>

		//Char_Display(Presion, 1);

		sprintf(Humedad_str, "%.1f", Presion);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff f9b0 	bl	8000558 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	490f      	ldr	r1, [pc, #60]	; (800123c <Mostrar_Presion+0xb4>)
 80011fe:	4810      	ldr	r0, [pc, #64]	; (8001240 <Mostrar_Presion+0xb8>)
 8001200:	f013 fdae 	bl	8014d60 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 8001204:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <Mostrar_Presion+0xac>)
 8001206:	2301      	movs	r3, #1
 8001208:	ca06      	ldmia	r2, {r1, r2}
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <Mostrar_Presion+0xb8>)
 800120c:	f000 fd38 	bl	8001c80 <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" hPa", Font_7x10, White);
 8001210:	4a08      	ldr	r2, [pc, #32]	; (8001234 <Mostrar_Presion+0xac>)
 8001212:	2301      	movs	r3, #1
 8001214:	ca06      	ldmia	r2, {r1, r2}
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <Mostrar_Presion+0xbc>)
 8001218:	f000 fd32 	bl	8001c80 <ssd1306_WriteString>
		#endif
	}
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000129c 	.word	0x2000129c
 8001228:	20000000 	.word	0x20000000
 800122c:	20000002 	.word	0x20000002
 8001230:	20000311 	.word	0x20000311
 8001234:	20000008 	.word	0x20000008
 8001238:	08016fa8 	.word	0x08016fa8
 800123c:	08016f90 	.word	0x08016f90
 8001240:	20000318 	.word	0x20000318
 8001244:	08016fb0 	.word	0x08016fb0

08001248 <Mostrar_Lux>:

void Mostrar_Lux()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	float Lux = MedicionesEstacion.Light;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <Mostrar_Lux+0x80>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	607b      	str	r3, [r7, #4]

	if(Cambio_Pantalla == 1)
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <Mostrar_Lux+0x84>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d130      	bne.n	80012be <Mostrar_Lux+0x76>
	{
		ssd1306_SetCursor(iD + 2, 20);
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <Mostrar_Lux+0x88>)
 800125e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001262:	b29b      	uxth	r3, r3
 8001264:	3302      	adds	r3, #2
 8001266:	b29b      	uxth	r3, r3
 8001268:	b21b      	sxth	r3, r3
 800126a:	2114      	movs	r1, #20
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fd2d 	bl	8001ccc <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Luz", Font_7x10, White);
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <Mostrar_Lux+0x8c>)
 8001274:	2301      	movs	r3, #1
 8001276:	ca06      	ldmia	r2, {r1, r2}
 8001278:	4817      	ldr	r0, [pc, #92]	; (80012d8 <Mostrar_Lux+0x90>)
 800127a:	f000 fd01 	bl	8001c80 <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD - 4, 35);
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <Mostrar_Lux+0x94>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b04      	subs	r3, #4
 8001288:	b29b      	uxth	r3, r3
 800128a:	b21b      	sxth	r3, r3
 800128c:	2123      	movs	r1, #35	; 0x23
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fd1c 	bl	8001ccc <ssd1306_SetCursor>

		//Char_Display(Lux, 1);

		sprintf(Humedad_str, "%.1f", Lux);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff f95f 	bl	8000558 <__aeabi_f2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4910      	ldr	r1, [pc, #64]	; (80012e0 <Mostrar_Lux+0x98>)
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <Mostrar_Lux+0x9c>)
 80012a2:	f013 fd5d 	bl	8014d60 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <Mostrar_Lux+0x8c>)
 80012a8:	2301      	movs	r3, #1
 80012aa:	ca06      	ldmia	r2, {r1, r2}
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <Mostrar_Lux+0x9c>)
 80012ae:	f000 fce7 	bl	8001c80 <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" Lx", Font_7x10, White);
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <Mostrar_Lux+0x8c>)
 80012b4:	2301      	movs	r3, #1
 80012b6:	ca06      	ldmia	r2, {r1, r2}
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <Mostrar_Lux+0xa0>)
 80012ba:	f000 fce1 	bl	8001c80 <ssd1306_WriteString>
		#endif
	}
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000129c 	.word	0x2000129c
 80012cc:	20000311 	.word	0x20000311
 80012d0:	20000004 	.word	0x20000004
 80012d4:	20000008 	.word	0x20000008
 80012d8:	08016fb8 	.word	0x08016fb8
 80012dc:	20000006 	.word	0x20000006
 80012e0:	08016f90 	.word	0x08016f90
 80012e4:	20000318 	.word	0x20000318
 80012e8:	08016fbc 	.word	0x08016fbc

080012ec <Mostrar_Velocidad>:

void Mostrar_Velocidad()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
	float Velocidad = MedicionesEstacion.WindSpeed;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <Mostrar_Velocidad+0x9c>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <Mostrar_Velocidad+0xa0>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001302:	da08      	bge.n	8001316 <Mostrar_Velocidad+0x2a>
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <Mostrar_Velocidad+0xa4>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800130e:	da02      	bge.n	8001316 <Mostrar_Velocidad+0x2a>
	{
		Cambio_Pantalla = 0;
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <Mostrar_Velocidad+0xa8>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
	}

	if(Cambio_Pantalla == 2)
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <Mostrar_Velocidad+0xa8>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <Mostrar_Velocidad+0x94>
	{
		ssd1306_SetCursor(i - 5, 20);
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <Mostrar_Velocidad+0xa0>)
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	b29b      	uxth	r3, r3
 8001326:	3b05      	subs	r3, #5
 8001328:	b29b      	uxth	r3, r3
 800132a:	b21b      	sxth	r3, r3
 800132c:	2114      	movs	r1, #20
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fccc 	bl	8001ccc <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Viento", Font_7x10, White);
 8001334:	4a18      	ldr	r2, [pc, #96]	; (8001398 <Mostrar_Velocidad+0xac>)
 8001336:	2301      	movs	r3, #1
 8001338:	ca06      	ldmia	r2, {r1, r2}
 800133a:	4818      	ldr	r0, [pc, #96]	; (800139c <Mostrar_Velocidad+0xb0>)
 800133c:	f000 fca0 	bl	8001c80 <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 11, 35);
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <Mostrar_Velocidad+0xa4>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	b29b      	uxth	r3, r3
 8001348:	3b0b      	subs	r3, #11
 800134a:	b29b      	uxth	r3, r3
 800134c:	b21b      	sxth	r3, r3
 800134e:	2123      	movs	r1, #35	; 0x23
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fcbb 	bl	8001ccc <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Velocidad);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f8fe 	bl	8000558 <__aeabi_f2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	490f      	ldr	r1, [pc, #60]	; (80013a0 <Mostrar_Velocidad+0xb4>)
 8001362:	4810      	ldr	r0, [pc, #64]	; (80013a4 <Mostrar_Velocidad+0xb8>)
 8001364:	f013 fcfc 	bl	8014d60 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <Mostrar_Velocidad+0xac>)
 800136a:	2301      	movs	r3, #1
 800136c:	ca06      	ldmia	r2, {r1, r2}
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <Mostrar_Velocidad+0xb8>)
 8001370:	f000 fc86 	bl	8001c80 <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" km/h", Font_7x10, White);
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <Mostrar_Velocidad+0xac>)
 8001376:	2301      	movs	r3, #1
 8001378:	ca06      	ldmia	r2, {r1, r2}
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <Mostrar_Velocidad+0xbc>)
 800137c:	f000 fc80 	bl	8001c80 <ssd1306_WriteString>
		#endif
	}
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000129c 	.word	0x2000129c
 800138c:	20000000 	.word	0x20000000
 8001390:	20000002 	.word	0x20000002
 8001394:	20000311 	.word	0x20000311
 8001398:	20000008 	.word	0x20000008
 800139c:	08016fc0 	.word	0x08016fc0
 80013a0:	08016f90 	.word	0x08016f90
 80013a4:	20000318 	.word	0x20000318
 80013a8:	08016fc8 	.word	0x08016fc8

080013ac <Mostrar_Calidad_Aire>:

void Mostrar_Calidad_Aire()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	float Calidad = MedicionesEstacion.AirQuality;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <Mostrar_Calidad_Aire+0x80>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013be:	edc7 7a01 	vstr	s15, [r7, #4]

	if(Cambio_Pantalla == 2)
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <Mostrar_Calidad_Aire+0x84>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d12c      	bne.n	8001424 <Mostrar_Calidad_Aire+0x78>
	{
		ssd1306_SetCursor(iD + 3, 20);
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <Mostrar_Calidad_Aire+0x88>)
 80013cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3303      	adds	r3, #3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	2114      	movs	r1, #20
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fc76 	bl	8001ccc <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Aire", Font_7x10, White);
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <Mostrar_Calidad_Aire+0x8c>)
 80013e2:	2301      	movs	r3, #1
 80013e4:	ca06      	ldmia	r2, {r1, r2}
 80013e6:	4815      	ldr	r0, [pc, #84]	; (800143c <Mostrar_Calidad_Aire+0x90>)
 80013e8:	f000 fc4a 	bl	8001c80 <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD, 35);
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <Mostrar_Calidad_Aire+0x94>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	2123      	movs	r1, #35	; 0x23
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fc69 	bl	8001ccc <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Calidad);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff f8ac 	bl	8000558 <__aeabi_f2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	490f      	ldr	r1, [pc, #60]	; (8001444 <Mostrar_Calidad_Aire+0x98>)
 8001406:	4810      	ldr	r0, [pc, #64]	; (8001448 <Mostrar_Calidad_Aire+0x9c>)
 8001408:	f013 fcaa 	bl	8014d60 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <Mostrar_Calidad_Aire+0x8c>)
 800140e:	2301      	movs	r3, #1
 8001410:	ca06      	ldmia	r2, {r1, r2}
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <Mostrar_Calidad_Aire+0x9c>)
 8001414:	f000 fc34 	bl	8001c80 <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" %", Font_7x10, White);
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <Mostrar_Calidad_Aire+0x8c>)
 800141a:	2301      	movs	r3, #1
 800141c:	ca06      	ldmia	r2, {r1, r2}
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <Mostrar_Calidad_Aire+0xa0>)
 8001420:	f000 fc2e 	bl	8001c80 <ssd1306_WriteString>
		#endif
	}
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000129c 	.word	0x2000129c
 8001430:	20000311 	.word	0x20000311
 8001434:	20000004 	.word	0x20000004
 8001438:	20000008 	.word	0x20000008
 800143c:	08016fd0 	.word	0x08016fd0
 8001440:	20000006 	.word	0x20000006
 8001444:	08016f90 	.word	0x08016f90
 8001448:	20000318 	.word	0x20000318
 800144c:	08016fa4 	.word	0x08016fa4

08001450 <Mostrar_Tiempo>:

void Mostrar_Tiempo(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	482d      	ldr	r0, [pc, #180]	; (8001514 <Mostrar_Tiempo+0xc4>)
 800145e:	f00a f9b7 	bl	800b7d0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	482a      	ldr	r0, [pc, #168]	; (8001514 <Mostrar_Tiempo+0xc4>)
 800146c:	f00a fa92 	bl	800b994 <HAL_RTC_GetDate>

	ssd1306_SetCursor(35, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	2023      	movs	r0, #35	; 0x23
 8001474:	f000 fc2a 	bl	8001ccc <ssd1306_SetCursor>

	Char_Display(19+gTime.Hours, 0);
 8001478:	783b      	ldrb	r3, [r7, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	3313      	adds	r3, #19
 800147e:	b29b      	uxth	r3, r3
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f84e 	bl	8001524 <Char_Display>
	ssd1306_WriteString(":", Font_7x10, White);
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <Mostrar_Tiempo+0xc8>)
 800148a:	2301      	movs	r3, #1
 800148c:	ca06      	ldmia	r2, {r1, r2}
 800148e:	4823      	ldr	r0, [pc, #140]	; (800151c <Mostrar_Tiempo+0xcc>)
 8001490:	f000 fbf6 	bl	8001c80 <ssd1306_WriteString>
	Char_Display(16+gTime.Minutes, 1);
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	b29b      	uxth	r3, r3
 8001498:	3310      	adds	r3, #16
 800149a:	b29b      	uxth	r3, r3
 800149c:	2101      	movs	r1, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f840 	bl	8001524 <Char_Display>
	ssd1306_WriteString(":", Font_7x10, White);
 80014a4:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <Mostrar_Tiempo+0xc8>)
 80014a6:	2301      	movs	r3, #1
 80014a8:	ca06      	ldmia	r2, {r1, r2}
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <Mostrar_Tiempo+0xcc>)
 80014ac:	f000 fbe8 	bl	8001c80 <ssd1306_WriteString>
	Char_Display(gTime.Seconds, 1);
 80014b0:	78bb      	ldrb	r3, [r7, #2]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2101      	movs	r1, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f834 	bl	8001524 <Char_Display>

	ssd1306_SetCursor(28, 54);
 80014bc:	2136      	movs	r1, #54	; 0x36
 80014be:	201c      	movs	r0, #28
 80014c0:	f000 fc04 	bl	8001ccc <ssd1306_SetCursor>

	Char_Display(2024+gDate.Year, 0);
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f827 	bl	8001524 <Char_Display>
	ssd1306_WriteString("/", Font_7x10, White);
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <Mostrar_Tiempo+0xc8>)
 80014d8:	2301      	movs	r3, #1
 80014da:	ca06      	ldmia	r2, {r1, r2}
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <Mostrar_Tiempo+0xd0>)
 80014de:	f000 fbcf 	bl	8001c80 <ssd1306_WriteString>
	Char_Display(0+gDate.Month, 1);
 80014e2:	7d7b      	ldrb	r3, [r7, #21]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	2101      	movs	r1, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f81b 	bl	8001524 <Char_Display>
	ssd1306_WriteString("/", Font_7x10, White);
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <Mostrar_Tiempo+0xc8>)
 80014f0:	2301      	movs	r3, #1
 80014f2:	ca06      	ldmia	r2, {r1, r2}
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <Mostrar_Tiempo+0xd0>)
 80014f6:	f000 fbc3 	bl	8001c80 <ssd1306_WriteString>
	Char_Display(25+gDate.Date, 1);
 80014fa:	7dbb      	ldrb	r3, [r7, #22]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3319      	adds	r3, #25
 8001500:	b29b      	uxth	r3, r3
 8001502:	2101      	movs	r1, #1
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f80d 	bl	8001524 <Char_Display>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000d0c 	.word	0x20000d0c
 8001518:	20000008 	.word	0x20000008
 800151c:	08016fd8 	.word	0x08016fd8
 8001520:	08016fdc 	.word	0x08016fdc

08001524 <Char_Display>:

void Char_Display(uint16_t dato, uint8_t Cero)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	460a      	mov	r2, r1
 800152e:	80fb      	strh	r3, [r7, #6]
 8001530:	4613      	mov	r3, r2
 8001532:	717b      	strb	r3, [r7, #5]
	uint8_t aux1 = 0, aux2 = 0, aux3 = 0, aux4 = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	2300      	movs	r3, #0
 800153a:	73bb      	strb	r3, [r7, #14]
 800153c:	2300      	movs	r3, #0
 800153e:	737b      	strb	r3, [r7, #13]
 8001540:	2300      	movs	r3, #0
 8001542:	733b      	strb	r3, [r7, #12]

	#ifdef SSD1306_INCLUDE_FONT_7x10

	if(dato >= 0 && dato < 10)
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	2b09      	cmp	r3, #9
 8001548:	d812      	bhi.n	8001570 <Char_Display+0x4c>
	{
		if (Cero)
 800154a:	797b      	ldrb	r3, [r7, #5]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <Char_Display+0x38>
			ssd1306_WriteChar(48, Font_7x10, White);
 8001550:	4a70      	ldr	r2, [pc, #448]	; (8001714 <Char_Display+0x1f0>)
 8001552:	2301      	movs	r3, #1
 8001554:	ca06      	ldmia	r2, {r1, r2}
 8001556:	2030      	movs	r0, #48	; 0x30
 8001558:	f000 fb12 	bl	8001b80 <ssd1306_WriteChar>
		ssd1306_WriteChar(dato + 48, Font_7x10, White);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3330      	adds	r3, #48	; 0x30
 8001562:	b2d8      	uxtb	r0, r3
 8001564:	4a6b      	ldr	r2, [pc, #428]	; (8001714 <Char_Display+0x1f0>)
 8001566:	2301      	movs	r3, #1
 8001568:	ca06      	ldmia	r2, {r1, r2}
 800156a:	f000 fb09 	bl	8001b80 <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
	}

	#endif
}
 800156e:	e0cc      	b.n	800170a <Char_Display+0x1e6>
	else if(dato >= 10 && dato < 100)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	2b09      	cmp	r3, #9
 8001574:	d926      	bls.n	80015c4 <Char_Display+0xa0>
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	2b63      	cmp	r3, #99	; 0x63
 800157a:	d823      	bhi.n	80015c4 <Char_Display+0xa0>
		aux1 = dato / 10;
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	4a66      	ldr	r2, [pc, #408]	; (8001718 <Char_Display+0x1f4>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	08db      	lsrs	r3, r3, #3
 8001586:	b29b      	uxth	r3, r3
 8001588:	73fb      	strb	r3, [r7, #15]
		dato %= 10;
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	4b62      	ldr	r3, [pc, #392]	; (8001718 <Char_Display+0x1f4>)
 800158e:	fba3 1302 	umull	r1, r3, r3, r2
 8001592:	08d9      	lsrs	r1, r3, #3
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	80fb      	strh	r3, [r7, #6]
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	3330      	adds	r3, #48	; 0x30
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	4a5b      	ldr	r2, [pc, #364]	; (8001714 <Char_Display+0x1f0>)
 80015a8:	2301      	movs	r3, #1
 80015aa:	ca06      	ldmia	r2, {r1, r2}
 80015ac:	f000 fae8 	bl	8001b80 <ssd1306_WriteChar>
		ssd1306_WriteChar(dato + 48, Font_7x10, White);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3330      	adds	r3, #48	; 0x30
 80015b6:	b2d8      	uxtb	r0, r3
 80015b8:	4a56      	ldr	r2, [pc, #344]	; (8001714 <Char_Display+0x1f0>)
 80015ba:	2301      	movs	r3, #1
 80015bc:	ca06      	ldmia	r2, {r1, r2}
 80015be:	f000 fadf 	bl	8001b80 <ssd1306_WriteChar>
 80015c2:	e0a2      	b.n	800170a <Char_Display+0x1e6>
	else if(dato >= 100 && dato < 1000)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2b63      	cmp	r3, #99	; 0x63
 80015c8:	d940      	bls.n	800164c <Char_Display+0x128>
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d0:	d23c      	bcs.n	800164c <Char_Display+0x128>
		aux1 = dato % 10;
 80015d2:	88fa      	ldrh	r2, [r7, #6]
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <Char_Display+0x1f4>)
 80015d6:	fba3 1302 	umull	r1, r3, r3, r2
 80015da:	08d9      	lsrs	r1, r3, #3
 80015dc:	460b      	mov	r3, r1
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	73fb      	strb	r3, [r7, #15]
		aux2 = dato / 10;
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	4a4a      	ldr	r2, [pc, #296]	; (8001718 <Char_Display+0x1f4>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	73bb      	strb	r3, [r7, #14]
		aux3 = aux2 / 10;
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
 80015fa:	4a47      	ldr	r2, [pc, #284]	; (8001718 <Char_Display+0x1f4>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	737b      	strb	r3, [r7, #13]
		aux2 %= 10;
 8001604:	7bba      	ldrb	r2, [r7, #14]
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <Char_Display+0x1f4>)
 8001608:	fba3 1302 	umull	r1, r3, r3, r2
 800160c:	08d9      	lsrs	r1, r3, #3
 800160e:	460b      	mov	r3, r1
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	73bb      	strb	r3, [r7, #14]
		ssd1306_WriteChar(aux3 + 48, Font_7x10, White);
 800161a:	7b7b      	ldrb	r3, [r7, #13]
 800161c:	3330      	adds	r3, #48	; 0x30
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	4a3c      	ldr	r2, [pc, #240]	; (8001714 <Char_Display+0x1f0>)
 8001622:	2301      	movs	r3, #1
 8001624:	ca06      	ldmia	r2, {r1, r2}
 8001626:	f000 faab 	bl	8001b80 <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	3330      	adds	r3, #48	; 0x30
 800162e:	b2d8      	uxtb	r0, r3
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <Char_Display+0x1f0>)
 8001632:	2301      	movs	r3, #1
 8001634:	ca06      	ldmia	r2, {r1, r2}
 8001636:	f000 faa3 	bl	8001b80 <ssd1306_WriteChar>
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	3330      	adds	r3, #48	; 0x30
 800163e:	b2d8      	uxtb	r0, r3
 8001640:	4a34      	ldr	r2, [pc, #208]	; (8001714 <Char_Display+0x1f0>)
 8001642:	2301      	movs	r3, #1
 8001644:	ca06      	ldmia	r2, {r1, r2}
 8001646:	f000 fa9b 	bl	8001b80 <ssd1306_WriteChar>
 800164a:	e05e      	b.n	800170a <Char_Display+0x1e6>
	else if(dato >= 1000 && dato < 10000)
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001652:	d35a      	bcc.n	800170a <Char_Display+0x1e6>
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	f242 720f 	movw	r2, #9999	; 0x270f
 800165a:	4293      	cmp	r3, r2
 800165c:	d855      	bhi.n	800170a <Char_Display+0x1e6>
		aux1 = dato % 10;
 800165e:	88fa      	ldrh	r2, [r7, #6]
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <Char_Display+0x1f4>)
 8001662:	fba3 1302 	umull	r1, r3, r3, r2
 8001666:	08d9      	lsrs	r1, r3, #3
 8001668:	460b      	mov	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	73fb      	strb	r3, [r7, #15]
		aux2 = dato / 10;
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <Char_Display+0x1f4>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	08db      	lsrs	r3, r3, #3
 8001680:	b29b      	uxth	r3, r3
 8001682:	73bb      	strb	r3, [r7, #14]
		aux3 = aux2 / 10;
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	4a24      	ldr	r2, [pc, #144]	; (8001718 <Char_Display+0x1f4>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	737b      	strb	r3, [r7, #13]
		aux2 %= 10;
 8001690:	7bba      	ldrb	r2, [r7, #14]
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <Char_Display+0x1f4>)
 8001694:	fba3 1302 	umull	r1, r3, r3, r2
 8001698:	08d9      	lsrs	r1, r3, #3
 800169a:	460b      	mov	r3, r1
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	73bb      	strb	r3, [r7, #14]
		aux4 = aux3 / 10;
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <Char_Display+0x1f4>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	08db      	lsrs	r3, r3, #3
 80016b0:	733b      	strb	r3, [r7, #12]
		aux3 %= 10;
 80016b2:	7b7a      	ldrb	r2, [r7, #13]
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <Char_Display+0x1f4>)
 80016b6:	fba3 1302 	umull	r1, r3, r3, r2
 80016ba:	08d9      	lsrs	r1, r3, #3
 80016bc:	460b      	mov	r3, r1
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	737b      	strb	r3, [r7, #13]
		ssd1306_WriteChar(aux4 + 48, Font_7x10, White);
 80016c8:	7b3b      	ldrb	r3, [r7, #12]
 80016ca:	3330      	adds	r3, #48	; 0x30
 80016cc:	b2d8      	uxtb	r0, r3
 80016ce:	4a11      	ldr	r2, [pc, #68]	; (8001714 <Char_Display+0x1f0>)
 80016d0:	2301      	movs	r3, #1
 80016d2:	ca06      	ldmia	r2, {r1, r2}
 80016d4:	f000 fa54 	bl	8001b80 <ssd1306_WriteChar>
		ssd1306_WriteChar(aux3 + 48, Font_7x10, White);
 80016d8:	7b7b      	ldrb	r3, [r7, #13]
 80016da:	3330      	adds	r3, #48	; 0x30
 80016dc:	b2d8      	uxtb	r0, r3
 80016de:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <Char_Display+0x1f0>)
 80016e0:	2301      	movs	r3, #1
 80016e2:	ca06      	ldmia	r2, {r1, r2}
 80016e4:	f000 fa4c 	bl	8001b80 <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	3330      	adds	r3, #48	; 0x30
 80016ec:	b2d8      	uxtb	r0, r3
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <Char_Display+0x1f0>)
 80016f0:	2301      	movs	r3, #1
 80016f2:	ca06      	ldmia	r2, {r1, r2}
 80016f4:	f000 fa44 	bl	8001b80 <ssd1306_WriteChar>
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3330      	adds	r3, #48	; 0x30
 80016fc:	b2d8      	uxtb	r0, r3
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <Char_Display+0x1f0>)
 8001700:	2301      	movs	r3, #1
 8001702:	ca06      	ldmia	r2, {r1, r2}
 8001704:	f000 fa3c 	bl	8001b80 <ssd1306_WriteChar>
}
 8001708:	e7ff      	b.n	800170a <Char_Display+0x1e6>
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	cccccccd 	.word	0xcccccccd

0800171c <Scroll>:

	#endif
}

void Scroll(uint8_t Cambio_Datos, uint8_t Posicion_X, uint8_t Posicion_Y)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	460b      	mov	r3, r1
 8001728:	71bb      	strb	r3, [r7, #6]
 800172a:	4613      	mov	r3, r2
 800172c:	717b      	strb	r3, [r7, #5]
	if (Flag_Datos && Flag_Scroll && Cambio_Pantalla == Cambio_Datos)
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <Scroll+0x130>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d02f      	beq.n	8001796 <Scroll+0x7a>
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <Scroll+0x134>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d02b      	beq.n	8001796 <Scroll+0x7a>
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <Scroll+0x138>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	429a      	cmp	r2, r3
 8001746:	d126      	bne.n	8001796 <Scroll+0x7a>
	{
		Flag_Scroll = 0;
 8001748:	4b41      	ldr	r3, [pc, #260]	; (8001850 <Scroll+0x134>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]

			i--;
 800174e:	4b42      	ldr	r3, [pc, #264]	; (8001858 <Scroll+0x13c>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	b29b      	uxth	r3, r3
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <Scroll+0x13c>)
 800175e:	801a      	strh	r2, [r3, #0]
			j--;
 8001760:	4b3e      	ldr	r3, [pc, #248]	; (800185c <Scroll+0x140>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21a      	sxth	r2, r3
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <Scroll+0x140>)
 8001770:	801a      	strh	r2, [r3, #0]

			iD++;
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <Scroll+0x144>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	b29b      	uxth	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b37      	ldr	r3, [pc, #220]	; (8001860 <Scroll+0x144>)
 8001782:	801a      	strh	r2, [r3, #0]
			jD++;
 8001784:	4b37      	ldr	r3, [pc, #220]	; (8001864 <Scroll+0x148>)
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	b29b      	uxth	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <Scroll+0x148>)
 8001794:	801a      	strh	r2, [r3, #0]
	}

	if (Cambio_Pantalla == Cambio_Datos)
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <Scroll+0x138>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	79fa      	ldrb	r2, [r7, #7]
 800179c:	429a      	cmp	r2, r3
 800179e:	d14f      	bne.n	8001840 <Scroll+0x124>
	{
		if(i < Posicion_X && j < Posicion_Y && Reinicio_Scroll == Cambio_Datos)
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <Scroll+0x13c>)
 80017a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a6:	461a      	mov	r2, r3
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	da33      	bge.n	8001816 <Scroll+0xfa>
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <Scroll+0x140>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	461a      	mov	r2, r3
 80017b6:	797b      	ldrb	r3, [r7, #5]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	da2c      	bge.n	8001816 <Scroll+0xfa>
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <Scroll+0x14c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d127      	bne.n	8001816 <Scroll+0xfa>
		{
			i++;
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <Scroll+0x13c>)
 80017c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <Scroll+0x13c>)
 80017d6:	801a      	strh	r2, [r3, #0]
			j++;
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <Scroll+0x140>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <Scroll+0x140>)
 80017e8:	801a      	strh	r2, [r3, #0]

			iD--;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <Scroll+0x144>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <Scroll+0x144>)
 80017fa:	801a      	strh	r2, [r3, #0]
			jD--;
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <Scroll+0x148>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	b29b      	uxth	r3, r3
 8001808:	b21a      	sxth	r2, r3
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <Scroll+0x148>)
 800180c:	801a      	strh	r2, [r3, #0]

			Flag_Datos = 0;
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <Scroll+0x130>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
				Reinicio_Scroll = Cambio_Datos + 1;
			}

		}
	}
}
 8001814:	e014      	b.n	8001840 <Scroll+0x124>
		else if(Reinicio_Scroll == Cambio_Datos)
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <Scroll+0x14c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	429a      	cmp	r2, r3
 800181e:	d10f      	bne.n	8001840 <Scroll+0x124>
			Datos = 3000;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <Scroll+0x150>)
 8001822:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001826:	801a      	strh	r2, [r3, #0]
			if(Cambio_Datos == 2)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d103      	bne.n	8001836 <Scroll+0x11a>
				Reinicio_Scroll = 0;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <Scroll+0x14c>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
}
 8001834:	e004      	b.n	8001840 <Scroll+0x124>
				Reinicio_Scroll = Cambio_Datos + 1;
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3301      	adds	r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <Scroll+0x14c>)
 800183e:	701a      	strb	r2, [r3, #0]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	20001291 	.word	0x20001291
 8001850:	20001290 	.word	0x20001290
 8001854:	20000311 	.word	0x20000311
 8001858:	20000000 	.word	0x20000000
 800185c:	20000002 	.word	0x20000002
 8001860:	20000004 	.word	0x20000004
 8001864:	20000006 	.word	0x20000006
 8001868:	20000310 	.word	0x20000310
 800186c:	20000010 	.word	0x20000010

08001870 <Mostrar_Datos>:
	}
}


void Mostrar_Datos()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001874:	2000      	movs	r0, #0
 8001876:	f000 f8cd 	bl	8001a14 <ssd1306_Fill>

	Scroll(0, 25, 17);
 800187a:	2211      	movs	r2, #17
 800187c:	2119      	movs	r1, #25
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff ff4c 	bl	800171c <Scroll>

	Mostrar_Tiempo();
 8001884:	f7ff fde4 	bl	8001450 <Mostrar_Tiempo>
	Mostrar_Temperatura();
 8001888:	f7ff fbb8 	bl	8000ffc <Mostrar_Temperatura>
	Mostrar_Humedad();
 800188c:	f7ff fc2c 	bl	80010e8 <Mostrar_Humedad>

	Scroll(1, 25, 17);
 8001890:	2211      	movs	r2, #17
 8001892:	2119      	movs	r1, #25
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff ff41 	bl	800171c <Scroll>

	Mostrar_Tiempo();
 800189a:	f7ff fdd9 	bl	8001450 <Mostrar_Tiempo>
	Mostrar_Presion();
 800189e:	f7ff fc73 	bl	8001188 <Mostrar_Presion>
	Mostrar_Lux();
 80018a2:	f7ff fcd1 	bl	8001248 <Mostrar_Lux>

	Scroll(2, 25, 17);
 80018a6:	2211      	movs	r2, #17
 80018a8:	2119      	movs	r1, #25
 80018aa:	2002      	movs	r0, #2
 80018ac:	f7ff ff36 	bl	800171c <Scroll>

	Mostrar_Tiempo();
 80018b0:	f7ff fdce 	bl	8001450 <Mostrar_Tiempo>
	Mostrar_Velocidad();
 80018b4:	f7ff fd1a 	bl	80012ec <Mostrar_Velocidad>
	Mostrar_Calidad_Aire();
 80018b8:	f7ff fd78 	bl	80013ac <Mostrar_Calidad_Aire>

	Battery_100();
 80018bc:	f000 fb42 	bl	8001f44 <Battery_100>
	Wifi_On();
 80018c0:	f000 fb6e 	bl	8001fa0 <Wifi_On>

	ssd1306_UpdateScreen();
 80018c4:	f000 f8ca 	bl	8001a5c <ssd1306_UpdateScreen>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <ssd1306_Reset>:

#include "Datos_Display.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af04      	add	r7, sp, #16
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	2301      	movs	r3, #1
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	2200      	movs	r2, #0
 80018f8:	2178      	movs	r1, #120	; 0x78
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <ssd1306_WriteCommand+0x2c>)
 80018fc:	f005 face 	bl	8006e9c <HAL_I2C_Mem_Write>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000bf8 	.word	0x20000bf8

0800190c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af04      	add	r7, sp, #16
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	f04f 32ff 	mov.w	r2, #4294967295
 800191e:	9202      	str	r2, [sp, #8]
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	2240      	movs	r2, #64	; 0x40
 800192a:	2178      	movs	r1, #120	; 0x78
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <ssd1306_WriteData+0x30>)
 800192e:	f005 fab5 	bl	8006e9c <HAL_I2C_Mem_Write>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000bf8 	.word	0x20000bf8

08001940 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001944:	f7ff ffc2 	bl	80018cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001948:	2064      	movs	r0, #100	; 0x64
 800194a:	f003 fcf9 	bl	8005340 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800194e:	2000      	movs	r0, #0
 8001950:	f000 fada 	bl	8001f08 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001954:	2020      	movs	r0, #32
 8001956:	f7ff ffc1 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ffbe 	bl	80018dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001960:	20b0      	movs	r0, #176	; 0xb0
 8001962:	f7ff ffbb 	bl	80018dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001966:	20c8      	movs	r0, #200	; 0xc8
 8001968:	f7ff ffb8 	bl	80018dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff ffb5 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001972:	2010      	movs	r0, #16
 8001974:	f7ff ffb2 	bl	80018dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001978:	2040      	movs	r0, #64	; 0x40
 800197a:	f7ff ffaf 	bl	80018dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800197e:	20ff      	movs	r0, #255	; 0xff
 8001980:	f000 faaf 	bl	8001ee2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001984:	20a1      	movs	r0, #161	; 0xa1
 8001986:	f7ff ffa9 	bl	80018dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800198a:	20a6      	movs	r0, #166	; 0xa6
 800198c:	f7ff ffa6 	bl	80018dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001990:	20a8      	movs	r0, #168	; 0xa8
 8001992:	f7ff ffa3 	bl	80018dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001996:	203f      	movs	r0, #63	; 0x3f
 8001998:	f7ff ffa0 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800199c:	20a4      	movs	r0, #164	; 0xa4
 800199e:	f7ff ff9d 	bl	80018dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019a2:	20d3      	movs	r0, #211	; 0xd3
 80019a4:	f7ff ff9a 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff ff97 	bl	80018dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019ae:	20d5      	movs	r0, #213	; 0xd5
 80019b0:	f7ff ff94 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019b4:	20f0      	movs	r0, #240	; 0xf0
 80019b6:	f7ff ff91 	bl	80018dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019ba:	20d9      	movs	r0, #217	; 0xd9
 80019bc:	f7ff ff8e 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019c0:	2022      	movs	r0, #34	; 0x22
 80019c2:	f7ff ff8b 	bl	80018dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019c6:	20da      	movs	r0, #218	; 0xda
 80019c8:	f7ff ff88 	bl	80018dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80019cc:	2012      	movs	r0, #18
 80019ce:	f7ff ff85 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80019d2:	20db      	movs	r0, #219	; 0xdb
 80019d4:	f7ff ff82 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80019d8:	2020      	movs	r0, #32
 80019da:	f7ff ff7f 	bl	80018dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80019de:	208d      	movs	r0, #141	; 0x8d
 80019e0:	f7ff ff7c 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80019e4:	2014      	movs	r0, #20
 80019e6:	f7ff ff79 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 fa8c 	bl	8001f08 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 f80f 	bl	8001a14 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80019f6:	f000 f831 	bl	8001a5c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <ssd1306_Init+0xd0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <ssd1306_Init+0xd0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a06:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <ssd1306_Init+0xd0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	711a      	strb	r2, [r3, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000734 	.word	0x20000734

08001a14 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e00d      	b.n	8001a40 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <ssd1306_Fill+0x1a>
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	e000      	b.n	8001a30 <ssd1306_Fill+0x1c>
 8001a2e:	21ff      	movs	r1, #255	; 0xff
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <ssd1306_Fill+0x44>)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4413      	add	r3, r2
 8001a36:	460a      	mov	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8001a46:	d3ed      	bcc.n	8001a24 <ssd1306_Fill+0x10>
    }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000324 	.word	0x20000324

08001a5c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	e01a      	b.n	8001a9e <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	3b50      	subs	r3, #80	; 0x50
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff34 	bl	80018dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff ff31 	bl	80018dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a7a:	2010      	movs	r0, #16
 8001a7c:	f7ff ff2e 	bl	80018dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	4613      	mov	r3, r2
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	4413      	add	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <ssd1306_UpdateScreen+0x54>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	2182      	movs	r1, #130	; 0x82
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff3a 	bl	800190c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	71fb      	strb	r3, [r7, #7]
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d9e1      	bls.n	8001a68 <ssd1306_UpdateScreen+0xc>
    }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000324 	.word	0x20000324

08001ab4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(int16_t x, uint8_t y, SSD1306_COLOR color) {
 8001ab4:	b490      	push	{r4, r7}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	717b      	strb	r3, [r7, #5]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	713b      	strb	r3, [r7, #4]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT || x <= 0)
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	2b81      	cmp	r3, #129	; 0x81
 8001acc:	dc51      	bgt.n	8001b72 <ssd1306_DrawPixel+0xbe>
 8001ace:	797b      	ldrb	r3, [r7, #5]
 8001ad0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ad2:	d84e      	bhi.n	8001b72 <ssd1306_DrawPixel+0xbe>
 8001ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dd4a      	ble.n	8001b72 <ssd1306_DrawPixel+0xbe>
        // Don't write outside the buffer
    	return ;
     }
   
    // Draw in the right color
    if(color == White) {
 8001adc:	793b      	ldrb	r3, [r7, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d122      	bne.n	8001b28 <ssd1306_DrawPixel+0x74>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ae2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	b2d8      	uxtb	r0, r3
 8001aec:	4601      	mov	r1, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	440b      	add	r3, r1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <ssd1306_DrawPixel+0xc8>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	797b      	ldrb	r3, [r7, #5]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b25c      	sxtb	r4, r3
 8001b10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b14:	4601      	mov	r1, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	440b      	add	r3, r1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2e1      	uxtb	r1, r4
 8001b22:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <ssd1306_DrawPixel+0xc8>)
 8001b24:	54d1      	strb	r1, [r2, r3]
 8001b26:	e025      	b.n	8001b74 <ssd1306_DrawPixel+0xc0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b2c:	797b      	ldrb	r3, [r7, #5]
 8001b2e:	08db      	lsrs	r3, r3, #3
 8001b30:	b2d8      	uxtb	r0, r3
 8001b32:	4601      	mov	r1, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	019b      	lsls	r3, r3, #6
 8001b38:	440b      	add	r3, r1
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <ssd1306_DrawPixel+0xc8>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	b25a      	sxtb	r2, r3
 8001b44:	797b      	ldrb	r3, [r7, #5]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	4013      	ands	r3, r2
 8001b58:	b25c      	sxtb	r4, r3
 8001b5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b5e:	4601      	mov	r1, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	019b      	lsls	r3, r3, #6
 8001b64:	440b      	add	r3, r1
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	b2e1      	uxtb	r1, r4
 8001b6c:	4a03      	ldr	r2, [pc, #12]	; (8001b7c <ssd1306_DrawPixel+0xc8>)
 8001b6e:	54d1      	strb	r1, [r2, r3]
 8001b70:	e000      	b.n	8001b74 <ssd1306_DrawPixel+0xc0>
    	return ;
 8001b72:	bf00      	nop
    }
}
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc90      	pop	{r4, r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000324 	.word	0x20000324

08001b80 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4604      	mov	r4, r0
 8001b88:	1d38      	adds	r0, r7, #4
 8001b8a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4623      	mov	r3, r4
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	4613      	mov	r3, r2
 8001b96:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b1f      	cmp	r3, #31
 8001b9c:	d902      	bls.n	8001ba4 <ssd1306_WriteChar+0x24>
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b7e      	cmp	r3, #126	; 0x7e
 8001ba2:	d901      	bls.n	8001ba8 <ssd1306_WriteChar+0x28>
        return 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e064      	b.n	8001c72 <ssd1306_WriteChar+0xf2>
        // Not enough space on current line
        return 0;
    }*/
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	e050      	b.n	8001c50 <ssd1306_WriteChar+0xd0>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	3b20      	subs	r3, #32
 8001bb4:	7979      	ldrb	r1, [r7, #5]
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	440b      	add	r3, r1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	e038      	b.n	8001c40 <ssd1306_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d014      	beq.n	8001c08 <ssd1306_WriteChar+0x88>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bde:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <ssd1306_WriteChar+0xfc>)
 8001be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <ssd1306_WriteChar+0xfc>)
 8001bf2:	885b      	ldrh	r3, [r3, #2]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	7bba      	ldrb	r2, [r7, #14]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7ff ff57 	bl	8001ab4 <ssd1306_DrawPixel>
 8001c06:	e018      	b.n	8001c3a <ssd1306_WriteChar+0xba>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <ssd1306_WriteChar+0xfc>)
 8001c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b218      	sxth	r0, r3
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <ssd1306_WriteChar+0xfc>)
 8001c1c:	885b      	ldrh	r3, [r3, #2]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	b2d9      	uxtb	r1, r3
 8001c28:	7bbb      	ldrb	r3, [r7, #14]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	f7ff ff3d 	bl	8001ab4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	793b      	ldrb	r3, [r7, #4]
 8001c42:	461a      	mov	r2, r3
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d3c1      	bcc.n	8001bce <ssd1306_WriteChar+0x4e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	797b      	ldrb	r3, [r7, #5]
 8001c52:	461a      	mov	r2, r3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d3a9      	bcc.n	8001bae <ssd1306_WriteChar+0x2e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <ssd1306_WriteChar+0xfc>)
 8001c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	793b      	ldrb	r3, [r7, #4]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b21a      	sxth	r2, r3
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <ssd1306_WriteChar+0xfc>)
 8001c6e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000734 	.word	0x20000734

08001c80 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	1d38      	adds	r0, r7, #4
 8001c8a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c8e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001c90:	e012      	b.n	8001cb8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	7818      	ldrb	r0, [r3, #0]
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	1d3a      	adds	r2, r7, #4
 8001c9a:	ca06      	ldmia	r2, {r1, r2}
 8001c9c:	f7ff ff70 	bl	8001b80 <ssd1306_WriteChar>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d002      	beq.n	8001cb2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	e008      	b.n	8001cc4 <ssd1306_WriteString+0x44>
        }
        str++;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e8      	bne.n	8001c92 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(int16_t x, uint8_t y) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	80fb      	strh	r3, [r7, #6]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	717b      	strb	r3, [r7, #5]
    SSD1306.CurrentX = x;
 8001cdc:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <ssd1306_SetCursor+0x2c>)
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8001ce2:	797b      	ldrb	r3, [r7, #5]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <ssd1306_SetCursor+0x2c>)
 8001ce8:	805a      	strh	r2, [r3, #2]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000734 	.word	0x20000734

08001cfc <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	71fb      	strb	r3, [r7, #7]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71bb      	strb	r3, [r7, #6]
 8001d12:	460b      	mov	r3, r1
 8001d14:	717b      	strb	r3, [r7, #5]
 8001d16:	4613      	mov	r3, r2
 8001d18:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001d1a:	797a      	ldrb	r2, [r7, #5]
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bfb8      	it	lt
 8001d24:	425b      	neglt	r3, r3
 8001d26:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001d28:	793a      	ldrb	r2, [r7, #4]
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bfb8      	it	lt
 8001d32:	425b      	neglt	r3, r3
 8001d34:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	797b      	ldrb	r3, [r7, #5]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d201      	bcs.n	8001d42 <ssd1306_Line+0x46>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e001      	b.n	8001d46 <ssd1306_Line+0x4a>
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001d48:	79ba      	ldrb	r2, [r7, #6]
 8001d4a:	793b      	ldrb	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d201      	bcs.n	8001d54 <ssd1306_Line+0x58>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e001      	b.n	8001d58 <ssd1306_Line+0x5c>
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d6a:	7939      	ldrb	r1, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fea1 	bl	8001ab4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001d72:	e025      	b.n	8001dc0 <ssd1306_Line+0xc4>
        ssd1306_DrawPixel(x1, y1, color);
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d7c:	79b9      	ldrb	r1, [r7, #6]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe98 	bl	8001ab4 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	425b      	negs	r3, r3
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dd08      	ble.n	8001da6 <ssd1306_Line+0xaa>
            error -= deltaY;
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4413      	add	r3, r2
 8001da4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	da08      	bge.n	8001dc0 <ssd1306_Line+0xc4>
            error += deltaX;
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4413      	add	r3, r2
 8001db4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001dc0:	79fa      	ldrb	r2, [r7, #7]
 8001dc2:	797b      	ldrb	r3, [r7, #5]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1d5      	bne.n	8001d74 <ssd1306_Line+0x78>
 8001dc8:	79ba      	ldrb	r2, [r7, #6]
 8001dca:	793b      	ldrb	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1d1      	bne.n	8001d74 <ssd1306_Line+0x78>
        }
    }
    return;
 8001dd0:	bf00      	nop
}
 8001dd2:	3724      	adds	r7, #36	; 0x24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd90      	pop	{r4, r7, pc}

08001dd8 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	4604      	mov	r4, r0
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4623      	mov	r3, r4
 8001de8:	71fb      	strb	r3, [r7, #7]
 8001dea:	4603      	mov	r3, r0
 8001dec:	71bb      	strb	r3, [r7, #6]
 8001dee:	460b      	mov	r3, r1
 8001df0:	717b      	strb	r3, [r7, #5]
 8001df2:	4613      	mov	r3, r2
 8001df4:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001df6:	79bc      	ldrb	r4, [r7, #6]
 8001df8:	797a      	ldrb	r2, [r7, #5]
 8001dfa:	79b9      	ldrb	r1, [r7, #6]
 8001dfc:	79f8      	ldrb	r0, [r7, #7]
 8001dfe:	7e3b      	ldrb	r3, [r7, #24]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	4623      	mov	r3, r4
 8001e04:	f7ff ff7a 	bl	8001cfc <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001e08:	793c      	ldrb	r4, [r7, #4]
 8001e0a:	797a      	ldrb	r2, [r7, #5]
 8001e0c:	79b9      	ldrb	r1, [r7, #6]
 8001e0e:	7978      	ldrb	r0, [r7, #5]
 8001e10:	7e3b      	ldrb	r3, [r7, #24]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4623      	mov	r3, r4
 8001e16:	f7ff ff71 	bl	8001cfc <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001e1a:	793c      	ldrb	r4, [r7, #4]
 8001e1c:	79fa      	ldrb	r2, [r7, #7]
 8001e1e:	7939      	ldrb	r1, [r7, #4]
 8001e20:	7978      	ldrb	r0, [r7, #5]
 8001e22:	7e3b      	ldrb	r3, [r7, #24]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4623      	mov	r3, r4
 8001e28:	f7ff ff68 	bl	8001cfc <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001e2c:	79bc      	ldrb	r4, [r7, #6]
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	7939      	ldrb	r1, [r7, #4]
 8001e32:	79f8      	ldrb	r0, [r7, #7]
 8001e34:	7e3b      	ldrb	r3, [r7, #24]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4623      	mov	r3, r4
 8001e3a:	f7ff ff5f 	bl	8001cfc <ssd1306_Line>

    return;
 8001e3e:	bf00      	nop
}
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}

08001e46 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001e46:	b590      	push	{r4, r7, lr}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	4608      	mov	r0, r1
 8001e50:	4611      	mov	r1, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	4623      	mov	r3, r4
 8001e56:	71fb      	strb	r3, [r7, #7]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71bb      	strb	r3, [r7, #6]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	717b      	strb	r3, [r7, #5]
 8001e60:	4613      	mov	r3, r2
 8001e62:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001e64:	79fa      	ldrb	r2, [r7, #7]
 8001e66:	797b      	ldrb	r3, [r7, #5]
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bf28      	it	cs
 8001e6c:	4613      	movcs	r3, r2
 8001e6e:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001e70:	797a      	ldrb	r2, [r7, #5]
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4293      	cmp	r3, r2
 8001e76:	bf38      	it	cc
 8001e78:	4613      	movcc	r3, r2
 8001e7a:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001e7c:	79ba      	ldrb	r2, [r7, #6]
 8001e7e:	793b      	ldrb	r3, [r7, #4]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	bf28      	it	cs
 8001e84:	4613      	movcs	r3, r2
 8001e86:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001e88:	793a      	ldrb	r2, [r7, #4]
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf38      	it	cc
 8001e90:	4613      	movcc	r3, r2
 8001e92:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e017      	b.n	8001eca <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001e9a:	7b7b      	ldrb	r3, [r7, #13]
 8001e9c:	73bb      	strb	r3, [r7, #14]
 8001e9e:	e00a      	b.n	8001eb6 <ssd1306_FillRectangle+0x70>
            ssd1306_DrawPixel(x, y, color);
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ea8:	7bf9      	ldrb	r1, [r7, #15]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe02 	bl	8001ab4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73bb      	strb	r3, [r7, #14]
 8001eb6:	7bba      	ldrb	r2, [r7, #14]
 8001eb8:	7b3b      	ldrb	r3, [r7, #12]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d802      	bhi.n	8001ec4 <ssd1306_FillRectangle+0x7e>
 8001ebe:	7bbb      	ldrb	r3, [r7, #14]
 8001ec0:	2b81      	cmp	r3, #129	; 0x81
 8001ec2:	d9ed      	bls.n	8001ea0 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	7abb      	ldrb	r3, [r7, #10]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d803      	bhi.n	8001eda <ssd1306_FillRectangle+0x94>
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ed6:	d9e0      	bls.n	8001e9a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
}
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}

08001ee2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001eec:	2381      	movs	r3, #129	; 0x81
 8001eee:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fcf2 	bl	80018dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fcee 	bl	80018dc <ssd1306_WriteCommand>
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f18:	23af      	movs	r3, #175	; 0xaf
 8001f1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <ssd1306_SetDisplayOn+0x38>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	715a      	strb	r2, [r3, #5]
 8001f22:	e004      	b.n	8001f2e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f24:	23ae      	movs	r3, #174	; 0xae
 8001f26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <ssd1306_SetDisplayOn+0x38>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fcd3 	bl	80018dc <ssd1306_WriteCommand>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000734 	.word	0x20000734

08001f44 <Battery_100>:
    0b00000000,  //
    0b00000000   //
};

void Battery_100(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(110, 0, 124, 8, White);
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2308      	movs	r3, #8
 8001f50:	227c      	movs	r2, #124	; 0x7c
 8001f52:	2100      	movs	r1, #0
 8001f54:	206e      	movs	r0, #110	; 0x6e
 8001f56:	f7ff ff3f 	bl	8001dd8 <ssd1306_DrawRectangle>
	ssd1306_FillRectangle(112, 2, 114, 6, White);
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2306      	movs	r3, #6
 8001f60:	2272      	movs	r2, #114	; 0x72
 8001f62:	2102      	movs	r1, #2
 8001f64:	2070      	movs	r0, #112	; 0x70
 8001f66:	f7ff ff6e 	bl	8001e46 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(116, 2, 118, 6, White);
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2306      	movs	r3, #6
 8001f70:	2276      	movs	r2, #118	; 0x76
 8001f72:	2102      	movs	r1, #2
 8001f74:	2074      	movs	r0, #116	; 0x74
 8001f76:	f7ff ff66 	bl	8001e46 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(120, 2, 122, 6, White);
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2306      	movs	r3, #6
 8001f80:	227a      	movs	r2, #122	; 0x7a
 8001f82:	2102      	movs	r1, #2
 8001f84:	2078      	movs	r0, #120	; 0x78
 8001f86:	f7ff ff5e 	bl	8001e46 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(124, 2, 126, 6, White);
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2306      	movs	r3, #6
 8001f90:	227e      	movs	r2, #126	; 0x7e
 8001f92:	2102      	movs	r1, #2
 8001f94:	207c      	movs	r0, #124	; 0x7c
 8001f96:	f7ff ff56 	bl	8001e46 <ssd1306_FillRectangle>
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <Wifi_On>:
	ssd1306_DrawRectangle(110, 0, 124, 8, White);
	ssd1306_FillRectangle(124, 2, 126, 6, White);
}

void Wifi_On(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af02      	add	r7, sp, #8
	ssd1306_Line(7, 0, 7, 9, White);
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2309      	movs	r3, #9
 8001fac:	2207      	movs	r2, #7
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2007      	movs	r0, #7
 8001fb2:	f7ff fea3 	bl	8001cfc <ssd1306_Line>
	ssd1306_Line(2, 0, 12, 0, White);
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	220c      	movs	r2, #12
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7ff fe9b 	bl	8001cfc <ssd1306_Line>
	ssd1306_Line(2, 0, 7, 5, White);
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2305      	movs	r3, #5
 8001fcc:	2207      	movs	r2, #7
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7ff fe93 	bl	8001cfc <ssd1306_Line>
	ssd1306_Line(7, 5, 12, 0, White);
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	220c      	movs	r2, #12
 8001fde:	2105      	movs	r1, #5
 8001fe0:	2007      	movs	r0, #7
 8001fe2:	f7ff fe8b 	bl	8001cfc <ssd1306_Line>

	ssd1306_Line(9, 8, 9, 9, White);
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2309      	movs	r3, #9
 8001fec:	2209      	movs	r2, #9
 8001fee:	2108      	movs	r1, #8
 8001ff0:	2009      	movs	r0, #9
 8001ff2:	f7ff fe83 	bl	8001cfc <ssd1306_Line>
	ssd1306_Line(10, 8, 10, 9, White);
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	220a      	movs	r2, #10
 8001ffe:	2108      	movs	r1, #8
 8002000:	200a      	movs	r0, #10
 8002002:	f7ff fe7b 	bl	8001cfc <ssd1306_Line>

	ssd1306_Line(12, 6, 12, 9, White);
 8002006:	2301      	movs	r3, #1
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2309      	movs	r3, #9
 800200c:	220c      	movs	r2, #12
 800200e:	2106      	movs	r1, #6
 8002010:	200c      	movs	r0, #12
 8002012:	f7ff fe73 	bl	8001cfc <ssd1306_Line>
	ssd1306_Line(13, 6, 13, 9, White);
 8002016:	2301      	movs	r3, #1
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2309      	movs	r3, #9
 800201c:	220d      	movs	r2, #13
 800201e:	2106      	movs	r1, #6
 8002020:	200d      	movs	r0, #13
 8002022:	f7ff fe6b 	bl	8001cfc <ssd1306_Line>

	ssd1306_Line(15, 4, 15, 9, White);
 8002026:	2301      	movs	r3, #1
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2309      	movs	r3, #9
 800202c:	220f      	movs	r2, #15
 800202e:	2104      	movs	r1, #4
 8002030:	200f      	movs	r0, #15
 8002032:	f7ff fe63 	bl	8001cfc <ssd1306_Line>
	ssd1306_Line(16, 4, 16, 9, White);
 8002036:	2301      	movs	r3, #1
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2309      	movs	r3, #9
 800203c:	2210      	movs	r2, #16
 800203e:	2104      	movs	r1, #4
 8002040:	2010      	movs	r0, #16
 8002042:	f7ff fe5b 	bl	8001cfc <ssd1306_Line>

	ssd1306_Line(18, 2, 18, 9, White);
 8002046:	2301      	movs	r3, #1
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2309      	movs	r3, #9
 800204c:	2212      	movs	r2, #18
 800204e:	2102      	movs	r1, #2
 8002050:	2012      	movs	r0, #18
 8002052:	f7ff fe53 	bl	8001cfc <ssd1306_Line>
	ssd1306_Line(19, 2, 19, 9, White);
 8002056:	2301      	movs	r3, #1
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2309      	movs	r3, #9
 800205c:	2213      	movs	r2, #19
 800205e:	2102      	movs	r1, #2
 8002060:	2013      	movs	r0, #19
 8002062:	f7ff fe4b 	bl	8001cfc <ssd1306_Line>
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <Grados>:

	ssd1306_Line(2, 9, 19, 0, White);
}

void Grados(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
	uint32_t i, j, b = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]

	for(i = 0; i < 10; i++)  // Itera sobre 10 filas
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e043      	b.n	8002104 <Grados+0x98>
	{
	    b = degreesSymbol[i];
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <Grados+0xb8>)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	607b      	str	r3, [r7, #4]
	    for(j = 0; j < 7; j++)  // Itera sobre 7 columnas
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	e035      	b.n	80020f8 <Grados+0x8c>
	    {
	        if((b >> (6 - j)) & 0x01)  // Ajusta la máscara a 6
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f1c3 0306 	rsb	r3, r3, #6
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d014      	beq.n	80020ca <Grados+0x5e>
	        {
	            ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), White);
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <Grados+0xbc>)
 80020a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b218      	sxth	r0, r3
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <Grados+0xbc>)
 80020b4:	885b      	ldrh	r3, [r3, #2]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4413      	add	r3, r2
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7ff fcf6 	bl	8001ab4 <ssd1306_DrawPixel>
 80020c8:	e013      	b.n	80020f2 <Grados+0x86>
	        }
	        else
	        {
	            ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), Black);
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <Grados+0xbc>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b218      	sxth	r0, r3
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <Grados+0xbc>)
 80020de:	885b      	ldrh	r3, [r3, #2]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	f7ff fce1 	bl	8001ab4 <ssd1306_DrawPixel>
	    for(j = 0; j < 7; j++)  // Itera sobre 7 columnas
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3301      	adds	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d9c6      	bls.n	800208c <Grados+0x20>
	for(i = 0; i < 10; i++)  // Itera sobre 10 filas
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3301      	adds	r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b09      	cmp	r3, #9
 8002108:	d9b8      	bls.n	800207c <Grados+0x10>
	        }
	    }
	}

	SSD1306.CurrentX += 7;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <Grados+0xbc>)
 800210c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002110:	b29b      	uxth	r3, r3
 8002112:	3307      	adds	r3, #7
 8002114:	b29b      	uxth	r3, r3
 8002116:	b21a      	sxth	r2, r3
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <Grados+0xbc>)
 800211a:	801a      	strh	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	080171f8 	.word	0x080171f8
 8002128:	20000734 	.word	0x20000734

0800212c <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7fe f853 	bl	80001e0 <strlen>
 800213a:	4603      	mov	r3, r0
 800213c:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e007      	b.n	8002154 <bufclr+0x28>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3301      	adds	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf3      	blt.n	8002144 <bufclr+0x18>
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b096      	sub	sp, #88	; 0x58
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8002172:	f000 f939 	bl	80023e8 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8002176:	4823      	ldr	r0, [pc, #140]	; (8002204 <ESP_Init+0x9c>)
 8002178:	f000 fa02 	bl	8002580 <Uart_sendstring>
	HAL_Delay(1000);
 800217c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002180:	f003 f8de 	bl	8005340 <HAL_Delay>

	Uart_flush();
 8002184:	f000 f978 	bl	8002478 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8002188:	481f      	ldr	r0, [pc, #124]	; (8002208 <ESP_Init+0xa0>)
 800218a:	f000 f9f9 	bl	8002580 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 800218e:	bf00      	nop
 8002190:	481e      	ldr	r0, [pc, #120]	; (800220c <ESP_Init+0xa4>)
 8002192:	f000 fa25 	bl	80025e0 <Wait_for>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f9      	beq.n	8002190 <ESP_Init+0x28>

	Uart_flush();
 800219c:	f000 f96c 	bl	8002478 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 80021a0:	481b      	ldr	r0, [pc, #108]	; (8002210 <ESP_Init+0xa8>)
 80021a2:	f000 f9ed 	bl	8002580 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80021a6:	bf00      	nop
 80021a8:	4818      	ldr	r0, [pc, #96]	; (800220c <ESP_Init+0xa4>)
 80021aa:	f000 fa19 	bl	80025e0 <Wait_for>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f9      	beq.n	80021a8 <ESP_Init+0x40>

	Uart_flush();
 80021b4:	f000 f960 	bl	8002478 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80021b8:	f107 0008 	add.w	r0, r7, #8
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4914      	ldr	r1, [pc, #80]	; (8002214 <ESP_Init+0xac>)
 80021c2:	f012 fdcd 	bl	8014d60 <siprintf>
	Uart_sendstring(data);
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f9d8 	bl	8002580 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 80021d0:	bf00      	nop
 80021d2:	4811      	ldr	r0, [pc, #68]	; (8002218 <ESP_Init+0xb0>)
 80021d4:	f000 fa04 	bl	80025e0 <Wait_for>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f9      	beq.n	80021d2 <ESP_Init+0x6a>

	Uart_flush();
 80021de:	f000 f94b 	bl	8002478 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 80021e2:	480e      	ldr	r0, [pc, #56]	; (800221c <ESP_Init+0xb4>)
 80021e4:	f000 f9cc 	bl	8002580 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80021e8:	bf00      	nop
 80021ea:	4808      	ldr	r0, [pc, #32]	; (800220c <ESP_Init+0xa4>)
 80021ec:	f000 f9f8 	bl	80025e0 <Wait_for>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f9      	beq.n	80021ea <ESP_Init+0x82>

	Uart_flush();
 80021f6:	f000 f93f 	bl	8002478 <Uart_flush>

}
 80021fa:	bf00      	nop
 80021fc:	3758      	adds	r7, #88	; 0x58
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	08016fe0 	.word	0x08016fe0
 8002208:	08016fec 	.word	0x08016fec
 800220c:	08016ff4 	.word	0x08016ff4
 8002210:	08016ffc 	.word	0x08016ffc
 8002214:	0801700c 	.word	0x0801700c
 8002218:	08017024 	.word	0x08017024
 800221c:	08017030 	.word	0x08017030

08002220 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, float value[])
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 8002226:	af02      	add	r7, sp, #8
 8002228:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800222c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002230:	6018      	str	r0, [r3, #0]
 8002232:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002236:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800223a:	6019      	str	r1, [r3, #0]
 800223c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002240:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8002244:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8002246:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800224a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	3304      	adds	r3, #4
 8002254:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f011 ffff 	bl	801425e <memset>
	char local_buf2[30] = {0};
 8002260:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002264:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	3304      	adds	r3, #4
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	615a      	str	r2, [r3, #20]
 800227c:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 800227e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002282:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	3304      	adds	r3, #4
 800228c:	22c4      	movs	r2, #196	; 0xc4
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f011 ffe4 	bl	801425e <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8002296:	484b      	ldr	r0, [pc, #300]	; (80023c4 <ESP_Send_Multi+0x1a4>)
 8002298:	f000 f972 	bl	8002580 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800229c:	bf00      	nop
 800229e:	484a      	ldr	r0, [pc, #296]	; (80023c8 <ESP_Send_Multi+0x1a8>)
 80022a0:	f000 f99e 	bl	80025e0 <Wait_for>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f9      	beq.n	800229e <ESP_Send_Multi+0x7e>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 80022aa:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80022ae:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80022b2:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4944      	ldr	r1, [pc, #272]	; (80023cc <ESP_Send_Multi+0x1ac>)
 80022ba:	f012 fd51 	bl	8014d60 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80022c4:	e026      	b.n	8002314 <ESP_Send_Multi+0xf4>
	{
		sprintf(field_buf, "&field%d=%f",i+1, value[i]);
 80022c6:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80022ca:	1c5c      	adds	r4, r3, #1
 80022cc:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80022d6:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f939 	bl	8000558 <__aeabi_f2d>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	f107 0014 	add.w	r0, r7, #20
 80022ee:	e9cd 2300 	strd	r2, r3, [sp]
 80022f2:	4622      	mov	r2, r4
 80022f4:	4936      	ldr	r1, [pc, #216]	; (80023d0 <ESP_Send_Multi+0x1b0>)
 80022f6:	f012 fd33 	bl	8014d60 <siprintf>
		strcat (local_buf, field_buf);
 80022fa:	f107 0214 	add.w	r2, r7, #20
 80022fe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f012 fd8e 	bl	8014e26 <strcat>
	for (int i=0; i<numberoffileds; i++)
 800230a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800230e:	3301      	adds	r3, #1
 8002310:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8002314:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002318:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800231c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	dbcf      	blt.n	80022c6 <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 8002326:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800232a:	4618      	mov	r0, r3
 800232c:	f7fd ff58 	bl	80001e0 <strlen>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002338:	4413      	add	r3, r2
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <ESP_Send_Multi+0x1b4>)
 800233c:	8811      	ldrh	r1, [r2, #0]
 800233e:	7892      	ldrb	r2, [r2, #2]
 8002340:	8019      	strh	r1, [r3, #0]
 8002342:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 8002344:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002348:	4618      	mov	r0, r3
 800234a:	f7fd ff49 	bl	80001e0 <strlen>
 800234e:	4603      	mov	r3, r0
 8002350:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8002354:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002358:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 800235c:	491e      	ldr	r1, [pc, #120]	; (80023d8 <ESP_Send_Multi+0x1b8>)
 800235e:	4618      	mov	r0, r3
 8002360:	f012 fcfe 	bl	8014d60 <siprintf>
	Uart_sendstring(local_buf2);
 8002364:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f909 	bl	8002580 <Uart_sendstring>
	while (!(Wait_for(">")));
 800236e:	bf00      	nop
 8002370:	481a      	ldr	r0, [pc, #104]	; (80023dc <ESP_Send_Multi+0x1bc>)
 8002372:	f000 f935 	bl	80025e0 <Wait_for>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f9      	beq.n	8002370 <ESP_Send_Multi+0x150>

	Uart_sendstring (local_buf);
 800237c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f8fd 	bl	8002580 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8002386:	bf00      	nop
 8002388:	4815      	ldr	r0, [pc, #84]	; (80023e0 <ESP_Send_Multi+0x1c0>)
 800238a:	f000 f929 	bl	80025e0 <Wait_for>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f9      	beq.n	8002388 <ESP_Send_Multi+0x168>

	while (!(Wait_for("CLOSED")));
 8002394:	bf00      	nop
 8002396:	4813      	ldr	r0, [pc, #76]	; (80023e4 <ESP_Send_Multi+0x1c4>)
 8002398:	f000 f922 	bl	80025e0 <Wait_for>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f9      	beq.n	8002396 <ESP_Send_Multi+0x176>

	bufclr(local_buf);
 80023a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fec0 	bl	800212c <bufclr>
	bufclr(local_buf2);
 80023ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff febb 	bl	800212c <bufclr>

	Ringbuf_init();
 80023b6:	f000 f817 	bl	80023e8 <Ringbuf_init>

}
 80023ba:	bf00      	nop
 80023bc:	f507 773f 	add.w	r7, r7, #764	; 0x2fc
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	08017040 	.word	0x08017040
 80023c8:	08016ff4 	.word	0x08016ff4
 80023cc:	080170b8 	.word	0x080170b8
 80023d0:	080170d0 	.word	0x080170d0
 80023d4:	080170dc 	.word	0x080170dc
 80023d8:	08017090 	.word	0x08017090
 80023dc:	080170a0 	.word	0x080170a0
 80023e0:	080170a4 	.word	0x080170a4
 80023e4:	080170b0 	.word	0x080170b0

080023e8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <Ringbuf_init+0x3c>)
 80023ee:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <Ringbuf_init+0x40>)
 80023f0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <Ringbuf_init+0x44>)
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <Ringbuf_init+0x48>)
 80023f6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <Ringbuf_init+0x4c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <Ringbuf_init+0x4c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <Ringbuf_init+0x4c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <Ringbuf_init+0x4c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0220 	orr.w	r2, r2, #32
 8002416:	60da      	str	r2, [r3, #12]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	200007cc 	.word	0x200007cc
 8002428:	2000073c 	.word	0x2000073c
 800242c:	200007d0 	.word	0x200007d0
 8002430:	20000784 	.word	0x20000784
 8002434:	20000e04 	.word	0x20000e04

08002438 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	3301      	adds	r3, #1
 800244a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800244e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	429a      	cmp	r2, r3
 8002458:	d007      	beq.n	800246a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	79f9      	ldrb	r1, [r7, #7]
 8002462:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <Uart_flush>:

void Uart_flush (void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <Uart_flush+0x1c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <Uart_flush+0x1c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	200007cc 	.word	0x200007cc

08002498 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <Uart_read+0x4c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <Uart_read+0x4c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d102      	bne.n	80024b4 <Uart_read+0x1c>
  {
    return -1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e010      	b.n	80024d6 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <Uart_read+0x4c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <Uart_read+0x4c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <Uart_read+0x4c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <Uart_read+0x4c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80024d4:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200007cc 	.word	0x200007cc

080024e8 <Uart_write>:

void Uart_write(int c)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db21      	blt.n	800253a <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <Uart_write+0x60>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	3301      	adds	r3, #1
 80024fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002502:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8002504:	bf00      	nop
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <Uart_write+0x60>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	429a      	cmp	r2, r3
 8002510:	d0f9      	beq.n	8002506 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <Uart_write+0x60>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <Uart_write+0x60>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	b2c9      	uxtb	r1, r1
 8002520:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <Uart_write+0x60>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <Uart_write+0x64>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <Uart_write+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002538:	60da      	str	r2, [r3, #12]
	}
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200007d0 	.word	0x200007d0
 800254c:	20000e04 	.word	0x20000e04

08002550 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <IsDataAvailable+0x2c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <IsDataAvailable+0x2c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	b29b      	uxth	r3, r3
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	b29b      	uxth	r3, r3
 8002568:	3340      	adds	r3, #64	; 0x40
 800256a:	b29b      	uxth	r3, r3
 800256c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	200007cc 	.word	0x200007cc

08002580 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8002588:	e006      	b.n	8002598 <Uart_sendstring+0x18>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ffa8 	bl	80024e8 <Uart_write>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f4      	bne.n	800258a <Uart_sendstring+0xa>
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <Uart_peek+0x30>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <Uart_peek+0x30>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	429a      	cmp	r2, r3
 80025be:	d102      	bne.n	80025c6 <Uart_peek+0x1a>
  {
    return -1;
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	e005      	b.n	80025d2 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <Uart_peek+0x30>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <Uart_peek+0x30>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	200007cc 	.word	0x200007cc

080025e0 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7fd fdf7 	bl	80001e0 <strlen>
 80025f2:	4603      	mov	r3, r0
 80025f4:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80025f6:	bf00      	nop
 80025f8:	f7ff ffaa 	bl	8002550 <IsDataAvailable>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0fa      	beq.n	80025f8 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8002602:	f7ff ffd3 	bl	80025ac <Uart_peek>
 8002606:	4601      	mov	r1, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4299      	cmp	r1, r3
 8002612:	d01a      	beq.n	800264a <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <Wait_for+0xa4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <Wait_for+0xa4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8002626:	e7e6      	b.n	80025f6 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3301      	adds	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800262e:	f7ff ff33 	bl	8002498 <Uart_read>
		if (so_far == len) return 1;
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	429a      	cmp	r2, r3
 8002638:	d101      	bne.n	800263e <Wait_for+0x5e>
 800263a:	2301      	movs	r3, #1
 800263c:	e01d      	b.n	800267a <Wait_for+0x9a>
		while (!IsDataAvailable());
 800263e:	bf00      	nop
 8002640:	f7ff ff86 	bl	8002550 <IsDataAvailable>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0fa      	beq.n	8002640 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 800264a:	f7ff ffaf 	bl	80025ac <Uart_peek>
 800264e:	4601      	mov	r1, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4299      	cmp	r1, r3
 800265a:	d0e5      	beq.n	8002628 <Wait_for+0x48>
	}

	if (so_far != len)
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	429a      	cmp	r2, r3
 8002662:	d002      	beq.n	800266a <Wait_for+0x8a>
	{
		so_far = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
		goto again;
 8002668:	e7c5      	b.n	80025f6 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d101      	bne.n	8002676 <Wait_for+0x96>
 8002672:	2301      	movs	r3, #1
 8002674:	e001      	b.n	800267a <Wait_for+0x9a>
	else return -1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200007cc 	.word	0x200007cc

08002688 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d013      	beq.n	80026d2 <Uart_isr+0x4a>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <Uart_isr+0xac>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff feb4 	bl	8002438 <store_char>
        return;
 80026d0:	e02c      	b.n	800272c <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d027      	beq.n	800272c <Uart_isr+0xa4>
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d022      	beq.n	800272c <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <Uart_isr+0xb0>)
 80026e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <Uart_isr+0xb0>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d108      	bne.n	8002704 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002700:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002702:	e012      	b.n	800272a <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <Uart_isr+0xb0>)
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <Uart_isr+0xb0>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <Uart_isr+0xb0>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	3301      	adds	r3, #1
 8002714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <Uart_isr+0xb0>)
 800271a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	7bba      	ldrb	r2, [r7, #14]
 8002728:	605a      	str	r2, [r3, #4]
    	return;
 800272a:	bf00      	nop
    }
}
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200007cc 	.word	0x200007cc
 8002738:	20000784 	.word	0x20000784

0800273c <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <BH1750_Init+0x34>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 800274a:	f000 f813 	bl	8002774 <BH1750_Reset>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8002754:	2045      	movs	r0, #69	; 0x45
 8002756:	f000 f859 	bl	800280c <BH1750_SetMtreg>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <BH1750_Init+0x28>
			return BH1750_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200007d4 	.word	0x200007d4

08002774 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 800277a:	2307      	movs	r3, #7
 800277c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <BH1750_Reset+0x30>)
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	1dfa      	adds	r2, r7, #7
 8002784:	230a      	movs	r3, #10
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2301      	movs	r3, #1
 800278a:	2146      	movs	r1, #70	; 0x46
 800278c:	f004 f9da 	bl	8006b44 <HAL_I2C_Master_Transmit>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <BH1750_Reset+0x26>
	//if(HAL_OK == HAL_I2C_Master_Transmit_DMA(bh1750_i2c, BH1750_ADDRESS, &tmp, 1))
		return BH1750_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <BH1750_Reset+0x28>

	return BH1750_ERROR;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	200007d4 	.word	0x200007d4

080027a8 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_MODE Mode)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d106      	bne.n	80027ca <BH1750_SetMode+0x22>
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <BH1750_SetMode+0x22>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e018      	b.n	80027fc <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <BH1750_SetMode+0x30>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e011      	b.n	80027fc <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <BH1750_SetMode+0x5c>)
 80027dc:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <BH1750_SetMode+0x60>)
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	1dfa      	adds	r2, r7, #7
 80027e4:	230a      	movs	r3, #10
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2301      	movs	r3, #1
 80027ea:	2146      	movs	r1, #70	; 0x46
 80027ec:	f004 f9aa 	bl	8006b44 <HAL_I2C_Master_Transmit>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <BH1750_SetMode+0x52>
		return BH1750_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e000      	b.n	80027fc <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200007d8 	.word	0x200007d8
 8002808:	200007d4 	.word	0x200007d4

0800280c <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af02      	add	r7, sp, #8
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b1e      	cmp	r3, #30
 800281a:	d902      	bls.n	8002822 <BH1750_SetMtreg+0x16>
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	2bff      	cmp	r3, #255	; 0xff
 8002820:	d101      	bne.n	8002826 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e037      	b.n	8002896 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8002826:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <BH1750_SetMtreg+0x94>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002836:	b2db      	uxtb	r3, r3
 8002838:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	b25b      	sxtb	r3, r3
 8002844:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002848:	b25b      	sxtb	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <BH1750_SetMtreg+0x98>)
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	f107 020c 	add.w	r2, r7, #12
 8002856:	230a      	movs	r3, #10
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2301      	movs	r3, #1
 800285c:	2146      	movs	r1, #70	; 0x46
 800285e:	f004 f971 	bl	8006b44 <HAL_I2C_Master_Transmit>
 8002862:	4603      	mov	r3, r0
 8002864:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e012      	b.n	8002896 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <BH1750_SetMtreg+0x98>)
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	230a      	movs	r3, #10
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2301      	movs	r3, #1
 8002880:	2146      	movs	r1, #70	; 0x46
 8002882:	f004 f95f 	bl	8006b44 <HAL_I2C_Master_Transmit>
 8002886:	4603      	mov	r3, r0
 8002888:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8002894:	2301      	movs	r3, #1
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200007d9 	.word	0x200007d9
 80028a4:	200007d4 	.word	0x200007d4

080028a8 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

	if(HAL_OK == HAL_I2C_Master_Receive_IT(bh1750_i2c, BH1750_ADDRESS, tmp, 2))
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <BH1750_ReadLight+0x2c>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	2302      	movs	r3, #2
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <BH1750_ReadLight+0x30>)
 80028b8:	2146      	movs	r1, #70	; 0x46
 80028ba:	f004 fa41 	bl	8006d40 <HAL_I2C_Master_Receive_IT>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <BH1750_ReadLight+0x20>
		return BH1750_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e000      	b.n	80028ca <BH1750_ReadLight+0x22>
	else
		return BH1750_ERROR;
 80028c8:	2301      	movs	r3, #1
		*Result = result / (float)BH1750_CONVERSION_FACTOR;
		return BH1750_OK;
	}
	return BH1750_ERROR;*/

}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200007d4 	.word	0x200007d4
 80028d8:	200007dc 	.word	0x200007dc

080028dc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	2319      	movs	r3, #25
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	463b      	mov	r3, r7
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2301      	movs	r3, #1
 80028f2:	2288      	movs	r2, #136	; 0x88
 80028f4:	21ec      	movs	r1, #236	; 0xec
 80028f6:	483a      	ldr	r0, [pc, #232]	; (80029e0 <TrimRead+0x104>)
 80028f8:	f004 fbca 	bl	8007090 <HAL_I2C_Mem_Read>

	//	// Read NVM from 0xE1 to 0xE7
	//	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	b21a      	sxth	r2, r3
 8002902:	783b      	ldrb	r3, [r7, #0]
 8002904:	b21b      	sxth	r3, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	b21b      	sxth	r3, r3
 800290a:	b29a      	uxth	r2, r3
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <TrimRead+0x108>)
 800290e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	b21a      	sxth	r2, r3
 8002916:	78bb      	ldrb	r3, [r7, #2]
 8002918:	b21b      	sxth	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	b21a      	sxth	r2, r3
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <TrimRead+0x10c>)
 8002920:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8002922:	797b      	ldrb	r3, [r7, #5]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	b21a      	sxth	r2, r3
 8002928:	793b      	ldrb	r3, [r7, #4]
 800292a:	b21b      	sxth	r3, r3
 800292c:	4313      	orrs	r3, r2
 800292e:	b21a      	sxth	r2, r3
 8002930:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <TrimRead+0x110>)
 8002932:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b21a      	sxth	r2, r3
 800293a:	797b      	ldrb	r3, [r7, #5]
 800293c:	b21b      	sxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b21b      	sxth	r3, r3
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <TrimRead+0x114>)
 8002946:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8002948:	7a7b      	ldrb	r3, [r7, #9]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	b21a      	sxth	r2, r3
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	b21b      	sxth	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b21a      	sxth	r2, r3
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <TrimRead+0x118>)
 8002958:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800295a:	7afb      	ldrb	r3, [r7, #11]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	b21a      	sxth	r2, r3
 8002960:	7abb      	ldrb	r3, [r7, #10]
 8002962:	b21b      	sxth	r3, r3
 8002964:	4313      	orrs	r3, r2
 8002966:	b21a      	sxth	r2, r3
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <TrimRead+0x11c>)
 800296a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800296c:	7b7b      	ldrb	r3, [r7, #13]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	b21a      	sxth	r2, r3
 8002972:	7b3b      	ldrb	r3, [r7, #12]
 8002974:	b21b      	sxth	r3, r3
 8002976:	4313      	orrs	r3, r2
 8002978:	b21a      	sxth	r2, r3
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <TrimRead+0x120>)
 800297c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	b21a      	sxth	r2, r3
 8002984:	7bbb      	ldrb	r3, [r7, #14]
 8002986:	b21b      	sxth	r3, r3
 8002988:	4313      	orrs	r3, r2
 800298a:	b21a      	sxth	r2, r3
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <TrimRead+0x124>)
 800298e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8002990:	7c7b      	ldrb	r3, [r7, #17]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	b21a      	sxth	r2, r3
 8002996:	7c3b      	ldrb	r3, [r7, #16]
 8002998:	b21b      	sxth	r3, r3
 800299a:	4313      	orrs	r3, r2
 800299c:	b21a      	sxth	r2, r3
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <TrimRead+0x128>)
 80029a0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	7cbb      	ldrb	r3, [r7, #18]
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <TrimRead+0x12c>)
 80029b2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80029b4:	7d7b      	ldrb	r3, [r7, #21]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	7d3b      	ldrb	r3, [r7, #20]
 80029bc:	b21b      	sxth	r3, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	b21a      	sxth	r2, r3
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <TrimRead+0x130>)
 80029c4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	b21a      	sxth	r2, r3
 80029cc:	7dbb      	ldrb	r3, [r7, #22]
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	4313      	orrs	r3, r2
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <TrimRead+0x134>)
 80029d6:	801a      	strh	r2, [r3, #0]
	//	dig_H2 = (trimdata[26]<<8) | trimdata[25];
	//	dig_H3 = (trimdata[27]);
	//	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
	//	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
	//	dig_H6 = (trimdata[31]);
}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000bf8 	.word	0x20000bf8
 80029e4:	200007f4 	.word	0x200007f4
 80029e8:	200007fc 	.word	0x200007fc
 80029ec:	200007fe 	.word	0x200007fe
 80029f0:	200007f6 	.word	0x200007f6
 80029f4:	20000800 	.word	0x20000800
 80029f8:	20000802 	.word	0x20000802
 80029fc:	20000804 	.word	0x20000804
 8002a00:	20000806 	.word	0x20000806
 8002a04:	20000808 	.word	0x20000808
 8002a08:	2000080a 	.word	0x2000080a
 8002a0c:	2000080c 	.word	0x2000080c
 8002a10:	2000080e 	.word	0x2000080e

08002a14 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af04      	add	r7, sp, #16
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	71fb      	strb	r3, [r7, #7]
 8002a26:	4603      	mov	r3, r0
 8002a28:	71bb      	strb	r3, [r7, #6]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	717b      	strb	r3, [r7, #5]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8002a32:	f7ff ff53 	bl	80028dc <TrimRead>


	uint8_t datatowrite = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8002a3e:	23b6      	movs	r3, #182	; 0xb6
 8002a40:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	f107 030f 	add.w	r3, r7, #15
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2301      	movs	r3, #1
 8002a54:	22e0      	movs	r2, #224	; 0xe0
 8002a56:	21ec      	movs	r1, #236	; 0xec
 8002a58:	4841      	ldr	r0, [pc, #260]	; (8002b60 <BME280_Config+0x14c>)
 8002a5a:	f004 fa1f 	bl	8006e9c <HAL_I2C_Mem_Write>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <BME280_Config+0x56>
	{
		return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
 8002a68:	e075      	b.n	8002b56 <BME280_Config+0x142>
	}

	HAL_Delay (100);
 8002a6a:	2064      	movs	r0, #100	; 0x64
 8002a6c:	f002 fc68 	bl	8005340 <HAL_Delay>
		return -1;
	}
	*/ //BMP280 no sensa humedad

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8002a70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	b25a      	sxtb	r2, r3
 8002a78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	b25b      	sxtb	r3, r3
 8002a80:	4313      	orrs	r3, r2
 8002a82:	b25b      	sxtb	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	f107 030f 	add.w	r3, r7, #15
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	22f5      	movs	r2, #245	; 0xf5
 8002a9c:	21ec      	movs	r1, #236	; 0xec
 8002a9e:	4830      	ldr	r0, [pc, #192]	; (8002b60 <BME280_Config+0x14c>)
 8002aa0:	f004 f9fc 	bl	8006e9c <HAL_I2C_Mem_Write>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <BME280_Config+0x9c>
	{
		return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e052      	b.n	8002b56 <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8002ab0:	2064      	movs	r0, #100	; 0x64
 8002ab2:	f002 fc45 	bl	8005340 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8002ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aba:	9302      	str	r3, [sp, #8]
 8002abc:	2301      	movs	r3, #1
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	f107 030e 	add.w	r3, r7, #14
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	22f5      	movs	r2, #245	; 0xf5
 8002aca:	21ec      	movs	r1, #236	; 0xec
 8002acc:	4824      	ldr	r0, [pc, #144]	; (8002b60 <BME280_Config+0x14c>)
 8002ace:	f004 fadf 	bl	8007090 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8002ad2:	7bba      	ldrb	r2, [r7, #14]
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d002      	beq.n	8002ae0 <BME280_Config+0xcc>
	{
		return -1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	e03a      	b.n	8002b56 <BME280_Config+0x142>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	015b      	lsls	r3, r3, #5
 8002ae4:	b25a      	sxtb	r2, r3
 8002ae6:	79bb      	ldrb	r3, [r7, #6]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b25a      	sxtb	r2, r3
 8002af0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	2301      	movs	r3, #1
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	f107 030f 	add.w	r3, r7, #15
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	22f4      	movs	r2, #244	; 0xf4
 8002b10:	21ec      	movs	r1, #236	; 0xec
 8002b12:	4813      	ldr	r0, [pc, #76]	; (8002b60 <BME280_Config+0x14c>)
 8002b14:	f004 f9c2 	bl	8006e9c <HAL_I2C_Mem_Write>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <BME280_Config+0x110>
	{
		return -1;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	e018      	b.n	8002b56 <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8002b24:	2064      	movs	r0, #100	; 0x64
 8002b26:	f002 fc0b 	bl	8005340 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8002b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2e:	9302      	str	r3, [sp, #8]
 8002b30:	2301      	movs	r3, #1
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	f107 030e 	add.w	r3, r7, #14
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	22f4      	movs	r2, #244	; 0xf4
 8002b3e:	21ec      	movs	r1, #236	; 0xec
 8002b40:	4807      	ldr	r0, [pc, #28]	; (8002b60 <BME280_Config+0x14c>)
 8002b42:	f004 faa5 	bl	8007090 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8002b46:	7bba      	ldrb	r2, [r7, #14]
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d002      	beq.n	8002b54 <BME280_Config+0x140>
	{
		return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	e000      	b.n	8002b56 <BME280_Config+0x142>
	}

	return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000bf8 	.word	0x20000bf8

08002b64 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af02      	add	r7, sp, #8
	 * Si trato de leer el chip ID de alguna forma no bloqueante (IT, DMA, ...) no lee bien
	 * despues los datos, no se porque. Entonces hardcodeo que estoy comunicandome bien con el
	 * chip para poder levantar los datos crudos y anda bien.
	 */

	chipID = 0x58;
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <BMEReadRaw+0x38>)
 8002b6c:	2258      	movs	r2, #88	; 0x58
 8002b6e:	701a      	strb	r2, [r3, #0]
	if (chipID == 0x58) // original era 0x60 pero en BMP280 es 0x58
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <BMEReadRaw+0x38>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b58      	cmp	r3, #88	; 0x58
 8002b76:	d10b      	bne.n	8002b90 <BMEReadRaw+0x2c>
	{
		// Read the Registers 0xF7 to 0xFE
		//HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
		//MemRxCallback_Function= READ_RAW_DATA;
		HAL_I2C_Mem_Read_IT(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8);
 8002b78:	2308      	movs	r3, #8
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <BMEReadRaw+0x3c>)
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2301      	movs	r3, #1
 8002b82:	22f7      	movs	r2, #247	; 0xf7
 8002b84:	21ec      	movs	r1, #236	; 0xec
 8002b86:	4807      	ldr	r0, [pc, #28]	; (8002ba4 <BMEReadRaw+0x40>)
 8002b88:	f004 fca8 	bl	80074dc <HAL_I2C_Mem_Read_IT>
		 *//*
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
		hRaw = (RawData[6]<<8)|(RawData[7]);
*/
		return 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e001      	b.n	8002b94 <BMEReadRaw+0x30>
	}

	else return -1;
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200007de 	.word	0x200007de
 8002ba0:	200007ec 	.word	0x200007ec
 8002ba4:	20000bf8 	.word	0x20000bf8

08002ba8 <BMP280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
//BMP280_S32_t t_fine;
BMP280_S32_t BMP280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	10da      	asrs	r2, r3, #3
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <BMP280_compensate_T_int32+0x74>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <BMP280_compensate_T_int32+0x78>)
 8002bbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	12db      	asrs	r3, r3, #11
 8002bc8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	111b      	asrs	r3, r3, #4
 8002bce:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <BMP280_compensate_T_int32+0x74>)
 8002bd0:	8812      	ldrh	r2, [r2, #0]
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	1112      	asrs	r2, r2, #4
 8002bd8:	4910      	ldr	r1, [pc, #64]	; (8002c1c <BMP280_compensate_T_int32+0x74>)
 8002bda:	8809      	ldrh	r1, [r1, #0]
 8002bdc:	1a52      	subs	r2, r2, r1
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	131b      	asrs	r3, r3, #12
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <BMP280_compensate_T_int32+0x7c>)
 8002be6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	139b      	asrs	r3, r3, #14
 8002bf0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <BMP280_compensate_T_int32+0x80>)
 8002bfa:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <BMP280_compensate_T_int32+0x80>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	3380      	adds	r3, #128	; 0x80
 8002c08:	121b      	asrs	r3, r3, #8
 8002c0a:	60fb      	str	r3, [r7, #12]
	return T;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	200007f4 	.word	0x200007f4
 8002c20:	200007fc 	.word	0x200007fc
 8002c24:	200007fe 	.word	0x200007fe
 8002c28:	20000818 	.word	0x20000818

08002c2c <BMP280_compensate_P_int64>:
}

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t BMP280_compensate_P_int64(BMP280_S32_t adc_P)
{
 8002c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c30:	b0ca      	sub	sp, #296	; 0x128
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8002c38:	4baf      	ldr	r3, [pc, #700]	; (8002ef8 <BMP280_compensate_P_int64+0x2cc>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	17da      	asrs	r2, r3, #31
 8002c3e:	461c      	mov	r4, r3
 8002c40:	4615      	mov	r5, r2
 8002c42:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8002c46:	f145 3bff 	adc.w	fp, r5, #4294967295
 8002c4a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8002c4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002c52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c56:	fb03 f102 	mul.w	r1, r3, r2
 8002c5a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002c5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	18ca      	adds	r2, r1, r3
 8002c68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c6c:	fba3 8903 	umull	r8, r9, r3, r3
 8002c70:	eb02 0309 	add.w	r3, r2, r9
 8002c74:	4699      	mov	r9, r3
 8002c76:	4ba1      	ldr	r3, [pc, #644]	; (8002efc <BMP280_compensate_P_int64+0x2d0>)
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	17da      	asrs	r2, r3, #31
 8002c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c88:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	fb03 f209 	mul.w	r2, r3, r9
 8002c92:	460b      	mov	r3, r1
 8002c94:	fb08 f303 	mul.w	r3, r8, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	fba8 1202 	umull	r1, r2, r8, r2
 8002ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cae:	4413      	add	r3, r2
 8002cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cb4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8002cb8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8002cbc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 8002cc0:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <BMP280_compensate_P_int64+0x2d4>)
 8002cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	17da      	asrs	r2, r3, #31
 8002cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cce:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002cd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cd6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8002cda:	462a      	mov	r2, r5
 8002cdc:	fb02 f203 	mul.w	r2, r2, r3
 8002ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	441a      	add	r2, r3
 8002cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	fba3 1301 	umull	r1, r3, r3, r1
 8002cf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d04:	18d3      	adds	r3, r2, r3
 8002d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8002d16:	462b      	mov	r3, r5
 8002d18:	0459      	lsls	r1, r3, #17
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002d20:	4623      	mov	r3, r4
 8002d22:	0458      	lsls	r0, r3, #17
 8002d24:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002d28:	1814      	adds	r4, r2, r0
 8002d2a:	643c      	str	r4, [r7, #64]	; 0x40
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d30:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d34:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 8002d38:	4b72      	ldr	r3, [pc, #456]	; (8002f04 <BMP280_compensate_P_int64+0x2d8>)
 8002d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3e:	b21b      	sxth	r3, r3
 8002d40:	17da      	asrs	r2, r3, #31
 8002d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d46:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d56:	00d9      	lsls	r1, r3, #3
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002d5e:	1814      	adds	r4, r2, r0
 8002d60:	63bc      	str	r4, [r7, #56]	; 0x38
 8002d62:	414b      	adcs	r3, r1
 8002d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d66:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002d6a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 8002d6e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002d72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d76:	fb03 f102 	mul.w	r1, r3, r2
 8002d7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002d7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	18ca      	adds	r2, r1, r3
 8002d88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d8c:	fba3 1303 	umull	r1, r3, r3, r3
 8002d90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002d94:	460b      	mov	r3, r1
 8002d96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9e:	18d3      	adds	r3, r2, r3
 8002da0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002da4:	4b58      	ldr	r3, [pc, #352]	; (8002f08 <BMP280_compensate_P_int64+0x2dc>)
 8002da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	17da      	asrs	r2, r3, #31
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002db6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8002dba:	462b      	mov	r3, r5
 8002dbc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	fb02 f203 	mul.w	r2, r2, r3
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	4621      	mov	r1, r4
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	fba2 1201 	umull	r1, r2, r2, r1
 8002dd8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002ddc:	460a      	mov	r2, r1
 8002dde:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8002de2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002de6:	4413      	add	r3, r2
 8002de8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002dec:	f04f 0000 	mov.w	r0, #0
 8002df0:	f04f 0100 	mov.w	r1, #0
 8002df4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8002df8:	4623      	mov	r3, r4
 8002dfa:	0a18      	lsrs	r0, r3, #8
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002e02:	462b      	mov	r3, r5
 8002e04:	1219      	asrs	r1, r3, #8
 8002e06:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <BMP280_compensate_P_int64+0x2e0>)
 8002e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	17da      	asrs	r2, r3, #31
 8002e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e1c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8002e20:	464a      	mov	r2, r9
 8002e22:	fb02 f203 	mul.w	r2, r2, r3
 8002e26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e2a:	4644      	mov	r4, r8
 8002e2c:	fb04 f303 	mul.w	r3, r4, r3
 8002e30:	441a      	add	r2, r3
 8002e32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e36:	4644      	mov	r4, r8
 8002e38:	fba3 4304 	umull	r4, r3, r3, r4
 8002e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002e40:	4623      	mov	r3, r4
 8002e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002e4a:	18d3      	adds	r3, r2, r3
 8002e4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002e5c:	464c      	mov	r4, r9
 8002e5e:	0323      	lsls	r3, r4, #12
 8002e60:	4644      	mov	r4, r8
 8002e62:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002e66:	4644      	mov	r4, r8
 8002e68:	0322      	lsls	r2, r4, #12
 8002e6a:	1884      	adds	r4, r0, r2
 8002e6c:	633c      	str	r4, [r7, #48]	; 0x30
 8002e6e:	eb41 0303 	adc.w	r3, r1, r3
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
 8002e74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002e78:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8002e7c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002e80:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002e84:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002e88:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002e8c:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <BMP280_compensate_P_int64+0x2e4>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e9c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ea6:	4642      	mov	r2, r8
 8002ea8:	fb02 f203 	mul.w	r2, r2, r3
 8002eac:	464b      	mov	r3, r9
 8002eae:	4621      	mov	r1, r4
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	4641      	mov	r1, r8
 8002eba:	fba2 1201 	umull	r1, r2, r2, r1
 8002ebe:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002ec8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ecc:	4413      	add	r3, r2
 8002ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002ede:	4629      	mov	r1, r5
 8002ee0:	104a      	asrs	r2, r1, #1
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	17cb      	asrs	r3, r1, #31
 8002ee6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 8002eea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	d110      	bne.n	8002f14 <BMP280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e154      	b.n	80031a0 <BMP280_compensate_P_int64+0x574>
 8002ef6:	bf00      	nop
 8002ef8:	20000818 	.word	0x20000818
 8002efc:	20000808 	.word	0x20000808
 8002f00:	20000806 	.word	0x20000806
 8002f04:	20000804 	.word	0x20000804
 8002f08:	20000802 	.word	0x20000802
 8002f0c:	20000800 	.word	0x20000800
 8002f10:	200007f6 	.word	0x200007f6

	p = 1048576-adc_P;
 8002f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f18:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002f1c:	17da      	asrs	r2, r3, #31
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f22:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002f26:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8002f2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f2e:	105b      	asrs	r3, r3, #1
 8002f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f38:	07db      	lsls	r3, r3, #31
 8002f3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002f42:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002f46:	4621      	mov	r1, r4
 8002f48:	1a89      	subs	r1, r1, r2
 8002f4a:	67b9      	str	r1, [r7, #120]	; 0x78
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	eb61 0303 	sbc.w	r3, r1, r3
 8002f52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f54:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f58:	4622      	mov	r2, r4
 8002f5a:	462b      	mov	r3, r5
 8002f5c:	1891      	adds	r1, r2, r2
 8002f5e:	6239      	str	r1, [r7, #32]
 8002f60:	415b      	adcs	r3, r3
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f68:	4621      	mov	r1, r4
 8002f6a:	1851      	adds	r1, r2, r1
 8002f6c:	61b9      	str	r1, [r7, #24]
 8002f6e:	4629      	mov	r1, r5
 8002f70:	414b      	adcs	r3, r1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002f80:	4649      	mov	r1, r9
 8002f82:	018b      	lsls	r3, r1, #6
 8002f84:	4641      	mov	r1, r8
 8002f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	018a      	lsls	r2, r1, #6
 8002f8e:	4641      	mov	r1, r8
 8002f90:	1889      	adds	r1, r1, r2
 8002f92:	6139      	str	r1, [r7, #16]
 8002f94:	4649      	mov	r1, r9
 8002f96:	eb43 0101 	adc.w	r1, r3, r1
 8002f9a:	6179      	str	r1, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002fa8:	4649      	mov	r1, r9
 8002faa:	008b      	lsls	r3, r1, #2
 8002fac:	4641      	mov	r1, r8
 8002fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	008a      	lsls	r2, r1, #2
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	462a      	mov	r2, r5
 8002fc6:	eb42 0303 	adc.w	r3, r2, r3
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002fd8:	4649      	mov	r1, r9
 8002fda:	008b      	lsls	r3, r1, #2
 8002fdc:	4641      	mov	r1, r8
 8002fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe2:	4641      	mov	r1, r8
 8002fe4:	008a      	lsls	r2, r1, #2
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	4622      	mov	r2, r4
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	673b      	str	r3, [r7, #112]	; 0x70
 8002ff2:	462b      	mov	r3, r5
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	eb42 0303 	adc.w	r3, r2, r3
 8002ffa:	677b      	str	r3, [r7, #116]	; 0x74
 8002ffc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003000:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003004:	f7fd fe28 	bl	8000c58 <__aeabi_ldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8003010:	4b66      	ldr	r3, [pc, #408]	; (80031ac <BMP280_compensate_P_int64+0x580>)
 8003012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003016:	b21b      	sxth	r3, r3
 8003018:	17da      	asrs	r2, r3, #31
 800301a:	66bb      	str	r3, [r7, #104]	; 0x68
 800301c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800301e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	0b50      	lsrs	r0, r2, #13
 800302c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003030:	1359      	asrs	r1, r3, #13
 8003032:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8003036:	462b      	mov	r3, r5
 8003038:	fb00 f203 	mul.w	r2, r0, r3
 800303c:	4623      	mov	r3, r4
 800303e:	fb03 f301 	mul.w	r3, r3, r1
 8003042:	4413      	add	r3, r2
 8003044:	4622      	mov	r2, r4
 8003046:	fba2 1200 	umull	r1, r2, r2, r0
 800304a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800304e:	460a      	mov	r2, r1
 8003050:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8003054:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003058:	4413      	add	r3, r2
 800305a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800305e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	0b50      	lsrs	r0, r2, #13
 800306c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003070:	1359      	asrs	r1, r3, #13
 8003072:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003076:	462b      	mov	r3, r5
 8003078:	fb00 f203 	mul.w	r2, r0, r3
 800307c:	4623      	mov	r3, r4
 800307e:	fb03 f301 	mul.w	r3, r3, r1
 8003082:	4413      	add	r3, r2
 8003084:	4622      	mov	r2, r4
 8003086:	fba2 1200 	umull	r1, r2, r2, r0
 800308a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800308e:	460a      	mov	r2, r1
 8003090:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8003094:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003098:	4413      	add	r3, r2
 800309a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80030aa:	4621      	mov	r1, r4
 80030ac:	0e4a      	lsrs	r2, r1, #25
 80030ae:	4629      	mov	r1, r5
 80030b0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80030b4:	4629      	mov	r1, r5
 80030b6:	164b      	asrs	r3, r1, #25
 80030b8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 80030bc:	4b3c      	ldr	r3, [pc, #240]	; (80031b0 <BMP280_compensate_P_int64+0x584>)
 80030be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	17da      	asrs	r2, r3, #31
 80030c6:	663b      	str	r3, [r7, #96]	; 0x60
 80030c8:	667a      	str	r2, [r7, #100]	; 0x64
 80030ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030d2:	462a      	mov	r2, r5
 80030d4:	fb02 f203 	mul.w	r2, r2, r3
 80030d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030dc:	4621      	mov	r1, r4
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80030e8:	4621      	mov	r1, r4
 80030ea:	fba2 1201 	umull	r1, r2, r2, r1
 80030ee:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80030f2:	460a      	mov	r2, r1
 80030f4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80030f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80030fc:	4413      	add	r3, r2
 80030fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800310e:	4621      	mov	r1, r4
 8003110:	0cca      	lsrs	r2, r1, #19
 8003112:	4629      	mov	r1, r5
 8003114:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003118:	4629      	mov	r1, r5
 800311a:	14cb      	asrs	r3, r1, #19
 800311c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 8003120:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003124:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003128:	1884      	adds	r4, r0, r2
 800312a:	65bc      	str	r4, [r7, #88]	; 0x58
 800312c:	eb41 0303 	adc.w	r3, r1, r3
 8003130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003132:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8003136:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800313a:	4621      	mov	r1, r4
 800313c:	1889      	adds	r1, r1, r2
 800313e:	6539      	str	r1, [r7, #80]	; 0x50
 8003140:	4629      	mov	r1, r5
 8003142:	eb43 0101 	adc.w	r1, r3, r1
 8003146:	6579      	str	r1, [r7, #84]	; 0x54
 8003148:	f04f 0000 	mov.w	r0, #0
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003154:	4623      	mov	r3, r4
 8003156:	0a18      	lsrs	r0, r3, #8
 8003158:	462b      	mov	r3, r5
 800315a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800315e:	462b      	mov	r3, r5
 8003160:	1219      	asrs	r1, r3, #8
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <BMP280_compensate_P_int64+0x588>)
 8003164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003168:	b21b      	sxth	r3, r3
 800316a:	17da      	asrs	r2, r3, #31
 800316c:	64bb      	str	r3, [r7, #72]	; 0x48
 800316e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800317c:	464c      	mov	r4, r9
 800317e:	0123      	lsls	r3, r4, #4
 8003180:	4644      	mov	r4, r8
 8003182:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003186:	4644      	mov	r4, r8
 8003188:	0122      	lsls	r2, r4, #4
 800318a:	1884      	adds	r4, r0, r2
 800318c:	603c      	str	r4, [r7, #0]
 800318e:	eb41 0303 	adc.w	r3, r1, r3
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003198:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110

	return (BMP280_U32_t)p;
 800319c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80031a6:	46bd      	mov	sp, r7
 80031a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ac:	2000080e 	.word	0x2000080e
 80031b0:	2000080c 	.word	0x2000080c
 80031b4:	2000080a 	.word	0x2000080a

080031b8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <bme280_compensate_H_int32+0xbc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80031c8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	039a      	lsls	r2, r3, #14
 80031ce:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <bme280_compensate_H_int32+0xc0>)
 80031d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d4:	051b      	lsls	r3, r3, #20
 80031d6:	1ad2      	subs	r2, r2, r3
 80031d8:	4b28      	ldr	r3, [pc, #160]	; (800327c <bme280_compensate_H_int32+0xc4>)
 80031da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031de:	4619      	mov	r1, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80031e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80031ec:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80031ee:	4a24      	ldr	r2, [pc, #144]	; (8003280 <bme280_compensate_H_int32+0xc8>)
 80031f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80031f4:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80031fc:	1292      	asrs	r2, r2, #10
 80031fe:	4921      	ldr	r1, [pc, #132]	; (8003284 <bme280_compensate_H_int32+0xcc>)
 8003200:	8809      	ldrh	r1, [r1, #0]
 8003202:	4608      	mov	r0, r1
 8003204:	68f9      	ldr	r1, [r7, #12]
 8003206:	fb00 f101 	mul.w	r1, r0, r1
 800320a:	12c9      	asrs	r1, r1, #11
 800320c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8003210:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8003214:	1292      	asrs	r2, r2, #10
 8003216:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800321a:	491b      	ldr	r1, [pc, #108]	; (8003288 <bme280_compensate_H_int32+0xd0>)
 800321c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003220:	fb01 f202 	mul.w	r2, r1, r2
 8003224:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8003228:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	13db      	asrs	r3, r3, #15
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	13d2      	asrs	r2, r2, #15
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <bme280_compensate_H_int32+0xd4>)
 8003240:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8003242:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8003246:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003254:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800325c:	bfa8      	it	ge
 800325e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8003262:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	131b      	asrs	r3, r3, #12
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	20000818 	.word	0x20000818
 8003278:	20000812 	.word	0x20000812
 800327c:	20000814 	.word	0x20000814
 8003280:	20000816 	.word	0x20000816
 8003284:	200007fa 	.word	0x200007fa
 8003288:	20000810 	.word	0x20000810
 800328c:	200007f8 	.word	0x200007f8

08003290 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8003294:	f7ff fc66 	bl	8002b64 <BMEReadRaw>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d163      	bne.n	8003366 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) TemperatureBMP = 0; // value in case temp measurement was disabled
 800329e:	4b39      	ldr	r3, [pc, #228]	; (8003384 <BME280_Measure+0xf4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a6:	d104      	bne.n	80032b2 <BME280_Measure+0x22>
 80032a8:	4b37      	ldr	r3, [pc, #220]	; (8003388 <BME280_Measure+0xf8>)
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e016      	b.n	80032e0 <BME280_Measure+0x50>
		  else
		  {
			  //Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
			  TemperatureBMP = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <BME280_Measure+0xf4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fc76 	bl	8002ba8 <BMP280_compensate_T_int32>
 80032bc:	4603      	mov	r3, r0
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f938 	bl	8000534 <__aeabi_i2d>
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	4b30      	ldr	r3, [pc, #192]	; (800338c <BME280_Measure+0xfc>)
 80032ca:	f7fd fac7 	bl	800085c <__aeabi_ddiv>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	f7fd fc6f 	bl	8000bb8 <__aeabi_d2f>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <BME280_Measure+0xf8>)
 80032de:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) PressureBMP = 0; // value in case temp measurement was disabled
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <BME280_Measure+0x100>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e8:	d104      	bne.n	80032f4 <BME280_Measure+0x64>
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <BME280_Measure+0x104>)
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e016      	b.n	8003322 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  //Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
			  PressureBMP = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <BME280_Measure+0x100>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fc97 	bl	8002c2c <BMP280_compensate_P_int64>
 80032fe:	4603      	mov	r3, r0
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f907 	bl	8000514 <__aeabi_ui2d>
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <BME280_Measure+0x108>)
 800330c:	f7fd faa6 	bl	800085c <__aeabi_ddiv>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	f7fd fc4e 	bl	8000bb8 <__aeabi_d2f>
 800331c:	4603      	mov	r3, r0
 800331e:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <BME280_Measure+0x104>)
 8003320:	6013      	str	r3, [r2, #0]
			  //Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) HumidityBMP = 0; // value in case temp measurement was disabled
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <BME280_Measure+0x10c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332a:	d104      	bne.n	8003336 <BME280_Measure+0xa6>
 800332c:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <BME280_Measure+0x110>)
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		TemperatureBMP = PressureBMP = HumidityBMP = 0;
	}
}
 8003334:	e023      	b.n	800337e <BME280_Measure+0xee>
			  HumidityBMP = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <BME280_Measure+0x10c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff3c 	bl	80031b8 <bme280_compensate_H_int32>
 8003340:	4603      	mov	r3, r0
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd f8e6 	bl	8000514 <__aeabi_ui2d>
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <BME280_Measure+0x114>)
 800334e:	f7fd fa85 	bl	800085c <__aeabi_ddiv>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	f7fd fc2d 	bl	8000bb8 <__aeabi_d2f>
 800335e:	4603      	mov	r3, r0
 8003360:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <BME280_Measure+0x110>)
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	e00b      	b.n	800337e <BME280_Measure+0xee>
		TemperatureBMP = PressureBMP = HumidityBMP = 0;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <BME280_Measure+0x110>)
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <BME280_Measure+0x110>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <BME280_Measure+0x104>)
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <BME280_Measure+0x104>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a03      	ldr	r2, [pc, #12]	; (8003388 <BME280_Measure+0xf8>)
 800337c:	6013      	str	r3, [r2, #0]
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200007e0 	.word	0x200007e0
 8003388:	200012d8 	.word	0x200012d8
 800338c:	40590000 	.word	0x40590000
 8003390:	200007e4 	.word	0x200007e4
 8003394:	200012dc 	.word	0x200012dc
 8003398:	40700000 	.word	0x40700000
 800339c:	200007e8 	.word	0x200007e8
 80033a0:	200012e0 	.word	0x200012e0
 80033a4:	40900000 	.word	0x40900000

080033a8 <CNY70_FlancosUp>:
	rpmCNY70= flancosLeidosCNY70; //Guardo el valor de las rpm en el ultimo minuto
	flancosLeidosCNY70= 0; //Reinicio el contador de flancos
}

void CNY70_FlancosUp(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
	flancosLeidosCNY70++; //Cuento cada revolucion del sensor
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <CNY70_FlancosUp+0x18>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a03      	ldr	r2, [pc, #12]	; (80033c0 <CNY70_FlancosUp+0x18>)
 80033b4:	6013      	str	r3, [r2, #0]
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	2000081c 	.word	0x2000081c
 80033c4:	00000000 	.word	0x00000000

080033c8 <CNY70_MedicionVelocidad>:

float CNY70_MedicionVelocidad(uint32_t rpm)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	return ( PI * DIAMETRO_EJE * rpm ) * 3.6/60; //Velocidad en m/s
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd f89f 	bl	8000514 <__aeabi_ui2d>
 80033d6:	a313      	add	r3, pc, #76	; (adr r3, 8003424 <CNY70_MedicionVelocidad+0x5c>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f7fd f914 	bl	8000608 <__aeabi_dmul>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	a310      	add	r3, pc, #64	; (adr r3, 800342c <CNY70_MedicionVelocidad+0x64>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd f90b 	bl	8000608 <__aeabi_dmul>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <CNY70_MedicionVelocidad+0x58>)
 8003400:	f7fd fa2c 	bl	800085c <__aeabi_ddiv>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7fd fbd4 	bl	8000bb8 <__aeabi_d2f>
 8003410:	4603      	mov	r3, r0
 8003412:	ee07 3a90 	vmov	s15, r3
}
 8003416:	eeb0 0a67 	vmov.f32	s0, s15
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	404e0000 	.word	0x404e0000
 8003424:	74bc6a80 	.word	0x74bc6a80
 8003428:	3fd41893 	.word	0x3fd41893
 800342c:	cccccccd 	.word	0xcccccccd
 8003430:	400ccccc 	.word	0x400ccccc

08003434 <Set_Pin_Output>:
//----------------------------------------------------------------------//
//---------- Funciones -------------------------------------------------//
//----------------------------------------------------------------------//

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003454:	2301      	movs	r3, #1
 8003456:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4619      	mov	r1, r3
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f003 f874 	bl	8006550 <HAL_GPIO_Init>
}
 8003468:	bf00      	nop
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 030c 	add.w	r3, r7, #12
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003498:	f107 030c 	add.w	r3, r7, #12
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f003 f856 	bl	8006550 <HAL_GPIO_Init>
}
 80034a4:	bf00      	nop
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_IC_CaptureCallback>:
//-------------------------------------------//
// Intento de implementacion no bloqueante
//-------------------------------------------//

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	//Sensor de viento
	CNY70_FlancosUp();
 80034b4:	f7ff ff78 	bl	80033a8 <CNY70_FlancosUp>

	//DHT22
	if (enableCapture && iindex <= 82)
 80034b8:	4b2c      	ldr	r3, [pc, #176]	; (800356c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d050      	beq.n	8003562 <HAL_TIM_IC_CaptureCallback+0xb6>
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b52      	cmp	r3, #82	; 0x52
 80034c6:	d84c      	bhi.n	8003562 <HAL_TIM_IC_CaptureCallback+0xb6>
	{
		capture = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1); // canal y handler de timer.
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80034d2:	701a      	strb	r2, [r3, #0]

		if (firstCapture == 0)
 80034d4:	4b29      	ldr	r3, [pc, #164]	; (800357c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <HAL_TIM_IC_CaptureCallback+0x3a>
			firstCapture = capture;
 80034dc:	4b26      	ldr	r3, [pc, #152]	; (8003578 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	4b26      	ldr	r3, [pc, #152]	; (800357c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80034e2:	701a      	strb	r2, [r3, #0]
				iindex++;
			else
				iindex = 0;
		}
	}
}
 80034e4:	e03d      	b.n	8003562 <HAL_TIM_IC_CaptureCallback+0xb6>
			secondCapture = capture;
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80034ec:	701a      	strb	r2, [r3, #0]
			if(secondCapture > firstCapture)
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d908      	bls.n	800350c <HAL_TIM_IC_CaptureCallback+0x60>
				pulseTime = secondCapture - firstCapture;
 80034fa:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	4b1f      	ldr	r3, [pc, #124]	; (800357c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	e00d      	b.n	8003528 <HAL_TIM_IC_CaptureCallback+0x7c>
				pulseTime = __HAL_TIM_GET_AUTORELOAD(&htim3) + secondCapture - firstCapture;
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4413      	add	r3, r2
 800351a:	b2da      	uxtb	r2, r3
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	b2da      	uxtb	r2, r3
 8003524:	4b17      	ldr	r3, [pc, #92]	; (8003584 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003526:	701a      	strb	r2, [r3, #0]
			firstCapture = secondCapture;
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800352e:	701a      	strb	r2, [r3, #0]
			timeArray[iindex] = pulseTime;
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003538:	7819      	ldrb	r1, [r3, #0]
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800353c:	5499      	strb	r1, [r3, r2]
			if(timeArray[0] > 70 && timeArray[0] < 90)
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b46      	cmp	r3, #70	; 0x46
 8003544:	d90a      	bls.n	800355c <HAL_TIM_IC_CaptureCallback+0xb0>
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b59      	cmp	r3, #89	; 0x59
 800354c:	d806      	bhi.n	800355c <HAL_TIM_IC_CaptureCallback+0xb0>
				iindex++;
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003558:	701a      	strb	r2, [r3, #0]
}
 800355a:	e002      	b.n	8003562 <HAL_TIM_IC_CaptureCallback+0xb6>
				iindex = 0;
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000829 	.word	0x20000829
 8003570:	20000824 	.word	0x20000824
 8003574:	20000d74 	.word	0x20000d74
 8003578:	20000825 	.word	0x20000825
 800357c:	20000826 	.word	0x20000826
 8003580:	20000827 	.word	0x20000827
 8003584:	20000828 	.word	0x20000828
 8003588:	2000082c 	.word	0x2000082c

0800358c <DHT22_Recieve>:

void DHT22_Recieve(float *Humidity)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	static uint8_t j = 0;

	if(timeArray[0] > 70 && timeArray[0] < 90)
 8003594:	4b96      	ldr	r3, [pc, #600]	; (80037f0 <DHT22_Recieve+0x264>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b46      	cmp	r3, #70	; 0x46
 800359a:	f240 80bd 	bls.w	8003718 <DHT22_Recieve+0x18c>
 800359e:	4b94      	ldr	r3, [pc, #592]	; (80037f0 <DHT22_Recieve+0x264>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b59      	cmp	r3, #89	; 0x59
 80035a4:	f200 80b8 	bhi.w	8003718 <DHT22_Recieve+0x18c>
	{
		if(timeArray[1] > 70 && timeArray[1] < 90)
 80035a8:	4b91      	ldr	r3, [pc, #580]	; (80037f0 <DHT22_Recieve+0x264>)
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	2b46      	cmp	r3, #70	; 0x46
 80035ae:	f240 80b3 	bls.w	8003718 <DHT22_Recieve+0x18c>
 80035b2:	4b8f      	ldr	r3, [pc, #572]	; (80037f0 <DHT22_Recieve+0x264>)
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	2b59      	cmp	r3, #89	; 0x59
 80035b8:	f200 80ae 	bhi.w	8003718 <DHT22_Recieve+0x18c>
		{
			for(uint8_t i = 2; i <= 17; i += 2)
 80035bc:	2302      	movs	r3, #2
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e04d      	b.n	800365e <DHT22_Recieve+0xd2>
			{
				if(timeArray[i] > 40 && timeArray[i] < 60)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	4a8a      	ldr	r2, [pc, #552]	; (80037f0 <DHT22_Recieve+0x264>)
 80035c6:	5cd3      	ldrb	r3, [r2, r3]
 80035c8:	2b28      	cmp	r3, #40	; 0x28
 80035ca:	d93f      	bls.n	800364c <DHT22_Recieve+0xc0>
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	4a88      	ldr	r2, [pc, #544]	; (80037f0 <DHT22_Recieve+0x264>)
 80035d0:	5cd3      	ldrb	r3, [r2, r3]
 80035d2:	2b3b      	cmp	r3, #59	; 0x3b
 80035d4:	d83a      	bhi.n	800364c <DHT22_Recieve+0xc0>
				{
					if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	3301      	adds	r3, #1
 80035da:	4a85      	ldr	r2, [pc, #532]	; (80037f0 <DHT22_Recieve+0x264>)
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	2b19      	cmp	r3, #25
 80035e0:	d918      	bls.n	8003614 <DHT22_Recieve+0x88>
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	3301      	adds	r3, #1
 80035e6:	4a82      	ldr	r2, [pc, #520]	; (80037f0 <DHT22_Recieve+0x264>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	2b1c      	cmp	r3, #28
 80035ec:	d812      	bhi.n	8003614 <DHT22_Recieve+0x88>
					{
						Rh_byte1 &= ~(1<<(7 - j));   // write 0
 80035ee:	4b81      	ldr	r3, [pc, #516]	; (80037f4 <DHT22_Recieve+0x268>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2201      	movs	r2, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	b25a      	sxtb	r2, r3
 8003602:	4b7d      	ldr	r3, [pc, #500]	; (80037f8 <DHT22_Recieve+0x26c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	b25b      	sxtb	r3, r3
 8003608:	4013      	ands	r3, r2
 800360a:	b25b      	sxtb	r3, r3
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4b7a      	ldr	r3, [pc, #488]	; (80037f8 <DHT22_Recieve+0x26c>)
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e01b      	b.n	800364c <DHT22_Recieve+0xc0>
					}
					else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	3301      	adds	r3, #1
 8003618:	4a75      	ldr	r2, [pc, #468]	; (80037f0 <DHT22_Recieve+0x264>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	2b3c      	cmp	r3, #60	; 0x3c
 800361e:	d915      	bls.n	800364c <DHT22_Recieve+0xc0>
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	3301      	adds	r3, #1
 8003624:	4a72      	ldr	r2, [pc, #456]	; (80037f0 <DHT22_Recieve+0x264>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	2b4f      	cmp	r3, #79	; 0x4f
 800362a:	d80f      	bhi.n	800364c <DHT22_Recieve+0xc0>
					{
						Rh_byte1 |= (1<<(7 - j));
 800362c:	4b71      	ldr	r3, [pc, #452]	; (80037f4 <DHT22_Recieve+0x268>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f1c3 0307 	rsb	r3, r3, #7
 8003634:	2201      	movs	r2, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	b25a      	sxtb	r2, r3
 800363c:	4b6e      	ldr	r3, [pc, #440]	; (80037f8 <DHT22_Recieve+0x26c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b25b      	sxtb	r3, r3
 8003642:	4313      	orrs	r3, r2
 8003644:	b25b      	sxtb	r3, r3
 8003646:	b2da      	uxtb	r2, r3
 8003648:	4b6b      	ldr	r3, [pc, #428]	; (80037f8 <DHT22_Recieve+0x26c>)
 800364a:	701a      	strb	r2, [r3, #0]
					}
				}

				j++;
 800364c:	4b69      	ldr	r3, [pc, #420]	; (80037f4 <DHT22_Recieve+0x268>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <DHT22_Recieve+0x268>)
 8003656:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 2; i <= 17; i += 2)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	3302      	adds	r3, #2
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b11      	cmp	r3, #17
 8003662:	d9ae      	bls.n	80035c2 <DHT22_Recieve+0x36>
			}

			j = 0;
 8003664:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <DHT22_Recieve+0x268>)
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 18; i <= 33; i += 2)
 800366a:	2312      	movs	r3, #18
 800366c:	73bb      	strb	r3, [r7, #14]
 800366e:	e04d      	b.n	800370c <DHT22_Recieve+0x180>
			{
				if(timeArray[i] > 40 && timeArray[i] < 60)
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	4a5f      	ldr	r2, [pc, #380]	; (80037f0 <DHT22_Recieve+0x264>)
 8003674:	5cd3      	ldrb	r3, [r2, r3]
 8003676:	2b28      	cmp	r3, #40	; 0x28
 8003678:	d93f      	bls.n	80036fa <DHT22_Recieve+0x16e>
 800367a:	7bbb      	ldrb	r3, [r7, #14]
 800367c:	4a5c      	ldr	r2, [pc, #368]	; (80037f0 <DHT22_Recieve+0x264>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	2b3b      	cmp	r3, #59	; 0x3b
 8003682:	d83a      	bhi.n	80036fa <DHT22_Recieve+0x16e>
				{
					if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	3301      	adds	r3, #1
 8003688:	4a59      	ldr	r2, [pc, #356]	; (80037f0 <DHT22_Recieve+0x264>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	2b19      	cmp	r3, #25
 800368e:	d918      	bls.n	80036c2 <DHT22_Recieve+0x136>
 8003690:	7bbb      	ldrb	r3, [r7, #14]
 8003692:	3301      	adds	r3, #1
 8003694:	4a56      	ldr	r2, [pc, #344]	; (80037f0 <DHT22_Recieve+0x264>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	2b1c      	cmp	r3, #28
 800369a:	d812      	bhi.n	80036c2 <DHT22_Recieve+0x136>
					{
						Rh_byte2 &= ~(1<<(7 - j));   // write 0
 800369c:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <DHT22_Recieve+0x268>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	f1c3 0307 	rsb	r3, r3, #7
 80036a4:	2201      	movs	r2, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	b25a      	sxtb	r2, r3
 80036b0:	4b52      	ldr	r3, [pc, #328]	; (80037fc <DHT22_Recieve+0x270>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b25b      	sxtb	r3, r3
 80036b6:	4013      	ands	r3, r2
 80036b8:	b25b      	sxtb	r3, r3
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <DHT22_Recieve+0x270>)
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e01b      	b.n	80036fa <DHT22_Recieve+0x16e>
					}
					else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 80036c2:	7bbb      	ldrb	r3, [r7, #14]
 80036c4:	3301      	adds	r3, #1
 80036c6:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <DHT22_Recieve+0x264>)
 80036c8:	5cd3      	ldrb	r3, [r2, r3]
 80036ca:	2b3c      	cmp	r3, #60	; 0x3c
 80036cc:	d915      	bls.n	80036fa <DHT22_Recieve+0x16e>
 80036ce:	7bbb      	ldrb	r3, [r7, #14]
 80036d0:	3301      	adds	r3, #1
 80036d2:	4a47      	ldr	r2, [pc, #284]	; (80037f0 <DHT22_Recieve+0x264>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	2b4f      	cmp	r3, #79	; 0x4f
 80036d8:	d80f      	bhi.n	80036fa <DHT22_Recieve+0x16e>
					{
						Rh_byte2 |= (1<<(7 - j));
 80036da:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <DHT22_Recieve+0x268>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2201      	movs	r2, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	b25a      	sxtb	r2, r3
 80036ea:	4b44      	ldr	r3, [pc, #272]	; (80037fc <DHT22_Recieve+0x270>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b25b      	sxtb	r3, r3
 80036f0:	4313      	orrs	r3, r2
 80036f2:	b25b      	sxtb	r3, r3
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <DHT22_Recieve+0x270>)
 80036f8:	701a      	strb	r2, [r3, #0]
					}
				}

				j++;
 80036fa:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <DHT22_Recieve+0x268>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <DHT22_Recieve+0x268>)
 8003704:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 18; i <= 33; i += 2)
 8003706:	7bbb      	ldrb	r3, [r7, #14]
 8003708:	3302      	adds	r3, #2
 800370a:	73bb      	strb	r3, [r7, #14]
 800370c:	7bbb      	ldrb	r3, [r7, #14]
 800370e:	2b21      	cmp	r3, #33	; 0x21
 8003710:	d9ae      	bls.n	8003670 <DHT22_Recieve+0xe4>
			}

			j = 0;
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <DHT22_Recieve+0x268>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]

		}
	}

	if((timeArray[0] > 70 && timeArray[0] < 90) || (timeArray[1] < 70 && timeArray[1] > 90))
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <DHT22_Recieve+0x264>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b46      	cmp	r3, #70	; 0x46
 800371e:	d903      	bls.n	8003728 <DHT22_Recieve+0x19c>
 8003720:	4b33      	ldr	r3, [pc, #204]	; (80037f0 <DHT22_Recieve+0x264>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b59      	cmp	r3, #89	; 0x59
 8003726:	d909      	bls.n	800373c <DHT22_Recieve+0x1b0>
 8003728:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <DHT22_Recieve+0x264>)
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b45      	cmp	r3, #69	; 0x45
 800372e:	f200 80bb 	bhi.w	80038a8 <DHT22_Recieve+0x31c>
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <DHT22_Recieve+0x264>)
 8003734:	785b      	ldrb	r3, [r3, #1]
 8003736:	2b5a      	cmp	r3, #90	; 0x5a
 8003738:	f240 80b6 	bls.w	80038a8 <DHT22_Recieve+0x31c>
	{
		for(uint8_t i = 1; i <= 16; i += 2)
 800373c:	2301      	movs	r3, #1
 800373e:	737b      	strb	r3, [r7, #13]
 8003740:	e04d      	b.n	80037de <DHT22_Recieve+0x252>
		{
			if(timeArray[i] > 40 && timeArray[i] < 60)
 8003742:	7b7b      	ldrb	r3, [r7, #13]
 8003744:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <DHT22_Recieve+0x264>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	2b28      	cmp	r3, #40	; 0x28
 800374a:	d93f      	bls.n	80037cc <DHT22_Recieve+0x240>
 800374c:	7b7b      	ldrb	r3, [r7, #13]
 800374e:	4a28      	ldr	r2, [pc, #160]	; (80037f0 <DHT22_Recieve+0x264>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	2b3b      	cmp	r3, #59	; 0x3b
 8003754:	d83a      	bhi.n	80037cc <DHT22_Recieve+0x240>
			{
				if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 8003756:	7b7b      	ldrb	r3, [r7, #13]
 8003758:	3301      	adds	r3, #1
 800375a:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <DHT22_Recieve+0x264>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	2b19      	cmp	r3, #25
 8003760:	d918      	bls.n	8003794 <DHT22_Recieve+0x208>
 8003762:	7b7b      	ldrb	r3, [r7, #13]
 8003764:	3301      	adds	r3, #1
 8003766:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <DHT22_Recieve+0x264>)
 8003768:	5cd3      	ldrb	r3, [r2, r3]
 800376a:	2b1c      	cmp	r3, #28
 800376c:	d812      	bhi.n	8003794 <DHT22_Recieve+0x208>
				{
					Rh_byte1 &= ~(1<<(7 - j));   // write 0
 800376e:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <DHT22_Recieve+0x268>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	f1c3 0307 	rsb	r3, r3, #7
 8003776:	2201      	movs	r2, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	b25b      	sxtb	r3, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	b25a      	sxtb	r2, r3
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <DHT22_Recieve+0x26c>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b25b      	sxtb	r3, r3
 8003788:	4013      	ands	r3, r2
 800378a:	b25b      	sxtb	r3, r3
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <DHT22_Recieve+0x26c>)
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e01b      	b.n	80037cc <DHT22_Recieve+0x240>
				}
				else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 8003794:	7b7b      	ldrb	r3, [r7, #13]
 8003796:	3301      	adds	r3, #1
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <DHT22_Recieve+0x264>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	2b3c      	cmp	r3, #60	; 0x3c
 800379e:	d915      	bls.n	80037cc <DHT22_Recieve+0x240>
 80037a0:	7b7b      	ldrb	r3, [r7, #13]
 80037a2:	3301      	adds	r3, #1
 80037a4:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <DHT22_Recieve+0x264>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	2b4f      	cmp	r3, #79	; 0x4f
 80037aa:	d80f      	bhi.n	80037cc <DHT22_Recieve+0x240>
				{
					Rh_byte1 |= (1<<(7 - j));
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <DHT22_Recieve+0x268>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f1c3 0307 	rsb	r3, r3, #7
 80037b4:	2201      	movs	r2, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	b25a      	sxtb	r2, r3
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <DHT22_Recieve+0x26c>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b25b      	sxtb	r3, r3
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <DHT22_Recieve+0x26c>)
 80037ca:	701a      	strb	r2, [r3, #0]
				}
			}

			j++;
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <DHT22_Recieve+0x268>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <DHT22_Recieve+0x268>)
 80037d6:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 1; i <= 16; i += 2)
 80037d8:	7b7b      	ldrb	r3, [r7, #13]
 80037da:	3302      	adds	r3, #2
 80037dc:	737b      	strb	r3, [r7, #13]
 80037de:	7b7b      	ldrb	r3, [r7, #13]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d9ae      	bls.n	8003742 <DHT22_Recieve+0x1b6>
		}

		j = 0;
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <DHT22_Recieve+0x268>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 17; i <= 32; i += 2)
 80037ea:	2311      	movs	r3, #17
 80037ec:	733b      	strb	r3, [r7, #12]
 80037ee:	e055      	b.n	800389c <DHT22_Recieve+0x310>
 80037f0:	2000082c 	.word	0x2000082c
 80037f4:	20000898 	.word	0x20000898
 80037f8:	20000894 	.word	0x20000894
 80037fc:	20000895 	.word	0x20000895
		{
			if(timeArray[i] > 40 && timeArray[i] < 60)
 8003800:	7b3b      	ldrb	r3, [r7, #12]
 8003802:	4a3b      	ldr	r2, [pc, #236]	; (80038f0 <DHT22_Recieve+0x364>)
 8003804:	5cd3      	ldrb	r3, [r2, r3]
 8003806:	2b28      	cmp	r3, #40	; 0x28
 8003808:	d93f      	bls.n	800388a <DHT22_Recieve+0x2fe>
 800380a:	7b3b      	ldrb	r3, [r7, #12]
 800380c:	4a38      	ldr	r2, [pc, #224]	; (80038f0 <DHT22_Recieve+0x364>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	2b3b      	cmp	r3, #59	; 0x3b
 8003812:	d83a      	bhi.n	800388a <DHT22_Recieve+0x2fe>
			{
				if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 8003814:	7b3b      	ldrb	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	4a35      	ldr	r2, [pc, #212]	; (80038f0 <DHT22_Recieve+0x364>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	2b19      	cmp	r3, #25
 800381e:	d918      	bls.n	8003852 <DHT22_Recieve+0x2c6>
 8003820:	7b3b      	ldrb	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	4a32      	ldr	r2, [pc, #200]	; (80038f0 <DHT22_Recieve+0x364>)
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	2b1c      	cmp	r3, #28
 800382a:	d812      	bhi.n	8003852 <DHT22_Recieve+0x2c6>
				{
					Rh_byte2 &= ~(1<<(7 - j));   // write 0
 800382c:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <DHT22_Recieve+0x368>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	f1c3 0307 	rsb	r3, r3, #7
 8003834:	2201      	movs	r2, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	b25b      	sxtb	r3, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	b25a      	sxtb	r2, r3
 8003840:	4b2d      	ldr	r3, [pc, #180]	; (80038f8 <DHT22_Recieve+0x36c>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b25b      	sxtb	r3, r3
 8003846:	4013      	ands	r3, r2
 8003848:	b25b      	sxtb	r3, r3
 800384a:	b2da      	uxtb	r2, r3
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <DHT22_Recieve+0x36c>)
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e01b      	b.n	800388a <DHT22_Recieve+0x2fe>
				}
				else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 8003852:	7b3b      	ldrb	r3, [r7, #12]
 8003854:	3301      	adds	r3, #1
 8003856:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <DHT22_Recieve+0x364>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	2b3c      	cmp	r3, #60	; 0x3c
 800385c:	d915      	bls.n	800388a <DHT22_Recieve+0x2fe>
 800385e:	7b3b      	ldrb	r3, [r7, #12]
 8003860:	3301      	adds	r3, #1
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <DHT22_Recieve+0x364>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	2b4f      	cmp	r3, #79	; 0x4f
 8003868:	d80f      	bhi.n	800388a <DHT22_Recieve+0x2fe>
				{
					Rh_byte2 |= (1<<(7 - j));
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <DHT22_Recieve+0x368>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2201      	movs	r2, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	b25a      	sxtb	r2, r3
 800387a:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <DHT22_Recieve+0x36c>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b25b      	sxtb	r3, r3
 8003880:	4313      	orrs	r3, r2
 8003882:	b25b      	sxtb	r3, r3
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <DHT22_Recieve+0x36c>)
 8003888:	701a      	strb	r2, [r3, #0]
				}
			}

			j++;
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <DHT22_Recieve+0x368>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <DHT22_Recieve+0x368>)
 8003894:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 17; i <= 32; i += 2)
 8003896:	7b3b      	ldrb	r3, [r7, #12]
 8003898:	3302      	adds	r3, #2
 800389a:	733b      	strb	r3, [r7, #12]
 800389c:	7b3b      	ldrb	r3, [r7, #12]
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d9ae      	bls.n	8003800 <DHT22_Recieve+0x274>
		}

		j = 0;
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <DHT22_Recieve+0x368>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
	}

	RH = ((Rh_byte1<<8)|Rh_byte2);
 80038a8:	4b14      	ldr	r3, [pc, #80]	; (80038fc <DHT22_Recieve+0x370>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	b21a      	sxth	r2, r3
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <DHT22_Recieve+0x36c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b21b      	sxth	r3, r3
 80038b6:	4313      	orrs	r3, r2
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <DHT22_Recieve+0x374>)
 80038be:	801a      	strh	r2, [r3, #0]
	*Humidity = (float) (RH/10.0);
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <DHT22_Recieve+0x374>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fe35 	bl	8000534 <__aeabi_i2d>
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <DHT22_Recieve+0x378>)
 80038d0:	f7fc ffc4 	bl	800085c <__aeabi_ddiv>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7fd f96c 	bl	8000bb8 <__aeabi_d2f>
 80038e0:	4602      	mov	r2, r0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000082c 	.word	0x2000082c
 80038f4:	20000898 	.word	0x20000898
 80038f8:	20000895 	.word	0x20000895
 80038fc:	20000894 	.word	0x20000894
 8003900:	20000896 	.word	0x20000896
 8003904:	40240000 	.word	0x40240000

08003908 <DHT22_Read_Humidity>:

void DHT22_Read_Humidity (float *Humidity)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	if(iindex > 80)
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <DHT22_Read_Humidity+0x58>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b50      	cmp	r3, #80	; 0x50
 8003916:	d914      	bls.n	8003942 <DHT22_Read_Humidity+0x3a>
	{
		DHT22_Recieve(Humidity);				// Funcion para procesar los datos obtenidos provenientes de la callback
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fe37 	bl	800358c <DHT22_Recieve>

		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 800391e:	2100      	movs	r1, #0
 8003920:	4810      	ldr	r0, [pc, #64]	; (8003964 <DHT22_Read_Humidity+0x5c>)
 8003922:	f008 fcf3 	bl	800c30c <HAL_TIM_IC_Stop_IT>

		enableCapture = 0;
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <DHT22_Read_Humidity+0x60>)
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]

		iindex = 0;
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <DHT22_Read_Humidity+0x58>)
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]

		memset(timeArray,0x00,100);
 8003932:	2264      	movs	r2, #100	; 0x64
 8003934:	2100      	movs	r1, #0
 8003936:	480d      	ldr	r0, [pc, #52]	; (800396c <DHT22_Read_Humidity+0x64>)
 8003938:	f010 fc91 	bl	801425e <memset>

		start = 0;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <DHT22_Read_Humidity+0x68>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
	}

	vTaskDelay(2000);
 8003942:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003946:	f00e fc27 	bl	8012198 <vTaskDelay>

	Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	4809      	ldr	r0, [pc, #36]	; (8003974 <DHT22_Read_Humidity+0x6c>)
 800394e:	f7ff fd71 	bl	8003434 <Set_Pin_Output>

	HAL_TIM_Base_Start_IT(&htim4);
 8003952:	4809      	ldr	r0, [pc, #36]	; (8003978 <DHT22_Read_Humidity+0x70>)
 8003954:	f008 fad6 	bl	800bf04 <HAL_TIM_Base_Start_IT>

}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000824 	.word	0x20000824
 8003964:	20000d74 	.word	0x20000d74
 8003968:	20000829 	.word	0x20000829
 800396c:	2000082c 	.word	0x2000082c
 8003970:	20000890 	.word	0x20000890
 8003974:	40020000 	.word	0x40020000
 8003978:	20000dbc 	.word	0x20000dbc
 800397c:	00000000 	.word	0x00000000

08003980 <LM35_Read_Temperature>:
 *  Created on: Sep 28, 2023
 *      Author: axu_n
 */

float LM35_Read_Temperature(unsigned int Temp_ADC)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	return ((330.0 * Temp_ADC)/4095);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fc fdc3 	bl	8000514 <__aeabi_ui2d>
 800398e:	a30e      	add	r3, pc, #56	; (adr r3, 80039c8 <LM35_Read_Temperature+0x48>)
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f7fc fe38 	bl	8000608 <__aeabi_dmul>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	a30b      	add	r3, pc, #44	; (adr r3, 80039d0 <LM35_Read_Temperature+0x50>)
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f7fc ff59 	bl	800085c <__aeabi_ddiv>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fd f901 	bl	8000bb8 <__aeabi_d2f>
 80039b6:	4603      	mov	r3, r0
 80039b8:	ee07 3a90 	vmov	s15, r3
}
 80039bc:	eeb0 0a67 	vmov.f32	s0, s15
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	00000000 	.word	0x00000000
 80039cc:	4074a000 	.word	0x4074a000
 80039d0:	00000000 	.word	0x00000000
 80039d4:	40affe00 	.word	0x40affe00

080039d8 <MQ135_NivelContaminacion>:

	GasesDetectados[0]= SCA_CO2 * pow(Rs_R0, EXP_CO2); //Concentracion CO2
}

uint32_t MQ135_NivelContaminacion(uint32_t cuentas)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	return cuentas * 100/4095;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2264      	movs	r2, #100	; 0x64
 80039e4:	fb03 f202 	mul.w	r2, r3, r2
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <MQ135_NivelContaminacion+0x2c>)
 80039ea:	fba3 1302 	umull	r1, r3, r3, r2
 80039ee:	1ad2      	subs	r2, r2, r3
 80039f0:	0852      	lsrs	r2, r2, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	0adb      	lsrs	r3, r3, #11
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	00100101 	.word	0x00100101

08003a08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a07      	ldr	r2, [pc, #28]	; (8003a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4a06      	ldr	r2, [pc, #24]	; (8003a38 <vApplicationGetIdleTaskMemory+0x30>)
 8003a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	2000089c 	.word	0x2000089c
 8003a38:	20000950 	.word	0x20000950

08003a3c <HAL_I2C_MemRxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	BaseType_t CambioContexto= pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
	if(hi2c == &hi2c1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_I2C_MemRxCpltCallback+0x88>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d134      	bne.n	8003aba <HAL_I2C_MemRxCpltCallback+0x7e>
	{
		/* Calculate the Raw data for the parameters
		* Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		*/
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	031a      	lsls	r2, r3, #12
 8003a56:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8003a60:	7892      	ldrb	r2, [r2, #2]
 8003a62:	0912      	lsrs	r2, r2, #4
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	4313      	orrs	r3, r2
 8003a68:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_I2C_MemRxCpltCallback+0x90>)
 8003a6a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8003a6e:	78db      	ldrb	r3, [r3, #3]
 8003a70:	031a      	lsls	r2, r3, #12
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8003a74:	791b      	ldrb	r3, [r3, #4]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8003a7c:	7952      	ldrb	r2, [r2, #5]
 8003a7e:	0912      	lsrs	r2, r2, #4
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	4313      	orrs	r3, r2
 8003a84:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <HAL_I2C_MemRxCpltCallback+0x94>)
 8003a86:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8003a8a:	799b      	ldrb	r3, [r3, #6]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ac8 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8003a90:	79d2      	ldrb	r2, [r2, #7]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	4a0f      	ldr	r2, [pc, #60]	; (8003ad4 <HAL_I2C_MemRxCpltCallback+0x98>)
 8003a96:	6013      	str	r3, [r2, #0]

		xSemaphoreGiveFromISR(SEM_I2C, pdFALSE);
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f00d ff34 	bl	801190c <xQueueGiveFromISR>
		portYIELD_FROM_ISR(CambioContexto);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_I2C_MemRxCpltCallback+0x7e>
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_I2C_MemRxCpltCallback+0xa0>)
 8003aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	f3bf 8f6f 	isb	sy
	}
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000bf8 	.word	0x20000bf8
 8003ac8:	200007ec 	.word	0x200007ec
 8003acc:	200007e4 	.word	0x200007e4
 8003ad0:	200007e0 	.word	0x200007e0
 8003ad4:	200007e8 	.word	0x200007e8
 8003ad8:	20001298 	.word	0x20001298
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	float result;
	BaseType_t CambioContexto= pdFALSE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]

	result = (tmp[0] << 8) | (tmp[1]);
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8003af4:	7852      	ldrb	r2, [r2, #1]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b00:	edc7 7a02 	vstr	s15, [r7, #8]

	LuzDetectada = result / (float)BH1750_CONVERSION_FACTOR;
 8003b04:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b08:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003b44 <HAL_I2C_MasterRxCpltCallback+0x64>
 8003b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_I2C_MasterRxCpltCallback+0x68>)
 8003b12:	edc3 7a00 	vstr	s15, [r3]

	xSemaphoreGiveFromISR(SEM_I2C, pdFALSE);
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_I2C_MasterRxCpltCallback+0x6c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f00d fef5 	bl	801190c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(CambioContexto);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_I2C_MasterRxCpltCallback+0x58>
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_I2C_MasterRxCpltCallback+0x70>)
 8003b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	f3bf 8f6f 	isb	sy
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	200007dc 	.word	0x200007dc
 8003b44:	3f99999a 	.word	0x3f99999a
 8003b48:	200012e4 	.word	0x200012e4
 8003b4c:	20001298 	.word	0x20001298
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <Set_Time>:
{
	CNY70_FlancosUp();
}*/

void Set_Time(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
	/** Initialize RTC and set the Time and Date
	*/

	RTC_TimeTypeDef sTime = {0};
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8003b68:	2300      	movs	r3, #0
 8003b6a:	603b      	str	r3, [r7, #0]

	sTime.Hours = 0x13;
 8003b6c:	2313      	movs	r3, #19
 8003b6e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0F;
 8003b70:	230f      	movs	r3, #15
 8003b72:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	2201      	movs	r2, #1
 8003b84:	4619      	mov	r1, r3
 8003b86:	4812      	ldr	r0, [pc, #72]	; (8003bd0 <Set_Time+0x7c>)
 8003b88:	f007 fd88 	bl	800b69c <HAL_RTC_SetTime>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <Set_Time+0x42>
	{
		Error_Handler();
 8003b92:	f000 ff09 	bl	80049a8 <Error_Handler>
	}

	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8003b96:	2305      	movs	r3, #5
 8003b98:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1A;
 8003b9e:	231a      	movs	r3, #26
 8003ba0:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x7E8;
 8003ba2:	23e8      	movs	r3, #232	; 0xe8
 8003ba4:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4619      	mov	r1, r3
 8003bac:	4808      	ldr	r0, [pc, #32]	; (8003bd0 <Set_Time+0x7c>)
 8003bae:	f007 fe6d 	bl	800b88c <HAL_RTC_SetDate>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <Set_Time+0x68>
	{
		Error_Handler();
 8003bb8:	f000 fef6 	bl	80049a8 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8003bbc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4803      	ldr	r0, [pc, #12]	; (8003bd0 <Set_Time+0x7c>)
 8003bc4:	f008 f91c 	bl	800be00 <HAL_RTCEx_BKUPWrite>
}
 8003bc8:	bf00      	nop
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000d0c 	.word	0x20000d0c

08003bd4 <Set_Alarm>:

void Set_Alarm (void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af00      	add	r7, sp, #0

	RTC_AlarmTypeDef sAlarm = {0};
 8003bda:	463b      	mov	r3, r7
 8003bdc:	2228      	movs	r2, #40	; 0x28
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f010 fb3c 	bl	801425e <memset>

	/** Enable the Alarm A
	*/
	sAlarm.AlarmTime.Hours = 0x0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8003c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003c16:	463b      	mov	r3, r7
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4805      	ldr	r0, [pc, #20]	; (8003c34 <Set_Alarm+0x60>)
 8003c1e:	f007 ff08 	bl	800ba32 <HAL_RTC_SetAlarm>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <Set_Alarm+0x58>
	{
		Error_Handler();
 8003c28:	f000 febe 	bl	80049a8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */
}
 8003c2c:	bf00      	nop
 8003c2e:	3728      	adds	r7, #40	; 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000d0c 	.word	0x20000d0c

08003c38 <Task_Data_Display>:
    }
    ssd1306_UpdateScreen();
}

void Task_Data_Display (void *pvParameters)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	//vTaskPrioritySet(Task_ReadSensors, tskIDLE_PRIORITY + 2);

	ssd1306_Init();
 8003c40:	f7fd fe7e 	bl	8001940 <ssd1306_Init>

	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1))
 8003c44:	2101      	movs	r1, #1
 8003c46:	4816      	ldr	r0, [pc, #88]	; (8003ca0 <Task_Data_Display+0x68>)
 8003c48:	f008 f8f4 	bl	800be34 <HAL_RTCEx_BKUPRead>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <Task_Data_Display+0x1e>
	{
	  Set_Time();
 8003c52:	f7ff ff7f 	bl	8003b54 <Set_Time>
	}

	Set_Alarm();
 8003c56:	f7ff ffbd 	bl	8003bd4 <Set_Alarm>

	for (int i = 0; i < 128 * 64 / 8; ++i) {
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e007      	b.n	8003c70 <Task_Data_Display+0x38>
		 screenBuffer[i] = 0xFF;
 8003c60:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <Task_Data_Display+0x6c>)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	22ff      	movs	r2, #255	; 0xff
 8003c68:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 128 * 64 / 8; ++i) {
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	dbf3      	blt.n	8003c60 <Task_Data_Display+0x28>
	}

	HAL_TIM_Base_Start_IT(&htim2);
 8003c78:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <Task_Data_Display+0x70>)
 8003c7a:	f008 f943 	bl	800bf04 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <Task_Data_Display+0x74>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f04f 31ff 	mov.w	r1, #4294967295
 8003c86:	4618      	mov	r0, r3
 8003c88:	f00d fece 	bl	8011a28 <xQueueSemaphoreTake>
		Mostrar_Datos();
 8003c8c:	f7fd fdf0 	bl	8001870 <Mostrar_Datos>
		xSemaphoreGive(SEM_I2C);
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <Task_Data_Display+0x74>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	2200      	movs	r2, #0
 8003c98:	2100      	movs	r1, #0
 8003c9a:	f00d fd39 	bl	8011710 <xQueueGenericSend>
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 8003c9e:	e7ee      	b.n	8003c7e <Task_Data_Display+0x46>
 8003ca0:	20000d0c 	.word	0x20000d0c
 8003ca4:	20000e90 	.word	0x20000e90
 8003ca8:	20000d2c 	.word	0x20000d2c
 8003cac:	20001298 	.word	0x20001298

08003cb0 <Task_ReadSensors>:
	}
}

void Task_ReadSensors(void *pvParam)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8003cb8:	482b      	ldr	r0, [pc, #172]	; (8003d68 <Task_ReadSensors+0xb8>)
 8003cba:	f008 f923 	bl	800bf04 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, AnalogSensors, 2);
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	492a      	ldr	r1, [pc, #168]	; (8003d6c <Task_ReadSensors+0xbc>)
 8003cc2:	482b      	ldr	r0, [pc, #172]	; (8003d70 <Task_ReadSensors+0xc0>)
 8003cc4:	f001 fba4 	bl	8005410 <HAL_ADC_Start_DMA>
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
	//HAL_TIM_Base_Start_IT(&htim3);

	while(1)
	{
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <Task_ReadSensors+0xc4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f00d fea9 	bl	8011a28 <xQueueSemaphoreTake>
		xSemaphoreGive(SEM_I2C);
 8003cd6:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <Task_ReadSensors+0xc8>)
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f00d fd16 	bl	8011710 <xQueueGenericSend>
		stateCNY70= HAL_GPIO_ReadPin(CNY70_GPIO_Port, CNY70_Pin);
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4825      	ldr	r0, [pc, #148]	; (8003d7c <Task_ReadSensors+0xcc>)
 8003ce8:	f002 fdb6 	bl	8006858 <HAL_GPIO_ReadPin>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <Task_ReadSensors+0xd0>)
 8003cf2:	701a      	strb	r2, [r3, #0]
		MedicionesEstacion.Temperature = LM35_Read_Temperature(AnalogSensors[0]);
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <Task_ReadSensors+0xbc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fe41 	bl	8003980 <LM35_Read_Temperature>
 8003cfe:	eef0 7a40 	vmov.f32	s15, s0
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <Task_ReadSensors+0xd4>)
 8003d04:	edc3 7a00 	vstr	s15, [r3]
		MedicionesEstacion.Pressure = PressureBMP/100; //Convierte de Pa a hPa
 8003d08:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <Task_ReadSensors+0xd8>)
 8003d0a:	ed93 7a00 	vldr	s14, [r3]
 8003d0e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003d8c <Task_ReadSensors+0xdc>
 8003d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <Task_ReadSensors+0xd4>)
 8003d18:	edc3 7a01 	vstr	s15, [r3, #4]
		DHT22_Read_Humidity(&MedicionesEstacion.Humidity);
 8003d1c:	481c      	ldr	r0, [pc, #112]	; (8003d90 <Task_ReadSensors+0xe0>)
 8003d1e:	f7ff fdf3 	bl	8003908 <DHT22_Read_Humidity>
		MedicionesEstacion.Light= LuzDetectada;
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <Task_ReadSensors+0xe4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <Task_ReadSensors+0xd4>)
 8003d28:	60d3      	str	r3, [r2, #12]
		MedicionesEstacion.AirQuality= MQ135_NivelContaminacion(AnalogSensors[1]);
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <Task_ReadSensors+0xbc>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fe52 	bl	80039d8 <MQ135_NivelContaminacion>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <Task_ReadSensors+0xd4>)
 8003d38:	6113      	str	r3, [r2, #16]
		MedicionesEstacion.WindSpeed= CNY70_MedicionVelocidad(rpmCNY70);
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <Task_ReadSensors+0xe8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fb42 	bl	80033c8 <CNY70_MedicionVelocidad>
 8003d44:	eef0 7a40 	vmov.f32	s15, s0
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <Task_ReadSensors+0xd4>)
 8003d4a:	edc3 7a05 	vstr	s15, [r3, #20]

		xSemaphoreGive(SEM_Mediciones);
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <Task_ReadSensors+0xc4>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	2200      	movs	r2, #0
 8003d56:	2100      	movs	r1, #0
 8003d58:	f00d fcda 	bl	8011710 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8003d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d60:	f00e fa1a 	bl	8012198 <vTaskDelay>
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8003d64:	e7b0      	b.n	8003cc8 <Task_ReadSensors+0x18>
 8003d66:	bf00      	nop
 8003d68:	20000dbc 	.word	0x20000dbc
 8003d6c:	200012cc 	.word	0x200012cc
 8003d70:	20000b50 	.word	0x20000b50
 8003d74:	20001294 	.word	0x20001294
 8003d78:	20001298 	.word	0x20001298
 8003d7c:	40020800 	.word	0x40020800
 8003d80:	200012d4 	.word	0x200012d4
 8003d84:	2000129c 	.word	0x2000129c
 8003d88:	200012dc 	.word	0x200012dc
 8003d8c:	42c80000 	.word	0x42c80000
 8003d90:	200012a4 	.word	0x200012a4
 8003d94:	200012e4 	.word	0x200012e4
 8003d98:	20000820 	.word	0x20000820

08003d9c <Task_ReadLight>:
	}
}

void Task_ReadLight(void *pvParam)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Este semaforo toma el comando del I2C para que no haya interferencia con el
		//sensor de presion. Luego es liberado en la callback
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <Task_ReadLight+0x20>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dac:	4618      	mov	r0, r3
 8003dae:	f00d fe3b 	bl	8011a28 <xQueueSemaphoreTake>
		BH1750_ReadLight(&MedicionesEstacion.Light);
 8003db2:	4803      	ldr	r0, [pc, #12]	; (8003dc0 <Task_ReadLight+0x24>)
 8003db4:	f7fe fd78 	bl	80028a8 <BH1750_ReadLight>
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 8003db8:	e7f4      	b.n	8003da4 <Task_ReadLight+0x8>
 8003dba:	bf00      	nop
 8003dbc:	20001298 	.word	0x20001298
 8003dc0:	200012a8 	.word	0x200012a8

08003dc4 <Task_ReadPressure>:
	}
}

void Task_ReadPressure(void *pvParam)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Este semaforo funciona al igual que en el sensor de luz
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <Task_ReadPressure+0x1c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f00d fe27 	bl	8011a28 <xQueueSemaphoreTake>
		BME280_Measure();
 8003dda:	f7ff fa59 	bl	8003290 <BME280_Measure>
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 8003dde:	e7f5      	b.n	8003dcc <Task_ReadPressure+0x8>
 8003de0:	20001298 	.word	0x20001298

08003de4 <Task_SendDataToThingspeak>:
	}
}

void Task_SendDataToThingspeak(void *pvParam)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	//Esta tarea debe ejecutarse cada 15segs como maximo
	vTaskDelay(pdMS_TO_TICKS(5000)); //Evito que entre primero esta tarea
 8003dec:	f241 3088 	movw	r0, #5000	; 0x1388
 8003df0:	f00e f9d2 	bl	8012198 <vTaskDelay>

	while(1)
	{
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8003df4:	4b69      	ldr	r3, [pc, #420]	; (8003f9c <Task_SendDataToThingspeak+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f00d fe13 	bl	8011a28 <xQueueSemaphoreTake>
		dataToSend[0]= round(MedicionesEstacion.Temperature * 100)/100;
 8003e02:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <Task_SendDataToThingspeak+0x1bc>)
 8003e04:	edd3 7a00 	vldr	s15, [r3]
 8003e08:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003fa4 <Task_SendDataToThingspeak+0x1c0>
 8003e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e10:	ee17 0a90 	vmov	r0, s15
 8003e14:	f7fc fba0 	bl	8000558 <__aeabi_f2d>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	ec43 2b10 	vmov	d0, r2, r3
 8003e20:	f013 f85e 	bl	8016ee0 <round>
 8003e24:	ec51 0b10 	vmov	r0, r1, d0
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	4b5e      	ldr	r3, [pc, #376]	; (8003fa8 <Task_SendDataToThingspeak+0x1c4>)
 8003e2e:	f7fc fd15 	bl	800085c <__aeabi_ddiv>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f7fc febd 	bl	8000bb8 <__aeabi_d2f>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4a5a      	ldr	r2, [pc, #360]	; (8003fac <Task_SendDataToThingspeak+0x1c8>)
 8003e42:	6013      	str	r3, [r2, #0]
		dataToSend[1]= round(MedicionesEstacion.Humidity * 100)/100;
 8003e44:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <Task_SendDataToThingspeak+0x1bc>)
 8003e46:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e4a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003fa4 <Task_SendDataToThingspeak+0x1c0>
 8003e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e52:	ee17 0a90 	vmov	r0, s15
 8003e56:	f7fc fb7f 	bl	8000558 <__aeabi_f2d>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	ec43 2b10 	vmov	d0, r2, r3
 8003e62:	f013 f83d 	bl	8016ee0 <round>
 8003e66:	ec51 0b10 	vmov	r0, r1, d0
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	4b4e      	ldr	r3, [pc, #312]	; (8003fa8 <Task_SendDataToThingspeak+0x1c4>)
 8003e70:	f7fc fcf4 	bl	800085c <__aeabi_ddiv>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fc fe9c 	bl	8000bb8 <__aeabi_d2f>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4a4a      	ldr	r2, [pc, #296]	; (8003fac <Task_SendDataToThingspeak+0x1c8>)
 8003e84:	6053      	str	r3, [r2, #4]
		dataToSend[2]= round(MedicionesEstacion.Pressure * 100)/100;
 8003e86:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <Task_SendDataToThingspeak+0x1bc>)
 8003e88:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e8c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003fa4 <Task_SendDataToThingspeak+0x1c0>
 8003e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e94:	ee17 0a90 	vmov	r0, s15
 8003e98:	f7fc fb5e 	bl	8000558 <__aeabi_f2d>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	ec43 2b10 	vmov	d0, r2, r3
 8003ea4:	f013 f81c 	bl	8016ee0 <round>
 8003ea8:	ec51 0b10 	vmov	r0, r1, d0
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <Task_SendDataToThingspeak+0x1c4>)
 8003eb2:	f7fc fcd3 	bl	800085c <__aeabi_ddiv>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f7fc fe7b 	bl	8000bb8 <__aeabi_d2f>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4a39      	ldr	r2, [pc, #228]	; (8003fac <Task_SendDataToThingspeak+0x1c8>)
 8003ec6:	6093      	str	r3, [r2, #8]
		dataToSend[3]= round(MedicionesEstacion.WindSpeed * 100)/100;
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <Task_SendDataToThingspeak+0x1bc>)
 8003eca:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ece:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003fa4 <Task_SendDataToThingspeak+0x1c0>
 8003ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed6:	ee17 0a90 	vmov	r0, s15
 8003eda:	f7fc fb3d 	bl	8000558 <__aeabi_f2d>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	ec43 2b10 	vmov	d0, r2, r3
 8003ee6:	f012 fffb 	bl	8016ee0 <round>
 8003eea:	ec51 0b10 	vmov	r0, r1, d0
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <Task_SendDataToThingspeak+0x1c4>)
 8003ef4:	f7fc fcb2 	bl	800085c <__aeabi_ddiv>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7fc fe5a 	bl	8000bb8 <__aeabi_d2f>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4a29      	ldr	r2, [pc, #164]	; (8003fac <Task_SendDataToThingspeak+0x1c8>)
 8003f08:	60d3      	str	r3, [r2, #12]
		dataToSend[4]= round(MedicionesEstacion.Light * 100)/100;
 8003f0a:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <Task_SendDataToThingspeak+0x1bc>)
 8003f0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f10:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003fa4 <Task_SendDataToThingspeak+0x1c0>
 8003f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f18:	ee17 0a90 	vmov	r0, s15
 8003f1c:	f7fc fb1c 	bl	8000558 <__aeabi_f2d>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	ec43 2b10 	vmov	d0, r2, r3
 8003f28:	f012 ffda 	bl	8016ee0 <round>
 8003f2c:	ec51 0b10 	vmov	r0, r1, d0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <Task_SendDataToThingspeak+0x1c4>)
 8003f36:	f7fc fc91 	bl	800085c <__aeabi_ddiv>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	f7fc fe39 	bl	8000bb8 <__aeabi_d2f>
 8003f46:	4603      	mov	r3, r0
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <Task_SendDataToThingspeak+0x1c8>)
 8003f4a:	6113      	str	r3, [r2, #16]
		dataToSend[5]= round(MedicionesEstacion.AirQuality * 100)/100;
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <Task_SendDataToThingspeak+0x1bc>)
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2264      	movs	r2, #100	; 0x64
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fadc 	bl	8000514 <__aeabi_ui2d>
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <Task_SendDataToThingspeak+0x1c4>)
 8003f62:	f7fc fc7b 	bl	800085c <__aeabi_ddiv>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f7fc fe23 	bl	8000bb8 <__aeabi_d2f>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4a0d      	ldr	r2, [pc, #52]	; (8003fac <Task_SendDataToThingspeak+0x1c8>)
 8003f76:	6153      	str	r3, [r2, #20]

		xSemaphoreGive(SEM_Mediciones);
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <Task_SendDataToThingspeak+0x1b8>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	f00d fbc5 	bl	8011710 <xQueueGenericSend>
		ESP_Send_Multi("GZ88XIL7XS30EM51", CANT_PARAMETROS, dataToSend);
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <Task_SendDataToThingspeak+0x1c8>)
 8003f88:	2106      	movs	r1, #6
 8003f8a:	4809      	ldr	r0, [pc, #36]	; (8003fb0 <Task_SendDataToThingspeak+0x1cc>)
 8003f8c:	f7fe f948 	bl	8002220 <ESP_Send_Multi>

		vTaskDelay(pdMS_TO_TICKS(THINGSPEAK_DELAY));
 8003f90:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003f94:	f00e f900 	bl	8012198 <vTaskDelay>
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8003f98:	e72c      	b.n	8003df4 <Task_SendDataToThingspeak+0x10>
 8003f9a:	bf00      	nop
 8003f9c:	20001294 	.word	0x20001294
 8003fa0:	2000129c 	.word	0x2000129c
 8003fa4:	42c80000 	.word	0x42c80000
 8003fa8:	40590000 	.word	0x40590000
 8003fac:	200012b4 	.word	0x200012b4
 8003fb0:	080170ec 	.word	0x080170ec

08003fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fba:	f001 f97f 	bl	80052bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fbe:	f000 f8c1 	bl	8004144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fc2:	f000 fbdf 	bl	8004784 <MX_GPIO_Init>
  MX_DMA_Init();
 8003fc6:	f000 fb9f 	bl	8004708 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003fca:	f000 fb73 	bl	80046b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003fce:	f000 f985 	bl	80042dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8003fd2:	f000 fa3d 	bl	8004450 <MX_TIM2_Init>
  MX_RTC_Init();
 8003fd6:	f000 f9af 	bl	8004338 <MX_RTC_Init>
  MX_TIM3_Init();
 8003fda:	f000 fa85 	bl	80044e8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003fde:	f000 f91d 	bl	800421c <MX_ADC1_Init>
  MX_TIM4_Init();
 8003fe2:	f000 faf1 	bl	80045c8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003fe6:	f000 fb3b 	bl	8004660 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Inicializacion BH1750 - Sensor de Luz
  BH1750_Init(&hi2c1);
 8003fea:	4845      	ldr	r0, [pc, #276]	; (8004100 <main+0x14c>)
 8003fec:	f7fe fba6 	bl	800273c <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE);
 8003ff0:	2010      	movs	r0, #16
 8003ff2:	f7fe fbd9 	bl	80027a8 <BH1750_SetMode>

  //Inicializacion BMP280 - Sensor de Presion
  BME280_Config(OSRS_1, OSRS_4, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2303      	movs	r3, #3
 8004000:	2201      	movs	r2, #1
 8004002:	2103      	movs	r1, #3
 8004004:	2001      	movs	r0, #1
 8004006:	f7fe fd05 	bl	8002a14 <BME280_Config>

  //PantallaInicialDisplay();

  //Inicializacion ESP01 - Modulo WiFi
  ESP_Init(MY_NETWORK, MY_PASSWORD);
 800400a:	493e      	ldr	r1, [pc, #248]	; (8004104 <main+0x150>)
 800400c:	483e      	ldr	r0, [pc, #248]	; (8004108 <main+0x154>)
 800400e:	f7fe f8ab 	bl	8002168 <ESP_Init>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  SEM_Mediciones= xSemaphoreCreateBinary();
 8004012:	2203      	movs	r2, #3
 8004014:	2100      	movs	r1, #0
 8004016:	2001      	movs	r0, #1
 8004018:	f00d fb20 	bl	801165c <xQueueGenericCreate>
 800401c:	4603      	mov	r3, r0
 800401e:	4a3b      	ldr	r2, [pc, #236]	; (800410c <main+0x158>)
 8004020:	6013      	str	r3, [r2, #0]
  SEM_I2C= xSemaphoreCreateBinary();
 8004022:	2203      	movs	r2, #3
 8004024:	2100      	movs	r1, #0
 8004026:	2001      	movs	r0, #1
 8004028:	f00d fb18 	bl	801165c <xQueueGenericCreate>
 800402c:	4603      	mov	r3, r0
 800402e:	4a38      	ldr	r2, [pc, #224]	; (8004110 <main+0x15c>)
 8004030:	6013      	str	r3, [r2, #0]

  xSemaphoreTake(SEM_Mediciones, 0);
 8004032:	4b36      	ldr	r3, [pc, #216]	; (800410c <main+0x158>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f00d fcf5 	bl	8011a28 <xQueueSemaphoreTake>
  xSemaphoreGive(SEM_Mediciones);
 800403e:	4b33      	ldr	r3, [pc, #204]	; (800410c <main+0x158>)
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	2200      	movs	r2, #0
 8004046:	2100      	movs	r1, #0
 8004048:	f00d fb62 	bl	8011710 <xQueueGenericSend>

  xSemaphoreTake(SEM_I2C, 0);
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <main+0x15c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f00d fce8 	bl	8011a28 <xQueueSemaphoreTake>
  xSemaphoreGive(SEM_I2C);
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <main+0x15c>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	2300      	movs	r3, #0
 800405e:	2200      	movs	r2, #0
 8004060:	2100      	movs	r1, #0
 8004062:	f00d fb55 	bl	8011710 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004066:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <main+0x160>)
 8004068:	1d3c      	adds	r4, r7, #4
 800406a:	461d      	mov	r5, r3
 800406c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800406e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004070:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004078:	1d3b      	adds	r3, r7, #4
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f00d f970 	bl	8011362 <osThreadCreate>
 8004082:	4603      	mov	r3, r0
 8004084:	4a24      	ldr	r2, [pc, #144]	; (8004118 <main+0x164>)
 8004086:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  xTaskCreate(Task_Data_Display, "Data_Display", configMINIMAL_STACK_SIZE * 4, NULL, tskIDLE_PRIORITY + 1, NULL);
 8004088:	2300      	movs	r3, #0
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	2301      	movs	r3, #1
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2300      	movs	r3, #0
 8004092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004096:	4921      	ldr	r1, [pc, #132]	; (800411c <main+0x168>)
 8004098:	4821      	ldr	r0, [pc, #132]	; (8004120 <main+0x16c>)
 800409a:	f00d ff30 	bl	8011efe <xTaskCreate>

  xTaskCreate(Task_ReadSensors, "ReadSensors", configMINIMAL_STACK_SIZE * 2, NULL, tskIDLE_PRIORITY + 1, NULL);
 800409e:	2300      	movs	r3, #0
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	2301      	movs	r3, #1
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2300      	movs	r3, #0
 80040a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ac:	491d      	ldr	r1, [pc, #116]	; (8004124 <main+0x170>)
 80040ae:	481e      	ldr	r0, [pc, #120]	; (8004128 <main+0x174>)
 80040b0:	f00d ff25 	bl	8011efe <xTaskCreate>
  xTaskCreate(Task_ReadLight, "ReadLight", configMINIMAL_STACK_SIZE * 4, NULL, tskIDLE_PRIORITY + 1, NULL);
 80040b4:	2300      	movs	r3, #0
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	2301      	movs	r3, #1
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2300      	movs	r3, #0
 80040be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c2:	491a      	ldr	r1, [pc, #104]	; (800412c <main+0x178>)
 80040c4:	481a      	ldr	r0, [pc, #104]	; (8004130 <main+0x17c>)
 80040c6:	f00d ff1a 	bl	8011efe <xTaskCreate>
  xTaskCreate(Task_ReadPressure, "ReadPressure", configMINIMAL_STACK_SIZE * 4, NULL, tskIDLE_PRIORITY + 1, NULL);
 80040ca:	2300      	movs	r3, #0
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	2301      	movs	r3, #1
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2300      	movs	r3, #0
 80040d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <main+0x180>)
 80040da:	4817      	ldr	r0, [pc, #92]	; (8004138 <main+0x184>)
 80040dc:	f00d ff0f 	bl	8011efe <xTaskCreate>

  xTaskCreate(Task_SendDataToThingspeak, "SendDataToThingspeak", configMINIMAL_STACK_SIZE * 5, NULL, tskIDLE_PRIORITY + 2, NULL);
 80040e0:	2300      	movs	r3, #0
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	2302      	movs	r3, #2
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80040ee:	4913      	ldr	r1, [pc, #76]	; (800413c <main+0x188>)
 80040f0:	4813      	ldr	r0, [pc, #76]	; (8004140 <main+0x18c>)
 80040f2:	f00d ff04 	bl	8011efe <xTaskCreate>

  vTaskStartScheduler();
 80040f6:	f00e f883 	bl	8012200 <vTaskStartScheduler>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80040fa:	f00d f92b 	bl	8011354 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80040fe:	e7fe      	b.n	80040fe <main+0x14a>
 8004100:	20000bf8 	.word	0x20000bf8
 8004104:	08017100 	.word	0x08017100
 8004108:	0801710c 	.word	0x0801710c
 800410c:	20001294 	.word	0x20001294
 8004110:	20001298 	.word	0x20001298
 8004114:	08017174 	.word	0x08017174
 8004118:	20000e8c 	.word	0x20000e8c
 800411c:	08017124 	.word	0x08017124
 8004120:	08003c39 	.word	0x08003c39
 8004124:	08017134 	.word	0x08017134
 8004128:	08003cb1 	.word	0x08003cb1
 800412c:	08017140 	.word	0x08017140
 8004130:	08003d9d 	.word	0x08003d9d
 8004134:	0801714c 	.word	0x0801714c
 8004138:	08003dc5 	.word	0x08003dc5
 800413c:	0801715c 	.word	0x0801715c
 8004140:	08003de5 	.word	0x08003de5

08004144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b094      	sub	sp, #80	; 0x50
 8004148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800414a:	f107 0320 	add.w	r3, r7, #32
 800414e:	2230      	movs	r2, #48	; 0x30
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f010 f883 	bl	801425e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004158:	f107 030c 	add.w	r3, r7, #12
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	4b29      	ldr	r3, [pc, #164]	; (8004214 <SystemClock_Config+0xd0>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	4a28      	ldr	r2, [pc, #160]	; (8004214 <SystemClock_Config+0xd0>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	6413      	str	r3, [r2, #64]	; 0x40
 8004178:	4b26      	ldr	r3, [pc, #152]	; (8004214 <SystemClock_Config+0xd0>)
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004184:	2300      	movs	r3, #0
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <SystemClock_Config+0xd4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004190:	4a21      	ldr	r2, [pc, #132]	; (8004218 <SystemClock_Config+0xd4>)
 8004192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <SystemClock_Config+0xd4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80041a4:	2309      	movs	r3, #9
 80041a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80041a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80041ae:	2301      	movs	r3, #1
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041b2:	2302      	movs	r3, #2
 80041b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80041bc:	2304      	movs	r3, #4
 80041be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80041c0:	23a8      	movs	r3, #168	; 0xa8
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80041c4:	2304      	movs	r3, #4
 80041c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80041c8:	2307      	movs	r3, #7
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041cc:	f107 0320 	add.w	r3, r7, #32
 80041d0:	4618      	mov	r0, r3
 80041d2:	f006 fc35 	bl	800aa40 <HAL_RCC_OscConfig>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80041dc:	f000 fbe4 	bl	80049a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041e0:	230f      	movs	r3, #15
 80041e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041e4:	2302      	movs	r3, #2
 80041e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041f6:	f107 030c 	add.w	r3, r7, #12
 80041fa:	2102      	movs	r1, #2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f006 fe97 	bl	800af30 <HAL_RCC_ClockConfig>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004208:	f000 fbce 	bl	80049a8 <Error_Handler>
  }
}
 800420c:	bf00      	nop
 800420e:	3750      	adds	r7, #80	; 0x50
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	40007000 	.word	0x40007000

0800421c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004222:	463b      	mov	r3, r7
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800422e:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <MX_ADC1_Init+0xb4>)
 8004230:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <MX_ADC1_Init+0xb8>)
 8004232:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004234:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <MX_ADC1_Init+0xb4>)
 8004236:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800423a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <MX_ADC1_Init+0xb4>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004242:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <MX_ADC1_Init+0xb4>)
 8004244:	2201      	movs	r2, #1
 8004246:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004248:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <MX_ADC1_Init+0xb4>)
 800424a:	2201      	movs	r2, #1
 800424c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <MX_ADC1_Init+0xb4>)
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004256:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <MX_ADC1_Init+0xb4>)
 8004258:	2200      	movs	r2, #0
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <MX_ADC1_Init+0xb4>)
 800425e:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <MX_ADC1_Init+0xbc>)
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <MX_ADC1_Init+0xb4>)
 8004264:	2200      	movs	r2, #0
 8004266:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <MX_ADC1_Init+0xb4>)
 800426a:	2202      	movs	r2, #2
 800426c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <MX_ADC1_Init+0xb4>)
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <MX_ADC1_Init+0xb4>)
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800427c:	4814      	ldr	r0, [pc, #80]	; (80042d0 <MX_ADC1_Init+0xb4>)
 800427e:	f001 f883 	bl	8005388 <HAL_ADC_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004288:	f000 fb8e 	bl	80049a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800428c:	2300      	movs	r3, #0
 800428e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004290:	2301      	movs	r3, #1
 8004292:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004294:	2307      	movs	r3, #7
 8004296:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004298:	463b      	mov	r3, r7
 800429a:	4619      	mov	r1, r3
 800429c:	480c      	ldr	r0, [pc, #48]	; (80042d0 <MX_ADC1_Init+0xb4>)
 800429e:	f001 f9c5 	bl	800562c <HAL_ADC_ConfigChannel>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80042a8:	f000 fb7e 	bl	80049a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80042b0:	2302      	movs	r3, #2
 80042b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042b4:	463b      	mov	r3, r7
 80042b6:	4619      	mov	r1, r3
 80042b8:	4805      	ldr	r0, [pc, #20]	; (80042d0 <MX_ADC1_Init+0xb4>)
 80042ba:	f001 f9b7 	bl	800562c <HAL_ADC_ConfigChannel>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80042c4:	f000 fb70 	bl	80049a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000b50 	.word	0x20000b50
 80042d4:	40012000 	.word	0x40012000
 80042d8:	0f000001 	.word	0x0f000001

080042dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <MX_I2C1_Init+0x50>)
 80042e2:	4a13      	ldr	r2, [pc, #76]	; (8004330 <MX_I2C1_Init+0x54>)
 80042e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <MX_I2C1_Init+0x50>)
 80042e8:	4a12      	ldr	r2, [pc, #72]	; (8004334 <MX_I2C1_Init+0x58>)
 80042ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <MX_I2C1_Init+0x50>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042f2:	4b0e      	ldr	r3, [pc, #56]	; (800432c <MX_I2C1_Init+0x50>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <MX_I2C1_Init+0x50>)
 80042fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <MX_I2C1_Init+0x50>)
 8004302:	2200      	movs	r2, #0
 8004304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <MX_I2C1_Init+0x50>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800430c:	4b07      	ldr	r3, [pc, #28]	; (800432c <MX_I2C1_Init+0x50>)
 800430e:	2200      	movs	r2, #0
 8004310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <MX_I2C1_Init+0x50>)
 8004314:	2200      	movs	r2, #0
 8004316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004318:	4804      	ldr	r0, [pc, #16]	; (800432c <MX_I2C1_Init+0x50>)
 800431a:	f002 facf 	bl	80068bc <HAL_I2C_Init>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004324:	f000 fb40 	bl	80049a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000bf8 	.word	0x20000bf8
 8004330:	40005400 	.word	0x40005400
 8004334:	00061a80 	.word	0x00061a80

08004338 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b090      	sub	sp, #64	; 0x40
 800433c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800433e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800434e:	2300      	movs	r3, #0
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004352:	463b      	mov	r3, r7
 8004354:	2228      	movs	r2, #40	; 0x28
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f00f ff80 	bl	801425e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800435e:	4b3a      	ldr	r3, [pc, #232]	; (8004448 <MX_RTC_Init+0x110>)
 8004360:	4a3a      	ldr	r2, [pc, #232]	; (800444c <MX_RTC_Init+0x114>)
 8004362:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004364:	4b38      	ldr	r3, [pc, #224]	; (8004448 <MX_RTC_Init+0x110>)
 8004366:	2200      	movs	r2, #0
 8004368:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800436a:	4b37      	ldr	r3, [pc, #220]	; (8004448 <MX_RTC_Init+0x110>)
 800436c:	227f      	movs	r2, #127	; 0x7f
 800436e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004370:	4b35      	ldr	r3, [pc, #212]	; (8004448 <MX_RTC_Init+0x110>)
 8004372:	22ff      	movs	r2, #255	; 0xff
 8004374:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004376:	4b34      	ldr	r3, [pc, #208]	; (8004448 <MX_RTC_Init+0x110>)
 8004378:	2200      	movs	r2, #0
 800437a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <MX_RTC_Init+0x110>)
 800437e:	2200      	movs	r2, #0
 8004380:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <MX_RTC_Init+0x110>)
 8004384:	2200      	movs	r2, #0
 8004386:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004388:	482f      	ldr	r0, [pc, #188]	; (8004448 <MX_RTC_Init+0x110>)
 800438a:	f007 f911 	bl	800b5b0 <HAL_RTC_Init>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004394:	f000 fb08 	bl	80049a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004398:	2300      	movs	r3, #0
 800439a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80043b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043b6:	2201      	movs	r2, #1
 80043b8:	4619      	mov	r1, r3
 80043ba:	4823      	ldr	r0, [pc, #140]	; (8004448 <MX_RTC_Init+0x110>)
 80043bc:	f007 f96e 	bl	800b69c <HAL_RTC_SetTime>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80043c6:	f000 faef 	bl	80049a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80043e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043e6:	2201      	movs	r2, #1
 80043e8:	4619      	mov	r1, r3
 80043ea:	4817      	ldr	r0, [pc, #92]	; (8004448 <MX_RTC_Init+0x110>)
 80043ec:	f007 fa4e 	bl	800b88c <HAL_RTC_SetDate>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80043f6:	f000 fad7 	bl	80049a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80043fe:	2300      	movs	r3, #0
 8004400:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8004402:	2300      	movs	r3, #0
 8004404:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800442a:	463b      	mov	r3, r7
 800442c:	2201      	movs	r2, #1
 800442e:	4619      	mov	r1, r3
 8004430:	4805      	ldr	r0, [pc, #20]	; (8004448 <MX_RTC_Init+0x110>)
 8004432:	f007 fafe 	bl	800ba32 <HAL_RTC_SetAlarm>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800443c:	f000 fab4 	bl	80049a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004440:	bf00      	nop
 8004442:	3740      	adds	r7, #64	; 0x40
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000d0c 	.word	0x20000d0c
 800444c:	40002800 	.word	0x40002800

08004450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004464:	463b      	mov	r3, r7
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <MX_TIM2_Init+0x94>)
 800446e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004472:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <MX_TIM2_Init+0x94>)
 8004476:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800447a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <MX_TIM2_Init+0x94>)
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8004482:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <MX_TIM2_Init+0x94>)
 8004484:	2202      	movs	r2, #2
 8004486:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <MX_TIM2_Init+0x94>)
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <MX_TIM2_Init+0x94>)
 8004490:	2280      	movs	r2, #128	; 0x80
 8004492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004494:	4813      	ldr	r0, [pc, #76]	; (80044e4 <MX_TIM2_Init+0x94>)
 8004496:	f007 fce5 	bl	800be64 <HAL_TIM_Base_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80044a0:	f000 fa82 	bl	80049a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	4619      	mov	r1, r3
 80044b0:	480c      	ldr	r0, [pc, #48]	; (80044e4 <MX_TIM2_Init+0x94>)
 80044b2:	f008 f97d 	bl	800c7b0 <HAL_TIM_ConfigClockSource>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80044bc:	f000 fa74 	bl	80049a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044c0:	2300      	movs	r3, #0
 80044c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044c8:	463b      	mov	r3, r7
 80044ca:	4619      	mov	r1, r3
 80044cc:	4805      	ldr	r0, [pc, #20]	; (80044e4 <MX_TIM2_Init+0x94>)
 80044ce:	f008 fcb3 	bl	800ce38 <HAL_TIMEx_MasterConfigSynchronization>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80044d8:	f000 fa66 	bl	80049a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044dc:	bf00      	nop
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000d2c 	.word	0x20000d2c

080044e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044ee:	f107 0318 	add.w	r3, r7, #24
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044fc:	f107 0310 	add.w	r3, r7, #16
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004506:	463b      	mov	r3, r7
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004512:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <MX_TIM3_Init+0xd8>)
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <MX_TIM3_Init+0xdc>)
 8004516:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8004518:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <MX_TIM3_Init+0xd8>)
 800451a:	2253      	movs	r2, #83	; 0x53
 800451c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451e:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <MX_TIM3_Init+0xd8>)
 8004520:	2200      	movs	r2, #0
 8004522:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8004524:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <MX_TIM3_Init+0xd8>)
 8004526:	22c8      	movs	r2, #200	; 0xc8
 8004528:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800452a:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <MX_TIM3_Init+0xd8>)
 800452c:	2200      	movs	r2, #0
 800452e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <MX_TIM3_Init+0xd8>)
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004536:	4822      	ldr	r0, [pc, #136]	; (80045c0 <MX_TIM3_Init+0xd8>)
 8004538:	f007 fc94 	bl	800be64 <HAL_TIM_Base_Init>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8004542:	f000 fa31 	bl	80049a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800454a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800454c:	f107 0318 	add.w	r3, r7, #24
 8004550:	4619      	mov	r1, r3
 8004552:	481b      	ldr	r0, [pc, #108]	; (80045c0 <MX_TIM3_Init+0xd8>)
 8004554:	f008 f92c 	bl	800c7b0 <HAL_TIM_ConfigClockSource>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800455e:	f000 fa23 	bl	80049a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004562:	4817      	ldr	r0, [pc, #92]	; (80045c0 <MX_TIM3_Init+0xd8>)
 8004564:	f007 fd5f 	bl	800c026 <HAL_TIM_IC_Init>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800456e:	f000 fa1b 	bl	80049a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800457a:	f107 0310 	add.w	r3, r7, #16
 800457e:	4619      	mov	r1, r3
 8004580:	480f      	ldr	r0, [pc, #60]	; (80045c0 <MX_TIM3_Init+0xd8>)
 8004582:	f008 fc59 	bl	800ce38 <HAL_TIMEx_MasterConfigSynchronization>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 800458c:	f000 fa0c 	bl	80049a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004590:	230a      	movs	r3, #10
 8004592:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004594:	2301      	movs	r3, #1
 8004596:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800459c:	230f      	movs	r3, #15
 800459e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80045a0:	463b      	mov	r3, r7
 80045a2:	2200      	movs	r2, #0
 80045a4:	4619      	mov	r1, r3
 80045a6:	4806      	ldr	r0, [pc, #24]	; (80045c0 <MX_TIM3_Init+0xd8>)
 80045a8:	f008 f866 	bl	800c678 <HAL_TIM_IC_ConfigChannel>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80045b2:	f000 f9f9 	bl	80049a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80045b6:	bf00      	nop
 80045b8:	3728      	adds	r7, #40	; 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000d74 	.word	0x20000d74
 80045c4:	40000400 	.word	0x40000400

080045c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ce:	f107 0308 	add.w	r3, r7, #8
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045dc:	463b      	mov	r3, r7
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80045e4:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <MX_TIM4_Init+0x90>)
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <MX_TIM4_Init+0x94>)
 80045e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80045ea:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <MX_TIM4_Init+0x90>)
 80045ec:	2253      	movs	r2, #83	; 0x53
 80045ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <MX_TIM4_Init+0x90>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <MX_TIM4_Init+0x90>)
 80045f8:	2214      	movs	r2, #20
 80045fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045fc:	4b16      	ldr	r3, [pc, #88]	; (8004658 <MX_TIM4_Init+0x90>)
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <MX_TIM4_Init+0x90>)
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004608:	4813      	ldr	r0, [pc, #76]	; (8004658 <MX_TIM4_Init+0x90>)
 800460a:	f007 fc2b 	bl	800be64 <HAL_TIM_Base_Init>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8004614:	f000 f9c8 	bl	80049a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800461c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800461e:	f107 0308 	add.w	r3, r7, #8
 8004622:	4619      	mov	r1, r3
 8004624:	480c      	ldr	r0, [pc, #48]	; (8004658 <MX_TIM4_Init+0x90>)
 8004626:	f008 f8c3 	bl	800c7b0 <HAL_TIM_ConfigClockSource>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8004630:	f000 f9ba 	bl	80049a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004634:	2300      	movs	r3, #0
 8004636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004638:	2300      	movs	r3, #0
 800463a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800463c:	463b      	mov	r3, r7
 800463e:	4619      	mov	r1, r3
 8004640:	4805      	ldr	r0, [pc, #20]	; (8004658 <MX_TIM4_Init+0x90>)
 8004642:	f008 fbf9 	bl	800ce38 <HAL_TIMEx_MasterConfigSynchronization>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800464c:	f000 f9ac 	bl	80049a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004650:	bf00      	nop
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000dbc 	.word	0x20000dbc
 800465c:	40000800 	.word	0x40000800

08004660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 8004666:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <MX_USART1_UART_Init+0x50>)
 8004668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 800466c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004672:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 8004674:	2200      	movs	r2, #0
 8004676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 800467a:	2200      	movs	r2, #0
 800467c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004684:	4b09      	ldr	r3, [pc, #36]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 8004686:	220c      	movs	r2, #12
 8004688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 800468c:	2200      	movs	r2, #0
 800468e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 8004692:	2200      	movs	r2, #0
 8004694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004696:	4805      	ldr	r0, [pc, #20]	; (80046ac <MX_USART1_UART_Init+0x4c>)
 8004698:	f008 fc50 	bl	800cf3c <HAL_UART_Init>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80046a2:	f000 f981 	bl	80049a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000e04 	.word	0x20000e04
 80046b0:	40011000 	.word	0x40011000

080046b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <MX_USART2_UART_Init+0x50>)
 80046bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046da:	220c      	movs	r2, #12
 80046dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046ea:	4805      	ldr	r0, [pc, #20]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ec:	f008 fc26 	bl	800cf3c <HAL_UART_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80046f6:	f000 f957 	bl	80049a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000e48 	.word	0x20000e48
 8004704:	40004400 	.word	0x40004400

08004708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <MX_DMA_Init+0x78>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <MX_DMA_Init+0x78>)
 8004718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800471c:	6313      	str	r3, [r2, #48]	; 0x30
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <MX_DMA_Init+0x78>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <MX_DMA_Init+0x78>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	4a13      	ldr	r2, [pc, #76]	; (8004780 <MX_DMA_Init+0x78>)
 8004734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004738:	6313      	str	r3, [r2, #48]	; 0x30
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <MX_DMA_Init+0x78>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	2105      	movs	r1, #5
 800474a:	200b      	movs	r0, #11
 800474c:	f001 fac6 	bl	8005cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004750:	200b      	movs	r0, #11
 8004752:	f001 fadf 	bl	8005d14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8004756:	2200      	movs	r2, #0
 8004758:	2105      	movs	r1, #5
 800475a:	2011      	movs	r0, #17
 800475c:	f001 fabe 	bl	8005cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004760:	2011      	movs	r0, #17
 8004762:	f001 fad7 	bl	8005d14 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004766:	2200      	movs	r2, #0
 8004768:	2105      	movs	r1, #5
 800476a:	2038      	movs	r0, #56	; 0x38
 800476c:	f001 fab6 	bl	8005cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004770:	2038      	movs	r0, #56	; 0x38
 8004772:	f001 facf 	bl	8005d14 <HAL_NVIC_EnableIRQ>

}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800

08004784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478a:	f107 0314 	add.w	r3, r7, #20
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	4b33      	ldr	r3, [pc, #204]	; (800486c <MX_GPIO_Init+0xe8>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a32      	ldr	r2, [pc, #200]	; (800486c <MX_GPIO_Init+0xe8>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
 80047aa:	4b30      	ldr	r3, [pc, #192]	; (800486c <MX_GPIO_Init+0xe8>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	4b2c      	ldr	r3, [pc, #176]	; (800486c <MX_GPIO_Init+0xe8>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a2b      	ldr	r2, [pc, #172]	; (800486c <MX_GPIO_Init+0xe8>)
 80047c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <MX_GPIO_Init+0xe8>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	4b25      	ldr	r3, [pc, #148]	; (800486c <MX_GPIO_Init+0xe8>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	4a24      	ldr	r2, [pc, #144]	; (800486c <MX_GPIO_Init+0xe8>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6313      	str	r3, [r2, #48]	; 0x30
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <MX_GPIO_Init+0xe8>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <MX_GPIO_Init+0xe8>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	4a1d      	ldr	r2, [pc, #116]	; (800486c <MX_GPIO_Init+0xe8>)
 80047f8:	f043 0302 	orr.w	r3, r3, #2
 80047fc:	6313      	str	r3, [r2, #48]	; 0x30
 80047fe:	4b1b      	ldr	r3, [pc, #108]	; (800486c <MX_GPIO_Init+0xe8>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|DHT22_Pin, GPIO_PIN_RESET);
 800480a:	2200      	movs	r2, #0
 800480c:	21a0      	movs	r1, #160	; 0xa0
 800480e:	4818      	ldr	r0, [pc, #96]	; (8004870 <MX_GPIO_Init+0xec>)
 8004810:	f002 f83a 	bl	8006888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800481a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800481e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004824:	f107 0314 	add.w	r3, r7, #20
 8004828:	4619      	mov	r1, r3
 800482a:	4812      	ldr	r0, [pc, #72]	; (8004874 <MX_GPIO_Init+0xf0>)
 800482c:	f001 fe90 	bl	8006550 <HAL_GPIO_Init>

  /*Configure GPIO pin : CNY70_Pin */
  GPIO_InitStruct.Pin = CNY70_Pin;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004838:	2302      	movs	r3, #2
 800483a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CNY70_GPIO_Port, &GPIO_InitStruct);
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	4619      	mov	r1, r3
 8004842:	480c      	ldr	r0, [pc, #48]	; (8004874 <MX_GPIO_Init+0xf0>)
 8004844:	f001 fe84 	bl	8006550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 DHT22_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|DHT22_Pin;
 8004848:	23a0      	movs	r3, #160	; 0xa0
 800484a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484c:	2301      	movs	r3, #1
 800484e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004858:	f107 0314 	add.w	r3, r7, #20
 800485c:	4619      	mov	r1, r3
 800485e:	4804      	ldr	r0, [pc, #16]	; (8004870 <MX_GPIO_Init+0xec>)
 8004860:	f001 fe76 	bl	8006550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004864:	bf00      	nop
 8004866:	3728      	adds	r7, #40	; 0x28
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	40020000 	.word	0x40020000
 8004874:	40020800 	.word	0x40020800

08004878 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004880:	f00e ff2c 	bl	80136dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004884:	2001      	movs	r0, #1
 8004886:	f00c fdb8 	bl	80113fa <osDelay>
 800488a:	e7fb      	b.n	8004884 <StartDefaultTask+0xc>

0800488c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a36      	ldr	r2, [pc, #216]	; (8004974 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800489e:	f000 fd2f 	bl	8005300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048aa:	d11c      	bne.n	80048e6 <HAL_TIM_PeriodElapsedCallback+0x5a>
  {
	static uint8_t Scroll = 20;

	Scroll--;
 80048ac:	4b32      	ldr	r3, [pc, #200]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80048b6:	701a      	strb	r2, [r3, #0]
	if(!Scroll)
 80048b8:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		Flag_Scroll = 1;
 80048c0:	4b2e      	ldr	r3, [pc, #184]	; (800497c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
		Scroll = 1;
 80048c6:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]
	}

	Datos--;
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	4b2a      	ldr	r3, [pc, #168]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80048d6:	801a      	strh	r2, [r3, #0]
	if(!Datos)
 80048d8:	4b29      	ldr	r3, [pc, #164]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		Flag_Datos = 1;
 80048e0:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
	}
  }

  static uint32_t contador_20us = 0, contador_2000us = 0;

  	if(htim->Instance == TIM4)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a27      	ldr	r2, [pc, #156]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d13d      	bne.n	800496c <HAL_TIM_PeriodElapsedCallback+0xe0>
  	{
  		if(start == 1)
 80048f0:	4b26      	ldr	r3, [pc, #152]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_PeriodElapsedCallback+0x76>
  		{
  			contador_20us++;
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	4a24      	ldr	r2, [pc, #144]	; (8004990 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004900:	6013      	str	r3, [r2, #0]
  		}

  		if(contador_20us >= 1)
 8004902:	4b23      	ldr	r3, [pc, #140]	; (8004990 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d013      	beq.n	8004932 <HAL_TIM_PeriodElapsedCallback+0xa6>
  		{
  			Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin);
 800490a:	2180      	movs	r1, #128	; 0x80
 800490c:	4821      	ldr	r0, [pc, #132]	; (8004994 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800490e:	f7fe fdaf 	bl	8003470 <Set_Pin_Input>
  			contador_20us = 0;
 8004912:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

  			start = 0;
 8004918:	4b1c      	ldr	r3, [pc, #112]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]

  			enableCapture = 1;
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
  			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8004924:	2100      	movs	r1, #0
 8004926:	481d      	ldr	r0, [pc, #116]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004928:	f007 fbd6 	bl	800c0d8 <HAL_TIM_IC_Start_IT>
  			HAL_TIM_Base_Stop_IT(&htim4);
 800492c:	481c      	ldr	r0, [pc, #112]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800492e:	f007 fb4b 	bl	800bfc8 <HAL_TIM_Base_Stop_IT>
  		}

  		if(!start)
 8004932:	4b16      	ldr	r3, [pc, #88]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_TIM_PeriodElapsedCallback+0xc2>
  		{
  			//Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);
  			HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 0);   // pull the pin low
 800493a:	2200      	movs	r2, #0
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	4815      	ldr	r0, [pc, #84]	; (8004994 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004940:	f001 ffa2 	bl	8006888 <HAL_GPIO_WritePin>
  			contador_2000us++;
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800494c:	6013      	str	r3, [r2, #0]
  		}

  		if(contador_2000us >= 100)
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b63      	cmp	r3, #99	; 0x63
 8004954:	d90a      	bls.n	800496c <HAL_TIM_PeriodElapsedCallback+0xe0>
  		{
  			HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 1);   // pull the pin high
 8004956:	2201      	movs	r2, #1
 8004958:	2180      	movs	r1, #128	; 0x80
 800495a:	480e      	ldr	r0, [pc, #56]	; (8004994 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800495c:	f001 ff94 	bl	8006888 <HAL_GPIO_WritePin>

  			contador_2000us = 0;
 8004960:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]

  			start = 1;
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
  		}
  	}

  /* USER CODE END Callback 1 */
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40010000 	.word	0x40010000
 8004978:	20000012 	.word	0x20000012
 800497c:	20001290 	.word	0x20001290
 8004980:	20000010 	.word	0x20000010
 8004984:	20001291 	.word	0x20001291
 8004988:	40000800 	.word	0x40000800
 800498c:	20000890 	.word	0x20000890
 8004990:	200012e8 	.word	0x200012e8
 8004994:	40020000 	.word	0x40020000
 8004998:	20000829 	.word	0x20000829
 800499c:	20000d74 	.word	0x20000d74
 80049a0:	20000dbc 	.word	0x20000dbc
 80049a4:	200012ec 	.word	0x200012ec

080049a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049ac:	b672      	cpsid	i
}
 80049ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049b0:	e7fe      	b.n	80049b0 <Error_Handler+0x8>
	...

080049b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_MspInit+0x54>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a11      	ldr	r2, [pc, #68]	; (8004a08 <HAL_MspInit+0x54>)
 80049c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <HAL_MspInit+0x54>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d2:	607b      	str	r3, [r7, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_MspInit+0x54>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <HAL_MspInit+0x54>)
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <HAL_MspInit+0x54>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049f2:	2200      	movs	r2, #0
 80049f4:	210f      	movs	r1, #15
 80049f6:	f06f 0001 	mvn.w	r0, #1
 80049fa:	f001 f96f 	bl	8005cdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800

08004a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2f      	ldr	r2, [pc, #188]	; (8004ae8 <HAL_ADC_MspInit+0xdc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d157      	bne.n	8004ade <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_ADC_MspInit+0xe0>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	4a2d      	ldr	r2, [pc, #180]	; (8004aec <HAL_ADC_MspInit+0xe0>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a3e:	4b2b      	ldr	r3, [pc, #172]	; (8004aec <HAL_ADC_MspInit+0xe0>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	4b27      	ldr	r3, [pc, #156]	; (8004aec <HAL_ADC_MspInit+0xe0>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	4a26      	ldr	r2, [pc, #152]	; (8004aec <HAL_ADC_MspInit+0xe0>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6313      	str	r3, [r2, #48]	; 0x30
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <HAL_ADC_MspInit+0xe0>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a66:	2303      	movs	r3, #3
 8004a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a72:	f107 0314 	add.w	r3, r7, #20
 8004a76:	4619      	mov	r1, r3
 8004a78:	481d      	ldr	r0, [pc, #116]	; (8004af0 <HAL_ADC_MspInit+0xe4>)
 8004a7a:	f001 fd69 	bl	8006550 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004a80:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <HAL_ADC_MspInit+0xec>)
 8004a82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004a84:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a90:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004aa4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004aa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004aac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ab4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004ac2:	480c      	ldr	r0, [pc, #48]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004ac4:	f001 f934 	bl	8005d30 <HAL_DMA_Init>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004ace:	f7ff ff6b 	bl	80049a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a07      	ldr	r2, [pc, #28]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
 8004ad8:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <HAL_ADC_MspInit+0xe8>)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ade:	bf00      	nop
 8004ae0:	3728      	adds	r7, #40	; 0x28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40012000 	.word	0x40012000
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40020000 	.word	0x40020000
 8004af4:	20000b98 	.word	0x20000b98
 8004af8:	40026410 	.word	0x40026410

08004afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b04:	f107 0314 	add.w	r3, r7, #20
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	609a      	str	r2, [r3, #8]
 8004b10:	60da      	str	r2, [r3, #12]
 8004b12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a4c      	ldr	r2, [pc, #304]	; (8004c4c <HAL_I2C_MspInit+0x150>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	f040 8091 	bne.w	8004c42 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	4b4a      	ldr	r3, [pc, #296]	; (8004c50 <HAL_I2C_MspInit+0x154>)
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	4a49      	ldr	r2, [pc, #292]	; (8004c50 <HAL_I2C_MspInit+0x154>)
 8004b2a:	f043 0302 	orr.w	r3, r3, #2
 8004b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b30:	4b47      	ldr	r3, [pc, #284]	; (8004c50 <HAL_I2C_MspInit+0x154>)
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b42:	2312      	movs	r3, #18
 8004b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b4e:	2304      	movs	r3, #4
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b52:	f107 0314 	add.w	r3, r7, #20
 8004b56:	4619      	mov	r1, r3
 8004b58:	483e      	ldr	r0, [pc, #248]	; (8004c54 <HAL_I2C_MspInit+0x158>)
 8004b5a:	f001 fcf9 	bl	8006550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <HAL_I2C_MspInit+0x154>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	4a3a      	ldr	r2, [pc, #232]	; (8004c50 <HAL_I2C_MspInit+0x154>)
 8004b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b6e:	4b38      	ldr	r3, [pc, #224]	; (8004c50 <HAL_I2C_MspInit+0x154>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004b7a:	4b37      	ldr	r3, [pc, #220]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004b7c:	4a37      	ldr	r2, [pc, #220]	; (8004c5c <HAL_I2C_MspInit+0x160>)
 8004b7e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004b80:	4b35      	ldr	r3, [pc, #212]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b86:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b88:	4b33      	ldr	r3, [pc, #204]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b8e:	4b32      	ldr	r3, [pc, #200]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b94:	4b30      	ldr	r3, [pc, #192]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b9a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ba2:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004ba8:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bae:	4b2a      	ldr	r3, [pc, #168]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bb4:	4b28      	ldr	r3, [pc, #160]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004bba:	4827      	ldr	r0, [pc, #156]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004bbc:	f001 f8b8 	bl	8005d30 <HAL_DMA_Init>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8004bc6:	f7ff feef 	bl	80049a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a22      	ldr	r2, [pc, #136]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <HAL_I2C_MspInit+0x15c>)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004bd6:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004bd8:	4a22      	ldr	r2, [pc, #136]	; (8004c64 <HAL_I2C_MspInit+0x168>)
 8004bda:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004bdc:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004bde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004be2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004be4:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004be6:	2240      	movs	r2, #64	; 0x40
 8004be8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bea:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bf0:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bf6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bfe:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c10:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004c16:	4812      	ldr	r0, [pc, #72]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004c18:	f001 f88a 	bl	8005d30 <HAL_DMA_Init>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8004c22:	f7ff fec1 	bl	80049a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a0d      	ldr	r2, [pc, #52]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34
 8004c2c:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <HAL_I2C_MspInit+0x164>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004c32:	2200      	movs	r2, #0
 8004c34:	2105      	movs	r1, #5
 8004c36:	201f      	movs	r0, #31
 8004c38:	f001 f850 	bl	8005cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004c3c:	201f      	movs	r0, #31
 8004c3e:	f001 f869 	bl	8005d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c42:	bf00      	nop
 8004c44:	3728      	adds	r7, #40	; 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40005400 	.word	0x40005400
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40020400 	.word	0x40020400
 8004c58:	20000c4c 	.word	0x20000c4c
 8004c5c:	40026010 	.word	0x40026010
 8004c60:	20000cac 	.word	0x20000cac
 8004c64:	400260a0 	.word	0x400260a0

08004c68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c70:	f107 030c 	add.w	r3, r7, #12
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a0c      	ldr	r2, [pc, #48]	; (8004cb8 <HAL_RTC_MspInit+0x50>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d111      	bne.n	8004cae <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c92:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c94:	f107 030c 	add.w	r3, r7, #12
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f006 fb9b 	bl	800b3d4 <HAL_RCCEx_PeriphCLKConfig>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004ca4:	f7ff fe80 	bl	80049a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004ca8:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <HAL_RTC_MspInit+0x54>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004cae:	bf00      	nop
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40002800 	.word	0x40002800
 8004cbc:	42470e3c 	.word	0x42470e3c

08004cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08c      	sub	sp, #48	; 0x30
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce0:	d116      	bne.n	8004d10 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	4a36      	ldr	r2, [pc, #216]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf2:	4b34      	ldr	r3, [pc, #208]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2105      	movs	r1, #5
 8004d02:	201c      	movs	r0, #28
 8004d04:	f000 ffea 	bl	8005cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d08:	201c      	movs	r0, #28
 8004d0a:	f001 f803 	bl	8005d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004d0e:	e054      	b.n	8004dba <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <HAL_TIM_Base_MspInit+0x108>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d134      	bne.n	8004d84 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	6313      	str	r3, [r2, #48]	; 0x30
 8004d46:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d52:	2340      	movs	r3, #64	; 0x40
 8004d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d56:	2302      	movs	r3, #2
 8004d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d62:	2302      	movs	r3, #2
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d66:	f107 031c 	add.w	r3, r7, #28
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4817      	ldr	r0, [pc, #92]	; (8004dcc <HAL_TIM_Base_MspInit+0x10c>)
 8004d6e:	f001 fbef 	bl	8006550 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004d72:	2200      	movs	r2, #0
 8004d74:	2105      	movs	r1, #5
 8004d76:	201d      	movs	r0, #29
 8004d78:	f000 ffb0 	bl	8005cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004d7c:	201d      	movs	r0, #29
 8004d7e:	f000 ffc9 	bl	8005d14 <HAL_NVIC_EnableIRQ>
}
 8004d82:	e01a      	b.n	8004dba <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <HAL_TIM_Base_MspInit+0x110>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d115      	bne.n	8004dba <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004d98:	f043 0304 	orr.w	r3, r3, #4
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_TIM_Base_MspInit+0x104>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004daa:	2200      	movs	r2, #0
 8004dac:	2105      	movs	r1, #5
 8004dae:	201e      	movs	r0, #30
 8004db0:	f000 ff94 	bl	8005cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004db4:	201e      	movs	r0, #30
 8004db6:	f000 ffad 	bl	8005d14 <HAL_NVIC_EnableIRQ>
}
 8004dba:	bf00      	nop
 8004dbc:	3730      	adds	r7, #48	; 0x30
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40020000 	.word	0x40020000
 8004dd0:	40000800 	.word	0x40000800

08004dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	; 0x30
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ddc:	f107 031c 	add.w	r3, r7, #28
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a36      	ldr	r2, [pc, #216]	; (8004ecc <HAL_UART_MspInit+0xf8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d135      	bne.n	8004e62 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	4a34      	ldr	r2, [pc, #208]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e00:	f043 0310 	orr.w	r3, r3, #16
 8004e04:	6453      	str	r3, [r2, #68]	; 0x44
 8004e06:	4b32      	ldr	r3, [pc, #200]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	4a2d      	ldr	r2, [pc, #180]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	6313      	str	r3, [r2, #48]	; 0x30
 8004e22:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e34:	2302      	movs	r3, #2
 8004e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e40:	2307      	movs	r3, #7
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e44:	f107 031c 	add.w	r3, r7, #28
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4822      	ldr	r0, [pc, #136]	; (8004ed4 <HAL_UART_MspInit+0x100>)
 8004e4c:	f001 fb80 	bl	8006550 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004e50:	2200      	movs	r2, #0
 8004e52:	2105      	movs	r1, #5
 8004e54:	2025      	movs	r0, #37	; 0x25
 8004e56:	f000 ff41 	bl	8005cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e5a:	2025      	movs	r0, #37	; 0x25
 8004e5c:	f000 ff5a 	bl	8005d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e60:	e030      	b.n	8004ec4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <HAL_UART_MspInit+0x104>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d12b      	bne.n	8004ec4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	4b17      	ldr	r3, [pc, #92]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7c:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6313      	str	r3, [r2, #48]	; 0x30
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_UART_MspInit+0xfc>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004eb4:	2307      	movs	r3, #7
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb8:	f107 031c 	add.w	r3, r7, #28
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <HAL_UART_MspInit+0x100>)
 8004ec0:	f001 fb46 	bl	8006550 <HAL_GPIO_Init>
}
 8004ec4:	bf00      	nop
 8004ec6:	3730      	adds	r7, #48	; 0x30
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40011000 	.word	0x40011000
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40020000 	.word	0x40020000
 8004ed8:	40004400 	.word	0x40004400

08004edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <HAL_InitTick+0xd0>)
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	4a2d      	ldr	r2, [pc, #180]	; (8004fac <HAL_InitTick+0xd0>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6453      	str	r3, [r2, #68]	; 0x44
 8004efc:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <HAL_InitTick+0xd0>)
 8004efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f08:	f107 020c 	add.w	r2, r7, #12
 8004f0c:	f107 0310 	add.w	r3, r7, #16
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f006 fa2c 	bl	800b370 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004f18:	f006 fa16 	bl	800b348 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	4a23      	ldr	r2, [pc, #140]	; (8004fb0 <HAL_InitTick+0xd4>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	0c9b      	lsrs	r3, r3, #18
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <HAL_InitTick+0xd8>)
 8004f2e:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <HAL_InitTick+0xdc>)
 8004f30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004f32:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <HAL_InitTick+0xd8>)
 8004f34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <HAL_InitTick+0xd8>)
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004f40:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <HAL_InitTick+0xd8>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f46:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <HAL_InitTick+0xd8>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <HAL_InitTick+0xd8>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004f52:	4818      	ldr	r0, [pc, #96]	; (8004fb4 <HAL_InitTick+0xd8>)
 8004f54:	f006 ff86 	bl	800be64 <HAL_TIM_Base_Init>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11b      	bne.n	8004f9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004f66:	4813      	ldr	r0, [pc, #76]	; (8004fb4 <HAL_InitTick+0xd8>)
 8004f68:	f006 ffcc 	bl	800bf04 <HAL_TIM_Base_Start_IT>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d111      	bne.n	8004f9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004f7a:	2019      	movs	r0, #25
 8004f7c:	f000 feca 	bl	8005d14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b0f      	cmp	r3, #15
 8004f84:	d808      	bhi.n	8004f98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004f86:	2200      	movs	r2, #0
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	2019      	movs	r0, #25
 8004f8c:	f000 fea6 	bl	8005cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <HAL_InitTick+0xe0>)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e002      	b.n	8004f9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3730      	adds	r7, #48	; 0x30
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	431bde83 	.word	0x431bde83
 8004fb4:	200012f0 	.word	0x200012f0
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	20000018 	.word	0x20000018

08004fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fc4:	e7fe      	b.n	8004fc4 <NMI_Handler+0x4>

08004fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fca:	e7fe      	b.n	8004fca <HardFault_Handler+0x4>

08004fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fd0:	e7fe      	b.n	8004fd0 <MemManage_Handler+0x4>

08004fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fd6:	e7fe      	b.n	8004fd6 <BusFault_Handler+0x4>

08004fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fdc:	e7fe      	b.n	8004fdc <UsageFault_Handler+0x4>

08004fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004ff0:	4802      	ldr	r0, [pc, #8]	; (8004ffc <DMA1_Stream0_IRQHandler+0x10>)
 8004ff2:	f001 f835 	bl	8006060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000c4c 	.word	0x20000c4c

08005000 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005004:	4802      	ldr	r0, [pc, #8]	; (8005010 <DMA1_Stream6_IRQHandler+0x10>)
 8005006:	f001 f82b 	bl	8006060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000cac 	.word	0x20000cac

08005014 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005018:	4802      	ldr	r0, [pc, #8]	; (8005024 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800501a:	f007 fa25 	bl	800c468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	200012f0 	.word	0x200012f0

08005028 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800502c:	4802      	ldr	r0, [pc, #8]	; (8005038 <TIM2_IRQHandler+0x10>)
 800502e:	f007 fa1b 	bl	800c468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000d2c 	.word	0x20000d2c

0800503c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005040:	4802      	ldr	r0, [pc, #8]	; (800504c <TIM3_IRQHandler+0x10>)
 8005042:	f007 fa11 	bl	800c468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000d74 	.word	0x20000d74

08005050 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005054:	4802      	ldr	r0, [pc, #8]	; (8005060 <TIM4_IRQHandler+0x10>)
 8005056:	f007 fa07 	bl	800c468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000dbc 	.word	0x20000dbc

08005064 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005068:	4802      	ldr	r0, [pc, #8]	; (8005074 <I2C1_EV_IRQHandler+0x10>)
 800506a:	f002 faf5 	bl	8007658 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800506e:	bf00      	nop
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000bf8 	.word	0x20000bf8

08005078 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 800507c:	4803      	ldr	r0, [pc, #12]	; (800508c <USART1_IRQHandler+0x14>)
 800507e:	f7fd fb03 	bl	8002688 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005082:	4802      	ldr	r0, [pc, #8]	; (800508c <USART1_IRQHandler+0x14>)
 8005084:	f007 ffa8 	bl	800cfd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005088:	bf00      	nop
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000e04 	.word	0x20000e04

08005090 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <DMA2_Stream0_IRQHandler+0x10>)
 8005096:	f000 ffe3 	bl	8006060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000b98 	.word	0x20000b98

080050a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <OTG_FS_IRQHandler+0x10>)
 80050aa:	f004 fbb3 	bl	8009814 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200055b4 	.word	0x200055b4

080050b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return 1;
 80050bc:	2301      	movs	r3, #1
}
 80050be:	4618      	mov	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <_kill>:

int _kill(int pid, int sig)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050d2:	f00e ff79 	bl	8013fc8 <__errno>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2216      	movs	r2, #22
 80050da:	601a      	str	r2, [r3, #0]
  return -1;
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <_exit>:

void _exit (int status)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050f0:	f04f 31ff 	mov.w	r1, #4294967295
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff ffe7 	bl	80050c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80050fa:	e7fe      	b.n	80050fa <_exit+0x12>

080050fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e00a      	b.n	8005124 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800510e:	f3af 8000 	nop.w
 8005112:	4601      	mov	r1, r0
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	60ba      	str	r2, [r7, #8]
 800511a:	b2ca      	uxtb	r2, r1
 800511c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	3301      	adds	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	dbf0      	blt.n	800510e <_read+0x12>
  }

  return len;
 800512c:	687b      	ldr	r3, [r7, #4]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b086      	sub	sp, #24
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e009      	b.n	800515c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	60ba      	str	r2, [r7, #8]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3301      	adds	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	dbf1      	blt.n	8005148 <_write+0x12>
  }
  return len;
 8005164:	687b      	ldr	r3, [r7, #4]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <_close>:

int _close(int file)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005196:	605a      	str	r2, [r3, #4]
  return 0;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <_isatty>:

int _isatty(int file)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051ae:	2301      	movs	r3, #1
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051e0:	4a14      	ldr	r2, [pc, #80]	; (8005234 <_sbrk+0x5c>)
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <_sbrk+0x60>)
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051ec:	4b13      	ldr	r3, [pc, #76]	; (800523c <_sbrk+0x64>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <_sbrk+0x64>)
 80051f6:	4a12      	ldr	r2, [pc, #72]	; (8005240 <_sbrk+0x68>)
 80051f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <_sbrk+0x64>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	429a      	cmp	r2, r3
 8005206:	d207      	bcs.n	8005218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005208:	f00e fede 	bl	8013fc8 <__errno>
 800520c:	4603      	mov	r3, r0
 800520e:	220c      	movs	r2, #12
 8005210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	e009      	b.n	800522c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005218:	4b08      	ldr	r3, [pc, #32]	; (800523c <_sbrk+0x64>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800521e:	4b07      	ldr	r3, [pc, #28]	; (800523c <_sbrk+0x64>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	4a05      	ldr	r2, [pc, #20]	; (800523c <_sbrk+0x64>)
 8005228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20018000 	.word	0x20018000
 8005238:	00000400 	.word	0x00000400
 800523c:	20001338 	.word	0x20001338
 8005240:	20005af0 	.word	0x20005af0

08005244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <SystemInit+0x20>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	4a05      	ldr	r2, [pc, #20]	; (8005264 <SystemInit+0x20>)
 8005250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800526c:	480d      	ldr	r0, [pc, #52]	; (80052a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800526e:	490e      	ldr	r1, [pc, #56]	; (80052a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005270:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005274:	e002      	b.n	800527c <LoopCopyDataInit>

08005276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800527a:	3304      	adds	r3, #4

0800527c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800527c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800527e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005280:	d3f9      	bcc.n	8005276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005282:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005284:	4c0b      	ldr	r4, [pc, #44]	; (80052b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005288:	e001      	b.n	800528e <LoopFillZerobss>

0800528a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800528a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800528c:	3204      	adds	r2, #4

0800528e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800528e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005290:	d3fb      	bcc.n	800528a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005292:	f7ff ffd7 	bl	8005244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005296:	f00e ff93 	bl	80141c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800529a:	f7fe fe8b 	bl	8003fb4 <main>
  bx  lr    
 800529e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80052a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80052a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052a8:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 80052ac:	08017d7c 	.word	0x08017d7c
  ldr r2, =_sbss
 80052b0:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 80052b4:	20005aec 	.word	0x20005aec

080052b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052b8:	e7fe      	b.n	80052b8 <ADC_IRQHandler>
	...

080052bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <HAL_Init+0x40>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0d      	ldr	r2, [pc, #52]	; (80052fc <HAL_Init+0x40>)
 80052c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_Init+0x40>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <HAL_Init+0x40>)
 80052d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052d8:	4b08      	ldr	r3, [pc, #32]	; (80052fc <HAL_Init+0x40>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a07      	ldr	r2, [pc, #28]	; (80052fc <HAL_Init+0x40>)
 80052de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052e4:	2003      	movs	r0, #3
 80052e6:	f000 fcee 	bl	8005cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052ea:	200f      	movs	r0, #15
 80052ec:	f7ff fdf6 	bl	8004edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052f0:	f7ff fb60 	bl	80049b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023c00 	.word	0x40023c00

08005300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_IncTick+0x20>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_IncTick+0x24>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4413      	add	r3, r2
 8005310:	4a04      	ldr	r2, [pc, #16]	; (8005324 <HAL_IncTick+0x24>)
 8005312:	6013      	str	r3, [r2, #0]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	2000001c 	.word	0x2000001c
 8005324:	2000133c 	.word	0x2000133c

08005328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return uwTick;
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_GetTick+0x14>)
 800532e:	681b      	ldr	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	2000133c 	.word	0x2000133c

08005340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005348:	f7ff ffee 	bl	8005328 <HAL_GetTick>
 800534c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d005      	beq.n	8005366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <HAL_Delay+0x44>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005366:	bf00      	nop
 8005368:	f7ff ffde 	bl	8005328 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d8f7      	bhi.n	8005368 <HAL_Delay+0x28>
  {
  }
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	2000001c 	.word	0x2000001c

08005388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e033      	b.n	8005406 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fb30 	bl	8004a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d118      	bne.n	80053f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053ce:	f023 0302 	bic.w	r3, r3, #2
 80053d2:	f043 0202 	orr.w	r2, r3, #2
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa48 	bl	8005870 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
 80053f6:	e001      	b.n	80053fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005404:	7bfb      	ldrb	r3, [r7, #15]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_ADC_Start_DMA+0x1e>
 800542a:	2302      	movs	r3, #2
 800542c:	e0ce      	b.n	80055cc <HAL_ADC_Start_DMA+0x1bc>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d018      	beq.n	8005476 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005454:	4b5f      	ldr	r3, [pc, #380]	; (80055d4 <HAL_ADC_Start_DMA+0x1c4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a5f      	ldr	r2, [pc, #380]	; (80055d8 <HAL_ADC_Start_DMA+0x1c8>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0c9a      	lsrs	r2, r3, #18
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005468:	e002      	b.n	8005470 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	3b01      	subs	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f9      	bne.n	800546a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005484:	d107      	bne.n	8005496 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005494:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	f040 8086 	bne.w	80055b2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e4:	d106      	bne.n	80054f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ea:	f023 0206 	bic.w	r2, r3, #6
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	645a      	str	r2, [r3, #68]	; 0x44
 80054f2:	e002      	b.n	80054fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005502:	4b36      	ldr	r3, [pc, #216]	; (80055dc <HAL_ADC_Start_DMA+0x1cc>)
 8005504:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	4a35      	ldr	r2, [pc, #212]	; (80055e0 <HAL_ADC_Start_DMA+0x1d0>)
 800550c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	4a34      	ldr	r2, [pc, #208]	; (80055e4 <HAL_ADC_Start_DMA+0x1d4>)
 8005514:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	4a33      	ldr	r2, [pc, #204]	; (80055e8 <HAL_ADC_Start_DMA+0x1d8>)
 800551c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005526:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005536:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005546:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	334c      	adds	r3, #76	; 0x4c
 8005552:	4619      	mov	r1, r3
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f000 fc98 	bl	8005e8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10f      	bne.n	8005588 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d129      	bne.n	80055ca <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005584:	609a      	str	r2, [r3, #8]
 8005586:	e020      	b.n	80055ca <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a17      	ldr	r2, [pc, #92]	; (80055ec <HAL_ADC_Start_DMA+0x1dc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d11b      	bne.n	80055ca <HAL_ADC_Start_DMA+0x1ba>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d114      	bne.n	80055ca <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	e00b      	b.n	80055ca <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0210 	orr.w	r2, r3, #16
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	f043 0201 	orr.w	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000014 	.word	0x20000014
 80055d8:	431bde83 	.word	0x431bde83
 80055dc:	40012300 	.word	0x40012300
 80055e0:	08005a69 	.word	0x08005a69
 80055e4:	08005b23 	.word	0x08005b23
 80055e8:	08005b3f 	.word	0x08005b3f
 80055ec:	40012000 	.word	0x40012000

080055f0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x1c>
 8005644:	2302      	movs	r3, #2
 8005646:	e105      	b.n	8005854 <HAL_ADC_ConfigChannel+0x228>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b09      	cmp	r3, #9
 8005656:	d925      	bls.n	80056a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68d9      	ldr	r1, [r3, #12]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	4613      	mov	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	4413      	add	r3, r2
 800566c:	3b1e      	subs	r3, #30
 800566e:	2207      	movs	r2, #7
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43da      	mvns	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	400a      	ands	r2, r1
 800567c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68d9      	ldr	r1, [r3, #12]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	4618      	mov	r0, r3
 8005690:	4603      	mov	r3, r0
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4403      	add	r3, r0
 8005696:	3b1e      	subs	r3, #30
 8005698:	409a      	lsls	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	e022      	b.n	80056ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6919      	ldr	r1, [r3, #16]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	4613      	mov	r3, r2
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4413      	add	r3, r2
 80056b8:	2207      	movs	r2, #7
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	43da      	mvns	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	400a      	ands	r2, r1
 80056c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6919      	ldr	r1, [r3, #16]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	4618      	mov	r0, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4403      	add	r3, r0
 80056e0:	409a      	lsls	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b06      	cmp	r3, #6
 80056f0:	d824      	bhi.n	800573c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	3b05      	subs	r3, #5
 8005704:	221f      	movs	r2, #31
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	43da      	mvns	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	400a      	ands	r2, r1
 8005712:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	4618      	mov	r0, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	3b05      	subs	r3, #5
 800572e:	fa00 f203 	lsl.w	r2, r0, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	635a      	str	r2, [r3, #52]	; 0x34
 800573a:	e04c      	b.n	80057d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b0c      	cmp	r3, #12
 8005742:	d824      	bhi.n	800578e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	3b23      	subs	r3, #35	; 0x23
 8005756:	221f      	movs	r2, #31
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	43da      	mvns	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	400a      	ands	r2, r1
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	4618      	mov	r0, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	3b23      	subs	r3, #35	; 0x23
 8005780:	fa00 f203 	lsl.w	r2, r0, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
 800578c:	e023      	b.n	80057d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	3b41      	subs	r3, #65	; 0x41
 80057a0:	221f      	movs	r2, #31
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43da      	mvns	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	400a      	ands	r2, r1
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	4618      	mov	r0, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	3b41      	subs	r3, #65	; 0x41
 80057ca:	fa00 f203 	lsl.w	r2, r0, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <HAL_ADC_ConfigChannel+0x234>)
 80057d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a21      	ldr	r2, [pc, #132]	; (8005864 <HAL_ADC_ConfigChannel+0x238>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d109      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x1cc>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b12      	cmp	r3, #18
 80057ea:	d105      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a19      	ldr	r2, [pc, #100]	; (8005864 <HAL_ADC_ConfigChannel+0x238>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d123      	bne.n	800584a <HAL_ADC_ConfigChannel+0x21e>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b10      	cmp	r3, #16
 8005808:	d003      	beq.n	8005812 <HAL_ADC_ConfigChannel+0x1e6>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b11      	cmp	r3, #17
 8005810:	d11b      	bne.n	800584a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b10      	cmp	r3, #16
 8005824:	d111      	bne.n	800584a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <HAL_ADC_ConfigChannel+0x23c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a10      	ldr	r2, [pc, #64]	; (800586c <HAL_ADC_ConfigChannel+0x240>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	0c9a      	lsrs	r2, r3, #18
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800583c:	e002      	b.n	8005844 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3b01      	subs	r3, #1
 8005842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f9      	bne.n	800583e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40012300 	.word	0x40012300
 8005864:	40012000 	.word	0x40012000
 8005868:	20000014 	.word	0x20000014
 800586c:	431bde83 	.word	0x431bde83

08005870 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005878:	4b79      	ldr	r3, [pc, #484]	; (8005a60 <ADC_Init+0x1f0>)
 800587a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	431a      	orrs	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	021a      	lsls	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6899      	ldr	r1, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	4a58      	ldr	r2, [pc, #352]	; (8005a64 <ADC_Init+0x1f4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d022      	beq.n	800594e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005916:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6899      	ldr	r1, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6899      	ldr	r1, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	e00f      	b.n	800596e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800595c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800596c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0202 	bic.w	r2, r2, #2
 800597c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6899      	ldr	r1, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7e1b      	ldrb	r3, [r3, #24]
 8005988:	005a      	lsls	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01b      	beq.n	80059d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	3b01      	subs	r3, #1
 80059c8:	035a      	lsls	r2, r3, #13
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	e007      	b.n	80059e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	051a      	lsls	r2, r3, #20
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a26:	025a      	lsls	r2, r3, #9
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6899      	ldr	r1, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	029a      	lsls	r2, r3, #10
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
}
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40012300 	.word	0x40012300
 8005a64:	0f000001 	.word	0x0f000001

08005a68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d13c      	bne.n	8005afc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d12b      	bne.n	8005af4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d127      	bne.n	8005af4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d119      	bne.n	8005af4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0220 	bic.w	r2, r2, #32
 8005ace:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	f043 0201 	orr.w	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7ff fd7b 	bl	80055f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005afa:	e00e      	b.n	8005b1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff fd85 	bl	8005618 <HAL_ADC_ErrorCallback>
}
 8005b0e:	e004      	b.n	8005b1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fd67 	bl	8005604 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2240      	movs	r2, #64	; 0x40
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	f043 0204 	orr.w	r2, r3, #4
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff fd5a 	bl	8005618 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b9e:	4a04      	ldr	r2, [pc, #16]	; (8005bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	60d3      	str	r3, [r2, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	e000ed00 	.word	0xe000ed00

08005bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <__NVIC_GetPriorityGrouping+0x18>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 0307 	and.w	r3, r3, #7
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	db0b      	blt.n	8005bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	f003 021f 	and.w	r2, r3, #31
 8005be8:	4907      	ldr	r1, [pc, #28]	; (8005c08 <__NVIC_EnableIRQ+0x38>)
 8005bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000e100 	.word	0xe000e100

08005c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	db0a      	blt.n	8005c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	490c      	ldr	r1, [pc, #48]	; (8005c58 <__NVIC_SetPriority+0x4c>)
 8005c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2a:	0112      	lsls	r2, r2, #4
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	440b      	add	r3, r1
 8005c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c34:	e00a      	b.n	8005c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	4908      	ldr	r1, [pc, #32]	; (8005c5c <__NVIC_SetPriority+0x50>)
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	3b04      	subs	r3, #4
 8005c44:	0112      	lsls	r2, r2, #4
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	440b      	add	r3, r1
 8005c4a:	761a      	strb	r2, [r3, #24]
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	e000e100 	.word	0xe000e100
 8005c5c:	e000ed00 	.word	0xe000ed00

08005c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b089      	sub	sp, #36	; 0x24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f1c3 0307 	rsb	r3, r3, #7
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	bf28      	it	cs
 8005c7e:	2304      	movcs	r3, #4
 8005c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3304      	adds	r3, #4
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d902      	bls.n	8005c90 <NVIC_EncodePriority+0x30>
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3b03      	subs	r3, #3
 8005c8e:	e000      	b.n	8005c92 <NVIC_EncodePriority+0x32>
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43da      	mvns	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb2:	43d9      	mvns	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cb8:	4313      	orrs	r3, r2
         );
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3724      	adds	r7, #36	; 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ff4c 	bl	8005b6c <__NVIC_SetPriorityGrouping>
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005cee:	f7ff ff61 	bl	8005bb4 <__NVIC_GetPriorityGrouping>
 8005cf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	6978      	ldr	r0, [r7, #20]
 8005cfa:	f7ff ffb1 	bl	8005c60 <NVIC_EncodePriority>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff ff80 	bl	8005c0c <__NVIC_SetPriority>
}
 8005d0c:	bf00      	nop
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff ff54 	bl	8005bd0 <__NVIC_EnableIRQ>
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d3c:	f7ff faf4 	bl	8005328 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e099      	b.n	8005e80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d6c:	e00f      	b.n	8005d8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d6e:	f7ff fadb 	bl	8005328 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	d908      	bls.n	8005d8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2203      	movs	r2, #3
 8005d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e078      	b.n	8005e80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e8      	bne.n	8005d6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_DMA_Init+0x158>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d107      	bne.n	8005df8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	4313      	orrs	r3, r2
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0307 	bic.w	r3, r3, #7
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d117      	bne.n	8005e52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00e      	beq.n	8005e52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fb0f 	bl	8006458 <DMA_CheckFifoParam>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2240      	movs	r2, #64	; 0x40
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e016      	b.n	8005e80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fac6 	bl	80063ec <DMA_CalcBaseAndBitshift>
 8005e60:	4603      	mov	r3, r0
 8005e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	223f      	movs	r2, #63	; 0x3f
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	f010803f 	.word	0xf010803f

08005e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_DMA_Start_IT+0x26>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e040      	b.n	8005f34 <HAL_DMA_Start_IT+0xa8>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d12f      	bne.n	8005f26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fa58 	bl	8006390 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee4:	223f      	movs	r2, #63	; 0x3f
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0216 	orr.w	r2, r2, #22
 8005efa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0208 	orr.w	r2, r2, #8
 8005f12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e005      	b.n	8005f32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f4a:	f7ff f9ed 	bl	8005328 <HAL_GetTick>
 8005f4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d008      	beq.n	8005f6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e052      	b.n	8006014 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0216 	bic.w	r2, r2, #22
 8005f7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d103      	bne.n	8005f9e <HAL_DMA_Abort+0x62>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0208 	bic.w	r2, r2, #8
 8005fac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fbe:	e013      	b.n	8005fe8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fc0:	f7ff f9b2 	bl	8005328 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d90c      	bls.n	8005fe8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e015      	b.n	8006014 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e4      	bne.n	8005fc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	223f      	movs	r2, #63	; 0x3f
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d004      	beq.n	800603a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2280      	movs	r2, #128	; 0x80
 8006034:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e00c      	b.n	8006054 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2205      	movs	r2, #5
 800603e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800606c:	4b8e      	ldr	r3, [pc, #568]	; (80062a8 <HAL_DMA_IRQHandler+0x248>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a8e      	ldr	r2, [pc, #568]	; (80062ac <HAL_DMA_IRQHandler+0x24c>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	0a9b      	lsrs	r3, r3, #10
 8006078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	2208      	movs	r2, #8
 800608c:	409a      	lsls	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01a      	beq.n	80060cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d013      	beq.n	80060cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0204 	bic.w	r2, r2, #4
 80060b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b8:	2208      	movs	r2, #8
 80060ba:	409a      	lsls	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c4:	f043 0201 	orr.w	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d0:	2201      	movs	r2, #1
 80060d2:	409a      	lsls	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d012      	beq.n	8006102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00b      	beq.n	8006102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ee:	2201      	movs	r2, #1
 80060f0:	409a      	lsls	r2, r3
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	f043 0202 	orr.w	r2, r3, #2
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006106:	2204      	movs	r2, #4
 8006108:	409a      	lsls	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4013      	ands	r3, r2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d012      	beq.n	8006138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006124:	2204      	movs	r2, #4
 8006126:	409a      	lsls	r2, r3
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	f043 0204 	orr.w	r2, r3, #4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	2210      	movs	r2, #16
 800613e:	409a      	lsls	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4013      	ands	r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d043      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d03c      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	2210      	movs	r2, #16
 800615c:	409a      	lsls	r2, r3
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d018      	beq.n	80061a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d108      	bne.n	8006190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d024      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
 800618e:	e01f      	b.n	80061d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01b      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
 80061a0:	e016      	b.n	80061d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d107      	bne.n	80061c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0208 	bic.w	r2, r2, #8
 80061be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d4:	2220      	movs	r2, #32
 80061d6:	409a      	lsls	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4013      	ands	r3, r2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 808f 	beq.w	8006300 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8087 	beq.w	8006300 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f6:	2220      	movs	r2, #32
 80061f8:	409a      	lsls	r2, r3
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b05      	cmp	r3, #5
 8006208:	d136      	bne.n	8006278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0216 	bic.w	r2, r2, #22
 8006218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <HAL_DMA_IRQHandler+0x1da>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0208 	bic.w	r2, r2, #8
 8006248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624e:	223f      	movs	r2, #63	; 0x3f
 8006250:	409a      	lsls	r2, r3
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626a:	2b00      	cmp	r3, #0
 800626c:	d07e      	beq.n	800636c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
        }
        return;
 8006276:	e079      	b.n	800636c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01d      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10d      	bne.n	80062b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	2b00      	cmp	r3, #0
 800629a:	d031      	beq.n	8006300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
 80062a4:	e02c      	b.n	8006300 <HAL_DMA_IRQHandler+0x2a0>
 80062a6:	bf00      	nop
 80062a8:	20000014 	.word	0x20000014
 80062ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d023      	beq.n	8006300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
 80062c0:	e01e      	b.n	8006300 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10f      	bne.n	80062f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0210 	bic.w	r2, r2, #16
 80062de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006304:	2b00      	cmp	r3, #0
 8006306:	d032      	beq.n	800636e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d022      	beq.n	800635a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2205      	movs	r2, #5
 8006318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	3301      	adds	r3, #1
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	429a      	cmp	r2, r3
 8006336:	d307      	bcc.n	8006348 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f2      	bne.n	800632c <HAL_DMA_IRQHandler+0x2cc>
 8006346:	e000      	b.n	800634a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006348:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
 800636a:	e000      	b.n	800636e <HAL_DMA_IRQHandler+0x30e>
        return;
 800636c:	bf00      	nop
    }
  }
}
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006382:	b2db      	uxtb	r3, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d108      	bne.n	80063d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063ce:	e007      	b.n	80063e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]
}
 80063e0:	bf00      	nop
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	3b10      	subs	r3, #16
 80063fc:	4a14      	ldr	r2, [pc, #80]	; (8006450 <DMA_CalcBaseAndBitshift+0x64>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006406:	4a13      	ldr	r2, [pc, #76]	; (8006454 <DMA_CalcBaseAndBitshift+0x68>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d909      	bls.n	800642e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	1d1a      	adds	r2, r3, #4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	659a      	str	r2, [r3, #88]	; 0x58
 800642c:	e007      	b.n	800643e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	aaaaaaab 	.word	0xaaaaaaab
 8006454:	08017988 	.word	0x08017988

08006458 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11f      	bne.n	80064b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d856      	bhi.n	8006526 <DMA_CheckFifoParam+0xce>
 8006478:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <DMA_CheckFifoParam+0x28>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	08006491 	.word	0x08006491
 8006484:	080064a3 	.word	0x080064a3
 8006488:	08006491 	.word	0x08006491
 800648c:	08006527 	.word	0x08006527
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d046      	beq.n	800652a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064a0:	e043      	b.n	800652a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064aa:	d140      	bne.n	800652e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064b0:	e03d      	b.n	800652e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ba:	d121      	bne.n	8006500 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d837      	bhi.n	8006532 <DMA_CheckFifoParam+0xda>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <DMA_CheckFifoParam+0x70>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064df 	.word	0x080064df
 80064d0:	080064d9 	.word	0x080064d9
 80064d4:	080064f1 	.word	0x080064f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
      break;
 80064dc:	e030      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d025      	beq.n	8006536 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ee:	e022      	b.n	8006536 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064f8:	d11f      	bne.n	800653a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064fe:	e01c      	b.n	800653a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d903      	bls.n	800650e <DMA_CheckFifoParam+0xb6>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d003      	beq.n	8006514 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800650c:	e018      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
      break;
 8006512:	e015      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
      break;
 8006524:	e00b      	b.n	800653e <DMA_CheckFifoParam+0xe6>
      break;
 8006526:	bf00      	nop
 8006528:	e00a      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 800652a:	bf00      	nop
 800652c:	e008      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 800652e:	bf00      	nop
 8006530:	e006      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 8006532:	bf00      	nop
 8006534:	e004      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;   
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
      break;
 800653e:	bf00      	nop
    }
  } 
  
  return status; 
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006550:	b480      	push	{r7}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006562:	2300      	movs	r3, #0
 8006564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e159      	b.n	8006820 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800656c:	2201      	movs	r2, #1
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4013      	ands	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	429a      	cmp	r2, r3
 8006586:	f040 8148 	bne.w	800681a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d005      	beq.n	80065a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d130      	bne.n	8006604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	2203      	movs	r2, #3
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065d8:	2201      	movs	r2, #1
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	43db      	mvns	r3, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4013      	ands	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	091b      	lsrs	r3, r3, #4
 80065ee:	f003 0201 	and.w	r2, r3, #1
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	fa02 f303 	lsl.w	r3, r2, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	2b03      	cmp	r3, #3
 800660e:	d017      	beq.n	8006640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	2203      	movs	r2, #3
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	43db      	mvns	r3, r3
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	4013      	ands	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4313      	orrs	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d123      	bne.n	8006694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	08da      	lsrs	r2, r3, #3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3208      	adds	r2, #8
 8006654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	220f      	movs	r2, #15
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43db      	mvns	r3, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4013      	ands	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	4313      	orrs	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	08da      	lsrs	r2, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3208      	adds	r2, #8
 800668e:	69b9      	ldr	r1, [r7, #24]
 8006690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	2203      	movs	r2, #3
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	43db      	mvns	r3, r3
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4013      	ands	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f003 0203 	and.w	r2, r3, #3
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4313      	orrs	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80a2 	beq.w	800681a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	4b57      	ldr	r3, [pc, #348]	; (8006838 <HAL_GPIO_Init+0x2e8>)
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	4a56      	ldr	r2, [pc, #344]	; (8006838 <HAL_GPIO_Init+0x2e8>)
 80066e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066e4:	6453      	str	r3, [r2, #68]	; 0x44
 80066e6:	4b54      	ldr	r3, [pc, #336]	; (8006838 <HAL_GPIO_Init+0x2e8>)
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066f2:	4a52      	ldr	r2, [pc, #328]	; (800683c <HAL_GPIO_Init+0x2ec>)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	3302      	adds	r3, #2
 80066fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	220f      	movs	r2, #15
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	43db      	mvns	r3, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4013      	ands	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a49      	ldr	r2, [pc, #292]	; (8006840 <HAL_GPIO_Init+0x2f0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d019      	beq.n	8006752 <HAL_GPIO_Init+0x202>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a48      	ldr	r2, [pc, #288]	; (8006844 <HAL_GPIO_Init+0x2f4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <HAL_GPIO_Init+0x1fe>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a47      	ldr	r2, [pc, #284]	; (8006848 <HAL_GPIO_Init+0x2f8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00d      	beq.n	800674a <HAL_GPIO_Init+0x1fa>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a46      	ldr	r2, [pc, #280]	; (800684c <HAL_GPIO_Init+0x2fc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <HAL_GPIO_Init+0x1f6>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a45      	ldr	r2, [pc, #276]	; (8006850 <HAL_GPIO_Init+0x300>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_GPIO_Init+0x1f2>
 800673e:	2304      	movs	r3, #4
 8006740:	e008      	b.n	8006754 <HAL_GPIO_Init+0x204>
 8006742:	2307      	movs	r3, #7
 8006744:	e006      	b.n	8006754 <HAL_GPIO_Init+0x204>
 8006746:	2303      	movs	r3, #3
 8006748:	e004      	b.n	8006754 <HAL_GPIO_Init+0x204>
 800674a:	2302      	movs	r3, #2
 800674c:	e002      	b.n	8006754 <HAL_GPIO_Init+0x204>
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <HAL_GPIO_Init+0x204>
 8006752:	2300      	movs	r3, #0
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	f002 0203 	and.w	r2, r2, #3
 800675a:	0092      	lsls	r2, r2, #2
 800675c:	4093      	lsls	r3, r2
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	4313      	orrs	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006764:	4935      	ldr	r1, [pc, #212]	; (800683c <HAL_GPIO_Init+0x2ec>)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	089b      	lsrs	r3, r3, #2
 800676a:	3302      	adds	r3, #2
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <HAL_GPIO_Init+0x304>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	43db      	mvns	r3, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4013      	ands	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006796:	4a2f      	ldr	r2, [pc, #188]	; (8006854 <HAL_GPIO_Init+0x304>)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800679c:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <HAL_GPIO_Init+0x304>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	43db      	mvns	r3, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4013      	ands	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067c0:	4a24      	ldr	r2, [pc, #144]	; (8006854 <HAL_GPIO_Init+0x304>)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067c6:	4b23      	ldr	r3, [pc, #140]	; (8006854 <HAL_GPIO_Init+0x304>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	43db      	mvns	r3, r3
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	4013      	ands	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067ea:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <HAL_GPIO_Init+0x304>)
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067f0:	4b18      	ldr	r3, [pc, #96]	; (8006854 <HAL_GPIO_Init+0x304>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	43db      	mvns	r3, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4013      	ands	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006814:	4a0f      	ldr	r2, [pc, #60]	; (8006854 <HAL_GPIO_Init+0x304>)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	2b0f      	cmp	r3, #15
 8006824:	f67f aea2 	bls.w	800656c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	3724      	adds	r7, #36	; 0x24
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800
 800683c:	40013800 	.word	0x40013800
 8006840:	40020000 	.word	0x40020000
 8006844:	40020400 	.word	0x40020400
 8006848:	40020800 	.word	0x40020800
 800684c:	40020c00 	.word	0x40020c00
 8006850:	40021000 	.word	0x40021000
 8006854:	40013c00 	.word	0x40013c00

08006858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	887b      	ldrh	r3, [r7, #2]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	e001      	b.n	800687a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
 8006894:	4613      	mov	r3, r2
 8006896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006898:	787b      	ldrb	r3, [r7, #1]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800689e:	887a      	ldrh	r2, [r7, #2]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068a4:	e003      	b.n	80068ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068a6:	887b      	ldrh	r3, [r7, #2]
 80068a8:	041a      	lsls	r2, r3, #16
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	619a      	str	r2, [r3, #24]
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e12b      	b.n	8006b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe f90a 	bl	8004afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	; 0x24
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800690e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800691e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006920:	f004 fcfe 	bl	800b320 <HAL_RCC_GetPCLK1Freq>
 8006924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4a81      	ldr	r2, [pc, #516]	; (8006b30 <HAL_I2C_Init+0x274>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d807      	bhi.n	8006940 <HAL_I2C_Init+0x84>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a80      	ldr	r2, [pc, #512]	; (8006b34 <HAL_I2C_Init+0x278>)
 8006934:	4293      	cmp	r3, r2
 8006936:	bf94      	ite	ls
 8006938:	2301      	movls	r3, #1
 800693a:	2300      	movhi	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e006      	b.n	800694e <HAL_I2C_Init+0x92>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a7d      	ldr	r2, [pc, #500]	; (8006b38 <HAL_I2C_Init+0x27c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	bf94      	ite	ls
 8006948:	2301      	movls	r3, #1
 800694a:	2300      	movhi	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0e7      	b.n	8006b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a78      	ldr	r2, [pc, #480]	; (8006b3c <HAL_I2C_Init+0x280>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	0c9b      	lsrs	r3, r3, #18
 8006960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a6a      	ldr	r2, [pc, #424]	; (8006b30 <HAL_I2C_Init+0x274>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d802      	bhi.n	8006990 <HAL_I2C_Init+0xd4>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	3301      	adds	r3, #1
 800698e:	e009      	b.n	80069a4 <HAL_I2C_Init+0xe8>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	4a69      	ldr	r2, [pc, #420]	; (8006b40 <HAL_I2C_Init+0x284>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	3301      	adds	r3, #1
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80069b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	495c      	ldr	r1, [pc, #368]	; (8006b30 <HAL_I2C_Init+0x274>)
 80069c0:	428b      	cmp	r3, r1
 80069c2:	d819      	bhi.n	80069f8 <HAL_I2C_Init+0x13c>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1e59      	subs	r1, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80069d2:	1c59      	adds	r1, r3, #1
 80069d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069d8:	400b      	ands	r3, r1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_I2C_Init+0x138>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1e59      	subs	r1, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80069ec:	3301      	adds	r3, #1
 80069ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f2:	e051      	b.n	8006a98 <HAL_I2C_Init+0x1dc>
 80069f4:	2304      	movs	r3, #4
 80069f6:	e04f      	b.n	8006a98 <HAL_I2C_Init+0x1dc>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d111      	bne.n	8006a24 <HAL_I2C_Init+0x168>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1e58      	subs	r0, r3, #1
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6859      	ldr	r1, [r3, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	440b      	add	r3, r1
 8006a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a12:	3301      	adds	r3, #1
 8006a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	e012      	b.n	8006a4a <HAL_I2C_Init+0x18e>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	1e58      	subs	r0, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6859      	ldr	r1, [r3, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	0099      	lsls	r1, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bf0c      	ite	eq
 8006a44:	2301      	moveq	r3, #1
 8006a46:	2300      	movne	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_I2C_Init+0x196>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e022      	b.n	8006a98 <HAL_I2C_Init+0x1dc>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10e      	bne.n	8006a78 <HAL_I2C_Init+0x1bc>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1e58      	subs	r0, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6859      	ldr	r1, [r3, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	440b      	add	r3, r1
 8006a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a76:	e00f      	b.n	8006a98 <HAL_I2C_Init+0x1dc>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1e58      	subs	r0, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	0099      	lsls	r1, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a8e:	3301      	adds	r3, #1
 8006a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	6809      	ldr	r1, [r1, #0]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6911      	ldr	r1, [r2, #16]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68d2      	ldr	r2, [r2, #12]
 8006ad2:	4311      	orrs	r1, r2
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695a      	ldr	r2, [r3, #20]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	000186a0 	.word	0x000186a0
 8006b34:	001e847f 	.word	0x001e847f
 8006b38:	003d08ff 	.word	0x003d08ff
 8006b3c:	431bde83 	.word	0x431bde83
 8006b40:	10624dd3 	.word	0x10624dd3

08006b44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	460b      	mov	r3, r1
 8006b52:	817b      	strh	r3, [r7, #10]
 8006b54:	4613      	mov	r3, r2
 8006b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b58:	f7fe fbe6 	bl	8005328 <HAL_GetTick>
 8006b5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	f040 80e0 	bne.w	8006d2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2319      	movs	r3, #25
 8006b72:	2201      	movs	r2, #1
 8006b74:	4970      	ldr	r1, [pc, #448]	; (8006d38 <HAL_I2C_Master_Transmit+0x1f4>)
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f002 fad2 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
 8006b84:	e0d3      	b.n	8006d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_I2C_Master_Transmit+0x50>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e0cc      	b.n	8006d2e <HAL_I2C_Master_Transmit+0x1ea>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d007      	beq.n	8006bba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0201 	orr.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2221      	movs	r2, #33	; 0x21
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	893a      	ldrh	r2, [r7, #8]
 8006bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a50      	ldr	r2, [pc, #320]	; (8006d3c <HAL_I2C_Master_Transmit+0x1f8>)
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006bfc:	8979      	ldrh	r1, [r7, #10]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f001 ffe4 	bl	8008bd0 <I2C_MasterRequestWrite>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e08d      	b.n	8006d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c28:	e066      	b.n	8006cf8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	6a39      	ldr	r1, [r7, #32]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f002 fb4c 	bl	80092cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00d      	beq.n	8006c56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d107      	bne.n	8006c52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e06b      	b.n	8006d2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	781a      	ldrb	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d11b      	bne.n	8006ccc <HAL_I2C_Master_Transmit+0x188>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d017      	beq.n	8006ccc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	6a39      	ldr	r1, [r7, #32]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f002 fb3c 	bl	800934e <I2C_WaitOnBTFFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00d      	beq.n	8006cf8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d107      	bne.n	8006cf4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e01a      	b.n	8006d2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d194      	bne.n	8006c2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e000      	b.n	8006d2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	00100002 	.word	0x00100002
 8006d3c:	ffff0000 	.word	0xffff0000

08006d40 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	817b      	strh	r3, [r7, #10]
 8006d50:	4613      	mov	r3, r2
 8006d52:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	f040 808d 	bne.w	8006e80 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d66:	4b4a      	ldr	r3, [pc, #296]	; (8006e90 <HAL_I2C_Master_Receive_IT+0x150>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	08db      	lsrs	r3, r3, #3
 8006d6c:	4a49      	ldr	r2, [pc, #292]	; (8006e94 <HAL_I2C_Master_Receive_IT+0x154>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	0a1a      	lsrs	r2, r3, #8
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009a      	lsls	r2, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d116      	bne.n	8006dba <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f043 0220 	orr.w	r2, r3, #32
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e063      	b.n	8006e82 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d0db      	beq.n	8006d80 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_I2C_Master_Receive_IT+0x96>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e055      	b.n	8006e82 <HAL_I2C_Master_Receive_IT+0x142>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d007      	beq.n	8006dfc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2222      	movs	r2, #34	; 0x22
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2210      	movs	r2, #16
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	893a      	ldrh	r2, [r7, #8]
 8006e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <HAL_I2C_Master_Receive_IT+0x158>)
 8006e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006e3e:	897a      	ldrh	r2, [r7, #10]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e5a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e6a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e7a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e000      	b.n	8006e82 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006e80:	2302      	movs	r3, #2
  }
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	20000014 	.word	0x20000014
 8006e94:	14f8b589 	.word	0x14f8b589
 8006e98:	ffff0000 	.word	0xffff0000

08006e9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	817b      	strh	r3, [r7, #10]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	813b      	strh	r3, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006eb6:	f7fe fa37 	bl	8005328 <HAL_GetTick>
 8006eba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	f040 80d9 	bne.w	800707c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	2319      	movs	r3, #25
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	496d      	ldr	r1, [pc, #436]	; (8007088 <HAL_I2C_Mem_Write+0x1ec>)
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f002 f923 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e0cc      	b.n	800707e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_I2C_Mem_Write+0x56>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e0c5      	b.n	800707e <HAL_I2C_Mem_Write+0x1e2>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d007      	beq.n	8006f18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2221      	movs	r2, #33	; 0x21
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2240      	movs	r2, #64	; 0x40
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a3a      	ldr	r2, [r7, #32]
 8006f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a4d      	ldr	r2, [pc, #308]	; (800708c <HAL_I2C_Mem_Write+0x1f0>)
 8006f58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f5a:	88f8      	ldrh	r0, [r7, #6]
 8006f5c:	893a      	ldrh	r2, [r7, #8]
 8006f5e:	8979      	ldrh	r1, [r7, #10]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4603      	mov	r3, r0
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 feb2 	bl	8008cd4 <I2C_RequestMemoryWrite>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d052      	beq.n	800701c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e081      	b.n	800707e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f002 f9a4 	bl	80092cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00d      	beq.n	8006fa6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d107      	bne.n	8006fa2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e06b      	b.n	800707e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d11b      	bne.n	800701c <HAL_I2C_Mem_Write+0x180>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d017      	beq.n	800701c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007006:	3b01      	subs	r3, #1
 8007008:	b29a      	uxth	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1aa      	bne.n	8006f7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f002 f990 	bl	800934e <I2C_WaitOnBTFFlagUntilTimeout>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	2b04      	cmp	r3, #4
 800703a:	d107      	bne.n	800704c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800704a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e016      	b.n	800707e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800705e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	e000      	b.n	800707e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800707c:	2302      	movs	r3, #2
  }
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	00100002 	.word	0x00100002
 800708c:	ffff0000 	.word	0xffff0000

08007090 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08c      	sub	sp, #48	; 0x30
 8007094:	af02      	add	r7, sp, #8
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	4608      	mov	r0, r1
 800709a:	4611      	mov	r1, r2
 800709c:	461a      	mov	r2, r3
 800709e:	4603      	mov	r3, r0
 80070a0:	817b      	strh	r3, [r7, #10]
 80070a2:	460b      	mov	r3, r1
 80070a4:	813b      	strh	r3, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070aa:	f7fe f93d 	bl	8005328 <HAL_GetTick>
 80070ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	f040 8208 	bne.w	80074ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	2319      	movs	r3, #25
 80070c4:	2201      	movs	r2, #1
 80070c6:	497b      	ldr	r1, [pc, #492]	; (80072b4 <HAL_I2C_Mem_Read+0x224>)
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f002 f829 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070d4:	2302      	movs	r3, #2
 80070d6:	e1fb      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_I2C_Mem_Read+0x56>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e1f4      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d007      	beq.n	800710c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800711a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2222      	movs	r2, #34	; 0x22
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2240      	movs	r2, #64	; 0x40
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800713c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4a5b      	ldr	r2, [pc, #364]	; (80072b8 <HAL_I2C_Mem_Read+0x228>)
 800714c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800714e:	88f8      	ldrh	r0, [r7, #6]
 8007150:	893a      	ldrh	r2, [r7, #8]
 8007152:	8979      	ldrh	r1, [r7, #10]
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	9301      	str	r3, [sp, #4]
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4603      	mov	r3, r0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f001 fe4e 	bl	8008e00 <I2C_RequestMemoryRead>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e1b0      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007172:	2b00      	cmp	r3, #0
 8007174:	d113      	bne.n	800719e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007176:	2300      	movs	r3, #0
 8007178:	623b      	str	r3, [r7, #32]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	623b      	str	r3, [r7, #32]
 800718a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e184      	b.n	80074a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d11b      	bne.n	80071de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	61fb      	str	r3, [r7, #28]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	e164      	b.n	80074a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d11b      	bne.n	800721e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	e144      	b.n	80074a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007234:	e138      	b.n	80074a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800723a:	2b03      	cmp	r3, #3
 800723c:	f200 80f1 	bhi.w	8007422 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007244:	2b01      	cmp	r3, #1
 8007246:	d123      	bne.n	8007290 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f002 f8f1 	bl	8009434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e139      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800728e:	e10b      	b.n	80074a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007294:	2b02      	cmp	r3, #2
 8007296:	d14e      	bne.n	8007336 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	2200      	movs	r2, #0
 80072a0:	4906      	ldr	r1, [pc, #24]	; (80072bc <HAL_I2C_Mem_Read+0x22c>)
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f001 ff3c 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d008      	beq.n	80072c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e10e      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
 80072b2:	bf00      	nop
 80072b4:	00100002 	.word	0x00100002
 80072b8:	ffff0000 	.word	0xffff0000
 80072bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007334:	e0b8      	b.n	80074a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	2200      	movs	r2, #0
 800733e:	4966      	ldr	r1, [pc, #408]	; (80074d8 <HAL_I2C_Mem_Read+0x448>)
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f001 feed 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e0bf      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	2200      	movs	r2, #0
 800739a:	494f      	ldr	r1, [pc, #316]	; (80074d8 <HAL_I2C_Mem_Read+0x448>)
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f001 febf 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e091      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007416:	b29b      	uxth	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007420:	e042      	b.n	80074a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f002 f804 	bl	8009434 <I2C_WaitOnRXNEFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e04c      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007452:	3b01      	subs	r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745e:	b29b      	uxth	r3, r3
 8007460:	3b01      	subs	r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b04      	cmp	r3, #4
 8007474:	d118      	bne.n	80074a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f47f aec2 	bne.w	8007236 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e000      	b.n	80074d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80074ce:	2302      	movs	r3, #2
  }
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3728      	adds	r7, #40	; 0x28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	00010004 	.word	0x00010004

080074dc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	4608      	mov	r0, r1
 80074e6:	4611      	mov	r1, r2
 80074e8:	461a      	mov	r2, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	817b      	strh	r3, [r7, #10]
 80074ee:	460b      	mov	r3, r1
 80074f0:	813b      	strh	r3, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b20      	cmp	r3, #32
 8007504:	f040 809a 	bne.w	800763c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007508:	4b50      	ldr	r3, [pc, #320]	; (800764c <HAL_I2C_Mem_Read_IT+0x170>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	08db      	lsrs	r3, r3, #3
 800750e:	4a50      	ldr	r2, [pc, #320]	; (8007650 <HAL_I2C_Mem_Read_IT+0x174>)
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	0a1a      	lsrs	r2, r3, #8
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009a      	lsls	r2, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	3b01      	subs	r3, #1
 8007526:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d116      	bne.n	800755c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	f043 0220 	orr.w	r2, r3, #32
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e070      	b.n	800763e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b02      	cmp	r3, #2
 8007568:	d0db      	beq.n	8007522 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_I2C_Mem_Read_IT+0x9c>
 8007574:	2302      	movs	r3, #2
 8007576:	e062      	b.n	800763e <HAL_I2C_Mem_Read_IT+0x162>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b01      	cmp	r3, #1
 800758c:	d007      	beq.n	800759e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0201 	orr.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2222      	movs	r2, #34	; 0x22
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2240      	movs	r2, #64	; 0x40
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a3a      	ldr	r2, [r7, #32]
 80075c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <HAL_I2C_Mem_Read_IT+0x178>)
 80075de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80075e0:	897a      	ldrh	r2, [r7, #10]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80075e6:	893a      	ldrh	r2, [r7, #8]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80075ec:	88fa      	ldrh	r2, [r7, #6]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007606:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007616:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007636:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e000      	b.n	800763e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
  }
}
 800763e:	4618      	mov	r0, r3
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000014 	.word	0x20000014
 8007650:	14f8b589 	.word	0x14f8b589
 8007654:	ffff0000 	.word	0xffff0000

08007658 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007678:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007680:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	2b10      	cmp	r3, #16
 8007686:	d003      	beq.n	8007690 <HAL_I2C_EV_IRQHandler+0x38>
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	f040 80c1 	bne.w	8007812 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10d      	bne.n	80076c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076b0:	d003      	beq.n	80076ba <HAL_I2C_EV_IRQHandler+0x62>
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076b8:	d101      	bne.n	80076be <HAL_I2C_EV_IRQHandler+0x66>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <HAL_I2C_EV_IRQHandler+0x68>
 80076be:	2300      	movs	r3, #0
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	f000 8132 	beq.w	800792a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00c      	beq.n	80076ea <HAL_I2C_EV_IRQHandler+0x92>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	0a5b      	lsrs	r3, r3, #9
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d006      	beq.n	80076ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 ff2e 	bl	800953e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fcc8 	bl	8008078 <I2C_Master_SB>
 80076e8:	e092      	b.n	8007810 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	08db      	lsrs	r3, r3, #3
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_I2C_EV_IRQHandler+0xb2>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	0a5b      	lsrs	r3, r3, #9
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fd3e 	bl	8008184 <I2C_Master_ADD10>
 8007708:	e082      	b.n	8007810 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <HAL_I2C_EV_IRQHandler+0xd2>
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	0a5b      	lsrs	r3, r3, #9
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fd58 	bl	80081d8 <I2C_Master_ADDR>
 8007728:	e072      	b.n	8007810 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	089b      	lsrs	r3, r3, #2
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03b      	beq.n	80077ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007744:	f000 80f3 	beq.w	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	09db      	lsrs	r3, r3, #7
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00f      	beq.n	8007774 <HAL_I2C_EV_IRQHandler+0x11c>
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	0a9b      	lsrs	r3, r3, #10
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <HAL_I2C_EV_IRQHandler+0x11c>
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	089b      	lsrs	r3, r3, #2
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f938 	bl	80079e2 <I2C_MasterTransmit_TXE>
 8007772:	e04d      	b.n	8007810 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	089b      	lsrs	r3, r3, #2
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80d6 	beq.w	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	0a5b      	lsrs	r3, r3, #9
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80cf 	beq.w	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b21      	cmp	r3, #33	; 0x21
 8007794:	d103      	bne.n	800779e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f9bf 	bl	8007b1a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800779c:	e0c7      	b.n	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	f040 80c4 	bne.w	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa2d 	bl	8007c06 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077ac:	e0bf      	b.n	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077bc:	f000 80b7 	beq.w	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	099b      	lsrs	r3, r3, #6
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00f      	beq.n	80077ec <HAL_I2C_EV_IRQHandler+0x194>
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	0a9b      	lsrs	r3, r3, #10
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d009      	beq.n	80077ec <HAL_I2C_EV_IRQHandler+0x194>
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	089b      	lsrs	r3, r3, #2
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 faa2 	bl	8007d2e <I2C_MasterReceive_RXNE>
 80077ea:	e011      	b.n	8007810 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	089b      	lsrs	r3, r3, #2
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 809a 	beq.w	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	0a5b      	lsrs	r3, r3, #9
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 8093 	beq.w	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fb4b 	bl	8007ea4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800780e:	e08e      	b.n	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007810:	e08d      	b.n	800792e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	61fb      	str	r3, [r7, #28]
 8007822:	e007      	b.n	8007834 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	085b      	lsrs	r3, r3, #1
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d012      	beq.n	8007866 <HAL_I2C_EV_IRQHandler+0x20e>
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	0a5b      	lsrs	r3, r3, #9
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00c      	beq.n	8007866 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 ff09 	bl	8008676 <I2C_Slave_ADDR>
 8007864:	e066      	b.n	8007934 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	091b      	lsrs	r3, r3, #4
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d009      	beq.n	8007886 <HAL_I2C_EV_IRQHandler+0x22e>
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	0a5b      	lsrs	r3, r3, #9
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 ff44 	bl	800870c <I2C_Slave_STOPF>
 8007884:	e056      	b.n	8007934 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b21      	cmp	r3, #33	; 0x21
 800788a:	d002      	beq.n	8007892 <HAL_I2C_EV_IRQHandler+0x23a>
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b29      	cmp	r3, #41	; 0x29
 8007890:	d125      	bne.n	80078de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	09db      	lsrs	r3, r3, #7
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00f      	beq.n	80078be <HAL_I2C_EV_IRQHandler+0x266>
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	0a9b      	lsrs	r3, r3, #10
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <HAL_I2C_EV_IRQHandler+0x266>
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	089b      	lsrs	r3, r3, #2
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fe1f 	bl	80084fa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078bc:	e039      	b.n	8007932 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	089b      	lsrs	r3, r3, #2
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d033      	beq.n	8007932 <HAL_I2C_EV_IRQHandler+0x2da>
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	0a5b      	lsrs	r3, r3, #9
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d02d      	beq.n	8007932 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fe4c 	bl	8008574 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078dc:	e029      	b.n	8007932 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	099b      	lsrs	r3, r3, #6
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00f      	beq.n	800790a <HAL_I2C_EV_IRQHandler+0x2b2>
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	0a9b      	lsrs	r3, r3, #10
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <HAL_I2C_EV_IRQHandler+0x2b2>
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	089b      	lsrs	r3, r3, #2
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fe57 	bl	80085b6 <I2C_SlaveReceive_RXNE>
 8007908:	e014      	b.n	8007934 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	089b      	lsrs	r3, r3, #2
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	0a5b      	lsrs	r3, r3, #9
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d008      	beq.n	8007934 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fe85 	bl	8008632 <I2C_SlaveReceive_BTF>
 8007928:	e004      	b.n	8007934 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800792a:	bf00      	nop
 800792c:	e002      	b.n	8007934 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800792e:	bf00      	nop
 8007930:	e000      	b.n	8007934 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007932:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
 8007982:	4613      	mov	r3, r2
 8007984:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079f8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d150      	bne.n	8007aaa <I2C_MasterTransmit_TXE+0xc8>
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b21      	cmp	r3, #33	; 0x21
 8007a0c:	d14d      	bne.n	8007aaa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d01d      	beq.n	8007a50 <I2C_MasterTransmit_TXE+0x6e>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d01a      	beq.n	8007a50 <I2C_MasterTransmit_TXE+0x6e>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a20:	d016      	beq.n	8007a50 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a30:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2211      	movs	r2, #17
 8007a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff ff76 	bl	800793a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a4e:	e060      	b.n	8007b12 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a5e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a6e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d107      	bne.n	8007a9a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff ff87 	bl	80079a6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a98:	e03b      	b.n	8007b12 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff ff49 	bl	800793a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007aa8:	e033      	b.n	8007b12 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	2b21      	cmp	r3, #33	; 0x21
 8007aae:	d005      	beq.n	8007abc <I2C_MasterTransmit_TXE+0xda>
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b40      	cmp	r3, #64	; 0x40
 8007ab4:	d12d      	bne.n	8007b12 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b22      	cmp	r3, #34	; 0x22
 8007aba:	d12a      	bne.n	8007b12 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d108      	bne.n	8007ad8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007ad6:	e01c      	b.n	8007b12 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d103      	bne.n	8007aec <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f88e 	bl	8007c06 <I2C_MemoryTransmit_TXE_BTF>
}
 8007aea:	e012      	b.n	8007b12 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	781a      	ldrb	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b10:	e7ff      	b.n	8007b12 <I2C_MasterTransmit_TXE+0x130>
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b26:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b21      	cmp	r3, #33	; 0x21
 8007b32:	d164      	bne.n	8007bfe <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d012      	beq.n	8007b64 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007b62:	e04c      	b.n	8007bfe <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b08      	cmp	r3, #8
 8007b68:	d01d      	beq.n	8007ba6 <I2C_MasterTransmit_BTF+0x8c>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d01a      	beq.n	8007ba6 <I2C_MasterTransmit_BTF+0x8c>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b76:	d016      	beq.n	8007ba6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b86:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2211      	movs	r2, #17
 8007b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff fecb 	bl	800793a <HAL_I2C_MasterTxCpltCallback>
}
 8007ba4:	e02b      	b.n	8007bfe <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bb4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d107      	bne.n	8007bf0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff fedc 	bl	80079a6 <HAL_I2C_MemTxCpltCallback>
}
 8007bee:	e006      	b.n	8007bfe <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fe9e 	bl	800793a <HAL_I2C_MasterTxCpltCallback>
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d11d      	bne.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d10b      	bne.n	8007c3e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c36:	1c9a      	adds	r2, r3, #2
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007c3c:	e073      	b.n	8007d26 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	121b      	asrs	r3, r3, #8
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007c58:	e065      	b.n	8007d26 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d10b      	bne.n	8007c7a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007c78:	e055      	b.n	8007d26 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d151      	bne.n	8007d26 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	2b22      	cmp	r3, #34	; 0x22
 8007c86:	d10d      	bne.n	8007ca4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c96:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007ca2:	e040      	b.n	8007d26 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d015      	beq.n	8007cda <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b21      	cmp	r3, #33	; 0x21
 8007cb2:	d112      	bne.n	8007cda <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	781a      	ldrb	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007cd8:	e025      	b.n	8007d26 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d120      	bne.n	8007d26 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b21      	cmp	r3, #33	; 0x21
 8007ce8:	d11d      	bne.n	8007d26 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cf8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d08:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fe40 	bl	80079a6 <HAL_I2C_MemTxCpltCallback>
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b22      	cmp	r3, #34	; 0x22
 8007d40:	f040 80ac 	bne.w	8007e9c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d921      	bls.n	8007d96 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	f040 808c 	bne.w	8007e9c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d92:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007d94:	e082      	b.n	8007e9c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d075      	beq.n	8007e8a <I2C_MasterReceive_RXNE+0x15c>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d002      	beq.n	8007daa <I2C_MasterReceive_RXNE+0x7c>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d16f      	bne.n	8007e8a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fb10 	bl	80093d0 <I2C_WaitOnSTOPRequestThroughIT>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d142      	bne.n	8007e3c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dc4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dd4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b40      	cmp	r3, #64	; 0x40
 8007e0e:	d10a      	bne.n	8007e26 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7fb fe0c 	bl	8003a3c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e24:	e03a      	b.n	8007e9c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2212      	movs	r2, #18
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fb fe53 	bl	8003ae0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e3a:	e02f      	b.n	8007e9c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e4a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691a      	ldr	r2, [r3, #16]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fd99 	bl	80079ba <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e88:	e008      	b.n	8007e9c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e98:	605a      	str	r2, [r3, #4]
}
 8007e9a:	e7ff      	b.n	8007e9c <I2C_MasterReceive_RXNE+0x16e>
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d11b      	bne.n	8007ef4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eca:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691a      	ldr	r2, [r3, #16]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007ef2:	e0bd      	b.n	8008070 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d129      	bne.n	8007f52 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f0c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d00a      	beq.n	8007f2a <I2C_MasterReceive_BTF+0x86>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d007      	beq.n	8007f2a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f28:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f50:	e08e      	b.n	8008070 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d176      	bne.n	800804a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d002      	beq.n	8007f68 <I2C_MasterReceive_BTF+0xc4>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b10      	cmp	r3, #16
 8007f66:	d108      	bne.n	8007f7a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e019      	b.n	8007fae <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d002      	beq.n	8007f86 <I2C_MasterReceive_BTF+0xe2>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d108      	bne.n	8007f98 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	e00a      	b.n	8007fae <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b10      	cmp	r3, #16
 8007f9c:	d007      	beq.n	8007fae <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	b2d2      	uxtb	r2, r2
 8007fba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	b2d2      	uxtb	r2, r2
 8007fe0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008008:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b40      	cmp	r3, #64	; 0x40
 800801c:	d10a      	bne.n	8008034 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7fb fd05 	bl	8003a3c <HAL_I2C_MemRxCpltCallback>
}
 8008032:	e01d      	b.n	8008070 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2212      	movs	r2, #18
 8008040:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fb fd4c 	bl	8003ae0 <HAL_I2C_MasterRxCpltCallback>
}
 8008048:	e012      	b.n	8008070 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008070:	bf00      	nop
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b40      	cmp	r3, #64	; 0x40
 800808a:	d117      	bne.n	80080bc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008090:	2b00      	cmp	r3, #0
 8008092:	d109      	bne.n	80080a8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008098:	b2db      	uxtb	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080a4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80080a6:	e067      	b.n	8008178 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	611a      	str	r2, [r3, #16]
}
 80080ba:	e05d      	b.n	8008178 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080c4:	d133      	bne.n	800812e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b21      	cmp	r3, #33	; 0x21
 80080d0:	d109      	bne.n	80080e6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080e2:	611a      	str	r2, [r3, #16]
 80080e4:	e008      	b.n	80080f8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f043 0301 	orr.w	r3, r3, #1
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <I2C_Master_SB+0x92>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d108      	bne.n	800811c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810e:	2b00      	cmp	r3, #0
 8008110:	d032      	beq.n	8008178 <I2C_Master_SB+0x100>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d02d      	beq.n	8008178 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800812a:	605a      	str	r2, [r3, #4]
}
 800812c:	e024      	b.n	8008178 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10e      	bne.n	8008154 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813a:	b29b      	uxth	r3, r3
 800813c:	11db      	asrs	r3, r3, #7
 800813e:	b2db      	uxtb	r3, r3
 8008140:	f003 0306 	and.w	r3, r3, #6
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f063 030f 	orn	r3, r3, #15
 800814a:	b2da      	uxtb	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	611a      	str	r2, [r3, #16]
}
 8008152:	e011      	b.n	8008178 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008158:	2b01      	cmp	r3, #1
 800815a:	d10d      	bne.n	8008178 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008160:	b29b      	uxth	r3, r3
 8008162:	11db      	asrs	r3, r3, #7
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0306 	and.w	r3, r3, #6
 800816a:	b2db      	uxtb	r3, r3
 800816c:	f063 030e 	orn	r3, r3, #14
 8008170:	b2da      	uxtb	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	611a      	str	r2, [r3, #16]
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008190:	b2da      	uxtb	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <I2C_Master_ADD10+0x26>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d108      	bne.n	80081bc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00c      	beq.n	80081cc <I2C_Master_ADD10+0x48>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ca:	605a      	str	r2, [r3, #4]
  }
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80081d8:	b480      	push	{r7}
 80081da:	b091      	sub	sp, #68	; 0x44
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b22      	cmp	r3, #34	; 0x22
 8008200:	f040 8169 	bne.w	80084d6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10f      	bne.n	800822c <I2C_Master_ADDR+0x54>
 800820c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008210:	2b40      	cmp	r3, #64	; 0x40
 8008212:	d10b      	bne.n	800822c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008214:	2300      	movs	r3, #0
 8008216:	633b      	str	r3, [r7, #48]	; 0x30
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	633b      	str	r3, [r7, #48]	; 0x30
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	e160      	b.n	80084ee <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008230:	2b00      	cmp	r3, #0
 8008232:	d11d      	bne.n	8008270 <I2C_Master_ADDR+0x98>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800823c:	d118      	bne.n	8008270 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800823e:	2300      	movs	r3, #0
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008262:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	651a      	str	r2, [r3, #80]	; 0x50
 800826e:	e13e      	b.n	80084ee <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d113      	bne.n	80082a2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800827a:	2300      	movs	r3, #0
 800827c:	62bb      	str	r3, [r7, #40]	; 0x28
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	62bb      	str	r3, [r7, #40]	; 0x28
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	62bb      	str	r3, [r7, #40]	; 0x28
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e115      	b.n	80084ce <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	f040 808a 	bne.w	80083c2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082b4:	d137      	bne.n	8008326 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082c4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d4:	d113      	bne.n	80082fe <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082e6:	2300      	movs	r3, #0
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	e0e7      	b.n	80084ce <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082fe:	2300      	movs	r3, #0
 8008300:	623b      	str	r3, [r7, #32]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	623b      	str	r3, [r7, #32]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	623b      	str	r3, [r7, #32]
 8008312:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e0d3      	b.n	80084ce <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	2b08      	cmp	r3, #8
 800832a:	d02e      	beq.n	800838a <I2C_Master_ADDR+0x1b2>
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	2b20      	cmp	r3, #32
 8008330:	d02b      	beq.n	800838a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008334:	2b12      	cmp	r3, #18
 8008336:	d102      	bne.n	800833e <I2C_Master_ADDR+0x166>
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	2b01      	cmp	r3, #1
 800833c:	d125      	bne.n	800838a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	2b04      	cmp	r3, #4
 8008342:	d00e      	beq.n	8008362 <I2C_Master_ADDR+0x18a>
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	2b02      	cmp	r3, #2
 8008348:	d00b      	beq.n	8008362 <I2C_Master_ADDR+0x18a>
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	2b10      	cmp	r3, #16
 800834e:	d008      	beq.n	8008362 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e007      	b.n	8008372 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008370:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	61fb      	str	r3, [r7, #28]
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	e0a1      	b.n	80084ce <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008398:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800839a:	2300      	movs	r3, #0
 800839c:	61bb      	str	r3, [r7, #24]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	61bb      	str	r3, [r7, #24]
 80083ae:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	e085      	b.n	80084ce <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d14d      	bne.n	8008468 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d016      	beq.n	8008400 <I2C_Master_ADDR+0x228>
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d013      	beq.n	8008400 <I2C_Master_ADDR+0x228>
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	2b10      	cmp	r3, #16
 80083dc:	d010      	beq.n	8008400 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ec:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	e007      	b.n	8008410 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800840e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800841a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800841e:	d117      	bne.n	8008450 <I2C_Master_ADDR+0x278>
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008426:	d00b      	beq.n	8008440 <I2C_Master_ADDR+0x268>
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	2b01      	cmp	r3, #1
 800842c:	d008      	beq.n	8008440 <I2C_Master_ADDR+0x268>
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	2b08      	cmp	r3, #8
 8008432:	d005      	beq.n	8008440 <I2C_Master_ADDR+0x268>
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	2b10      	cmp	r3, #16
 8008438:	d002      	beq.n	8008440 <I2C_Master_ADDR+0x268>
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	2b20      	cmp	r3, #32
 800843e:	d107      	bne.n	8008450 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800844e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008450:	2300      	movs	r3, #0
 8008452:	617b      	str	r3, [r7, #20]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	e032      	b.n	80084ce <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008476:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008486:	d117      	bne.n	80084b8 <I2C_Master_ADDR+0x2e0>
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800848e:	d00b      	beq.n	80084a8 <I2C_Master_ADDR+0x2d0>
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	2b01      	cmp	r3, #1
 8008494:	d008      	beq.n	80084a8 <I2C_Master_ADDR+0x2d0>
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	2b08      	cmp	r3, #8
 800849a:	d005      	beq.n	80084a8 <I2C_Master_ADDR+0x2d0>
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	2b10      	cmp	r3, #16
 80084a0:	d002      	beq.n	80084a8 <I2C_Master_ADDR+0x2d0>
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d107      	bne.n	80084b8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084b6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084b8:	2300      	movs	r3, #0
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	613b      	str	r3, [r7, #16]
 80084cc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80084d4:	e00b      	b.n	80084ee <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	68fb      	ldr	r3, [r7, #12]
}
 80084ec:	e7ff      	b.n	80084ee <I2C_Master_ADDR+0x316>
 80084ee:	bf00      	nop
 80084f0:	3744      	adds	r7, #68	; 0x44
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008508:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29b      	uxth	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d02b      	beq.n	800856c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	781a      	ldrb	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800852e:	b29b      	uxth	r3, r3
 8008530:	3b01      	subs	r3, #1
 8008532:	b29a      	uxth	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d114      	bne.n	800856c <I2C_SlaveTransmit_TXE+0x72>
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	2b29      	cmp	r3, #41	; 0x29
 8008546:	d111      	bne.n	800856c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008556:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2221      	movs	r2, #33	; 0x21
 800855c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2228      	movs	r2, #40	; 0x28
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff f9f1 	bl	800794e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d011      	beq.n	80085aa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d02c      	beq.n	800862a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691a      	ldr	r2, [r3, #16]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d114      	bne.n	800862a <I2C_SlaveReceive_RXNE+0x74>
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	2b2a      	cmp	r3, #42	; 0x2a
 8008604:	d111      	bne.n	800862a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008614:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2222      	movs	r2, #34	; 0x22
 800861a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2228      	movs	r2, #40	; 0x28
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff f99c 	bl	8007962 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800863e:	b29b      	uxth	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d012      	beq.n	800866a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691a      	ldr	r2, [r3, #16]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	b2d2      	uxtb	r2, r2
 8008650:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008660:	b29b      	uxth	r3, r3
 8008662:	3b01      	subs	r3, #1
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800868a:	b2db      	uxtb	r3, r3
 800868c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008690:	2b28      	cmp	r3, #40	; 0x28
 8008692:	d127      	bne.n	80086e4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	089b      	lsrs	r3, r3, #2
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	09db      	lsrs	r3, r3, #7
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d103      	bne.n	80086c8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	81bb      	strh	r3, [r7, #12]
 80086c6:	e002      	b.n	80086ce <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80086d6:	89ba      	ldrh	r2, [r7, #12]
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff f94a 	bl	8007976 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80086e2:	e00e      	b.n	8008702 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086e4:	2300      	movs	r3, #0
 80086e6:	60bb      	str	r3, [r7, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	60bb      	str	r3, [r7, #8]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	60bb      	str	r3, [r7, #8]
 80086f8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800872a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800872c:	2300      	movs	r3, #0
 800872e:	60bb      	str	r3, [r7, #8]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	60bb      	str	r3, [r7, #8]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008758:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008768:	d172      	bne.n	8008850 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	2b22      	cmp	r3, #34	; 0x22
 800876e:	d002      	beq.n	8008776 <I2C_Slave_STOPF+0x6a>
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b2a      	cmp	r3, #42	; 0x2a
 8008774:	d135      	bne.n	80087e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	b29a      	uxth	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	f043 0204 	orr.w	r2, r3, #4
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fd fde0 	bl	8006374 <HAL_DMA_GetState>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d049      	beq.n	800884e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	4a69      	ldr	r2, [pc, #420]	; (8008964 <I2C_Slave_STOPF+0x258>)
 80087c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fd fc28 	bl	800601c <HAL_DMA_Abort_IT>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d03d      	beq.n	800884e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087e0:	e035      	b.n	800884e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	f043 0204 	orr.w	r2, r3, #4
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008814:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	4618      	mov	r0, r3
 800881c:	f7fd fdaa 	bl	8006374 <HAL_DMA_GetState>
 8008820:	4603      	mov	r3, r0
 8008822:	2b01      	cmp	r3, #1
 8008824:	d014      	beq.n	8008850 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	4a4e      	ldr	r2, [pc, #312]	; (8008964 <I2C_Slave_STOPF+0x258>)
 800882c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	4618      	mov	r0, r3
 8008834:	f7fd fbf2 	bl	800601c <HAL_DMA_Abort_IT>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d008      	beq.n	8008850 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	e000      	b.n	8008850 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800884e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d03e      	beq.n	80088d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b04      	cmp	r3, #4
 8008866:	d112      	bne.n	800888e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	b2d2      	uxtb	r2, r2
 8008874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008884:	b29b      	uxth	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	b29a      	uxth	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008898:	2b40      	cmp	r3, #64	; 0x40
 800889a:	d112      	bne.n	80088c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	f043 0204 	orr.w	r2, r3, #4
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f843 	bl	800896c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80088e6:	e039      	b.n	800895c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	2b2a      	cmp	r3, #42	; 0x2a
 80088ec:	d109      	bne.n	8008902 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2228      	movs	r2, #40	; 0x28
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff f830 	bl	8007962 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b28      	cmp	r3, #40	; 0x28
 800890c:	d111      	bne.n	8008932 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a15      	ldr	r2, [pc, #84]	; (8008968 <I2C_Slave_STOPF+0x25c>)
 8008912:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2220      	movs	r2, #32
 800891e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff f831 	bl	8007992 <HAL_I2C_ListenCpltCallback>
}
 8008930:	e014      	b.n	800895c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	2b22      	cmp	r3, #34	; 0x22
 8008938:	d002      	beq.n	8008940 <I2C_Slave_STOPF+0x234>
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	2b22      	cmp	r3, #34	; 0x22
 800893e:	d10d      	bne.n	800895c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff f803 	bl	8007962 <HAL_I2C_SlaveRxCpltCallback>
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	08008fd1 	.word	0x08008fd1
 8008968:	ffff0000 	.word	0xffff0000

0800896c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800897a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008982:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b10      	cmp	r3, #16
 8008988:	d002      	beq.n	8008990 <I2C_ITError+0x24>
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b40      	cmp	r3, #64	; 0x40
 800898e:	d10a      	bne.n	80089a6 <I2C_ITError+0x3a>
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b22      	cmp	r3, #34	; 0x22
 8008994:	d107      	bne.n	80089a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089ac:	2b28      	cmp	r3, #40	; 0x28
 80089ae:	d107      	bne.n	80089c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2228      	movs	r2, #40	; 0x28
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80089be:	e015      	b.n	80089ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ce:	d00a      	beq.n	80089e6 <I2C_ITError+0x7a>
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b60      	cmp	r3, #96	; 0x60
 80089d4:	d007      	beq.n	80089e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fa:	d162      	bne.n	8008ac2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d020      	beq.n	8008a5c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1e:	4a6a      	ldr	r2, [pc, #424]	; (8008bc8 <I2C_ITError+0x25c>)
 8008a20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fd faf8 	bl	800601c <HAL_DMA_Abort_IT>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 8089 	beq.w	8008b46 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 0201 	bic.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a56:	4610      	mov	r0, r2
 8008a58:	4798      	blx	r3
 8008a5a:	e074      	b.n	8008b46 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	4a59      	ldr	r2, [pc, #356]	; (8008bc8 <I2C_ITError+0x25c>)
 8008a62:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fd fad7 	bl	800601c <HAL_DMA_Abort_IT>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d068      	beq.n	8008b46 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7e:	2b40      	cmp	r3, #64	; 0x40
 8008a80:	d10b      	bne.n	8008a9a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	b2d2      	uxtb	r2, r2
 8008a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	e041      	b.n	8008b46 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b60      	cmp	r3, #96	; 0x60
 8008acc:	d125      	bne.n	8008b1a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b40      	cmp	r3, #64	; 0x40
 8008ae8:	d10b      	bne.n	8008b02 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691a      	ldr	r2, [r3, #16]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0201 	bic.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7fe ff5b 	bl	80079ce <HAL_I2C_AbortCpltCallback>
 8008b18:	e015      	b.n	8008b46 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b40      	cmp	r3, #64	; 0x40
 8008b26:	d10b      	bne.n	8008b40 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7fe ff3a 	bl	80079ba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10e      	bne.n	8008b74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d104      	bne.n	8008b74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d007      	beq.n	8008b84 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b8a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d113      	bne.n	8008bc0 <I2C_ITError+0x254>
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	2b28      	cmp	r3, #40	; 0x28
 8008b9c:	d110      	bne.n	8008bc0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <I2C_ITError+0x260>)
 8008ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fe fee9 	bl	8007992 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	08008fd1 	.word	0x08008fd1
 8008bcc:	ffff0000 	.word	0xffff0000

08008bd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d006      	beq.n	8008bfa <I2C_MasterRequestWrite+0x2a>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d003      	beq.n	8008bfa <I2C_MasterRequestWrite+0x2a>
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008bf8:	d108      	bne.n	8008c0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e00b      	b.n	8008c24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	2b12      	cmp	r3, #18
 8008c12:	d107      	bne.n	8008c24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fa75 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00d      	beq.n	8008c58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4a:	d103      	bne.n	8008c54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e035      	b.n	8008cc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c60:	d108      	bne.n	8008c74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c62:	897b      	ldrh	r3, [r7, #10]
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	461a      	mov	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c70:	611a      	str	r2, [r3, #16]
 8008c72:	e01b      	b.n	8008cac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008c74:	897b      	ldrh	r3, [r7, #10]
 8008c76:	11db      	asrs	r3, r3, #7
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	f003 0306 	and.w	r3, r3, #6
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	f063 030f 	orn	r3, r3, #15
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	490e      	ldr	r1, [pc, #56]	; (8008ccc <I2C_MasterRequestWrite+0xfc>)
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 fa9b 	bl	80091ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e010      	b.n	8008cc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008ca2:	897b      	ldrh	r3, [r7, #10]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	4907      	ldr	r1, [pc, #28]	; (8008cd0 <I2C_MasterRequestWrite+0x100>)
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 fa8b 	bl	80091ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	00010008 	.word	0x00010008
 8008cd0:	00010002 	.word	0x00010002

08008cd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	4608      	mov	r0, r1
 8008cde:	4611      	mov	r1, r2
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	817b      	strh	r3, [r7, #10]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	813b      	strh	r3, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 fa08 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00d      	beq.n	8008d32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d24:	d103      	bne.n	8008d2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e05f      	b.n	8008df2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d32:	897b      	ldrh	r3, [r7, #10]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	6a3a      	ldr	r2, [r7, #32]
 8008d46:	492d      	ldr	r1, [pc, #180]	; (8008dfc <I2C_RequestMemoryWrite+0x128>)
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 fa40 	bl	80091ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e04c      	b.n	8008df2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d70:	6a39      	ldr	r1, [r7, #32]
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 faaa 	bl	80092cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00d      	beq.n	8008d9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d107      	bne.n	8008d96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e02b      	b.n	8008df2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d105      	bne.n	8008dac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008da0:	893b      	ldrh	r3, [r7, #8]
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	611a      	str	r2, [r3, #16]
 8008daa:	e021      	b.n	8008df0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008dac:	893b      	ldrh	r3, [r7, #8]
 8008dae:	0a1b      	lsrs	r3, r3, #8
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dbc:	6a39      	ldr	r1, [r7, #32]
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 fa84 	bl	80092cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00d      	beq.n	8008de6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d107      	bne.n	8008de2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e005      	b.n	8008df2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008de6:	893b      	ldrh	r3, [r7, #8]
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	00010002 	.word	0x00010002

08008e00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	4608      	mov	r0, r1
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	817b      	strh	r3, [r7, #10]
 8008e12:	460b      	mov	r3, r1
 8008e14:	813b      	strh	r3, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f96a 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00d      	beq.n	8008e6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e60:	d103      	bne.n	8008e6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e0aa      	b.n	8008fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e6e:	897b      	ldrh	r3, [r7, #10]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	461a      	mov	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	6a3a      	ldr	r2, [r7, #32]
 8008e82:	4952      	ldr	r1, [pc, #328]	; (8008fcc <I2C_RequestMemoryRead+0x1cc>)
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 f9a2 	bl	80091ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e097      	b.n	8008fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eac:	6a39      	ldr	r1, [r7, #32]
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fa0c 	bl	80092cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00d      	beq.n	8008ed6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d107      	bne.n	8008ed2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e076      	b.n	8008fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ed6:	88fb      	ldrh	r3, [r7, #6]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d105      	bne.n	8008ee8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008edc:	893b      	ldrh	r3, [r7, #8]
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	611a      	str	r2, [r3, #16]
 8008ee6:	e021      	b.n	8008f2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ee8:	893b      	ldrh	r3, [r7, #8]
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef8:	6a39      	ldr	r1, [r7, #32]
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 f9e6 	bl	80092cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00d      	beq.n	8008f22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d107      	bne.n	8008f1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e050      	b.n	8008fc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f22:	893b      	ldrh	r3, [r7, #8]
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2e:	6a39      	ldr	r1, [r7, #32]
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 f9cb 	bl	80092cc <I2C_WaitOnTXEFlagUntilTimeout>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00d      	beq.n	8008f58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d107      	bne.n	8008f54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e035      	b.n	8008fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 f8d3 	bl	8009120 <I2C_WaitOnFlagUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00d      	beq.n	8008f9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f8e:	d103      	bne.n	8008f98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e013      	b.n	8008fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008f9c:	897b      	ldrh	r3, [r7, #10]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	f043 0301 	orr.w	r3, r3, #1
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	4906      	ldr	r1, [pc, #24]	; (8008fcc <I2C_RequestMemoryRead+0x1cc>)
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 f90b 	bl	80091ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e000      	b.n	8008fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	00010002 	.word	0x00010002

08008fd0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008fea:	4b4b      	ldr	r3, [pc, #300]	; (8009118 <I2C_DMAAbort+0x148>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	08db      	lsrs	r3, r3, #3
 8008ff0:	4a4a      	ldr	r2, [pc, #296]	; (800911c <I2C_DMAAbort+0x14c>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	0a1a      	lsrs	r2, r3, #8
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	00da      	lsls	r2, r3, #3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	f043 0220 	orr.w	r2, r3, #32
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009016:	e00a      	b.n	800902e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3b01      	subs	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800902c:	d0ea      	beq.n	8009004 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903a:	2200      	movs	r2, #0
 800903c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904a:	2200      	movs	r2, #0
 800904c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800905c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2200      	movs	r2, #0
 8009062:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009070:	2200      	movs	r2, #0
 8009072:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	2200      	movs	r2, #0
 8009082:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0201 	bic.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b60      	cmp	r3, #96	; 0x60
 800909e:	d10e      	bne.n	80090be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2200      	movs	r2, #0
 80090b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80090b6:	6978      	ldr	r0, [r7, #20]
 80090b8:	f7fe fc89 	bl	80079ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80090bc:	e027      	b.n	800910e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80090be:	7cfb      	ldrb	r3, [r7, #19]
 80090c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090c4:	2b28      	cmp	r3, #40	; 0x28
 80090c6:	d117      	bne.n	80090f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2200      	movs	r2, #0
 80090ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2228      	movs	r2, #40	; 0x28
 80090f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80090f6:	e007      	b.n	8009108 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009108:	6978      	ldr	r0, [r7, #20]
 800910a:	f7fe fc56 	bl	80079ba <HAL_I2C_ErrorCallback>
}
 800910e:	bf00      	nop
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20000014 	.word	0x20000014
 800911c:	14f8b589 	.word	0x14f8b589

08009120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	4613      	mov	r3, r2
 800912e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009130:	e025      	b.n	800917e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d021      	beq.n	800917e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800913a:	f7fc f8f5 	bl	8005328 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d302      	bcc.n	8009150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d116      	bne.n	800917e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2220      	movs	r2, #32
 800915a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	f043 0220 	orr.w	r2, r3, #32
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e023      	b.n	80091c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b01      	cmp	r3, #1
 8009186:	d10d      	bne.n	80091a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	43da      	mvns	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4013      	ands	r3, r2
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	bf0c      	ite	eq
 800919a:	2301      	moveq	r3, #1
 800919c:	2300      	movne	r3, #0
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	461a      	mov	r2, r3
 80091a2:	e00c      	b.n	80091be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	43da      	mvns	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4013      	ands	r3, r2
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bf0c      	ite	eq
 80091b6:	2301      	moveq	r3, #1
 80091b8:	2300      	movne	r3, #0
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	461a      	mov	r2, r3
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d0b6      	beq.n	8009132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	607a      	str	r2, [r7, #4]
 80091da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80091dc:	e051      	b.n	8009282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ec:	d123      	bne.n	8009236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2220      	movs	r2, #32
 8009212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	f043 0204 	orr.w	r2, r3, #4
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e046      	b.n	80092c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d021      	beq.n	8009282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800923e:	f7fc f873 	bl	8005328 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	429a      	cmp	r2, r3
 800924c:	d302      	bcc.n	8009254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d116      	bne.n	8009282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	f043 0220 	orr.w	r2, r3, #32
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e020      	b.n	80092c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	0c1b      	lsrs	r3, r3, #16
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	d10c      	bne.n	80092a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	43da      	mvns	r2, r3
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4013      	ands	r3, r2
 8009298:	b29b      	uxth	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	bf14      	ite	ne
 800929e:	2301      	movne	r3, #1
 80092a0:	2300      	moveq	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	e00b      	b.n	80092be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	43da      	mvns	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4013      	ands	r3, r2
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bf14      	ite	ne
 80092b8:	2301      	movne	r3, #1
 80092ba:	2300      	moveq	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d18d      	bne.n	80091de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092d8:	e02d      	b.n	8009336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f900 	bl	80094e0 <I2C_IsAcknowledgeFailed>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e02d      	b.n	8009346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f0:	d021      	beq.n	8009336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092f2:	f7fc f819 	bl	8005328 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d302      	bcc.n	8009308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d116      	bne.n	8009336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2220      	movs	r2, #32
 8009312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	f043 0220 	orr.w	r2, r3, #32
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e007      	b.n	8009346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009340:	2b80      	cmp	r3, #128	; 0x80
 8009342:	d1ca      	bne.n	80092da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800935a:	e02d      	b.n	80093b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f8bf 	bl	80094e0 <I2C_IsAcknowledgeFailed>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e02d      	b.n	80093c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009372:	d021      	beq.n	80093b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009374:	f7fb ffd8 	bl	8005328 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	429a      	cmp	r2, r3
 8009382:	d302      	bcc.n	800938a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d116      	bne.n	80093b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	f043 0220 	orr.w	r2, r3, #32
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e007      	b.n	80093c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f003 0304 	and.w	r3, r3, #4
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d1ca      	bne.n	800935c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80093dc:	4b13      	ldr	r3, [pc, #76]	; (800942c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	08db      	lsrs	r3, r3, #3
 80093e2:	4a13      	ldr	r2, [pc, #76]	; (8009430 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80093e4:	fba2 2303 	umull	r2, r3, r2, r3
 80093e8:	0a1a      	lsrs	r2, r3, #8
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d107      	bne.n	800940e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009402:	f043 0220 	orr.w	r2, r3, #32
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e008      	b.n	8009420 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800941c:	d0e9      	beq.n	80093f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	20000014 	.word	0x20000014
 8009430:	14f8b589 	.word	0x14f8b589

08009434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009440:	e042      	b.n	80094c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b10      	cmp	r3, #16
 800944e:	d119      	bne.n	8009484 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0210 	mvn.w	r2, #16
 8009458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e029      	b.n	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009484:	f7fb ff50 	bl	8005328 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	429a      	cmp	r2, r3
 8009492:	d302      	bcc.n	800949a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d116      	bne.n	80094c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	f043 0220 	orr.w	r2, r3, #32
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e007      	b.n	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b40      	cmp	r3, #64	; 0x40
 80094d4:	d1b5      	bne.n	8009442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f6:	d11b      	bne.n	8009530 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009500:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	f043 0204 	orr.w	r2, r3, #4
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e000      	b.n	8009532 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800954e:	d103      	bne.n	8009558 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009556:	e007      	b.n	8009568 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009560:	d102      	bne.n	8009568 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2208      	movs	r2, #8
 8009566:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009576:	b08f      	sub	sp, #60	; 0x3c
 8009578:	af0a      	add	r7, sp, #40	; 0x28
 800957a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e10f      	b.n	80097a6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d106      	bne.n	80095a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f00a fa0f 	bl	80139c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2203      	movs	r2, #3
 80095aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f004 fce2 	bl	800df8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	687e      	ldr	r6, [r7, #4]
 80095d2:	466d      	mov	r5, sp
 80095d4:	f106 0410 	add.w	r4, r6, #16
 80095d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80095e8:	1d33      	adds	r3, r6, #4
 80095ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095ec:	6838      	ldr	r0, [r7, #0]
 80095ee:	f004 fbb9 	bl	800dd64 <USB_CoreInit>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e0d0      	b.n	80097a6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2100      	movs	r1, #0
 800960a:	4618      	mov	r0, r3
 800960c:	f004 fcd0 	bl	800dfb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
 8009614:	e04a      	b.n	80096ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009616:	7bfa      	ldrb	r2, [r7, #15]
 8009618:	6879      	ldr	r1, [r7, #4]
 800961a:	4613      	mov	r3, r2
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	440b      	add	r3, r1
 8009624:	333d      	adds	r3, #61	; 0x3d
 8009626:	2201      	movs	r2, #1
 8009628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800962a:	7bfa      	ldrb	r2, [r7, #15]
 800962c:	6879      	ldr	r1, [r7, #4]
 800962e:	4613      	mov	r3, r2
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	333c      	adds	r3, #60	; 0x3c
 800963a:	7bfa      	ldrb	r2, [r7, #15]
 800963c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800963e:	7bfa      	ldrb	r2, [r7, #15]
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	b298      	uxth	r0, r3
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	4613      	mov	r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	440b      	add	r3, r1
 8009650:	3344      	adds	r3, #68	; 0x44
 8009652:	4602      	mov	r2, r0
 8009654:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009656:	7bfa      	ldrb	r2, [r7, #15]
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4613      	mov	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	3340      	adds	r3, #64	; 0x40
 8009666:	2200      	movs	r2, #0
 8009668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800966a:	7bfa      	ldrb	r2, [r7, #15]
 800966c:	6879      	ldr	r1, [r7, #4]
 800966e:	4613      	mov	r3, r2
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	440b      	add	r3, r1
 8009678:	3348      	adds	r3, #72	; 0x48
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800967e:	7bfa      	ldrb	r2, [r7, #15]
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	334c      	adds	r3, #76	; 0x4c
 800968e:	2200      	movs	r2, #0
 8009690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009692:	7bfa      	ldrb	r2, [r7, #15]
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	3354      	adds	r3, #84	; 0x54
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	3301      	adds	r3, #1
 80096aa:	73fb      	strb	r3, [r7, #15]
 80096ac:	7bfa      	ldrb	r2, [r7, #15]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d3af      	bcc.n	8009616 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	e044      	b.n	8009746 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80096bc:	7bfa      	ldrb	r2, [r7, #15]
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4613      	mov	r3, r2
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	440b      	add	r3, r1
 80096ca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80096d2:	7bfa      	ldrb	r2, [r7, #15]
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80096e4:	7bfa      	ldrb	r2, [r7, #15]
 80096e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096e8:	7bfa      	ldrb	r2, [r7, #15]
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4613      	mov	r3, r2
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	440b      	add	r3, r1
 80096f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80096fa:	2200      	movs	r2, #0
 80096fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80096fe:	7bfa      	ldrb	r2, [r7, #15]
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4613      	mov	r3, r2
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009710:	2200      	movs	r2, #0
 8009712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009714:	7bfa      	ldrb	r2, [r7, #15]
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4613      	mov	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009726:	2200      	movs	r2, #0
 8009728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800972a:	7bfa      	ldrb	r2, [r7, #15]
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	4613      	mov	r3, r2
 8009730:	00db      	lsls	r3, r3, #3
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	440b      	add	r3, r1
 8009738:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	3301      	adds	r3, #1
 8009744:	73fb      	strb	r3, [r7, #15]
 8009746:	7bfa      	ldrb	r2, [r7, #15]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d3b5      	bcc.n	80096bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	603b      	str	r3, [r7, #0]
 8009756:	687e      	ldr	r6, [r7, #4]
 8009758:	466d      	mov	r5, sp
 800975a:	f106 0410 	add.w	r4, r6, #16
 800975e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800976a:	e885 0003 	stmia.w	r5, {r0, r1}
 800976e:	1d33      	adds	r3, r6, #4
 8009770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009772:	6838      	ldr	r0, [r7, #0]
 8009774:	f004 fc68 	bl	800e048 <USB_DevInit>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d005      	beq.n	800978a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2202      	movs	r2, #2
 8009782:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e00d      	b.n	80097a6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f005 fdb7 	bl	800f312 <USB_DevDisconnect>

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d101      	bne.n	80097ca <HAL_PCD_Start+0x1c>
 80097c6:	2302      	movs	r3, #2
 80097c8:	e020      	b.n	800980c <HAL_PCD_Start+0x5e>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d109      	bne.n	80097ee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d005      	beq.n	80097ee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f004 fbba 	bl	800df6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f005 fd67 	bl	800f2d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009814:	b590      	push	{r4, r7, lr}
 8009816:	b08d      	sub	sp, #52	; 0x34
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f005 fe25 	bl	800f47a <USB_GetMode>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	f040 848a 	bne.w	800a14c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4618      	mov	r0, r3
 800983e:	f005 fd89 	bl	800f354 <USB_ReadInterrupts>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 8480 	beq.w	800a14a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	0a1b      	lsrs	r3, r3, #8
 8009854:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f005 fd76 	bl	800f354 <USB_ReadInterrupts>
 8009868:	4603      	mov	r3, r0
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b02      	cmp	r3, #2
 8009870:	d107      	bne.n	8009882 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	695a      	ldr	r2, [r3, #20]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f002 0202 	and.w	r2, r2, #2
 8009880:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f005 fd64 	bl	800f354 <USB_ReadInterrupts>
 800988c:	4603      	mov	r3, r0
 800988e:	f003 0310 	and.w	r3, r3, #16
 8009892:	2b10      	cmp	r3, #16
 8009894:	d161      	bne.n	800995a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	699a      	ldr	r2, [r3, #24]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0210 	bic.w	r2, r2, #16
 80098a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	f003 020f 	and.w	r2, r3, #15
 80098b2:	4613      	mov	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	4413      	add	r3, r2
 80098c2:	3304      	adds	r3, #4
 80098c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	0c5b      	lsrs	r3, r3, #17
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d124      	bne.n	800991c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80098d8:	4013      	ands	r3, r2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d035      	beq.n	800994a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	091b      	lsrs	r3, r3, #4
 80098e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	6a38      	ldr	r0, [r7, #32]
 80098f2:	f005 fb9b 	bl	800f02c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	691a      	ldr	r2, [r3, #16]
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	091b      	lsrs	r3, r3, #4
 80098fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009902:	441a      	add	r2, r3
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	6a1a      	ldr	r2, [r3, #32]
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	091b      	lsrs	r3, r3, #4
 8009910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009914:	441a      	add	r2, r3
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	621a      	str	r2, [r3, #32]
 800991a:	e016      	b.n	800994a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	0c5b      	lsrs	r3, r3, #17
 8009920:	f003 030f 	and.w	r3, r3, #15
 8009924:	2b06      	cmp	r3, #6
 8009926:	d110      	bne.n	800994a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800992e:	2208      	movs	r2, #8
 8009930:	4619      	mov	r1, r3
 8009932:	6a38      	ldr	r0, [r7, #32]
 8009934:	f005 fb7a 	bl	800f02c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	6a1a      	ldr	r2, [r3, #32]
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	091b      	lsrs	r3, r3, #4
 8009940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009944:	441a      	add	r2, r3
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	699a      	ldr	r2, [r3, #24]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0210 	orr.w	r2, r2, #16
 8009958:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f005 fcf8 	bl	800f354 <USB_ReadInterrupts>
 8009964:	4603      	mov	r3, r0
 8009966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800996a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800996e:	f040 80a7 	bne.w	8009ac0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f005 fcfd 	bl	800f37a <USB_ReadDevAllOutEpInterrupt>
 8009980:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009982:	e099      	b.n	8009ab8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 808e 	beq.w	8009aac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f005 fd21 	bl	800f3e2 <USB_ReadDevOutEPInterrupt>
 80099a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00c      	beq.n	80099c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	461a      	mov	r2, r3
 80099ba:	2301      	movs	r3, #1
 80099bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80099be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 feab 	bl	800a71c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f003 0308 	and.w	r3, r3, #8
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00c      	beq.n	80099ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099dc:	461a      	mov	r2, r3
 80099de:	2308      	movs	r3, #8
 80099e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80099e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 ff81 	bl	800a8ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f003 0310 	and.w	r3, r3, #16
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d008      	beq.n	8009a06 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a00:	461a      	mov	r2, r3
 8009a02:	2310      	movs	r3, #16
 8009a04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d030      	beq.n	8009a72 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a18:	2b80      	cmp	r3, #128	; 0x80
 8009a1a:	d109      	bne.n	8009a30 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	69fa      	ldr	r2, [r7, #28]
 8009a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a2e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	4613      	mov	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4413      	add	r3, r2
 8009a42:	3304      	adds	r3, #4
 8009a44:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	78db      	ldrb	r3, [r3, #3]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d108      	bne.n	8009a60 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2200      	movs	r2, #0
 8009a52:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f00a f8b8 	bl	8013bd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	2302      	movs	r3, #2
 8009a70:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f003 0320 	and.w	r3, r3, #32
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d008      	beq.n	8009a8e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2320      	movs	r3, #32
 8009a8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d009      	beq.n	8009aac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aaa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	3301      	adds	r3, #1
 8009ab0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	085b      	lsrs	r3, r3, #1
 8009ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f47f af62 	bne.w	8009984 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f005 fc45 	bl	800f354 <USB_ReadInterrupts>
 8009aca:	4603      	mov	r3, r0
 8009acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ad4:	f040 80db 	bne.w	8009c8e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f005 fc66 	bl	800f3ae <USB_ReadDevAllInEpInterrupt>
 8009ae2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009ae8:	e0cd      	b.n	8009c86 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80c2 	beq.w	8009c7a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afc:	b2d2      	uxtb	r2, r2
 8009afe:	4611      	mov	r1, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f005 fc8c 	bl	800f41e <USB_ReadDevInEPInterrupt>
 8009b06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d057      	beq.n	8009bc2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	2201      	movs	r2, #1
 8009b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	43db      	mvns	r3, r3
 8009b2c:	69f9      	ldr	r1, [r7, #28]
 8009b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b32:	4013      	ands	r3, r2
 8009b34:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b42:	461a      	mov	r2, r3
 8009b44:	2301      	movs	r3, #1
 8009b46:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d132      	bne.n	8009bb6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b54:	4613      	mov	r3, r2
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	440b      	add	r3, r1
 8009b5e:	334c      	adds	r3, #76	; 0x4c
 8009b60:	6819      	ldr	r1, [r3, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b66:	4613      	mov	r3, r2
 8009b68:	00db      	lsls	r3, r3, #3
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4403      	add	r3, r0
 8009b70:	3348      	adds	r3, #72	; 0x48
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4419      	add	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	00db      	lsls	r3, r3, #3
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4403      	add	r3, r0
 8009b84:	334c      	adds	r3, #76	; 0x4c
 8009b86:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d113      	bne.n	8009bb6 <HAL_PCD_IRQHandler+0x3a2>
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b92:	4613      	mov	r3, r2
 8009b94:	00db      	lsls	r3, r3, #3
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	440b      	add	r3, r1
 8009b9c:	3354      	adds	r3, #84	; 0x54
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d108      	bne.n	8009bb6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009bae:	461a      	mov	r2, r3
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	f005 fc93 	bl	800f4dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f009 ff82 	bl	8013ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f003 0308 	and.w	r3, r3, #8
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d008      	beq.n	8009bde <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd8:	461a      	mov	r2, r3
 8009bda:	2308      	movs	r3, #8
 8009bdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f003 0310 	and.w	r3, r3, #16
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d008      	beq.n	8009bfa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	2310      	movs	r3, #16
 8009bf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d008      	beq.n	8009c16 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c10:	461a      	mov	r2, r3
 8009c12:	2340      	movs	r3, #64	; 0x40
 8009c14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d023      	beq.n	8009c68 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c22:	6a38      	ldr	r0, [r7, #32]
 8009c24:	f004 fb74 	bl	800e310 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	3338      	adds	r3, #56	; 0x38
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	4413      	add	r3, r2
 8009c38:	3304      	adds	r3, #4
 8009c3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	78db      	ldrb	r3, [r3, #3]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d108      	bne.n	8009c56 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2200      	movs	r2, #0
 8009c48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f009 ffcf 	bl	8013bf4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c62:	461a      	mov	r2, r3
 8009c64:	2302      	movs	r3, #2
 8009c66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fcc3 	bl	800a600 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c82:	085b      	lsrs	r3, r3, #1
 8009c84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f47f af2e 	bne.w	8009aea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f005 fb5e 	bl	800f354 <USB_ReadInterrupts>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ca2:	d122      	bne.n	8009cea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	69fa      	ldr	r2, [r7, #28]
 8009cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb2:	f023 0301 	bic.w	r3, r3, #1
 8009cb6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d108      	bne.n	8009cd4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009cca:	2100      	movs	r1, #0
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 feab 	bl	800aa28 <HAL_PCDEx_LPM_Callback>
 8009cd2:	e002      	b.n	8009cda <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f009 ff6d 	bl	8013bb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	695a      	ldr	r2, [r3, #20]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f005 fb30 	bl	800f354 <USB_ReadInterrupts>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cfe:	d112      	bne.n	8009d26 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d102      	bne.n	8009d16 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f009 ff29 	bl	8013b68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	695a      	ldr	r2, [r3, #20]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009d24:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f005 fb12 	bl	800f354 <USB_ReadInterrupts>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d3a:	f040 80b7 	bne.w	8009eac <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d4c:	f023 0301 	bic.w	r3, r3, #1
 8009d50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2110      	movs	r1, #16
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f004 fad9 	bl	800e310 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d5e:	2300      	movs	r3, #0
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d62:	e046      	b.n	8009df2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d70:	461a      	mov	r2, r3
 8009d72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d88:	0151      	lsls	r1, r2, #5
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	461a      	mov	r2, r3
 8009da6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009daa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dbc:	0151      	lsls	r1, r2, #5
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	3301      	adds	r3, #1
 8009df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d3b3      	bcc.n	8009d64 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	69fa      	ldr	r2, [r7, #28]
 8009e06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e0a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009e0e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d016      	beq.n	8009e46 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e28:	f043 030b 	orr.w	r3, r3, #11
 8009e2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e38:	69fa      	ldr	r2, [r7, #28]
 8009e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e3e:	f043 030b 	orr.w	r3, r3, #11
 8009e42:	6453      	str	r3, [r2, #68]	; 0x44
 8009e44:	e015      	b.n	8009e72 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e58:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009e5c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e6c:	f043 030b 	orr.w	r3, r3, #11
 8009e70:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	69fa      	ldr	r2, [r7, #28]
 8009e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e84:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6818      	ldr	r0, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009e96:	461a      	mov	r2, r3
 8009e98:	f005 fb20 	bl	800f4dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695a      	ldr	r2, [r3, #20]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f005 fa4f 	bl	800f354 <USB_ReadInterrupts>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ec0:	d124      	bne.n	8009f0c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f005 fae5 	bl	800f496 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f004 fa9a 	bl	800e40a <USB_GetDevSpeed>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	461a      	mov	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681c      	ldr	r4, [r3, #0]
 8009ee2:	f001 fa11 	bl	800b308 <HAL_RCC_GetHCLKFreq>
 8009ee6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	461a      	mov	r2, r3
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f003 ff99 	bl	800de28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f009 fe0d 	bl	8013b16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	695a      	ldr	r2, [r3, #20]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f005 fa1f 	bl	800f354 <USB_ReadInterrupts>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f003 0308 	and.w	r3, r3, #8
 8009f1c:	2b08      	cmp	r3, #8
 8009f1e:	d10a      	bne.n	8009f36 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f009 fdea 	bl	8013afa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695a      	ldr	r2, [r3, #20]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f002 0208 	and.w	r2, r2, #8
 8009f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f005 fa0a 	bl	800f354 <USB_ReadInterrupts>
 8009f40:	4603      	mov	r3, r0
 8009f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f46:	2b80      	cmp	r3, #128	; 0x80
 8009f48:	d122      	bne.n	8009f90 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f56:	2301      	movs	r3, #1
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24
 8009f5a:	e014      	b.n	8009f86 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f60:	4613      	mov	r3, r2
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	440b      	add	r3, r1
 8009f6a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d105      	bne.n	8009f80 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fb0f 	bl	800a59e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	3301      	adds	r3, #1
 8009f84:	627b      	str	r3, [r7, #36]	; 0x24
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d3e5      	bcc.n	8009f5c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f005 f9dd 	bl	800f354 <USB_ReadInterrupts>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fa4:	d13b      	bne.n	800a01e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8009faa:	e02b      	b.n	800a004 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009fbc:	6879      	ldr	r1, [r7, #4]
 8009fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	440b      	add	r3, r1
 8009fca:	3340      	adds	r3, #64	; 0x40
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d115      	bne.n	8009ffe <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009fd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	da12      	bge.n	8009ffe <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fdc:	4613      	mov	r3, r2
 8009fde:	00db      	lsls	r3, r3, #3
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	333f      	adds	r3, #63	; 0x3f
 8009fe8:	2201      	movs	r2, #1
 8009fea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fad0 	bl	800a59e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	3301      	adds	r3, #1
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d3ce      	bcc.n	8009fac <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	695a      	ldr	r2, [r3, #20]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a01c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4618      	mov	r0, r3
 800a024:	f005 f996 	bl	800f354 <USB_ReadInterrupts>
 800a028:	4603      	mov	r3, r0
 800a02a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a02e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a032:	d155      	bne.n	800a0e0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a034:	2301      	movs	r3, #1
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
 800a038:	e045      	b.n	800a0c6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a04e:	4613      	mov	r3, r2
 800a050:	00db      	lsls	r3, r3, #3
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d12e      	bne.n	800a0c0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a062:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a064:	2b00      	cmp	r3, #0
 800a066:	da2b      	bge.n	800a0c0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a074:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a078:	429a      	cmp	r2, r3
 800a07a:	d121      	bne.n	800a0c0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a080:	4613      	mov	r3, r2
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	440b      	add	r3, r1
 800a08a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a08e:	2201      	movs	r2, #1
 800a090:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10a      	bne.n	800a0c0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0bc:	6053      	str	r3, [r2, #4]
            break;
 800a0be:	e007      	b.n	800a0d0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d3b4      	bcc.n	800a03a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	695a      	ldr	r2, [r3, #20]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a0de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f005 f935 	bl	800f354 <USB_ReadInterrupts>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f4:	d10a      	bne.n	800a10c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f009 fd8e 	bl	8013c18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	695a      	ldr	r2, [r3, #20]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a10a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4618      	mov	r0, r3
 800a112:	f005 f91f 	bl	800f354 <USB_ReadInterrupts>
 800a116:	4603      	mov	r3, r0
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d115      	bne.n	800a14c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	f003 0304 	and.w	r3, r3, #4
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f009 fd7e 	bl	8013c34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6859      	ldr	r1, [r3, #4]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	430a      	orrs	r2, r1
 800a146:	605a      	str	r2, [r3, #4]
 800a148:	e000      	b.n	800a14c <HAL_PCD_IRQHandler+0x938>
      return;
 800a14a:	bf00      	nop
    }
  }
}
 800a14c:	3734      	adds	r7, #52	; 0x34
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd90      	pop	{r4, r7, pc}

0800a152 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	460b      	mov	r3, r1
 800a15c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a164:	2b01      	cmp	r3, #1
 800a166:	d101      	bne.n	800a16c <HAL_PCD_SetAddress+0x1a>
 800a168:	2302      	movs	r3, #2
 800a16a:	e013      	b.n	800a194 <HAL_PCD_SetAddress+0x42>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	78fa      	ldrb	r2, [r7, #3]
 800a178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	78fa      	ldrb	r2, [r7, #3]
 800a182:	4611      	mov	r1, r2
 800a184:	4618      	mov	r0, r3
 800a186:	f005 f87d 	bl	800f284 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	70fb      	strb	r3, [r7, #3]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	803b      	strh	r3, [r7, #0]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a1ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	da0f      	bge.n	800a1e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	f003 020f 	and.w	r2, r3, #15
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	3338      	adds	r3, #56	; 0x38
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	705a      	strb	r2, [r3, #1]
 800a1e0:	e00f      	b.n	800a202 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	f003 020f 	and.w	r2, r3, #15
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	00db      	lsls	r3, r3, #3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	f003 030f 	and.w	r3, r3, #15
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a20e:	883a      	ldrh	r2, [r7, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	78ba      	ldrb	r2, [r7, #2]
 800a218:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	785b      	ldrb	r3, [r3, #1]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d004      	beq.n	800a22c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	b29a      	uxth	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a22c:	78bb      	ldrb	r3, [r7, #2]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d102      	bne.n	800a238 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d101      	bne.n	800a246 <HAL_PCD_EP_Open+0xaa>
 800a242:	2302      	movs	r3, #2
 800a244:	e00e      	b.n	800a264 <HAL_PCD_EP_Open+0xc8>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	4618      	mov	r0, r3
 800a256:	f004 f8fd 	bl	800e454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a262:	7afb      	ldrb	r3, [r7, #11]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	da0f      	bge.n	800a2a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	f003 020f 	and.w	r2, r3, #15
 800a286:	4613      	mov	r3, r2
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	3338      	adds	r3, #56	; 0x38
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	4413      	add	r3, r2
 800a294:	3304      	adds	r3, #4
 800a296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	705a      	strb	r2, [r3, #1]
 800a29e:	e00f      	b.n	800a2c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	f003 020f 	and.w	r2, r3, #15
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	00db      	lsls	r3, r3, #3
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a2c0:	78fb      	ldrb	r3, [r7, #3]
 800a2c2:	f003 030f 	and.w	r3, r3, #15
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <HAL_PCD_EP_Close+0x6e>
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	e00e      	b.n	800a2f8 <HAL_PCD_EP_Close+0x8c>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f004 f93b 	bl	800e564 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	607a      	str	r2, [r7, #4]
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	460b      	mov	r3, r1
 800a30e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a310:	7afb      	ldrb	r3, [r7, #11]
 800a312:	f003 020f 	and.w	r2, r3, #15
 800a316:	4613      	mov	r3, r2
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	4413      	add	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4413      	add	r3, r2
 800a326:	3304      	adds	r3, #4
 800a328:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2200      	movs	r2, #0
 800a33a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2200      	movs	r2, #0
 800a340:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a342:	7afb      	ldrb	r3, [r7, #11]
 800a344:	f003 030f 	and.w	r3, r3, #15
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d102      	bne.n	800a35c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a35c:	7afb      	ldrb	r3, [r7, #11]
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	2b00      	cmp	r3, #0
 800a364:	d109      	bne.n	800a37a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	461a      	mov	r2, r3
 800a372:	6979      	ldr	r1, [r7, #20]
 800a374:	f004 fc1a 	bl	800ebac <USB_EP0StartXfer>
 800a378:	e008      	b.n	800a38c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	461a      	mov	r2, r3
 800a386:	6979      	ldr	r1, [r7, #20]
 800a388:	f004 f9c8 	bl	800e71c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b086      	sub	sp, #24
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3a6:	7afb      	ldrb	r3, [r7, #11]
 800a3a8:	f003 020f 	and.w	r2, r3, #15
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	3338      	adds	r3, #56	; 0x38
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3d6:	7afb      	ldrb	r3, [r7, #11]
 800a3d8:	f003 030f 	and.w	r3, r3, #15
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d102      	bne.n	800a3f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a3f0:	7afb      	ldrb	r3, [r7, #11]
 800a3f2:	f003 030f 	and.w	r3, r3, #15
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d109      	bne.n	800a40e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6818      	ldr	r0, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	461a      	mov	r2, r3
 800a406:	6979      	ldr	r1, [r7, #20]
 800a408:	f004 fbd0 	bl	800ebac <USB_EP0StartXfer>
 800a40c:	e008      	b.n	800a420 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	461a      	mov	r2, r3
 800a41a:	6979      	ldr	r1, [r7, #20]
 800a41c:	f004 f97e 	bl	800e71c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	460b      	mov	r3, r1
 800a434:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a436:	78fb      	ldrb	r3, [r7, #3]
 800a438:	f003 020f 	and.w	r2, r3, #15
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d901      	bls.n	800a448 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	e050      	b.n	800a4ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	da0f      	bge.n	800a470 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	f003 020f 	and.w	r2, r3, #15
 800a456:	4613      	mov	r3, r2
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	4413      	add	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	3338      	adds	r3, #56	; 0x38
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	4413      	add	r3, r2
 800a464:	3304      	adds	r3, #4
 800a466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	705a      	strb	r2, [r3, #1]
 800a46e:	e00d      	b.n	800a48c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a470:	78fa      	ldrb	r2, [r7, #3]
 800a472:	4613      	mov	r3, r2
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	4413      	add	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	4413      	add	r3, r2
 800a482:	3304      	adds	r3, #4
 800a484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a492:	78fb      	ldrb	r3, [r7, #3]
 800a494:	f003 030f 	and.w	r3, r3, #15
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d101      	bne.n	800a4ac <HAL_PCD_EP_SetStall+0x82>
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	e01e      	b.n	800a4ea <HAL_PCD_EP_SetStall+0xc0>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68f9      	ldr	r1, [r7, #12]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f004 fe0e 	bl	800f0dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10a      	bne.n	800a4e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6818      	ldr	r0, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	b2d9      	uxtb	r1, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f004 fffe 	bl	800f4dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	f003 020f 	and.w	r2, r3, #15
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d901      	bls.n	800a510 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e042      	b.n	800a596 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a514:	2b00      	cmp	r3, #0
 800a516:	da0f      	bge.n	800a538 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	f003 020f 	and.w	r2, r3, #15
 800a51e:	4613      	mov	r3, r2
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	4413      	add	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	3338      	adds	r3, #56	; 0x38
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	4413      	add	r3, r2
 800a52c:	3304      	adds	r3, #4
 800a52e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2201      	movs	r2, #1
 800a534:	705a      	strb	r2, [r3, #1]
 800a536:	e00f      	b.n	800a558 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	f003 020f 	and.w	r2, r3, #15
 800a53e:	4613      	mov	r3, r2
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	4413      	add	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	4413      	add	r3, r2
 800a54e:	3304      	adds	r3, #4
 800a550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	f003 030f 	and.w	r3, r3, #15
 800a564:	b2da      	uxtb	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <HAL_PCD_EP_ClrStall+0x86>
 800a574:	2302      	movs	r3, #2
 800a576:	e00e      	b.n	800a596 <HAL_PCD_EP_ClrStall+0xa4>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68f9      	ldr	r1, [r7, #12]
 800a586:	4618      	mov	r0, r3
 800a588:	f004 fe16 	bl	800f1b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a5aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	da0c      	bge.n	800a5cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5b2:	78fb      	ldrb	r3, [r7, #3]
 800a5b4:	f003 020f 	and.w	r2, r3, #15
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	4413      	add	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	3338      	adds	r3, #56	; 0x38
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e00c      	b.n	800a5e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	f003 020f 	and.w	r2, r3, #15
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	00db      	lsls	r3, r3, #3
 800a5d6:	4413      	add	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68f9      	ldr	r1, [r7, #12]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f004 fc35 	bl	800ee5c <USB_EPStopXfer>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a5f6:	7afb      	ldrb	r3, [r7, #11]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08a      	sub	sp, #40	; 0x28
 800a604:	af02      	add	r7, sp, #8
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	4613      	mov	r3, r2
 800a618:	00db      	lsls	r3, r3, #3
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	3338      	adds	r3, #56	; 0x38
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	4413      	add	r3, r2
 800a624:	3304      	adds	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6a1a      	ldr	r2, [r3, #32]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	429a      	cmp	r2, r3
 800a632:	d901      	bls.n	800a638 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e06c      	b.n	800a712 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	699a      	ldr	r2, [r3, #24]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	69fa      	ldr	r2, [r7, #28]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d902      	bls.n	800a654 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	3303      	adds	r3, #3
 800a658:	089b      	lsrs	r3, r3, #2
 800a65a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a65c:	e02b      	b.n	800a6b6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	699a      	ldr	r2, [r3, #24]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	429a      	cmp	r2, r3
 800a672:	d902      	bls.n	800a67a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	3303      	adds	r3, #3
 800a67e:	089b      	lsrs	r3, r3, #2
 800a680:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6919      	ldr	r1, [r3, #16]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a692:	b2db      	uxtb	r3, r3
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	4603      	mov	r3, r0
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	f004 fc89 	bl	800efb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	691a      	ldr	r2, [r3, #16]
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	441a      	add	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6a1a      	ldr	r2, [r3, #32]
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	69ba      	ldr	r2, [r7, #24]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d809      	bhi.n	800a6e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6a1a      	ldr	r2, [r3, #32]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d203      	bcs.n	800a6e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1be      	bne.n	800a65e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	699a      	ldr	r2, [r3, #24]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6a1b      	ldr	r3, [r3, #32]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d811      	bhi.n	800a710 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	f003 030f 	and.w	r3, r3, #15
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	43db      	mvns	r3, r3
 800a706:	6939      	ldr	r1, [r7, #16]
 800a708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a70c:	4013      	ands	r3, r2
 800a70e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	333c      	adds	r3, #60	; 0x3c
 800a734:	3304      	adds	r3, #4
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	4413      	add	r3, r2
 800a742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d17b      	bne.n	800a84a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f003 0308 	and.w	r3, r3, #8
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d015      	beq.n	800a788 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	4a61      	ldr	r2, [pc, #388]	; (800a8e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a760:	4293      	cmp	r3, r2
 800a762:	f240 80b9 	bls.w	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 80b3 	beq.w	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77e:	461a      	mov	r2, r3
 800a780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a784:	6093      	str	r3, [r2, #8]
 800a786:	e0a7      	b.n	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d009      	beq.n	800a7a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79e:	461a      	mov	r2, r3
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	6093      	str	r3, [r2, #8]
 800a7a4:	e098      	b.n	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f040 8093 	bne.w	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	4a4b      	ldr	r2, [pc, #300]	; (800a8e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d90f      	bls.n	800a7da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00a      	beq.n	800a7da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7d6:	6093      	str	r3, [r2, #8]
 800a7d8:	e07e      	b.n	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	4413      	add	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	69da      	ldr	r2, [r3, #28]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	0159      	lsls	r1, r3, #5
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	440b      	add	r3, r1
 800a7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a806:	1ad2      	subs	r2, r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d114      	bne.n	800a83c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a824:	461a      	mov	r2, r3
 800a826:	2101      	movs	r1, #1
 800a828:	f004 fe58 	bl	800f4dc <USB_EP0_OutStart>
 800a82c:	e006      	b.n	800a83c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	691a      	ldr	r2, [r3, #16]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	441a      	add	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	4619      	mov	r1, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f009 f924 	bl	8013a90 <HAL_PCD_DataOutStageCallback>
 800a848:	e046      	b.n	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	4a26      	ldr	r2, [pc, #152]	; (800a8e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d124      	bne.n	800a89c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00a      	beq.n	800a872 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a868:	461a      	mov	r2, r3
 800a86a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a86e:	6093      	str	r3, [r2, #8]
 800a870:	e032      	b.n	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f003 0320 	and.w	r3, r3, #32
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d008      	beq.n	800a88e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a888:	461a      	mov	r2, r3
 800a88a:	2320      	movs	r3, #32
 800a88c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f009 f8fb 	bl	8013a90 <HAL_PCD_DataOutStageCallback>
 800a89a:	e01d      	b.n	800a8d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d114      	bne.n	800a8cc <PCD_EP_OutXfrComplete_int+0x1b0>
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	00db      	lsls	r3, r3, #3
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	440b      	add	r3, r1
 800a8b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d108      	bne.n	800a8cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	f004 fe08 	bl	800f4dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f009 f8dc 	bl	8013a90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3720      	adds	r7, #32
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	4f54300a 	.word	0x4f54300a
 800a8e8:	4f54310a 	.word	0x4f54310a

0800a8ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	333c      	adds	r3, #60	; 0x3c
 800a904:	3304      	adds	r3, #4
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4a15      	ldr	r2, [pc, #84]	; (800a974 <PCD_EP_OutSetupPacket_int+0x88>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d90e      	bls.n	800a940 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d009      	beq.n	800a940 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a938:	461a      	mov	r2, r3
 800a93a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a93e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f009 f893 	bl	8013a6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4a0a      	ldr	r2, [pc, #40]	; (800a974 <PCD_EP_OutSetupPacket_int+0x88>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d90c      	bls.n	800a968 <PCD_EP_OutSetupPacket_int+0x7c>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d108      	bne.n	800a968 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a960:	461a      	mov	r2, r3
 800a962:	2101      	movs	r1, #1
 800a964:	f004 fdba 	bl	800f4dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3718      	adds	r7, #24
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	4f54300a 	.word	0x4f54300a

0800a978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
 800a984:	4613      	mov	r3, r2
 800a986:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a990:	78fb      	ldrb	r3, [r7, #3]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d107      	bne.n	800a9a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a996:	883b      	ldrh	r3, [r7, #0]
 800a998:	0419      	lsls	r1, r3, #16
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	629a      	str	r2, [r3, #40]	; 0x28
 800a9a4:	e028      	b.n	800a9f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	0c1b      	lsrs	r3, r3, #16
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
 800a9b8:	e00d      	b.n	800a9d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	3340      	adds	r3, #64	; 0x40
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4413      	add	r3, r2
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	0c1b      	lsrs	r3, r3, #16
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	73fb      	strb	r3, [r7, #15]
 800a9d6:	7bfa      	ldrb	r2, [r7, #15]
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d3ec      	bcc.n	800a9ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a9e0:	883b      	ldrh	r3, [r7, #0]
 800a9e2:	0418      	lsls	r0, r3, #16
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6819      	ldr	r1, [r3, #0]
 800a9e8:	78fb      	ldrb	r3, [r7, #3]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	4302      	orrs	r2, r0
 800a9f0:	3340      	adds	r3, #64	; 0x40
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	887a      	ldrh	r2, [r7, #2]
 800aa18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e267      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d075      	beq.n	800ab4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa5e:	4b88      	ldr	r3, [pc, #544]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f003 030c 	and.w	r3, r3, #12
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d00c      	beq.n	800aa84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa6a:	4b85      	ldr	r3, [pc, #532]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa72:	2b08      	cmp	r3, #8
 800aa74:	d112      	bne.n	800aa9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa76:	4b82      	ldr	r3, [pc, #520]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa82:	d10b      	bne.n	800aa9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa84:	4b7e      	ldr	r3, [pc, #504]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d05b      	beq.n	800ab48 <HAL_RCC_OscConfig+0x108>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d157      	bne.n	800ab48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e242      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaa4:	d106      	bne.n	800aab4 <HAL_RCC_OscConfig+0x74>
 800aaa6:	4b76      	ldr	r3, [pc, #472]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a75      	ldr	r2, [pc, #468]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aaac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	e01d      	b.n	800aaf0 <HAL_RCC_OscConfig+0xb0>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aabc:	d10c      	bne.n	800aad8 <HAL_RCC_OscConfig+0x98>
 800aabe:	4b70      	ldr	r3, [pc, #448]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a6f      	ldr	r2, [pc, #444]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aac8:	6013      	str	r3, [r2, #0]
 800aaca:	4b6d      	ldr	r3, [pc, #436]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a6c      	ldr	r2, [pc, #432]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	e00b      	b.n	800aaf0 <HAL_RCC_OscConfig+0xb0>
 800aad8:	4b69      	ldr	r3, [pc, #420]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a68      	ldr	r2, [pc, #416]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aae2:	6013      	str	r3, [r2, #0]
 800aae4:	4b66      	ldr	r3, [pc, #408]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a65      	ldr	r2, [pc, #404]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aaea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d013      	beq.n	800ab20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaf8:	f7fa fc16 	bl	8005328 <HAL_GetTick>
 800aafc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aafe:	e008      	b.n	800ab12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab00:	f7fa fc12 	bl	8005328 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b64      	cmp	r3, #100	; 0x64
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e207      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab12:	4b5b      	ldr	r3, [pc, #364]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0f0      	beq.n	800ab00 <HAL_RCC_OscConfig+0xc0>
 800ab1e:	e014      	b.n	800ab4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab20:	f7fa fc02 	bl	8005328 <HAL_GetTick>
 800ab24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab26:	e008      	b.n	800ab3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab28:	f7fa fbfe 	bl	8005328 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b64      	cmp	r3, #100	; 0x64
 800ab34:	d901      	bls.n	800ab3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e1f3      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab3a:	4b51      	ldr	r3, [pc, #324]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f0      	bne.n	800ab28 <HAL_RCC_OscConfig+0xe8>
 800ab46:	e000      	b.n	800ab4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0302 	and.w	r3, r3, #2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d063      	beq.n	800ac1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab56:	4b4a      	ldr	r3, [pc, #296]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f003 030c 	and.w	r3, r3, #12
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00b      	beq.n	800ab7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab62:	4b47      	ldr	r3, [pc, #284]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab6a:	2b08      	cmp	r3, #8
 800ab6c:	d11c      	bne.n	800aba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab6e:	4b44      	ldr	r3, [pc, #272]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d116      	bne.n	800aba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab7a:	4b41      	ldr	r3, [pc, #260]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d005      	beq.n	800ab92 <HAL_RCC_OscConfig+0x152>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d001      	beq.n	800ab92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e1c7      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab92:	4b3b      	ldr	r3, [pc, #236]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	4937      	ldr	r1, [pc, #220]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aba6:	e03a      	b.n	800ac1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d020      	beq.n	800abf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800abb0:	4b34      	ldr	r3, [pc, #208]	; (800ac84 <HAL_RCC_OscConfig+0x244>)
 800abb2:	2201      	movs	r2, #1
 800abb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abb6:	f7fa fbb7 	bl	8005328 <HAL_GetTick>
 800abba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abbc:	e008      	b.n	800abd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abbe:	f7fa fbb3 	bl	8005328 <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d901      	bls.n	800abd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e1a8      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abd0:	4b2b      	ldr	r3, [pc, #172]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0302 	and.w	r3, r3, #2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d0f0      	beq.n	800abbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abdc:	4b28      	ldr	r3, [pc, #160]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	00db      	lsls	r3, r3, #3
 800abea:	4925      	ldr	r1, [pc, #148]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800abec:	4313      	orrs	r3, r2
 800abee:	600b      	str	r3, [r1, #0]
 800abf0:	e015      	b.n	800ac1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abf2:	4b24      	ldr	r3, [pc, #144]	; (800ac84 <HAL_RCC_OscConfig+0x244>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf8:	f7fa fb96 	bl	8005328 <HAL_GetTick>
 800abfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abfe:	e008      	b.n	800ac12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac00:	f7fa fb92 	bl	8005328 <HAL_GetTick>
 800ac04:	4602      	mov	r2, r0
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d901      	bls.n	800ac12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	e187      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac12:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0302 	and.w	r3, r3, #2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1f0      	bne.n	800ac00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0308 	and.w	r3, r3, #8
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d036      	beq.n	800ac98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d016      	beq.n	800ac60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac32:	4b15      	ldr	r3, [pc, #84]	; (800ac88 <HAL_RCC_OscConfig+0x248>)
 800ac34:	2201      	movs	r2, #1
 800ac36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac38:	f7fa fb76 	bl	8005328 <HAL_GetTick>
 800ac3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac3e:	e008      	b.n	800ac52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac40:	f7fa fb72 	bl	8005328 <HAL_GetTick>
 800ac44:	4602      	mov	r2, r0
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d901      	bls.n	800ac52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ac4e:	2303      	movs	r3, #3
 800ac50:	e167      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac52:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <HAL_RCC_OscConfig+0x240>)
 800ac54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac56:	f003 0302 	and.w	r3, r3, #2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0f0      	beq.n	800ac40 <HAL_RCC_OscConfig+0x200>
 800ac5e:	e01b      	b.n	800ac98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac60:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <HAL_RCC_OscConfig+0x248>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac66:	f7fa fb5f 	bl	8005328 <HAL_GetTick>
 800ac6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac6c:	e00e      	b.n	800ac8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac6e:	f7fa fb5b 	bl	8005328 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d907      	bls.n	800ac8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e150      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
 800ac80:	40023800 	.word	0x40023800
 800ac84:	42470000 	.word	0x42470000
 800ac88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac8c:	4b88      	ldr	r3, [pc, #544]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ac8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1ea      	bne.n	800ac6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0304 	and.w	r3, r3, #4
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8097 	beq.w	800add4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aca6:	2300      	movs	r3, #0
 800aca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acaa:	4b81      	ldr	r3, [pc, #516]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800acac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10f      	bne.n	800acd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acb6:	2300      	movs	r3, #0
 800acb8:	60bb      	str	r3, [r7, #8]
 800acba:	4b7d      	ldr	r3, [pc, #500]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	4a7c      	ldr	r2, [pc, #496]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800acc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acc4:	6413      	str	r3, [r2, #64]	; 0x40
 800acc6:	4b7a      	ldr	r3, [pc, #488]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800acc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acce:	60bb      	str	r3, [r7, #8]
 800acd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800acd2:	2301      	movs	r3, #1
 800acd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acd6:	4b77      	ldr	r3, [pc, #476]	; (800aeb4 <HAL_RCC_OscConfig+0x474>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d118      	bne.n	800ad14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ace2:	4b74      	ldr	r3, [pc, #464]	; (800aeb4 <HAL_RCC_OscConfig+0x474>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a73      	ldr	r2, [pc, #460]	; (800aeb4 <HAL_RCC_OscConfig+0x474>)
 800ace8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acee:	f7fa fb1b 	bl	8005328 <HAL_GetTick>
 800acf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acf4:	e008      	b.n	800ad08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acf6:	f7fa fb17 	bl	8005328 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d901      	bls.n	800ad08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e10c      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad08:	4b6a      	ldr	r3, [pc, #424]	; (800aeb4 <HAL_RCC_OscConfig+0x474>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0f0      	beq.n	800acf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d106      	bne.n	800ad2a <HAL_RCC_OscConfig+0x2ea>
 800ad1c:	4b64      	ldr	r3, [pc, #400]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad20:	4a63      	ldr	r2, [pc, #396]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad22:	f043 0301 	orr.w	r3, r3, #1
 800ad26:	6713      	str	r3, [r2, #112]	; 0x70
 800ad28:	e01c      	b.n	800ad64 <HAL_RCC_OscConfig+0x324>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	2b05      	cmp	r3, #5
 800ad30:	d10c      	bne.n	800ad4c <HAL_RCC_OscConfig+0x30c>
 800ad32:	4b5f      	ldr	r3, [pc, #380]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad36:	4a5e      	ldr	r2, [pc, #376]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad38:	f043 0304 	orr.w	r3, r3, #4
 800ad3c:	6713      	str	r3, [r2, #112]	; 0x70
 800ad3e:	4b5c      	ldr	r3, [pc, #368]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad42:	4a5b      	ldr	r2, [pc, #364]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	6713      	str	r3, [r2, #112]	; 0x70
 800ad4a:	e00b      	b.n	800ad64 <HAL_RCC_OscConfig+0x324>
 800ad4c:	4b58      	ldr	r3, [pc, #352]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad50:	4a57      	ldr	r2, [pc, #348]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad52:	f023 0301 	bic.w	r3, r3, #1
 800ad56:	6713      	str	r3, [r2, #112]	; 0x70
 800ad58:	4b55      	ldr	r3, [pc, #340]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad5c:	4a54      	ldr	r2, [pc, #336]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad5e:	f023 0304 	bic.w	r3, r3, #4
 800ad62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d015      	beq.n	800ad98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad6c:	f7fa fadc 	bl	8005328 <HAL_GetTick>
 800ad70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad72:	e00a      	b.n	800ad8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad74:	f7fa fad8 	bl	8005328 <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d901      	bls.n	800ad8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e0cb      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad8a:	4b49      	ldr	r3, [pc, #292]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d0ee      	beq.n	800ad74 <HAL_RCC_OscConfig+0x334>
 800ad96:	e014      	b.n	800adc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad98:	f7fa fac6 	bl	8005328 <HAL_GetTick>
 800ad9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad9e:	e00a      	b.n	800adb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ada0:	f7fa fac2 	bl	8005328 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800adae:	4293      	cmp	r3, r2
 800adb0:	d901      	bls.n	800adb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e0b5      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800adb6:	4b3e      	ldr	r3, [pc, #248]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800adb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adba:	f003 0302 	and.w	r3, r3, #2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1ee      	bne.n	800ada0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d105      	bne.n	800add4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800adc8:	4b39      	ldr	r3, [pc, #228]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adcc:	4a38      	ldr	r2, [pc, #224]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800adce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800add2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 80a1 	beq.w	800af20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800adde:	4b34      	ldr	r3, [pc, #208]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f003 030c 	and.w	r3, r3, #12
 800ade6:	2b08      	cmp	r3, #8
 800ade8:	d05c      	beq.n	800aea4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d141      	bne.n	800ae76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adf2:	4b31      	ldr	r3, [pc, #196]	; (800aeb8 <HAL_RCC_OscConfig+0x478>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adf8:	f7fa fa96 	bl	8005328 <HAL_GetTick>
 800adfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adfe:	e008      	b.n	800ae12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae00:	f7fa fa92 	bl	8005328 <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d901      	bls.n	800ae12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e087      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae12:	4b27      	ldr	r3, [pc, #156]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1f0      	bne.n	800ae00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	69da      	ldr	r2, [r3, #28]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	431a      	orrs	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	019b      	lsls	r3, r3, #6
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae34:	085b      	lsrs	r3, r3, #1
 800ae36:	3b01      	subs	r3, #1
 800ae38:	041b      	lsls	r3, r3, #16
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	061b      	lsls	r3, r3, #24
 800ae42:	491b      	ldr	r1, [pc, #108]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ae44:	4313      	orrs	r3, r2
 800ae46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae48:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <HAL_RCC_OscConfig+0x478>)
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae4e:	f7fa fa6b 	bl	8005328 <HAL_GetTick>
 800ae52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae54:	e008      	b.n	800ae68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae56:	f7fa fa67 	bl	8005328 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d901      	bls.n	800ae68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e05c      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae68:	4b11      	ldr	r3, [pc, #68]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0f0      	beq.n	800ae56 <HAL_RCC_OscConfig+0x416>
 800ae74:	e054      	b.n	800af20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae76:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <HAL_RCC_OscConfig+0x478>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae7c:	f7fa fa54 	bl	8005328 <HAL_GetTick>
 800ae80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae82:	e008      	b.n	800ae96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae84:	f7fa fa50 	bl	8005328 <HAL_GetTick>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d901      	bls.n	800ae96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e045      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae96:	4b06      	ldr	r3, [pc, #24]	; (800aeb0 <HAL_RCC_OscConfig+0x470>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1f0      	bne.n	800ae84 <HAL_RCC_OscConfig+0x444>
 800aea2:	e03d      	b.n	800af20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d107      	bne.n	800aebc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e038      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
 800aeb0:	40023800 	.word	0x40023800
 800aeb4:	40007000 	.word	0x40007000
 800aeb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aebc:	4b1b      	ldr	r3, [pc, #108]	; (800af2c <HAL_RCC_OscConfig+0x4ec>)
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d028      	beq.n	800af1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d121      	bne.n	800af1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d11a      	bne.n	800af1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aeec:	4013      	ands	r3, r2
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aef2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d111      	bne.n	800af1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af02:	085b      	lsrs	r3, r3, #1
 800af04:	3b01      	subs	r3, #1
 800af06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af08:	429a      	cmp	r2, r3
 800af0a:	d107      	bne.n	800af1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af18:	429a      	cmp	r2, r3
 800af1a:	d001      	beq.n	800af20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e000      	b.n	800af22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	40023800 	.word	0x40023800

0800af30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e0cc      	b.n	800b0de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800af44:	4b68      	ldr	r3, [pc, #416]	; (800b0e8 <HAL_RCC_ClockConfig+0x1b8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d90c      	bls.n	800af6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af52:	4b65      	ldr	r3, [pc, #404]	; (800b0e8 <HAL_RCC_ClockConfig+0x1b8>)
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	b2d2      	uxtb	r2, r2
 800af58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af5a:	4b63      	ldr	r3, [pc, #396]	; (800b0e8 <HAL_RCC_ClockConfig+0x1b8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	429a      	cmp	r2, r3
 800af66:	d001      	beq.n	800af6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e0b8      	b.n	800b0de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d020      	beq.n	800afba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d005      	beq.n	800af90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af84:	4b59      	ldr	r3, [pc, #356]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	4a58      	ldr	r2, [pc, #352]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800af8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800af8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 0308 	and.w	r3, r3, #8
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d005      	beq.n	800afa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af9c:	4b53      	ldr	r3, [pc, #332]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	4a52      	ldr	r2, [pc, #328]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800afa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800afa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afa8:	4b50      	ldr	r3, [pc, #320]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	494d      	ldr	r1, [pc, #308]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800afb6:	4313      	orrs	r3, r2
 800afb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 0301 	and.w	r3, r3, #1
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d044      	beq.n	800b050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d107      	bne.n	800afde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afce:	4b47      	ldr	r3, [pc, #284]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d119      	bne.n	800b00e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e07f      	b.n	800b0de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d003      	beq.n	800afee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afea:	2b03      	cmp	r3, #3
 800afec:	d107      	bne.n	800affe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afee:	4b3f      	ldr	r3, [pc, #252]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d109      	bne.n	800b00e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e06f      	b.n	800b0de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800affe:	4b3b      	ldr	r3, [pc, #236]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0302 	and.w	r3, r3, #2
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e067      	b.n	800b0de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b00e:	4b37      	ldr	r3, [pc, #220]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	f023 0203 	bic.w	r2, r3, #3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	4934      	ldr	r1, [pc, #208]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b01c:	4313      	orrs	r3, r2
 800b01e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b020:	f7fa f982 	bl	8005328 <HAL_GetTick>
 800b024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b026:	e00a      	b.n	800b03e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b028:	f7fa f97e 	bl	8005328 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	f241 3288 	movw	r2, #5000	; 0x1388
 800b036:	4293      	cmp	r3, r2
 800b038:	d901      	bls.n	800b03e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e04f      	b.n	800b0de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b03e:	4b2b      	ldr	r3, [pc, #172]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f003 020c 	and.w	r2, r3, #12
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d1eb      	bne.n	800b028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b050:	4b25      	ldr	r3, [pc, #148]	; (800b0e8 <HAL_RCC_ClockConfig+0x1b8>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0307 	and.w	r3, r3, #7
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d20c      	bcs.n	800b078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b05e:	4b22      	ldr	r3, [pc, #136]	; (800b0e8 <HAL_RCC_ClockConfig+0x1b8>)
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	b2d2      	uxtb	r2, r2
 800b064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b066:	4b20      	ldr	r3, [pc, #128]	; (800b0e8 <HAL_RCC_ClockConfig+0x1b8>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	429a      	cmp	r2, r3
 800b072:	d001      	beq.n	800b078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e032      	b.n	800b0de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b00      	cmp	r3, #0
 800b082:	d008      	beq.n	800b096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b084:	4b19      	ldr	r3, [pc, #100]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	4916      	ldr	r1, [pc, #88]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b092:	4313      	orrs	r3, r2
 800b094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0308 	and.w	r3, r3, #8
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d009      	beq.n	800b0b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b0a2:	4b12      	ldr	r3, [pc, #72]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	00db      	lsls	r3, r3, #3
 800b0b0:	490e      	ldr	r1, [pc, #56]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b0b6:	f000 f821 	bl	800b0fc <HAL_RCC_GetSysClockFreq>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <HAL_RCC_ClockConfig+0x1bc>)
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	091b      	lsrs	r3, r3, #4
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	490a      	ldr	r1, [pc, #40]	; (800b0f0 <HAL_RCC_ClockConfig+0x1c0>)
 800b0c8:	5ccb      	ldrb	r3, [r1, r3]
 800b0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ce:	4a09      	ldr	r2, [pc, #36]	; (800b0f4 <HAL_RCC_ClockConfig+0x1c4>)
 800b0d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b0d2:	4b09      	ldr	r3, [pc, #36]	; (800b0f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7f9 ff00 	bl	8004edc <HAL_InitTick>

  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	40023c00 	.word	0x40023c00
 800b0ec:	40023800 	.word	0x40023800
 800b0f0:	08017970 	.word	0x08017970
 800b0f4:	20000014 	.word	0x20000014
 800b0f8:	20000018 	.word	0x20000018

0800b0fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b100:	b094      	sub	sp, #80	; 0x50
 800b102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	647b      	str	r3, [r7, #68]	; 0x44
 800b108:	2300      	movs	r3, #0
 800b10a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b10c:	2300      	movs	r3, #0
 800b10e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b110:	2300      	movs	r3, #0
 800b112:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b114:	4b79      	ldr	r3, [pc, #484]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	f003 030c 	and.w	r3, r3, #12
 800b11c:	2b08      	cmp	r3, #8
 800b11e:	d00d      	beq.n	800b13c <HAL_RCC_GetSysClockFreq+0x40>
 800b120:	2b08      	cmp	r3, #8
 800b122:	f200 80e1 	bhi.w	800b2e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <HAL_RCC_GetSysClockFreq+0x34>
 800b12a:	2b04      	cmp	r3, #4
 800b12c:	d003      	beq.n	800b136 <HAL_RCC_GetSysClockFreq+0x3a>
 800b12e:	e0db      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b130:	4b73      	ldr	r3, [pc, #460]	; (800b300 <HAL_RCC_GetSysClockFreq+0x204>)
 800b132:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b134:	e0db      	b.n	800b2ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b136:	4b73      	ldr	r3, [pc, #460]	; (800b304 <HAL_RCC_GetSysClockFreq+0x208>)
 800b138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b13a:	e0d8      	b.n	800b2ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b13c:	4b6f      	ldr	r3, [pc, #444]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b144:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b146:	4b6d      	ldr	r3, [pc, #436]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d063      	beq.n	800b21a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b152:	4b6a      	ldr	r3, [pc, #424]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	099b      	lsrs	r3, r3, #6
 800b158:	2200      	movs	r2, #0
 800b15a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b15c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b164:	633b      	str	r3, [r7, #48]	; 0x30
 800b166:	2300      	movs	r3, #0
 800b168:	637b      	str	r3, [r7, #52]	; 0x34
 800b16a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b16e:	4622      	mov	r2, r4
 800b170:	462b      	mov	r3, r5
 800b172:	f04f 0000 	mov.w	r0, #0
 800b176:	f04f 0100 	mov.w	r1, #0
 800b17a:	0159      	lsls	r1, r3, #5
 800b17c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b180:	0150      	lsls	r0, r2, #5
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4621      	mov	r1, r4
 800b188:	1a51      	subs	r1, r2, r1
 800b18a:	6139      	str	r1, [r7, #16]
 800b18c:	4629      	mov	r1, r5
 800b18e:	eb63 0301 	sbc.w	r3, r3, r1
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	f04f 0200 	mov.w	r2, #0
 800b198:	f04f 0300 	mov.w	r3, #0
 800b19c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1a0:	4659      	mov	r1, fp
 800b1a2:	018b      	lsls	r3, r1, #6
 800b1a4:	4651      	mov	r1, sl
 800b1a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b1aa:	4651      	mov	r1, sl
 800b1ac:	018a      	lsls	r2, r1, #6
 800b1ae:	4651      	mov	r1, sl
 800b1b0:	ebb2 0801 	subs.w	r8, r2, r1
 800b1b4:	4659      	mov	r1, fp
 800b1b6:	eb63 0901 	sbc.w	r9, r3, r1
 800b1ba:	f04f 0200 	mov.w	r2, #0
 800b1be:	f04f 0300 	mov.w	r3, #0
 800b1c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b1ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1ce:	4690      	mov	r8, r2
 800b1d0:	4699      	mov	r9, r3
 800b1d2:	4623      	mov	r3, r4
 800b1d4:	eb18 0303 	adds.w	r3, r8, r3
 800b1d8:	60bb      	str	r3, [r7, #8]
 800b1da:	462b      	mov	r3, r5
 800b1dc:	eb49 0303 	adc.w	r3, r9, r3
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	f04f 0200 	mov.w	r2, #0
 800b1e6:	f04f 0300 	mov.w	r3, #0
 800b1ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	024b      	lsls	r3, r1, #9
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	024a      	lsls	r2, r1, #9
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	4619      	mov	r1, r3
 800b200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b202:	2200      	movs	r2, #0
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28
 800b206:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b20c:	f7f5 fd74 	bl	8000cf8 <__aeabi_uldivmod>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4613      	mov	r3, r2
 800b216:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b218:	e058      	b.n	800b2cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b21a:	4b38      	ldr	r3, [pc, #224]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	099b      	lsrs	r3, r3, #6
 800b220:	2200      	movs	r2, #0
 800b222:	4618      	mov	r0, r3
 800b224:	4611      	mov	r1, r2
 800b226:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b22a:	623b      	str	r3, [r7, #32]
 800b22c:	2300      	movs	r3, #0
 800b22e:	627b      	str	r3, [r7, #36]	; 0x24
 800b230:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b234:	4642      	mov	r2, r8
 800b236:	464b      	mov	r3, r9
 800b238:	f04f 0000 	mov.w	r0, #0
 800b23c:	f04f 0100 	mov.w	r1, #0
 800b240:	0159      	lsls	r1, r3, #5
 800b242:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b246:	0150      	lsls	r0, r2, #5
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4641      	mov	r1, r8
 800b24e:	ebb2 0a01 	subs.w	sl, r2, r1
 800b252:	4649      	mov	r1, r9
 800b254:	eb63 0b01 	sbc.w	fp, r3, r1
 800b258:	f04f 0200 	mov.w	r2, #0
 800b25c:	f04f 0300 	mov.w	r3, #0
 800b260:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b264:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b268:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b26c:	ebb2 040a 	subs.w	r4, r2, sl
 800b270:	eb63 050b 	sbc.w	r5, r3, fp
 800b274:	f04f 0200 	mov.w	r2, #0
 800b278:	f04f 0300 	mov.w	r3, #0
 800b27c:	00eb      	lsls	r3, r5, #3
 800b27e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b282:	00e2      	lsls	r2, r4, #3
 800b284:	4614      	mov	r4, r2
 800b286:	461d      	mov	r5, r3
 800b288:	4643      	mov	r3, r8
 800b28a:	18e3      	adds	r3, r4, r3
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	464b      	mov	r3, r9
 800b290:	eb45 0303 	adc.w	r3, r5, r3
 800b294:	607b      	str	r3, [r7, #4]
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	f04f 0300 	mov.w	r3, #0
 800b29e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	028b      	lsls	r3, r1, #10
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	028a      	lsls	r2, r1, #10
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	61bb      	str	r3, [r7, #24]
 800b2ba:	61fa      	str	r2, [r7, #28]
 800b2bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2c0:	f7f5 fd1a 	bl	8000cf8 <__aeabi_uldivmod>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	; (800b2fc <HAL_RCC_GetSysClockFreq+0x200>)
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	0c1b      	lsrs	r3, r3, #16
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b2dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b2e6:	e002      	b.n	800b2ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b2e8:	4b05      	ldr	r3, [pc, #20]	; (800b300 <HAL_RCC_GetSysClockFreq+0x204>)
 800b2ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b2ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3750      	adds	r7, #80	; 0x50
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2fa:	bf00      	nop
 800b2fc:	40023800 	.word	0x40023800
 800b300:	00f42400 	.word	0x00f42400
 800b304:	007a1200 	.word	0x007a1200

0800b308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b308:	b480      	push	{r7}
 800b30a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b30c:	4b03      	ldr	r3, [pc, #12]	; (800b31c <HAL_RCC_GetHCLKFreq+0x14>)
 800b30e:	681b      	ldr	r3, [r3, #0]
}
 800b310:	4618      	mov	r0, r3
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	20000014 	.word	0x20000014

0800b320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b324:	f7ff fff0 	bl	800b308 <HAL_RCC_GetHCLKFreq>
 800b328:	4602      	mov	r2, r0
 800b32a:	4b05      	ldr	r3, [pc, #20]	; (800b340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	0a9b      	lsrs	r3, r3, #10
 800b330:	f003 0307 	and.w	r3, r3, #7
 800b334:	4903      	ldr	r1, [pc, #12]	; (800b344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b336:	5ccb      	ldrb	r3, [r1, r3]
 800b338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	40023800 	.word	0x40023800
 800b344:	08017980 	.word	0x08017980

0800b348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b34c:	f7ff ffdc 	bl	800b308 <HAL_RCC_GetHCLKFreq>
 800b350:	4602      	mov	r2, r0
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	0b5b      	lsrs	r3, r3, #13
 800b358:	f003 0307 	and.w	r3, r3, #7
 800b35c:	4903      	ldr	r1, [pc, #12]	; (800b36c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b35e:	5ccb      	ldrb	r3, [r1, r3]
 800b360:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b364:	4618      	mov	r0, r3
 800b366:	bd80      	pop	{r7, pc}
 800b368:	40023800 	.word	0x40023800
 800b36c:	08017980 	.word	0x08017980

0800b370 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	220f      	movs	r2, #15
 800b37e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b380:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <HAL_RCC_GetClockConfig+0x5c>)
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f003 0203 	and.w	r2, r3, #3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b38c:	4b0f      	ldr	r3, [pc, #60]	; (800b3cc <HAL_RCC_GetClockConfig+0x5c>)
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b398:	4b0c      	ldr	r3, [pc, #48]	; (800b3cc <HAL_RCC_GetClockConfig+0x5c>)
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b3a4:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <HAL_RCC_GetClockConfig+0x5c>)
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	08db      	lsrs	r3, r3, #3
 800b3aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b3b2:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <HAL_RCC_GetClockConfig+0x60>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 0207 	and.w	r2, r3, #7
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	601a      	str	r2, [r3, #0]
}
 800b3be:	bf00      	nop
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	40023800 	.word	0x40023800
 800b3d0:	40023c00 	.word	0x40023c00

0800b3d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d105      	bne.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d035      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b3fc:	4b67      	ldr	r3, [pc, #412]	; (800b59c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b402:	f7f9 ff91 	bl	8005328 <HAL_GetTick>
 800b406:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b408:	e008      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b40a:	f7f9 ff8d 	bl	8005328 <HAL_GetTick>
 800b40e:	4602      	mov	r2, r0
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	2b02      	cmp	r3, #2
 800b416:	d901      	bls.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b418:	2303      	movs	r3, #3
 800b41a:	e0ba      	b.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b41c:	4b60      	ldr	r3, [pc, #384]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1f0      	bne.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	019a      	lsls	r2, r3, #6
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	071b      	lsls	r3, r3, #28
 800b434:	495a      	ldr	r1, [pc, #360]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b436:	4313      	orrs	r3, r2
 800b438:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b43c:	4b57      	ldr	r3, [pc, #348]	; (800b59c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b43e:	2201      	movs	r2, #1
 800b440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b442:	f7f9 ff71 	bl	8005328 <HAL_GetTick>
 800b446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b448:	e008      	b.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b44a:	f7f9 ff6d 	bl	8005328 <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	2b02      	cmp	r3, #2
 800b456:	d901      	bls.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	e09a      	b.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b45c:	4b50      	ldr	r3, [pc, #320]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0f0      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 0302 	and.w	r3, r3, #2
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 8083 	beq.w	800b57c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
 800b47a:	4b49      	ldr	r3, [pc, #292]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47e:	4a48      	ldr	r2, [pc, #288]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b484:	6413      	str	r3, [r2, #64]	; 0x40
 800b486:	4b46      	ldr	r3, [pc, #280]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b492:	4b44      	ldr	r3, [pc, #272]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a43      	ldr	r2, [pc, #268]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b49c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b49e:	f7f9 ff43 	bl	8005328 <HAL_GetTick>
 800b4a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b4a4:	e008      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b4a6:	f7f9 ff3f 	bl	8005328 <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d901      	bls.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e06c      	b.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b4b8:	4b3a      	ldr	r3, [pc, #232]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0f0      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b4c4:	4b36      	ldr	r3, [pc, #216]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d02f      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d028      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b4e2:	4b2f      	ldr	r3, [pc, #188]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b4ec:	4b2e      	ldr	r3, [pc, #184]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b4f2:	4b2d      	ldr	r3, [pc, #180]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b4f8:	4a29      	ldr	r2, [pc, #164]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b4fe:	4b28      	ldr	r3, [pc, #160]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b01      	cmp	r3, #1
 800b508:	d114      	bne.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b50a:	f7f9 ff0d 	bl	8005328 <HAL_GetTick>
 800b50e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b510:	e00a      	b.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b512:	f7f9 ff09 	bl	8005328 <HAL_GetTick>
 800b516:	4602      	mov	r2, r0
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b520:	4293      	cmp	r3, r2
 800b522:	d901      	bls.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e034      	b.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b528:	4b1d      	ldr	r3, [pc, #116]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b52a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52c:	f003 0302 	and.w	r3, r3, #2
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0ee      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b53c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b540:	d10d      	bne.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b542:	4b17      	ldr	r3, [pc, #92]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b556:	4912      	ldr	r1, [pc, #72]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b558:	4313      	orrs	r3, r2
 800b55a:	608b      	str	r3, [r1, #8]
 800b55c:	e005      	b.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b55e:	4b10      	ldr	r3, [pc, #64]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	4a0f      	ldr	r2, [pc, #60]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b564:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b568:	6093      	str	r3, [r2, #8]
 800b56a:	4b0d      	ldr	r3, [pc, #52]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b56c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b576:	490a      	ldr	r1, [pc, #40]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b578:	4313      	orrs	r3, r2
 800b57a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 0308 	and.w	r3, r3, #8
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	7c1a      	ldrb	r2, [r3, #16]
 800b58c:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b58e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	42470068 	.word	0x42470068
 800b5a0:	40023800 	.word	0x40023800
 800b5a4:	40007000 	.word	0x40007000
 800b5a8:	42470e40 	.word	0x42470e40
 800b5ac:	424711e0 	.word	0x424711e0

0800b5b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e066      	b.n	800b694 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	7f5b      	ldrb	r3, [r3, #29]
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d105      	bne.n	800b5dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7f9 fb46 	bl	8004c68 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2202      	movs	r2, #2
 800b5e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	22ca      	movs	r2, #202	; 0xca
 800b5e8:	625a      	str	r2, [r3, #36]	; 0x24
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2253      	movs	r2, #83	; 0x53
 800b5f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fb6f 	bl	800bcd6 <RTC_EnterInitMode>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d12c      	bne.n	800b65c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	6812      	ldr	r2, [r2, #0]
 800b60c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b614:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	6899      	ldr	r1, [r3, #8]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	431a      	orrs	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	431a      	orrs	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	68d2      	ldr	r2, [r2, #12]
 800b63c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6919      	ldr	r1, [r3, #16]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	041a      	lsls	r2, r3, #16
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	430a      	orrs	r2, r1
 800b650:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fb76 	bl	800bd44 <RTC_ExitInitMode>
 800b658:	4603      	mov	r3, r0
 800b65a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d113      	bne.n	800b68a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b670:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	699a      	ldr	r2, [r3, #24]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	430a      	orrs	r2, r1
 800b682:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	22ff      	movs	r2, #255	; 0xff
 800b690:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800b692:	7bfb      	ldrb	r3, [r7, #15]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b69c:	b590      	push	{r4, r7, lr}
 800b69e:	b087      	sub	sp, #28
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	7f1b      	ldrb	r3, [r3, #28]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d101      	bne.n	800b6b8 <HAL_RTC_SetTime+0x1c>
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	e087      	b.n	800b7c8 <HAL_RTC_SetTime+0x12c>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d126      	bne.n	800b718 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d102      	bne.n	800b6de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 fb53 	bl	800bd8e <RTC_ByteToBcd2>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fb4c 	bl	800bd8e <RTC_ByteToBcd2>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b6fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	789b      	ldrb	r3, [r3, #2]
 800b700:	4618      	mov	r0, r3
 800b702:	f000 fb44 	bl	800bd8e <RTC_ByteToBcd2>
 800b706:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b708:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	78db      	ldrb	r3, [r3, #3]
 800b710:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b712:	4313      	orrs	r3, r2
 800b714:	617b      	str	r3, [r7, #20]
 800b716:	e018      	b.n	800b74a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b722:	2b00      	cmp	r3, #0
 800b724:	d102      	bne.n	800b72c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2200      	movs	r2, #0
 800b72a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	785b      	ldrb	r3, [r3, #1]
 800b736:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b738:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b73e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	78db      	ldrb	r3, [r3, #3]
 800b744:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b746:	4313      	orrs	r3, r2
 800b748:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	22ca      	movs	r2, #202	; 0xca
 800b750:	625a      	str	r2, [r3, #36]	; 0x24
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2253      	movs	r2, #83	; 0x53
 800b758:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 fabb 	bl	800bcd6 <RTC_EnterInitMode>
 800b760:	4603      	mov	r3, r0
 800b762:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b764:	7cfb      	ldrb	r3, [r7, #19]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d120      	bne.n	800b7ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b774:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b778:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b788:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6899      	ldr	r1, [r3, #8]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	68da      	ldr	r2, [r3, #12]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	431a      	orrs	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f000 face 	bl	800bd44 <RTC_ExitInitMode>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b7ac:	7cfb      	ldrb	r3, [r7, #19]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d102      	bne.n	800b7b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	22ff      	movs	r2, #255	; 0xff
 800b7be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	771a      	strb	r2, [r3, #28]

  return status;
 800b7c6:	7cfb      	ldrb	r3, [r7, #19]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	371c      	adds	r7, #28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd90      	pop	{r4, r7, pc}

0800b7d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b802:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b806:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	0c1b      	lsrs	r3, r3, #16
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b812:	b2da      	uxtb	r2, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	0a1b      	lsrs	r3, r3, #8
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b822:	b2da      	uxtb	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b830:	b2da      	uxtb	r2, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	0d9b      	lsrs	r3, r3, #22
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	b2da      	uxtb	r2, r3
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d11a      	bne.n	800b882 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	4618      	mov	r0, r3
 800b852:	f000 fab9 	bl	800bdc8 <RTC_Bcd2ToByte>
 800b856:	4603      	mov	r3, r0
 800b858:	461a      	mov	r2, r3
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	785b      	ldrb	r3, [r3, #1]
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fab0 	bl	800bdc8 <RTC_Bcd2ToByte>
 800b868:	4603      	mov	r3, r0
 800b86a:	461a      	mov	r2, r3
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	789b      	ldrb	r3, [r3, #2]
 800b874:	4618      	mov	r0, r3
 800b876:	f000 faa7 	bl	800bdc8 <RTC_Bcd2ToByte>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3718      	adds	r7, #24
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b88c:	b590      	push	{r4, r7, lr}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b898:	2300      	movs	r3, #0
 800b89a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	7f1b      	ldrb	r3, [r3, #28]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d101      	bne.n	800b8a8 <HAL_RTC_SetDate+0x1c>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	e071      	b.n	800b98c <HAL_RTC_SetDate+0x100>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10e      	bne.n	800b8d8 <HAL_RTC_SetDate+0x4c>
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	785b      	ldrb	r3, [r3, #1]
 800b8be:	f003 0310 	and.w	r3, r3, #16
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d008      	beq.n	800b8d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	785b      	ldrb	r3, [r3, #1]
 800b8ca:	f023 0310 	bic.w	r3, r3, #16
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	330a      	adds	r3, #10
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d11c      	bne.n	800b918 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	78db      	ldrb	r3, [r3, #3]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 fa53 	bl	800bd8e <RTC_ByteToBcd2>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	785b      	ldrb	r3, [r3, #1]
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f000 fa4c 	bl	800bd8e <RTC_ByteToBcd2>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b8fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	789b      	ldrb	r3, [r3, #2]
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fa44 	bl	800bd8e <RTC_ByteToBcd2>
 800b906:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b908:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b912:	4313      	orrs	r3, r2
 800b914:	617b      	str	r3, [r7, #20]
 800b916:	e00e      	b.n	800b936 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	78db      	ldrb	r3, [r3, #3]
 800b91c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	785b      	ldrb	r3, [r3, #1]
 800b922:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b924:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b92a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b932:	4313      	orrs	r3, r2
 800b934:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	22ca      	movs	r2, #202	; 0xca
 800b93c:	625a      	str	r2, [r3, #36]	; 0x24
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2253      	movs	r2, #83	; 0x53
 800b944:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 f9c5 	bl	800bcd6 <RTC_EnterInitMode>
 800b94c:	4603      	mov	r3, r0
 800b94e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b950:	7cfb      	ldrb	r3, [r7, #19]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10c      	bne.n	800b970 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b960:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b964:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 f9ec 	bl	800bd44 <RTC_ExitInitMode>
 800b96c:	4603      	mov	r3, r0
 800b96e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b970:	7cfb      	ldrb	r3, [r7, #19]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2201      	movs	r2, #1
 800b97a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	22ff      	movs	r2, #255	; 0xff
 800b982:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	771a      	strb	r2, [r3, #28]

  return status;
 800b98a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	371c      	adds	r7, #28
 800b990:	46bd      	mov	sp, r7
 800b992:	bd90      	pop	{r4, r7, pc}

0800b994 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b9ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b9b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	0c1b      	lsrs	r3, r3, #16
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	0a1b      	lsrs	r3, r3, #8
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	f003 031f 	and.w	r3, r3, #31
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	0b5b      	lsrs	r3, r3, #13
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d11a      	bne.n	800ba28 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	78db      	ldrb	r3, [r3, #3]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 f9e6 	bl	800bdc8 <RTC_Bcd2ToByte>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	461a      	mov	r2, r3
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	785b      	ldrb	r3, [r3, #1]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 f9dd 	bl	800bdc8 <RTC_Bcd2ToByte>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	461a      	mov	r2, r3
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	789b      	ldrb	r3, [r3, #2]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 f9d4 	bl	800bdc8 <RTC_Bcd2ToByte>
 800ba20:	4603      	mov	r3, r0
 800ba22:	461a      	mov	r2, r3
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ba32:	b590      	push	{r4, r7, lr}
 800ba34:	b089      	sub	sp, #36	; 0x24
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	7f1b      	ldrb	r3, [r3, #28]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <HAL_RTC_SetAlarm+0x24>
 800ba52:	2302      	movs	r3, #2
 800ba54:	e113      	b.n	800bc7e <HAL_RTC_SetAlarm+0x24c>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d137      	bne.n	800bad8 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d102      	bne.n	800ba7c <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 f984 	bl	800bd8e <RTC_ByteToBcd2>
 800ba86:	4603      	mov	r3, r0
 800ba88:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	785b      	ldrb	r3, [r3, #1]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 f97d 	bl	800bd8e <RTC_ByteToBcd2>
 800ba94:	4603      	mov	r3, r0
 800ba96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ba98:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	789b      	ldrb	r3, [r3, #2]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 f975 	bl	800bd8e <RTC_ByteToBcd2>
 800baa4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800baa6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	78db      	ldrb	r3, [r3, #3]
 800baae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bab0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800baba:	4618      	mov	r0, r3
 800babc:	f000 f967 	bl	800bd8e <RTC_ByteToBcd2>
 800bac0:	4603      	mov	r3, r0
 800bac2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800bac4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bacc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bad2:	4313      	orrs	r3, r2
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	e023      	b.n	800bb20 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d102      	bne.n	800baec <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2200      	movs	r2, #0
 800baea:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	785b      	ldrb	r3, [r3, #1]
 800baf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800baf8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bafe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	78db      	ldrb	r3, [r3, #3]
 800bb04:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bb06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800bb10:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bb16:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	22ca      	movs	r2, #202	; 0xca
 800bb32:	625a      	str	r2, [r3, #36]	; 0x24
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2253      	movs	r2, #83	; 0x53
 800bb3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb44:	d148      	bne.n	800bbd8 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb54:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689a      	ldr	r2, [r3, #8]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bb64:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800bb76:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bb78:	f7f9 fbd6 	bl	8005328 <HAL_GetTick>
 800bb7c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bb7e:	e013      	b.n	800bba8 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bb80:	f7f9 fbd2 	bl	8005328 <HAL_GetTick>
 800bb84:	4602      	mov	r2, r0
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb8e:	d90b      	bls.n	800bba8 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	22ff      	movs	r2, #255	; 0xff
 800bb96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2203      	movs	r2, #3
 800bb9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e06a      	b.n	800bc7e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d0e4      	beq.n	800bb80 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	69fa      	ldr	r2, [r7, #28]
 800bbbc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbd4:	609a      	str	r2, [r3, #8]
 800bbd6:	e047      	b.n	800bc68 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689a      	ldr	r2, [r3, #8]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bbe6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689a      	ldr	r2, [r3, #8]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbf6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f462 7220 	orn	r2, r2, #640	; 0x280
 800bc08:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc0a:	f7f9 fb8d 	bl	8005328 <HAL_GetTick>
 800bc0e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bc10:	e013      	b.n	800bc3a <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bc12:	f7f9 fb89 	bl	8005328 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc20:	d90b      	bls.n	800bc3a <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	22ff      	movs	r2, #255	; 0xff
 800bc28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2203      	movs	r2, #3
 800bc2e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bc36:	2303      	movs	r3, #3
 800bc38:	e021      	b.n	800bc7e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f003 0302 	and.w	r3, r3, #2
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d0e4      	beq.n	800bc12 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	69fa      	ldr	r2, [r7, #28]
 800bc4e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	689a      	ldr	r2, [r3, #8]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc66:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	22ff      	movs	r2, #255	; 0xff
 800bc6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2201      	movs	r2, #1
 800bc74:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3724      	adds	r7, #36	; 0x24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd90      	pop	{r4, r7, pc}

0800bc86 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68da      	ldr	r2, [r3, #12]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bca0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bca2:	f7f9 fb41 	bl	8005328 <HAL_GetTick>
 800bca6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bca8:	e009      	b.n	800bcbe <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bcaa:	f7f9 fb3d 	bl	8005328 <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcb8:	d901      	bls.n	800bcbe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e007      	b.n	800bcce <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f003 0320 	and.w	r3, r3, #32
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d0ee      	beq.n	800bcaa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d122      	bne.n	800bd3a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68da      	ldr	r2, [r3, #12]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd02:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bd04:	f7f9 fb10 	bl	8005328 <HAL_GetTick>
 800bd08:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bd0a:	e00c      	b.n	800bd26 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd0c:	f7f9 fb0c 	bl	8005328 <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd1a:	d904      	bls.n	800bd26 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2204      	movs	r2, #4
 800bd20:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d102      	bne.n	800bd3a <RTC_EnterInitMode+0x64>
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d1e8      	bne.n	800bd0c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd5e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10a      	bne.n	800bd84 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7ff ff89 	bl	800bc86 <HAL_RTC_WaitForSynchro>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d004      	beq.n	800bd84 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2204      	movs	r2, #4
 800bd7e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	4603      	mov	r3, r0
 800bd96:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800bd9c:	e005      	b.n	800bdaa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	3301      	adds	r3, #1
 800bda2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	3b0a      	subs	r3, #10
 800bda8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	d8f6      	bhi.n	800bd9e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	79fb      	ldrb	r3, [r7, #7]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	b2db      	uxtb	r3, r3
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800bdd6:	79fb      	ldrb	r3, [r7, #7]
 800bdd8:	091b      	lsrs	r3, r3, #4
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	461a      	mov	r2, r3
 800bdde:	0092      	lsls	r2, r2, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	7bfb      	ldrb	r3, [r7, #15]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	b2db      	uxtb	r3, r3
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800be0c:	2300      	movs	r3, #0
 800be0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3350      	adds	r3, #80	; 0x50
 800be16:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	4413      	add	r3, r2
 800be20:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	601a      	str	r2, [r3, #0]
}
 800be28:	bf00      	nop
 800be2a:	371c      	adds	r7, #28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3350      	adds	r3, #80	; 0x50
 800be48:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	4413      	add	r3, r2
 800be52:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	e041      	b.n	800befa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d106      	bne.n	800be90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7f8 ff18 	bl	8004cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2202      	movs	r2, #2
 800be94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3304      	adds	r3, #4
 800bea0:	4619      	mov	r1, r3
 800bea2:	4610      	mov	r0, r2
 800bea4:	f000 fd6a 	bl	800c97c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d001      	beq.n	800bf1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e044      	b.n	800bfa6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2202      	movs	r2, #2
 800bf20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68da      	ldr	r2, [r3, #12]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f042 0201 	orr.w	r2, r2, #1
 800bf32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a1e      	ldr	r2, [pc, #120]	; (800bfb4 <HAL_TIM_Base_Start_IT+0xb0>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d018      	beq.n	800bf70 <HAL_TIM_Base_Start_IT+0x6c>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf46:	d013      	beq.n	800bf70 <HAL_TIM_Base_Start_IT+0x6c>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a1a      	ldr	r2, [pc, #104]	; (800bfb8 <HAL_TIM_Base_Start_IT+0xb4>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d00e      	beq.n	800bf70 <HAL_TIM_Base_Start_IT+0x6c>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a19      	ldr	r2, [pc, #100]	; (800bfbc <HAL_TIM_Base_Start_IT+0xb8>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d009      	beq.n	800bf70 <HAL_TIM_Base_Start_IT+0x6c>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a17      	ldr	r2, [pc, #92]	; (800bfc0 <HAL_TIM_Base_Start_IT+0xbc>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d004      	beq.n	800bf70 <HAL_TIM_Base_Start_IT+0x6c>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a16      	ldr	r2, [pc, #88]	; (800bfc4 <HAL_TIM_Base_Start_IT+0xc0>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d111      	bne.n	800bf94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f003 0307 	and.w	r3, r3, #7
 800bf7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b06      	cmp	r3, #6
 800bf80:	d010      	beq.n	800bfa4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f042 0201 	orr.w	r2, r2, #1
 800bf90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf92:	e007      	b.n	800bfa4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f042 0201 	orr.w	r2, r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3714      	adds	r7, #20
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	40010000 	.word	0x40010000
 800bfb8:	40000400 	.word	0x40000400
 800bfbc:	40000800 	.word	0x40000800
 800bfc0:	40000c00 	.word	0x40000c00
 800bfc4:	40014000 	.word	0x40014000

0800bfc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68da      	ldr	r2, [r3, #12]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f022 0201 	bic.w	r2, r2, #1
 800bfde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6a1a      	ldr	r2, [r3, #32]
 800bfe6:	f241 1311 	movw	r3, #4369	; 0x1111
 800bfea:	4013      	ands	r3, r2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10f      	bne.n	800c010 <HAL_TIM_Base_Stop_IT+0x48>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6a1a      	ldr	r2, [r3, #32]
 800bff6:	f240 4344 	movw	r3, #1092	; 0x444
 800bffa:	4013      	ands	r3, r2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d107      	bne.n	800c010 <HAL_TIM_Base_Stop_IT+0x48>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f022 0201 	bic.w	r2, r2, #1
 800c00e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e041      	b.n	800c0bc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	d106      	bne.n	800c052 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f839 	bl	800c0c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2202      	movs	r2, #2
 800c056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	4619      	mov	r1, r3
 800c064:	4610      	mov	r0, r2
 800c066:	f000 fc89 	bl	800c97c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d104      	bne.n	800c0f6 <HAL_TIM_IC_Start_IT+0x1e>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	e013      	b.n	800c11e <HAL_TIM_IC_Start_IT+0x46>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	d104      	bne.n	800c106 <HAL_TIM_IC_Start_IT+0x2e>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c102:	b2db      	uxtb	r3, r3
 800c104:	e00b      	b.n	800c11e <HAL_TIM_IC_Start_IT+0x46>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	2b08      	cmp	r3, #8
 800c10a:	d104      	bne.n	800c116 <HAL_TIM_IC_Start_IT+0x3e>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c112:	b2db      	uxtb	r3, r3
 800c114:	e003      	b.n	800c11e <HAL_TIM_IC_Start_IT+0x46>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d104      	bne.n	800c130 <HAL_TIM_IC_Start_IT+0x58>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	e013      	b.n	800c158 <HAL_TIM_IC_Start_IT+0x80>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b04      	cmp	r3, #4
 800c134:	d104      	bne.n	800c140 <HAL_TIM_IC_Start_IT+0x68>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	e00b      	b.n	800c158 <HAL_TIM_IC_Start_IT+0x80>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2b08      	cmp	r3, #8
 800c144:	d104      	bne.n	800c150 <HAL_TIM_IC_Start_IT+0x78>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	e003      	b.n	800c158 <HAL_TIM_IC_Start_IT+0x80>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c156:	b2db      	uxtb	r3, r3
 800c158:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d102      	bne.n	800c166 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c160:	7b7b      	ldrb	r3, [r7, #13]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d001      	beq.n	800c16a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e0c2      	b.n	800c2f0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d104      	bne.n	800c17a <HAL_TIM_IC_Start_IT+0xa2>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2202      	movs	r2, #2
 800c174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c178:	e013      	b.n	800c1a2 <HAL_TIM_IC_Start_IT+0xca>
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	d104      	bne.n	800c18a <HAL_TIM_IC_Start_IT+0xb2>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c188:	e00b      	b.n	800c1a2 <HAL_TIM_IC_Start_IT+0xca>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b08      	cmp	r3, #8
 800c18e:	d104      	bne.n	800c19a <HAL_TIM_IC_Start_IT+0xc2>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2202      	movs	r2, #2
 800c194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c198:	e003      	b.n	800c1a2 <HAL_TIM_IC_Start_IT+0xca>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2202      	movs	r2, #2
 800c19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d104      	bne.n	800c1b2 <HAL_TIM_IC_Start_IT+0xda>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1b0:	e013      	b.n	800c1da <HAL_TIM_IC_Start_IT+0x102>
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b04      	cmp	r3, #4
 800c1b6:	d104      	bne.n	800c1c2 <HAL_TIM_IC_Start_IT+0xea>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1c0:	e00b      	b.n	800c1da <HAL_TIM_IC_Start_IT+0x102>
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b08      	cmp	r3, #8
 800c1c6:	d104      	bne.n	800c1d2 <HAL_TIM_IC_Start_IT+0xfa>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1d0:	e003      	b.n	800c1da <HAL_TIM_IC_Start_IT+0x102>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b0c      	cmp	r3, #12
 800c1de:	d841      	bhi.n	800c264 <HAL_TIM_IC_Start_IT+0x18c>
 800c1e0:	a201      	add	r2, pc, #4	; (adr r2, 800c1e8 <HAL_TIM_IC_Start_IT+0x110>)
 800c1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e6:	bf00      	nop
 800c1e8:	0800c21d 	.word	0x0800c21d
 800c1ec:	0800c265 	.word	0x0800c265
 800c1f0:	0800c265 	.word	0x0800c265
 800c1f4:	0800c265 	.word	0x0800c265
 800c1f8:	0800c22f 	.word	0x0800c22f
 800c1fc:	0800c265 	.word	0x0800c265
 800c200:	0800c265 	.word	0x0800c265
 800c204:	0800c265 	.word	0x0800c265
 800c208:	0800c241 	.word	0x0800c241
 800c20c:	0800c265 	.word	0x0800c265
 800c210:	0800c265 	.word	0x0800c265
 800c214:	0800c265 	.word	0x0800c265
 800c218:	0800c253 	.word	0x0800c253
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68da      	ldr	r2, [r3, #12]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f042 0202 	orr.w	r2, r2, #2
 800c22a:	60da      	str	r2, [r3, #12]
      break;
 800c22c:	e01d      	b.n	800c26a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	68da      	ldr	r2, [r3, #12]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f042 0204 	orr.w	r2, r2, #4
 800c23c:	60da      	str	r2, [r3, #12]
      break;
 800c23e:	e014      	b.n	800c26a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68da      	ldr	r2, [r3, #12]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f042 0208 	orr.w	r2, r2, #8
 800c24e:	60da      	str	r2, [r3, #12]
      break;
 800c250:	e00b      	b.n	800c26a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68da      	ldr	r2, [r3, #12]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f042 0210 	orr.w	r2, r2, #16
 800c260:	60da      	str	r2, [r3, #12]
      break;
 800c262:	e002      	b.n	800c26a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	73fb      	strb	r3, [r7, #15]
      break;
 800c268:	bf00      	nop
  }

  if (status == HAL_OK)
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d13e      	bne.n	800c2ee <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2201      	movs	r2, #1
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 fdb7 	bl	800cdec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a1d      	ldr	r2, [pc, #116]	; (800c2f8 <HAL_TIM_IC_Start_IT+0x220>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d018      	beq.n	800c2ba <HAL_TIM_IC_Start_IT+0x1e2>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c290:	d013      	beq.n	800c2ba <HAL_TIM_IC_Start_IT+0x1e2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a19      	ldr	r2, [pc, #100]	; (800c2fc <HAL_TIM_IC_Start_IT+0x224>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d00e      	beq.n	800c2ba <HAL_TIM_IC_Start_IT+0x1e2>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a17      	ldr	r2, [pc, #92]	; (800c300 <HAL_TIM_IC_Start_IT+0x228>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d009      	beq.n	800c2ba <HAL_TIM_IC_Start_IT+0x1e2>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a16      	ldr	r2, [pc, #88]	; (800c304 <HAL_TIM_IC_Start_IT+0x22c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d004      	beq.n	800c2ba <HAL_TIM_IC_Start_IT+0x1e2>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a14      	ldr	r2, [pc, #80]	; (800c308 <HAL_TIM_IC_Start_IT+0x230>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d111      	bne.n	800c2de <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f003 0307 	and.w	r3, r3, #7
 800c2c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	2b06      	cmp	r3, #6
 800c2ca:	d010      	beq.n	800c2ee <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f042 0201 	orr.w	r2, r2, #1
 800c2da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2dc:	e007      	b.n	800c2ee <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f042 0201 	orr.w	r2, r2, #1
 800c2ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	40010000 	.word	0x40010000
 800c2fc:	40000400 	.word	0x40000400
 800c300:	40000800 	.word	0x40000800
 800c304:	40000c00 	.word	0x40000c00
 800c308:	40014000 	.word	0x40014000

0800c30c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2b0c      	cmp	r3, #12
 800c31e:	d841      	bhi.n	800c3a4 <HAL_TIM_IC_Stop_IT+0x98>
 800c320:	a201      	add	r2, pc, #4	; (adr r2, 800c328 <HAL_TIM_IC_Stop_IT+0x1c>)
 800c322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c326:	bf00      	nop
 800c328:	0800c35d 	.word	0x0800c35d
 800c32c:	0800c3a5 	.word	0x0800c3a5
 800c330:	0800c3a5 	.word	0x0800c3a5
 800c334:	0800c3a5 	.word	0x0800c3a5
 800c338:	0800c36f 	.word	0x0800c36f
 800c33c:	0800c3a5 	.word	0x0800c3a5
 800c340:	0800c3a5 	.word	0x0800c3a5
 800c344:	0800c3a5 	.word	0x0800c3a5
 800c348:	0800c381 	.word	0x0800c381
 800c34c:	0800c3a5 	.word	0x0800c3a5
 800c350:	0800c3a5 	.word	0x0800c3a5
 800c354:	0800c3a5 	.word	0x0800c3a5
 800c358:	0800c393 	.word	0x0800c393
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68da      	ldr	r2, [r3, #12]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f022 0202 	bic.w	r2, r2, #2
 800c36a:	60da      	str	r2, [r3, #12]
      break;
 800c36c:	e01d      	b.n	800c3aa <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68da      	ldr	r2, [r3, #12]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f022 0204 	bic.w	r2, r2, #4
 800c37c:	60da      	str	r2, [r3, #12]
      break;
 800c37e:	e014      	b.n	800c3aa <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68da      	ldr	r2, [r3, #12]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f022 0208 	bic.w	r2, r2, #8
 800c38e:	60da      	str	r2, [r3, #12]
      break;
 800c390:	e00b      	b.n	800c3aa <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68da      	ldr	r2, [r3, #12]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0210 	bic.w	r2, r2, #16
 800c3a0:	60da      	str	r2, [r3, #12]
      break;
 800c3a2:	e002      	b.n	800c3aa <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c3a8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d156      	bne.n	800c45e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	6839      	ldr	r1, [r7, #0]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 fd17 	bl	800cdec <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	6a1a      	ldr	r2, [r3, #32]
 800c3c4:	f241 1311 	movw	r3, #4369	; 0x1111
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10f      	bne.n	800c3ee <HAL_TIM_IC_Stop_IT+0xe2>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	6a1a      	ldr	r2, [r3, #32]
 800c3d4:	f240 4344 	movw	r3, #1092	; 0x444
 800c3d8:	4013      	ands	r3, r2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d107      	bne.n	800c3ee <HAL_TIM_IC_Stop_IT+0xe2>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f022 0201 	bic.w	r2, r2, #1
 800c3ec:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d104      	bne.n	800c3fe <HAL_TIM_IC_Stop_IT+0xf2>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3fc:	e013      	b.n	800c426 <HAL_TIM_IC_Stop_IT+0x11a>
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b04      	cmp	r3, #4
 800c402:	d104      	bne.n	800c40e <HAL_TIM_IC_Stop_IT+0x102>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c40c:	e00b      	b.n	800c426 <HAL_TIM_IC_Stop_IT+0x11a>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b08      	cmp	r3, #8
 800c412:	d104      	bne.n	800c41e <HAL_TIM_IC_Stop_IT+0x112>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c41c:	e003      	b.n	800c426 <HAL_TIM_IC_Stop_IT+0x11a>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d104      	bne.n	800c436 <HAL_TIM_IC_Stop_IT+0x12a>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c434:	e013      	b.n	800c45e <HAL_TIM_IC_Stop_IT+0x152>
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b04      	cmp	r3, #4
 800c43a:	d104      	bne.n	800c446 <HAL_TIM_IC_Stop_IT+0x13a>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c444:	e00b      	b.n	800c45e <HAL_TIM_IC_Stop_IT+0x152>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b08      	cmp	r3, #8
 800c44a:	d104      	bne.n	800c456 <HAL_TIM_IC_Stop_IT+0x14a>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c454:	e003      	b.n	800c45e <HAL_TIM_IC_Stop_IT+0x152>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d122      	bne.n	800c4c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	f003 0302 	and.w	r3, r3, #2
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d11b      	bne.n	800c4c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f06f 0202 	mvn.w	r2, #2
 800c494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2201      	movs	r2, #1
 800c49a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	f003 0303 	and.w	r3, r3, #3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7f6 fffe 	bl	80034ac <HAL_TIM_IC_CaptureCallback>
 800c4b0:	e005      	b.n	800c4be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fa43 	bl	800c93e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fa4a 	bl	800c952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	f003 0304 	and.w	r3, r3, #4
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	d122      	bne.n	800c518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	f003 0304 	and.w	r3, r3, #4
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	d11b      	bne.n	800c518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f06f 0204 	mvn.w	r2, #4
 800c4e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d003      	beq.n	800c506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7f6 ffd4 	bl	80034ac <HAL_TIM_IC_CaptureCallback>
 800c504:	e005      	b.n	800c512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa19 	bl	800c93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fa20 	bl	800c952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	f003 0308 	and.w	r3, r3, #8
 800c522:	2b08      	cmp	r3, #8
 800c524:	d122      	bne.n	800c56c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	f003 0308 	and.w	r3, r3, #8
 800c530:	2b08      	cmp	r3, #8
 800c532:	d11b      	bne.n	800c56c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f06f 0208 	mvn.w	r2, #8
 800c53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2204      	movs	r2, #4
 800c542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	f003 0303 	and.w	r3, r3, #3
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7f6 ffaa 	bl	80034ac <HAL_TIM_IC_CaptureCallback>
 800c558:	e005      	b.n	800c566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f9ef 	bl	800c93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f9f6 	bl	800c952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	f003 0310 	and.w	r3, r3, #16
 800c576:	2b10      	cmp	r3, #16
 800c578:	d122      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	f003 0310 	and.w	r3, r3, #16
 800c584:	2b10      	cmp	r3, #16
 800c586:	d11b      	bne.n	800c5c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f06f 0210 	mvn.w	r2, #16
 800c590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2208      	movs	r2, #8
 800c596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7f6 ff80 	bl	80034ac <HAL_TIM_IC_CaptureCallback>
 800c5ac:	e005      	b.n	800c5ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f9c5 	bl	800c93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f9cc 	bl	800c952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d10e      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	f003 0301 	and.w	r3, r3, #1
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d107      	bne.n	800c5ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f06f 0201 	mvn.w	r2, #1
 800c5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7f8 f950 	bl	800488c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f6:	2b80      	cmp	r3, #128	; 0x80
 800c5f8:	d10e      	bne.n	800c618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c604:	2b80      	cmp	r3, #128	; 0x80
 800c606:	d107      	bne.n	800c618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fc88 	bl	800cf28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c622:	2b40      	cmp	r3, #64	; 0x40
 800c624:	d10e      	bne.n	800c644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c630:	2b40      	cmp	r3, #64	; 0x40
 800c632:	d107      	bne.n	800c644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c63c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f991 	bl	800c966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	f003 0320 	and.w	r3, r3, #32
 800c64e:	2b20      	cmp	r3, #32
 800c650:	d10e      	bne.n	800c670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	f003 0320 	and.w	r3, r3, #32
 800c65c:	2b20      	cmp	r3, #32
 800c65e:	d107      	bne.n	800c670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f06f 0220 	mvn.w	r2, #32
 800c668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fc52 	bl	800cf14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d101      	bne.n	800c696 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c692:	2302      	movs	r3, #2
 800c694:	e088      	b.n	800c7a8 <HAL_TIM_IC_ConfigChannel+0x130>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d11b      	bne.n	800c6dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6818      	ldr	r0, [r3, #0]
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	6819      	ldr	r1, [r3, #0]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	f000 f9e2 	bl	800ca7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	699a      	ldr	r2, [r3, #24]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f022 020c 	bic.w	r2, r2, #12
 800c6c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6999      	ldr	r1, [r3, #24]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	689a      	ldr	r2, [r3, #8]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	430a      	orrs	r2, r1
 800c6d8:	619a      	str	r2, [r3, #24]
 800c6da:	e060      	b.n	800c79e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b04      	cmp	r3, #4
 800c6e0:	d11c      	bne.n	800c71c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	6819      	ldr	r1, [r3, #0]
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	f000 fa5a 	bl	800cbaa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	699a      	ldr	r2, [r3, #24]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c704:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6999      	ldr	r1, [r3, #24]
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	021a      	lsls	r2, r3, #8
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	619a      	str	r2, [r3, #24]
 800c71a:	e040      	b.n	800c79e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b08      	cmp	r3, #8
 800c720:	d11b      	bne.n	800c75a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6818      	ldr	r0, [r3, #0]
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	6819      	ldr	r1, [r3, #0]
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	f000 faa7 	bl	800cc84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	69da      	ldr	r2, [r3, #28]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f022 020c 	bic.w	r2, r2, #12
 800c744:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	69d9      	ldr	r1, [r3, #28]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	689a      	ldr	r2, [r3, #8]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	430a      	orrs	r2, r1
 800c756:	61da      	str	r2, [r3, #28]
 800c758:	e021      	b.n	800c79e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b0c      	cmp	r3, #12
 800c75e:	d11c      	bne.n	800c79a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6818      	ldr	r0, [r3, #0]
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	6819      	ldr	r1, [r3, #0]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	f000 fac4 	bl	800ccfc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	69da      	ldr	r2, [r3, #28]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c782:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	69d9      	ldr	r1, [r3, #28]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	021a      	lsls	r2, r3, #8
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	430a      	orrs	r2, r1
 800c796:	61da      	str	r2, [r3, #28]
 800c798:	e001      	b.n	800c79e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d101      	bne.n	800c7cc <HAL_TIM_ConfigClockSource+0x1c>
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	e0b4      	b.n	800c936 <HAL_TIM_ConfigClockSource+0x186>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c7ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c804:	d03e      	beq.n	800c884 <HAL_TIM_ConfigClockSource+0xd4>
 800c806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c80a:	f200 8087 	bhi.w	800c91c <HAL_TIM_ConfigClockSource+0x16c>
 800c80e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c812:	f000 8086 	beq.w	800c922 <HAL_TIM_ConfigClockSource+0x172>
 800c816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c81a:	d87f      	bhi.n	800c91c <HAL_TIM_ConfigClockSource+0x16c>
 800c81c:	2b70      	cmp	r3, #112	; 0x70
 800c81e:	d01a      	beq.n	800c856 <HAL_TIM_ConfigClockSource+0xa6>
 800c820:	2b70      	cmp	r3, #112	; 0x70
 800c822:	d87b      	bhi.n	800c91c <HAL_TIM_ConfigClockSource+0x16c>
 800c824:	2b60      	cmp	r3, #96	; 0x60
 800c826:	d050      	beq.n	800c8ca <HAL_TIM_ConfigClockSource+0x11a>
 800c828:	2b60      	cmp	r3, #96	; 0x60
 800c82a:	d877      	bhi.n	800c91c <HAL_TIM_ConfigClockSource+0x16c>
 800c82c:	2b50      	cmp	r3, #80	; 0x50
 800c82e:	d03c      	beq.n	800c8aa <HAL_TIM_ConfigClockSource+0xfa>
 800c830:	2b50      	cmp	r3, #80	; 0x50
 800c832:	d873      	bhi.n	800c91c <HAL_TIM_ConfigClockSource+0x16c>
 800c834:	2b40      	cmp	r3, #64	; 0x40
 800c836:	d058      	beq.n	800c8ea <HAL_TIM_ConfigClockSource+0x13a>
 800c838:	2b40      	cmp	r3, #64	; 0x40
 800c83a:	d86f      	bhi.n	800c91c <HAL_TIM_ConfigClockSource+0x16c>
 800c83c:	2b30      	cmp	r3, #48	; 0x30
 800c83e:	d064      	beq.n	800c90a <HAL_TIM_ConfigClockSource+0x15a>
 800c840:	2b30      	cmp	r3, #48	; 0x30
 800c842:	d86b      	bhi.n	800c91c <HAL_TIM_ConfigClockSource+0x16c>
 800c844:	2b20      	cmp	r3, #32
 800c846:	d060      	beq.n	800c90a <HAL_TIM_ConfigClockSource+0x15a>
 800c848:	2b20      	cmp	r3, #32
 800c84a:	d867      	bhi.n	800c91c <HAL_TIM_ConfigClockSource+0x16c>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d05c      	beq.n	800c90a <HAL_TIM_ConfigClockSource+0x15a>
 800c850:	2b10      	cmp	r3, #16
 800c852:	d05a      	beq.n	800c90a <HAL_TIM_ConfigClockSource+0x15a>
 800c854:	e062      	b.n	800c91c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6818      	ldr	r0, [r3, #0]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	6899      	ldr	r1, [r3, #8]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f000 faa1 	bl	800cdac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	609a      	str	r2, [r3, #8]
      break;
 800c882:	e04f      	b.n	800c924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6818      	ldr	r0, [r3, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	6899      	ldr	r1, [r3, #8]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	f000 fa8a 	bl	800cdac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	689a      	ldr	r2, [r3, #8]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8a6:	609a      	str	r2, [r3, #8]
      break;
 800c8a8:	e03c      	b.n	800c924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6818      	ldr	r0, [r3, #0]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	6859      	ldr	r1, [r3, #4]
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	f000 f948 	bl	800cb4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2150      	movs	r1, #80	; 0x50
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 fa57 	bl	800cd76 <TIM_ITRx_SetConfig>
      break;
 800c8c8:	e02c      	b.n	800c924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6818      	ldr	r0, [r3, #0]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	6859      	ldr	r1, [r3, #4]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f000 f9a4 	bl	800cc24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2160      	movs	r1, #96	; 0x60
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fa47 	bl	800cd76 <TIM_ITRx_SetConfig>
      break;
 800c8e8:	e01c      	b.n	800c924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6818      	ldr	r0, [r3, #0]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	6859      	ldr	r1, [r3, #4]
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f000 f928 	bl	800cb4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2140      	movs	r1, #64	; 0x40
 800c902:	4618      	mov	r0, r3
 800c904:	f000 fa37 	bl	800cd76 <TIM_ITRx_SetConfig>
      break;
 800c908:	e00c      	b.n	800c924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4619      	mov	r1, r3
 800c914:	4610      	mov	r0, r2
 800c916:	f000 fa2e 	bl	800cd76 <TIM_ITRx_SetConfig>
      break;
 800c91a:	e003      	b.n	800c924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	73fb      	strb	r3, [r7, #15]
      break;
 800c920:	e000      	b.n	800c924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c934:	7bfb      	ldrb	r3, [r7, #15]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c93e:	b480      	push	{r7}
 800c940:	b083      	sub	sp, #12
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c946:	bf00      	nop
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c95a:	bf00      	nop
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c966:	b480      	push	{r7}
 800c968:	b083      	sub	sp, #12
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c96e:	bf00      	nop
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
	...

0800c97c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4a34      	ldr	r2, [pc, #208]	; (800ca60 <TIM_Base_SetConfig+0xe4>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d00f      	beq.n	800c9b4 <TIM_Base_SetConfig+0x38>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c99a:	d00b      	beq.n	800c9b4 <TIM_Base_SetConfig+0x38>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a31      	ldr	r2, [pc, #196]	; (800ca64 <TIM_Base_SetConfig+0xe8>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d007      	beq.n	800c9b4 <TIM_Base_SetConfig+0x38>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a30      	ldr	r2, [pc, #192]	; (800ca68 <TIM_Base_SetConfig+0xec>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d003      	beq.n	800c9b4 <TIM_Base_SetConfig+0x38>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a2f      	ldr	r2, [pc, #188]	; (800ca6c <TIM_Base_SetConfig+0xf0>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d108      	bne.n	800c9c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a25      	ldr	r2, [pc, #148]	; (800ca60 <TIM_Base_SetConfig+0xe4>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d01b      	beq.n	800ca06 <TIM_Base_SetConfig+0x8a>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9d4:	d017      	beq.n	800ca06 <TIM_Base_SetConfig+0x8a>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a22      	ldr	r2, [pc, #136]	; (800ca64 <TIM_Base_SetConfig+0xe8>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d013      	beq.n	800ca06 <TIM_Base_SetConfig+0x8a>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a21      	ldr	r2, [pc, #132]	; (800ca68 <TIM_Base_SetConfig+0xec>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d00f      	beq.n	800ca06 <TIM_Base_SetConfig+0x8a>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a20      	ldr	r2, [pc, #128]	; (800ca6c <TIM_Base_SetConfig+0xf0>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d00b      	beq.n	800ca06 <TIM_Base_SetConfig+0x8a>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a1f      	ldr	r2, [pc, #124]	; (800ca70 <TIM_Base_SetConfig+0xf4>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d007      	beq.n	800ca06 <TIM_Base_SetConfig+0x8a>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a1e      	ldr	r2, [pc, #120]	; (800ca74 <TIM_Base_SetConfig+0xf8>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d003      	beq.n	800ca06 <TIM_Base_SetConfig+0x8a>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a1d      	ldr	r2, [pc, #116]	; (800ca78 <TIM_Base_SetConfig+0xfc>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d108      	bne.n	800ca18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	695b      	ldr	r3, [r3, #20]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	689a      	ldr	r2, [r3, #8]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a08      	ldr	r2, [pc, #32]	; (800ca60 <TIM_Base_SetConfig+0xe4>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d103      	bne.n	800ca4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	691a      	ldr	r2, [r3, #16]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	615a      	str	r2, [r3, #20]
}
 800ca52:	bf00      	nop
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	40010000 	.word	0x40010000
 800ca64:	40000400 	.word	0x40000400
 800ca68:	40000800 	.word	0x40000800
 800ca6c:	40000c00 	.word	0x40000c00
 800ca70:	40014000 	.word	0x40014000
 800ca74:	40014400 	.word	0x40014400
 800ca78:	40014800 	.word	0x40014800

0800ca7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b087      	sub	sp, #28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	f023 0201 	bic.w	r2, r3, #1
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6a1b      	ldr	r3, [r3, #32]
 800caa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4a24      	ldr	r2, [pc, #144]	; (800cb38 <TIM_TI1_SetConfig+0xbc>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d013      	beq.n	800cad2 <TIM_TI1_SetConfig+0x56>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cab0:	d00f      	beq.n	800cad2 <TIM_TI1_SetConfig+0x56>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	4a21      	ldr	r2, [pc, #132]	; (800cb3c <TIM_TI1_SetConfig+0xc0>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d00b      	beq.n	800cad2 <TIM_TI1_SetConfig+0x56>
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	4a20      	ldr	r2, [pc, #128]	; (800cb40 <TIM_TI1_SetConfig+0xc4>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d007      	beq.n	800cad2 <TIM_TI1_SetConfig+0x56>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	4a1f      	ldr	r2, [pc, #124]	; (800cb44 <TIM_TI1_SetConfig+0xc8>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d003      	beq.n	800cad2 <TIM_TI1_SetConfig+0x56>
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	4a1e      	ldr	r2, [pc, #120]	; (800cb48 <TIM_TI1_SetConfig+0xcc>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d101      	bne.n	800cad6 <TIM_TI1_SetConfig+0x5a>
 800cad2:	2301      	movs	r3, #1
 800cad4:	e000      	b.n	800cad8 <TIM_TI1_SetConfig+0x5c>
 800cad6:	2300      	movs	r3, #0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d008      	beq.n	800caee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	f023 0303 	bic.w	r3, r3, #3
 800cae2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4313      	orrs	r3, r2
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	e003      	b.n	800caf6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	f043 0301 	orr.w	r3, r3, #1
 800caf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cafc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	011b      	lsls	r3, r3, #4
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	697a      	ldr	r2, [r7, #20]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f023 030a 	bic.w	r3, r3, #10
 800cb10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	f003 030a 	and.w	r3, r3, #10
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	621a      	str	r2, [r3, #32]
}
 800cb2a:	bf00      	nop
 800cb2c:	371c      	adds	r7, #28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	40010000 	.word	0x40010000
 800cb3c:	40000400 	.word	0x40000400
 800cb40:	40000800 	.word	0x40000800
 800cb44:	40000c00 	.word	0x40000c00
 800cb48:	40014000 	.word	0x40014000

0800cb4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b087      	sub	sp, #28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6a1b      	ldr	r3, [r3, #32]
 800cb62:	f023 0201 	bic.w	r2, r3, #1
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	011b      	lsls	r3, r3, #4
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f023 030a 	bic.w	r3, r3, #10
 800cb88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb8a:	697a      	ldr	r2, [r7, #20]
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	621a      	str	r2, [r3, #32]
}
 800cb9e:	bf00      	nop
 800cba0:	371c      	adds	r7, #28
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b087      	sub	sp, #28
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	60f8      	str	r0, [r7, #12]
 800cbb2:	60b9      	str	r1, [r7, #8]
 800cbb4:	607a      	str	r2, [r7, #4]
 800cbb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	f023 0210 	bic.w	r2, r3, #16
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	021b      	lsls	r3, r3, #8
 800cbdc:	697a      	ldr	r2, [r7, #20]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cbe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	031b      	lsls	r3, r3, #12
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cbfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	011b      	lsls	r3, r3, #4
 800cc02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cc06:	693a      	ldr	r2, [r7, #16]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	693a      	ldr	r2, [r7, #16]
 800cc16:	621a      	str	r2, [r3, #32]
}
 800cc18:	bf00      	nop
 800cc1a:	371c      	adds	r7, #28
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b087      	sub	sp, #28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	f023 0210 	bic.w	r2, r3, #16
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	031b      	lsls	r3, r3, #12
 800cc54:	697a      	ldr	r2, [r7, #20]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	011b      	lsls	r3, r3, #4
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	693a      	ldr	r2, [r7, #16]
 800cc76:	621a      	str	r2, [r3, #32]
}
 800cc78:	bf00      	nop
 800cc7a:	371c      	adds	r7, #28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b087      	sub	sp, #28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6a1b      	ldr	r3, [r3, #32]
 800cc96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	69db      	ldr	r3, [r3, #28]
 800cca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f023 0303 	bic.w	r3, r3, #3
 800ccb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ccc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	011b      	lsls	r3, r3, #4
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ccd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	021b      	lsls	r3, r3, #8
 800ccda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	621a      	str	r2, [r3, #32]
}
 800ccf0:	bf00      	nop
 800ccf2:	371c      	adds	r7, #28
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6a1b      	ldr	r3, [r3, #32]
 800cd20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	021b      	lsls	r3, r3, #8
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	031b      	lsls	r3, r3, #12
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	697a      	ldr	r2, [r7, #20]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800cd4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	031b      	lsls	r3, r3, #12
 800cd54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	697a      	ldr	r2, [r7, #20]
 800cd62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	621a      	str	r2, [r3, #32]
}
 800cd6a:	bf00      	nop
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd76:	b480      	push	{r7}
 800cd78:	b085      	sub	sp, #20
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	f043 0307 	orr.w	r3, r3, #7
 800cd98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	609a      	str	r2, [r3, #8]
}
 800cda0:	bf00      	nop
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b087      	sub	sp, #28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	021a      	lsls	r2, r3, #8
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	431a      	orrs	r2, r3
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	697a      	ldr	r2, [r7, #20]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	697a      	ldr	r2, [r7, #20]
 800cdde:	609a      	str	r2, [r3, #8]
}
 800cde0:	bf00      	nop
 800cde2:	371c      	adds	r7, #28
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	f003 031f 	and.w	r3, r3, #31
 800cdfe:	2201      	movs	r2, #1
 800ce00:	fa02 f303 	lsl.w	r3, r2, r3
 800ce04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6a1a      	ldr	r2, [r3, #32]
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	43db      	mvns	r3, r3
 800ce0e:	401a      	ands	r2, r3
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6a1a      	ldr	r2, [r3, #32]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	f003 031f 	and.w	r3, r3, #31
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	fa01 f303 	lsl.w	r3, r1, r3
 800ce24:	431a      	orrs	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	621a      	str	r2, [r3, #32]
}
 800ce2a:	bf00      	nop
 800ce2c:	371c      	adds	r7, #28
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
	...

0800ce38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d101      	bne.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e050      	b.n	800cef2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a1c      	ldr	r2, [pc, #112]	; (800cf00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d018      	beq.n	800cec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce9c:	d013      	beq.n	800cec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a18      	ldr	r2, [pc, #96]	; (800cf04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d00e      	beq.n	800cec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a16      	ldr	r2, [pc, #88]	; (800cf08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d009      	beq.n	800cec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a15      	ldr	r2, [pc, #84]	; (800cf0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d004      	beq.n	800cec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a13      	ldr	r2, [pc, #76]	; (800cf10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d10c      	bne.n	800cee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3714      	adds	r7, #20
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	40010000 	.word	0x40010000
 800cf04:	40000400 	.word	0x40000400
 800cf08:	40000800 	.word	0x40000800
 800cf0c:	40000c00 	.word	0x40000c00
 800cf10:	40014000 	.word	0x40014000

0800cf14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf1c:	bf00      	nop
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d101      	bne.n	800cf4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e03f      	b.n	800cfce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d106      	bne.n	800cf68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7f7 ff36 	bl	8004dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2224      	movs	r2, #36	; 0x24
 800cf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68da      	ldr	r2, [r3, #12]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fc7b 	bl	800d87c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	691a      	ldr	r2, [r3, #16]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	695a      	ldr	r2, [r3, #20]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cfa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	68da      	ldr	r2, [r3, #12]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cfb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2220      	movs	r2, #32
 800cfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2220      	movs	r2, #32
 800cfc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
	...

0800cfd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b0ba      	sub	sp, #232	; 0xe8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	695b      	ldr	r3, [r3, #20]
 800cffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800cffe:	2300      	movs	r3, #0
 800d000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d004:	2300      	movs	r3, #0
 800d006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d00e:	f003 030f 	and.w	r3, r3, #15
 800d012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10f      	bne.n	800d03e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d022:	f003 0320 	and.w	r3, r3, #32
 800d026:	2b00      	cmp	r3, #0
 800d028:	d009      	beq.n	800d03e <HAL_UART_IRQHandler+0x66>
 800d02a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d02e:	f003 0320 	and.w	r3, r3, #32
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fb65 	bl	800d706 <UART_Receive_IT>
      return;
 800d03c:	e256      	b.n	800d4ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d03e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 80de 	beq.w	800d204 <HAL_UART_IRQHandler+0x22c>
 800d048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d04c:	f003 0301 	and.w	r3, r3, #1
 800d050:	2b00      	cmp	r3, #0
 800d052:	d106      	bne.n	800d062 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d058:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f000 80d1 	beq.w	800d204 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d066:	f003 0301 	and.w	r3, r3, #1
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00b      	beq.n	800d086 <HAL_UART_IRQHandler+0xae>
 800d06e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d076:	2b00      	cmp	r3, #0
 800d078:	d005      	beq.n	800d086 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07e:	f043 0201 	orr.w	r2, r3, #1
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d08a:	f003 0304 	and.w	r3, r3, #4
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00b      	beq.n	800d0aa <HAL_UART_IRQHandler+0xd2>
 800d092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d005      	beq.n	800d0aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a2:	f043 0202 	orr.w	r2, r3, #2
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0ae:	f003 0302 	and.w	r3, r3, #2
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00b      	beq.n	800d0ce <HAL_UART_IRQHandler+0xf6>
 800d0b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0ba:	f003 0301 	and.w	r3, r3, #1
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d005      	beq.n	800d0ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	f043 0204 	orr.w	r2, r3, #4
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0d2:	f003 0308 	and.w	r3, r3, #8
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d011      	beq.n	800d0fe <HAL_UART_IRQHandler+0x126>
 800d0da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0de:	f003 0320 	and.w	r3, r3, #32
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d105      	bne.n	800d0f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d005      	beq.n	800d0fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f6:	f043 0208 	orr.w	r2, r3, #8
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d102:	2b00      	cmp	r3, #0
 800d104:	f000 81ed 	beq.w	800d4e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d10c:	f003 0320 	and.w	r3, r3, #32
 800d110:	2b00      	cmp	r3, #0
 800d112:	d008      	beq.n	800d126 <HAL_UART_IRQHandler+0x14e>
 800d114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d118:	f003 0320 	and.w	r3, r3, #32
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 faf0 	bl	800d706 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d130:	2b40      	cmp	r3, #64	; 0x40
 800d132:	bf0c      	ite	eq
 800d134:	2301      	moveq	r3, #1
 800d136:	2300      	movne	r3, #0
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d142:	f003 0308 	and.w	r3, r3, #8
 800d146:	2b00      	cmp	r3, #0
 800d148:	d103      	bne.n	800d152 <HAL_UART_IRQHandler+0x17a>
 800d14a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d04f      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 f9f8 	bl	800d548 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d162:	2b40      	cmp	r3, #64	; 0x40
 800d164:	d141      	bne.n	800d1ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	3314      	adds	r3, #20
 800d16c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d174:	e853 3f00 	ldrex	r3, [r3]
 800d178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d17c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	3314      	adds	r3, #20
 800d18e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d19e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d1a2:	e841 2300 	strex	r3, r2, [r1]
 800d1a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d1aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1d9      	bne.n	800d166 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d013      	beq.n	800d1e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1be:	4a7d      	ldr	r2, [pc, #500]	; (800d3b4 <HAL_UART_IRQHandler+0x3dc>)
 800d1c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7f8 ff28 	bl	800601c <HAL_DMA_Abort_IT>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d016      	beq.n	800d200 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d1dc:	4610      	mov	r0, r2
 800d1de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1e0:	e00e      	b.n	800d200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 f99a 	bl	800d51c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1e8:	e00a      	b.n	800d200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f996 	bl	800d51c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1f0:	e006      	b.n	800d200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 f992 	bl	800d51c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d1fe:	e170      	b.n	800d4e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d200:	bf00      	nop
    return;
 800d202:	e16e      	b.n	800d4e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d208:	2b01      	cmp	r3, #1
 800d20a:	f040 814a 	bne.w	800d4a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d212:	f003 0310 	and.w	r3, r3, #16
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 8143 	beq.w	800d4a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d220:	f003 0310 	and.w	r3, r3, #16
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 813c 	beq.w	800d4a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d22a:	2300      	movs	r3, #0
 800d22c:	60bb      	str	r3, [r7, #8]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	60bb      	str	r3, [r7, #8]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	60bb      	str	r3, [r7, #8]
 800d23e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d24a:	2b40      	cmp	r3, #64	; 0x40
 800d24c:	f040 80b4 	bne.w	800d3b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d25c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d260:	2b00      	cmp	r3, #0
 800d262:	f000 8140 	beq.w	800d4e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d26a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d26e:	429a      	cmp	r2, r3
 800d270:	f080 8139 	bcs.w	800d4e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d27a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d280:	69db      	ldr	r3, [r3, #28]
 800d282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d286:	f000 8088 	beq.w	800d39a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	330c      	adds	r3, #12
 800d290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d298:	e853 3f00 	ldrex	r3, [r3]
 800d29c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d2a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	330c      	adds	r3, #12
 800d2b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d2b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d2ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d2c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d2c6:	e841 2300 	strex	r3, r2, [r1]
 800d2ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d2ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1d9      	bne.n	800d28a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3314      	adds	r3, #20
 800d2dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2e0:	e853 3f00 	ldrex	r3, [r3]
 800d2e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d2e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2e8:	f023 0301 	bic.w	r3, r3, #1
 800d2ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	3314      	adds	r3, #20
 800d2f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d2fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d306:	e841 2300 	strex	r3, r2, [r1]
 800d30a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d30c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1e1      	bne.n	800d2d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3314      	adds	r3, #20
 800d318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d31c:	e853 3f00 	ldrex	r3, [r3]
 800d320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3314      	adds	r3, #20
 800d332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d336:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d33c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e3      	bne.n	800d312 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2220      	movs	r2, #32
 800d34e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	330c      	adds	r3, #12
 800d35e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d362:	e853 3f00 	ldrex	r3, [r3]
 800d366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d36a:	f023 0310 	bic.w	r3, r3, #16
 800d36e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	330c      	adds	r3, #12
 800d378:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d37c:	65ba      	str	r2, [r7, #88]	; 0x58
 800d37e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d380:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d384:	e841 2300 	strex	r3, r2, [r1]
 800d388:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d1e3      	bne.n	800d358 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d394:	4618      	mov	r0, r3
 800d396:	f7f8 fdd1 	bl	8005f3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f8c0 	bl	800d530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d3b0:	e099      	b.n	800d4e6 <HAL_UART_IRQHandler+0x50e>
 800d3b2:	bf00      	nop
 800d3b4:	0800d60f 	.word	0x0800d60f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 808b 	beq.w	800d4ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d3d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 8086 	beq.w	800d4ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	330c      	adds	r3, #12
 800d3e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e8:	e853 3f00 	ldrex	r3, [r3]
 800d3ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	330c      	adds	r3, #12
 800d3fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d402:	647a      	str	r2, [r7, #68]	; 0x44
 800d404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d40a:	e841 2300 	strex	r3, r2, [r1]
 800d40e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1e3      	bne.n	800d3de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3314      	adds	r3, #20
 800d41c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	e853 3f00 	ldrex	r3, [r3]
 800d424:	623b      	str	r3, [r7, #32]
   return(result);
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	f023 0301 	bic.w	r3, r3, #1
 800d42c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3314      	adds	r3, #20
 800d436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d43a:	633a      	str	r2, [r7, #48]	; 0x30
 800d43c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d442:	e841 2300 	strex	r3, r2, [r1]
 800d446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e3      	bne.n	800d416 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2220      	movs	r2, #32
 800d452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	330c      	adds	r3, #12
 800d462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	e853 3f00 	ldrex	r3, [r3]
 800d46a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f023 0310 	bic.w	r3, r3, #16
 800d472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	330c      	adds	r3, #12
 800d47c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d480:	61fa      	str	r2, [r7, #28]
 800d482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d484:	69b9      	ldr	r1, [r7, #24]
 800d486:	69fa      	ldr	r2, [r7, #28]
 800d488:	e841 2300 	strex	r3, r2, [r1]
 800d48c:	617b      	str	r3, [r7, #20]
   return(result);
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1e3      	bne.n	800d45c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d498:	4619      	mov	r1, r3
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f848 	bl	800d530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d4a0:	e023      	b.n	800d4ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d009      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x4ea>
 800d4ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f8bb 	bl	800d636 <UART_Transmit_IT>
    return;
 800d4c0:	e014      	b.n	800d4ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00e      	beq.n	800d4ec <HAL_UART_IRQHandler+0x514>
 800d4ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d008      	beq.n	800d4ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f8fb 	bl	800d6d6 <UART_EndTransmit_IT>
    return;
 800d4e0:	e004      	b.n	800d4ec <HAL_UART_IRQHandler+0x514>
    return;
 800d4e2:	bf00      	nop
 800d4e4:	e002      	b.n	800d4ec <HAL_UART_IRQHandler+0x514>
      return;
 800d4e6:	bf00      	nop
 800d4e8:	e000      	b.n	800d4ec <HAL_UART_IRQHandler+0x514>
      return;
 800d4ea:	bf00      	nop
  }
}
 800d4ec:	37e8      	adds	r7, #232	; 0xe8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop

0800d4f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	460b      	mov	r3, r1
 800d53a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d548:	b480      	push	{r7}
 800d54a:	b095      	sub	sp, #84	; 0x54
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	330c      	adds	r3, #12
 800d556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55a:	e853 3f00 	ldrex	r3, [r3]
 800d55e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d566:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	330c      	adds	r3, #12
 800d56e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d570:	643a      	str	r2, [r7, #64]	; 0x40
 800d572:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d578:	e841 2300 	strex	r3, r2, [r1]
 800d57c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1e5      	bne.n	800d550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	3314      	adds	r3, #20
 800d58a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	e853 3f00 	ldrex	r3, [r3]
 800d592:	61fb      	str	r3, [r7, #28]
   return(result);
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	f023 0301 	bic.w	r3, r3, #1
 800d59a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	3314      	adds	r3, #20
 800d5a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5ac:	e841 2300 	strex	r3, r2, [r1]
 800d5b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1e5      	bne.n	800d584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d119      	bne.n	800d5f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	330c      	adds	r3, #12
 800d5c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	e853 3f00 	ldrex	r3, [r3]
 800d5ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	f023 0310 	bic.w	r3, r3, #16
 800d5d6:	647b      	str	r3, [r7, #68]	; 0x44
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	330c      	adds	r3, #12
 800d5de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5e0:	61ba      	str	r2, [r7, #24]
 800d5e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e4:	6979      	ldr	r1, [r7, #20]
 800d5e6:	69ba      	ldr	r2, [r7, #24]
 800d5e8:	e841 2300 	strex	r3, r2, [r1]
 800d5ec:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1e5      	bne.n	800d5c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2220      	movs	r2, #32
 800d5f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d602:	bf00      	nop
 800d604:	3754      	adds	r7, #84	; 0x54
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2200      	movs	r2, #0
 800d626:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f7ff ff77 	bl	800d51c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d62e:	bf00      	nop
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d636:	b480      	push	{r7}
 800d638:	b085      	sub	sp, #20
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b21      	cmp	r3, #33	; 0x21
 800d648:	d13e      	bne.n	800d6c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d652:	d114      	bne.n	800d67e <UART_Transmit_IT+0x48>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d110      	bne.n	800d67e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a1b      	ldr	r3, [r3, #32]
 800d660:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	881b      	ldrh	r3, [r3, #0]
 800d666:	461a      	mov	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d670:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	1c9a      	adds	r2, r3, #2
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	621a      	str	r2, [r3, #32]
 800d67c:	e008      	b.n	800d690 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	1c59      	adds	r1, r3, #1
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	6211      	str	r1, [r2, #32]
 800d688:	781a      	ldrb	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d694:	b29b      	uxth	r3, r3
 800d696:	3b01      	subs	r3, #1
 800d698:	b29b      	uxth	r3, r3
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	4619      	mov	r1, r3
 800d69e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10f      	bne.n	800d6c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68da      	ldr	r2, [r3, #12]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e000      	b.n	800d6ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d6c8:	2302      	movs	r3, #2
  }
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b082      	sub	sp, #8
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68da      	ldr	r2, [r3, #12]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2220      	movs	r2, #32
 800d6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff fefc 	bl	800d4f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b08c      	sub	sp, #48	; 0x30
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d714:	b2db      	uxtb	r3, r3
 800d716:	2b22      	cmp	r3, #34	; 0x22
 800d718:	f040 80ab 	bne.w	800d872 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d724:	d117      	bne.n	800d756 <UART_Receive_IT+0x50>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d113      	bne.n	800d756 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d736:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d744:	b29a      	uxth	r2, r3
 800d746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d748:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d74e:	1c9a      	adds	r2, r3, #2
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	629a      	str	r2, [r3, #40]	; 0x28
 800d754:	e026      	b.n	800d7a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d75c:	2300      	movs	r3, #0
 800d75e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d768:	d007      	beq.n	800d77a <UART_Receive_IT+0x74>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10a      	bne.n	800d788 <UART_Receive_IT+0x82>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d106      	bne.n	800d788 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	b2da      	uxtb	r2, r3
 800d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d784:	701a      	strb	r2, [r3, #0]
 800d786:	e008      	b.n	800d79a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d794:	b2da      	uxtb	r2, r3
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d15a      	bne.n	800d86e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	68da      	ldr	r2, [r3, #12]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f022 0220 	bic.w	r2, r2, #32
 800d7c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68da      	ldr	r2, [r3, #12]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	695a      	ldr	r2, [r3, #20]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f022 0201 	bic.w	r2, r2, #1
 800d7e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2220      	movs	r2, #32
 800d7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d135      	bne.n	800d864 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	330c      	adds	r3, #12
 800d804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	e853 3f00 	ldrex	r3, [r3]
 800d80c:	613b      	str	r3, [r7, #16]
   return(result);
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	f023 0310 	bic.w	r3, r3, #16
 800d814:	627b      	str	r3, [r7, #36]	; 0x24
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	330c      	adds	r3, #12
 800d81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d81e:	623a      	str	r2, [r7, #32]
 800d820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	69f9      	ldr	r1, [r7, #28]
 800d824:	6a3a      	ldr	r2, [r7, #32]
 800d826:	e841 2300 	strex	r3, r2, [r1]
 800d82a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1e5      	bne.n	800d7fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 0310 	and.w	r3, r3, #16
 800d83c:	2b10      	cmp	r3, #16
 800d83e:	d10a      	bne.n	800d856 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d840:	2300      	movs	r3, #0
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	60fb      	str	r3, [r7, #12]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7ff fe67 	bl	800d530 <HAL_UARTEx_RxEventCallback>
 800d862:	e002      	b.n	800d86a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff fe4f 	bl	800d508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	e002      	b.n	800d874 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d86e:	2300      	movs	r3, #0
 800d870:	e000      	b.n	800d874 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d872:	2302      	movs	r3, #2
  }
}
 800d874:	4618      	mov	r0, r3
 800d876:	3730      	adds	r7, #48	; 0x30
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d87c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d880:	b0c0      	sub	sp, #256	; 0x100
 800d882:	af00      	add	r7, sp, #0
 800d884:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d898:	68d9      	ldr	r1, [r3, #12]
 800d89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	ea40 0301 	orr.w	r3, r0, r1
 800d8a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8aa:	689a      	ldr	r2, [r3, #8]
 800d8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	431a      	orrs	r2, r3
 800d8b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8b8:	695b      	ldr	r3, [r3, #20]
 800d8ba:	431a      	orrs	r2, r3
 800d8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8c0:	69db      	ldr	r3, [r3, #28]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d8d4:	f021 010c 	bic.w	r1, r1, #12
 800d8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d8e2:	430b      	orrs	r3, r1
 800d8e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8f6:	6999      	ldr	r1, [r3, #24]
 800d8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	ea40 0301 	orr.w	r3, r0, r1
 800d902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b8f      	ldr	r3, [pc, #572]	; (800db48 <UART_SetConfig+0x2cc>)
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d005      	beq.n	800d91c <UART_SetConfig+0xa0>
 800d910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4b8d      	ldr	r3, [pc, #564]	; (800db4c <UART_SetConfig+0x2d0>)
 800d918:	429a      	cmp	r2, r3
 800d91a:	d104      	bne.n	800d926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d91c:	f7fd fd14 	bl	800b348 <HAL_RCC_GetPCLK2Freq>
 800d920:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d924:	e003      	b.n	800d92e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d926:	f7fd fcfb 	bl	800b320 <HAL_RCC_GetPCLK1Freq>
 800d92a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d92e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d932:	69db      	ldr	r3, [r3, #28]
 800d934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d938:	f040 810c 	bne.w	800db54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d93c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d940:	2200      	movs	r2, #0
 800d942:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d946:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d94a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d94e:	4622      	mov	r2, r4
 800d950:	462b      	mov	r3, r5
 800d952:	1891      	adds	r1, r2, r2
 800d954:	65b9      	str	r1, [r7, #88]	; 0x58
 800d956:	415b      	adcs	r3, r3
 800d958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d95a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d95e:	4621      	mov	r1, r4
 800d960:	eb12 0801 	adds.w	r8, r2, r1
 800d964:	4629      	mov	r1, r5
 800d966:	eb43 0901 	adc.w	r9, r3, r1
 800d96a:	f04f 0200 	mov.w	r2, #0
 800d96e:	f04f 0300 	mov.w	r3, #0
 800d972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d97a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d97e:	4690      	mov	r8, r2
 800d980:	4699      	mov	r9, r3
 800d982:	4623      	mov	r3, r4
 800d984:	eb18 0303 	adds.w	r3, r8, r3
 800d988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d98c:	462b      	mov	r3, r5
 800d98e:	eb49 0303 	adc.w	r3, r9, r3
 800d992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d9a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d9a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	18db      	adds	r3, r3, r3
 800d9ae:	653b      	str	r3, [r7, #80]	; 0x50
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	eb42 0303 	adc.w	r3, r2, r3
 800d9b6:	657b      	str	r3, [r7, #84]	; 0x54
 800d9b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d9bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d9c0:	f7f3 f99a 	bl	8000cf8 <__aeabi_uldivmod>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4b61      	ldr	r3, [pc, #388]	; (800db50 <UART_SetConfig+0x2d4>)
 800d9ca:	fba3 2302 	umull	r2, r3, r3, r2
 800d9ce:	095b      	lsrs	r3, r3, #5
 800d9d0:	011c      	lsls	r4, r3, #4
 800d9d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d9dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d9e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d9e4:	4642      	mov	r2, r8
 800d9e6:	464b      	mov	r3, r9
 800d9e8:	1891      	adds	r1, r2, r2
 800d9ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800d9ec:	415b      	adcs	r3, r3
 800d9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d9f4:	4641      	mov	r1, r8
 800d9f6:	eb12 0a01 	adds.w	sl, r2, r1
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	eb43 0b01 	adc.w	fp, r3, r1
 800da00:	f04f 0200 	mov.w	r2, #0
 800da04:	f04f 0300 	mov.w	r3, #0
 800da08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800da0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800da10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da14:	4692      	mov	sl, r2
 800da16:	469b      	mov	fp, r3
 800da18:	4643      	mov	r3, r8
 800da1a:	eb1a 0303 	adds.w	r3, sl, r3
 800da1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da22:	464b      	mov	r3, r9
 800da24:	eb4b 0303 	adc.w	r3, fp, r3
 800da28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800da2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800da3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800da40:	460b      	mov	r3, r1
 800da42:	18db      	adds	r3, r3, r3
 800da44:	643b      	str	r3, [r7, #64]	; 0x40
 800da46:	4613      	mov	r3, r2
 800da48:	eb42 0303 	adc.w	r3, r2, r3
 800da4c:	647b      	str	r3, [r7, #68]	; 0x44
 800da4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800da52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800da56:	f7f3 f94f 	bl	8000cf8 <__aeabi_uldivmod>
 800da5a:	4602      	mov	r2, r0
 800da5c:	460b      	mov	r3, r1
 800da5e:	4611      	mov	r1, r2
 800da60:	4b3b      	ldr	r3, [pc, #236]	; (800db50 <UART_SetConfig+0x2d4>)
 800da62:	fba3 2301 	umull	r2, r3, r3, r1
 800da66:	095b      	lsrs	r3, r3, #5
 800da68:	2264      	movs	r2, #100	; 0x64
 800da6a:	fb02 f303 	mul.w	r3, r2, r3
 800da6e:	1acb      	subs	r3, r1, r3
 800da70:	00db      	lsls	r3, r3, #3
 800da72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800da76:	4b36      	ldr	r3, [pc, #216]	; (800db50 <UART_SetConfig+0x2d4>)
 800da78:	fba3 2302 	umull	r2, r3, r3, r2
 800da7c:	095b      	lsrs	r3, r3, #5
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800da84:	441c      	add	r4, r3
 800da86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da8a:	2200      	movs	r2, #0
 800da8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800da94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800da98:	4642      	mov	r2, r8
 800da9a:	464b      	mov	r3, r9
 800da9c:	1891      	adds	r1, r2, r2
 800da9e:	63b9      	str	r1, [r7, #56]	; 0x38
 800daa0:	415b      	adcs	r3, r3
 800daa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800daa8:	4641      	mov	r1, r8
 800daaa:	1851      	adds	r1, r2, r1
 800daac:	6339      	str	r1, [r7, #48]	; 0x30
 800daae:	4649      	mov	r1, r9
 800dab0:	414b      	adcs	r3, r1
 800dab2:	637b      	str	r3, [r7, #52]	; 0x34
 800dab4:	f04f 0200 	mov.w	r2, #0
 800dab8:	f04f 0300 	mov.w	r3, #0
 800dabc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800dac0:	4659      	mov	r1, fp
 800dac2:	00cb      	lsls	r3, r1, #3
 800dac4:	4651      	mov	r1, sl
 800dac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800daca:	4651      	mov	r1, sl
 800dacc:	00ca      	lsls	r2, r1, #3
 800dace:	4610      	mov	r0, r2
 800dad0:	4619      	mov	r1, r3
 800dad2:	4603      	mov	r3, r0
 800dad4:	4642      	mov	r2, r8
 800dad6:	189b      	adds	r3, r3, r2
 800dad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dadc:	464b      	mov	r3, r9
 800dade:	460a      	mov	r2, r1
 800dae0:	eb42 0303 	adc.w	r3, r2, r3
 800dae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800daf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800daf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dafc:	460b      	mov	r3, r1
 800dafe:	18db      	adds	r3, r3, r3
 800db00:	62bb      	str	r3, [r7, #40]	; 0x28
 800db02:	4613      	mov	r3, r2
 800db04:	eb42 0303 	adc.w	r3, r2, r3
 800db08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800db0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800db12:	f7f3 f8f1 	bl	8000cf8 <__aeabi_uldivmod>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4b0d      	ldr	r3, [pc, #52]	; (800db50 <UART_SetConfig+0x2d4>)
 800db1c:	fba3 1302 	umull	r1, r3, r3, r2
 800db20:	095b      	lsrs	r3, r3, #5
 800db22:	2164      	movs	r1, #100	; 0x64
 800db24:	fb01 f303 	mul.w	r3, r1, r3
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	3332      	adds	r3, #50	; 0x32
 800db2e:	4a08      	ldr	r2, [pc, #32]	; (800db50 <UART_SetConfig+0x2d4>)
 800db30:	fba2 2303 	umull	r2, r3, r2, r3
 800db34:	095b      	lsrs	r3, r3, #5
 800db36:	f003 0207 	and.w	r2, r3, #7
 800db3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4422      	add	r2, r4
 800db42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800db44:	e105      	b.n	800dd52 <UART_SetConfig+0x4d6>
 800db46:	bf00      	nop
 800db48:	40011000 	.word	0x40011000
 800db4c:	40011400 	.word	0x40011400
 800db50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800db54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db58:	2200      	movs	r2, #0
 800db5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800db5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800db62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800db66:	4642      	mov	r2, r8
 800db68:	464b      	mov	r3, r9
 800db6a:	1891      	adds	r1, r2, r2
 800db6c:	6239      	str	r1, [r7, #32]
 800db6e:	415b      	adcs	r3, r3
 800db70:	627b      	str	r3, [r7, #36]	; 0x24
 800db72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800db76:	4641      	mov	r1, r8
 800db78:	1854      	adds	r4, r2, r1
 800db7a:	4649      	mov	r1, r9
 800db7c:	eb43 0501 	adc.w	r5, r3, r1
 800db80:	f04f 0200 	mov.w	r2, #0
 800db84:	f04f 0300 	mov.w	r3, #0
 800db88:	00eb      	lsls	r3, r5, #3
 800db8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800db8e:	00e2      	lsls	r2, r4, #3
 800db90:	4614      	mov	r4, r2
 800db92:	461d      	mov	r5, r3
 800db94:	4643      	mov	r3, r8
 800db96:	18e3      	adds	r3, r4, r3
 800db98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800db9c:	464b      	mov	r3, r9
 800db9e:	eb45 0303 	adc.w	r3, r5, r3
 800dba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dbb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dbb6:	f04f 0200 	mov.w	r2, #0
 800dbba:	f04f 0300 	mov.w	r3, #0
 800dbbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	008b      	lsls	r3, r1, #2
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dbcc:	4621      	mov	r1, r4
 800dbce:	008a      	lsls	r2, r1, #2
 800dbd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800dbd4:	f7f3 f890 	bl	8000cf8 <__aeabi_uldivmod>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	460b      	mov	r3, r1
 800dbdc:	4b60      	ldr	r3, [pc, #384]	; (800dd60 <UART_SetConfig+0x4e4>)
 800dbde:	fba3 2302 	umull	r2, r3, r3, r2
 800dbe2:	095b      	lsrs	r3, r3, #5
 800dbe4:	011c      	lsls	r4, r3, #4
 800dbe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dbea:	2200      	movs	r2, #0
 800dbec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dbf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dbf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800dbf8:	4642      	mov	r2, r8
 800dbfa:	464b      	mov	r3, r9
 800dbfc:	1891      	adds	r1, r2, r2
 800dbfe:	61b9      	str	r1, [r7, #24]
 800dc00:	415b      	adcs	r3, r3
 800dc02:	61fb      	str	r3, [r7, #28]
 800dc04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dc08:	4641      	mov	r1, r8
 800dc0a:	1851      	adds	r1, r2, r1
 800dc0c:	6139      	str	r1, [r7, #16]
 800dc0e:	4649      	mov	r1, r9
 800dc10:	414b      	adcs	r3, r1
 800dc12:	617b      	str	r3, [r7, #20]
 800dc14:	f04f 0200 	mov.w	r2, #0
 800dc18:	f04f 0300 	mov.w	r3, #0
 800dc1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dc20:	4659      	mov	r1, fp
 800dc22:	00cb      	lsls	r3, r1, #3
 800dc24:	4651      	mov	r1, sl
 800dc26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc2a:	4651      	mov	r1, sl
 800dc2c:	00ca      	lsls	r2, r1, #3
 800dc2e:	4610      	mov	r0, r2
 800dc30:	4619      	mov	r1, r3
 800dc32:	4603      	mov	r3, r0
 800dc34:	4642      	mov	r2, r8
 800dc36:	189b      	adds	r3, r3, r2
 800dc38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dc3c:	464b      	mov	r3, r9
 800dc3e:	460a      	mov	r2, r1
 800dc40:	eb42 0303 	adc.w	r3, r2, r3
 800dc44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	67bb      	str	r3, [r7, #120]	; 0x78
 800dc52:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dc54:	f04f 0200 	mov.w	r2, #0
 800dc58:	f04f 0300 	mov.w	r3, #0
 800dc5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dc60:	4649      	mov	r1, r9
 800dc62:	008b      	lsls	r3, r1, #2
 800dc64:	4641      	mov	r1, r8
 800dc66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc6a:	4641      	mov	r1, r8
 800dc6c:	008a      	lsls	r2, r1, #2
 800dc6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dc72:	f7f3 f841 	bl	8000cf8 <__aeabi_uldivmod>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4b39      	ldr	r3, [pc, #228]	; (800dd60 <UART_SetConfig+0x4e4>)
 800dc7c:	fba3 1302 	umull	r1, r3, r3, r2
 800dc80:	095b      	lsrs	r3, r3, #5
 800dc82:	2164      	movs	r1, #100	; 0x64
 800dc84:	fb01 f303 	mul.w	r3, r1, r3
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	011b      	lsls	r3, r3, #4
 800dc8c:	3332      	adds	r3, #50	; 0x32
 800dc8e:	4a34      	ldr	r2, [pc, #208]	; (800dd60 <UART_SetConfig+0x4e4>)
 800dc90:	fba2 2303 	umull	r2, r3, r2, r3
 800dc94:	095b      	lsrs	r3, r3, #5
 800dc96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc9a:	441c      	add	r4, r3
 800dc9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dca0:	2200      	movs	r2, #0
 800dca2:	673b      	str	r3, [r7, #112]	; 0x70
 800dca4:	677a      	str	r2, [r7, #116]	; 0x74
 800dca6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800dcaa:	4642      	mov	r2, r8
 800dcac:	464b      	mov	r3, r9
 800dcae:	1891      	adds	r1, r2, r2
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	415b      	adcs	r3, r3
 800dcb4:	60fb      	str	r3, [r7, #12]
 800dcb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dcba:	4641      	mov	r1, r8
 800dcbc:	1851      	adds	r1, r2, r1
 800dcbe:	6039      	str	r1, [r7, #0]
 800dcc0:	4649      	mov	r1, r9
 800dcc2:	414b      	adcs	r3, r1
 800dcc4:	607b      	str	r3, [r7, #4]
 800dcc6:	f04f 0200 	mov.w	r2, #0
 800dcca:	f04f 0300 	mov.w	r3, #0
 800dcce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dcd2:	4659      	mov	r1, fp
 800dcd4:	00cb      	lsls	r3, r1, #3
 800dcd6:	4651      	mov	r1, sl
 800dcd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dcdc:	4651      	mov	r1, sl
 800dcde:	00ca      	lsls	r2, r1, #3
 800dce0:	4610      	mov	r0, r2
 800dce2:	4619      	mov	r1, r3
 800dce4:	4603      	mov	r3, r0
 800dce6:	4642      	mov	r2, r8
 800dce8:	189b      	adds	r3, r3, r2
 800dcea:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcec:	464b      	mov	r3, r9
 800dcee:	460a      	mov	r2, r1
 800dcf0:	eb42 0303 	adc.w	r3, r2, r3
 800dcf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	663b      	str	r3, [r7, #96]	; 0x60
 800dd00:	667a      	str	r2, [r7, #100]	; 0x64
 800dd02:	f04f 0200 	mov.w	r2, #0
 800dd06:	f04f 0300 	mov.w	r3, #0
 800dd0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800dd0e:	4649      	mov	r1, r9
 800dd10:	008b      	lsls	r3, r1, #2
 800dd12:	4641      	mov	r1, r8
 800dd14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dd18:	4641      	mov	r1, r8
 800dd1a:	008a      	lsls	r2, r1, #2
 800dd1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dd20:	f7f2 ffea 	bl	8000cf8 <__aeabi_uldivmod>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <UART_SetConfig+0x4e4>)
 800dd2a:	fba3 1302 	umull	r1, r3, r3, r2
 800dd2e:	095b      	lsrs	r3, r3, #5
 800dd30:	2164      	movs	r1, #100	; 0x64
 800dd32:	fb01 f303 	mul.w	r3, r1, r3
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	011b      	lsls	r3, r3, #4
 800dd3a:	3332      	adds	r3, #50	; 0x32
 800dd3c:	4a08      	ldr	r2, [pc, #32]	; (800dd60 <UART_SetConfig+0x4e4>)
 800dd3e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd42:	095b      	lsrs	r3, r3, #5
 800dd44:	f003 020f 	and.w	r2, r3, #15
 800dd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4422      	add	r2, r4
 800dd50:	609a      	str	r2, [r3, #8]
}
 800dd52:	bf00      	nop
 800dd54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd5e:	bf00      	nop
 800dd60:	51eb851f 	.word	0x51eb851f

0800dd64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd64:	b084      	sub	sp, #16
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b084      	sub	sp, #16
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	f107 001c 	add.w	r0, r7, #28
 800dd72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d122      	bne.n	800ddc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dd90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d105      	bne.n	800ddb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f001 fbee 	bl	800f598 <USB_CoreReset>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	73fb      	strb	r3, [r7, #15]
 800ddc0:	e01a      	b.n	800ddf8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f001 fbe2 	bl	800f598 <USB_CoreReset>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ddd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	639a      	str	r2, [r3, #56]	; 0x38
 800ddea:	e005      	b.n	800ddf8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d10b      	bne.n	800de16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	f043 0206 	orr.w	r2, r3, #6
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f043 0220 	orr.w	r2, r3, #32
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800de16:	7bfb      	ldrb	r3, [r7, #15]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de22:	b004      	add	sp, #16
 800de24:	4770      	bx	lr
	...

0800de28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800de28:	b480      	push	{r7}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	4613      	mov	r3, r2
 800de34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800de36:	79fb      	ldrb	r3, [r7, #7]
 800de38:	2b02      	cmp	r3, #2
 800de3a:	d165      	bne.n	800df08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	4a41      	ldr	r2, [pc, #260]	; (800df44 <USB_SetTurnaroundTime+0x11c>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d906      	bls.n	800de52 <USB_SetTurnaroundTime+0x2a>
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	4a40      	ldr	r2, [pc, #256]	; (800df48 <USB_SetTurnaroundTime+0x120>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d202      	bcs.n	800de52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800de4c:	230f      	movs	r3, #15
 800de4e:	617b      	str	r3, [r7, #20]
 800de50:	e062      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	4a3c      	ldr	r2, [pc, #240]	; (800df48 <USB_SetTurnaroundTime+0x120>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d306      	bcc.n	800de68 <USB_SetTurnaroundTime+0x40>
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	4a3b      	ldr	r2, [pc, #236]	; (800df4c <USB_SetTurnaroundTime+0x124>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d202      	bcs.n	800de68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de62:	230e      	movs	r3, #14
 800de64:	617b      	str	r3, [r7, #20]
 800de66:	e057      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	4a38      	ldr	r2, [pc, #224]	; (800df4c <USB_SetTurnaroundTime+0x124>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d306      	bcc.n	800de7e <USB_SetTurnaroundTime+0x56>
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	4a37      	ldr	r2, [pc, #220]	; (800df50 <USB_SetTurnaroundTime+0x128>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d202      	bcs.n	800de7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de78:	230d      	movs	r3, #13
 800de7a:	617b      	str	r3, [r7, #20]
 800de7c:	e04c      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	4a33      	ldr	r2, [pc, #204]	; (800df50 <USB_SetTurnaroundTime+0x128>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d306      	bcc.n	800de94 <USB_SetTurnaroundTime+0x6c>
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	4a32      	ldr	r2, [pc, #200]	; (800df54 <USB_SetTurnaroundTime+0x12c>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d802      	bhi.n	800de94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de8e:	230c      	movs	r3, #12
 800de90:	617b      	str	r3, [r7, #20]
 800de92:	e041      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	4a2f      	ldr	r2, [pc, #188]	; (800df54 <USB_SetTurnaroundTime+0x12c>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d906      	bls.n	800deaa <USB_SetTurnaroundTime+0x82>
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	4a2e      	ldr	r2, [pc, #184]	; (800df58 <USB_SetTurnaroundTime+0x130>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d802      	bhi.n	800deaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dea4:	230b      	movs	r3, #11
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e036      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	4a2a      	ldr	r2, [pc, #168]	; (800df58 <USB_SetTurnaroundTime+0x130>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d906      	bls.n	800dec0 <USB_SetTurnaroundTime+0x98>
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	4a29      	ldr	r2, [pc, #164]	; (800df5c <USB_SetTurnaroundTime+0x134>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d802      	bhi.n	800dec0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800deba:	230a      	movs	r3, #10
 800debc:	617b      	str	r3, [r7, #20]
 800debe:	e02b      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	4a26      	ldr	r2, [pc, #152]	; (800df5c <USB_SetTurnaroundTime+0x134>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d906      	bls.n	800ded6 <USB_SetTurnaroundTime+0xae>
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	4a25      	ldr	r2, [pc, #148]	; (800df60 <USB_SetTurnaroundTime+0x138>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d202      	bcs.n	800ded6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ded0:	2309      	movs	r3, #9
 800ded2:	617b      	str	r3, [r7, #20]
 800ded4:	e020      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	4a21      	ldr	r2, [pc, #132]	; (800df60 <USB_SetTurnaroundTime+0x138>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d306      	bcc.n	800deec <USB_SetTurnaroundTime+0xc4>
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	4a20      	ldr	r2, [pc, #128]	; (800df64 <USB_SetTurnaroundTime+0x13c>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d802      	bhi.n	800deec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dee6:	2308      	movs	r3, #8
 800dee8:	617b      	str	r3, [r7, #20]
 800deea:	e015      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	4a1d      	ldr	r2, [pc, #116]	; (800df64 <USB_SetTurnaroundTime+0x13c>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d906      	bls.n	800df02 <USB_SetTurnaroundTime+0xda>
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	4a1c      	ldr	r2, [pc, #112]	; (800df68 <USB_SetTurnaroundTime+0x140>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d202      	bcs.n	800df02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800defc:	2307      	movs	r3, #7
 800defe:	617b      	str	r3, [r7, #20]
 800df00:	e00a      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800df02:	2306      	movs	r3, #6
 800df04:	617b      	str	r3, [r7, #20]
 800df06:	e007      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800df08:	79fb      	ldrb	r3, [r7, #7]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d102      	bne.n	800df14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800df0e:	2309      	movs	r3, #9
 800df10:	617b      	str	r3, [r7, #20]
 800df12:	e001      	b.n	800df18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800df14:	2309      	movs	r3, #9
 800df16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	68da      	ldr	r2, [r3, #12]
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	029b      	lsls	r3, r3, #10
 800df2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800df30:	431a      	orrs	r2, r3
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	371c      	adds	r7, #28
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	00d8acbf 	.word	0x00d8acbf
 800df48:	00e4e1c0 	.word	0x00e4e1c0
 800df4c:	00f42400 	.word	0x00f42400
 800df50:	01067380 	.word	0x01067380
 800df54:	011a499f 	.word	0x011a499f
 800df58:	01312cff 	.word	0x01312cff
 800df5c:	014ca43f 	.word	0x014ca43f
 800df60:	016e3600 	.word	0x016e3600
 800df64:	01a6ab1f 	.word	0x01a6ab1f
 800df68:	01e84800 	.word	0x01e84800

0800df6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	f043 0201 	orr.w	r2, r3, #1
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df8e:	b480      	push	{r7}
 800df90:	b083      	sub	sp, #12
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	f023 0201 	bic.w	r2, r3, #1
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dfcc:	78fb      	ldrb	r3, [r7, #3]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d115      	bne.n	800dffe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dfde:	2001      	movs	r0, #1
 800dfe0:	f7f7 f9ae 	bl	8005340 <HAL_Delay>
      ms++;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f001 fa45 	bl	800f47a <USB_GetMode>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d01e      	beq.n	800e034 <USB_SetCurrentMode+0x84>
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2b31      	cmp	r3, #49	; 0x31
 800dffa:	d9f0      	bls.n	800dfde <USB_SetCurrentMode+0x2e>
 800dffc:	e01a      	b.n	800e034 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dffe:	78fb      	ldrb	r3, [r7, #3]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d115      	bne.n	800e030 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e010:	2001      	movs	r0, #1
 800e012:	f7f7 f995 	bl	8005340 <HAL_Delay>
      ms++;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	3301      	adds	r3, #1
 800e01a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f001 fa2c 	bl	800f47a <USB_GetMode>
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <USB_SetCurrentMode+0x84>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2b31      	cmp	r3, #49	; 0x31
 800e02c:	d9f0      	bls.n	800e010 <USB_SetCurrentMode+0x60>
 800e02e:	e001      	b.n	800e034 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e030:	2301      	movs	r3, #1
 800e032:	e005      	b.n	800e040 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2b32      	cmp	r3, #50	; 0x32
 800e038:	d101      	bne.n	800e03e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	e000      	b.n	800e040 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3710      	adds	r7, #16
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e048:	b084      	sub	sp, #16
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b086      	sub	sp, #24
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e062:	2300      	movs	r3, #0
 800e064:	613b      	str	r3, [r7, #16]
 800e066:	e009      	b.n	800e07c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	3340      	adds	r3, #64	; 0x40
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	4413      	add	r3, r2
 800e072:	2200      	movs	r2, #0
 800e074:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	3301      	adds	r3, #1
 800e07a:	613b      	str	r3, [r7, #16]
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	2b0e      	cmp	r3, #14
 800e080:	d9f2      	bls.n	800e068 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e084:	2b00      	cmp	r3, #0
 800e086:	d11c      	bne.n	800e0c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e096:	f043 0302 	orr.w	r3, r3, #2
 800e09a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	639a      	str	r2, [r3, #56]	; 0x38
 800e0c0:	e00b      	b.n	800e0da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	680b      	ldr	r3, [r1, #0]
 800e0f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d10c      	bne.n	800e11a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e102:	2b00      	cmp	r3, #0
 800e104:	d104      	bne.n	800e110 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e106:	2100      	movs	r1, #0
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 f965 	bl	800e3d8 <USB_SetDevSpeed>
 800e10e:	e008      	b.n	800e122 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e110:	2101      	movs	r1, #1
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 f960 	bl	800e3d8 <USB_SetDevSpeed>
 800e118:	e003      	b.n	800e122 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e11a:	2103      	movs	r1, #3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f95b 	bl	800e3d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e122:	2110      	movs	r1, #16
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 f8f3 	bl	800e310 <USB_FlushTxFifo>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f91f 	bl	800e378 <USB_FlushRxFifo>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e14a:	461a      	mov	r2, r3
 800e14c:	2300      	movs	r3, #0
 800e14e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e156:	461a      	mov	r2, r3
 800e158:	2300      	movs	r3, #0
 800e15a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e162:	461a      	mov	r2, r3
 800e164:	2300      	movs	r3, #0
 800e166:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e168:	2300      	movs	r3, #0
 800e16a:	613b      	str	r3, [r7, #16]
 800e16c:	e043      	b.n	800e1f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	015a      	lsls	r2, r3, #5
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	4413      	add	r3, r2
 800e176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e184:	d118      	bne.n	800e1b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10a      	bne.n	800e1a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	4413      	add	r3, r2
 800e194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e198:	461a      	mov	r2, r3
 800e19a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	e013      	b.n	800e1ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	015a      	lsls	r2, r3, #5
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e1b4:	6013      	str	r3, [r2, #0]
 800e1b6:	e008      	b.n	800e1ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	015a      	lsls	r2, r3, #5
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	2300      	movs	r3, #0
 800e1da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	015a      	lsls	r2, r3, #5
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e1ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	613b      	str	r3, [r7, #16]
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d3b7      	bcc.n	800e16e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1fe:	2300      	movs	r3, #0
 800e200:	613b      	str	r3, [r7, #16]
 800e202:	e043      	b.n	800e28c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	015a      	lsls	r2, r3, #5
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	4413      	add	r3, r2
 800e20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e21a:	d118      	bne.n	800e24e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10a      	bne.n	800e238 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	015a      	lsls	r2, r3, #5
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	4413      	add	r3, r2
 800e22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e22e:	461a      	mov	r2, r3
 800e230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e234:	6013      	str	r3, [r2, #0]
 800e236:	e013      	b.n	800e260 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	015a      	lsls	r2, r3, #5
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	4413      	add	r3, r2
 800e240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e244:	461a      	mov	r2, r3
 800e246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	e008      	b.n	800e260 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	015a      	lsls	r2, r3, #5
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	4413      	add	r3, r2
 800e256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e25a:	461a      	mov	r2, r3
 800e25c:	2300      	movs	r3, #0
 800e25e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	015a      	lsls	r2, r3, #5
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	4413      	add	r3, r2
 800e268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e26c:	461a      	mov	r2, r3
 800e26e:	2300      	movs	r3, #0
 800e270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	015a      	lsls	r2, r3, #5
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	4413      	add	r3, r2
 800e27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e27e:	461a      	mov	r2, r3
 800e280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	3301      	adds	r3, #1
 800e28a:	613b      	str	r3, [r7, #16]
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	693a      	ldr	r2, [r7, #16]
 800e290:	429a      	cmp	r2, r3
 800e292:	d3b7      	bcc.n	800e204 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e2b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d105      	bne.n	800e2c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	699b      	ldr	r3, [r3, #24]
 800e2c0:	f043 0210 	orr.w	r2, r3, #16
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	699a      	ldr	r2, [r3, #24]
 800e2cc:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <USB_DevInit+0x2c4>)
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d005      	beq.n	800e2e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	f043 0208 	orr.w	r2, r3, #8
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d107      	bne.n	800e2fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	699b      	ldr	r3, [r3, #24]
 800e2f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e2f4:	f043 0304 	orr.w	r3, r3, #4
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3718      	adds	r7, #24
 800e302:	46bd      	mov	sp, r7
 800e304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e308:	b004      	add	sp, #16
 800e30a:	4770      	bx	lr
 800e30c:	803c3800 	.word	0x803c3800

0800e310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e31a:	2300      	movs	r3, #0
 800e31c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3301      	adds	r3, #1
 800e322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	4a13      	ldr	r2, [pc, #76]	; (800e374 <USB_FlushTxFifo+0x64>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d901      	bls.n	800e330 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e32c:	2303      	movs	r3, #3
 800e32e:	e01b      	b.n	800e368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	2b00      	cmp	r3, #0
 800e336:	daf2      	bge.n	800e31e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e338:	2300      	movs	r3, #0
 800e33a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	019b      	lsls	r3, r3, #6
 800e340:	f043 0220 	orr.w	r2, r3, #32
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	3301      	adds	r3, #1
 800e34c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	4a08      	ldr	r2, [pc, #32]	; (800e374 <USB_FlushTxFifo+0x64>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d901      	bls.n	800e35a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e356:	2303      	movs	r3, #3
 800e358:	e006      	b.n	800e368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	f003 0320 	and.w	r3, r3, #32
 800e362:	2b20      	cmp	r3, #32
 800e364:	d0f0      	beq.n	800e348 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	00030d40 	.word	0x00030d40

0800e378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e380:	2300      	movs	r3, #0
 800e382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	3301      	adds	r3, #1
 800e388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	4a11      	ldr	r2, [pc, #68]	; (800e3d4 <USB_FlushRxFifo+0x5c>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d901      	bls.n	800e396 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e392:	2303      	movs	r3, #3
 800e394:	e018      	b.n	800e3c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	691b      	ldr	r3, [r3, #16]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	daf2      	bge.n	800e384 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2210      	movs	r2, #16
 800e3a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	4a08      	ldr	r2, [pc, #32]	; (800e3d4 <USB_FlushRxFifo+0x5c>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d901      	bls.n	800e3ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e3b6:	2303      	movs	r3, #3
 800e3b8:	e006      	b.n	800e3c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	691b      	ldr	r3, [r3, #16]
 800e3be:	f003 0310 	and.w	r3, r3, #16
 800e3c2:	2b10      	cmp	r3, #16
 800e3c4:	d0f0      	beq.n	800e3a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3714      	adds	r7, #20
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr
 800e3d4:	00030d40 	.word	0x00030d40

0800e3d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	78fb      	ldrb	r3, [r7, #3]
 800e3f2:	68f9      	ldr	r1, [r7, #12]
 800e3f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e40a:	b480      	push	{r7}
 800e40c:	b087      	sub	sp, #28
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	f003 0306 	and.w	r3, r3, #6
 800e422:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d102      	bne.n	800e430 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e42a:	2300      	movs	r3, #0
 800e42c:	75fb      	strb	r3, [r7, #23]
 800e42e:	e00a      	b.n	800e446 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2b02      	cmp	r3, #2
 800e434:	d002      	beq.n	800e43c <USB_GetDevSpeed+0x32>
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2b06      	cmp	r3, #6
 800e43a:	d102      	bne.n	800e442 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e43c:	2302      	movs	r3, #2
 800e43e:	75fb      	strb	r3, [r7, #23]
 800e440:	e001      	b.n	800e446 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e442:	230f      	movs	r3, #15
 800e444:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e446:	7dfb      	ldrb	r3, [r7, #23]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	371c      	adds	r7, #28
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	785b      	ldrb	r3, [r3, #1]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d13a      	bne.n	800e4e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e476:	69da      	ldr	r2, [r3, #28]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	f003 030f 	and.w	r3, r3, #15
 800e480:	2101      	movs	r1, #1
 800e482:	fa01 f303 	lsl.w	r3, r1, r3
 800e486:	b29b      	uxth	r3, r3
 800e488:	68f9      	ldr	r1, [r7, #12]
 800e48a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e48e:	4313      	orrs	r3, r2
 800e490:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	015a      	lsls	r2, r3, #5
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	4413      	add	r3, r2
 800e49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d155      	bne.n	800e554 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	015a      	lsls	r2, r3, #5
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	791b      	ldrb	r3, [r3, #4]
 800e4c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	059b      	lsls	r3, r3, #22
 800e4ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	0151      	lsls	r1, r2, #5
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	440a      	add	r2, r1
 800e4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4e2:	6013      	str	r3, [r2, #0]
 800e4e4:	e036      	b.n	800e554 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4ec:	69da      	ldr	r2, [r3, #28]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	f003 030f 	and.w	r3, r3, #15
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4fc:	041b      	lsls	r3, r3, #16
 800e4fe:	68f9      	ldr	r1, [r7, #12]
 800e500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e504:	4313      	orrs	r3, r2
 800e506:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	015a      	lsls	r2, r3, #5
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	4413      	add	r3, r2
 800e510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d11a      	bne.n	800e554 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	015a      	lsls	r2, r3, #5
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	4413      	add	r3, r2
 800e526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	791b      	ldrb	r3, [r3, #4]
 800e538:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e53a:	430b      	orrs	r3, r1
 800e53c:	4313      	orrs	r3, r2
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	0151      	lsls	r1, r2, #5
 800e542:	68fa      	ldr	r2, [r7, #12]
 800e544:	440a      	add	r2, r1
 800e546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e54a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e54e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e552:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
	...

0800e564 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	785b      	ldrb	r3, [r3, #1]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d161      	bne.n	800e644 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	015a      	lsls	r2, r3, #5
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	4413      	add	r3, r2
 800e588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e596:	d11f      	bne.n	800e5d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	015a      	lsls	r2, r3, #5
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	4413      	add	r3, r2
 800e5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68ba      	ldr	r2, [r7, #8]
 800e5a8:	0151      	lsls	r1, r2, #5
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	440a      	add	r2, r1
 800e5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e5b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	0151      	lsls	r1, r2, #5
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	440a      	add	r2, r1
 800e5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	f003 030f 	and.w	r3, r3, #15
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	43db      	mvns	r3, r3
 800e5f2:	68f9      	ldr	r1, [r7, #12]
 800e5f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e5f8:	4013      	ands	r3, r2
 800e5fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e602:	69da      	ldr	r2, [r3, #28]
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	f003 030f 	and.w	r3, r3, #15
 800e60c:	2101      	movs	r1, #1
 800e60e:	fa01 f303 	lsl.w	r3, r1, r3
 800e612:	b29b      	uxth	r3, r3
 800e614:	43db      	mvns	r3, r3
 800e616:	68f9      	ldr	r1, [r7, #12]
 800e618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e61c:	4013      	ands	r3, r2
 800e61e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	015a      	lsls	r2, r3, #5
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	4413      	add	r3, r2
 800e628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	0159      	lsls	r1, r3, #5
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	440b      	add	r3, r1
 800e636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63a:	4619      	mov	r1, r3
 800e63c:	4b35      	ldr	r3, [pc, #212]	; (800e714 <USB_DeactivateEndpoint+0x1b0>)
 800e63e:	4013      	ands	r3, r2
 800e640:	600b      	str	r3, [r1, #0]
 800e642:	e060      	b.n	800e706 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	015a      	lsls	r2, r3, #5
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e65a:	d11f      	bne.n	800e69c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4413      	add	r3, r2
 800e664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	0151      	lsls	r1, r2, #5
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	440a      	add	r2, r1
 800e672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e67a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	015a      	lsls	r2, r3, #5
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	4413      	add	r3, r2
 800e684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	0151      	lsls	r1, r2, #5
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	440a      	add	r2, r1
 800e692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e69a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	f003 030f 	and.w	r3, r3, #15
 800e6ac:	2101      	movs	r1, #1
 800e6ae:	fa01 f303 	lsl.w	r3, r1, r3
 800e6b2:	041b      	lsls	r3, r3, #16
 800e6b4:	43db      	mvns	r3, r3
 800e6b6:	68f9      	ldr	r1, [r7, #12]
 800e6b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6bc:	4013      	ands	r3, r2
 800e6be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c6:	69da      	ldr	r2, [r3, #28]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	f003 030f 	and.w	r3, r3, #15
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e6d6:	041b      	lsls	r3, r3, #16
 800e6d8:	43db      	mvns	r3, r3
 800e6da:	68f9      	ldr	r1, [r7, #12]
 800e6dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	015a      	lsls	r2, r3, #5
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	0159      	lsls	r1, r3, #5
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	440b      	add	r3, r1
 800e6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fe:	4619      	mov	r1, r3
 800e700:	4b05      	ldr	r3, [pc, #20]	; (800e718 <USB_DeactivateEndpoint+0x1b4>)
 800e702:	4013      	ands	r3, r2
 800e704:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3714      	adds	r7, #20
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr
 800e714:	ec337800 	.word	0xec337800
 800e718:	eff37800 	.word	0xeff37800

0800e71c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b08a      	sub	sp, #40	; 0x28
 800e720:	af02      	add	r7, sp, #8
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	4613      	mov	r3, r2
 800e728:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	785b      	ldrb	r3, [r3, #1]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	f040 815c 	bne.w	800e9f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	699b      	ldr	r3, [r3, #24]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d132      	bne.n	800e7ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	015a      	lsls	r2, r3, #5
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	4413      	add	r3, r2
 800e74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	69ba      	ldr	r2, [r7, #24]
 800e756:	0151      	lsls	r1, r2, #5
 800e758:	69fa      	ldr	r2, [r7, #28]
 800e75a:	440a      	add	r2, r1
 800e75c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e760:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e764:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	015a      	lsls	r2, r3, #5
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	4413      	add	r3, r2
 800e772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e776:	691b      	ldr	r3, [r3, #16]
 800e778:	69ba      	ldr	r2, [r7, #24]
 800e77a:	0151      	lsls	r1, r2, #5
 800e77c:	69fa      	ldr	r2, [r7, #28]
 800e77e:	440a      	add	r2, r1
 800e780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	015a      	lsls	r2, r3, #5
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	4413      	add	r3, r2
 800e792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	0151      	lsls	r1, r2, #5
 800e79c:	69fa      	ldr	r2, [r7, #28]
 800e79e:	440a      	add	r2, r1
 800e7a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7a4:	0cdb      	lsrs	r3, r3, #19
 800e7a6:	04db      	lsls	r3, r3, #19
 800e7a8:	6113      	str	r3, [r2, #16]
 800e7aa:	e074      	b.n	800e896 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	69ba      	ldr	r2, [r7, #24]
 800e7bc:	0151      	lsls	r1, r2, #5
 800e7be:	69fa      	ldr	r2, [r7, #28]
 800e7c0:	440a      	add	r2, r1
 800e7c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7c6:	0cdb      	lsrs	r3, r3, #19
 800e7c8:	04db      	lsls	r3, r3, #19
 800e7ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	015a      	lsls	r2, r3, #5
 800e7d0:	69fb      	ldr	r3, [r7, #28]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	69ba      	ldr	r2, [r7, #24]
 800e7dc:	0151      	lsls	r1, r2, #5
 800e7de:	69fa      	ldr	r2, [r7, #28]
 800e7e0:	440a      	add	r2, r1
 800e7e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e7ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e7ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	015a      	lsls	r2, r3, #5
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	6999      	ldr	r1, [r3, #24]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	68db      	ldr	r3, [r3, #12]
 800e806:	440b      	add	r3, r1
 800e808:	1e59      	subs	r1, r3, #1
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e812:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e814:	4b9d      	ldr	r3, [pc, #628]	; (800ea8c <USB_EPStartXfer+0x370>)
 800e816:	400b      	ands	r3, r1
 800e818:	69b9      	ldr	r1, [r7, #24]
 800e81a:	0148      	lsls	r0, r1, #5
 800e81c:	69f9      	ldr	r1, [r7, #28]
 800e81e:	4401      	add	r1, r0
 800e820:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e824:	4313      	orrs	r3, r2
 800e826:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	015a      	lsls	r2, r3, #5
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	4413      	add	r3, r2
 800e830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e834:	691a      	ldr	r2, [r3, #16]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e83e:	69b9      	ldr	r1, [r7, #24]
 800e840:	0148      	lsls	r0, r1, #5
 800e842:	69f9      	ldr	r1, [r7, #28]
 800e844:	4401      	add	r1, r0
 800e846:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e84a:	4313      	orrs	r3, r2
 800e84c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	791b      	ldrb	r3, [r3, #4]
 800e852:	2b01      	cmp	r3, #1
 800e854:	d11f      	bne.n	800e896 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	015a      	lsls	r2, r3, #5
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	4413      	add	r3, r2
 800e85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e862:	691b      	ldr	r3, [r3, #16]
 800e864:	69ba      	ldr	r2, [r7, #24]
 800e866:	0151      	lsls	r1, r2, #5
 800e868:	69fa      	ldr	r2, [r7, #28]
 800e86a:	440a      	add	r2, r1
 800e86c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e870:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e874:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	015a      	lsls	r2, r3, #5
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	4413      	add	r3, r2
 800e87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	69ba      	ldr	r2, [r7, #24]
 800e886:	0151      	lsls	r1, r2, #5
 800e888:	69fa      	ldr	r2, [r7, #28]
 800e88a:	440a      	add	r2, r1
 800e88c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e890:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e894:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e896:	79fb      	ldrb	r3, [r7, #7]
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d14b      	bne.n	800e934 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	695b      	ldr	r3, [r3, #20]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d009      	beq.n	800e8b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	015a      	lsls	r2, r3, #5
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	695b      	ldr	r3, [r3, #20]
 800e8b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	791b      	ldrb	r3, [r3, #4]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d128      	bne.n	800e912 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d110      	bne.n	800e8f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	015a      	lsls	r2, r3, #5
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	69ba      	ldr	r2, [r7, #24]
 800e8e0:	0151      	lsls	r1, r2, #5
 800e8e2:	69fa      	ldr	r2, [r7, #28]
 800e8e4:	440a      	add	r2, r1
 800e8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	e00f      	b.n	800e912 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	015a      	lsls	r2, r3, #5
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	69ba      	ldr	r2, [r7, #24]
 800e902:	0151      	lsls	r1, r2, #5
 800e904:	69fa      	ldr	r2, [r7, #28]
 800e906:	440a      	add	r2, r1
 800e908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e90c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e910:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	015a      	lsls	r2, r3, #5
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	4413      	add	r3, r2
 800e91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	69ba      	ldr	r2, [r7, #24]
 800e922:	0151      	lsls	r1, r2, #5
 800e924:	69fa      	ldr	r2, [r7, #28]
 800e926:	440a      	add	r2, r1
 800e928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e92c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e930:	6013      	str	r3, [r2, #0]
 800e932:	e133      	b.n	800eb9c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	015a      	lsls	r2, r3, #5
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	4413      	add	r3, r2
 800e93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	69ba      	ldr	r2, [r7, #24]
 800e944:	0151      	lsls	r1, r2, #5
 800e946:	69fa      	ldr	r2, [r7, #28]
 800e948:	440a      	add	r2, r1
 800e94a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e94e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e952:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	791b      	ldrb	r3, [r3, #4]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d015      	beq.n	800e988 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 811b 	beq.w	800eb9c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e96c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	f003 030f 	and.w	r3, r3, #15
 800e976:	2101      	movs	r1, #1
 800e978:	fa01 f303 	lsl.w	r3, r1, r3
 800e97c:	69f9      	ldr	r1, [r7, #28]
 800e97e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e982:	4313      	orrs	r3, r2
 800e984:	634b      	str	r3, [r1, #52]	; 0x34
 800e986:	e109      	b.n	800eb9c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e994:	2b00      	cmp	r3, #0
 800e996:	d110      	bne.n	800e9ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	015a      	lsls	r2, r3, #5
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	4413      	add	r3, r2
 800e9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	69ba      	ldr	r2, [r7, #24]
 800e9a8:	0151      	lsls	r1, r2, #5
 800e9aa:	69fa      	ldr	r2, [r7, #28]
 800e9ac:	440a      	add	r2, r1
 800e9ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9b6:	6013      	str	r3, [r2, #0]
 800e9b8:	e00f      	b.n	800e9da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	015a      	lsls	r2, r3, #5
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	69ba      	ldr	r2, [r7, #24]
 800e9ca:	0151      	lsls	r1, r2, #5
 800e9cc:	69fa      	ldr	r2, [r7, #28]
 800e9ce:	440a      	add	r2, r1
 800e9d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	6919      	ldr	r1, [r3, #16]
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	781a      	ldrb	r2, [r3, #0]
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	b298      	uxth	r0, r3
 800e9e8:	79fb      	ldrb	r3, [r7, #7]
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f000 fade 	bl	800efb0 <USB_WritePacket>
 800e9f4:	e0d2      	b.n	800eb9c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	015a      	lsls	r2, r3, #5
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	69ba      	ldr	r2, [r7, #24]
 800ea06:	0151      	lsls	r1, r2, #5
 800ea08:	69fa      	ldr	r2, [r7, #28]
 800ea0a:	440a      	add	r2, r1
 800ea0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea10:	0cdb      	lsrs	r3, r3, #19
 800ea12:	04db      	lsls	r3, r3, #19
 800ea14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	015a      	lsls	r2, r3, #5
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	69ba      	ldr	r2, [r7, #24]
 800ea26:	0151      	lsls	r1, r2, #5
 800ea28:	69fa      	ldr	r2, [r7, #28]
 800ea2a:	440a      	add	r2, r1
 800ea2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d126      	bne.n	800ea90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea4e:	691a      	ldr	r2, [r3, #16]
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea58:	69b9      	ldr	r1, [r7, #24]
 800ea5a:	0148      	lsls	r0, r1, #5
 800ea5c:	69f9      	ldr	r1, [r7, #28]
 800ea5e:	4401      	add	r1, r0
 800ea60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ea64:	4313      	orrs	r3, r2
 800ea66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	015a      	lsls	r2, r3, #5
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	4413      	add	r3, r2
 800ea70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	69ba      	ldr	r2, [r7, #24]
 800ea78:	0151      	lsls	r1, r2, #5
 800ea7a:	69fa      	ldr	r2, [r7, #28]
 800ea7c:	440a      	add	r2, r1
 800ea7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea86:	6113      	str	r3, [r2, #16]
 800ea88:	e03a      	b.n	800eb00 <USB_EPStartXfer+0x3e4>
 800ea8a:	bf00      	nop
 800ea8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	699a      	ldr	r2, [r3, #24]
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	4413      	add	r3, r2
 800ea9a:	1e5a      	subs	r2, r3, #1
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaa4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	8afa      	ldrh	r2, [r7, #22]
 800eaac:	fb03 f202 	mul.w	r2, r3, r2
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	015a      	lsls	r2, r3, #5
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	4413      	add	r3, r2
 800eabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eac0:	691a      	ldr	r2, [r3, #16]
 800eac2:	8afb      	ldrh	r3, [r7, #22]
 800eac4:	04d9      	lsls	r1, r3, #19
 800eac6:	4b38      	ldr	r3, [pc, #224]	; (800eba8 <USB_EPStartXfer+0x48c>)
 800eac8:	400b      	ands	r3, r1
 800eaca:	69b9      	ldr	r1, [r7, #24]
 800eacc:	0148      	lsls	r0, r1, #5
 800eace:	69f9      	ldr	r1, [r7, #28]
 800ead0:	4401      	add	r1, r0
 800ead2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ead6:	4313      	orrs	r3, r2
 800ead8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eae6:	691a      	ldr	r2, [r3, #16]
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	69db      	ldr	r3, [r3, #28]
 800eaec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eaf0:	69b9      	ldr	r1, [r7, #24]
 800eaf2:	0148      	lsls	r0, r1, #5
 800eaf4:	69f9      	ldr	r1, [r7, #28]
 800eaf6:	4401      	add	r1, r0
 800eaf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eafc:	4313      	orrs	r3, r2
 800eafe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800eb00:	79fb      	ldrb	r3, [r7, #7]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d10d      	bne.n	800eb22 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	691b      	ldr	r3, [r3, #16]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d009      	beq.n	800eb22 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	6919      	ldr	r1, [r3, #16]
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	015a      	lsls	r2, r3, #5
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	4413      	add	r3, r2
 800eb1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb1e:	460a      	mov	r2, r1
 800eb20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	791b      	ldrb	r3, [r3, #4]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d128      	bne.n	800eb7c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d110      	bne.n	800eb5c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	015a      	lsls	r2, r3, #5
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	4413      	add	r3, r2
 800eb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	69ba      	ldr	r2, [r7, #24]
 800eb4a:	0151      	lsls	r1, r2, #5
 800eb4c:	69fa      	ldr	r2, [r7, #28]
 800eb4e:	440a      	add	r2, r1
 800eb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb58:	6013      	str	r3, [r2, #0]
 800eb5a:	e00f      	b.n	800eb7c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	015a      	lsls	r2, r3, #5
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	4413      	add	r3, r2
 800eb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	69ba      	ldr	r2, [r7, #24]
 800eb6c:	0151      	lsls	r1, r2, #5
 800eb6e:	69fa      	ldr	r2, [r7, #28]
 800eb70:	440a      	add	r2, r1
 800eb72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eb7c:	69bb      	ldr	r3, [r7, #24]
 800eb7e:	015a      	lsls	r2, r3, #5
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	4413      	add	r3, r2
 800eb84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	69ba      	ldr	r2, [r7, #24]
 800eb8c:	0151      	lsls	r1, r2, #5
 800eb8e:	69fa      	ldr	r2, [r7, #28]
 800eb90:	440a      	add	r2, r1
 800eb92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3720      	adds	r7, #32
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	1ff80000 	.word	0x1ff80000

0800ebac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b087      	sub	sp, #28
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	785b      	ldrb	r3, [r3, #1]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	f040 80ce 	bne.w	800ed6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d132      	bne.n	800ec3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	015a      	lsls	r2, r3, #5
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	4413      	add	r3, r2
 800ebde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	693a      	ldr	r2, [r7, #16]
 800ebe6:	0151      	lsls	r1, r2, #5
 800ebe8:	697a      	ldr	r2, [r7, #20]
 800ebea:	440a      	add	r2, r1
 800ebec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ebf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ebf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	015a      	lsls	r2, r3, #5
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	693a      	ldr	r2, [r7, #16]
 800ec0a:	0151      	lsls	r1, r2, #5
 800ec0c:	697a      	ldr	r2, [r7, #20]
 800ec0e:	440a      	add	r2, r1
 800ec10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	015a      	lsls	r2, r3, #5
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	4413      	add	r3, r2
 800ec22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec26:	691b      	ldr	r3, [r3, #16]
 800ec28:	693a      	ldr	r2, [r7, #16]
 800ec2a:	0151      	lsls	r1, r2, #5
 800ec2c:	697a      	ldr	r2, [r7, #20]
 800ec2e:	440a      	add	r2, r1
 800ec30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec34:	0cdb      	lsrs	r3, r3, #19
 800ec36:	04db      	lsls	r3, r3, #19
 800ec38:	6113      	str	r3, [r2, #16]
 800ec3a:	e04e      	b.n	800ecda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	015a      	lsls	r2, r3, #5
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	4413      	add	r3, r2
 800ec44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec48:	691b      	ldr	r3, [r3, #16]
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	0151      	lsls	r1, r2, #5
 800ec4e:	697a      	ldr	r2, [r7, #20]
 800ec50:	440a      	add	r2, r1
 800ec52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec56:	0cdb      	lsrs	r3, r3, #19
 800ec58:	04db      	lsls	r3, r3, #19
 800ec5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	015a      	lsls	r2, r3, #5
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	4413      	add	r3, r2
 800ec64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	693a      	ldr	r2, [r7, #16]
 800ec6c:	0151      	lsls	r1, r2, #5
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	440a      	add	r2, r1
 800ec72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	699a      	ldr	r2, [r3, #24]
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d903      	bls.n	800ec94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	68da      	ldr	r2, [r3, #12]
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	015a      	lsls	r2, r3, #5
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	693a      	ldr	r2, [r7, #16]
 800eca4:	0151      	lsls	r1, r2, #5
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	440a      	add	r2, r1
 800ecaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ecb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	015a      	lsls	r2, r3, #5
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	4413      	add	r3, r2
 800ecbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecc0:	691a      	ldr	r2, [r3, #16]
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecca:	6939      	ldr	r1, [r7, #16]
 800eccc:	0148      	lsls	r0, r1, #5
 800ecce:	6979      	ldr	r1, [r7, #20]
 800ecd0:	4401      	add	r1, r0
 800ecd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ecda:	79fb      	ldrb	r3, [r7, #7]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d11e      	bne.n	800ed1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	695b      	ldr	r3, [r3, #20]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d009      	beq.n	800ecfc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	015a      	lsls	r2, r3, #5
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	4413      	add	r3, r2
 800ecf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	015a      	lsls	r2, r3, #5
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	4413      	add	r3, r2
 800ed04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	693a      	ldr	r2, [r7, #16]
 800ed0c:	0151      	lsls	r1, r2, #5
 800ed0e:	697a      	ldr	r2, [r7, #20]
 800ed10:	440a      	add	r2, r1
 800ed12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed1a:	6013      	str	r3, [r2, #0]
 800ed1c:	e097      	b.n	800ee4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	015a      	lsls	r2, r3, #5
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	4413      	add	r3, r2
 800ed26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	693a      	ldr	r2, [r7, #16]
 800ed2e:	0151      	lsls	r1, r2, #5
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	440a      	add	r2, r1
 800ed34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f000 8083 	beq.w	800ee4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	f003 030f 	and.w	r3, r3, #15
 800ed58:	2101      	movs	r1, #1
 800ed5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ed5e:	6979      	ldr	r1, [r7, #20]
 800ed60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed64:	4313      	orrs	r3, r2
 800ed66:	634b      	str	r3, [r1, #52]	; 0x34
 800ed68:	e071      	b.n	800ee4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	015a      	lsls	r2, r3, #5
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	4413      	add	r3, r2
 800ed72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	693a      	ldr	r2, [r7, #16]
 800ed7a:	0151      	lsls	r1, r2, #5
 800ed7c:	697a      	ldr	r2, [r7, #20]
 800ed7e:	440a      	add	r2, r1
 800ed80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed84:	0cdb      	lsrs	r3, r3, #19
 800ed86:	04db      	lsls	r3, r3, #19
 800ed88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	015a      	lsls	r2, r3, #5
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	4413      	add	r3, r2
 800ed92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	693a      	ldr	r2, [r7, #16]
 800ed9a:	0151      	lsls	r1, r2, #5
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	440a      	add	r2, r1
 800eda0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eda4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eda8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800edac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	699b      	ldr	r3, [r3, #24]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d003      	beq.n	800edbe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	68da      	ldr	r2, [r3, #12]
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	68da      	ldr	r2, [r3, #12]
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	015a      	lsls	r2, r3, #5
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	4413      	add	r3, r2
 800edce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	693a      	ldr	r2, [r7, #16]
 800edd6:	0151      	lsls	r1, r2, #5
 800edd8:	697a      	ldr	r2, [r7, #20]
 800edda:	440a      	add	r2, r1
 800eddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ede0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ede4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	015a      	lsls	r2, r3, #5
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	4413      	add	r3, r2
 800edee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edf2:	691a      	ldr	r2, [r3, #16]
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	69db      	ldr	r3, [r3, #28]
 800edf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800edfc:	6939      	ldr	r1, [r7, #16]
 800edfe:	0148      	lsls	r0, r1, #5
 800ee00:	6979      	ldr	r1, [r7, #20]
 800ee02:	4401      	add	r1, r0
 800ee04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ee0c:	79fb      	ldrb	r3, [r7, #7]
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d10d      	bne.n	800ee2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d009      	beq.n	800ee2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	6919      	ldr	r1, [r3, #16]
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	015a      	lsls	r2, r3, #5
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	4413      	add	r3, r2
 800ee26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee2a:	460a      	mov	r2, r1
 800ee2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	015a      	lsls	r2, r3, #5
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	4413      	add	r3, r2
 800ee36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	693a      	ldr	r2, [r7, #16]
 800ee3e:	0151      	lsls	r1, r2, #5
 800ee40:	697a      	ldr	r2, [r7, #20]
 800ee42:	440a      	add	r2, r1
 800ee44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee4e:	2300      	movs	r3, #0
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	371c      	adds	r7, #28
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr

0800ee5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b087      	sub	sp, #28
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ee66:	2300      	movs	r3, #0
 800ee68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	785b      	ldrb	r3, [r3, #1]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d14a      	bne.n	800ef10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	015a      	lsls	r2, r3, #5
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	4413      	add	r3, r2
 800ee84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee92:	f040 8086 	bne.w	800efa2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	015a      	lsls	r2, r3, #5
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	4413      	add	r3, r2
 800eea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	7812      	ldrb	r2, [r2, #0]
 800eeaa:	0151      	lsls	r1, r2, #5
 800eeac:	693a      	ldr	r2, [r7, #16]
 800eeae:	440a      	add	r2, r1
 800eeb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eeb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eeb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	015a      	lsls	r2, r3, #5
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	4413      	add	r3, r2
 800eec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	683a      	ldr	r2, [r7, #0]
 800eecc:	7812      	ldrb	r2, [r2, #0]
 800eece:	0151      	lsls	r1, r2, #5
 800eed0:	693a      	ldr	r2, [r7, #16]
 800eed2:	440a      	add	r2, r1
 800eed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eedc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	3301      	adds	r3, #1
 800eee2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f242 7210 	movw	r2, #10000	; 0x2710
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d902      	bls.n	800eef4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800eeee:	2301      	movs	r3, #1
 800eef0:	75fb      	strb	r3, [r7, #23]
          break;
 800eef2:	e056      	b.n	800efa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	015a      	lsls	r2, r3, #5
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	4413      	add	r3, r2
 800eefe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef0c:	d0e7      	beq.n	800eede <USB_EPStopXfer+0x82>
 800ef0e:	e048      	b.n	800efa2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	015a      	lsls	r2, r3, #5
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	4413      	add	r3, r2
 800ef1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef28:	d13b      	bne.n	800efa2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	015a      	lsls	r2, r3, #5
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	4413      	add	r3, r2
 800ef34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	7812      	ldrb	r2, [r2, #0]
 800ef3e:	0151      	lsls	r1, r2, #5
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	440a      	add	r2, r1
 800ef44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ef4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	015a      	lsls	r2, r3, #5
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	4413      	add	r3, r2
 800ef58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	683a      	ldr	r2, [r7, #0]
 800ef60:	7812      	ldrb	r2, [r2, #0]
 800ef62:	0151      	lsls	r1, r2, #5
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	440a      	add	r2, r1
 800ef68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3301      	adds	r3, #1
 800ef76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d902      	bls.n	800ef88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ef82:	2301      	movs	r3, #1
 800ef84:	75fb      	strb	r3, [r7, #23]
          break;
 800ef86:	e00c      	b.n	800efa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	015a      	lsls	r2, r3, #5
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	4413      	add	r3, r2
 800ef92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efa0:	d0e7      	beq.n	800ef72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800efa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	371c      	adds	r7, #28
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b089      	sub	sp, #36	; 0x24
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	4611      	mov	r1, r2
 800efbc:	461a      	mov	r2, r3
 800efbe:	460b      	mov	r3, r1
 800efc0:	71fb      	strb	r3, [r7, #7]
 800efc2:	4613      	mov	r3, r2
 800efc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800efce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d123      	bne.n	800f01e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800efd6:	88bb      	ldrh	r3, [r7, #4]
 800efd8:	3303      	adds	r3, #3
 800efda:	089b      	lsrs	r3, r3, #2
 800efdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800efde:	2300      	movs	r3, #0
 800efe0:	61bb      	str	r3, [r7, #24]
 800efe2:	e018      	b.n	800f016 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800efe4:	79fb      	ldrb	r3, [r7, #7]
 800efe6:	031a      	lsls	r2, r3, #12
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	4413      	add	r3, r2
 800efec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eff0:	461a      	mov	r2, r3
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	3301      	adds	r3, #1
 800effc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	3301      	adds	r3, #1
 800f002:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	3301      	adds	r3, #1
 800f008:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	3301      	adds	r3, #1
 800f00e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	3301      	adds	r3, #1
 800f014:	61bb      	str	r3, [r7, #24]
 800f016:	69ba      	ldr	r2, [r7, #24]
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d3e2      	bcc.n	800efe4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f01e:	2300      	movs	r3, #0
}
 800f020:	4618      	mov	r0, r3
 800f022:	3724      	adds	r7, #36	; 0x24
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b08b      	sub	sp, #44	; 0x2c
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	4613      	mov	r3, r2
 800f038:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f042:	88fb      	ldrh	r3, [r7, #6]
 800f044:	089b      	lsrs	r3, r3, #2
 800f046:	b29b      	uxth	r3, r3
 800f048:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f04a:	88fb      	ldrh	r3, [r7, #6]
 800f04c:	f003 0303 	and.w	r3, r3, #3
 800f050:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f052:	2300      	movs	r3, #0
 800f054:	623b      	str	r3, [r7, #32]
 800f056:	e014      	b.n	800f082 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	601a      	str	r2, [r3, #0]
    pDest++;
 800f064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f066:	3301      	adds	r3, #1
 800f068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06c:	3301      	adds	r3, #1
 800f06e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	3301      	adds	r3, #1
 800f074:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	3301      	adds	r3, #1
 800f07a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	3301      	adds	r3, #1
 800f080:	623b      	str	r3, [r7, #32]
 800f082:	6a3a      	ldr	r2, [r7, #32]
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	429a      	cmp	r2, r3
 800f088:	d3e6      	bcc.n	800f058 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f08a:	8bfb      	ldrh	r3, [r7, #30]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d01e      	beq.n	800f0ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f090:	2300      	movs	r3, #0
 800f092:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f09a:	461a      	mov	r2, r3
 800f09c:	f107 0310 	add.w	r3, r7, #16
 800f0a0:	6812      	ldr	r2, [r2, #0]
 800f0a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f0a4:	693a      	ldr	r2, [r7, #16]
 800f0a6:	6a3b      	ldr	r3, [r7, #32]
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	00db      	lsls	r3, r3, #3
 800f0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800f0b0:	b2da      	uxtb	r2, r3
 800f0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b4:	701a      	strb	r2, [r3, #0]
      i++;
 800f0b6:	6a3b      	ldr	r3, [r7, #32]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	623b      	str	r3, [r7, #32]
      pDest++;
 800f0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0be:	3301      	adds	r3, #1
 800f0c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f0c2:	8bfb      	ldrh	r3, [r7, #30]
 800f0c4:	3b01      	subs	r3, #1
 800f0c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f0c8:	8bfb      	ldrh	r3, [r7, #30]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1ea      	bne.n	800f0a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	372c      	adds	r7, #44	; 0x2c
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	785b      	ldrb	r3, [r3, #1]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d12c      	bne.n	800f152 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	015a      	lsls	r2, r3, #5
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	4413      	add	r3, r2
 800f100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	db12      	blt.n	800f130 <USB_EPSetStall+0x54>
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00f      	beq.n	800f130 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	015a      	lsls	r2, r3, #5
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	4413      	add	r3, r2
 800f118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68ba      	ldr	r2, [r7, #8]
 800f120:	0151      	lsls	r1, r2, #5
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	440a      	add	r2, r1
 800f126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f12a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f12e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	015a      	lsls	r2, r3, #5
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	4413      	add	r3, r2
 800f138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	0151      	lsls	r1, r2, #5
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	440a      	add	r2, r1
 800f146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f14a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f14e:	6013      	str	r3, [r2, #0]
 800f150:	e02b      	b.n	800f1aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	015a      	lsls	r2, r3, #5
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	4413      	add	r3, r2
 800f15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	db12      	blt.n	800f18a <USB_EPSetStall+0xae>
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00f      	beq.n	800f18a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	015a      	lsls	r2, r3, #5
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	4413      	add	r3, r2
 800f172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	68ba      	ldr	r2, [r7, #8]
 800f17a:	0151      	lsls	r1, r2, #5
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	440a      	add	r2, r1
 800f180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f188:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	015a      	lsls	r2, r3, #5
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	4413      	add	r3, r2
 800f192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	68ba      	ldr	r2, [r7, #8]
 800f19a:	0151      	lsls	r1, r2, #5
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	440a      	add	r2, r1
 800f1a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f1a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3714      	adds	r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	785b      	ldrb	r3, [r3, #1]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d128      	bne.n	800f226 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	015a      	lsls	r2, r3, #5
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	4413      	add	r3, r2
 800f1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	68ba      	ldr	r2, [r7, #8]
 800f1e4:	0151      	lsls	r1, r2, #5
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	440a      	add	r2, r1
 800f1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f1f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	791b      	ldrb	r3, [r3, #4]
 800f1f8:	2b03      	cmp	r3, #3
 800f1fa:	d003      	beq.n	800f204 <USB_EPClearStall+0x4c>
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	791b      	ldrb	r3, [r3, #4]
 800f200:	2b02      	cmp	r3, #2
 800f202:	d138      	bne.n	800f276 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	015a      	lsls	r2, r3, #5
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	4413      	add	r3, r2
 800f20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	0151      	lsls	r1, r2, #5
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	440a      	add	r2, r1
 800f21a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f21e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f222:	6013      	str	r3, [r2, #0]
 800f224:	e027      	b.n	800f276 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	015a      	lsls	r2, r3, #5
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	4413      	add	r3, r2
 800f22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	0151      	lsls	r1, r2, #5
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	440a      	add	r2, r1
 800f23c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f240:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f244:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	791b      	ldrb	r3, [r3, #4]
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d003      	beq.n	800f256 <USB_EPClearStall+0x9e>
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	791b      	ldrb	r3, [r3, #4]
 800f252:	2b02      	cmp	r3, #2
 800f254:	d10f      	bne.n	800f276 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	015a      	lsls	r2, r3, #5
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	4413      	add	r3, r2
 800f25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	68ba      	ldr	r2, [r7, #8]
 800f266:	0151      	lsls	r1, r2, #5
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	440a      	add	r2, r1
 800f26c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f274:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3714      	adds	r7, #20
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f284:	b480      	push	{r7}
 800f286:	b085      	sub	sp, #20
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	460b      	mov	r3, r1
 800f28e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f2a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	78fb      	ldrb	r3, [r7, #3]
 800f2b2:	011b      	lsls	r3, r3, #4
 800f2b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f2b8:	68f9      	ldr	r1, [r7, #12]
 800f2ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f2c2:	2300      	movs	r3, #0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3714      	adds	r7, #20
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	68fa      	ldr	r2, [r7, #12]
 800f2e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f2ea:	f023 0303 	bic.w	r3, r3, #3
 800f2ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2fe:	f023 0302 	bic.w	r3, r3, #2
 800f302:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f304:	2300      	movs	r3, #0
}
 800f306:	4618      	mov	r0, r3
 800f308:	3714      	adds	r7, #20
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr

0800f312 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f312:	b480      	push	{r7}
 800f314:	b085      	sub	sp, #20
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f32c:	f023 0303 	bic.w	r3, r3, #3
 800f330:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f340:	f043 0302 	orr.w	r3, r3, #2
 800f344:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f346:	2300      	movs	r3, #0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3714      	adds	r7, #20
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f354:	b480      	push	{r7}
 800f356:	b085      	sub	sp, #20
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	695b      	ldr	r3, [r3, #20]
 800f360:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	699b      	ldr	r3, [r3, #24]
 800f366:	68fa      	ldr	r2, [r7, #12]
 800f368:	4013      	ands	r3, r2
 800f36a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f36c:	68fb      	ldr	r3, [r7, #12]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3714      	adds	r7, #20
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr

0800f37a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f37a:	b480      	push	{r7}
 800f37c:	b085      	sub	sp, #20
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f38c:	699b      	ldr	r3, [r3, #24]
 800f38e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f396:	69db      	ldr	r3, [r3, #28]
 800f398:	68ba      	ldr	r2, [r7, #8]
 800f39a:	4013      	ands	r3, r2
 800f39c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	0c1b      	lsrs	r3, r3, #16
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3714      	adds	r7, #20
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr

0800f3ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f3ae:	b480      	push	{r7}
 800f3b0:	b085      	sub	sp, #20
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3c0:	699b      	ldr	r3, [r3, #24]
 800f3c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ca:	69db      	ldr	r3, [r3, #28]
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	b29b      	uxth	r3, r3
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f3e2:	b480      	push	{r7}
 800f3e4:	b085      	sub	sp, #20
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f3f2:	78fb      	ldrb	r3, [r7, #3]
 800f3f4:	015a      	lsls	r2, r3, #5
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	68ba      	ldr	r2, [r7, #8]
 800f40c:	4013      	ands	r3, r2
 800f40e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f410:	68bb      	ldr	r3, [r7, #8]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3714      	adds	r7, #20
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr

0800f41e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f41e:	b480      	push	{r7}
 800f420:	b087      	sub	sp, #28
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
 800f426:	460b      	mov	r3, r1
 800f428:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f440:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f442:	78fb      	ldrb	r3, [r7, #3]
 800f444:	f003 030f 	and.w	r3, r3, #15
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	fa22 f303 	lsr.w	r3, r2, r3
 800f44e:	01db      	lsls	r3, r3, #7
 800f450:	b2db      	uxtb	r3, r3
 800f452:	693a      	ldr	r2, [r7, #16]
 800f454:	4313      	orrs	r3, r2
 800f456:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f458:	78fb      	ldrb	r3, [r7, #3]
 800f45a:	015a      	lsls	r2, r3, #5
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	4413      	add	r3, r2
 800f460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	693a      	ldr	r2, [r7, #16]
 800f468:	4013      	ands	r3, r2
 800f46a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f46c:	68bb      	ldr	r3, [r7, #8]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	371c      	adds	r7, #28
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr

0800f47a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f47a:	b480      	push	{r7}
 800f47c:	b083      	sub	sp, #12
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	695b      	ldr	r3, [r3, #20]
 800f486:	f003 0301 	and.w	r3, r3, #1
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	370c      	adds	r7, #12
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f496:	b480      	push	{r7}
 800f498:	b085      	sub	sp, #20
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f4b4:	f023 0307 	bic.w	r3, r3, #7
 800f4b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3714      	adds	r7, #20
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b087      	sub	sp, #28
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	607a      	str	r2, [r7, #4]
 800f4e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	333c      	adds	r3, #60	; 0x3c
 800f4f2:	3304      	adds	r3, #4
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	4a26      	ldr	r2, [pc, #152]	; (800f594 <USB_EP0_OutStart+0xb8>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d90a      	bls.n	800f516 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f50c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f510:	d101      	bne.n	800f516 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	e037      	b.n	800f586 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f51c:	461a      	mov	r2, r3
 800f51e:	2300      	movs	r3, #0
 800f520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f53c:	691b      	ldr	r3, [r3, #16]
 800f53e:	697a      	ldr	r2, [r7, #20]
 800f540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f544:	f043 0318 	orr.w	r3, r3, #24
 800f548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f550:	691b      	ldr	r3, [r3, #16]
 800f552:	697a      	ldr	r2, [r7, #20]
 800f554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f558:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f55c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f55e:	7afb      	ldrb	r3, [r7, #11]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d10f      	bne.n	800f584 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f56a:	461a      	mov	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f57e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	371c      	adds	r7, #28
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr
 800f592:	bf00      	nop
 800f594:	4f54300a 	.word	0x4f54300a

0800f598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	4a13      	ldr	r2, [pc, #76]	; (800f5fc <USB_CoreReset+0x64>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d901      	bls.n	800f5b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f5b2:	2303      	movs	r3, #3
 800f5b4:	e01b      	b.n	800f5ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	daf2      	bge.n	800f5a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	691b      	ldr	r3, [r3, #16]
 800f5c6:	f043 0201 	orr.w	r2, r3, #1
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	4a09      	ldr	r2, [pc, #36]	; (800f5fc <USB_CoreReset+0x64>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d901      	bls.n	800f5e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f5dc:	2303      	movs	r3, #3
 800f5de:	e006      	b.n	800f5ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	691b      	ldr	r3, [r3, #16]
 800f5e4:	f003 0301 	and.w	r3, r3, #1
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d0f0      	beq.n	800f5ce <USB_CoreReset+0x36>

  return HAL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	00030d40 	.word	0x00030d40

0800f600 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	460b      	mov	r3, r1
 800f60a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800f60c:	2018      	movs	r0, #24
 800f60e:	f004 fc97 	bl	8013f40 <USBD_static_malloc>
 800f612:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d109      	bne.n	800f62e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	32b0      	adds	r2, #176	; 0xb0
 800f624:	2100      	movs	r1, #0
 800f626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f62a:	2302      	movs	r3, #2
 800f62c:	e08a      	b.n	800f744 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	32b0      	adds	r2, #176	; 0xb0
 800f638:	68f9      	ldr	r1, [r7, #12]
 800f63a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	32b0      	adds	r2, #176	; 0xb0
 800f648:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	7c1b      	ldrb	r3, [r3, #16]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d11b      	bne.n	800f692 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800f65a:	4b3c      	ldr	r3, [pc, #240]	; (800f74c <USBD_CUSTOM_HID_Init+0x14c>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f003 020f 	and.w	r2, r3, #15
 800f662:	6879      	ldr	r1, [r7, #4]
 800f664:	4613      	mov	r3, r2
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	4413      	add	r3, r2
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	440b      	add	r3, r1
 800f66e:	3326      	adds	r3, #38	; 0x26
 800f670:	2205      	movs	r2, #5
 800f672:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800f674:	4b36      	ldr	r3, [pc, #216]	; (800f750 <USBD_CUSTOM_HID_Init+0x150>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	f003 020f 	and.w	r2, r3, #15
 800f67c:	6879      	ldr	r1, [r7, #4]
 800f67e:	4613      	mov	r3, r2
 800f680:	009b      	lsls	r3, r3, #2
 800f682:	4413      	add	r3, r2
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	440b      	add	r3, r1
 800f688:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800f68c:	2205      	movs	r2, #5
 800f68e:	801a      	strh	r2, [r3, #0]
 800f690:	e01a      	b.n	800f6c8 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800f692:	4b2e      	ldr	r3, [pc, #184]	; (800f74c <USBD_CUSTOM_HID_Init+0x14c>)
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	f003 020f 	and.w	r2, r3, #15
 800f69a:	6879      	ldr	r1, [r7, #4]
 800f69c:	4613      	mov	r3, r2
 800f69e:	009b      	lsls	r3, r3, #2
 800f6a0:	4413      	add	r3, r2
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	440b      	add	r3, r1
 800f6a6:	3326      	adds	r3, #38	; 0x26
 800f6a8:	220a      	movs	r2, #10
 800f6aa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800f6ac:	4b28      	ldr	r3, [pc, #160]	; (800f750 <USBD_CUSTOM_HID_Init+0x150>)
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	f003 020f 	and.w	r2, r3, #15
 800f6b4:	6879      	ldr	r1, [r7, #4]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4413      	add	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	440b      	add	r3, r1
 800f6c0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800f6c4:	220a      	movs	r2, #10
 800f6c6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800f6c8:	4b20      	ldr	r3, [pc, #128]	; (800f74c <USBD_CUSTOM_HID_Init+0x14c>)
 800f6ca:	7819      	ldrb	r1, [r3, #0]
 800f6cc:	2340      	movs	r3, #64	; 0x40
 800f6ce:	2203      	movs	r2, #3
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f004 fb24 	bl	8013d1e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800f6d6:	4b1d      	ldr	r3, [pc, #116]	; (800f74c <USBD_CUSTOM_HID_Init+0x14c>)
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	f003 020f 	and.w	r2, r3, #15
 800f6de:	6879      	ldr	r1, [r7, #4]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	4413      	add	r3, r2
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	440b      	add	r3, r1
 800f6ea:	3324      	adds	r3, #36	; 0x24
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800f6f0:	4b17      	ldr	r3, [pc, #92]	; (800f750 <USBD_CUSTOM_HID_Init+0x150>)
 800f6f2:	7819      	ldrb	r1, [r3, #0]
 800f6f4:	2340      	movs	r3, #64	; 0x40
 800f6f6:	2203      	movs	r2, #3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f004 fb10 	bl	8013d1e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800f6fe:	4b14      	ldr	r3, [pc, #80]	; (800f750 <USBD_CUSTOM_HID_Init+0x150>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	f003 020f 	and.w	r2, r3, #15
 800f706:	6879      	ldr	r1, [r7, #4]
 800f708:	4613      	mov	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4413      	add	r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	440b      	add	r3, r1
 800f712:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f716:	2201      	movs	r2, #1
 800f718:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2200      	movs	r2, #0
 800f71e:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	33b0      	adds	r3, #176	; 0xb0
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	4413      	add	r3, r2
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800f734:	4b06      	ldr	r3, [pc, #24]	; (800f750 <USBD_CUSTOM_HID_Init+0x150>)
 800f736:	7819      	ldrb	r1, [r3, #0]
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	2302      	movs	r3, #2
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f004 fbdd 	bl	8013efc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800f742:	2300      	movs	r3, #0
}
 800f744:	4618      	mov	r0, r3
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	2000009a 	.word	0x2000009a
 800f750:	2000009b 	.word	0x2000009b

0800f754 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	460b      	mov	r3, r1
 800f75e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800f760:	4b37      	ldr	r3, [pc, #220]	; (800f840 <USBD_CUSTOM_HID_DeInit+0xec>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	4619      	mov	r1, r3
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f004 faff 	bl	8013d6a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800f76c:	4b34      	ldr	r3, [pc, #208]	; (800f840 <USBD_CUSTOM_HID_DeInit+0xec>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	f003 020f 	and.w	r2, r3, #15
 800f774:	6879      	ldr	r1, [r7, #4]
 800f776:	4613      	mov	r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	4413      	add	r3, r2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	440b      	add	r3, r1
 800f780:	3324      	adds	r3, #36	; 0x24
 800f782:	2200      	movs	r2, #0
 800f784:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800f786:	4b2e      	ldr	r3, [pc, #184]	; (800f840 <USBD_CUSTOM_HID_DeInit+0xec>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	f003 020f 	and.w	r2, r3, #15
 800f78e:	6879      	ldr	r1, [r7, #4]
 800f790:	4613      	mov	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	440b      	add	r3, r1
 800f79a:	3326      	adds	r3, #38	; 0x26
 800f79c:	2200      	movs	r2, #0
 800f79e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800f7a0:	4b28      	ldr	r3, [pc, #160]	; (800f844 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f004 fadf 	bl	8013d6a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800f7ac:	4b25      	ldr	r3, [pc, #148]	; (800f844 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	f003 020f 	and.w	r2, r3, #15
 800f7b4:	6879      	ldr	r1, [r7, #4]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	440b      	add	r3, r1
 800f7c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800f7c8:	4b1e      	ldr	r3, [pc, #120]	; (800f844 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	f003 020f 	and.w	r2, r3, #15
 800f7d0:	6879      	ldr	r1, [r7, #4]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	4413      	add	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	440b      	add	r3, r1
 800f7dc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	32b0      	adds	r2, #176	; 0xb0
 800f7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d01f      	beq.n	800f836 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	33b0      	adds	r3, #176	; 0xb0
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4413      	add	r3, r2
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	32b0      	adds	r2, #176	; 0xb0
 800f814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f818:	4618      	mov	r0, r3
 800f81a:	f004 fb9f 	bl	8013f5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	32b0      	adds	r2, #176	; 0xb0
 800f828:	2100      	movs	r1, #0
 800f82a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	2000009a 	.word	0x2000009a
 800f844:	2000009b 	.word	0x2000009b

0800f848 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b088      	sub	sp, #32
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	32b0      	adds	r2, #176	; 0xb0
 800f85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f860:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800f862:	2300      	movs	r3, #0
 800f864:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800f866:	2300      	movs	r3, #0
 800f868:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800f86a:	2300      	movs	r3, #0
 800f86c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d101      	bne.n	800f87c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800f878:	2303      	movs	r3, #3
 800f87a:	e0f8      	b.n	800fa6e <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f884:	2b00      	cmp	r3, #0
 800f886:	d056      	beq.n	800f936 <USBD_CUSTOM_HID_Setup+0xee>
 800f888:	2b20      	cmp	r3, #32
 800f88a:	f040 80e8 	bne.w	800fa5e <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	785b      	ldrb	r3, [r3, #1]
 800f892:	3b02      	subs	r3, #2
 800f894:	2b09      	cmp	r3, #9
 800f896:	d846      	bhi.n	800f926 <USBD_CUSTOM_HID_Setup+0xde>
 800f898:	a201      	add	r2, pc, #4	; (adr r2, 800f8a0 <USBD_CUSTOM_HID_Setup+0x58>)
 800f89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f89e:	bf00      	nop
 800f8a0:	0800f8f9 	.word	0x0800f8f9
 800f8a4:	0800f8d7 	.word	0x0800f8d7
 800f8a8:	0800f927 	.word	0x0800f927
 800f8ac:	0800f927 	.word	0x0800f927
 800f8b0:	0800f927 	.word	0x0800f927
 800f8b4:	0800f927 	.word	0x0800f927
 800f8b8:	0800f927 	.word	0x0800f927
 800f8bc:	0800f909 	.word	0x0800f909
 800f8c0:	0800f8e7 	.word	0x0800f8e7
 800f8c4:	0800f8c9 	.word	0x0800f8c9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	885b      	ldrh	r3, [r3, #2]
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	605a      	str	r2, [r3, #4]
          break;
 800f8d4:	e02e      	b.n	800f934 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	3304      	adds	r3, #4
 800f8da:	2201      	movs	r2, #1
 800f8dc:	4619      	mov	r1, r3
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f001 fca0 	bl	8011224 <USBD_CtlSendData>
          break;
 800f8e4:	e026      	b.n	800f934 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	885b      	ldrh	r3, [r3, #2]
 800f8ea:	0a1b      	lsrs	r3, r3, #8
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	609a      	str	r2, [r3, #8]
          break;
 800f8f6:	e01d      	b.n	800f934 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	3308      	adds	r3, #8
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f001 fc8f 	bl	8011224 <USBD_CtlSendData>
          break;
 800f906:	e015      	b.n	800f934 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	2201      	movs	r2, #1
 800f90c:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800f90e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	88db      	ldrh	r3, [r3, #6]
 800f914:	2b02      	cmp	r3, #2
 800f916:	bf28      	it	cs
 800f918:	2302      	movcs	r3, #2
 800f91a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800f91c:	461a      	mov	r2, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f001 fcac 	bl	801127c <USBD_CtlPrepareRx>
          break;
 800f924:	e006      	b.n	800f934 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f001 fc0a 	bl	8011142 <USBD_CtlError>
          ret = USBD_FAIL;
 800f92e:	2303      	movs	r3, #3
 800f930:	75fb      	strb	r3, [r7, #23]
          break;
 800f932:	bf00      	nop
      }
      break;
 800f934:	e09a      	b.n	800fa6c <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	785b      	ldrb	r3, [r3, #1]
 800f93a:	2b0b      	cmp	r3, #11
 800f93c:	f200 8086 	bhi.w	800fa4c <USBD_CUSTOM_HID_Setup+0x204>
 800f940:	a201      	add	r2, pc, #4	; (adr r2, 800f948 <USBD_CUSTOM_HID_Setup+0x100>)
 800f942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f946:	bf00      	nop
 800f948:	0800f979 	.word	0x0800f979
 800f94c:	0800fa5b 	.word	0x0800fa5b
 800f950:	0800fa4d 	.word	0x0800fa4d
 800f954:	0800fa4d 	.word	0x0800fa4d
 800f958:	0800fa4d 	.word	0x0800fa4d
 800f95c:	0800fa4d 	.word	0x0800fa4d
 800f960:	0800f9a3 	.word	0x0800f9a3
 800f964:	0800fa4d 	.word	0x0800fa4d
 800f968:	0800fa4d 	.word	0x0800fa4d
 800f96c:	0800fa4d 	.word	0x0800fa4d
 800f970:	0800f9fb 	.word	0x0800f9fb
 800f974:	0800fa25 	.word	0x0800fa25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	2b03      	cmp	r3, #3
 800f982:	d107      	bne.n	800f994 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f984:	f107 030e 	add.w	r3, r7, #14
 800f988:	2202      	movs	r2, #2
 800f98a:	4619      	mov	r1, r3
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f001 fc49 	bl	8011224 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f992:	e063      	b.n	800fa5c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800f994:	6839      	ldr	r1, [r7, #0]
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f001 fbd3 	bl	8011142 <USBD_CtlError>
            ret = USBD_FAIL;
 800f99c:	2303      	movs	r3, #3
 800f99e:	75fb      	strb	r3, [r7, #23]
          break;
 800f9a0:	e05c      	b.n	800fa5c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	885b      	ldrh	r3, [r3, #2]
 800f9a6:	0a1b      	lsrs	r3, r3, #8
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	2b22      	cmp	r3, #34	; 0x22
 800f9ac:	d110      	bne.n	800f9d0 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	88db      	ldrh	r3, [r3, #6]
 800f9b2:	2b21      	cmp	r3, #33	; 0x21
 800f9b4:	bf28      	it	cs
 800f9b6:	2321      	movcs	r3, #33	; 0x21
 800f9b8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	33b0      	adds	r3, #176	; 0xb0
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	4413      	add	r3, r2
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	61bb      	str	r3, [r7, #24]
 800f9ce:	e00d      	b.n	800f9ec <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	885b      	ldrh	r3, [r3, #2]
 800f9d4:	0a1b      	lsrs	r3, r3, #8
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	2b21      	cmp	r3, #33	; 0x21
 800f9da:	d107      	bne.n	800f9ec <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800f9dc:	4b26      	ldr	r3, [pc, #152]	; (800fa78 <USBD_CUSTOM_HID_Setup+0x230>)
 800f9de:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	88db      	ldrh	r3, [r3, #6]
 800f9e4:	2b09      	cmp	r3, #9
 800f9e6:	bf28      	it	cs
 800f9e8:	2309      	movcs	r3, #9
 800f9ea:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800f9ec:	8bfb      	ldrh	r3, [r7, #30]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	69b9      	ldr	r1, [r7, #24]
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f001 fc16 	bl	8011224 <USBD_CtlSendData>
          break;
 800f9f8:	e030      	b.n	800fa5c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	d107      	bne.n	800fa16 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	330c      	adds	r3, #12
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f001 fc08 	bl	8011224 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa14:	e022      	b.n	800fa5c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800fa16:	6839      	ldr	r1, [r7, #0]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f001 fb92 	bl	8011142 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa1e:	2303      	movs	r3, #3
 800fa20:	75fb      	strb	r3, [r7, #23]
          break;
 800fa22:	e01b      	b.n	800fa5c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	2b03      	cmp	r3, #3
 800fa2e:	d106      	bne.n	800fa3e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	885b      	ldrh	r3, [r3, #2]
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	461a      	mov	r2, r3
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa3c:	e00e      	b.n	800fa5c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800fa3e:	6839      	ldr	r1, [r7, #0]
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f001 fb7e 	bl	8011142 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa46:	2303      	movs	r3, #3
 800fa48:	75fb      	strb	r3, [r7, #23]
          break;
 800fa4a:	e007      	b.n	800fa5c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fa4c:	6839      	ldr	r1, [r7, #0]
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f001 fb77 	bl	8011142 <USBD_CtlError>
          ret = USBD_FAIL;
 800fa54:	2303      	movs	r3, #3
 800fa56:	75fb      	strb	r3, [r7, #23]
          break;
 800fa58:	e000      	b.n	800fa5c <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800fa5a:	bf00      	nop
      }
      break;
 800fa5c:	e006      	b.n	800fa6c <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f001 fb6e 	bl	8011142 <USBD_CtlError>
      ret = USBD_FAIL;
 800fa66:	2303      	movs	r3, #3
 800fa68:	75fb      	strb	r3, [r7, #23]
      break;
 800fa6a:	bf00      	nop
  }
  return (uint8_t)ret;
 800fa6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3720      	adds	r7, #32
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	20000084 	.word	0x20000084

0800fa7c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b086      	sub	sp, #24
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	4613      	mov	r3, r2
 800fa88:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	32b0      	adds	r2, #176	; 0xb0
 800fa94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d101      	bne.n	800faa0 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	e01f      	b.n	800fae0 <USBD_CUSTOM_HID_SendReport+0x64>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	32b0      	adds	r2, #176	; 0xb0
 800faaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faae:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b03      	cmp	r3, #3
 800faba:	d110      	bne.n	800fade <USBD_CUSTOM_HID_SendReport+0x62>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	7d1b      	ldrb	r3, [r3, #20]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d10a      	bne.n	800fada <USBD_CUSTOM_HID_SendReport+0x5e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	2201      	movs	r2, #1
 800fac8:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800faca:	4b07      	ldr	r3, [pc, #28]	; (800fae8 <USBD_CUSTOM_HID_SendReport+0x6c>)
 800facc:	7819      	ldrb	r1, [r3, #0]
 800face:	88fb      	ldrh	r3, [r7, #6]
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f004 f9f1 	bl	8013eba <USBD_LL_Transmit>
 800fad8:	e001      	b.n	800fade <USBD_CUSTOM_HID_SendReport+0x62>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800fada:	2301      	movs	r3, #1
 800fadc:	e000      	b.n	800fae0 <USBD_CUSTOM_HID_SendReport+0x64>
    }
  }
  return (uint8_t)USBD_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	2000009a 	.word	0x2000009a

0800faec <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800faf4:	2181      	movs	r1, #129	; 0x81
 800faf6:	4815      	ldr	r0, [pc, #84]	; (800fb4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800faf8:	f000 fceb 	bl	80104d2 <USBD_GetEpDesc>
 800fafc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fafe:	2101      	movs	r1, #1
 800fb00:	4812      	ldr	r0, [pc, #72]	; (800fb4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800fb02:	f000 fce6 	bl	80104d2 <USBD_GetEpDesc>
 800fb06:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d009      	beq.n	800fb22 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb16:	711a      	strb	r2, [r3, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	220a      	movs	r2, #10
 800fb20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d009      	beq.n	800fb3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb30:	711a      	strb	r2, [r3, #4]
 800fb32:	2200      	movs	r2, #0
 800fb34:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	220a      	movs	r2, #10
 800fb3a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2229      	movs	r2, #41	; 0x29
 800fb40:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fb42:	4b02      	ldr	r3, [pc, #8]	; (800fb4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3710      	adds	r7, #16
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	20000058 	.word	0x20000058

0800fb50 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800fb58:	2181      	movs	r1, #129	; 0x81
 800fb5a:	4815      	ldr	r0, [pc, #84]	; (800fbb0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800fb5c:	f000 fcb9 	bl	80104d2 <USBD_GetEpDesc>
 800fb60:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fb62:	2101      	movs	r1, #1
 800fb64:	4812      	ldr	r0, [pc, #72]	; (800fbb0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800fb66:	f000 fcb4 	bl	80104d2 <USBD_GetEpDesc>
 800fb6a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d009      	beq.n	800fb86 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb7a:	711a      	strb	r2, [r3, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2205      	movs	r2, #5
 800fb84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d009      	beq.n	800fba0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb94:	711a      	strb	r2, [r3, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2205      	movs	r2, #5
 800fb9e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2229      	movs	r2, #41	; 0x29
 800fba4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fba6:	4b02      	ldr	r3, [pc, #8]	; (800fbb0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	20000058 	.word	0x20000058

0800fbb4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800fbbc:	2181      	movs	r1, #129	; 0x81
 800fbbe:	4815      	ldr	r0, [pc, #84]	; (800fc14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800fbc0:	f000 fc87 	bl	80104d2 <USBD_GetEpDesc>
 800fbc4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fbc6:	2101      	movs	r1, #1
 800fbc8:	4812      	ldr	r0, [pc, #72]	; (800fc14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800fbca:	f000 fc82 	bl	80104d2 <USBD_GetEpDesc>
 800fbce:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d009      	beq.n	800fbea <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fbde:	711a      	strb	r2, [r3, #4]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	220a      	movs	r2, #10
 800fbe8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d009      	beq.n	800fc04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fbf8:	711a      	strb	r2, [r3, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	220a      	movs	r2, #10
 800fc02:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2229      	movs	r2, #41	; 0x29
 800fc08:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fc0a:	4b02      	ldr	r3, [pc, #8]	; (800fc14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	20000058 	.word	0x20000058

0800fc18 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	460b      	mov	r3, r1
 800fc22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	32b0      	adds	r2, #176	; 0xb0
 800fc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc32:	2200      	movs	r2, #0
 800fc34:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	32b0      	adds	r2, #176	; 0xb0
 800fc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d101      	bne.n	800fc66 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fc62:	2303      	movs	r3, #3
 800fc64:	e014      	b.n	800fc90 <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	32b0      	adds	r2, #176	; 0xb0
 800fc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc74:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                           //hhid->Report_buf[1]);
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	33b0      	adds	r3, #176	; 0xb0
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	4413      	add	r3, r2
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	4610      	mov	r0, r2
 800fc8c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	32b0      	adds	r2, #176	; 0xb0
 800fcaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcae:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d101      	bne.n	800fcba <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fcb6:	2303      	movs	r3, #3
 800fcb8:	e013      	b.n	800fce2 <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	691b      	ldr	r3, [r3, #16]
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d10e      	bne.n	800fce0 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    /*((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                             hhid->Report_buf[1]);*/
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	33b0      	adds	r3, #176	; 0xb0
 800fccc:	009b      	lsls	r3, r3, #2
 800fcce:	4413      	add	r3, r2
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800fce0:	2300      	movs	r3, #0
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b083      	sub	sp, #12
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	220a      	movs	r2, #10
 800fcf8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800fcfa:	4b03      	ldr	r3, [pc, #12]	; (800fd08 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr
 800fd08:	20000090 	.word	0x20000090

0800fd0c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d101      	bne.n	800fd20 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fd1c:	2303      	movs	r3, #3
 800fd1e:	e009      	b.n	800fd34 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	33b0      	adds	r3, #176	; 0xb0
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	4413      	add	r3, r2
 800fd2e:	683a      	ldr	r2, [r7, #0]
 800fd30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	370c      	adds	r7, #12
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	4613      	mov	r3, r2
 800fd4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d101      	bne.n	800fd58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fd54:	2303      	movs	r3, #3
 800fd56:	e01f      	b.n	800fd98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d003      	beq.n	800fd7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2201      	movs	r2, #1
 800fd82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	79fa      	ldrb	r2, [r7, #7]
 800fd8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f003 ff5f 	bl	8013c50 <USBD_LL_Init>
 800fd92:	4603      	mov	r3, r0
 800fd94:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fd96:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3718      	adds	r7, #24
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fdb4:	2303      	movs	r3, #3
 800fdb6:	e025      	b.n	800fe04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	32ae      	adds	r2, #174	; 0xae
 800fdca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d00f      	beq.n	800fdf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	32ae      	adds	r2, #174	; 0xae
 800fdde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde4:	f107 020e 	add.w	r2, r7, #14
 800fde8:	4610      	mov	r0, r2
 800fdea:	4798      	blx	r3
 800fdec:	4602      	mov	r2, r0
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fdfa:	1c5a      	adds	r2, r3, #1
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3710      	adds	r7, #16
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f003 ff67 	bl	8013ce8 <USBD_LL_Start>
 800fe1a:	4603      	mov	r3, r0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fe2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	370c      	adds	r7, #12
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr

0800fe3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	460b      	mov	r3, r1
 800fe44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe46:	2300      	movs	r3, #0
 800fe48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d009      	beq.n	800fe68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	78fa      	ldrb	r2, [r7, #3]
 800fe5e:	4611      	mov	r1, r2
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	4798      	blx	r3
 800fe64:	4603      	mov	r3, r0
 800fe66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}

0800fe72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe72:	b580      	push	{r7, lr}
 800fe74:	b084      	sub	sp, #16
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
 800fe7a:	460b      	mov	r3, r1
 800fe7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	78fa      	ldrb	r2, [r7, #3]
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	4798      	blx	r3
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d001      	beq.n	800fe9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fe98:	2303      	movs	r3, #3
 800fe9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b084      	sub	sp, #16
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
 800feae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800feb6:	6839      	ldr	r1, [r7, #0]
 800feb8:	4618      	mov	r0, r3
 800feba:	f001 f908 	bl	80110ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2201      	movs	r2, #1
 800fec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fecc:	461a      	mov	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800feda:	f003 031f 	and.w	r3, r3, #31
 800fede:	2b02      	cmp	r3, #2
 800fee0:	d01a      	beq.n	800ff18 <USBD_LL_SetupStage+0x72>
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d822      	bhi.n	800ff2c <USBD_LL_SetupStage+0x86>
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d002      	beq.n	800fef0 <USBD_LL_SetupStage+0x4a>
 800feea:	2b01      	cmp	r3, #1
 800feec:	d00a      	beq.n	800ff04 <USBD_LL_SetupStage+0x5e>
 800feee:	e01d      	b.n	800ff2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fef6:	4619      	mov	r1, r3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 fb5f 	bl	80105bc <USBD_StdDevReq>
 800fefe:	4603      	mov	r3, r0
 800ff00:	73fb      	strb	r3, [r7, #15]
      break;
 800ff02:	e020      	b.n	800ff46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 fbc7 	bl	80106a0 <USBD_StdItfReq>
 800ff12:	4603      	mov	r3, r0
 800ff14:	73fb      	strb	r3, [r7, #15]
      break;
 800ff16:	e016      	b.n	800ff46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ff1e:	4619      	mov	r1, r3
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 fc29 	bl	8010778 <USBD_StdEPReq>
 800ff26:	4603      	mov	r3, r0
 800ff28:	73fb      	strb	r3, [r7, #15]
      break;
 800ff2a:	e00c      	b.n	800ff46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ff32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	4619      	mov	r1, r3
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f003 ff34 	bl	8013da8 <USBD_LL_StallEP>
 800ff40:	4603      	mov	r3, r0
 800ff42:	73fb      	strb	r3, [r7, #15]
      break;
 800ff44:	bf00      	nop
  }

  return ret;
 800ff46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3710      	adds	r7, #16
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	607a      	str	r2, [r7, #4]
 800ff5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ff62:	7afb      	ldrb	r3, [r7, #11]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d16e      	bne.n	8010046 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ff6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff76:	2b03      	cmp	r3, #3
 800ff78:	f040 8098 	bne.w	80100ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	689a      	ldr	r2, [r3, #8]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d913      	bls.n	800ffb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	689a      	ldr	r2, [r3, #8]
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	1ad2      	subs	r2, r2, r3
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	68da      	ldr	r2, [r3, #12]
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	bf28      	it	cs
 800ffa2:	4613      	movcs	r3, r2
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	6879      	ldr	r1, [r7, #4]
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f001 f984 	bl	80112b6 <USBD_CtlContinueRx>
 800ffae:	e07d      	b.n	80100ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ffb6:	f003 031f 	and.w	r3, r3, #31
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d014      	beq.n	800ffe8 <USBD_LL_DataOutStage+0x98>
 800ffbe:	2b02      	cmp	r3, #2
 800ffc0:	d81d      	bhi.n	800fffe <USBD_LL_DataOutStage+0xae>
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d002      	beq.n	800ffcc <USBD_LL_DataOutStage+0x7c>
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d003      	beq.n	800ffd2 <USBD_LL_DataOutStage+0x82>
 800ffca:	e018      	b.n	800fffe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	75bb      	strb	r3, [r7, #22]
            break;
 800ffd0:	e018      	b.n	8010004 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	4619      	mov	r1, r3
 800ffdc:	68f8      	ldr	r0, [r7, #12]
 800ffde:	f000 fa5e 	bl	801049e <USBD_CoreFindIF>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	75bb      	strb	r3, [r7, #22]
            break;
 800ffe6:	e00d      	b.n	8010004 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	4619      	mov	r1, r3
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f000 fa60 	bl	80104b8 <USBD_CoreFindEP>
 800fff8:	4603      	mov	r3, r0
 800fffa:	75bb      	strb	r3, [r7, #22]
            break;
 800fffc:	e002      	b.n	8010004 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fffe:	2300      	movs	r3, #0
 8010000:	75bb      	strb	r3, [r7, #22]
            break;
 8010002:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010004:	7dbb      	ldrb	r3, [r7, #22]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d119      	bne.n	801003e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010010:	b2db      	uxtb	r3, r3
 8010012:	2b03      	cmp	r3, #3
 8010014:	d113      	bne.n	801003e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010016:	7dba      	ldrb	r2, [r7, #22]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	32ae      	adds	r2, #174	; 0xae
 801001c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00b      	beq.n	801003e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010026:	7dba      	ldrb	r2, [r7, #22]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801002e:	7dba      	ldrb	r2, [r7, #22]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	32ae      	adds	r2, #174	; 0xae
 8010034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010038:	691b      	ldr	r3, [r3, #16]
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f001 f94a 	bl	80112d8 <USBD_CtlSendStatus>
 8010044:	e032      	b.n	80100ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010046:	7afb      	ldrb	r3, [r7, #11]
 8010048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801004c:	b2db      	uxtb	r3, r3
 801004e:	4619      	mov	r1, r3
 8010050:	68f8      	ldr	r0, [r7, #12]
 8010052:	f000 fa31 	bl	80104b8 <USBD_CoreFindEP>
 8010056:	4603      	mov	r3, r0
 8010058:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801005a:	7dbb      	ldrb	r3, [r7, #22]
 801005c:	2bff      	cmp	r3, #255	; 0xff
 801005e:	d025      	beq.n	80100ac <USBD_LL_DataOutStage+0x15c>
 8010060:	7dbb      	ldrb	r3, [r7, #22]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d122      	bne.n	80100ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801006c:	b2db      	uxtb	r3, r3
 801006e:	2b03      	cmp	r3, #3
 8010070:	d117      	bne.n	80100a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010072:	7dba      	ldrb	r2, [r7, #22]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	32ae      	adds	r2, #174	; 0xae
 8010078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801007c:	699b      	ldr	r3, [r3, #24]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00f      	beq.n	80100a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010082:	7dba      	ldrb	r2, [r7, #22]
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801008a:	7dba      	ldrb	r2, [r7, #22]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	32ae      	adds	r2, #174	; 0xae
 8010090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010094:	699b      	ldr	r3, [r3, #24]
 8010096:	7afa      	ldrb	r2, [r7, #11]
 8010098:	4611      	mov	r1, r2
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	4798      	blx	r3
 801009e:	4603      	mov	r3, r0
 80100a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80100a2:	7dfb      	ldrb	r3, [r7, #23]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d001      	beq.n	80100ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80100a8:	7dfb      	ldrb	r3, [r7, #23]
 80100aa:	e000      	b.n	80100ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80100ac:	2300      	movs	r3, #0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3718      	adds	r7, #24
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b086      	sub	sp, #24
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	60f8      	str	r0, [r7, #12]
 80100be:	460b      	mov	r3, r1
 80100c0:	607a      	str	r2, [r7, #4]
 80100c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80100c4:	7afb      	ldrb	r3, [r7, #11]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d16f      	bne.n	80101aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	3314      	adds	r3, #20
 80100ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	d15a      	bne.n	8010190 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	689a      	ldr	r2, [r3, #8]
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d914      	bls.n	8010110 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	689a      	ldr	r2, [r3, #8]
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	1ad2      	subs	r2, r2, r3
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	689b      	ldr	r3, [r3, #8]
 80100f8:	461a      	mov	r2, r3
 80100fa:	6879      	ldr	r1, [r7, #4]
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f001 f8ac 	bl	801125a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010102:	2300      	movs	r3, #0
 8010104:	2200      	movs	r2, #0
 8010106:	2100      	movs	r1, #0
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f003 fef7 	bl	8013efc <USBD_LL_PrepareReceive>
 801010e:	e03f      	b.n	8010190 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	68da      	ldr	r2, [r3, #12]
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	429a      	cmp	r2, r3
 801011a:	d11c      	bne.n	8010156 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	685a      	ldr	r2, [r3, #4]
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010124:	429a      	cmp	r2, r3
 8010126:	d316      	bcc.n	8010156 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	685a      	ldr	r2, [r3, #4]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010132:	429a      	cmp	r2, r3
 8010134:	d20f      	bcs.n	8010156 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010136:	2200      	movs	r2, #0
 8010138:	2100      	movs	r1, #0
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	f001 f88d 	bl	801125a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2200      	movs	r2, #0
 8010144:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010148:	2300      	movs	r3, #0
 801014a:	2200      	movs	r2, #0
 801014c:	2100      	movs	r1, #0
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f003 fed4 	bl	8013efc <USBD_LL_PrepareReceive>
 8010154:	e01c      	b.n	8010190 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801015c:	b2db      	uxtb	r3, r3
 801015e:	2b03      	cmp	r3, #3
 8010160:	d10f      	bne.n	8010182 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d009      	beq.n	8010182 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2200      	movs	r2, #0
 8010172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010182:	2180      	movs	r1, #128	; 0x80
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f003 fe0f 	bl	8013da8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f001 f8b7 	bl	80112fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d03a      	beq.n	8010210 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff fe42 	bl	800fe24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80101a8:	e032      	b.n	8010210 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80101aa:	7afb      	ldrb	r3, [r7, #11]
 80101ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	4619      	mov	r1, r3
 80101b4:	68f8      	ldr	r0, [r7, #12]
 80101b6:	f000 f97f 	bl	80104b8 <USBD_CoreFindEP>
 80101ba:	4603      	mov	r3, r0
 80101bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80101be:	7dfb      	ldrb	r3, [r7, #23]
 80101c0:	2bff      	cmp	r3, #255	; 0xff
 80101c2:	d025      	beq.n	8010210 <USBD_LL_DataInStage+0x15a>
 80101c4:	7dfb      	ldrb	r3, [r7, #23]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d122      	bne.n	8010210 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b03      	cmp	r3, #3
 80101d4:	d11c      	bne.n	8010210 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80101d6:	7dfa      	ldrb	r2, [r7, #23]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	32ae      	adds	r2, #174	; 0xae
 80101dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e0:	695b      	ldr	r3, [r3, #20]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d014      	beq.n	8010210 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80101e6:	7dfa      	ldrb	r2, [r7, #23]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80101ee:	7dfa      	ldrb	r2, [r7, #23]
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	32ae      	adds	r2, #174	; 0xae
 80101f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101f8:	695b      	ldr	r3, [r3, #20]
 80101fa:	7afa      	ldrb	r2, [r7, #11]
 80101fc:	4611      	mov	r1, r2
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	4798      	blx	r3
 8010202:	4603      	mov	r3, r0
 8010204:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010206:	7dbb      	ldrb	r3, [r7, #22]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d001      	beq.n	8010210 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801020c:	7dbb      	ldrb	r3, [r7, #22]
 801020e:	e000      	b.n	8010212 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010210:	2300      	movs	r3, #0
}
 8010212:	4618      	mov	r0, r3
 8010214:	3718      	adds	r7, #24
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801021a:	b580      	push	{r7, lr}
 801021c:	b084      	sub	sp, #16
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010222:	2300      	movs	r3, #0
 8010224:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2200      	movs	r2, #0
 8010232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2200      	movs	r2, #0
 8010248:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010252:	2b00      	cmp	r3, #0
 8010254:	d014      	beq.n	8010280 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00e      	beq.n	8010280 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	6852      	ldr	r2, [r2, #4]
 801026e:	b2d2      	uxtb	r2, r2
 8010270:	4611      	mov	r1, r2
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	4798      	blx	r3
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801027c:	2303      	movs	r3, #3
 801027e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010280:	2340      	movs	r3, #64	; 0x40
 8010282:	2200      	movs	r2, #0
 8010284:	2100      	movs	r1, #0
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f003 fd49 	bl	8013d1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2201      	movs	r2, #1
 8010290:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2240      	movs	r2, #64	; 0x40
 8010298:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801029c:	2340      	movs	r3, #64	; 0x40
 801029e:	2200      	movs	r2, #0
 80102a0:	2180      	movs	r1, #128	; 0x80
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f003 fd3b 	bl	8013d1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2201      	movs	r2, #1
 80102ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2240      	movs	r2, #64	; 0x40
 80102b2:	621a      	str	r2, [r3, #32]

  return ret;
 80102b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80102be:	b480      	push	{r7}
 80102c0:	b083      	sub	sp, #12
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	460b      	mov	r3, r1
 80102c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	78fa      	ldrb	r2, [r7, #3]
 80102ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80102de:	b480      	push	{r7}
 80102e0:	b083      	sub	sp, #12
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2204      	movs	r2, #4
 80102f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80102fc:	2300      	movs	r3, #0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801030a:	b480      	push	{r7}
 801030c:	b083      	sub	sp, #12
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010318:	b2db      	uxtb	r3, r3
 801031a:	2b04      	cmp	r3, #4
 801031c:	d106      	bne.n	801032c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010324:	b2da      	uxtb	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801032c:	2300      	movs	r3, #0
}
 801032e:	4618      	mov	r0, r3
 8010330:	370c      	adds	r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr

0801033a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b082      	sub	sp, #8
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b03      	cmp	r3, #3
 801034c:	d110      	bne.n	8010370 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00b      	beq.n	8010370 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801035e:	69db      	ldr	r3, [r3, #28]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d005      	beq.n	8010370 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801036a:	69db      	ldr	r3, [r3, #28]
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010370:	2300      	movs	r3, #0
}
 8010372:	4618      	mov	r0, r3
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b082      	sub	sp, #8
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
 8010382:	460b      	mov	r3, r1
 8010384:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	32ae      	adds	r2, #174	; 0xae
 8010390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d101      	bne.n	801039c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010398:	2303      	movs	r3, #3
 801039a:	e01c      	b.n	80103d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	2b03      	cmp	r3, #3
 80103a6:	d115      	bne.n	80103d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	32ae      	adds	r2, #174	; 0xae
 80103b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b6:	6a1b      	ldr	r3, [r3, #32]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00b      	beq.n	80103d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	32ae      	adds	r2, #174	; 0xae
 80103c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ca:	6a1b      	ldr	r3, [r3, #32]
 80103cc:	78fa      	ldrb	r2, [r7, #3]
 80103ce:	4611      	mov	r1, r2
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b082      	sub	sp, #8
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	460b      	mov	r3, r1
 80103e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	32ae      	adds	r2, #174	; 0xae
 80103f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d101      	bne.n	8010400 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80103fc:	2303      	movs	r3, #3
 80103fe:	e01c      	b.n	801043a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010406:	b2db      	uxtb	r3, r3
 8010408:	2b03      	cmp	r3, #3
 801040a:	d115      	bne.n	8010438 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	32ae      	adds	r2, #174	; 0xae
 8010416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801041c:	2b00      	cmp	r3, #0
 801041e:	d00b      	beq.n	8010438 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	32ae      	adds	r2, #174	; 0xae
 801042a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010430:	78fa      	ldrb	r2, [r7, #3]
 8010432:	4611      	mov	r1, r2
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010442:	b480      	push	{r7}
 8010444:	b083      	sub	sp, #12
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010460:	2300      	movs	r3, #0
 8010462:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2201      	movs	r2, #1
 8010468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00e      	beq.n	8010494 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	6852      	ldr	r2, [r2, #4]
 8010482:	b2d2      	uxtb	r2, r2
 8010484:	4611      	mov	r1, r2
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	4798      	blx	r3
 801048a:	4603      	mov	r3, r0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d001      	beq.n	8010494 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010490:	2303      	movs	r3, #3
 8010492:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010494:	7bfb      	ldrb	r3, [r7, #15]
}
 8010496:	4618      	mov	r0, r3
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801049e:	b480      	push	{r7}
 80104a0:	b083      	sub	sp, #12
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	460b      	mov	r3, r1
 80104a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80104aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	370c      	adds	r7, #12
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	460b      	mov	r3, r1
 80104c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80104c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	370c      	adds	r7, #12
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr

080104d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b086      	sub	sp, #24
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	460b      	mov	r3, r1
 80104dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80104e6:	2300      	movs	r3, #0
 80104e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	885b      	ldrh	r3, [r3, #2]
 80104ee:	b29a      	uxth	r2, r3
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d920      	bls.n	801053c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	b29b      	uxth	r3, r3
 8010500:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010502:	e013      	b.n	801052c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010504:	f107 030a 	add.w	r3, r7, #10
 8010508:	4619      	mov	r1, r3
 801050a:	6978      	ldr	r0, [r7, #20]
 801050c:	f000 f81b 	bl	8010546 <USBD_GetNextDesc>
 8010510:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	785b      	ldrb	r3, [r3, #1]
 8010516:	2b05      	cmp	r3, #5
 8010518:	d108      	bne.n	801052c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	789b      	ldrb	r3, [r3, #2]
 8010522:	78fa      	ldrb	r2, [r7, #3]
 8010524:	429a      	cmp	r2, r3
 8010526:	d008      	beq.n	801053a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010528:	2300      	movs	r3, #0
 801052a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	885b      	ldrh	r3, [r3, #2]
 8010530:	b29a      	uxth	r2, r3
 8010532:	897b      	ldrh	r3, [r7, #10]
 8010534:	429a      	cmp	r2, r3
 8010536:	d8e5      	bhi.n	8010504 <USBD_GetEpDesc+0x32>
 8010538:	e000      	b.n	801053c <USBD_GetEpDesc+0x6a>
          break;
 801053a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801053c:	693b      	ldr	r3, [r7, #16]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3718      	adds	r7, #24
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010546:	b480      	push	{r7}
 8010548:	b085      	sub	sp, #20
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
 801054e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	881a      	ldrh	r2, [r3, #0]
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	b29b      	uxth	r3, r3
 801055e:	4413      	add	r3, r2
 8010560:	b29a      	uxth	r2, r3
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	461a      	mov	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4413      	add	r3, r2
 8010570:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010572:	68fb      	ldr	r3, [r7, #12]
}
 8010574:	4618      	mov	r0, r3
 8010576:	3714      	adds	r7, #20
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010580:	b480      	push	{r7}
 8010582:	b087      	sub	sp, #28
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	3301      	adds	r3, #1
 8010596:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801059e:	8a3b      	ldrh	r3, [r7, #16]
 80105a0:	021b      	lsls	r3, r3, #8
 80105a2:	b21a      	sxth	r2, r3
 80105a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80105a8:	4313      	orrs	r3, r2
 80105aa:	b21b      	sxth	r3, r3
 80105ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80105ae:	89fb      	ldrh	r3, [r7, #14]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	371c      	adds	r7, #28
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105c6:	2300      	movs	r3, #0
 80105c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105d2:	2b40      	cmp	r3, #64	; 0x40
 80105d4:	d005      	beq.n	80105e2 <USBD_StdDevReq+0x26>
 80105d6:	2b40      	cmp	r3, #64	; 0x40
 80105d8:	d857      	bhi.n	801068a <USBD_StdDevReq+0xce>
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00f      	beq.n	80105fe <USBD_StdDevReq+0x42>
 80105de:	2b20      	cmp	r3, #32
 80105e0:	d153      	bne.n	801068a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	32ae      	adds	r2, #174	; 0xae
 80105ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	6839      	ldr	r1, [r7, #0]
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	4798      	blx	r3
 80105f8:	4603      	mov	r3, r0
 80105fa:	73fb      	strb	r3, [r7, #15]
      break;
 80105fc:	e04a      	b.n	8010694 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	785b      	ldrb	r3, [r3, #1]
 8010602:	2b09      	cmp	r3, #9
 8010604:	d83b      	bhi.n	801067e <USBD_StdDevReq+0xc2>
 8010606:	a201      	add	r2, pc, #4	; (adr r2, 801060c <USBD_StdDevReq+0x50>)
 8010608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801060c:	08010661 	.word	0x08010661
 8010610:	08010675 	.word	0x08010675
 8010614:	0801067f 	.word	0x0801067f
 8010618:	0801066b 	.word	0x0801066b
 801061c:	0801067f 	.word	0x0801067f
 8010620:	0801063f 	.word	0x0801063f
 8010624:	08010635 	.word	0x08010635
 8010628:	0801067f 	.word	0x0801067f
 801062c:	08010657 	.word	0x08010657
 8010630:	08010649 	.word	0x08010649
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010634:	6839      	ldr	r1, [r7, #0]
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 fa3c 	bl	8010ab4 <USBD_GetDescriptor>
          break;
 801063c:	e024      	b.n	8010688 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801063e:	6839      	ldr	r1, [r7, #0]
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 fba1 	bl	8010d88 <USBD_SetAddress>
          break;
 8010646:	e01f      	b.n	8010688 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fbe0 	bl	8010e10 <USBD_SetConfig>
 8010650:	4603      	mov	r3, r0
 8010652:	73fb      	strb	r3, [r7, #15]
          break;
 8010654:	e018      	b.n	8010688 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010656:	6839      	ldr	r1, [r7, #0]
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 fc83 	bl	8010f64 <USBD_GetConfig>
          break;
 801065e:	e013      	b.n	8010688 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010660:	6839      	ldr	r1, [r7, #0]
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 fcb4 	bl	8010fd0 <USBD_GetStatus>
          break;
 8010668:	e00e      	b.n	8010688 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801066a:	6839      	ldr	r1, [r7, #0]
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 fce3 	bl	8011038 <USBD_SetFeature>
          break;
 8010672:	e009      	b.n	8010688 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 fd07 	bl	801108a <USBD_ClrFeature>
          break;
 801067c:	e004      	b.n	8010688 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801067e:	6839      	ldr	r1, [r7, #0]
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 fd5e 	bl	8011142 <USBD_CtlError>
          break;
 8010686:	bf00      	nop
      }
      break;
 8010688:	e004      	b.n	8010694 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801068a:	6839      	ldr	r1, [r7, #0]
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 fd58 	bl	8011142 <USBD_CtlError>
      break;
 8010692:	bf00      	nop
  }

  return ret;
 8010694:	7bfb      	ldrb	r3, [r7, #15]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop

080106a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80106b6:	2b40      	cmp	r3, #64	; 0x40
 80106b8:	d005      	beq.n	80106c6 <USBD_StdItfReq+0x26>
 80106ba:	2b40      	cmp	r3, #64	; 0x40
 80106bc:	d852      	bhi.n	8010764 <USBD_StdItfReq+0xc4>
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d001      	beq.n	80106c6 <USBD_StdItfReq+0x26>
 80106c2:	2b20      	cmp	r3, #32
 80106c4:	d14e      	bne.n	8010764 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	3b01      	subs	r3, #1
 80106d0:	2b02      	cmp	r3, #2
 80106d2:	d840      	bhi.n	8010756 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	889b      	ldrh	r3, [r3, #4]
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d836      	bhi.n	801074c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	889b      	ldrh	r3, [r3, #4]
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	4619      	mov	r1, r3
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f7ff fed9 	bl	801049e <USBD_CoreFindIF>
 80106ec:	4603      	mov	r3, r0
 80106ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80106f0:	7bbb      	ldrb	r3, [r7, #14]
 80106f2:	2bff      	cmp	r3, #255	; 0xff
 80106f4:	d01d      	beq.n	8010732 <USBD_StdItfReq+0x92>
 80106f6:	7bbb      	ldrb	r3, [r7, #14]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d11a      	bne.n	8010732 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80106fc:	7bba      	ldrb	r2, [r7, #14]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	32ae      	adds	r2, #174	; 0xae
 8010702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00f      	beq.n	801072c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801070c:	7bba      	ldrb	r2, [r7, #14]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010714:	7bba      	ldrb	r2, [r7, #14]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	32ae      	adds	r2, #174	; 0xae
 801071a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801071e:	689b      	ldr	r3, [r3, #8]
 8010720:	6839      	ldr	r1, [r7, #0]
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	4798      	blx	r3
 8010726:	4603      	mov	r3, r0
 8010728:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801072a:	e004      	b.n	8010736 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801072c:	2303      	movs	r3, #3
 801072e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010730:	e001      	b.n	8010736 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010732:	2303      	movs	r3, #3
 8010734:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	88db      	ldrh	r3, [r3, #6]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d110      	bne.n	8010760 <USBD_StdItfReq+0xc0>
 801073e:	7bfb      	ldrb	r3, [r7, #15]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10d      	bne.n	8010760 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 fdc7 	bl	80112d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801074a:	e009      	b.n	8010760 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801074c:	6839      	ldr	r1, [r7, #0]
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 fcf7 	bl	8011142 <USBD_CtlError>
          break;
 8010754:	e004      	b.n	8010760 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010756:	6839      	ldr	r1, [r7, #0]
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 fcf2 	bl	8011142 <USBD_CtlError>
          break;
 801075e:	e000      	b.n	8010762 <USBD_StdItfReq+0xc2>
          break;
 8010760:	bf00      	nop
      }
      break;
 8010762:	e004      	b.n	801076e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010764:	6839      	ldr	r1, [r7, #0]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fceb 	bl	8011142 <USBD_CtlError>
      break;
 801076c:	bf00      	nop
  }

  return ret;
 801076e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010770:	4618      	mov	r0, r3
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010782:	2300      	movs	r3, #0
 8010784:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	889b      	ldrh	r3, [r3, #4]
 801078a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010794:	2b40      	cmp	r3, #64	; 0x40
 8010796:	d007      	beq.n	80107a8 <USBD_StdEPReq+0x30>
 8010798:	2b40      	cmp	r3, #64	; 0x40
 801079a:	f200 817f 	bhi.w	8010a9c <USBD_StdEPReq+0x324>
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d02a      	beq.n	80107f8 <USBD_StdEPReq+0x80>
 80107a2:	2b20      	cmp	r3, #32
 80107a4:	f040 817a 	bne.w	8010a9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80107a8:	7bbb      	ldrb	r3, [r7, #14]
 80107aa:	4619      	mov	r1, r3
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7ff fe83 	bl	80104b8 <USBD_CoreFindEP>
 80107b2:	4603      	mov	r3, r0
 80107b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80107b6:	7b7b      	ldrb	r3, [r7, #13]
 80107b8:	2bff      	cmp	r3, #255	; 0xff
 80107ba:	f000 8174 	beq.w	8010aa6 <USBD_StdEPReq+0x32e>
 80107be:	7b7b      	ldrb	r3, [r7, #13]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f040 8170 	bne.w	8010aa6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80107c6:	7b7a      	ldrb	r2, [r7, #13]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80107ce:	7b7a      	ldrb	r2, [r7, #13]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	32ae      	adds	r2, #174	; 0xae
 80107d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107d8:	689b      	ldr	r3, [r3, #8]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f000 8163 	beq.w	8010aa6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80107e0:	7b7a      	ldrb	r2, [r7, #13]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	32ae      	adds	r2, #174	; 0xae
 80107e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	6839      	ldr	r1, [r7, #0]
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	4798      	blx	r3
 80107f2:	4603      	mov	r3, r0
 80107f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80107f6:	e156      	b.n	8010aa6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	785b      	ldrb	r3, [r3, #1]
 80107fc:	2b03      	cmp	r3, #3
 80107fe:	d008      	beq.n	8010812 <USBD_StdEPReq+0x9a>
 8010800:	2b03      	cmp	r3, #3
 8010802:	f300 8145 	bgt.w	8010a90 <USBD_StdEPReq+0x318>
 8010806:	2b00      	cmp	r3, #0
 8010808:	f000 809b 	beq.w	8010942 <USBD_StdEPReq+0x1ca>
 801080c:	2b01      	cmp	r3, #1
 801080e:	d03c      	beq.n	801088a <USBD_StdEPReq+0x112>
 8010810:	e13e      	b.n	8010a90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010818:	b2db      	uxtb	r3, r3
 801081a:	2b02      	cmp	r3, #2
 801081c:	d002      	beq.n	8010824 <USBD_StdEPReq+0xac>
 801081e:	2b03      	cmp	r3, #3
 8010820:	d016      	beq.n	8010850 <USBD_StdEPReq+0xd8>
 8010822:	e02c      	b.n	801087e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010824:	7bbb      	ldrb	r3, [r7, #14]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00d      	beq.n	8010846 <USBD_StdEPReq+0xce>
 801082a:	7bbb      	ldrb	r3, [r7, #14]
 801082c:	2b80      	cmp	r3, #128	; 0x80
 801082e:	d00a      	beq.n	8010846 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010830:	7bbb      	ldrb	r3, [r7, #14]
 8010832:	4619      	mov	r1, r3
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f003 fab7 	bl	8013da8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801083a:	2180      	movs	r1, #128	; 0x80
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f003 fab3 	bl	8013da8 <USBD_LL_StallEP>
 8010842:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010844:	e020      	b.n	8010888 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010846:	6839      	ldr	r1, [r7, #0]
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f000 fc7a 	bl	8011142 <USBD_CtlError>
              break;
 801084e:	e01b      	b.n	8010888 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	885b      	ldrh	r3, [r3, #2]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d10e      	bne.n	8010876 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010858:	7bbb      	ldrb	r3, [r7, #14]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d00b      	beq.n	8010876 <USBD_StdEPReq+0xfe>
 801085e:	7bbb      	ldrb	r3, [r7, #14]
 8010860:	2b80      	cmp	r3, #128	; 0x80
 8010862:	d008      	beq.n	8010876 <USBD_StdEPReq+0xfe>
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	88db      	ldrh	r3, [r3, #6]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d104      	bne.n	8010876 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801086c:	7bbb      	ldrb	r3, [r7, #14]
 801086e:	4619      	mov	r1, r3
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f003 fa99 	bl	8013da8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 fd2e 	bl	80112d8 <USBD_CtlSendStatus>

              break;
 801087c:	e004      	b.n	8010888 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801087e:	6839      	ldr	r1, [r7, #0]
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 fc5e 	bl	8011142 <USBD_CtlError>
              break;
 8010886:	bf00      	nop
          }
          break;
 8010888:	e107      	b.n	8010a9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010890:	b2db      	uxtb	r3, r3
 8010892:	2b02      	cmp	r3, #2
 8010894:	d002      	beq.n	801089c <USBD_StdEPReq+0x124>
 8010896:	2b03      	cmp	r3, #3
 8010898:	d016      	beq.n	80108c8 <USBD_StdEPReq+0x150>
 801089a:	e04b      	b.n	8010934 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801089c:	7bbb      	ldrb	r3, [r7, #14]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00d      	beq.n	80108be <USBD_StdEPReq+0x146>
 80108a2:	7bbb      	ldrb	r3, [r7, #14]
 80108a4:	2b80      	cmp	r3, #128	; 0x80
 80108a6:	d00a      	beq.n	80108be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80108a8:	7bbb      	ldrb	r3, [r7, #14]
 80108aa:	4619      	mov	r1, r3
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f003 fa7b 	bl	8013da8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80108b2:	2180      	movs	r1, #128	; 0x80
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f003 fa77 	bl	8013da8 <USBD_LL_StallEP>
 80108ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80108bc:	e040      	b.n	8010940 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80108be:	6839      	ldr	r1, [r7, #0]
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fc3e 	bl	8011142 <USBD_CtlError>
              break;
 80108c6:	e03b      	b.n	8010940 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	885b      	ldrh	r3, [r3, #2]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d136      	bne.n	801093e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80108d0:	7bbb      	ldrb	r3, [r7, #14]
 80108d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d004      	beq.n	80108e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80108da:	7bbb      	ldrb	r3, [r7, #14]
 80108dc:	4619      	mov	r1, r3
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f003 fa81 	bl	8013de6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 fcf7 	bl	80112d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80108ea:	7bbb      	ldrb	r3, [r7, #14]
 80108ec:	4619      	mov	r1, r3
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7ff fde2 	bl	80104b8 <USBD_CoreFindEP>
 80108f4:	4603      	mov	r3, r0
 80108f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108f8:	7b7b      	ldrb	r3, [r7, #13]
 80108fa:	2bff      	cmp	r3, #255	; 0xff
 80108fc:	d01f      	beq.n	801093e <USBD_StdEPReq+0x1c6>
 80108fe:	7b7b      	ldrb	r3, [r7, #13]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d11c      	bne.n	801093e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010904:	7b7a      	ldrb	r2, [r7, #13]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801090c:	7b7a      	ldrb	r2, [r7, #13]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	32ae      	adds	r2, #174	; 0xae
 8010912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d010      	beq.n	801093e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801091c:	7b7a      	ldrb	r2, [r7, #13]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	32ae      	adds	r2, #174	; 0xae
 8010922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	6839      	ldr	r1, [r7, #0]
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	4798      	blx	r3
 801092e:	4603      	mov	r3, r0
 8010930:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010932:	e004      	b.n	801093e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010934:	6839      	ldr	r1, [r7, #0]
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f000 fc03 	bl	8011142 <USBD_CtlError>
              break;
 801093c:	e000      	b.n	8010940 <USBD_StdEPReq+0x1c8>
              break;
 801093e:	bf00      	nop
          }
          break;
 8010940:	e0ab      	b.n	8010a9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010948:	b2db      	uxtb	r3, r3
 801094a:	2b02      	cmp	r3, #2
 801094c:	d002      	beq.n	8010954 <USBD_StdEPReq+0x1dc>
 801094e:	2b03      	cmp	r3, #3
 8010950:	d032      	beq.n	80109b8 <USBD_StdEPReq+0x240>
 8010952:	e097      	b.n	8010a84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010954:	7bbb      	ldrb	r3, [r7, #14]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d007      	beq.n	801096a <USBD_StdEPReq+0x1f2>
 801095a:	7bbb      	ldrb	r3, [r7, #14]
 801095c:	2b80      	cmp	r3, #128	; 0x80
 801095e:	d004      	beq.n	801096a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010960:	6839      	ldr	r1, [r7, #0]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 fbed 	bl	8011142 <USBD_CtlError>
                break;
 8010968:	e091      	b.n	8010a8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801096a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801096e:	2b00      	cmp	r3, #0
 8010970:	da0b      	bge.n	801098a <USBD_StdEPReq+0x212>
 8010972:	7bbb      	ldrb	r3, [r7, #14]
 8010974:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010978:	4613      	mov	r3, r2
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	4413      	add	r3, r2
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	3310      	adds	r3, #16
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	4413      	add	r3, r2
 8010986:	3304      	adds	r3, #4
 8010988:	e00b      	b.n	80109a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801098a:	7bbb      	ldrb	r3, [r7, #14]
 801098c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010990:	4613      	mov	r3, r2
 8010992:	009b      	lsls	r3, r3, #2
 8010994:	4413      	add	r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	4413      	add	r3, r2
 80109a0:	3304      	adds	r3, #4
 80109a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	2200      	movs	r2, #0
 80109a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	2202      	movs	r2, #2
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fc37 	bl	8011224 <USBD_CtlSendData>
              break;
 80109b6:	e06a      	b.n	8010a8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80109b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	da11      	bge.n	80109e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80109c0:	7bbb      	ldrb	r3, [r7, #14]
 80109c2:	f003 020f 	and.w	r2, r3, #15
 80109c6:	6879      	ldr	r1, [r7, #4]
 80109c8:	4613      	mov	r3, r2
 80109ca:	009b      	lsls	r3, r3, #2
 80109cc:	4413      	add	r3, r2
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	440b      	add	r3, r1
 80109d2:	3324      	adds	r3, #36	; 0x24
 80109d4:	881b      	ldrh	r3, [r3, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d117      	bne.n	8010a0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80109da:	6839      	ldr	r1, [r7, #0]
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f000 fbb0 	bl	8011142 <USBD_CtlError>
                  break;
 80109e2:	e054      	b.n	8010a8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80109e4:	7bbb      	ldrb	r3, [r7, #14]
 80109e6:	f003 020f 	and.w	r2, r3, #15
 80109ea:	6879      	ldr	r1, [r7, #4]
 80109ec:	4613      	mov	r3, r2
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	4413      	add	r3, r2
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	440b      	add	r3, r1
 80109f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80109fa:	881b      	ldrh	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d104      	bne.n	8010a0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010a00:	6839      	ldr	r1, [r7, #0]
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 fb9d 	bl	8011142 <USBD_CtlError>
                  break;
 8010a08:	e041      	b.n	8010a8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010a0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	da0b      	bge.n	8010a2a <USBD_StdEPReq+0x2b2>
 8010a12:	7bbb      	ldrb	r3, [r7, #14]
 8010a14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a18:	4613      	mov	r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	4413      	add	r3, r2
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	3310      	adds	r3, #16
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	4413      	add	r3, r2
 8010a26:	3304      	adds	r3, #4
 8010a28:	e00b      	b.n	8010a42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010a2a:	7bbb      	ldrb	r3, [r7, #14]
 8010a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010a30:	4613      	mov	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4413      	add	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010a3c:	687a      	ldr	r2, [r7, #4]
 8010a3e:	4413      	add	r3, r2
 8010a40:	3304      	adds	r3, #4
 8010a42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010a44:	7bbb      	ldrb	r3, [r7, #14]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d002      	beq.n	8010a50 <USBD_StdEPReq+0x2d8>
 8010a4a:	7bbb      	ldrb	r3, [r7, #14]
 8010a4c:	2b80      	cmp	r3, #128	; 0x80
 8010a4e:	d103      	bne.n	8010a58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	e00e      	b.n	8010a76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010a58:	7bbb      	ldrb	r3, [r7, #14]
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f003 f9e1 	bl	8013e24 <USBD_LL_IsStallEP>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d003      	beq.n	8010a70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	601a      	str	r2, [r3, #0]
 8010a6e:	e002      	b.n	8010a76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	2200      	movs	r2, #0
 8010a74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	2202      	movs	r2, #2
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fbd1 	bl	8011224 <USBD_CtlSendData>
              break;
 8010a82:	e004      	b.n	8010a8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f000 fb5b 	bl	8011142 <USBD_CtlError>
              break;
 8010a8c:	bf00      	nop
          }
          break;
 8010a8e:	e004      	b.n	8010a9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010a90:	6839      	ldr	r1, [r7, #0]
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f000 fb55 	bl	8011142 <USBD_CtlError>
          break;
 8010a98:	bf00      	nop
      }
      break;
 8010a9a:	e005      	b.n	8010aa8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010a9c:	6839      	ldr	r1, [r7, #0]
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 fb4f 	bl	8011142 <USBD_CtlError>
      break;
 8010aa4:	e000      	b.n	8010aa8 <USBD_StdEPReq+0x330>
      break;
 8010aa6:	bf00      	nop
  }

  return ret;
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3710      	adds	r7, #16
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
	...

08010ab4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	885b      	ldrh	r3, [r3, #2]
 8010ace:	0a1b      	lsrs	r3, r3, #8
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	3b01      	subs	r3, #1
 8010ad4:	2b06      	cmp	r3, #6
 8010ad6:	f200 8128 	bhi.w	8010d2a <USBD_GetDescriptor+0x276>
 8010ada:	a201      	add	r2, pc, #4	; (adr r2, 8010ae0 <USBD_GetDescriptor+0x2c>)
 8010adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae0:	08010afd 	.word	0x08010afd
 8010ae4:	08010b15 	.word	0x08010b15
 8010ae8:	08010b55 	.word	0x08010b55
 8010aec:	08010d2b 	.word	0x08010d2b
 8010af0:	08010d2b 	.word	0x08010d2b
 8010af4:	08010ccb 	.word	0x08010ccb
 8010af8:	08010cf7 	.word	0x08010cf7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	7c12      	ldrb	r2, [r2, #16]
 8010b08:	f107 0108 	add.w	r1, r7, #8
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	4798      	blx	r3
 8010b10:	60f8      	str	r0, [r7, #12]
      break;
 8010b12:	e112      	b.n	8010d3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	7c1b      	ldrb	r3, [r3, #16]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d10d      	bne.n	8010b38 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b24:	f107 0208 	add.w	r2, r7, #8
 8010b28:	4610      	mov	r0, r2
 8010b2a:	4798      	blx	r3
 8010b2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	3301      	adds	r3, #1
 8010b32:	2202      	movs	r2, #2
 8010b34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010b36:	e100      	b.n	8010d3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b40:	f107 0208 	add.w	r2, r7, #8
 8010b44:	4610      	mov	r0, r2
 8010b46:	4798      	blx	r3
 8010b48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	2202      	movs	r2, #2
 8010b50:	701a      	strb	r2, [r3, #0]
      break;
 8010b52:	e0f2      	b.n	8010d3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	885b      	ldrh	r3, [r3, #2]
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	2b05      	cmp	r3, #5
 8010b5c:	f200 80ac 	bhi.w	8010cb8 <USBD_GetDescriptor+0x204>
 8010b60:	a201      	add	r2, pc, #4	; (adr r2, 8010b68 <USBD_GetDescriptor+0xb4>)
 8010b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b66:	bf00      	nop
 8010b68:	08010b81 	.word	0x08010b81
 8010b6c:	08010bb5 	.word	0x08010bb5
 8010b70:	08010be9 	.word	0x08010be9
 8010b74:	08010c1d 	.word	0x08010c1d
 8010b78:	08010c51 	.word	0x08010c51
 8010b7c:	08010c85 	.word	0x08010c85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00b      	beq.n	8010ba4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	7c12      	ldrb	r2, [r2, #16]
 8010b98:	f107 0108 	add.w	r1, r7, #8
 8010b9c:	4610      	mov	r0, r2
 8010b9e:	4798      	blx	r3
 8010ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ba2:	e091      	b.n	8010cc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010ba4:	6839      	ldr	r1, [r7, #0]
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 facb 	bl	8011142 <USBD_CtlError>
            err++;
 8010bac:	7afb      	ldrb	r3, [r7, #11]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8010bb2:	e089      	b.n	8010cc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d00b      	beq.n	8010bd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	687a      	ldr	r2, [r7, #4]
 8010bca:	7c12      	ldrb	r2, [r2, #16]
 8010bcc:	f107 0108 	add.w	r1, r7, #8
 8010bd0:	4610      	mov	r0, r2
 8010bd2:	4798      	blx	r3
 8010bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010bd6:	e077      	b.n	8010cc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010bd8:	6839      	ldr	r1, [r7, #0]
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f000 fab1 	bl	8011142 <USBD_CtlError>
            err++;
 8010be0:	7afb      	ldrb	r3, [r7, #11]
 8010be2:	3301      	adds	r3, #1
 8010be4:	72fb      	strb	r3, [r7, #11]
          break;
 8010be6:	e06f      	b.n	8010cc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d00b      	beq.n	8010c0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	7c12      	ldrb	r2, [r2, #16]
 8010c00:	f107 0108 	add.w	r1, r7, #8
 8010c04:	4610      	mov	r0, r2
 8010c06:	4798      	blx	r3
 8010c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c0a:	e05d      	b.n	8010cc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c0c:	6839      	ldr	r1, [r7, #0]
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 fa97 	bl	8011142 <USBD_CtlError>
            err++;
 8010c14:	7afb      	ldrb	r3, [r7, #11]
 8010c16:	3301      	adds	r3, #1
 8010c18:	72fb      	strb	r3, [r7, #11]
          break;
 8010c1a:	e055      	b.n	8010cc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c22:	691b      	ldr	r3, [r3, #16]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d00b      	beq.n	8010c40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	7c12      	ldrb	r2, [r2, #16]
 8010c34:	f107 0108 	add.w	r1, r7, #8
 8010c38:	4610      	mov	r0, r2
 8010c3a:	4798      	blx	r3
 8010c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c3e:	e043      	b.n	8010cc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c40:	6839      	ldr	r1, [r7, #0]
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f000 fa7d 	bl	8011142 <USBD_CtlError>
            err++;
 8010c48:	7afb      	ldrb	r3, [r7, #11]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8010c4e:	e03b      	b.n	8010cc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c56:	695b      	ldr	r3, [r3, #20]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d00b      	beq.n	8010c74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c62:	695b      	ldr	r3, [r3, #20]
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	7c12      	ldrb	r2, [r2, #16]
 8010c68:	f107 0108 	add.w	r1, r7, #8
 8010c6c:	4610      	mov	r0, r2
 8010c6e:	4798      	blx	r3
 8010c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c72:	e029      	b.n	8010cc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010c74:	6839      	ldr	r1, [r7, #0]
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 fa63 	bl	8011142 <USBD_CtlError>
            err++;
 8010c7c:	7afb      	ldrb	r3, [r7, #11]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	72fb      	strb	r3, [r7, #11]
          break;
 8010c82:	e021      	b.n	8010cc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c8a:	699b      	ldr	r3, [r3, #24]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d00b      	beq.n	8010ca8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c96:	699b      	ldr	r3, [r3, #24]
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	7c12      	ldrb	r2, [r2, #16]
 8010c9c:	f107 0108 	add.w	r1, r7, #8
 8010ca0:	4610      	mov	r0, r2
 8010ca2:	4798      	blx	r3
 8010ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ca6:	e00f      	b.n	8010cc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010ca8:	6839      	ldr	r1, [r7, #0]
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fa49 	bl	8011142 <USBD_CtlError>
            err++;
 8010cb0:	7afb      	ldrb	r3, [r7, #11]
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8010cb6:	e007      	b.n	8010cc8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010cb8:	6839      	ldr	r1, [r7, #0]
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f000 fa41 	bl	8011142 <USBD_CtlError>
          err++;
 8010cc0:	7afb      	ldrb	r3, [r7, #11]
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010cc6:	bf00      	nop
      }
      break;
 8010cc8:	e037      	b.n	8010d3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	7c1b      	ldrb	r3, [r3, #16]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d109      	bne.n	8010ce6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cda:	f107 0208 	add.w	r2, r7, #8
 8010cde:	4610      	mov	r0, r2
 8010ce0:	4798      	blx	r3
 8010ce2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ce4:	e029      	b.n	8010d3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010ce6:	6839      	ldr	r1, [r7, #0]
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 fa2a 	bl	8011142 <USBD_CtlError>
        err++;
 8010cee:	7afb      	ldrb	r3, [r7, #11]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	72fb      	strb	r3, [r7, #11]
      break;
 8010cf4:	e021      	b.n	8010d3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	7c1b      	ldrb	r3, [r3, #16]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10d      	bne.n	8010d1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d06:	f107 0208 	add.w	r2, r7, #8
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	4798      	blx	r3
 8010d0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	3301      	adds	r3, #1
 8010d14:	2207      	movs	r2, #7
 8010d16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d18:	e00f      	b.n	8010d3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010d1a:	6839      	ldr	r1, [r7, #0]
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f000 fa10 	bl	8011142 <USBD_CtlError>
        err++;
 8010d22:	7afb      	ldrb	r3, [r7, #11]
 8010d24:	3301      	adds	r3, #1
 8010d26:	72fb      	strb	r3, [r7, #11]
      break;
 8010d28:	e007      	b.n	8010d3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010d2a:	6839      	ldr	r1, [r7, #0]
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 fa08 	bl	8011142 <USBD_CtlError>
      err++;
 8010d32:	7afb      	ldrb	r3, [r7, #11]
 8010d34:	3301      	adds	r3, #1
 8010d36:	72fb      	strb	r3, [r7, #11]
      break;
 8010d38:	bf00      	nop
  }

  if (err != 0U)
 8010d3a:	7afb      	ldrb	r3, [r7, #11]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d11e      	bne.n	8010d7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	88db      	ldrh	r3, [r3, #6]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d016      	beq.n	8010d76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010d48:	893b      	ldrh	r3, [r7, #8]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d00e      	beq.n	8010d6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	88da      	ldrh	r2, [r3, #6]
 8010d52:	893b      	ldrh	r3, [r7, #8]
 8010d54:	4293      	cmp	r3, r2
 8010d56:	bf28      	it	cs
 8010d58:	4613      	movcs	r3, r2
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010d5e:	893b      	ldrh	r3, [r7, #8]
 8010d60:	461a      	mov	r2, r3
 8010d62:	68f9      	ldr	r1, [r7, #12]
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f000 fa5d 	bl	8011224 <USBD_CtlSendData>
 8010d6a:	e009      	b.n	8010d80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010d6c:	6839      	ldr	r1, [r7, #0]
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 f9e7 	bl	8011142 <USBD_CtlError>
 8010d74:	e004      	b.n	8010d80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f000 faae 	bl	80112d8 <USBD_CtlSendStatus>
 8010d7c:	e000      	b.n	8010d80 <USBD_GetDescriptor+0x2cc>
    return;
 8010d7e:	bf00      	nop
  }
}
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop

08010d88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	889b      	ldrh	r3, [r3, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d131      	bne.n	8010dfe <USBD_SetAddress+0x76>
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	88db      	ldrh	r3, [r3, #6]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d12d      	bne.n	8010dfe <USBD_SetAddress+0x76>
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	885b      	ldrh	r3, [r3, #2]
 8010da6:	2b7f      	cmp	r3, #127	; 0x7f
 8010da8:	d829      	bhi.n	8010dfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	885b      	ldrh	r3, [r3, #2]
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010db4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dbc:	b2db      	uxtb	r3, r3
 8010dbe:	2b03      	cmp	r3, #3
 8010dc0:	d104      	bne.n	8010dcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010dc2:	6839      	ldr	r1, [r7, #0]
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f000 f9bc 	bl	8011142 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dca:	e01d      	b.n	8010e08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	7bfa      	ldrb	r2, [r7, #15]
 8010dd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010dd4:	7bfb      	ldrb	r3, [r7, #15]
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f003 f84f 	bl	8013e7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f000 fa7a 	bl	80112d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010de4:	7bfb      	ldrb	r3, [r7, #15]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d004      	beq.n	8010df4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2202      	movs	r2, #2
 8010dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010df2:	e009      	b.n	8010e08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2201      	movs	r2, #1
 8010df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dfc:	e004      	b.n	8010e08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010dfe:	6839      	ldr	r1, [r7, #0]
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f000 f99e 	bl	8011142 <USBD_CtlError>
  }
}
 8010e06:	bf00      	nop
 8010e08:	bf00      	nop
 8010e0a:	3710      	adds	r7, #16
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	885b      	ldrh	r3, [r3, #2]
 8010e22:	b2da      	uxtb	r2, r3
 8010e24:	4b4e      	ldr	r3, [pc, #312]	; (8010f60 <USBD_SetConfig+0x150>)
 8010e26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010e28:	4b4d      	ldr	r3, [pc, #308]	; (8010f60 <USBD_SetConfig+0x150>)
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d905      	bls.n	8010e3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010e30:	6839      	ldr	r1, [r7, #0]
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 f985 	bl	8011142 <USBD_CtlError>
    return USBD_FAIL;
 8010e38:	2303      	movs	r3, #3
 8010e3a:	e08c      	b.n	8010f56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	2b02      	cmp	r3, #2
 8010e46:	d002      	beq.n	8010e4e <USBD_SetConfig+0x3e>
 8010e48:	2b03      	cmp	r3, #3
 8010e4a:	d029      	beq.n	8010ea0 <USBD_SetConfig+0x90>
 8010e4c:	e075      	b.n	8010f3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010e4e:	4b44      	ldr	r3, [pc, #272]	; (8010f60 <USBD_SetConfig+0x150>)
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d020      	beq.n	8010e98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010e56:	4b42      	ldr	r3, [pc, #264]	; (8010f60 <USBD_SetConfig+0x150>)
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010e60:	4b3f      	ldr	r3, [pc, #252]	; (8010f60 <USBD_SetConfig+0x150>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	4619      	mov	r1, r3
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f7fe ffe7 	bl	800fe3a <USBD_SetClassConfig>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d008      	beq.n	8010e88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010e76:	6839      	ldr	r1, [r7, #0]
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 f962 	bl	8011142 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2202      	movs	r2, #2
 8010e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010e86:	e065      	b.n	8010f54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 fa25 	bl	80112d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2203      	movs	r2, #3
 8010e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010e96:	e05d      	b.n	8010f54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 fa1d 	bl	80112d8 <USBD_CtlSendStatus>
      break;
 8010e9e:	e059      	b.n	8010f54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010ea0:	4b2f      	ldr	r3, [pc, #188]	; (8010f60 <USBD_SetConfig+0x150>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d112      	bne.n	8010ece <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2202      	movs	r2, #2
 8010eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010eb0:	4b2b      	ldr	r3, [pc, #172]	; (8010f60 <USBD_SetConfig+0x150>)
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010eba:	4b29      	ldr	r3, [pc, #164]	; (8010f60 <USBD_SetConfig+0x150>)
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f7fe ffd6 	bl	800fe72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f000 fa06 	bl	80112d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ecc:	e042      	b.n	8010f54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010ece:	4b24      	ldr	r3, [pc, #144]	; (8010f60 <USBD_SetConfig+0x150>)
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d02a      	beq.n	8010f32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7fe ffc4 	bl	800fe72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010eea:	4b1d      	ldr	r3, [pc, #116]	; (8010f60 <USBD_SetConfig+0x150>)
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ef4:	4b1a      	ldr	r3, [pc, #104]	; (8010f60 <USBD_SetConfig+0x150>)
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	4619      	mov	r1, r3
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7fe ff9d 	bl	800fe3a <USBD_SetClassConfig>
 8010f00:	4603      	mov	r3, r0
 8010f02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d00f      	beq.n	8010f2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010f0a:	6839      	ldr	r1, [r7, #0]
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 f918 	bl	8011142 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	4619      	mov	r1, r3
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f7fe ffa9 	bl	800fe72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2202      	movs	r2, #2
 8010f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010f28:	e014      	b.n	8010f54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 f9d4 	bl	80112d8 <USBD_CtlSendStatus>
      break;
 8010f30:	e010      	b.n	8010f54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 f9d0 	bl	80112d8 <USBD_CtlSendStatus>
      break;
 8010f38:	e00c      	b.n	8010f54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010f3a:	6839      	ldr	r1, [r7, #0]
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f000 f900 	bl	8011142 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010f42:	4b07      	ldr	r3, [pc, #28]	; (8010f60 <USBD_SetConfig+0x150>)
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	4619      	mov	r1, r3
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f7fe ff92 	bl	800fe72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010f4e:	2303      	movs	r3, #3
 8010f50:	73fb      	strb	r3, [r7, #15]
      break;
 8010f52:	bf00      	nop
  }

  return ret;
 8010f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	20001340 	.word	0x20001340

08010f64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	88db      	ldrh	r3, [r3, #6]
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d004      	beq.n	8010f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010f76:	6839      	ldr	r1, [r7, #0]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 f8e2 	bl	8011142 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010f7e:	e023      	b.n	8010fc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	2b02      	cmp	r3, #2
 8010f8a:	dc02      	bgt.n	8010f92 <USBD_GetConfig+0x2e>
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	dc03      	bgt.n	8010f98 <USBD_GetConfig+0x34>
 8010f90:	e015      	b.n	8010fbe <USBD_GetConfig+0x5a>
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d00b      	beq.n	8010fae <USBD_GetConfig+0x4a>
 8010f96:	e012      	b.n	8010fbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	3308      	adds	r3, #8
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 f93c 	bl	8011224 <USBD_CtlSendData>
        break;
 8010fac:	e00c      	b.n	8010fc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 f934 	bl	8011224 <USBD_CtlSendData>
        break;
 8010fbc:	e004      	b.n	8010fc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010fbe:	6839      	ldr	r1, [r7, #0]
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f000 f8be 	bl	8011142 <USBD_CtlError>
        break;
 8010fc6:	bf00      	nop
}
 8010fc8:	bf00      	nop
 8010fca:	3708      	adds	r7, #8
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	3b01      	subs	r3, #1
 8010fe4:	2b02      	cmp	r3, #2
 8010fe6:	d81e      	bhi.n	8011026 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	88db      	ldrh	r3, [r3, #6]
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	d004      	beq.n	8010ffa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 f8a5 	bl	8011142 <USBD_CtlError>
        break;
 8010ff8:	e01a      	b.n	8011030 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011006:	2b00      	cmp	r3, #0
 8011008:	d005      	beq.n	8011016 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	f043 0202 	orr.w	r2, r3, #2
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	330c      	adds	r3, #12
 801101a:	2202      	movs	r2, #2
 801101c:	4619      	mov	r1, r3
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 f900 	bl	8011224 <USBD_CtlSendData>
      break;
 8011024:	e004      	b.n	8011030 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011026:	6839      	ldr	r1, [r7, #0]
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f000 f88a 	bl	8011142 <USBD_CtlError>
      break;
 801102e:	bf00      	nop
  }
}
 8011030:	bf00      	nop
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	885b      	ldrh	r3, [r3, #2]
 8011046:	2b01      	cmp	r3, #1
 8011048:	d107      	bne.n	801105a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2201      	movs	r2, #1
 801104e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 f940 	bl	80112d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011058:	e013      	b.n	8011082 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	885b      	ldrh	r3, [r3, #2]
 801105e:	2b02      	cmp	r3, #2
 8011060:	d10b      	bne.n	801107a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	889b      	ldrh	r3, [r3, #4]
 8011066:	0a1b      	lsrs	r3, r3, #8
 8011068:	b29b      	uxth	r3, r3
 801106a:	b2da      	uxtb	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f000 f930 	bl	80112d8 <USBD_CtlSendStatus>
}
 8011078:	e003      	b.n	8011082 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801107a:	6839      	ldr	r1, [r7, #0]
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 f860 	bl	8011142 <USBD_CtlError>
}
 8011082:	bf00      	nop
 8011084:	3708      	adds	r7, #8
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b082      	sub	sp, #8
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
 8011092:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801109a:	b2db      	uxtb	r3, r3
 801109c:	3b01      	subs	r3, #1
 801109e:	2b02      	cmp	r3, #2
 80110a0:	d80b      	bhi.n	80110ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	885b      	ldrh	r3, [r3, #2]
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	d10c      	bne.n	80110c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2200      	movs	r2, #0
 80110ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 f910 	bl	80112d8 <USBD_CtlSendStatus>
      }
      break;
 80110b8:	e004      	b.n	80110c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80110ba:	6839      	ldr	r1, [r7, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 f840 	bl	8011142 <USBD_CtlError>
      break;
 80110c2:	e000      	b.n	80110c6 <USBD_ClrFeature+0x3c>
      break;
 80110c4:	bf00      	nop
  }
}
 80110c6:	bf00      	nop
 80110c8:	3708      	adds	r7, #8
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b084      	sub	sp, #16
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
 80110d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	781a      	ldrb	r2, [r3, #0]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	3301      	adds	r3, #1
 80110e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	781a      	ldrb	r2, [r3, #0]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	3301      	adds	r3, #1
 80110f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f7ff fa41 	bl	8010580 <SWAPBYTE>
 80110fe:	4603      	mov	r3, r0
 8011100:	461a      	mov	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	3301      	adds	r3, #1
 801110a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	3301      	adds	r3, #1
 8011110:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011112:	68f8      	ldr	r0, [r7, #12]
 8011114:	f7ff fa34 	bl	8010580 <SWAPBYTE>
 8011118:	4603      	mov	r3, r0
 801111a:	461a      	mov	r2, r3
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	3301      	adds	r3, #1
 8011124:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	3301      	adds	r3, #1
 801112a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f7ff fa27 	bl	8010580 <SWAPBYTE>
 8011132:	4603      	mov	r3, r0
 8011134:	461a      	mov	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	80da      	strh	r2, [r3, #6]
}
 801113a:	bf00      	nop
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b082      	sub	sp, #8
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801114c:	2180      	movs	r1, #128	; 0x80
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f002 fe2a 	bl	8013da8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011154:	2100      	movs	r1, #0
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f002 fe26 	bl	8013da8 <USBD_LL_StallEP>
}
 801115c:	bf00      	nop
 801115e:	3708      	adds	r7, #8
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b086      	sub	sp, #24
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011170:	2300      	movs	r3, #0
 8011172:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d036      	beq.n	80111e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801117e:	6938      	ldr	r0, [r7, #16]
 8011180:	f000 f836 	bl	80111f0 <USBD_GetLen>
 8011184:	4603      	mov	r3, r0
 8011186:	3301      	adds	r3, #1
 8011188:	b29b      	uxth	r3, r3
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	b29a      	uxth	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011192:	7dfb      	ldrb	r3, [r7, #23]
 8011194:	68ba      	ldr	r2, [r7, #8]
 8011196:	4413      	add	r3, r2
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	7812      	ldrb	r2, [r2, #0]
 801119c:	701a      	strb	r2, [r3, #0]
  idx++;
 801119e:	7dfb      	ldrb	r3, [r7, #23]
 80111a0:	3301      	adds	r3, #1
 80111a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80111a4:	7dfb      	ldrb	r3, [r7, #23]
 80111a6:	68ba      	ldr	r2, [r7, #8]
 80111a8:	4413      	add	r3, r2
 80111aa:	2203      	movs	r2, #3
 80111ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80111ae:	7dfb      	ldrb	r3, [r7, #23]
 80111b0:	3301      	adds	r3, #1
 80111b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80111b4:	e013      	b.n	80111de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80111b6:	7dfb      	ldrb	r3, [r7, #23]
 80111b8:	68ba      	ldr	r2, [r7, #8]
 80111ba:	4413      	add	r3, r2
 80111bc:	693a      	ldr	r2, [r7, #16]
 80111be:	7812      	ldrb	r2, [r2, #0]
 80111c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	3301      	adds	r3, #1
 80111c6:	613b      	str	r3, [r7, #16]
    idx++;
 80111c8:	7dfb      	ldrb	r3, [r7, #23]
 80111ca:	3301      	adds	r3, #1
 80111cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80111ce:	7dfb      	ldrb	r3, [r7, #23]
 80111d0:	68ba      	ldr	r2, [r7, #8]
 80111d2:	4413      	add	r3, r2
 80111d4:	2200      	movs	r2, #0
 80111d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80111d8:	7dfb      	ldrb	r3, [r7, #23]
 80111da:	3301      	adds	r3, #1
 80111dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1e7      	bne.n	80111b6 <USBD_GetString+0x52>
 80111e6:	e000      	b.n	80111ea <USBD_GetString+0x86>
    return;
 80111e8:	bf00      	nop
  }
}
 80111ea:	3718      	adds	r7, #24
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b085      	sub	sp, #20
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80111f8:	2300      	movs	r3, #0
 80111fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011200:	e005      	b.n	801120e <USBD_GetLen+0x1e>
  {
    len++;
 8011202:	7bfb      	ldrb	r3, [r7, #15]
 8011204:	3301      	adds	r3, #1
 8011206:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	3301      	adds	r3, #1
 801120c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d1f5      	bne.n	8011202 <USBD_GetLen+0x12>
  }

  return len;
 8011216:	7bfb      	ldrb	r3, [r7, #15]
}
 8011218:	4618      	mov	r0, r3
 801121a:	3714      	adds	r7, #20
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr

08011224 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2202      	movs	r2, #2
 8011234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	68ba      	ldr	r2, [r7, #8]
 8011248:	2100      	movs	r1, #0
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f002 fe35 	bl	8013eba <USBD_LL_Transmit>

  return USBD_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b084      	sub	sp, #16
 801125e:	af00      	add	r7, sp, #0
 8011260:	60f8      	str	r0, [r7, #12]
 8011262:	60b9      	str	r1, [r7, #8]
 8011264:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	68ba      	ldr	r2, [r7, #8]
 801126a:	2100      	movs	r1, #0
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f002 fe24 	bl	8013eba <USBD_LL_Transmit>

  return USBD_OK;
 8011272:	2300      	movs	r3, #0
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b084      	sub	sp, #16
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2203      	movs	r2, #3
 801128c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	68ba      	ldr	r2, [r7, #8]
 80112a4:	2100      	movs	r1, #0
 80112a6:	68f8      	ldr	r0, [r7, #12]
 80112a8:	f002 fe28 	bl	8013efc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3710      	adds	r7, #16
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80112b6:	b580      	push	{r7, lr}
 80112b8:	b084      	sub	sp, #16
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	60f8      	str	r0, [r7, #12]
 80112be:	60b9      	str	r1, [r7, #8]
 80112c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	2100      	movs	r1, #0
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f002 fe17 	bl	8013efc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112ce:	2300      	movs	r3, #0
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2204      	movs	r2, #4
 80112e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80112e8:	2300      	movs	r3, #0
 80112ea:	2200      	movs	r2, #0
 80112ec:	2100      	movs	r1, #0
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f002 fde3 	bl	8013eba <USBD_LL_Transmit>

  return USBD_OK;
 80112f4:	2300      	movs	r3, #0
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3708      	adds	r7, #8
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}

080112fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b082      	sub	sp, #8
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2205      	movs	r2, #5
 801130a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801130e:	2300      	movs	r3, #0
 8011310:	2200      	movs	r2, #0
 8011312:	2100      	movs	r1, #0
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f002 fdf1 	bl	8013efc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011324:	b480      	push	{r7}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	4603      	mov	r3, r0
 801132c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801132e:	2300      	movs	r3, #0
 8011330:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011336:	2b84      	cmp	r3, #132	; 0x84
 8011338:	d005      	beq.n	8011346 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801133a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	4413      	add	r3, r2
 8011342:	3303      	adds	r3, #3
 8011344:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011346:	68fb      	ldr	r3, [r7, #12]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3714      	adds	r7, #20
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011358:	f000 ff52 	bl	8012200 <vTaskStartScheduler>
  
  return osOK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	4618      	mov	r0, r3
 8011360:	bd80      	pop	{r7, pc}

08011362 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011364:	b089      	sub	sp, #36	; 0x24
 8011366:	af04      	add	r7, sp, #16
 8011368:	6078      	str	r0, [r7, #4]
 801136a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	695b      	ldr	r3, [r3, #20]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d020      	beq.n	80113b6 <osThreadCreate+0x54>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	699b      	ldr	r3, [r3, #24]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d01c      	beq.n	80113b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	685c      	ldr	r4, [r3, #4]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681d      	ldr	r5, [r3, #0]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	691e      	ldr	r6, [r3, #16]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff ffc8 	bl	8011324 <makeFreeRtosPriority>
 8011394:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	695b      	ldr	r3, [r3, #20]
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801139e:	9202      	str	r2, [sp, #8]
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	9100      	str	r1, [sp, #0]
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	4632      	mov	r2, r6
 80113a8:	4629      	mov	r1, r5
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 fd4a 	bl	8011e44 <xTaskCreateStatic>
 80113b0:	4603      	mov	r3, r0
 80113b2:	60fb      	str	r3, [r7, #12]
 80113b4:	e01c      	b.n	80113f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	685c      	ldr	r4, [r3, #4]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80113c2:	b29e      	uxth	r6, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff ffaa 	bl	8011324 <makeFreeRtosPriority>
 80113d0:	4602      	mov	r2, r0
 80113d2:	f107 030c 	add.w	r3, r7, #12
 80113d6:	9301      	str	r3, [sp, #4]
 80113d8:	9200      	str	r2, [sp, #0]
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	4632      	mov	r2, r6
 80113de:	4629      	mov	r1, r5
 80113e0:	4620      	mov	r0, r4
 80113e2:	f000 fd8c 	bl	8011efe <xTaskCreate>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d001      	beq.n	80113f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80113ec:	2300      	movs	r3, #0
 80113ee:	e000      	b.n	80113f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80113f0:	68fb      	ldr	r3, [r7, #12]
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3714      	adds	r7, #20
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080113fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80113fa:	b580      	push	{r7, lr}
 80113fc:	b084      	sub	sp, #16
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d001      	beq.n	8011410 <osDelay+0x16>
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	e000      	b.n	8011412 <osDelay+0x18>
 8011410:	2301      	movs	r3, #1
 8011412:	4618      	mov	r0, r3
 8011414:	f000 fec0 	bl	8012198 <vTaskDelay>
  
  return osOK;
 8011418:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801141a:	4618      	mov	r0, r3
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}

08011422 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011422:	b480      	push	{r7}
 8011424:	b083      	sub	sp, #12
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f103 0208 	add.w	r2, r3, #8
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f04f 32ff 	mov.w	r2, #4294967295
 801143a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f103 0208 	add.w	r2, r3, #8
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f103 0208 	add.w	r2, r3, #8
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011456:	bf00      	nop
 8011458:	370c      	adds	r7, #12
 801145a:	46bd      	mov	sp, r7
 801145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011460:	4770      	bx	lr

08011462 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011462:	b480      	push	{r7}
 8011464:	b083      	sub	sp, #12
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011470:	bf00      	nop
 8011472:	370c      	adds	r7, #12
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr

0801147c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801147c:	b480      	push	{r7}
 801147e:	b085      	sub	sp, #20
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	68fa      	ldr	r2, [r7, #12]
 8011490:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	689a      	ldr	r2, [r3, #8]
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	687a      	ldr	r2, [r7, #4]
 80114ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	1c5a      	adds	r2, r3, #1
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	601a      	str	r2, [r3, #0]
}
 80114b8:	bf00      	nop
 80114ba:	3714      	adds	r7, #20
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80114c4:	b480      	push	{r7}
 80114c6:	b085      	sub	sp, #20
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114da:	d103      	bne.n	80114e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	691b      	ldr	r3, [r3, #16]
 80114e0:	60fb      	str	r3, [r7, #12]
 80114e2:	e00c      	b.n	80114fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	3308      	adds	r3, #8
 80114e8:	60fb      	str	r3, [r7, #12]
 80114ea:	e002      	b.n	80114f2 <vListInsert+0x2e>
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	60fb      	str	r3, [r7, #12]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	68ba      	ldr	r2, [r7, #8]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d2f6      	bcs.n	80114ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	685a      	ldr	r2, [r3, #4]
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	683a      	ldr	r2, [r7, #0]
 801150c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	68fa      	ldr	r2, [r7, #12]
 8011512:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	683a      	ldr	r2, [r7, #0]
 8011518:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	1c5a      	adds	r2, r3, #1
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	601a      	str	r2, [r3, #0]
}
 801152a:	bf00      	nop
 801152c:	3714      	adds	r7, #20
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr

08011536 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011536:	b480      	push	{r7}
 8011538:	b085      	sub	sp, #20
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	691b      	ldr	r3, [r3, #16]
 8011542:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	687a      	ldr	r2, [r7, #4]
 801154a:	6892      	ldr	r2, [r2, #8]
 801154c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	689b      	ldr	r3, [r3, #8]
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	6852      	ldr	r2, [r2, #4]
 8011556:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	429a      	cmp	r2, r3
 8011560:	d103      	bne.n	801156a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	689a      	ldr	r2, [r3, #8]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2200      	movs	r2, #0
 801156e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	1e5a      	subs	r2, r3, #1
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3714      	adds	r7, #20
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr
	...

0801158c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d10a      	bne.n	80115b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80115a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a4:	f383 8811 	msr	BASEPRI, r3
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80115b2:	bf00      	nop
 80115b4:	e7fe      	b.n	80115b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80115b6:	f001 fd85 	bl	80130c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115c2:	68f9      	ldr	r1, [r7, #12]
 80115c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80115c6:	fb01 f303 	mul.w	r3, r1, r3
 80115ca:	441a      	add	r2, r3
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2200      	movs	r2, #0
 80115d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115e6:	3b01      	subs	r3, #1
 80115e8:	68f9      	ldr	r1, [r7, #12]
 80115ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80115ec:	fb01 f303 	mul.w	r3, r1, r3
 80115f0:	441a      	add	r2, r3
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	22ff      	movs	r2, #255	; 0xff
 80115fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	22ff      	movs	r2, #255	; 0xff
 8011602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d114      	bne.n	8011636 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	691b      	ldr	r3, [r3, #16]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d01a      	beq.n	801164a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	3310      	adds	r3, #16
 8011618:	4618      	mov	r0, r3
 801161a:	f001 f843 	bl	80126a4 <xTaskRemoveFromEventList>
 801161e:	4603      	mov	r3, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	d012      	beq.n	801164a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011624:	4b0c      	ldr	r3, [pc, #48]	; (8011658 <xQueueGenericReset+0xcc>)
 8011626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801162a:	601a      	str	r2, [r3, #0]
 801162c:	f3bf 8f4f 	dsb	sy
 8011630:	f3bf 8f6f 	isb	sy
 8011634:	e009      	b.n	801164a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	3310      	adds	r3, #16
 801163a:	4618      	mov	r0, r3
 801163c:	f7ff fef1 	bl	8011422 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	3324      	adds	r3, #36	; 0x24
 8011644:	4618      	mov	r0, r3
 8011646:	f7ff feec 	bl	8011422 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801164a:	f001 fd6b 	bl	8013124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801164e:	2301      	movs	r3, #1
}
 8011650:	4618      	mov	r0, r3
 8011652:	3710      	adds	r7, #16
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}
 8011658:	e000ed04 	.word	0xe000ed04

0801165c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801165c:	b580      	push	{r7, lr}
 801165e:	b08a      	sub	sp, #40	; 0x28
 8011660:	af02      	add	r7, sp, #8
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	4613      	mov	r3, r2
 8011668:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d10a      	bne.n	8011686 <xQueueGenericCreate+0x2a>
	__asm volatile
 8011670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011674:	f383 8811 	msr	BASEPRI, r3
 8011678:	f3bf 8f6f 	isb	sy
 801167c:	f3bf 8f4f 	dsb	sy
 8011680:	613b      	str	r3, [r7, #16]
}
 8011682:	bf00      	nop
 8011684:	e7fe      	b.n	8011684 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	68ba      	ldr	r2, [r7, #8]
 801168a:	fb02 f303 	mul.w	r3, r2, r3
 801168e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	3348      	adds	r3, #72	; 0x48
 8011694:	4618      	mov	r0, r3
 8011696:	f001 fe37 	bl	8013308 <pvPortMalloc>
 801169a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d011      	beq.n	80116c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	3348      	adds	r3, #72	; 0x48
 80116aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	2200      	movs	r2, #0
 80116b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80116b4:	79fa      	ldrb	r2, [r7, #7]
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	9300      	str	r3, [sp, #0]
 80116ba:	4613      	mov	r3, r2
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	68b9      	ldr	r1, [r7, #8]
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f000 f805 	bl	80116d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80116c6:	69bb      	ldr	r3, [r7, #24]
	}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3720      	adds	r7, #32
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
 80116dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d103      	bne.n	80116ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	69ba      	ldr	r2, [r7, #24]
 80116e8:	601a      	str	r2, [r3, #0]
 80116ea:	e002      	b.n	80116f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	68fa      	ldr	r2, [r7, #12]
 80116f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	68ba      	ldr	r2, [r7, #8]
 80116fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80116fe:	2101      	movs	r1, #1
 8011700:	69b8      	ldr	r0, [r7, #24]
 8011702:	f7ff ff43 	bl	801158c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011706:	bf00      	nop
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
	...

08011710 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b08e      	sub	sp, #56	; 0x38
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	607a      	str	r2, [r7, #4]
 801171c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801171e:	2300      	movs	r3, #0
 8011720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011728:	2b00      	cmp	r3, #0
 801172a:	d10a      	bne.n	8011742 <xQueueGenericSend+0x32>
	__asm volatile
 801172c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011730:	f383 8811 	msr	BASEPRI, r3
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801173e:	bf00      	nop
 8011740:	e7fe      	b.n	8011740 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d103      	bne.n	8011750 <xQueueGenericSend+0x40>
 8011748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801174c:	2b00      	cmp	r3, #0
 801174e:	d101      	bne.n	8011754 <xQueueGenericSend+0x44>
 8011750:	2301      	movs	r3, #1
 8011752:	e000      	b.n	8011756 <xQueueGenericSend+0x46>
 8011754:	2300      	movs	r3, #0
 8011756:	2b00      	cmp	r3, #0
 8011758:	d10a      	bne.n	8011770 <xQueueGenericSend+0x60>
	__asm volatile
 801175a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801175e:	f383 8811 	msr	BASEPRI, r3
 8011762:	f3bf 8f6f 	isb	sy
 8011766:	f3bf 8f4f 	dsb	sy
 801176a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801176c:	bf00      	nop
 801176e:	e7fe      	b.n	801176e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	2b02      	cmp	r3, #2
 8011774:	d103      	bne.n	801177e <xQueueGenericSend+0x6e>
 8011776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801177a:	2b01      	cmp	r3, #1
 801177c:	d101      	bne.n	8011782 <xQueueGenericSend+0x72>
 801177e:	2301      	movs	r3, #1
 8011780:	e000      	b.n	8011784 <xQueueGenericSend+0x74>
 8011782:	2300      	movs	r3, #0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d10a      	bne.n	801179e <xQueueGenericSend+0x8e>
	__asm volatile
 8011788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801178c:	f383 8811 	msr	BASEPRI, r3
 8011790:	f3bf 8f6f 	isb	sy
 8011794:	f3bf 8f4f 	dsb	sy
 8011798:	623b      	str	r3, [r7, #32]
}
 801179a:	bf00      	nop
 801179c:	e7fe      	b.n	801179c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801179e:	f001 f941 	bl	8012a24 <xTaskGetSchedulerState>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d102      	bne.n	80117ae <xQueueGenericSend+0x9e>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d101      	bne.n	80117b2 <xQueueGenericSend+0xa2>
 80117ae:	2301      	movs	r3, #1
 80117b0:	e000      	b.n	80117b4 <xQueueGenericSend+0xa4>
 80117b2:	2300      	movs	r3, #0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d10a      	bne.n	80117ce <xQueueGenericSend+0xbe>
	__asm volatile
 80117b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117bc:	f383 8811 	msr	BASEPRI, r3
 80117c0:	f3bf 8f6f 	isb	sy
 80117c4:	f3bf 8f4f 	dsb	sy
 80117c8:	61fb      	str	r3, [r7, #28]
}
 80117ca:	bf00      	nop
 80117cc:	e7fe      	b.n	80117cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80117ce:	f001 fc79 	bl	80130c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80117d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117da:	429a      	cmp	r2, r3
 80117dc:	d302      	bcc.n	80117e4 <xQueueGenericSend+0xd4>
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	2b02      	cmp	r3, #2
 80117e2:	d129      	bne.n	8011838 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117e4:	683a      	ldr	r2, [r7, #0]
 80117e6:	68b9      	ldr	r1, [r7, #8]
 80117e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117ea:	f000 fa41 	bl	8011c70 <prvCopyDataToQueue>
 80117ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d010      	beq.n	801181a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fa:	3324      	adds	r3, #36	; 0x24
 80117fc:	4618      	mov	r0, r3
 80117fe:	f000 ff51 	bl	80126a4 <xTaskRemoveFromEventList>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d013      	beq.n	8011830 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011808:	4b3f      	ldr	r3, [pc, #252]	; (8011908 <xQueueGenericSend+0x1f8>)
 801180a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801180e:	601a      	str	r2, [r3, #0]
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	f3bf 8f6f 	isb	sy
 8011818:	e00a      	b.n	8011830 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181c:	2b00      	cmp	r3, #0
 801181e:	d007      	beq.n	8011830 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011820:	4b39      	ldr	r3, [pc, #228]	; (8011908 <xQueueGenericSend+0x1f8>)
 8011822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011826:	601a      	str	r2, [r3, #0]
 8011828:	f3bf 8f4f 	dsb	sy
 801182c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011830:	f001 fc78 	bl	8013124 <vPortExitCritical>
				return pdPASS;
 8011834:	2301      	movs	r3, #1
 8011836:	e063      	b.n	8011900 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d103      	bne.n	8011846 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801183e:	f001 fc71 	bl	8013124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011842:	2300      	movs	r3, #0
 8011844:	e05c      	b.n	8011900 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011848:	2b00      	cmp	r3, #0
 801184a:	d106      	bne.n	801185a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801184c:	f107 0314 	add.w	r3, r7, #20
 8011850:	4618      	mov	r0, r3
 8011852:	f000 ff89 	bl	8012768 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011856:	2301      	movs	r3, #1
 8011858:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801185a:	f001 fc63 	bl	8013124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801185e:	f000 fd39 	bl	80122d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011862:	f001 fc2f 	bl	80130c4 <vPortEnterCritical>
 8011866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801186c:	b25b      	sxtb	r3, r3
 801186e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011872:	d103      	bne.n	801187c <xQueueGenericSend+0x16c>
 8011874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011876:	2200      	movs	r2, #0
 8011878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011882:	b25b      	sxtb	r3, r3
 8011884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011888:	d103      	bne.n	8011892 <xQueueGenericSend+0x182>
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	2200      	movs	r2, #0
 801188e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011892:	f001 fc47 	bl	8013124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011896:	1d3a      	adds	r2, r7, #4
 8011898:	f107 0314 	add.w	r3, r7, #20
 801189c:	4611      	mov	r1, r2
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 ff78 	bl	8012794 <xTaskCheckForTimeOut>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d124      	bne.n	80118f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80118aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118ac:	f000 fab2 	bl	8011e14 <prvIsQueueFull>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d018      	beq.n	80118e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80118b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b8:	3310      	adds	r3, #16
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	4611      	mov	r1, r2
 80118be:	4618      	mov	r0, r3
 80118c0:	f000 fecc 	bl	801265c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80118c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118c6:	f000 fa3d 	bl	8011d44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80118ca:	f000 fd11 	bl	80122f0 <xTaskResumeAll>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	f47f af7c 	bne.w	80117ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80118d6:	4b0c      	ldr	r3, [pc, #48]	; (8011908 <xQueueGenericSend+0x1f8>)
 80118d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	f3bf 8f6f 	isb	sy
 80118e6:	e772      	b.n	80117ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80118e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118ea:	f000 fa2b 	bl	8011d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80118ee:	f000 fcff 	bl	80122f0 <xTaskResumeAll>
 80118f2:	e76c      	b.n	80117ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80118f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118f6:	f000 fa25 	bl	8011d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80118fa:	f000 fcf9 	bl	80122f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80118fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011900:	4618      	mov	r0, r3
 8011902:	3738      	adds	r7, #56	; 0x38
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	e000ed04 	.word	0xe000ed04

0801190c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b08e      	sub	sp, #56	; 0x38
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191c:	2b00      	cmp	r3, #0
 801191e:	d10a      	bne.n	8011936 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011924:	f383 8811 	msr	BASEPRI, r3
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	f3bf 8f4f 	dsb	sy
 8011930:	623b      	str	r3, [r7, #32]
}
 8011932:	bf00      	nop
 8011934:	e7fe      	b.n	8011934 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00a      	beq.n	8011954 <xQueueGiveFromISR+0x48>
	__asm volatile
 801193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011942:	f383 8811 	msr	BASEPRI, r3
 8011946:	f3bf 8f6f 	isb	sy
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	61fb      	str	r3, [r7, #28]
}
 8011950:	bf00      	nop
 8011952:	e7fe      	b.n	8011952 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d103      	bne.n	8011964 <xQueueGiveFromISR+0x58>
 801195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195e:	689b      	ldr	r3, [r3, #8]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d101      	bne.n	8011968 <xQueueGiveFromISR+0x5c>
 8011964:	2301      	movs	r3, #1
 8011966:	e000      	b.n	801196a <xQueueGiveFromISR+0x5e>
 8011968:	2300      	movs	r3, #0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d10a      	bne.n	8011984 <xQueueGiveFromISR+0x78>
	__asm volatile
 801196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011972:	f383 8811 	msr	BASEPRI, r3
 8011976:	f3bf 8f6f 	isb	sy
 801197a:	f3bf 8f4f 	dsb	sy
 801197e:	61bb      	str	r3, [r7, #24]
}
 8011980:	bf00      	nop
 8011982:	e7fe      	b.n	8011982 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011984:	f001 fc80 	bl	8013288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011988:	f3ef 8211 	mrs	r2, BASEPRI
 801198c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011990:	f383 8811 	msr	BASEPRI, r3
 8011994:	f3bf 8f6f 	isb	sy
 8011998:	f3bf 8f4f 	dsb	sy
 801199c:	617a      	str	r2, [r7, #20]
 801199e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80119a0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80119a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119a8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80119aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d22b      	bcs.n	8011a0c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80119b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80119be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c0:	1c5a      	adds	r2, r3, #1
 80119c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80119c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80119ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ce:	d112      	bne.n	80119f6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d016      	beq.n	8011a06 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119da:	3324      	adds	r3, #36	; 0x24
 80119dc:	4618      	mov	r0, r3
 80119de:	f000 fe61 	bl	80126a4 <xTaskRemoveFromEventList>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d00e      	beq.n	8011a06 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d00b      	beq.n	8011a06 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	2201      	movs	r2, #1
 80119f2:	601a      	str	r2, [r3, #0]
 80119f4:	e007      	b.n	8011a06 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80119f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119fa:	3301      	adds	r3, #1
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	b25a      	sxtb	r2, r3
 8011a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011a06:	2301      	movs	r3, #1
 8011a08:	637b      	str	r3, [r7, #52]	; 0x34
 8011a0a:	e001      	b.n	8011a10 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8011a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a12:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011a1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3738      	adds	r7, #56	; 0x38
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
	...

08011a28 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b08e      	sub	sp, #56	; 0x38
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011a32:	2300      	movs	r3, #0
 8011a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d10a      	bne.n	8011a5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a48:	f383 8811 	msr	BASEPRI, r3
 8011a4c:	f3bf 8f6f 	isb	sy
 8011a50:	f3bf 8f4f 	dsb	sy
 8011a54:	623b      	str	r3, [r7, #32]
}
 8011a56:	bf00      	nop
 8011a58:	e7fe      	b.n	8011a58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00a      	beq.n	8011a78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a66:	f383 8811 	msr	BASEPRI, r3
 8011a6a:	f3bf 8f6f 	isb	sy
 8011a6e:	f3bf 8f4f 	dsb	sy
 8011a72:	61fb      	str	r3, [r7, #28]
}
 8011a74:	bf00      	nop
 8011a76:	e7fe      	b.n	8011a76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a78:	f000 ffd4 	bl	8012a24 <xTaskGetSchedulerState>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d102      	bne.n	8011a88 <xQueueSemaphoreTake+0x60>
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d101      	bne.n	8011a8c <xQueueSemaphoreTake+0x64>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	e000      	b.n	8011a8e <xQueueSemaphoreTake+0x66>
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d10a      	bne.n	8011aa8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a96:	f383 8811 	msr	BASEPRI, r3
 8011a9a:	f3bf 8f6f 	isb	sy
 8011a9e:	f3bf 8f4f 	dsb	sy
 8011aa2:	61bb      	str	r3, [r7, #24]
}
 8011aa4:	bf00      	nop
 8011aa6:	e7fe      	b.n	8011aa6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011aa8:	f001 fb0c 	bl	80130c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ab0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d024      	beq.n	8011b02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aba:	1e5a      	subs	r2, r3, #1
 8011abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011abe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d104      	bne.n	8011ad2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011ac8:	f001 f954 	bl	8012d74 <pvTaskIncrementMutexHeldCount>
 8011acc:	4602      	mov	r2, r0
 8011ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00f      	beq.n	8011afa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011adc:	3310      	adds	r3, #16
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f000 fde0 	bl	80126a4 <xTaskRemoveFromEventList>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d007      	beq.n	8011afa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011aea:	4b54      	ldr	r3, [pc, #336]	; (8011c3c <xQueueSemaphoreTake+0x214>)
 8011aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011af0:	601a      	str	r2, [r3, #0]
 8011af2:	f3bf 8f4f 	dsb	sy
 8011af6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011afa:	f001 fb13 	bl	8013124 <vPortExitCritical>
				return pdPASS;
 8011afe:	2301      	movs	r3, #1
 8011b00:	e097      	b.n	8011c32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d111      	bne.n	8011b2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d00a      	beq.n	8011b24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b12:	f383 8811 	msr	BASEPRI, r3
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	f3bf 8f4f 	dsb	sy
 8011b1e:	617b      	str	r3, [r7, #20]
}
 8011b20:	bf00      	nop
 8011b22:	e7fe      	b.n	8011b22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011b24:	f001 fafe 	bl	8013124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	e082      	b.n	8011c32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d106      	bne.n	8011b40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b32:	f107 030c 	add.w	r3, r7, #12
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 fe16 	bl	8012768 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b40:	f001 faf0 	bl	8013124 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b44:	f000 fbc6 	bl	80122d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b48:	f001 fabc 	bl	80130c4 <vPortEnterCritical>
 8011b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b52:	b25b      	sxtb	r3, r3
 8011b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b58:	d103      	bne.n	8011b62 <xQueueSemaphoreTake+0x13a>
 8011b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b68:	b25b      	sxtb	r3, r3
 8011b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b6e:	d103      	bne.n	8011b78 <xQueueSemaphoreTake+0x150>
 8011b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b72:	2200      	movs	r2, #0
 8011b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b78:	f001 fad4 	bl	8013124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b7c:	463a      	mov	r2, r7
 8011b7e:	f107 030c 	add.w	r3, r7, #12
 8011b82:	4611      	mov	r1, r2
 8011b84:	4618      	mov	r0, r3
 8011b86:	f000 fe05 	bl	8012794 <xTaskCheckForTimeOut>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d132      	bne.n	8011bf6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b92:	f000 f929 	bl	8011de8 <prvIsQueueEmpty>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d026      	beq.n	8011bea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d109      	bne.n	8011bb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011ba4:	f001 fa8e 	bl	80130c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	689b      	ldr	r3, [r3, #8]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f000 ff57 	bl	8012a60 <xTaskPriorityInherit>
 8011bb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011bb4:	f001 fab6 	bl	8013124 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bba:	3324      	adds	r3, #36	; 0x24
 8011bbc:	683a      	ldr	r2, [r7, #0]
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f000 fd4b 	bl	801265c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011bc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bc8:	f000 f8bc 	bl	8011d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011bcc:	f000 fb90 	bl	80122f0 <xTaskResumeAll>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f47f af68 	bne.w	8011aa8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011bd8:	4b18      	ldr	r3, [pc, #96]	; (8011c3c <xQueueSemaphoreTake+0x214>)
 8011bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bde:	601a      	str	r2, [r3, #0]
 8011be0:	f3bf 8f4f 	dsb	sy
 8011be4:	f3bf 8f6f 	isb	sy
 8011be8:	e75e      	b.n	8011aa8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bec:	f000 f8aa 	bl	8011d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011bf0:	f000 fb7e 	bl	80122f0 <xTaskResumeAll>
 8011bf4:	e758      	b.n	8011aa8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bf8:	f000 f8a4 	bl	8011d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011bfc:	f000 fb78 	bl	80122f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c02:	f000 f8f1 	bl	8011de8 <prvIsQueueEmpty>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f43f af4d 	beq.w	8011aa8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00d      	beq.n	8011c30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011c14:	f001 fa56 	bl	80130c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c1a:	f000 f811 	bl	8011c40 <prvGetDisinheritPriorityAfterTimeout>
 8011c1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c22:	689b      	ldr	r3, [r3, #8]
 8011c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c26:	4618      	mov	r0, r3
 8011c28:	f001 f816 	bl	8012c58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011c2c:	f001 fa7a 	bl	8013124 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3738      	adds	r7, #56	; 0x38
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	e000ed04 	.word	0xe000ed04

08011c40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011c40:	b480      	push	{r7}
 8011c42:	b085      	sub	sp, #20
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d006      	beq.n	8011c5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f1c3 0307 	rsb	r3, r3, #7
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	e001      	b.n	8011c62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011c62:	68fb      	ldr	r3, [r7, #12]
	}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3714      	adds	r7, #20
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6e:	4770      	bx	lr

08011c70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b086      	sub	sp, #24
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10d      	bne.n	8011caa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d14d      	bne.n	8011d32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	689b      	ldr	r3, [r3, #8]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f000 ff56 	bl	8012b4c <xTaskPriorityDisinherit>
 8011ca0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	609a      	str	r2, [r3, #8]
 8011ca8:	e043      	b.n	8011d32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d119      	bne.n	8011ce4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6858      	ldr	r0, [r3, #4]
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb8:	461a      	mov	r2, r3
 8011cba:	68b9      	ldr	r1, [r7, #8]
 8011cbc:	f002 faa7 	bl	801420e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	685a      	ldr	r2, [r3, #4]
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc8:	441a      	add	r2, r3
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	685a      	ldr	r2, [r3, #4]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d32b      	bcc.n	8011d32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	605a      	str	r2, [r3, #4]
 8011ce2:	e026      	b.n	8011d32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	68d8      	ldr	r0, [r3, #12]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cec:	461a      	mov	r2, r3
 8011cee:	68b9      	ldr	r1, [r7, #8]
 8011cf0:	f002 fa8d 	bl	801420e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	68da      	ldr	r2, [r3, #12]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfc:	425b      	negs	r3, r3
 8011cfe:	441a      	add	r2, r3
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	68da      	ldr	r2, [r3, #12]
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d207      	bcs.n	8011d20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	689a      	ldr	r2, [r3, #8]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d18:	425b      	negs	r3, r3
 8011d1a:	441a      	add	r2, r3
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b02      	cmp	r3, #2
 8011d24:	d105      	bne.n	8011d32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d002      	beq.n	8011d32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	1c5a      	adds	r2, r3, #1
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011d3a:	697b      	ldr	r3, [r7, #20]
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3718      	adds	r7, #24
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011d4c:	f001 f9ba 	bl	80130c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d58:	e011      	b.n	8011d7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d012      	beq.n	8011d88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	3324      	adds	r3, #36	; 0x24
 8011d66:	4618      	mov	r0, r3
 8011d68:	f000 fc9c 	bl	80126a4 <xTaskRemoveFromEventList>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d001      	beq.n	8011d76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011d72:	f000 fd71 	bl	8012858 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	dce9      	bgt.n	8011d5a <prvUnlockQueue+0x16>
 8011d86:	e000      	b.n	8011d8a <prvUnlockQueue+0x46>
					break;
 8011d88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	22ff      	movs	r2, #255	; 0xff
 8011d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011d92:	f001 f9c7 	bl	8013124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011d96:	f001 f995 	bl	80130c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011da0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011da2:	e011      	b.n	8011dc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	691b      	ldr	r3, [r3, #16]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d012      	beq.n	8011dd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	3310      	adds	r3, #16
 8011db0:	4618      	mov	r0, r3
 8011db2:	f000 fc77 	bl	80126a4 <xTaskRemoveFromEventList>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d001      	beq.n	8011dc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011dbc:	f000 fd4c 	bl	8012858 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011dc0:	7bbb      	ldrb	r3, [r7, #14]
 8011dc2:	3b01      	subs	r3, #1
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	dce9      	bgt.n	8011da4 <prvUnlockQueue+0x60>
 8011dd0:	e000      	b.n	8011dd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011dd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	22ff      	movs	r2, #255	; 0xff
 8011dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011ddc:	f001 f9a2 	bl	8013124 <vPortExitCritical>
}
 8011de0:	bf00      	nop
 8011de2:	3710      	adds	r7, #16
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b084      	sub	sp, #16
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011df0:	f001 f968 	bl	80130c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d102      	bne.n	8011e02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	60fb      	str	r3, [r7, #12]
 8011e00:	e001      	b.n	8011e06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011e02:	2300      	movs	r3, #0
 8011e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011e06:	f001 f98d 	bl	8013124 <vPortExitCritical>

	return xReturn;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3710      	adds	r7, #16
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011e1c:	f001 f952 	bl	80130c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d102      	bne.n	8011e32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	e001      	b.n	8011e36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011e32:	2300      	movs	r3, #0
 8011e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011e36:	f001 f975 	bl	8013124 <vPortExitCritical>

	return xReturn;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3710      	adds	r7, #16
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b08e      	sub	sp, #56	; 0x38
 8011e48:	af04      	add	r7, sp, #16
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	607a      	str	r2, [r7, #4]
 8011e50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d10a      	bne.n	8011e6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e5c:	f383 8811 	msr	BASEPRI, r3
 8011e60:	f3bf 8f6f 	isb	sy
 8011e64:	f3bf 8f4f 	dsb	sy
 8011e68:	623b      	str	r3, [r7, #32]
}
 8011e6a:	bf00      	nop
 8011e6c:	e7fe      	b.n	8011e6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d10a      	bne.n	8011e8a <xTaskCreateStatic+0x46>
	__asm volatile
 8011e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e78:	f383 8811 	msr	BASEPRI, r3
 8011e7c:	f3bf 8f6f 	isb	sy
 8011e80:	f3bf 8f4f 	dsb	sy
 8011e84:	61fb      	str	r3, [r7, #28]
}
 8011e86:	bf00      	nop
 8011e88:	e7fe      	b.n	8011e88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011e8a:	23b4      	movs	r3, #180	; 0xb4
 8011e8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	2bb4      	cmp	r3, #180	; 0xb4
 8011e92:	d00a      	beq.n	8011eaa <xTaskCreateStatic+0x66>
	__asm volatile
 8011e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e98:	f383 8811 	msr	BASEPRI, r3
 8011e9c:	f3bf 8f6f 	isb	sy
 8011ea0:	f3bf 8f4f 	dsb	sy
 8011ea4:	61bb      	str	r3, [r7, #24]
}
 8011ea6:	bf00      	nop
 8011ea8:	e7fe      	b.n	8011ea8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011eaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d01e      	beq.n	8011ef0 <xTaskCreateStatic+0xac>
 8011eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d01b      	beq.n	8011ef0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ec0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec4:	2202      	movs	r2, #2
 8011ec6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011eca:	2300      	movs	r3, #0
 8011ecc:	9303      	str	r3, [sp, #12]
 8011ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed0:	9302      	str	r3, [sp, #8]
 8011ed2:	f107 0314 	add.w	r3, r7, #20
 8011ed6:	9301      	str	r3, [sp, #4]
 8011ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eda:	9300      	str	r3, [sp, #0]
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	68b9      	ldr	r1, [r7, #8]
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f000 f850 	bl	8011f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eea:	f000 f8eb 	bl	80120c4 <prvAddNewTaskToReadyList>
 8011eee:	e001      	b.n	8011ef4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011ef4:	697b      	ldr	r3, [r7, #20]
	}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3728      	adds	r7, #40	; 0x28
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}

08011efe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011efe:	b580      	push	{r7, lr}
 8011f00:	b08c      	sub	sp, #48	; 0x30
 8011f02:	af04      	add	r7, sp, #16
 8011f04:	60f8      	str	r0, [r7, #12]
 8011f06:	60b9      	str	r1, [r7, #8]
 8011f08:	603b      	str	r3, [r7, #0]
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011f0e:	88fb      	ldrh	r3, [r7, #6]
 8011f10:	009b      	lsls	r3, r3, #2
 8011f12:	4618      	mov	r0, r3
 8011f14:	f001 f9f8 	bl	8013308 <pvPortMalloc>
 8011f18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00e      	beq.n	8011f3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011f20:	20b4      	movs	r0, #180	; 0xb4
 8011f22:	f001 f9f1 	bl	8013308 <pvPortMalloc>
 8011f26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011f28:	69fb      	ldr	r3, [r7, #28]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d003      	beq.n	8011f36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	697a      	ldr	r2, [r7, #20]
 8011f32:	631a      	str	r2, [r3, #48]	; 0x30
 8011f34:	e005      	b.n	8011f42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011f36:	6978      	ldr	r0, [r7, #20]
 8011f38:	f001 fab2 	bl	80134a0 <vPortFree>
 8011f3c:	e001      	b.n	8011f42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d017      	beq.n	8011f78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011f50:	88fa      	ldrh	r2, [r7, #6]
 8011f52:	2300      	movs	r3, #0
 8011f54:	9303      	str	r3, [sp, #12]
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	9302      	str	r3, [sp, #8]
 8011f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5c:	9301      	str	r3, [sp, #4]
 8011f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f60:	9300      	str	r3, [sp, #0]
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	68b9      	ldr	r1, [r7, #8]
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f000 f80e 	bl	8011f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f6c:	69f8      	ldr	r0, [r7, #28]
 8011f6e:	f000 f8a9 	bl	80120c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011f72:	2301      	movs	r3, #1
 8011f74:	61bb      	str	r3, [r7, #24]
 8011f76:	e002      	b.n	8011f7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011f78:	f04f 33ff 	mov.w	r3, #4294967295
 8011f7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3720      	adds	r7, #32
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b088      	sub	sp, #32
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
 8011f94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	4413      	add	r3, r2
 8011fa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	f023 0307 	bic.w	r3, r3, #7
 8011fae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	f003 0307 	and.w	r3, r3, #7
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00a      	beq.n	8011fd0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8011fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fbe:	f383 8811 	msr	BASEPRI, r3
 8011fc2:	f3bf 8f6f 	isb	sy
 8011fc6:	f3bf 8f4f 	dsb	sy
 8011fca:	617b      	str	r3, [r7, #20]
}
 8011fcc:	bf00      	nop
 8011fce:	e7fe      	b.n	8011fce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d01f      	beq.n	8012016 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	61fb      	str	r3, [r7, #28]
 8011fda:	e012      	b.n	8012002 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011fdc:	68ba      	ldr	r2, [r7, #8]
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	7819      	ldrb	r1, [r3, #0]
 8011fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	4413      	add	r3, r2
 8011fea:	3334      	adds	r3, #52	; 0x34
 8011fec:	460a      	mov	r2, r1
 8011fee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011ff0:	68ba      	ldr	r2, [r7, #8]
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d006      	beq.n	801200a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	3301      	adds	r3, #1
 8012000:	61fb      	str	r3, [r7, #28]
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	2b0f      	cmp	r3, #15
 8012006:	d9e9      	bls.n	8011fdc <prvInitialiseNewTask+0x54>
 8012008:	e000      	b.n	801200c <prvInitialiseNewTask+0x84>
			{
				break;
 801200a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200e:	2200      	movs	r2, #0
 8012010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012014:	e003      	b.n	801201e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012018:	2200      	movs	r2, #0
 801201a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012020:	2b06      	cmp	r3, #6
 8012022:	d901      	bls.n	8012028 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012024:	2306      	movs	r3, #6
 8012026:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801202c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012032:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012036:	2200      	movs	r2, #0
 8012038:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203c:	3304      	adds	r3, #4
 801203e:	4618      	mov	r0, r3
 8012040:	f7ff fa0f 	bl	8011462 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012046:	3318      	adds	r3, #24
 8012048:	4618      	mov	r0, r3
 801204a:	f7ff fa0a 	bl	8011462 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012052:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012056:	f1c3 0207 	rsb	r2, r3, #7
 801205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012062:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012066:	2200      	movs	r2, #0
 8012068:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206e:	2200      	movs	r2, #0
 8012070:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012076:	334c      	adds	r3, #76	; 0x4c
 8012078:	2260      	movs	r2, #96	; 0x60
 801207a:	2100      	movs	r1, #0
 801207c:	4618      	mov	r0, r3
 801207e:	f002 f8ee 	bl	801425e <memset>
 8012082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012084:	4a0c      	ldr	r2, [pc, #48]	; (80120b8 <prvInitialiseNewTask+0x130>)
 8012086:	651a      	str	r2, [r3, #80]	; 0x50
 8012088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801208a:	4a0c      	ldr	r2, [pc, #48]	; (80120bc <prvInitialiseNewTask+0x134>)
 801208c:	655a      	str	r2, [r3, #84]	; 0x54
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	4a0b      	ldr	r2, [pc, #44]	; (80120c0 <prvInitialiseNewTask+0x138>)
 8012092:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012094:	683a      	ldr	r2, [r7, #0]
 8012096:	68f9      	ldr	r1, [r7, #12]
 8012098:	69b8      	ldr	r0, [r7, #24]
 801209a:	f000 fee5 	bl	8012e68 <pxPortInitialiseStack>
 801209e:	4602      	mov	r2, r0
 80120a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80120a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d002      	beq.n	80120b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80120aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120b0:	bf00      	nop
 80120b2:	3720      	adds	r7, #32
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	080179b0 	.word	0x080179b0
 80120bc:	080179d0 	.word	0x080179d0
 80120c0:	08017990 	.word	0x08017990

080120c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80120cc:	f000 fffa 	bl	80130c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80120d0:	4b2a      	ldr	r3, [pc, #168]	; (801217c <prvAddNewTaskToReadyList+0xb8>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	3301      	adds	r3, #1
 80120d6:	4a29      	ldr	r2, [pc, #164]	; (801217c <prvAddNewTaskToReadyList+0xb8>)
 80120d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80120da:	4b29      	ldr	r3, [pc, #164]	; (8012180 <prvAddNewTaskToReadyList+0xbc>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d109      	bne.n	80120f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80120e2:	4a27      	ldr	r2, [pc, #156]	; (8012180 <prvAddNewTaskToReadyList+0xbc>)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80120e8:	4b24      	ldr	r3, [pc, #144]	; (801217c <prvAddNewTaskToReadyList+0xb8>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d110      	bne.n	8012112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80120f0:	f000 fbd6 	bl	80128a0 <prvInitialiseTaskLists>
 80120f4:	e00d      	b.n	8012112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80120f6:	4b23      	ldr	r3, [pc, #140]	; (8012184 <prvAddNewTaskToReadyList+0xc0>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d109      	bne.n	8012112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80120fe:	4b20      	ldr	r3, [pc, #128]	; (8012180 <prvAddNewTaskToReadyList+0xbc>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012108:	429a      	cmp	r2, r3
 801210a:	d802      	bhi.n	8012112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801210c:	4a1c      	ldr	r2, [pc, #112]	; (8012180 <prvAddNewTaskToReadyList+0xbc>)
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012112:	4b1d      	ldr	r3, [pc, #116]	; (8012188 <prvAddNewTaskToReadyList+0xc4>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	3301      	adds	r3, #1
 8012118:	4a1b      	ldr	r2, [pc, #108]	; (8012188 <prvAddNewTaskToReadyList+0xc4>)
 801211a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012120:	2201      	movs	r2, #1
 8012122:	409a      	lsls	r2, r3
 8012124:	4b19      	ldr	r3, [pc, #100]	; (801218c <prvAddNewTaskToReadyList+0xc8>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	4313      	orrs	r3, r2
 801212a:	4a18      	ldr	r2, [pc, #96]	; (801218c <prvAddNewTaskToReadyList+0xc8>)
 801212c:	6013      	str	r3, [r2, #0]
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012132:	4613      	mov	r3, r2
 8012134:	009b      	lsls	r3, r3, #2
 8012136:	4413      	add	r3, r2
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	4a15      	ldr	r2, [pc, #84]	; (8012190 <prvAddNewTaskToReadyList+0xcc>)
 801213c:	441a      	add	r2, r3
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	3304      	adds	r3, #4
 8012142:	4619      	mov	r1, r3
 8012144:	4610      	mov	r0, r2
 8012146:	f7ff f999 	bl	801147c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801214a:	f000 ffeb 	bl	8013124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801214e:	4b0d      	ldr	r3, [pc, #52]	; (8012184 <prvAddNewTaskToReadyList+0xc0>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d00e      	beq.n	8012174 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012156:	4b0a      	ldr	r3, [pc, #40]	; (8012180 <prvAddNewTaskToReadyList+0xbc>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012160:	429a      	cmp	r2, r3
 8012162:	d207      	bcs.n	8012174 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012164:	4b0b      	ldr	r3, [pc, #44]	; (8012194 <prvAddNewTaskToReadyList+0xd0>)
 8012166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801216a:	601a      	str	r2, [r3, #0]
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012174:	bf00      	nop
 8012176:	3708      	adds	r7, #8
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	20001444 	.word	0x20001444
 8012180:	20001344 	.word	0x20001344
 8012184:	20001450 	.word	0x20001450
 8012188:	20001460 	.word	0x20001460
 801218c:	2000144c 	.word	0x2000144c
 8012190:	20001348 	.word	0x20001348
 8012194:	e000ed04 	.word	0xe000ed04

08012198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80121a0:	2300      	movs	r3, #0
 80121a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d017      	beq.n	80121da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80121aa:	4b13      	ldr	r3, [pc, #76]	; (80121f8 <vTaskDelay+0x60>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00a      	beq.n	80121c8 <vTaskDelay+0x30>
	__asm volatile
 80121b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b6:	f383 8811 	msr	BASEPRI, r3
 80121ba:	f3bf 8f6f 	isb	sy
 80121be:	f3bf 8f4f 	dsb	sy
 80121c2:	60bb      	str	r3, [r7, #8]
}
 80121c4:	bf00      	nop
 80121c6:	e7fe      	b.n	80121c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80121c8:	f000 f884 	bl	80122d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80121cc:	2100      	movs	r1, #0
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 fde4 	bl	8012d9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80121d4:	f000 f88c 	bl	80122f0 <xTaskResumeAll>
 80121d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d107      	bne.n	80121f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80121e0:	4b06      	ldr	r3, [pc, #24]	; (80121fc <vTaskDelay+0x64>)
 80121e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121e6:	601a      	str	r2, [r3, #0]
 80121e8:	f3bf 8f4f 	dsb	sy
 80121ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80121f0:	bf00      	nop
 80121f2:	3710      	adds	r7, #16
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	2000146c 	.word	0x2000146c
 80121fc:	e000ed04 	.word	0xe000ed04

08012200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b08a      	sub	sp, #40	; 0x28
 8012204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012206:	2300      	movs	r3, #0
 8012208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801220a:	2300      	movs	r3, #0
 801220c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801220e:	463a      	mov	r2, r7
 8012210:	1d39      	adds	r1, r7, #4
 8012212:	f107 0308 	add.w	r3, r7, #8
 8012216:	4618      	mov	r0, r3
 8012218:	f7f1 fbf6 	bl	8003a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801221c:	6839      	ldr	r1, [r7, #0]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	68ba      	ldr	r2, [r7, #8]
 8012222:	9202      	str	r2, [sp, #8]
 8012224:	9301      	str	r3, [sp, #4]
 8012226:	2300      	movs	r3, #0
 8012228:	9300      	str	r3, [sp, #0]
 801222a:	2300      	movs	r3, #0
 801222c:	460a      	mov	r2, r1
 801222e:	4921      	ldr	r1, [pc, #132]	; (80122b4 <vTaskStartScheduler+0xb4>)
 8012230:	4821      	ldr	r0, [pc, #132]	; (80122b8 <vTaskStartScheduler+0xb8>)
 8012232:	f7ff fe07 	bl	8011e44 <xTaskCreateStatic>
 8012236:	4603      	mov	r3, r0
 8012238:	4a20      	ldr	r2, [pc, #128]	; (80122bc <vTaskStartScheduler+0xbc>)
 801223a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801223c:	4b1f      	ldr	r3, [pc, #124]	; (80122bc <vTaskStartScheduler+0xbc>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d002      	beq.n	801224a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012244:	2301      	movs	r3, #1
 8012246:	617b      	str	r3, [r7, #20]
 8012248:	e001      	b.n	801224e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801224a:	2300      	movs	r3, #0
 801224c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b01      	cmp	r3, #1
 8012252:	d11b      	bne.n	801228c <vTaskStartScheduler+0x8c>
	__asm volatile
 8012254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012258:	f383 8811 	msr	BASEPRI, r3
 801225c:	f3bf 8f6f 	isb	sy
 8012260:	f3bf 8f4f 	dsb	sy
 8012264:	613b      	str	r3, [r7, #16]
}
 8012266:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012268:	4b15      	ldr	r3, [pc, #84]	; (80122c0 <vTaskStartScheduler+0xc0>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	334c      	adds	r3, #76	; 0x4c
 801226e:	4a15      	ldr	r2, [pc, #84]	; (80122c4 <vTaskStartScheduler+0xc4>)
 8012270:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012272:	4b15      	ldr	r3, [pc, #84]	; (80122c8 <vTaskStartScheduler+0xc8>)
 8012274:	f04f 32ff 	mov.w	r2, #4294967295
 8012278:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801227a:	4b14      	ldr	r3, [pc, #80]	; (80122cc <vTaskStartScheduler+0xcc>)
 801227c:	2201      	movs	r2, #1
 801227e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012280:	4b13      	ldr	r3, [pc, #76]	; (80122d0 <vTaskStartScheduler+0xd0>)
 8012282:	2200      	movs	r2, #0
 8012284:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012286:	f000 fe7b 	bl	8012f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801228a:	e00e      	b.n	80122aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012292:	d10a      	bne.n	80122aa <vTaskStartScheduler+0xaa>
	__asm volatile
 8012294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012298:	f383 8811 	msr	BASEPRI, r3
 801229c:	f3bf 8f6f 	isb	sy
 80122a0:	f3bf 8f4f 	dsb	sy
 80122a4:	60fb      	str	r3, [r7, #12]
}
 80122a6:	bf00      	nop
 80122a8:	e7fe      	b.n	80122a8 <vTaskStartScheduler+0xa8>
}
 80122aa:	bf00      	nop
 80122ac:	3718      	adds	r7, #24
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	08017190 	.word	0x08017190
 80122b8:	08012871 	.word	0x08012871
 80122bc:	20001468 	.word	0x20001468
 80122c0:	20001344 	.word	0x20001344
 80122c4:	20000124 	.word	0x20000124
 80122c8:	20001464 	.word	0x20001464
 80122cc:	20001450 	.word	0x20001450
 80122d0:	20001448 	.word	0x20001448

080122d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80122d4:	b480      	push	{r7}
 80122d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80122d8:	4b04      	ldr	r3, [pc, #16]	; (80122ec <vTaskSuspendAll+0x18>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	3301      	adds	r3, #1
 80122de:	4a03      	ldr	r2, [pc, #12]	; (80122ec <vTaskSuspendAll+0x18>)
 80122e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80122e2:	bf00      	nop
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr
 80122ec:	2000146c 	.word	0x2000146c

080122f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80122f6:	2300      	movs	r3, #0
 80122f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80122fa:	2300      	movs	r3, #0
 80122fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80122fe:	4b41      	ldr	r3, [pc, #260]	; (8012404 <xTaskResumeAll+0x114>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d10a      	bne.n	801231c <xTaskResumeAll+0x2c>
	__asm volatile
 8012306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230a:	f383 8811 	msr	BASEPRI, r3
 801230e:	f3bf 8f6f 	isb	sy
 8012312:	f3bf 8f4f 	dsb	sy
 8012316:	603b      	str	r3, [r7, #0]
}
 8012318:	bf00      	nop
 801231a:	e7fe      	b.n	801231a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801231c:	f000 fed2 	bl	80130c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012320:	4b38      	ldr	r3, [pc, #224]	; (8012404 <xTaskResumeAll+0x114>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	3b01      	subs	r3, #1
 8012326:	4a37      	ldr	r2, [pc, #220]	; (8012404 <xTaskResumeAll+0x114>)
 8012328:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801232a:	4b36      	ldr	r3, [pc, #216]	; (8012404 <xTaskResumeAll+0x114>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d161      	bne.n	80123f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012332:	4b35      	ldr	r3, [pc, #212]	; (8012408 <xTaskResumeAll+0x118>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d05d      	beq.n	80123f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801233a:	e02e      	b.n	801239a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801233c:	4b33      	ldr	r3, [pc, #204]	; (801240c <xTaskResumeAll+0x11c>)
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	3318      	adds	r3, #24
 8012348:	4618      	mov	r0, r3
 801234a:	f7ff f8f4 	bl	8011536 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3304      	adds	r3, #4
 8012352:	4618      	mov	r0, r3
 8012354:	f7ff f8ef 	bl	8011536 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801235c:	2201      	movs	r2, #1
 801235e:	409a      	lsls	r2, r3
 8012360:	4b2b      	ldr	r3, [pc, #172]	; (8012410 <xTaskResumeAll+0x120>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4313      	orrs	r3, r2
 8012366:	4a2a      	ldr	r2, [pc, #168]	; (8012410 <xTaskResumeAll+0x120>)
 8012368:	6013      	str	r3, [r2, #0]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801236e:	4613      	mov	r3, r2
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	4413      	add	r3, r2
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	4a27      	ldr	r2, [pc, #156]	; (8012414 <xTaskResumeAll+0x124>)
 8012378:	441a      	add	r2, r3
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	3304      	adds	r3, #4
 801237e:	4619      	mov	r1, r3
 8012380:	4610      	mov	r0, r2
 8012382:	f7ff f87b 	bl	801147c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801238a:	4b23      	ldr	r3, [pc, #140]	; (8012418 <xTaskResumeAll+0x128>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012390:	429a      	cmp	r2, r3
 8012392:	d302      	bcc.n	801239a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012394:	4b21      	ldr	r3, [pc, #132]	; (801241c <xTaskResumeAll+0x12c>)
 8012396:	2201      	movs	r2, #1
 8012398:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801239a:	4b1c      	ldr	r3, [pc, #112]	; (801240c <xTaskResumeAll+0x11c>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d1cc      	bne.n	801233c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d001      	beq.n	80123ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80123a8:	f000 fb1c 	bl	80129e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80123ac:	4b1c      	ldr	r3, [pc, #112]	; (8012420 <xTaskResumeAll+0x130>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d010      	beq.n	80123da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80123b8:	f000 f836 	bl	8012428 <xTaskIncrementTick>
 80123bc:	4603      	mov	r3, r0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d002      	beq.n	80123c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80123c2:	4b16      	ldr	r3, [pc, #88]	; (801241c <xTaskResumeAll+0x12c>)
 80123c4:	2201      	movs	r2, #1
 80123c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	3b01      	subs	r3, #1
 80123cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d1f1      	bne.n	80123b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80123d4:	4b12      	ldr	r3, [pc, #72]	; (8012420 <xTaskResumeAll+0x130>)
 80123d6:	2200      	movs	r2, #0
 80123d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80123da:	4b10      	ldr	r3, [pc, #64]	; (801241c <xTaskResumeAll+0x12c>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d009      	beq.n	80123f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80123e2:	2301      	movs	r3, #1
 80123e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80123e6:	4b0f      	ldr	r3, [pc, #60]	; (8012424 <xTaskResumeAll+0x134>)
 80123e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123ec:	601a      	str	r2, [r3, #0]
 80123ee:	f3bf 8f4f 	dsb	sy
 80123f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80123f6:	f000 fe95 	bl	8013124 <vPortExitCritical>

	return xAlreadyYielded;
 80123fa:	68bb      	ldr	r3, [r7, #8]
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3710      	adds	r7, #16
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	2000146c 	.word	0x2000146c
 8012408:	20001444 	.word	0x20001444
 801240c:	20001404 	.word	0x20001404
 8012410:	2000144c 	.word	0x2000144c
 8012414:	20001348 	.word	0x20001348
 8012418:	20001344 	.word	0x20001344
 801241c:	20001458 	.word	0x20001458
 8012420:	20001454 	.word	0x20001454
 8012424:	e000ed04 	.word	0xe000ed04

08012428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801242e:	2300      	movs	r3, #0
 8012430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012432:	4b4e      	ldr	r3, [pc, #312]	; (801256c <xTaskIncrementTick+0x144>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	f040 808e 	bne.w	8012558 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801243c:	4b4c      	ldr	r3, [pc, #304]	; (8012570 <xTaskIncrementTick+0x148>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	3301      	adds	r3, #1
 8012442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012444:	4a4a      	ldr	r2, [pc, #296]	; (8012570 <xTaskIncrementTick+0x148>)
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d120      	bne.n	8012492 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012450:	4b48      	ldr	r3, [pc, #288]	; (8012574 <xTaskIncrementTick+0x14c>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00a      	beq.n	8012470 <xTaskIncrementTick+0x48>
	__asm volatile
 801245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245e:	f383 8811 	msr	BASEPRI, r3
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	603b      	str	r3, [r7, #0]
}
 801246c:	bf00      	nop
 801246e:	e7fe      	b.n	801246e <xTaskIncrementTick+0x46>
 8012470:	4b40      	ldr	r3, [pc, #256]	; (8012574 <xTaskIncrementTick+0x14c>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	60fb      	str	r3, [r7, #12]
 8012476:	4b40      	ldr	r3, [pc, #256]	; (8012578 <xTaskIncrementTick+0x150>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	4a3e      	ldr	r2, [pc, #248]	; (8012574 <xTaskIncrementTick+0x14c>)
 801247c:	6013      	str	r3, [r2, #0]
 801247e:	4a3e      	ldr	r2, [pc, #248]	; (8012578 <xTaskIncrementTick+0x150>)
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6013      	str	r3, [r2, #0]
 8012484:	4b3d      	ldr	r3, [pc, #244]	; (801257c <xTaskIncrementTick+0x154>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	3301      	adds	r3, #1
 801248a:	4a3c      	ldr	r2, [pc, #240]	; (801257c <xTaskIncrementTick+0x154>)
 801248c:	6013      	str	r3, [r2, #0]
 801248e:	f000 faa9 	bl	80129e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012492:	4b3b      	ldr	r3, [pc, #236]	; (8012580 <xTaskIncrementTick+0x158>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	693a      	ldr	r2, [r7, #16]
 8012498:	429a      	cmp	r2, r3
 801249a:	d348      	bcc.n	801252e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801249c:	4b35      	ldr	r3, [pc, #212]	; (8012574 <xTaskIncrementTick+0x14c>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d104      	bne.n	80124b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124a6:	4b36      	ldr	r3, [pc, #216]	; (8012580 <xTaskIncrementTick+0x158>)
 80124a8:	f04f 32ff 	mov.w	r2, #4294967295
 80124ac:	601a      	str	r2, [r3, #0]
					break;
 80124ae:	e03e      	b.n	801252e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124b0:	4b30      	ldr	r3, [pc, #192]	; (8012574 <xTaskIncrementTick+0x14c>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	68db      	ldr	r3, [r3, #12]
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80124c0:	693a      	ldr	r2, [r7, #16]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d203      	bcs.n	80124d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80124c8:	4a2d      	ldr	r2, [pc, #180]	; (8012580 <xTaskIncrementTick+0x158>)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80124ce:	e02e      	b.n	801252e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	3304      	adds	r3, #4
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7ff f82e 	bl	8011536 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d004      	beq.n	80124ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	3318      	adds	r3, #24
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7ff f825 	bl	8011536 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f0:	2201      	movs	r2, #1
 80124f2:	409a      	lsls	r2, r3
 80124f4:	4b23      	ldr	r3, [pc, #140]	; (8012584 <xTaskIncrementTick+0x15c>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4313      	orrs	r3, r2
 80124fa:	4a22      	ldr	r2, [pc, #136]	; (8012584 <xTaskIncrementTick+0x15c>)
 80124fc:	6013      	str	r3, [r2, #0]
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012502:	4613      	mov	r3, r2
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	4413      	add	r3, r2
 8012508:	009b      	lsls	r3, r3, #2
 801250a:	4a1f      	ldr	r2, [pc, #124]	; (8012588 <xTaskIncrementTick+0x160>)
 801250c:	441a      	add	r2, r3
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	3304      	adds	r3, #4
 8012512:	4619      	mov	r1, r3
 8012514:	4610      	mov	r0, r2
 8012516:	f7fe ffb1 	bl	801147c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801251e:	4b1b      	ldr	r3, [pc, #108]	; (801258c <xTaskIncrementTick+0x164>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012524:	429a      	cmp	r2, r3
 8012526:	d3b9      	bcc.n	801249c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012528:	2301      	movs	r3, #1
 801252a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801252c:	e7b6      	b.n	801249c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801252e:	4b17      	ldr	r3, [pc, #92]	; (801258c <xTaskIncrementTick+0x164>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012534:	4914      	ldr	r1, [pc, #80]	; (8012588 <xTaskIncrementTick+0x160>)
 8012536:	4613      	mov	r3, r2
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	4413      	add	r3, r2
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	440b      	add	r3, r1
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2b01      	cmp	r3, #1
 8012544:	d901      	bls.n	801254a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8012546:	2301      	movs	r3, #1
 8012548:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801254a:	4b11      	ldr	r3, [pc, #68]	; (8012590 <xTaskIncrementTick+0x168>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d007      	beq.n	8012562 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012552:	2301      	movs	r3, #1
 8012554:	617b      	str	r3, [r7, #20]
 8012556:	e004      	b.n	8012562 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012558:	4b0e      	ldr	r3, [pc, #56]	; (8012594 <xTaskIncrementTick+0x16c>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	3301      	adds	r3, #1
 801255e:	4a0d      	ldr	r2, [pc, #52]	; (8012594 <xTaskIncrementTick+0x16c>)
 8012560:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012562:	697b      	ldr	r3, [r7, #20]
}
 8012564:	4618      	mov	r0, r3
 8012566:	3718      	adds	r7, #24
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	2000146c 	.word	0x2000146c
 8012570:	20001448 	.word	0x20001448
 8012574:	200013fc 	.word	0x200013fc
 8012578:	20001400 	.word	0x20001400
 801257c:	2000145c 	.word	0x2000145c
 8012580:	20001464 	.word	0x20001464
 8012584:	2000144c 	.word	0x2000144c
 8012588:	20001348 	.word	0x20001348
 801258c:	20001344 	.word	0x20001344
 8012590:	20001458 	.word	0x20001458
 8012594:	20001454 	.word	0x20001454

08012598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012598:	b480      	push	{r7}
 801259a:	b087      	sub	sp, #28
 801259c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801259e:	4b29      	ldr	r3, [pc, #164]	; (8012644 <vTaskSwitchContext+0xac>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d003      	beq.n	80125ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80125a6:	4b28      	ldr	r3, [pc, #160]	; (8012648 <vTaskSwitchContext+0xb0>)
 80125a8:	2201      	movs	r2, #1
 80125aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80125ac:	e044      	b.n	8012638 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80125ae:	4b26      	ldr	r3, [pc, #152]	; (8012648 <vTaskSwitchContext+0xb0>)
 80125b0:	2200      	movs	r2, #0
 80125b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125b4:	4b25      	ldr	r3, [pc, #148]	; (801264c <vTaskSwitchContext+0xb4>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	fab3 f383 	clz	r3, r3
 80125c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80125c2:	7afb      	ldrb	r3, [r7, #11]
 80125c4:	f1c3 031f 	rsb	r3, r3, #31
 80125c8:	617b      	str	r3, [r7, #20]
 80125ca:	4921      	ldr	r1, [pc, #132]	; (8012650 <vTaskSwitchContext+0xb8>)
 80125cc:	697a      	ldr	r2, [r7, #20]
 80125ce:	4613      	mov	r3, r2
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	4413      	add	r3, r2
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	440b      	add	r3, r1
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d10a      	bne.n	80125f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80125de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e2:	f383 8811 	msr	BASEPRI, r3
 80125e6:	f3bf 8f6f 	isb	sy
 80125ea:	f3bf 8f4f 	dsb	sy
 80125ee:	607b      	str	r3, [r7, #4]
}
 80125f0:	bf00      	nop
 80125f2:	e7fe      	b.n	80125f2 <vTaskSwitchContext+0x5a>
 80125f4:	697a      	ldr	r2, [r7, #20]
 80125f6:	4613      	mov	r3, r2
 80125f8:	009b      	lsls	r3, r3, #2
 80125fa:	4413      	add	r3, r2
 80125fc:	009b      	lsls	r3, r3, #2
 80125fe:	4a14      	ldr	r2, [pc, #80]	; (8012650 <vTaskSwitchContext+0xb8>)
 8012600:	4413      	add	r3, r2
 8012602:	613b      	str	r3, [r7, #16]
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	685a      	ldr	r2, [r3, #4]
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	605a      	str	r2, [r3, #4]
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	685a      	ldr	r2, [r3, #4]
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	3308      	adds	r3, #8
 8012616:	429a      	cmp	r2, r3
 8012618:	d104      	bne.n	8012624 <vTaskSwitchContext+0x8c>
 801261a:	693b      	ldr	r3, [r7, #16]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	685a      	ldr	r2, [r3, #4]
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	605a      	str	r2, [r3, #4]
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	68db      	ldr	r3, [r3, #12]
 801262a:	4a0a      	ldr	r2, [pc, #40]	; (8012654 <vTaskSwitchContext+0xbc>)
 801262c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801262e:	4b09      	ldr	r3, [pc, #36]	; (8012654 <vTaskSwitchContext+0xbc>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	334c      	adds	r3, #76	; 0x4c
 8012634:	4a08      	ldr	r2, [pc, #32]	; (8012658 <vTaskSwitchContext+0xc0>)
 8012636:	6013      	str	r3, [r2, #0]
}
 8012638:	bf00      	nop
 801263a:	371c      	adds	r7, #28
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr
 8012644:	2000146c 	.word	0x2000146c
 8012648:	20001458 	.word	0x20001458
 801264c:	2000144c 	.word	0x2000144c
 8012650:	20001348 	.word	0x20001348
 8012654:	20001344 	.word	0x20001344
 8012658:	20000124 	.word	0x20000124

0801265c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d10a      	bne.n	8012682 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012670:	f383 8811 	msr	BASEPRI, r3
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	60fb      	str	r3, [r7, #12]
}
 801267e:	bf00      	nop
 8012680:	e7fe      	b.n	8012680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012682:	4b07      	ldr	r3, [pc, #28]	; (80126a0 <vTaskPlaceOnEventList+0x44>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	3318      	adds	r3, #24
 8012688:	4619      	mov	r1, r3
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7fe ff1a 	bl	80114c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012690:	2101      	movs	r1, #1
 8012692:	6838      	ldr	r0, [r7, #0]
 8012694:	f000 fb82 	bl	8012d9c <prvAddCurrentTaskToDelayedList>
}
 8012698:	bf00      	nop
 801269a:	3710      	adds	r7, #16
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}
 80126a0:	20001344 	.word	0x20001344

080126a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b086      	sub	sp, #24
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d10a      	bne.n	80126d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80126ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126be:	f383 8811 	msr	BASEPRI, r3
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	60fb      	str	r3, [r7, #12]
}
 80126cc:	bf00      	nop
 80126ce:	e7fe      	b.n	80126ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80126d0:	693b      	ldr	r3, [r7, #16]
 80126d2:	3318      	adds	r3, #24
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fe ff2e 	bl	8011536 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126da:	4b1d      	ldr	r3, [pc, #116]	; (8012750 <xTaskRemoveFromEventList+0xac>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d11c      	bne.n	801271c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	3304      	adds	r3, #4
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fe ff25 	bl	8011536 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f0:	2201      	movs	r2, #1
 80126f2:	409a      	lsls	r2, r3
 80126f4:	4b17      	ldr	r3, [pc, #92]	; (8012754 <xTaskRemoveFromEventList+0xb0>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4313      	orrs	r3, r2
 80126fa:	4a16      	ldr	r2, [pc, #88]	; (8012754 <xTaskRemoveFromEventList+0xb0>)
 80126fc:	6013      	str	r3, [r2, #0]
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012702:	4613      	mov	r3, r2
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	4413      	add	r3, r2
 8012708:	009b      	lsls	r3, r3, #2
 801270a:	4a13      	ldr	r2, [pc, #76]	; (8012758 <xTaskRemoveFromEventList+0xb4>)
 801270c:	441a      	add	r2, r3
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	3304      	adds	r3, #4
 8012712:	4619      	mov	r1, r3
 8012714:	4610      	mov	r0, r2
 8012716:	f7fe feb1 	bl	801147c <vListInsertEnd>
 801271a:	e005      	b.n	8012728 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	3318      	adds	r3, #24
 8012720:	4619      	mov	r1, r3
 8012722:	480e      	ldr	r0, [pc, #56]	; (801275c <xTaskRemoveFromEventList+0xb8>)
 8012724:	f7fe feaa 	bl	801147c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801272c:	4b0c      	ldr	r3, [pc, #48]	; (8012760 <xTaskRemoveFromEventList+0xbc>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012732:	429a      	cmp	r2, r3
 8012734:	d905      	bls.n	8012742 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012736:	2301      	movs	r3, #1
 8012738:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801273a:	4b0a      	ldr	r3, [pc, #40]	; (8012764 <xTaskRemoveFromEventList+0xc0>)
 801273c:	2201      	movs	r2, #1
 801273e:	601a      	str	r2, [r3, #0]
 8012740:	e001      	b.n	8012746 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012742:	2300      	movs	r3, #0
 8012744:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012746:	697b      	ldr	r3, [r7, #20]
}
 8012748:	4618      	mov	r0, r3
 801274a:	3718      	adds	r7, #24
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	2000146c 	.word	0x2000146c
 8012754:	2000144c 	.word	0x2000144c
 8012758:	20001348 	.word	0x20001348
 801275c:	20001404 	.word	0x20001404
 8012760:	20001344 	.word	0x20001344
 8012764:	20001458 	.word	0x20001458

08012768 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012770:	4b06      	ldr	r3, [pc, #24]	; (801278c <vTaskInternalSetTimeOutState+0x24>)
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012778:	4b05      	ldr	r3, [pc, #20]	; (8012790 <vTaskInternalSetTimeOutState+0x28>)
 801277a:	681a      	ldr	r2, [r3, #0]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	605a      	str	r2, [r3, #4]
}
 8012780:	bf00      	nop
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr
 801278c:	2000145c 	.word	0x2000145c
 8012790:	20001448 	.word	0x20001448

08012794 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b088      	sub	sp, #32
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d10a      	bne.n	80127ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80127a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a8:	f383 8811 	msr	BASEPRI, r3
 80127ac:	f3bf 8f6f 	isb	sy
 80127b0:	f3bf 8f4f 	dsb	sy
 80127b4:	613b      	str	r3, [r7, #16]
}
 80127b6:	bf00      	nop
 80127b8:	e7fe      	b.n	80127b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d10a      	bne.n	80127d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80127c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	60fb      	str	r3, [r7, #12]
}
 80127d2:	bf00      	nop
 80127d4:	e7fe      	b.n	80127d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80127d6:	f000 fc75 	bl	80130c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80127da:	4b1d      	ldr	r3, [pc, #116]	; (8012850 <xTaskCheckForTimeOut+0xbc>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	69ba      	ldr	r2, [r7, #24]
 80127e6:	1ad3      	subs	r3, r2, r3
 80127e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127f2:	d102      	bne.n	80127fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80127f4:	2300      	movs	r3, #0
 80127f6:	61fb      	str	r3, [r7, #28]
 80127f8:	e023      	b.n	8012842 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681a      	ldr	r2, [r3, #0]
 80127fe:	4b15      	ldr	r3, [pc, #84]	; (8012854 <xTaskCheckForTimeOut+0xc0>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	429a      	cmp	r2, r3
 8012804:	d007      	beq.n	8012816 <xTaskCheckForTimeOut+0x82>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	69ba      	ldr	r2, [r7, #24]
 801280c:	429a      	cmp	r2, r3
 801280e:	d302      	bcc.n	8012816 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012810:	2301      	movs	r3, #1
 8012812:	61fb      	str	r3, [r7, #28]
 8012814:	e015      	b.n	8012842 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	697a      	ldr	r2, [r7, #20]
 801281c:	429a      	cmp	r2, r3
 801281e:	d20b      	bcs.n	8012838 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	1ad2      	subs	r2, r2, r3
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f7ff ff9b 	bl	8012768 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012832:	2300      	movs	r3, #0
 8012834:	61fb      	str	r3, [r7, #28]
 8012836:	e004      	b.n	8012842 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	2200      	movs	r2, #0
 801283c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801283e:	2301      	movs	r3, #1
 8012840:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012842:	f000 fc6f 	bl	8013124 <vPortExitCritical>

	return xReturn;
 8012846:	69fb      	ldr	r3, [r7, #28]
}
 8012848:	4618      	mov	r0, r3
 801284a:	3720      	adds	r7, #32
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	20001448 	.word	0x20001448
 8012854:	2000145c 	.word	0x2000145c

08012858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012858:	b480      	push	{r7}
 801285a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801285c:	4b03      	ldr	r3, [pc, #12]	; (801286c <vTaskMissedYield+0x14>)
 801285e:	2201      	movs	r2, #1
 8012860:	601a      	str	r2, [r3, #0]
}
 8012862:	bf00      	nop
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	20001458 	.word	0x20001458

08012870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012878:	f000 f852 	bl	8012920 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801287c:	4b06      	ldr	r3, [pc, #24]	; (8012898 <prvIdleTask+0x28>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b01      	cmp	r3, #1
 8012882:	d9f9      	bls.n	8012878 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012884:	4b05      	ldr	r3, [pc, #20]	; (801289c <prvIdleTask+0x2c>)
 8012886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801288a:	601a      	str	r2, [r3, #0]
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012894:	e7f0      	b.n	8012878 <prvIdleTask+0x8>
 8012896:	bf00      	nop
 8012898:	20001348 	.word	0x20001348
 801289c:	e000ed04 	.word	0xe000ed04

080128a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80128a6:	2300      	movs	r3, #0
 80128a8:	607b      	str	r3, [r7, #4]
 80128aa:	e00c      	b.n	80128c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	4613      	mov	r3, r2
 80128b0:	009b      	lsls	r3, r3, #2
 80128b2:	4413      	add	r3, r2
 80128b4:	009b      	lsls	r3, r3, #2
 80128b6:	4a12      	ldr	r2, [pc, #72]	; (8012900 <prvInitialiseTaskLists+0x60>)
 80128b8:	4413      	add	r3, r2
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fe fdb1 	bl	8011422 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	3301      	adds	r3, #1
 80128c4:	607b      	str	r3, [r7, #4]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b06      	cmp	r3, #6
 80128ca:	d9ef      	bls.n	80128ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80128cc:	480d      	ldr	r0, [pc, #52]	; (8012904 <prvInitialiseTaskLists+0x64>)
 80128ce:	f7fe fda8 	bl	8011422 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80128d2:	480d      	ldr	r0, [pc, #52]	; (8012908 <prvInitialiseTaskLists+0x68>)
 80128d4:	f7fe fda5 	bl	8011422 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80128d8:	480c      	ldr	r0, [pc, #48]	; (801290c <prvInitialiseTaskLists+0x6c>)
 80128da:	f7fe fda2 	bl	8011422 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80128de:	480c      	ldr	r0, [pc, #48]	; (8012910 <prvInitialiseTaskLists+0x70>)
 80128e0:	f7fe fd9f 	bl	8011422 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80128e4:	480b      	ldr	r0, [pc, #44]	; (8012914 <prvInitialiseTaskLists+0x74>)
 80128e6:	f7fe fd9c 	bl	8011422 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80128ea:	4b0b      	ldr	r3, [pc, #44]	; (8012918 <prvInitialiseTaskLists+0x78>)
 80128ec:	4a05      	ldr	r2, [pc, #20]	; (8012904 <prvInitialiseTaskLists+0x64>)
 80128ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80128f0:	4b0a      	ldr	r3, [pc, #40]	; (801291c <prvInitialiseTaskLists+0x7c>)
 80128f2:	4a05      	ldr	r2, [pc, #20]	; (8012908 <prvInitialiseTaskLists+0x68>)
 80128f4:	601a      	str	r2, [r3, #0]
}
 80128f6:	bf00      	nop
 80128f8:	3708      	adds	r7, #8
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	20001348 	.word	0x20001348
 8012904:	200013d4 	.word	0x200013d4
 8012908:	200013e8 	.word	0x200013e8
 801290c:	20001404 	.word	0x20001404
 8012910:	20001418 	.word	0x20001418
 8012914:	20001430 	.word	0x20001430
 8012918:	200013fc 	.word	0x200013fc
 801291c:	20001400 	.word	0x20001400

08012920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012926:	e019      	b.n	801295c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012928:	f000 fbcc 	bl	80130c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801292c:	4b10      	ldr	r3, [pc, #64]	; (8012970 <prvCheckTasksWaitingTermination+0x50>)
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	3304      	adds	r3, #4
 8012938:	4618      	mov	r0, r3
 801293a:	f7fe fdfc 	bl	8011536 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801293e:	4b0d      	ldr	r3, [pc, #52]	; (8012974 <prvCheckTasksWaitingTermination+0x54>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	3b01      	subs	r3, #1
 8012944:	4a0b      	ldr	r2, [pc, #44]	; (8012974 <prvCheckTasksWaitingTermination+0x54>)
 8012946:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012948:	4b0b      	ldr	r3, [pc, #44]	; (8012978 <prvCheckTasksWaitingTermination+0x58>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	3b01      	subs	r3, #1
 801294e:	4a0a      	ldr	r2, [pc, #40]	; (8012978 <prvCheckTasksWaitingTermination+0x58>)
 8012950:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012952:	f000 fbe7 	bl	8013124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 f810 	bl	801297c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801295c:	4b06      	ldr	r3, [pc, #24]	; (8012978 <prvCheckTasksWaitingTermination+0x58>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d1e1      	bne.n	8012928 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012964:	bf00      	nop
 8012966:	bf00      	nop
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	20001418 	.word	0x20001418
 8012974:	20001444 	.word	0x20001444
 8012978:	2000142c 	.word	0x2000142c

0801297c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	334c      	adds	r3, #76	; 0x4c
 8012988:	4618      	mov	r0, r3
 801298a:	f002 f97d 	bl	8014c88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012994:	2b00      	cmp	r3, #0
 8012996:	d108      	bne.n	80129aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801299c:	4618      	mov	r0, r3
 801299e:	f000 fd7f 	bl	80134a0 <vPortFree>
				vPortFree( pxTCB );
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f000 fd7c 	bl	80134a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80129a8:	e018      	b.n	80129dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d103      	bne.n	80129bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 fd73 	bl	80134a0 <vPortFree>
	}
 80129ba:	e00f      	b.n	80129dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80129c2:	2b02      	cmp	r3, #2
 80129c4:	d00a      	beq.n	80129dc <prvDeleteTCB+0x60>
	__asm volatile
 80129c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ca:	f383 8811 	msr	BASEPRI, r3
 80129ce:	f3bf 8f6f 	isb	sy
 80129d2:	f3bf 8f4f 	dsb	sy
 80129d6:	60fb      	str	r3, [r7, #12]
}
 80129d8:	bf00      	nop
 80129da:	e7fe      	b.n	80129da <prvDeleteTCB+0x5e>
	}
 80129dc:	bf00      	nop
 80129de:	3710      	adds	r7, #16
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129ea:	4b0c      	ldr	r3, [pc, #48]	; (8012a1c <prvResetNextTaskUnblockTime+0x38>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d104      	bne.n	80129fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80129f4:	4b0a      	ldr	r3, [pc, #40]	; (8012a20 <prvResetNextTaskUnblockTime+0x3c>)
 80129f6:	f04f 32ff 	mov.w	r2, #4294967295
 80129fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80129fc:	e008      	b.n	8012a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129fe:	4b07      	ldr	r3, [pc, #28]	; (8012a1c <prvResetNextTaskUnblockTime+0x38>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	68db      	ldr	r3, [r3, #12]
 8012a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	4a04      	ldr	r2, [pc, #16]	; (8012a20 <prvResetNextTaskUnblockTime+0x3c>)
 8012a0e:	6013      	str	r3, [r2, #0]
}
 8012a10:	bf00      	nop
 8012a12:	370c      	adds	r7, #12
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr
 8012a1c:	200013fc 	.word	0x200013fc
 8012a20:	20001464 	.word	0x20001464

08012a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012a2a:	4b0b      	ldr	r3, [pc, #44]	; (8012a58 <xTaskGetSchedulerState+0x34>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d102      	bne.n	8012a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012a32:	2301      	movs	r3, #1
 8012a34:	607b      	str	r3, [r7, #4]
 8012a36:	e008      	b.n	8012a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a38:	4b08      	ldr	r3, [pc, #32]	; (8012a5c <xTaskGetSchedulerState+0x38>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d102      	bne.n	8012a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012a40:	2302      	movs	r3, #2
 8012a42:	607b      	str	r3, [r7, #4]
 8012a44:	e001      	b.n	8012a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012a46:	2300      	movs	r3, #0
 8012a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012a4a:	687b      	ldr	r3, [r7, #4]
	}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	370c      	adds	r7, #12
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr
 8012a58:	20001450 	.word	0x20001450
 8012a5c:	2000146c 	.word	0x2000146c

08012a60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d05e      	beq.n	8012b34 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a7a:	4b31      	ldr	r3, [pc, #196]	; (8012b40 <xTaskPriorityInherit+0xe0>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d24e      	bcs.n	8012b22 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	699b      	ldr	r3, [r3, #24]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	db06      	blt.n	8012a9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a8c:	4b2c      	ldr	r3, [pc, #176]	; (8012b40 <xTaskPriorityInherit+0xe0>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a92:	f1c3 0207 	rsb	r2, r3, #7
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	6959      	ldr	r1, [r3, #20]
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	009b      	lsls	r3, r3, #2
 8012aa6:	4413      	add	r3, r2
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	4a26      	ldr	r2, [pc, #152]	; (8012b44 <xTaskPriorityInherit+0xe4>)
 8012aac:	4413      	add	r3, r2
 8012aae:	4299      	cmp	r1, r3
 8012ab0:	d12f      	bne.n	8012b12 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	3304      	adds	r3, #4
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fe fd3d 	bl	8011536 <uxListRemove>
 8012abc:	4603      	mov	r3, r0
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d10a      	bne.n	8012ad8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8012acc:	43da      	mvns	r2, r3
 8012ace:	4b1e      	ldr	r3, [pc, #120]	; (8012b48 <xTaskPriorityInherit+0xe8>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	4013      	ands	r3, r2
 8012ad4:	4a1c      	ldr	r2, [pc, #112]	; (8012b48 <xTaskPriorityInherit+0xe8>)
 8012ad6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ad8:	4b19      	ldr	r3, [pc, #100]	; (8012b40 <xTaskPriorityInherit+0xe0>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	409a      	lsls	r2, r3
 8012aea:	4b17      	ldr	r3, [pc, #92]	; (8012b48 <xTaskPriorityInherit+0xe8>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	4313      	orrs	r3, r2
 8012af0:	4a15      	ldr	r2, [pc, #84]	; (8012b48 <xTaskPriorityInherit+0xe8>)
 8012af2:	6013      	str	r3, [r2, #0]
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012af8:	4613      	mov	r3, r2
 8012afa:	009b      	lsls	r3, r3, #2
 8012afc:	4413      	add	r3, r2
 8012afe:	009b      	lsls	r3, r3, #2
 8012b00:	4a10      	ldr	r2, [pc, #64]	; (8012b44 <xTaskPriorityInherit+0xe4>)
 8012b02:	441a      	add	r2, r3
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	3304      	adds	r3, #4
 8012b08:	4619      	mov	r1, r3
 8012b0a:	4610      	mov	r0, r2
 8012b0c:	f7fe fcb6 	bl	801147c <vListInsertEnd>
 8012b10:	e004      	b.n	8012b1c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012b12:	4b0b      	ldr	r3, [pc, #44]	; (8012b40 <xTaskPriorityInherit+0xe0>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	60fb      	str	r3, [r7, #12]
 8012b20:	e008      	b.n	8012b34 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b26:	4b06      	ldr	r3, [pc, #24]	; (8012b40 <xTaskPriorityInherit+0xe0>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d201      	bcs.n	8012b34 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012b30:	2301      	movs	r3, #1
 8012b32:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b34:	68fb      	ldr	r3, [r7, #12]
	}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3710      	adds	r7, #16
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	20001344 	.word	0x20001344
 8012b44:	20001348 	.word	0x20001348
 8012b48:	2000144c 	.word	0x2000144c

08012b4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b086      	sub	sp, #24
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d06e      	beq.n	8012c40 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012b62:	4b3a      	ldr	r3, [pc, #232]	; (8012c4c <xTaskPriorityDisinherit+0x100>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	693a      	ldr	r2, [r7, #16]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d00a      	beq.n	8012b82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b70:	f383 8811 	msr	BASEPRI, r3
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	f3bf 8f4f 	dsb	sy
 8012b7c:	60fb      	str	r3, [r7, #12]
}
 8012b7e:	bf00      	nop
 8012b80:	e7fe      	b.n	8012b80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d10a      	bne.n	8012ba0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b8e:	f383 8811 	msr	BASEPRI, r3
 8012b92:	f3bf 8f6f 	isb	sy
 8012b96:	f3bf 8f4f 	dsb	sy
 8012b9a:	60bb      	str	r3, [r7, #8]
}
 8012b9c:	bf00      	nop
 8012b9e:	e7fe      	b.n	8012b9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ba4:	1e5a      	subs	r2, r3, #1
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d044      	beq.n	8012c40 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d140      	bne.n	8012c40 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fe fcb7 	bl	8011536 <uxListRemove>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d115      	bne.n	8012bfa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd2:	491f      	ldr	r1, [pc, #124]	; (8012c50 <xTaskPriorityDisinherit+0x104>)
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	4413      	add	r3, r2
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	440b      	add	r3, r1
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d10a      	bne.n	8012bfa <xTaskPriorityDisinherit+0xae>
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be8:	2201      	movs	r2, #1
 8012bea:	fa02 f303 	lsl.w	r3, r2, r3
 8012bee:	43da      	mvns	r2, r3
 8012bf0:	4b18      	ldr	r3, [pc, #96]	; (8012c54 <xTaskPriorityDisinherit+0x108>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	4013      	ands	r3, r2
 8012bf6:	4a17      	ldr	r2, [pc, #92]	; (8012c54 <xTaskPriorityDisinherit+0x108>)
 8012bf8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c06:	f1c3 0207 	rsb	r2, r3, #7
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c12:	2201      	movs	r2, #1
 8012c14:	409a      	lsls	r2, r3
 8012c16:	4b0f      	ldr	r3, [pc, #60]	; (8012c54 <xTaskPriorityDisinherit+0x108>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4313      	orrs	r3, r2
 8012c1c:	4a0d      	ldr	r2, [pc, #52]	; (8012c54 <xTaskPriorityDisinherit+0x108>)
 8012c1e:	6013      	str	r3, [r2, #0]
 8012c20:	693b      	ldr	r3, [r7, #16]
 8012c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c24:	4613      	mov	r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	4413      	add	r3, r2
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	4a08      	ldr	r2, [pc, #32]	; (8012c50 <xTaskPriorityDisinherit+0x104>)
 8012c2e:	441a      	add	r2, r3
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	3304      	adds	r3, #4
 8012c34:	4619      	mov	r1, r3
 8012c36:	4610      	mov	r0, r2
 8012c38:	f7fe fc20 	bl	801147c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c40:	697b      	ldr	r3, [r7, #20]
	}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3718      	adds	r7, #24
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	20001344 	.word	0x20001344
 8012c50:	20001348 	.word	0x20001348
 8012c54:	2000144c 	.word	0x2000144c

08012c58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b088      	sub	sp, #32
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012c66:	2301      	movs	r3, #1
 8012c68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d077      	beq.n	8012d60 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d10a      	bne.n	8012c8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c7c:	f383 8811 	msr	BASEPRI, r3
 8012c80:	f3bf 8f6f 	isb	sy
 8012c84:	f3bf 8f4f 	dsb	sy
 8012c88:	60fb      	str	r3, [r7, #12]
}
 8012c8a:	bf00      	nop
 8012c8c:	e7fe      	b.n	8012c8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c92:	683a      	ldr	r2, [r7, #0]
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d902      	bls.n	8012c9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	61fb      	str	r3, [r7, #28]
 8012c9c:	e002      	b.n	8012ca4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ca2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ca8:	69fa      	ldr	r2, [r7, #28]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d058      	beq.n	8012d60 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012cae:	69bb      	ldr	r3, [r7, #24]
 8012cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012cb2:	697a      	ldr	r2, [r7, #20]
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d153      	bne.n	8012d60 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012cb8:	4b2b      	ldr	r3, [pc, #172]	; (8012d68 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	69ba      	ldr	r2, [r7, #24]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d10a      	bne.n	8012cd8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc6:	f383 8811 	msr	BASEPRI, r3
 8012cca:	f3bf 8f6f 	isb	sy
 8012cce:	f3bf 8f4f 	dsb	sy
 8012cd2:	60bb      	str	r3, [r7, #8]
}
 8012cd4:	bf00      	nop
 8012cd6:	e7fe      	b.n	8012cd6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012cde:	69bb      	ldr	r3, [r7, #24]
 8012ce0:	69fa      	ldr	r2, [r7, #28]
 8012ce2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012ce4:	69bb      	ldr	r3, [r7, #24]
 8012ce6:	699b      	ldr	r3, [r3, #24]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	db04      	blt.n	8012cf6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	f1c3 0207 	rsb	r2, r3, #7
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	6959      	ldr	r1, [r3, #20]
 8012cfa:	693a      	ldr	r2, [r7, #16]
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	4413      	add	r3, r2
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	4a19      	ldr	r2, [pc, #100]	; (8012d6c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8012d06:	4413      	add	r3, r2
 8012d08:	4299      	cmp	r1, r3
 8012d0a:	d129      	bne.n	8012d60 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d0c:	69bb      	ldr	r3, [r7, #24]
 8012d0e:	3304      	adds	r3, #4
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7fe fc10 	bl	8011536 <uxListRemove>
 8012d16:	4603      	mov	r3, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d10a      	bne.n	8012d32 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d20:	2201      	movs	r2, #1
 8012d22:	fa02 f303 	lsl.w	r3, r2, r3
 8012d26:	43da      	mvns	r2, r3
 8012d28:	4b11      	ldr	r3, [pc, #68]	; (8012d70 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	4013      	ands	r3, r2
 8012d2e:	4a10      	ldr	r2, [pc, #64]	; (8012d70 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012d30:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d36:	2201      	movs	r2, #1
 8012d38:	409a      	lsls	r2, r3
 8012d3a:	4b0d      	ldr	r3, [pc, #52]	; (8012d70 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	4313      	orrs	r3, r2
 8012d40:	4a0b      	ldr	r2, [pc, #44]	; (8012d70 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012d42:	6013      	str	r3, [r2, #0]
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d48:	4613      	mov	r3, r2
 8012d4a:	009b      	lsls	r3, r3, #2
 8012d4c:	4413      	add	r3, r2
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	4a06      	ldr	r2, [pc, #24]	; (8012d6c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8012d52:	441a      	add	r2, r3
 8012d54:	69bb      	ldr	r3, [r7, #24]
 8012d56:	3304      	adds	r3, #4
 8012d58:	4619      	mov	r1, r3
 8012d5a:	4610      	mov	r0, r2
 8012d5c:	f7fe fb8e 	bl	801147c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012d60:	bf00      	nop
 8012d62:	3720      	adds	r7, #32
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	20001344 	.word	0x20001344
 8012d6c:	20001348 	.word	0x20001348
 8012d70:	2000144c 	.word	0x2000144c

08012d74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012d74:	b480      	push	{r7}
 8012d76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012d78:	4b07      	ldr	r3, [pc, #28]	; (8012d98 <pvTaskIncrementMutexHeldCount+0x24>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d004      	beq.n	8012d8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012d80:	4b05      	ldr	r3, [pc, #20]	; (8012d98 <pvTaskIncrementMutexHeldCount+0x24>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012d86:	3201      	adds	r2, #1
 8012d88:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012d8a:	4b03      	ldr	r3, [pc, #12]	; (8012d98 <pvTaskIncrementMutexHeldCount+0x24>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
	}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr
 8012d98:	20001344 	.word	0x20001344

08012d9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b084      	sub	sp, #16
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012da6:	4b29      	ldr	r3, [pc, #164]	; (8012e4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012dac:	4b28      	ldr	r3, [pc, #160]	; (8012e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	3304      	adds	r3, #4
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7fe fbbf 	bl	8011536 <uxListRemove>
 8012db8:	4603      	mov	r3, r0
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d10b      	bne.n	8012dd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012dbe:	4b24      	ldr	r3, [pc, #144]	; (8012e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8012dca:	43da      	mvns	r2, r3
 8012dcc:	4b21      	ldr	r3, [pc, #132]	; (8012e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	4013      	ands	r3, r2
 8012dd2:	4a20      	ldr	r2, [pc, #128]	; (8012e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012dd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ddc:	d10a      	bne.n	8012df4 <prvAddCurrentTaskToDelayedList+0x58>
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d007      	beq.n	8012df4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012de4:	4b1a      	ldr	r3, [pc, #104]	; (8012e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	3304      	adds	r3, #4
 8012dea:	4619      	mov	r1, r3
 8012dec:	481a      	ldr	r0, [pc, #104]	; (8012e58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012dee:	f7fe fb45 	bl	801147c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012df2:	e026      	b.n	8012e42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012df4:	68fa      	ldr	r2, [r7, #12]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4413      	add	r3, r2
 8012dfa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012dfc:	4b14      	ldr	r3, [pc, #80]	; (8012e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	68ba      	ldr	r2, [r7, #8]
 8012e02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012e04:	68ba      	ldr	r2, [r7, #8]
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d209      	bcs.n	8012e20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e0c:	4b13      	ldr	r3, [pc, #76]	; (8012e5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	4b0f      	ldr	r3, [pc, #60]	; (8012e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	3304      	adds	r3, #4
 8012e16:	4619      	mov	r1, r3
 8012e18:	4610      	mov	r0, r2
 8012e1a:	f7fe fb53 	bl	80114c4 <vListInsert>
}
 8012e1e:	e010      	b.n	8012e42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e20:	4b0f      	ldr	r3, [pc, #60]	; (8012e60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	4b0a      	ldr	r3, [pc, #40]	; (8012e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	3304      	adds	r3, #4
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	4610      	mov	r0, r2
 8012e2e:	f7fe fb49 	bl	80114c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012e32:	4b0c      	ldr	r3, [pc, #48]	; (8012e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	68ba      	ldr	r2, [r7, #8]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d202      	bcs.n	8012e42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012e3c:	4a09      	ldr	r2, [pc, #36]	; (8012e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	6013      	str	r3, [r2, #0]
}
 8012e42:	bf00      	nop
 8012e44:	3710      	adds	r7, #16
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
 8012e4a:	bf00      	nop
 8012e4c:	20001448 	.word	0x20001448
 8012e50:	20001344 	.word	0x20001344
 8012e54:	2000144c 	.word	0x2000144c
 8012e58:	20001430 	.word	0x20001430
 8012e5c:	20001400 	.word	0x20001400
 8012e60:	200013fc 	.word	0x200013fc
 8012e64:	20001464 	.word	0x20001464

08012e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b085      	sub	sp, #20
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	3b04      	subs	r3, #4
 8012e78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	3b04      	subs	r3, #4
 8012e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	f023 0201 	bic.w	r2, r3, #1
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	3b04      	subs	r3, #4
 8012e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012e98:	4a0c      	ldr	r2, [pc, #48]	; (8012ecc <pxPortInitialiseStack+0x64>)
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	3b14      	subs	r3, #20
 8012ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	3b04      	subs	r3, #4
 8012eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f06f 0202 	mvn.w	r2, #2
 8012eb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	3b20      	subs	r3, #32
 8012ebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3714      	adds	r7, #20
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eca:	4770      	bx	lr
 8012ecc:	08012ed1 	.word	0x08012ed1

08012ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b085      	sub	sp, #20
 8012ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012eda:	4b12      	ldr	r3, [pc, #72]	; (8012f24 <prvTaskExitError+0x54>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee2:	d00a      	beq.n	8012efa <prvTaskExitError+0x2a>
	__asm volatile
 8012ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee8:	f383 8811 	msr	BASEPRI, r3
 8012eec:	f3bf 8f6f 	isb	sy
 8012ef0:	f3bf 8f4f 	dsb	sy
 8012ef4:	60fb      	str	r3, [r7, #12]
}
 8012ef6:	bf00      	nop
 8012ef8:	e7fe      	b.n	8012ef8 <prvTaskExitError+0x28>
	__asm volatile
 8012efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efe:	f383 8811 	msr	BASEPRI, r3
 8012f02:	f3bf 8f6f 	isb	sy
 8012f06:	f3bf 8f4f 	dsb	sy
 8012f0a:	60bb      	str	r3, [r7, #8]
}
 8012f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012f0e:	bf00      	nop
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d0fc      	beq.n	8012f10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012f16:	bf00      	nop
 8012f18:	bf00      	nop
 8012f1a:	3714      	adds	r7, #20
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	4770      	bx	lr
 8012f24:	2000009c 	.word	0x2000009c
	...

08012f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012f30:	4b07      	ldr	r3, [pc, #28]	; (8012f50 <pxCurrentTCBConst2>)
 8012f32:	6819      	ldr	r1, [r3, #0]
 8012f34:	6808      	ldr	r0, [r1, #0]
 8012f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f3a:	f380 8809 	msr	PSP, r0
 8012f3e:	f3bf 8f6f 	isb	sy
 8012f42:	f04f 0000 	mov.w	r0, #0
 8012f46:	f380 8811 	msr	BASEPRI, r0
 8012f4a:	4770      	bx	lr
 8012f4c:	f3af 8000 	nop.w

08012f50 <pxCurrentTCBConst2>:
 8012f50:	20001344 	.word	0x20001344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012f54:	bf00      	nop
 8012f56:	bf00      	nop

08012f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012f58:	4808      	ldr	r0, [pc, #32]	; (8012f7c <prvPortStartFirstTask+0x24>)
 8012f5a:	6800      	ldr	r0, [r0, #0]
 8012f5c:	6800      	ldr	r0, [r0, #0]
 8012f5e:	f380 8808 	msr	MSP, r0
 8012f62:	f04f 0000 	mov.w	r0, #0
 8012f66:	f380 8814 	msr	CONTROL, r0
 8012f6a:	b662      	cpsie	i
 8012f6c:	b661      	cpsie	f
 8012f6e:	f3bf 8f4f 	dsb	sy
 8012f72:	f3bf 8f6f 	isb	sy
 8012f76:	df00      	svc	0
 8012f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012f7a:	bf00      	nop
 8012f7c:	e000ed08 	.word	0xe000ed08

08012f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b086      	sub	sp, #24
 8012f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012f86:	4b46      	ldr	r3, [pc, #280]	; (80130a0 <xPortStartScheduler+0x120>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	4a46      	ldr	r2, [pc, #280]	; (80130a4 <xPortStartScheduler+0x124>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d10a      	bne.n	8012fa6 <xPortStartScheduler+0x26>
	__asm volatile
 8012f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f94:	f383 8811 	msr	BASEPRI, r3
 8012f98:	f3bf 8f6f 	isb	sy
 8012f9c:	f3bf 8f4f 	dsb	sy
 8012fa0:	613b      	str	r3, [r7, #16]
}
 8012fa2:	bf00      	nop
 8012fa4:	e7fe      	b.n	8012fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012fa6:	4b3e      	ldr	r3, [pc, #248]	; (80130a0 <xPortStartScheduler+0x120>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4a3f      	ldr	r2, [pc, #252]	; (80130a8 <xPortStartScheduler+0x128>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d10a      	bne.n	8012fc6 <xPortStartScheduler+0x46>
	__asm volatile
 8012fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	60fb      	str	r3, [r7, #12]
}
 8012fc2:	bf00      	nop
 8012fc4:	e7fe      	b.n	8012fc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012fc6:	4b39      	ldr	r3, [pc, #228]	; (80130ac <xPortStartScheduler+0x12c>)
 8012fc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	781b      	ldrb	r3, [r3, #0]
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	22ff      	movs	r2, #255	; 0xff
 8012fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012fe0:	78fb      	ldrb	r3, [r7, #3]
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012fe8:	b2da      	uxtb	r2, r3
 8012fea:	4b31      	ldr	r3, [pc, #196]	; (80130b0 <xPortStartScheduler+0x130>)
 8012fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012fee:	4b31      	ldr	r3, [pc, #196]	; (80130b4 <xPortStartScheduler+0x134>)
 8012ff0:	2207      	movs	r2, #7
 8012ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ff4:	e009      	b.n	801300a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012ff6:	4b2f      	ldr	r3, [pc, #188]	; (80130b4 <xPortStartScheduler+0x134>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	3b01      	subs	r3, #1
 8012ffc:	4a2d      	ldr	r2, [pc, #180]	; (80130b4 <xPortStartScheduler+0x134>)
 8012ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013000:	78fb      	ldrb	r3, [r7, #3]
 8013002:	b2db      	uxtb	r3, r3
 8013004:	005b      	lsls	r3, r3, #1
 8013006:	b2db      	uxtb	r3, r3
 8013008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801300a:	78fb      	ldrb	r3, [r7, #3]
 801300c:	b2db      	uxtb	r3, r3
 801300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013012:	2b80      	cmp	r3, #128	; 0x80
 8013014:	d0ef      	beq.n	8012ff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013016:	4b27      	ldr	r3, [pc, #156]	; (80130b4 <xPortStartScheduler+0x134>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f1c3 0307 	rsb	r3, r3, #7
 801301e:	2b04      	cmp	r3, #4
 8013020:	d00a      	beq.n	8013038 <xPortStartScheduler+0xb8>
	__asm volatile
 8013022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013026:	f383 8811 	msr	BASEPRI, r3
 801302a:	f3bf 8f6f 	isb	sy
 801302e:	f3bf 8f4f 	dsb	sy
 8013032:	60bb      	str	r3, [r7, #8]
}
 8013034:	bf00      	nop
 8013036:	e7fe      	b.n	8013036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013038:	4b1e      	ldr	r3, [pc, #120]	; (80130b4 <xPortStartScheduler+0x134>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	021b      	lsls	r3, r3, #8
 801303e:	4a1d      	ldr	r2, [pc, #116]	; (80130b4 <xPortStartScheduler+0x134>)
 8013040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013042:	4b1c      	ldr	r3, [pc, #112]	; (80130b4 <xPortStartScheduler+0x134>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801304a:	4a1a      	ldr	r2, [pc, #104]	; (80130b4 <xPortStartScheduler+0x134>)
 801304c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	b2da      	uxtb	r2, r3
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013056:	4b18      	ldr	r3, [pc, #96]	; (80130b8 <xPortStartScheduler+0x138>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	4a17      	ldr	r2, [pc, #92]	; (80130b8 <xPortStartScheduler+0x138>)
 801305c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013062:	4b15      	ldr	r3, [pc, #84]	; (80130b8 <xPortStartScheduler+0x138>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	4a14      	ldr	r2, [pc, #80]	; (80130b8 <xPortStartScheduler+0x138>)
 8013068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801306c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801306e:	f000 f8dd 	bl	801322c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013072:	4b12      	ldr	r3, [pc, #72]	; (80130bc <xPortStartScheduler+0x13c>)
 8013074:	2200      	movs	r2, #0
 8013076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013078:	f000 f8fc 	bl	8013274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801307c:	4b10      	ldr	r3, [pc, #64]	; (80130c0 <xPortStartScheduler+0x140>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4a0f      	ldr	r2, [pc, #60]	; (80130c0 <xPortStartScheduler+0x140>)
 8013082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013088:	f7ff ff66 	bl	8012f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801308c:	f7ff fa84 	bl	8012598 <vTaskSwitchContext>
	prvTaskExitError();
 8013090:	f7ff ff1e 	bl	8012ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013094:	2300      	movs	r3, #0
}
 8013096:	4618      	mov	r0, r3
 8013098:	3718      	adds	r7, #24
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	e000ed00 	.word	0xe000ed00
 80130a4:	410fc271 	.word	0x410fc271
 80130a8:	410fc270 	.word	0x410fc270
 80130ac:	e000e400 	.word	0xe000e400
 80130b0:	20001470 	.word	0x20001470
 80130b4:	20001474 	.word	0x20001474
 80130b8:	e000ed20 	.word	0xe000ed20
 80130bc:	2000009c 	.word	0x2000009c
 80130c0:	e000ef34 	.word	0xe000ef34

080130c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80130c4:	b480      	push	{r7}
 80130c6:	b083      	sub	sp, #12
 80130c8:	af00      	add	r7, sp, #0
	__asm volatile
 80130ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ce:	f383 8811 	msr	BASEPRI, r3
 80130d2:	f3bf 8f6f 	isb	sy
 80130d6:	f3bf 8f4f 	dsb	sy
 80130da:	607b      	str	r3, [r7, #4]
}
 80130dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80130de:	4b0f      	ldr	r3, [pc, #60]	; (801311c <vPortEnterCritical+0x58>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	3301      	adds	r3, #1
 80130e4:	4a0d      	ldr	r2, [pc, #52]	; (801311c <vPortEnterCritical+0x58>)
 80130e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80130e8:	4b0c      	ldr	r3, [pc, #48]	; (801311c <vPortEnterCritical+0x58>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b01      	cmp	r3, #1
 80130ee:	d10f      	bne.n	8013110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80130f0:	4b0b      	ldr	r3, [pc, #44]	; (8013120 <vPortEnterCritical+0x5c>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d00a      	beq.n	8013110 <vPortEnterCritical+0x4c>
	__asm volatile
 80130fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130fe:	f383 8811 	msr	BASEPRI, r3
 8013102:	f3bf 8f6f 	isb	sy
 8013106:	f3bf 8f4f 	dsb	sy
 801310a:	603b      	str	r3, [r7, #0]
}
 801310c:	bf00      	nop
 801310e:	e7fe      	b.n	801310e <vPortEnterCritical+0x4a>
	}
}
 8013110:	bf00      	nop
 8013112:	370c      	adds	r7, #12
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr
 801311c:	2000009c 	.word	0x2000009c
 8013120:	e000ed04 	.word	0xe000ed04

08013124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013124:	b480      	push	{r7}
 8013126:	b083      	sub	sp, #12
 8013128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801312a:	4b12      	ldr	r3, [pc, #72]	; (8013174 <vPortExitCritical+0x50>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d10a      	bne.n	8013148 <vPortExitCritical+0x24>
	__asm volatile
 8013132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013136:	f383 8811 	msr	BASEPRI, r3
 801313a:	f3bf 8f6f 	isb	sy
 801313e:	f3bf 8f4f 	dsb	sy
 8013142:	607b      	str	r3, [r7, #4]
}
 8013144:	bf00      	nop
 8013146:	e7fe      	b.n	8013146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013148:	4b0a      	ldr	r3, [pc, #40]	; (8013174 <vPortExitCritical+0x50>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	3b01      	subs	r3, #1
 801314e:	4a09      	ldr	r2, [pc, #36]	; (8013174 <vPortExitCritical+0x50>)
 8013150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013152:	4b08      	ldr	r3, [pc, #32]	; (8013174 <vPortExitCritical+0x50>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d105      	bne.n	8013166 <vPortExitCritical+0x42>
 801315a:	2300      	movs	r3, #0
 801315c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	f383 8811 	msr	BASEPRI, r3
}
 8013164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013166:	bf00      	nop
 8013168:	370c      	adds	r7, #12
 801316a:	46bd      	mov	sp, r7
 801316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013170:	4770      	bx	lr
 8013172:	bf00      	nop
 8013174:	2000009c 	.word	0x2000009c
	...

08013180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013180:	f3ef 8009 	mrs	r0, PSP
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	4b15      	ldr	r3, [pc, #84]	; (80131e0 <pxCurrentTCBConst>)
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	f01e 0f10 	tst.w	lr, #16
 8013190:	bf08      	it	eq
 8013192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319a:	6010      	str	r0, [r2, #0]
 801319c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80131a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80131a4:	f380 8811 	msr	BASEPRI, r0
 80131a8:	f3bf 8f4f 	dsb	sy
 80131ac:	f3bf 8f6f 	isb	sy
 80131b0:	f7ff f9f2 	bl	8012598 <vTaskSwitchContext>
 80131b4:	f04f 0000 	mov.w	r0, #0
 80131b8:	f380 8811 	msr	BASEPRI, r0
 80131bc:	bc09      	pop	{r0, r3}
 80131be:	6819      	ldr	r1, [r3, #0]
 80131c0:	6808      	ldr	r0, [r1, #0]
 80131c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c6:	f01e 0f10 	tst.w	lr, #16
 80131ca:	bf08      	it	eq
 80131cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80131d0:	f380 8809 	msr	PSP, r0
 80131d4:	f3bf 8f6f 	isb	sy
 80131d8:	4770      	bx	lr
 80131da:	bf00      	nop
 80131dc:	f3af 8000 	nop.w

080131e0 <pxCurrentTCBConst>:
 80131e0:	20001344 	.word	0x20001344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80131e4:	bf00      	nop
 80131e6:	bf00      	nop

080131e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
	__asm volatile
 80131ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f2:	f383 8811 	msr	BASEPRI, r3
 80131f6:	f3bf 8f6f 	isb	sy
 80131fa:	f3bf 8f4f 	dsb	sy
 80131fe:	607b      	str	r3, [r7, #4]
}
 8013200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013202:	f7ff f911 	bl	8012428 <xTaskIncrementTick>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d003      	beq.n	8013214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801320c:	4b06      	ldr	r3, [pc, #24]	; (8013228 <SysTick_Handler+0x40>)
 801320e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013212:	601a      	str	r2, [r3, #0]
 8013214:	2300      	movs	r3, #0
 8013216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	f383 8811 	msr	BASEPRI, r3
}
 801321e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013220:	bf00      	nop
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	e000ed04 	.word	0xe000ed04

0801322c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801322c:	b480      	push	{r7}
 801322e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013230:	4b0b      	ldr	r3, [pc, #44]	; (8013260 <vPortSetupTimerInterrupt+0x34>)
 8013232:	2200      	movs	r2, #0
 8013234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013236:	4b0b      	ldr	r3, [pc, #44]	; (8013264 <vPortSetupTimerInterrupt+0x38>)
 8013238:	2200      	movs	r2, #0
 801323a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801323c:	4b0a      	ldr	r3, [pc, #40]	; (8013268 <vPortSetupTimerInterrupt+0x3c>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4a0a      	ldr	r2, [pc, #40]	; (801326c <vPortSetupTimerInterrupt+0x40>)
 8013242:	fba2 2303 	umull	r2, r3, r2, r3
 8013246:	099b      	lsrs	r3, r3, #6
 8013248:	4a09      	ldr	r2, [pc, #36]	; (8013270 <vPortSetupTimerInterrupt+0x44>)
 801324a:	3b01      	subs	r3, #1
 801324c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801324e:	4b04      	ldr	r3, [pc, #16]	; (8013260 <vPortSetupTimerInterrupt+0x34>)
 8013250:	2207      	movs	r2, #7
 8013252:	601a      	str	r2, [r3, #0]
}
 8013254:	bf00      	nop
 8013256:	46bd      	mov	sp, r7
 8013258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325c:	4770      	bx	lr
 801325e:	bf00      	nop
 8013260:	e000e010 	.word	0xe000e010
 8013264:	e000e018 	.word	0xe000e018
 8013268:	20000014 	.word	0x20000014
 801326c:	10624dd3 	.word	0x10624dd3
 8013270:	e000e014 	.word	0xe000e014

08013274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013284 <vPortEnableVFP+0x10>
 8013278:	6801      	ldr	r1, [r0, #0]
 801327a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801327e:	6001      	str	r1, [r0, #0]
 8013280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013282:	bf00      	nop
 8013284:	e000ed88 	.word	0xe000ed88

08013288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013288:	b480      	push	{r7}
 801328a:	b085      	sub	sp, #20
 801328c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801328e:	f3ef 8305 	mrs	r3, IPSR
 8013292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2b0f      	cmp	r3, #15
 8013298:	d914      	bls.n	80132c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801329a:	4a17      	ldr	r2, [pc, #92]	; (80132f8 <vPortValidateInterruptPriority+0x70>)
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	4413      	add	r3, r2
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80132a4:	4b15      	ldr	r3, [pc, #84]	; (80132fc <vPortValidateInterruptPriority+0x74>)
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	7afa      	ldrb	r2, [r7, #11]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d20a      	bcs.n	80132c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80132ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b2:	f383 8811 	msr	BASEPRI, r3
 80132b6:	f3bf 8f6f 	isb	sy
 80132ba:	f3bf 8f4f 	dsb	sy
 80132be:	607b      	str	r3, [r7, #4]
}
 80132c0:	bf00      	nop
 80132c2:	e7fe      	b.n	80132c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80132c4:	4b0e      	ldr	r3, [pc, #56]	; (8013300 <vPortValidateInterruptPriority+0x78>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80132cc:	4b0d      	ldr	r3, [pc, #52]	; (8013304 <vPortValidateInterruptPriority+0x7c>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d90a      	bls.n	80132ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80132d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d8:	f383 8811 	msr	BASEPRI, r3
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	603b      	str	r3, [r7, #0]
}
 80132e6:	bf00      	nop
 80132e8:	e7fe      	b.n	80132e8 <vPortValidateInterruptPriority+0x60>
	}
 80132ea:	bf00      	nop
 80132ec:	3714      	adds	r7, #20
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr
 80132f6:	bf00      	nop
 80132f8:	e000e3f0 	.word	0xe000e3f0
 80132fc:	20001470 	.word	0x20001470
 8013300:	e000ed0c 	.word	0xe000ed0c
 8013304:	20001474 	.word	0x20001474

08013308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b08a      	sub	sp, #40	; 0x28
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013310:	2300      	movs	r3, #0
 8013312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013314:	f7fe ffde 	bl	80122d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013318:	4b5b      	ldr	r3, [pc, #364]	; (8013488 <pvPortMalloc+0x180>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d101      	bne.n	8013324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013320:	f000 f920 	bl	8013564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013324:	4b59      	ldr	r3, [pc, #356]	; (801348c <pvPortMalloc+0x184>)
 8013326:	681a      	ldr	r2, [r3, #0]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4013      	ands	r3, r2
 801332c:	2b00      	cmp	r3, #0
 801332e:	f040 8093 	bne.w	8013458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d01d      	beq.n	8013374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013338:	2208      	movs	r2, #8
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4413      	add	r3, r2
 801333e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f003 0307 	and.w	r3, r3, #7
 8013346:	2b00      	cmp	r3, #0
 8013348:	d014      	beq.n	8013374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f023 0307 	bic.w	r3, r3, #7
 8013350:	3308      	adds	r3, #8
 8013352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f003 0307 	and.w	r3, r3, #7
 801335a:	2b00      	cmp	r3, #0
 801335c:	d00a      	beq.n	8013374 <pvPortMalloc+0x6c>
	__asm volatile
 801335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013362:	f383 8811 	msr	BASEPRI, r3
 8013366:	f3bf 8f6f 	isb	sy
 801336a:	f3bf 8f4f 	dsb	sy
 801336e:	617b      	str	r3, [r7, #20]
}
 8013370:	bf00      	nop
 8013372:	e7fe      	b.n	8013372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d06e      	beq.n	8013458 <pvPortMalloc+0x150>
 801337a:	4b45      	ldr	r3, [pc, #276]	; (8013490 <pvPortMalloc+0x188>)
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	429a      	cmp	r2, r3
 8013382:	d869      	bhi.n	8013458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013384:	4b43      	ldr	r3, [pc, #268]	; (8013494 <pvPortMalloc+0x18c>)
 8013386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013388:	4b42      	ldr	r3, [pc, #264]	; (8013494 <pvPortMalloc+0x18c>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801338e:	e004      	b.n	801339a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d903      	bls.n	80133ac <pvPortMalloc+0xa4>
 80133a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d1f1      	bne.n	8013390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80133ac:	4b36      	ldr	r3, [pc, #216]	; (8013488 <pvPortMalloc+0x180>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d050      	beq.n	8013458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2208      	movs	r2, #8
 80133bc:	4413      	add	r3, r2
 80133be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80133c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	6a3b      	ldr	r3, [r7, #32]
 80133c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80133c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ca:	685a      	ldr	r2, [r3, #4]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	1ad2      	subs	r2, r2, r3
 80133d0:	2308      	movs	r3, #8
 80133d2:	005b      	lsls	r3, r3, #1
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d91f      	bls.n	8013418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80133d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	4413      	add	r3, r2
 80133de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80133e0:	69bb      	ldr	r3, [r7, #24]
 80133e2:	f003 0307 	and.w	r3, r3, #7
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d00a      	beq.n	8013400 <pvPortMalloc+0xf8>
	__asm volatile
 80133ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ee:	f383 8811 	msr	BASEPRI, r3
 80133f2:	f3bf 8f6f 	isb	sy
 80133f6:	f3bf 8f4f 	dsb	sy
 80133fa:	613b      	str	r3, [r7, #16]
}
 80133fc:	bf00      	nop
 80133fe:	e7fe      	b.n	80133fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013402:	685a      	ldr	r2, [r3, #4]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	1ad2      	subs	r2, r2, r3
 8013408:	69bb      	ldr	r3, [r7, #24]
 801340a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013412:	69b8      	ldr	r0, [r7, #24]
 8013414:	f000 f908 	bl	8013628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013418:	4b1d      	ldr	r3, [pc, #116]	; (8013490 <pvPortMalloc+0x188>)
 801341a:	681a      	ldr	r2, [r3, #0]
 801341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	1ad3      	subs	r3, r2, r3
 8013422:	4a1b      	ldr	r2, [pc, #108]	; (8013490 <pvPortMalloc+0x188>)
 8013424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013426:	4b1a      	ldr	r3, [pc, #104]	; (8013490 <pvPortMalloc+0x188>)
 8013428:	681a      	ldr	r2, [r3, #0]
 801342a:	4b1b      	ldr	r3, [pc, #108]	; (8013498 <pvPortMalloc+0x190>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	429a      	cmp	r2, r3
 8013430:	d203      	bcs.n	801343a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013432:	4b17      	ldr	r3, [pc, #92]	; (8013490 <pvPortMalloc+0x188>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4a18      	ldr	r2, [pc, #96]	; (8013498 <pvPortMalloc+0x190>)
 8013438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343c:	685a      	ldr	r2, [r3, #4]
 801343e:	4b13      	ldr	r3, [pc, #76]	; (801348c <pvPortMalloc+0x184>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	431a      	orrs	r2, r3
 8013444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344a:	2200      	movs	r2, #0
 801344c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801344e:	4b13      	ldr	r3, [pc, #76]	; (801349c <pvPortMalloc+0x194>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	3301      	adds	r3, #1
 8013454:	4a11      	ldr	r2, [pc, #68]	; (801349c <pvPortMalloc+0x194>)
 8013456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013458:	f7fe ff4a 	bl	80122f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801345c:	69fb      	ldr	r3, [r7, #28]
 801345e:	f003 0307 	and.w	r3, r3, #7
 8013462:	2b00      	cmp	r3, #0
 8013464:	d00a      	beq.n	801347c <pvPortMalloc+0x174>
	__asm volatile
 8013466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346a:	f383 8811 	msr	BASEPRI, r3
 801346e:	f3bf 8f6f 	isb	sy
 8013472:	f3bf 8f4f 	dsb	sy
 8013476:	60fb      	str	r3, [r7, #12]
}
 8013478:	bf00      	nop
 801347a:	e7fe      	b.n	801347a <pvPortMalloc+0x172>
	return pvReturn;
 801347c:	69fb      	ldr	r3, [r7, #28]
}
 801347e:	4618      	mov	r0, r3
 8013480:	3728      	adds	r7, #40	; 0x28
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
 8013486:	bf00      	nop
 8013488:	20005080 	.word	0x20005080
 801348c:	20005094 	.word	0x20005094
 8013490:	20005084 	.word	0x20005084
 8013494:	20005078 	.word	0x20005078
 8013498:	20005088 	.word	0x20005088
 801349c:	2000508c 	.word	0x2000508c

080134a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b086      	sub	sp, #24
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d04d      	beq.n	801354e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80134b2:	2308      	movs	r3, #8
 80134b4:	425b      	negs	r3, r3
 80134b6:	697a      	ldr	r2, [r7, #20]
 80134b8:	4413      	add	r3, r2
 80134ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80134bc:	697b      	ldr	r3, [r7, #20]
 80134be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	685a      	ldr	r2, [r3, #4]
 80134c4:	4b24      	ldr	r3, [pc, #144]	; (8013558 <vPortFree+0xb8>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	4013      	ands	r3, r2
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d10a      	bne.n	80134e4 <vPortFree+0x44>
	__asm volatile
 80134ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d2:	f383 8811 	msr	BASEPRI, r3
 80134d6:	f3bf 8f6f 	isb	sy
 80134da:	f3bf 8f4f 	dsb	sy
 80134de:	60fb      	str	r3, [r7, #12]
}
 80134e0:	bf00      	nop
 80134e2:	e7fe      	b.n	80134e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d00a      	beq.n	8013502 <vPortFree+0x62>
	__asm volatile
 80134ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f0:	f383 8811 	msr	BASEPRI, r3
 80134f4:	f3bf 8f6f 	isb	sy
 80134f8:	f3bf 8f4f 	dsb	sy
 80134fc:	60bb      	str	r3, [r7, #8]
}
 80134fe:	bf00      	nop
 8013500:	e7fe      	b.n	8013500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	685a      	ldr	r2, [r3, #4]
 8013506:	4b14      	ldr	r3, [pc, #80]	; (8013558 <vPortFree+0xb8>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	4013      	ands	r3, r2
 801350c:	2b00      	cmp	r3, #0
 801350e:	d01e      	beq.n	801354e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d11a      	bne.n	801354e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	685a      	ldr	r2, [r3, #4]
 801351c:	4b0e      	ldr	r3, [pc, #56]	; (8013558 <vPortFree+0xb8>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	43db      	mvns	r3, r3
 8013522:	401a      	ands	r2, r3
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013528:	f7fe fed4 	bl	80122d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	685a      	ldr	r2, [r3, #4]
 8013530:	4b0a      	ldr	r3, [pc, #40]	; (801355c <vPortFree+0xbc>)
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	4413      	add	r3, r2
 8013536:	4a09      	ldr	r2, [pc, #36]	; (801355c <vPortFree+0xbc>)
 8013538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801353a:	6938      	ldr	r0, [r7, #16]
 801353c:	f000 f874 	bl	8013628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013540:	4b07      	ldr	r3, [pc, #28]	; (8013560 <vPortFree+0xc0>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	3301      	adds	r3, #1
 8013546:	4a06      	ldr	r2, [pc, #24]	; (8013560 <vPortFree+0xc0>)
 8013548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801354a:	f7fe fed1 	bl	80122f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801354e:	bf00      	nop
 8013550:	3718      	adds	r7, #24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	20005094 	.word	0x20005094
 801355c:	20005084 	.word	0x20005084
 8013560:	20005090 	.word	0x20005090

08013564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013564:	b480      	push	{r7}
 8013566:	b085      	sub	sp, #20
 8013568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801356a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801356e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013570:	4b27      	ldr	r3, [pc, #156]	; (8013610 <prvHeapInit+0xac>)
 8013572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f003 0307 	and.w	r3, r3, #7
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00c      	beq.n	8013598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	3307      	adds	r3, #7
 8013582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	f023 0307 	bic.w	r3, r3, #7
 801358a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801358c:	68ba      	ldr	r2, [r7, #8]
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	1ad3      	subs	r3, r2, r3
 8013592:	4a1f      	ldr	r2, [pc, #124]	; (8013610 <prvHeapInit+0xac>)
 8013594:	4413      	add	r3, r2
 8013596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801359c:	4a1d      	ldr	r2, [pc, #116]	; (8013614 <prvHeapInit+0xb0>)
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80135a2:	4b1c      	ldr	r3, [pc, #112]	; (8013614 <prvHeapInit+0xb0>)
 80135a4:	2200      	movs	r2, #0
 80135a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	68ba      	ldr	r2, [r7, #8]
 80135ac:	4413      	add	r3, r2
 80135ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80135b0:	2208      	movs	r2, #8
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	1a9b      	subs	r3, r3, r2
 80135b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	f023 0307 	bic.w	r3, r3, #7
 80135be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	4a15      	ldr	r2, [pc, #84]	; (8013618 <prvHeapInit+0xb4>)
 80135c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80135c6:	4b14      	ldr	r3, [pc, #80]	; (8013618 <prvHeapInit+0xb4>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2200      	movs	r2, #0
 80135cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80135ce:	4b12      	ldr	r3, [pc, #72]	; (8013618 <prvHeapInit+0xb4>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2200      	movs	r2, #0
 80135d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	68fa      	ldr	r2, [r7, #12]
 80135de:	1ad2      	subs	r2, r2, r3
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80135e4:	4b0c      	ldr	r3, [pc, #48]	; (8013618 <prvHeapInit+0xb4>)
 80135e6:	681a      	ldr	r2, [r3, #0]
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	685b      	ldr	r3, [r3, #4]
 80135f0:	4a0a      	ldr	r2, [pc, #40]	; (801361c <prvHeapInit+0xb8>)
 80135f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	4a09      	ldr	r2, [pc, #36]	; (8013620 <prvHeapInit+0xbc>)
 80135fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80135fc:	4b09      	ldr	r3, [pc, #36]	; (8013624 <prvHeapInit+0xc0>)
 80135fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013602:	601a      	str	r2, [r3, #0]
}
 8013604:	bf00      	nop
 8013606:	3714      	adds	r7, #20
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr
 8013610:	20001478 	.word	0x20001478
 8013614:	20005078 	.word	0x20005078
 8013618:	20005080 	.word	0x20005080
 801361c:	20005088 	.word	0x20005088
 8013620:	20005084 	.word	0x20005084
 8013624:	20005094 	.word	0x20005094

08013628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013628:	b480      	push	{r7}
 801362a:	b085      	sub	sp, #20
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013630:	4b28      	ldr	r3, [pc, #160]	; (80136d4 <prvInsertBlockIntoFreeList+0xac>)
 8013632:	60fb      	str	r3, [r7, #12]
 8013634:	e002      	b.n	801363c <prvInsertBlockIntoFreeList+0x14>
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	60fb      	str	r3, [r7, #12]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	429a      	cmp	r2, r3
 8013644:	d8f7      	bhi.n	8013636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	685b      	ldr	r3, [r3, #4]
 801364e:	68ba      	ldr	r2, [r7, #8]
 8013650:	4413      	add	r3, r2
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	429a      	cmp	r2, r3
 8013656:	d108      	bne.n	801366a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	685a      	ldr	r2, [r3, #4]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	441a      	add	r2, r3
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	68ba      	ldr	r2, [r7, #8]
 8013674:	441a      	add	r2, r3
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	429a      	cmp	r2, r3
 801367c:	d118      	bne.n	80136b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	4b15      	ldr	r3, [pc, #84]	; (80136d8 <prvInsertBlockIntoFreeList+0xb0>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	429a      	cmp	r2, r3
 8013688:	d00d      	beq.n	80136a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	685a      	ldr	r2, [r3, #4]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	441a      	add	r2, r3
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	601a      	str	r2, [r3, #0]
 80136a4:	e008      	b.n	80136b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80136a6:	4b0c      	ldr	r3, [pc, #48]	; (80136d8 <prvInsertBlockIntoFreeList+0xb0>)
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	601a      	str	r2, [r3, #0]
 80136ae:	e003      	b.n	80136b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	681a      	ldr	r2, [r3, #0]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80136b8:	68fa      	ldr	r2, [r7, #12]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	429a      	cmp	r2, r3
 80136be:	d002      	beq.n	80136c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136c6:	bf00      	nop
 80136c8:	3714      	adds	r7, #20
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	20005078 	.word	0x20005078
 80136d8:	20005080 	.word	0x20005080

080136dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80136e0:	2200      	movs	r2, #0
 80136e2:	4912      	ldr	r1, [pc, #72]	; (801372c <MX_USB_DEVICE_Init+0x50>)
 80136e4:	4812      	ldr	r0, [pc, #72]	; (8013730 <MX_USB_DEVICE_Init+0x54>)
 80136e6:	f7fc fb2b 	bl	800fd40 <USBD_Init>
 80136ea:	4603      	mov	r3, r0
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d001      	beq.n	80136f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80136f0:	f7f1 f95a 	bl	80049a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80136f4:	490f      	ldr	r1, [pc, #60]	; (8013734 <MX_USB_DEVICE_Init+0x58>)
 80136f6:	480e      	ldr	r0, [pc, #56]	; (8013730 <MX_USB_DEVICE_Init+0x54>)
 80136f8:	f7fc fb52 	bl	800fda0 <USBD_RegisterClass>
 80136fc:	4603      	mov	r3, r0
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d001      	beq.n	8013706 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013702:	f7f1 f951 	bl	80049a8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8013706:	490c      	ldr	r1, [pc, #48]	; (8013738 <MX_USB_DEVICE_Init+0x5c>)
 8013708:	4809      	ldr	r0, [pc, #36]	; (8013730 <MX_USB_DEVICE_Init+0x54>)
 801370a:	f7fc faff 	bl	800fd0c <USBD_CUSTOM_HID_RegisterInterface>
 801370e:	4603      	mov	r3, r0
 8013710:	2b00      	cmp	r3, #0
 8013712:	d001      	beq.n	8013718 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013714:	f7f1 f948 	bl	80049a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013718:	4805      	ldr	r0, [pc, #20]	; (8013730 <MX_USB_DEVICE_Init+0x54>)
 801371a:	f7fc fb77 	bl	800fe0c <USBD_Start>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	d001      	beq.n	8013728 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013724:	f7f1 f940 	bl	80049a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013728:	bf00      	nop
 801372a:	bd80      	pop	{r7, pc}
 801372c:	200000d4 	.word	0x200000d4
 8013730:	20005098 	.word	0x20005098
 8013734:	20000020 	.word	0x20000020
 8013738:	200000c4 	.word	0x200000c4

0801373c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 801373c:	b480      	push	{r7}
 801373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013740:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013742:	4618      	mov	r0, r3
 8013744:	46bd      	mov	sp, r7
 8013746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374a:	4770      	bx	lr

0801374c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 801374c:	b480      	push	{r7}
 801374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8013750:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013752:	4618      	mov	r0, r3
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr

0801375c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS (uint8_t* state)
{
 801375c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
    return -1;
  }

  return (USBD_OK);*/

	memcpy(buffer,state,0x40);
 8013764:	4a0d      	ldr	r2, [pc, #52]	; (801379c <CUSTOM_HID_OutEvent_FS+0x40>)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	461c      	mov	r4, r3
 801376a:	4616      	mov	r6, r2
 801376c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8013770:	4635      	mov	r5, r6
 8013772:	4623      	mov	r3, r4
 8013774:	6818      	ldr	r0, [r3, #0]
 8013776:	6859      	ldr	r1, [r3, #4]
 8013778:	689a      	ldr	r2, [r3, #8]
 801377a:	68db      	ldr	r3, [r3, #12]
 801377c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801377e:	3410      	adds	r4, #16
 8013780:	3610      	adds	r6, #16
 8013782:	4564      	cmp	r4, ip
 8013784:	d1f4      	bne.n	8013770 <CUSTOM_HID_OutEvent_FS+0x14>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,(uint8_t*)buffer,0x40);
 8013786:	2240      	movs	r2, #64	; 0x40
 8013788:	4904      	ldr	r1, [pc, #16]	; (801379c <CUSTOM_HID_OutEvent_FS+0x40>)
 801378a:	4805      	ldr	r0, [pc, #20]	; (80137a0 <CUSTOM_HID_OutEvent_FS+0x44>)
 801378c:	f7fc f976 	bl	800fa7c <USBD_CUSTOM_HID_SendReport>
	return (0);
 8013790:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 8013792:	4618      	mov	r0, r3
 8013794:	370c      	adds	r7, #12
 8013796:	46bd      	mov	sp, r7
 8013798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801379a:	bf00      	nop
 801379c:	20005374 	.word	0x20005374
 80137a0:	20005098 	.word	0x20005098

080137a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137a4:	b480      	push	{r7}
 80137a6:	b083      	sub	sp, #12
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	4603      	mov	r3, r0
 80137ac:	6039      	str	r1, [r7, #0]
 80137ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	2212      	movs	r2, #18
 80137b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80137b6:	4b03      	ldr	r3, [pc, #12]	; (80137c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	200000f0 	.word	0x200000f0

080137c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	4603      	mov	r3, r0
 80137d0:	6039      	str	r1, [r7, #0]
 80137d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	2204      	movs	r2, #4
 80137d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80137da:	4b03      	ldr	r3, [pc, #12]	; (80137e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80137dc:	4618      	mov	r0, r3
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	20000104 	.word	0x20000104

080137ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b082      	sub	sp, #8
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	4603      	mov	r3, r0
 80137f4:	6039      	str	r1, [r7, #0]
 80137f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80137f8:	79fb      	ldrb	r3, [r7, #7]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d105      	bne.n	801380a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80137fe:	683a      	ldr	r2, [r7, #0]
 8013800:	4907      	ldr	r1, [pc, #28]	; (8013820 <USBD_FS_ProductStrDescriptor+0x34>)
 8013802:	4808      	ldr	r0, [pc, #32]	; (8013824 <USBD_FS_ProductStrDescriptor+0x38>)
 8013804:	f7fd fcae 	bl	8011164 <USBD_GetString>
 8013808:	e004      	b.n	8013814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801380a:	683a      	ldr	r2, [r7, #0]
 801380c:	4904      	ldr	r1, [pc, #16]	; (8013820 <USBD_FS_ProductStrDescriptor+0x34>)
 801380e:	4805      	ldr	r0, [pc, #20]	; (8013824 <USBD_FS_ProductStrDescriptor+0x38>)
 8013810:	f7fd fca8 	bl	8011164 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013814:	4b02      	ldr	r3, [pc, #8]	; (8013820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013816:	4618      	mov	r0, r3
 8013818:	3708      	adds	r7, #8
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	200053b4 	.word	0x200053b4
 8013824:	08017198 	.word	0x08017198

08013828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	4603      	mov	r3, r0
 8013830:	6039      	str	r1, [r7, #0]
 8013832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013834:	683a      	ldr	r2, [r7, #0]
 8013836:	4904      	ldr	r1, [pc, #16]	; (8013848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013838:	4804      	ldr	r0, [pc, #16]	; (801384c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801383a:	f7fd fc93 	bl	8011164 <USBD_GetString>
  return USBD_StrDesc;
 801383e:	4b02      	ldr	r3, [pc, #8]	; (8013848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013840:	4618      	mov	r0, r3
 8013842:	3708      	adds	r7, #8
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	200053b4 	.word	0x200053b4
 801384c:	080171b8 	.word	0x080171b8

08013850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	4603      	mov	r3, r0
 8013858:	6039      	str	r1, [r7, #0]
 801385a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	221a      	movs	r2, #26
 8013860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013862:	f000 f843 	bl	80138ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013866:	4b02      	ldr	r3, [pc, #8]	; (8013870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013868:	4618      	mov	r0, r3
 801386a:	3708      	adds	r7, #8
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	20000108 	.word	0x20000108

08013874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b082      	sub	sp, #8
 8013878:	af00      	add	r7, sp, #0
 801387a:	4603      	mov	r3, r0
 801387c:	6039      	str	r1, [r7, #0]
 801387e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013880:	79fb      	ldrb	r3, [r7, #7]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d105      	bne.n	8013892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013886:	683a      	ldr	r2, [r7, #0]
 8013888:	4907      	ldr	r1, [pc, #28]	; (80138a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801388a:	4808      	ldr	r0, [pc, #32]	; (80138ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801388c:	f7fd fc6a 	bl	8011164 <USBD_GetString>
 8013890:	e004      	b.n	801389c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013892:	683a      	ldr	r2, [r7, #0]
 8013894:	4904      	ldr	r1, [pc, #16]	; (80138a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013896:	4805      	ldr	r0, [pc, #20]	; (80138ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8013898:	f7fd fc64 	bl	8011164 <USBD_GetString>
  }
  return USBD_StrDesc;
 801389c:	4b02      	ldr	r3, [pc, #8]	; (80138a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3708      	adds	r7, #8
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	200053b4 	.word	0x200053b4
 80138ac:	080171cc 	.word	0x080171cc

080138b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	4603      	mov	r3, r0
 80138b8:	6039      	str	r1, [r7, #0]
 80138ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80138bc:	79fb      	ldrb	r3, [r7, #7]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d105      	bne.n	80138ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80138c2:	683a      	ldr	r2, [r7, #0]
 80138c4:	4907      	ldr	r1, [pc, #28]	; (80138e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80138c6:	4808      	ldr	r0, [pc, #32]	; (80138e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80138c8:	f7fd fc4c 	bl	8011164 <USBD_GetString>
 80138cc:	e004      	b.n	80138d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80138ce:	683a      	ldr	r2, [r7, #0]
 80138d0:	4904      	ldr	r1, [pc, #16]	; (80138e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80138d2:	4805      	ldr	r0, [pc, #20]	; (80138e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80138d4:	f7fd fc46 	bl	8011164 <USBD_GetString>
  }
  return USBD_StrDesc;
 80138d8:	4b02      	ldr	r3, [pc, #8]	; (80138e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	200053b4 	.word	0x200053b4
 80138e8:	080171e0 	.word	0x080171e0

080138ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b084      	sub	sp, #16
 80138f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80138f2:	4b0f      	ldr	r3, [pc, #60]	; (8013930 <Get_SerialNum+0x44>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80138f8:	4b0e      	ldr	r3, [pc, #56]	; (8013934 <Get_SerialNum+0x48>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80138fe:	4b0e      	ldr	r3, [pc, #56]	; (8013938 <Get_SerialNum+0x4c>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013904:	68fa      	ldr	r2, [r7, #12]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	4413      	add	r3, r2
 801390a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d009      	beq.n	8013926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013912:	2208      	movs	r2, #8
 8013914:	4909      	ldr	r1, [pc, #36]	; (801393c <Get_SerialNum+0x50>)
 8013916:	68f8      	ldr	r0, [r7, #12]
 8013918:	f000 f814 	bl	8013944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801391c:	2204      	movs	r2, #4
 801391e:	4908      	ldr	r1, [pc, #32]	; (8013940 <Get_SerialNum+0x54>)
 8013920:	68b8      	ldr	r0, [r7, #8]
 8013922:	f000 f80f 	bl	8013944 <IntToUnicode>
  }
}
 8013926:	bf00      	nop
 8013928:	3710      	adds	r7, #16
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}
 801392e:	bf00      	nop
 8013930:	1fff7a10 	.word	0x1fff7a10
 8013934:	1fff7a14 	.word	0x1fff7a14
 8013938:	1fff7a18 	.word	0x1fff7a18
 801393c:	2000010a 	.word	0x2000010a
 8013940:	2000011a 	.word	0x2000011a

08013944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013944:	b480      	push	{r7}
 8013946:	b087      	sub	sp, #28
 8013948:	af00      	add	r7, sp, #0
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	60b9      	str	r1, [r7, #8]
 801394e:	4613      	mov	r3, r2
 8013950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013952:	2300      	movs	r3, #0
 8013954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013956:	2300      	movs	r3, #0
 8013958:	75fb      	strb	r3, [r7, #23]
 801395a:	e027      	b.n	80139ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	0f1b      	lsrs	r3, r3, #28
 8013960:	2b09      	cmp	r3, #9
 8013962:	d80b      	bhi.n	801397c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	0f1b      	lsrs	r3, r3, #28
 8013968:	b2da      	uxtb	r2, r3
 801396a:	7dfb      	ldrb	r3, [r7, #23]
 801396c:	005b      	lsls	r3, r3, #1
 801396e:	4619      	mov	r1, r3
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	440b      	add	r3, r1
 8013974:	3230      	adds	r2, #48	; 0x30
 8013976:	b2d2      	uxtb	r2, r2
 8013978:	701a      	strb	r2, [r3, #0]
 801397a:	e00a      	b.n	8013992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	0f1b      	lsrs	r3, r3, #28
 8013980:	b2da      	uxtb	r2, r3
 8013982:	7dfb      	ldrb	r3, [r7, #23]
 8013984:	005b      	lsls	r3, r3, #1
 8013986:	4619      	mov	r1, r3
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	440b      	add	r3, r1
 801398c:	3237      	adds	r2, #55	; 0x37
 801398e:	b2d2      	uxtb	r2, r2
 8013990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	011b      	lsls	r3, r3, #4
 8013996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013998:	7dfb      	ldrb	r3, [r7, #23]
 801399a:	005b      	lsls	r3, r3, #1
 801399c:	3301      	adds	r3, #1
 801399e:	68ba      	ldr	r2, [r7, #8]
 80139a0:	4413      	add	r3, r2
 80139a2:	2200      	movs	r2, #0
 80139a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80139a6:	7dfb      	ldrb	r3, [r7, #23]
 80139a8:	3301      	adds	r3, #1
 80139aa:	75fb      	strb	r3, [r7, #23]
 80139ac:	7dfa      	ldrb	r2, [r7, #23]
 80139ae:	79fb      	ldrb	r3, [r7, #7]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d3d3      	bcc.n	801395c <IntToUnicode+0x18>
  }
}
 80139b4:	bf00      	nop
 80139b6:	bf00      	nop
 80139b8:	371c      	adds	r7, #28
 80139ba:	46bd      	mov	sp, r7
 80139bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c0:	4770      	bx	lr
	...

080139c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b08a      	sub	sp, #40	; 0x28
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80139cc:	f107 0314 	add.w	r3, r7, #20
 80139d0:	2200      	movs	r2, #0
 80139d2:	601a      	str	r2, [r3, #0]
 80139d4:	605a      	str	r2, [r3, #4]
 80139d6:	609a      	str	r2, [r3, #8]
 80139d8:	60da      	str	r2, [r3, #12]
 80139da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80139e4:	d13a      	bne.n	8013a5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80139e6:	2300      	movs	r3, #0
 80139e8:	613b      	str	r3, [r7, #16]
 80139ea:	4b1e      	ldr	r3, [pc, #120]	; (8013a64 <HAL_PCD_MspInit+0xa0>)
 80139ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ee:	4a1d      	ldr	r2, [pc, #116]	; (8013a64 <HAL_PCD_MspInit+0xa0>)
 80139f0:	f043 0301 	orr.w	r3, r3, #1
 80139f4:	6313      	str	r3, [r2, #48]	; 0x30
 80139f6:	4b1b      	ldr	r3, [pc, #108]	; (8013a64 <HAL_PCD_MspInit+0xa0>)
 80139f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139fa:	f003 0301 	and.w	r3, r3, #1
 80139fe:	613b      	str	r3, [r7, #16]
 8013a00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013a02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a08:	2302      	movs	r3, #2
 8013a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a10:	2303      	movs	r3, #3
 8013a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013a14:	230a      	movs	r3, #10
 8013a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a18:	f107 0314 	add.w	r3, r7, #20
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	4812      	ldr	r0, [pc, #72]	; (8013a68 <HAL_PCD_MspInit+0xa4>)
 8013a20:	f7f2 fd96 	bl	8006550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013a24:	4b0f      	ldr	r3, [pc, #60]	; (8013a64 <HAL_PCD_MspInit+0xa0>)
 8013a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a28:	4a0e      	ldr	r2, [pc, #56]	; (8013a64 <HAL_PCD_MspInit+0xa0>)
 8013a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a2e:	6353      	str	r3, [r2, #52]	; 0x34
 8013a30:	2300      	movs	r3, #0
 8013a32:	60fb      	str	r3, [r7, #12]
 8013a34:	4b0b      	ldr	r3, [pc, #44]	; (8013a64 <HAL_PCD_MspInit+0xa0>)
 8013a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a38:	4a0a      	ldr	r2, [pc, #40]	; (8013a64 <HAL_PCD_MspInit+0xa0>)
 8013a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8013a40:	4b08      	ldr	r3, [pc, #32]	; (8013a64 <HAL_PCD_MspInit+0xa0>)
 8013a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013a48:	60fb      	str	r3, [r7, #12]
 8013a4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	2105      	movs	r1, #5
 8013a50:	2043      	movs	r0, #67	; 0x43
 8013a52:	f7f2 f943 	bl	8005cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013a56:	2043      	movs	r0, #67	; 0x43
 8013a58:	f7f2 f95c 	bl	8005d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013a5c:	bf00      	nop
 8013a5e:	3728      	adds	r7, #40	; 0x28
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	40023800 	.word	0x40023800
 8013a68:	40020000 	.word	0x40020000

08013a6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013a80:	4619      	mov	r1, r3
 8013a82:	4610      	mov	r0, r2
 8013a84:	f7fc fa0f 	bl	800fea6 <USBD_LL_SetupStage>
}
 8013a88:	bf00      	nop
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	460b      	mov	r3, r1
 8013a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013aa2:	78fa      	ldrb	r2, [r7, #3]
 8013aa4:	6879      	ldr	r1, [r7, #4]
 8013aa6:	4613      	mov	r3, r2
 8013aa8:	00db      	lsls	r3, r3, #3
 8013aaa:	4413      	add	r3, r2
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	440b      	add	r3, r1
 8013ab0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013ab4:	681a      	ldr	r2, [r3, #0]
 8013ab6:	78fb      	ldrb	r3, [r7, #3]
 8013ab8:	4619      	mov	r1, r3
 8013aba:	f7fc fa49 	bl	800ff50 <USBD_LL_DataOutStage>
}
 8013abe:	bf00      	nop
 8013ac0:	3708      	adds	r7, #8
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}

08013ac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ac6:	b580      	push	{r7, lr}
 8013ac8:	b082      	sub	sp, #8
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
 8013ace:	460b      	mov	r3, r1
 8013ad0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013ad8:	78fa      	ldrb	r2, [r7, #3]
 8013ada:	6879      	ldr	r1, [r7, #4]
 8013adc:	4613      	mov	r3, r2
 8013ade:	00db      	lsls	r3, r3, #3
 8013ae0:	4413      	add	r3, r2
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	440b      	add	r3, r1
 8013ae6:	334c      	adds	r3, #76	; 0x4c
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	78fb      	ldrb	r3, [r7, #3]
 8013aec:	4619      	mov	r1, r3
 8013aee:	f7fc fae2 	bl	80100b6 <USBD_LL_DataInStage>
}
 8013af2:	bf00      	nop
 8013af4:	3708      	adds	r7, #8
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}

08013afa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b082      	sub	sp, #8
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fc fc16 	bl	801033a <USBD_LL_SOF>
}
 8013b0e:	bf00      	nop
 8013b10:	3708      	adds	r7, #8
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b084      	sub	sp, #16
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013b1e:	2301      	movs	r3, #1
 8013b20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	68db      	ldr	r3, [r3, #12]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d102      	bne.n	8013b30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	73fb      	strb	r3, [r7, #15]
 8013b2e:	e008      	b.n	8013b42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	68db      	ldr	r3, [r3, #12]
 8013b34:	2b02      	cmp	r3, #2
 8013b36:	d102      	bne.n	8013b3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	73fb      	strb	r3, [r7, #15]
 8013b3c:	e001      	b.n	8013b42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013b3e:	f7f0 ff33 	bl	80049a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b48:	7bfa      	ldrb	r2, [r7, #15]
 8013b4a:	4611      	mov	r1, r2
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fc fbb6 	bl	80102be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7fc fb5e 	bl	801021a <USBD_LL_Reset>
}
 8013b5e:	bf00      	nop
 8013b60:	3710      	adds	r7, #16
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}
	...

08013b68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7fc fbb1 	bl	80102de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	6812      	ldr	r2, [r2, #0]
 8013b8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013b8e:	f043 0301 	orr.w	r3, r3, #1
 8013b92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6a1b      	ldr	r3, [r3, #32]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d005      	beq.n	8013ba8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013b9c:	4b04      	ldr	r3, [pc, #16]	; (8013bb0 <HAL_PCD_SuspendCallback+0x48>)
 8013b9e:	691b      	ldr	r3, [r3, #16]
 8013ba0:	4a03      	ldr	r2, [pc, #12]	; (8013bb0 <HAL_PCD_SuspendCallback+0x48>)
 8013ba2:	f043 0306 	orr.w	r3, r3, #6
 8013ba6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013ba8:	bf00      	nop
 8013baa:	3708      	adds	r7, #8
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}
 8013bb0:	e000ed00 	.word	0xe000ed00

08013bb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fc fba1 	bl	801030a <USBD_LL_Resume>
}
 8013bc8:	bf00      	nop
 8013bca:	3708      	adds	r7, #8
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	460b      	mov	r3, r1
 8013bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013be2:	78fa      	ldrb	r2, [r7, #3]
 8013be4:	4611      	mov	r1, r2
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fc fbf9 	bl	80103de <USBD_LL_IsoOUTIncomplete>
}
 8013bec:	bf00      	nop
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c06:	78fa      	ldrb	r2, [r7, #3]
 8013c08:	4611      	mov	r1, r2
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fc fbb5 	bl	801037a <USBD_LL_IsoINIncomplete>
}
 8013c10:	bf00      	nop
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7fc fc0b 	bl	8010442 <USBD_LL_DevConnected>
}
 8013c2c:	bf00      	nop
 8013c2e:	3708      	adds	r7, #8
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}

08013c34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b082      	sub	sp, #8
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fc fc08 	bl	8010458 <USBD_LL_DevDisconnected>
}
 8013c48:	bf00      	nop
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b082      	sub	sp, #8
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d13c      	bne.n	8013cda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013c60:	4a20      	ldr	r2, [pc, #128]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	4a1e      	ldr	r2, [pc, #120]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013c70:	4b1c      	ldr	r3, [pc, #112]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013c76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013c78:	4b1a      	ldr	r3, [pc, #104]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c7a:	2204      	movs	r2, #4
 8013c7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013c7e:	4b19      	ldr	r3, [pc, #100]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c80:	2202      	movs	r2, #2
 8013c82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013c84:	4b17      	ldr	r3, [pc, #92]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c86:	2200      	movs	r2, #0
 8013c88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013c8a:	4b16      	ldr	r3, [pc, #88]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c8c:	2202      	movs	r2, #2
 8013c8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013c90:	4b14      	ldr	r3, [pc, #80]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013c96:	4b13      	ldr	r3, [pc, #76]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013c9c:	4b11      	ldr	r3, [pc, #68]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013ca2:	4b10      	ldr	r3, [pc, #64]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013ca8:	4b0e      	ldr	r3, [pc, #56]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013caa:	2200      	movs	r2, #0
 8013cac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013cae:	480d      	ldr	r0, [pc, #52]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013cb0:	f7f5 fc60 	bl	8009574 <HAL_PCD_Init>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d001      	beq.n	8013cbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013cba:	f7f0 fe75 	bl	80049a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013cbe:	2180      	movs	r1, #128	; 0x80
 8013cc0:	4808      	ldr	r0, [pc, #32]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013cc2:	f7f6 fea0 	bl	800aa06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013cc6:	2240      	movs	r2, #64	; 0x40
 8013cc8:	2100      	movs	r1, #0
 8013cca:	4806      	ldr	r0, [pc, #24]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013ccc:	f7f6 fe54 	bl	800a978 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013cd0:	2280      	movs	r2, #128	; 0x80
 8013cd2:	2101      	movs	r1, #1
 8013cd4:	4803      	ldr	r0, [pc, #12]	; (8013ce4 <USBD_LL_Init+0x94>)
 8013cd6:	f7f6 fe4f 	bl	800a978 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013cda:	2300      	movs	r3, #0
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3708      	adds	r7, #8
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}
 8013ce4:	200055b4 	.word	0x200055b4

08013ce8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7f5 fd55 	bl	80097ae <HAL_PCD_Start>
 8013d04:	4603      	mov	r3, r0
 8013d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d08:	7bfb      	ldrb	r3, [r7, #15]
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f000 f930 	bl	8013f70 <USBD_Get_USB_Status>
 8013d10:	4603      	mov	r3, r0
 8013d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3710      	adds	r7, #16
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}

08013d1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013d1e:	b580      	push	{r7, lr}
 8013d20:	b084      	sub	sp, #16
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	6078      	str	r0, [r7, #4]
 8013d26:	4608      	mov	r0, r1
 8013d28:	4611      	mov	r1, r2
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	70fb      	strb	r3, [r7, #3]
 8013d30:	460b      	mov	r3, r1
 8013d32:	70bb      	strb	r3, [r7, #2]
 8013d34:	4613      	mov	r3, r2
 8013d36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013d46:	78bb      	ldrb	r3, [r7, #2]
 8013d48:	883a      	ldrh	r2, [r7, #0]
 8013d4a:	78f9      	ldrb	r1, [r7, #3]
 8013d4c:	f7f6 fa26 	bl	800a19c <HAL_PCD_EP_Open>
 8013d50:	4603      	mov	r3, r0
 8013d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d54:	7bfb      	ldrb	r3, [r7, #15]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f000 f90a 	bl	8013f70 <USBD_Get_USB_Status>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3710      	adds	r7, #16
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b084      	sub	sp, #16
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
 8013d72:	460b      	mov	r3, r1
 8013d74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d76:	2300      	movs	r3, #0
 8013d78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013d84:	78fa      	ldrb	r2, [r7, #3]
 8013d86:	4611      	mov	r1, r2
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7f6 fa6f 	bl	800a26c <HAL_PCD_EP_Close>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d92:	7bfb      	ldrb	r3, [r7, #15]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f000 f8eb 	bl	8013f70 <USBD_Get_USB_Status>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3710      	adds	r7, #16
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b084      	sub	sp, #16
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	460b      	mov	r3, r1
 8013db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013db4:	2300      	movs	r3, #0
 8013db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013db8:	2300      	movs	r3, #0
 8013dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013dc2:	78fa      	ldrb	r2, [r7, #3]
 8013dc4:	4611      	mov	r1, r2
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7f6 fb2f 	bl	800a42a <HAL_PCD_EP_SetStall>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dd0:	7bfb      	ldrb	r3, [r7, #15]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f000 f8cc 	bl	8013f70 <USBD_Get_USB_Status>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ddc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}

08013de6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013de6:	b580      	push	{r7, lr}
 8013de8:	b084      	sub	sp, #16
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
 8013dee:	460b      	mov	r3, r1
 8013df0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013df2:	2300      	movs	r3, #0
 8013df4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013df6:	2300      	movs	r3, #0
 8013df8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e00:	78fa      	ldrb	r2, [r7, #3]
 8013e02:	4611      	mov	r1, r2
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f6 fb74 	bl	800a4f2 <HAL_PCD_EP_ClrStall>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e0e:	7bfb      	ldrb	r3, [r7, #15]
 8013e10:	4618      	mov	r0, r3
 8013e12:	f000 f8ad 	bl	8013f70 <USBD_Get_USB_Status>
 8013e16:	4603      	mov	r3, r0
 8013e18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e24:	b480      	push	{r7}
 8013e26:	b085      	sub	sp, #20
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	da0b      	bge.n	8013e58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013e40:	78fb      	ldrb	r3, [r7, #3]
 8013e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e46:	68f9      	ldr	r1, [r7, #12]
 8013e48:	4613      	mov	r3, r2
 8013e4a:	00db      	lsls	r3, r3, #3
 8013e4c:	4413      	add	r3, r2
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	440b      	add	r3, r1
 8013e52:	333e      	adds	r3, #62	; 0x3e
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	e00b      	b.n	8013e70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013e58:	78fb      	ldrb	r3, [r7, #3]
 8013e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e5e:	68f9      	ldr	r1, [r7, #12]
 8013e60:	4613      	mov	r3, r2
 8013e62:	00db      	lsls	r3, r3, #3
 8013e64:	4413      	add	r3, r2
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	440b      	add	r3, r1
 8013e6a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013e6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3714      	adds	r7, #20
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr

08013e7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	460b      	mov	r3, r1
 8013e86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e96:	78fa      	ldrb	r2, [r7, #3]
 8013e98:	4611      	mov	r1, r2
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7f6 f959 	bl	800a152 <HAL_PCD_SetAddress>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ea4:	7bfb      	ldrb	r3, [r7, #15]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f000 f862 	bl	8013f70 <USBD_Get_USB_Status>
 8013eac:	4603      	mov	r3, r0
 8013eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}

08013eba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013eba:	b580      	push	{r7, lr}
 8013ebc:	b086      	sub	sp, #24
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	60f8      	str	r0, [r7, #12]
 8013ec2:	607a      	str	r2, [r7, #4]
 8013ec4:	603b      	str	r3, [r7, #0]
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013ed8:	7af9      	ldrb	r1, [r7, #11]
 8013eda:	683b      	ldr	r3, [r7, #0]
 8013edc:	687a      	ldr	r2, [r7, #4]
 8013ede:	f7f6 fa5a 	bl	800a396 <HAL_PCD_EP_Transmit>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ee6:	7dfb      	ldrb	r3, [r7, #23]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f000 f841 	bl	8013f70 <USBD_Get_USB_Status>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013ef2:	7dbb      	ldrb	r3, [r7, #22]
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3718      	adds	r7, #24
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b086      	sub	sp, #24
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	607a      	str	r2, [r7, #4]
 8013f06:	603b      	str	r3, [r7, #0]
 8013f08:	460b      	mov	r3, r1
 8013f0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f10:	2300      	movs	r3, #0
 8013f12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013f1a:	7af9      	ldrb	r1, [r7, #11]
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	f7f6 f9ee 	bl	800a300 <HAL_PCD_EP_Receive>
 8013f24:	4603      	mov	r3, r0
 8013f26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f28:	7dfb      	ldrb	r3, [r7, #23]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f000 f820 	bl	8013f70 <USBD_Get_USB_Status>
 8013f30:	4603      	mov	r3, r0
 8013f32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f34:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3718      	adds	r7, #24
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
	...

08013f40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b083      	sub	sp, #12
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8013f48:	4b03      	ldr	r3, [pc, #12]	; (8013f58 <USBD_static_malloc+0x18>)
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	370c      	adds	r7, #12
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f54:	4770      	bx	lr
 8013f56:	bf00      	nop
 8013f58:	20005ac0 	.word	0x20005ac0

08013f5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013f5c:	b480      	push	{r7}
 8013f5e:	b083      	sub	sp, #12
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]

}
 8013f64:	bf00      	nop
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013f70:	b480      	push	{r7}
 8013f72:	b085      	sub	sp, #20
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	4603      	mov	r3, r0
 8013f78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013f7e:	79fb      	ldrb	r3, [r7, #7]
 8013f80:	2b03      	cmp	r3, #3
 8013f82:	d817      	bhi.n	8013fb4 <USBD_Get_USB_Status+0x44>
 8013f84:	a201      	add	r2, pc, #4	; (adr r2, 8013f8c <USBD_Get_USB_Status+0x1c>)
 8013f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f8a:	bf00      	nop
 8013f8c:	08013f9d 	.word	0x08013f9d
 8013f90:	08013fa3 	.word	0x08013fa3
 8013f94:	08013fa9 	.word	0x08013fa9
 8013f98:	08013faf 	.word	0x08013faf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8013fa0:	e00b      	b.n	8013fba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013fa2:	2303      	movs	r3, #3
 8013fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8013fa6:	e008      	b.n	8013fba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	73fb      	strb	r3, [r7, #15]
    break;
 8013fac:	e005      	b.n	8013fba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013fae:	2303      	movs	r3, #3
 8013fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8013fb2:	e002      	b.n	8013fba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013fb4:	2303      	movs	r3, #3
 8013fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8013fb8:	bf00      	nop
  }
  return usb_status;
 8013fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	3714      	adds	r7, #20
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr

08013fc8 <__errno>:
 8013fc8:	4b01      	ldr	r3, [pc, #4]	; (8013fd0 <__errno+0x8>)
 8013fca:	6818      	ldr	r0, [r3, #0]
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop
 8013fd0:	20000124 	.word	0x20000124

08013fd4 <std>:
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	b510      	push	{r4, lr}
 8013fd8:	4604      	mov	r4, r0
 8013fda:	e9c0 3300 	strd	r3, r3, [r0]
 8013fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013fe2:	6083      	str	r3, [r0, #8]
 8013fe4:	8181      	strh	r1, [r0, #12]
 8013fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8013fe8:	81c2      	strh	r2, [r0, #14]
 8013fea:	6183      	str	r3, [r0, #24]
 8013fec:	4619      	mov	r1, r3
 8013fee:	2208      	movs	r2, #8
 8013ff0:	305c      	adds	r0, #92	; 0x5c
 8013ff2:	f000 f934 	bl	801425e <memset>
 8013ff6:	4b05      	ldr	r3, [pc, #20]	; (801400c <std+0x38>)
 8013ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8013ffa:	4b05      	ldr	r3, [pc, #20]	; (8014010 <std+0x3c>)
 8013ffc:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ffe:	4b05      	ldr	r3, [pc, #20]	; (8014014 <std+0x40>)
 8014000:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014002:	4b05      	ldr	r3, [pc, #20]	; (8014018 <std+0x44>)
 8014004:	6224      	str	r4, [r4, #32]
 8014006:	6323      	str	r3, [r4, #48]	; 0x30
 8014008:	bd10      	pop	{r4, pc}
 801400a:	bf00      	nop
 801400c:	08014da1 	.word	0x08014da1
 8014010:	08014dc3 	.word	0x08014dc3
 8014014:	08014dfb 	.word	0x08014dfb
 8014018:	08014e1f 	.word	0x08014e1f

0801401c <_cleanup_r>:
 801401c:	4901      	ldr	r1, [pc, #4]	; (8014024 <_cleanup_r+0x8>)
 801401e:	f000 b8af 	b.w	8014180 <_fwalk_reent>
 8014022:	bf00      	nop
 8014024:	08015c89 	.word	0x08015c89

08014028 <__sfmoreglue>:
 8014028:	b570      	push	{r4, r5, r6, lr}
 801402a:	2268      	movs	r2, #104	; 0x68
 801402c:	1e4d      	subs	r5, r1, #1
 801402e:	4355      	muls	r5, r2
 8014030:	460e      	mov	r6, r1
 8014032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014036:	f000 f93b 	bl	80142b0 <_malloc_r>
 801403a:	4604      	mov	r4, r0
 801403c:	b140      	cbz	r0, 8014050 <__sfmoreglue+0x28>
 801403e:	2100      	movs	r1, #0
 8014040:	e9c0 1600 	strd	r1, r6, [r0]
 8014044:	300c      	adds	r0, #12
 8014046:	60a0      	str	r0, [r4, #8]
 8014048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801404c:	f000 f907 	bl	801425e <memset>
 8014050:	4620      	mov	r0, r4
 8014052:	bd70      	pop	{r4, r5, r6, pc}

08014054 <__sfp_lock_acquire>:
 8014054:	4801      	ldr	r0, [pc, #4]	; (801405c <__sfp_lock_acquire+0x8>)
 8014056:	f000 b8d8 	b.w	801420a <__retarget_lock_acquire_recursive>
 801405a:	bf00      	nop
 801405c:	20005add 	.word	0x20005add

08014060 <__sfp_lock_release>:
 8014060:	4801      	ldr	r0, [pc, #4]	; (8014068 <__sfp_lock_release+0x8>)
 8014062:	f000 b8d3 	b.w	801420c <__retarget_lock_release_recursive>
 8014066:	bf00      	nop
 8014068:	20005add 	.word	0x20005add

0801406c <__sinit_lock_acquire>:
 801406c:	4801      	ldr	r0, [pc, #4]	; (8014074 <__sinit_lock_acquire+0x8>)
 801406e:	f000 b8cc 	b.w	801420a <__retarget_lock_acquire_recursive>
 8014072:	bf00      	nop
 8014074:	20005ade 	.word	0x20005ade

08014078 <__sinit_lock_release>:
 8014078:	4801      	ldr	r0, [pc, #4]	; (8014080 <__sinit_lock_release+0x8>)
 801407a:	f000 b8c7 	b.w	801420c <__retarget_lock_release_recursive>
 801407e:	bf00      	nop
 8014080:	20005ade 	.word	0x20005ade

08014084 <__sinit>:
 8014084:	b510      	push	{r4, lr}
 8014086:	4604      	mov	r4, r0
 8014088:	f7ff fff0 	bl	801406c <__sinit_lock_acquire>
 801408c:	69a3      	ldr	r3, [r4, #24]
 801408e:	b11b      	cbz	r3, 8014098 <__sinit+0x14>
 8014090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014094:	f7ff bff0 	b.w	8014078 <__sinit_lock_release>
 8014098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801409c:	6523      	str	r3, [r4, #80]	; 0x50
 801409e:	4b13      	ldr	r3, [pc, #76]	; (80140ec <__sinit+0x68>)
 80140a0:	4a13      	ldr	r2, [pc, #76]	; (80140f0 <__sinit+0x6c>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80140a6:	42a3      	cmp	r3, r4
 80140a8:	bf04      	itt	eq
 80140aa:	2301      	moveq	r3, #1
 80140ac:	61a3      	streq	r3, [r4, #24]
 80140ae:	4620      	mov	r0, r4
 80140b0:	f000 f820 	bl	80140f4 <__sfp>
 80140b4:	6060      	str	r0, [r4, #4]
 80140b6:	4620      	mov	r0, r4
 80140b8:	f000 f81c 	bl	80140f4 <__sfp>
 80140bc:	60a0      	str	r0, [r4, #8]
 80140be:	4620      	mov	r0, r4
 80140c0:	f000 f818 	bl	80140f4 <__sfp>
 80140c4:	2200      	movs	r2, #0
 80140c6:	60e0      	str	r0, [r4, #12]
 80140c8:	2104      	movs	r1, #4
 80140ca:	6860      	ldr	r0, [r4, #4]
 80140cc:	f7ff ff82 	bl	8013fd4 <std>
 80140d0:	68a0      	ldr	r0, [r4, #8]
 80140d2:	2201      	movs	r2, #1
 80140d4:	2109      	movs	r1, #9
 80140d6:	f7ff ff7d 	bl	8013fd4 <std>
 80140da:	68e0      	ldr	r0, [r4, #12]
 80140dc:	2202      	movs	r2, #2
 80140de:	2112      	movs	r1, #18
 80140e0:	f7ff ff78 	bl	8013fd4 <std>
 80140e4:	2301      	movs	r3, #1
 80140e6:	61a3      	str	r3, [r4, #24]
 80140e8:	e7d2      	b.n	8014090 <__sinit+0xc>
 80140ea:	bf00      	nop
 80140ec:	080179f0 	.word	0x080179f0
 80140f0:	0801401d 	.word	0x0801401d

080140f4 <__sfp>:
 80140f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140f6:	4607      	mov	r7, r0
 80140f8:	f7ff ffac 	bl	8014054 <__sfp_lock_acquire>
 80140fc:	4b1e      	ldr	r3, [pc, #120]	; (8014178 <__sfp+0x84>)
 80140fe:	681e      	ldr	r6, [r3, #0]
 8014100:	69b3      	ldr	r3, [r6, #24]
 8014102:	b913      	cbnz	r3, 801410a <__sfp+0x16>
 8014104:	4630      	mov	r0, r6
 8014106:	f7ff ffbd 	bl	8014084 <__sinit>
 801410a:	3648      	adds	r6, #72	; 0x48
 801410c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014110:	3b01      	subs	r3, #1
 8014112:	d503      	bpl.n	801411c <__sfp+0x28>
 8014114:	6833      	ldr	r3, [r6, #0]
 8014116:	b30b      	cbz	r3, 801415c <__sfp+0x68>
 8014118:	6836      	ldr	r6, [r6, #0]
 801411a:	e7f7      	b.n	801410c <__sfp+0x18>
 801411c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014120:	b9d5      	cbnz	r5, 8014158 <__sfp+0x64>
 8014122:	4b16      	ldr	r3, [pc, #88]	; (801417c <__sfp+0x88>)
 8014124:	60e3      	str	r3, [r4, #12]
 8014126:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801412a:	6665      	str	r5, [r4, #100]	; 0x64
 801412c:	f000 f86c 	bl	8014208 <__retarget_lock_init_recursive>
 8014130:	f7ff ff96 	bl	8014060 <__sfp_lock_release>
 8014134:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014138:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801413c:	6025      	str	r5, [r4, #0]
 801413e:	61a5      	str	r5, [r4, #24]
 8014140:	2208      	movs	r2, #8
 8014142:	4629      	mov	r1, r5
 8014144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014148:	f000 f889 	bl	801425e <memset>
 801414c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014154:	4620      	mov	r0, r4
 8014156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014158:	3468      	adds	r4, #104	; 0x68
 801415a:	e7d9      	b.n	8014110 <__sfp+0x1c>
 801415c:	2104      	movs	r1, #4
 801415e:	4638      	mov	r0, r7
 8014160:	f7ff ff62 	bl	8014028 <__sfmoreglue>
 8014164:	4604      	mov	r4, r0
 8014166:	6030      	str	r0, [r6, #0]
 8014168:	2800      	cmp	r0, #0
 801416a:	d1d5      	bne.n	8014118 <__sfp+0x24>
 801416c:	f7ff ff78 	bl	8014060 <__sfp_lock_release>
 8014170:	230c      	movs	r3, #12
 8014172:	603b      	str	r3, [r7, #0]
 8014174:	e7ee      	b.n	8014154 <__sfp+0x60>
 8014176:	bf00      	nop
 8014178:	080179f0 	.word	0x080179f0
 801417c:	ffff0001 	.word	0xffff0001

08014180 <_fwalk_reent>:
 8014180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014184:	4606      	mov	r6, r0
 8014186:	4688      	mov	r8, r1
 8014188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801418c:	2700      	movs	r7, #0
 801418e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014192:	f1b9 0901 	subs.w	r9, r9, #1
 8014196:	d505      	bpl.n	80141a4 <_fwalk_reent+0x24>
 8014198:	6824      	ldr	r4, [r4, #0]
 801419a:	2c00      	cmp	r4, #0
 801419c:	d1f7      	bne.n	801418e <_fwalk_reent+0xe>
 801419e:	4638      	mov	r0, r7
 80141a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141a4:	89ab      	ldrh	r3, [r5, #12]
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d907      	bls.n	80141ba <_fwalk_reent+0x3a>
 80141aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80141ae:	3301      	adds	r3, #1
 80141b0:	d003      	beq.n	80141ba <_fwalk_reent+0x3a>
 80141b2:	4629      	mov	r1, r5
 80141b4:	4630      	mov	r0, r6
 80141b6:	47c0      	blx	r8
 80141b8:	4307      	orrs	r7, r0
 80141ba:	3568      	adds	r5, #104	; 0x68
 80141bc:	e7e9      	b.n	8014192 <_fwalk_reent+0x12>
	...

080141c0 <__libc_init_array>:
 80141c0:	b570      	push	{r4, r5, r6, lr}
 80141c2:	4d0d      	ldr	r5, [pc, #52]	; (80141f8 <__libc_init_array+0x38>)
 80141c4:	4c0d      	ldr	r4, [pc, #52]	; (80141fc <__libc_init_array+0x3c>)
 80141c6:	1b64      	subs	r4, r4, r5
 80141c8:	10a4      	asrs	r4, r4, #2
 80141ca:	2600      	movs	r6, #0
 80141cc:	42a6      	cmp	r6, r4
 80141ce:	d109      	bne.n	80141e4 <__libc_init_array+0x24>
 80141d0:	4d0b      	ldr	r5, [pc, #44]	; (8014200 <__libc_init_array+0x40>)
 80141d2:	4c0c      	ldr	r4, [pc, #48]	; (8014204 <__libc_init_array+0x44>)
 80141d4:	f002 feca 	bl	8016f6c <_init>
 80141d8:	1b64      	subs	r4, r4, r5
 80141da:	10a4      	asrs	r4, r4, #2
 80141dc:	2600      	movs	r6, #0
 80141de:	42a6      	cmp	r6, r4
 80141e0:	d105      	bne.n	80141ee <__libc_init_array+0x2e>
 80141e2:	bd70      	pop	{r4, r5, r6, pc}
 80141e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80141e8:	4798      	blx	r3
 80141ea:	3601      	adds	r6, #1
 80141ec:	e7ee      	b.n	80141cc <__libc_init_array+0xc>
 80141ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80141f2:	4798      	blx	r3
 80141f4:	3601      	adds	r6, #1
 80141f6:	e7f2      	b.n	80141de <__libc_init_array+0x1e>
 80141f8:	08017d74 	.word	0x08017d74
 80141fc:	08017d74 	.word	0x08017d74
 8014200:	08017d74 	.word	0x08017d74
 8014204:	08017d78 	.word	0x08017d78

08014208 <__retarget_lock_init_recursive>:
 8014208:	4770      	bx	lr

0801420a <__retarget_lock_acquire_recursive>:
 801420a:	4770      	bx	lr

0801420c <__retarget_lock_release_recursive>:
 801420c:	4770      	bx	lr

0801420e <memcpy>:
 801420e:	440a      	add	r2, r1
 8014210:	4291      	cmp	r1, r2
 8014212:	f100 33ff 	add.w	r3, r0, #4294967295
 8014216:	d100      	bne.n	801421a <memcpy+0xc>
 8014218:	4770      	bx	lr
 801421a:	b510      	push	{r4, lr}
 801421c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014224:	4291      	cmp	r1, r2
 8014226:	d1f9      	bne.n	801421c <memcpy+0xe>
 8014228:	bd10      	pop	{r4, pc}

0801422a <memmove>:
 801422a:	4288      	cmp	r0, r1
 801422c:	b510      	push	{r4, lr}
 801422e:	eb01 0402 	add.w	r4, r1, r2
 8014232:	d902      	bls.n	801423a <memmove+0x10>
 8014234:	4284      	cmp	r4, r0
 8014236:	4623      	mov	r3, r4
 8014238:	d807      	bhi.n	801424a <memmove+0x20>
 801423a:	1e43      	subs	r3, r0, #1
 801423c:	42a1      	cmp	r1, r4
 801423e:	d008      	beq.n	8014252 <memmove+0x28>
 8014240:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014244:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014248:	e7f8      	b.n	801423c <memmove+0x12>
 801424a:	4402      	add	r2, r0
 801424c:	4601      	mov	r1, r0
 801424e:	428a      	cmp	r2, r1
 8014250:	d100      	bne.n	8014254 <memmove+0x2a>
 8014252:	bd10      	pop	{r4, pc}
 8014254:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014258:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801425c:	e7f7      	b.n	801424e <memmove+0x24>

0801425e <memset>:
 801425e:	4402      	add	r2, r0
 8014260:	4603      	mov	r3, r0
 8014262:	4293      	cmp	r3, r2
 8014264:	d100      	bne.n	8014268 <memset+0xa>
 8014266:	4770      	bx	lr
 8014268:	f803 1b01 	strb.w	r1, [r3], #1
 801426c:	e7f9      	b.n	8014262 <memset+0x4>
	...

08014270 <sbrk_aligned>:
 8014270:	b570      	push	{r4, r5, r6, lr}
 8014272:	4e0e      	ldr	r6, [pc, #56]	; (80142ac <sbrk_aligned+0x3c>)
 8014274:	460c      	mov	r4, r1
 8014276:	6831      	ldr	r1, [r6, #0]
 8014278:	4605      	mov	r5, r0
 801427a:	b911      	cbnz	r1, 8014282 <sbrk_aligned+0x12>
 801427c:	f000 fd60 	bl	8014d40 <_sbrk_r>
 8014280:	6030      	str	r0, [r6, #0]
 8014282:	4621      	mov	r1, r4
 8014284:	4628      	mov	r0, r5
 8014286:	f000 fd5b 	bl	8014d40 <_sbrk_r>
 801428a:	1c43      	adds	r3, r0, #1
 801428c:	d00a      	beq.n	80142a4 <sbrk_aligned+0x34>
 801428e:	1cc4      	adds	r4, r0, #3
 8014290:	f024 0403 	bic.w	r4, r4, #3
 8014294:	42a0      	cmp	r0, r4
 8014296:	d007      	beq.n	80142a8 <sbrk_aligned+0x38>
 8014298:	1a21      	subs	r1, r4, r0
 801429a:	4628      	mov	r0, r5
 801429c:	f000 fd50 	bl	8014d40 <_sbrk_r>
 80142a0:	3001      	adds	r0, #1
 80142a2:	d101      	bne.n	80142a8 <sbrk_aligned+0x38>
 80142a4:	f04f 34ff 	mov.w	r4, #4294967295
 80142a8:	4620      	mov	r0, r4
 80142aa:	bd70      	pop	{r4, r5, r6, pc}
 80142ac:	20005ae4 	.word	0x20005ae4

080142b0 <_malloc_r>:
 80142b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142b4:	1ccd      	adds	r5, r1, #3
 80142b6:	f025 0503 	bic.w	r5, r5, #3
 80142ba:	3508      	adds	r5, #8
 80142bc:	2d0c      	cmp	r5, #12
 80142be:	bf38      	it	cc
 80142c0:	250c      	movcc	r5, #12
 80142c2:	2d00      	cmp	r5, #0
 80142c4:	4607      	mov	r7, r0
 80142c6:	db01      	blt.n	80142cc <_malloc_r+0x1c>
 80142c8:	42a9      	cmp	r1, r5
 80142ca:	d905      	bls.n	80142d8 <_malloc_r+0x28>
 80142cc:	230c      	movs	r3, #12
 80142ce:	603b      	str	r3, [r7, #0]
 80142d0:	2600      	movs	r6, #0
 80142d2:	4630      	mov	r0, r6
 80142d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d8:	4e2e      	ldr	r6, [pc, #184]	; (8014394 <_malloc_r+0xe4>)
 80142da:	f001 fd2f 	bl	8015d3c <__malloc_lock>
 80142de:	6833      	ldr	r3, [r6, #0]
 80142e0:	461c      	mov	r4, r3
 80142e2:	bb34      	cbnz	r4, 8014332 <_malloc_r+0x82>
 80142e4:	4629      	mov	r1, r5
 80142e6:	4638      	mov	r0, r7
 80142e8:	f7ff ffc2 	bl	8014270 <sbrk_aligned>
 80142ec:	1c43      	adds	r3, r0, #1
 80142ee:	4604      	mov	r4, r0
 80142f0:	d14d      	bne.n	801438e <_malloc_r+0xde>
 80142f2:	6834      	ldr	r4, [r6, #0]
 80142f4:	4626      	mov	r6, r4
 80142f6:	2e00      	cmp	r6, #0
 80142f8:	d140      	bne.n	801437c <_malloc_r+0xcc>
 80142fa:	6823      	ldr	r3, [r4, #0]
 80142fc:	4631      	mov	r1, r6
 80142fe:	4638      	mov	r0, r7
 8014300:	eb04 0803 	add.w	r8, r4, r3
 8014304:	f000 fd1c 	bl	8014d40 <_sbrk_r>
 8014308:	4580      	cmp	r8, r0
 801430a:	d13a      	bne.n	8014382 <_malloc_r+0xd2>
 801430c:	6821      	ldr	r1, [r4, #0]
 801430e:	3503      	adds	r5, #3
 8014310:	1a6d      	subs	r5, r5, r1
 8014312:	f025 0503 	bic.w	r5, r5, #3
 8014316:	3508      	adds	r5, #8
 8014318:	2d0c      	cmp	r5, #12
 801431a:	bf38      	it	cc
 801431c:	250c      	movcc	r5, #12
 801431e:	4629      	mov	r1, r5
 8014320:	4638      	mov	r0, r7
 8014322:	f7ff ffa5 	bl	8014270 <sbrk_aligned>
 8014326:	3001      	adds	r0, #1
 8014328:	d02b      	beq.n	8014382 <_malloc_r+0xd2>
 801432a:	6823      	ldr	r3, [r4, #0]
 801432c:	442b      	add	r3, r5
 801432e:	6023      	str	r3, [r4, #0]
 8014330:	e00e      	b.n	8014350 <_malloc_r+0xa0>
 8014332:	6822      	ldr	r2, [r4, #0]
 8014334:	1b52      	subs	r2, r2, r5
 8014336:	d41e      	bmi.n	8014376 <_malloc_r+0xc6>
 8014338:	2a0b      	cmp	r2, #11
 801433a:	d916      	bls.n	801436a <_malloc_r+0xba>
 801433c:	1961      	adds	r1, r4, r5
 801433e:	42a3      	cmp	r3, r4
 8014340:	6025      	str	r5, [r4, #0]
 8014342:	bf18      	it	ne
 8014344:	6059      	strne	r1, [r3, #4]
 8014346:	6863      	ldr	r3, [r4, #4]
 8014348:	bf08      	it	eq
 801434a:	6031      	streq	r1, [r6, #0]
 801434c:	5162      	str	r2, [r4, r5]
 801434e:	604b      	str	r3, [r1, #4]
 8014350:	4638      	mov	r0, r7
 8014352:	f104 060b 	add.w	r6, r4, #11
 8014356:	f001 fcf7 	bl	8015d48 <__malloc_unlock>
 801435a:	f026 0607 	bic.w	r6, r6, #7
 801435e:	1d23      	adds	r3, r4, #4
 8014360:	1af2      	subs	r2, r6, r3
 8014362:	d0b6      	beq.n	80142d2 <_malloc_r+0x22>
 8014364:	1b9b      	subs	r3, r3, r6
 8014366:	50a3      	str	r3, [r4, r2]
 8014368:	e7b3      	b.n	80142d2 <_malloc_r+0x22>
 801436a:	6862      	ldr	r2, [r4, #4]
 801436c:	42a3      	cmp	r3, r4
 801436e:	bf0c      	ite	eq
 8014370:	6032      	streq	r2, [r6, #0]
 8014372:	605a      	strne	r2, [r3, #4]
 8014374:	e7ec      	b.n	8014350 <_malloc_r+0xa0>
 8014376:	4623      	mov	r3, r4
 8014378:	6864      	ldr	r4, [r4, #4]
 801437a:	e7b2      	b.n	80142e2 <_malloc_r+0x32>
 801437c:	4634      	mov	r4, r6
 801437e:	6876      	ldr	r6, [r6, #4]
 8014380:	e7b9      	b.n	80142f6 <_malloc_r+0x46>
 8014382:	230c      	movs	r3, #12
 8014384:	603b      	str	r3, [r7, #0]
 8014386:	4638      	mov	r0, r7
 8014388:	f001 fcde 	bl	8015d48 <__malloc_unlock>
 801438c:	e7a1      	b.n	80142d2 <_malloc_r+0x22>
 801438e:	6025      	str	r5, [r4, #0]
 8014390:	e7de      	b.n	8014350 <_malloc_r+0xa0>
 8014392:	bf00      	nop
 8014394:	20005ae0 	.word	0x20005ae0

08014398 <__cvt>:
 8014398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801439c:	ec55 4b10 	vmov	r4, r5, d0
 80143a0:	2d00      	cmp	r5, #0
 80143a2:	460e      	mov	r6, r1
 80143a4:	4619      	mov	r1, r3
 80143a6:	462b      	mov	r3, r5
 80143a8:	bfbb      	ittet	lt
 80143aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80143ae:	461d      	movlt	r5, r3
 80143b0:	2300      	movge	r3, #0
 80143b2:	232d      	movlt	r3, #45	; 0x2d
 80143b4:	700b      	strb	r3, [r1, #0]
 80143b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80143b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80143bc:	4691      	mov	r9, r2
 80143be:	f023 0820 	bic.w	r8, r3, #32
 80143c2:	bfbc      	itt	lt
 80143c4:	4622      	movlt	r2, r4
 80143c6:	4614      	movlt	r4, r2
 80143c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80143cc:	d005      	beq.n	80143da <__cvt+0x42>
 80143ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80143d2:	d100      	bne.n	80143d6 <__cvt+0x3e>
 80143d4:	3601      	adds	r6, #1
 80143d6:	2102      	movs	r1, #2
 80143d8:	e000      	b.n	80143dc <__cvt+0x44>
 80143da:	2103      	movs	r1, #3
 80143dc:	ab03      	add	r3, sp, #12
 80143de:	9301      	str	r3, [sp, #4]
 80143e0:	ab02      	add	r3, sp, #8
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	ec45 4b10 	vmov	d0, r4, r5
 80143e8:	4653      	mov	r3, sl
 80143ea:	4632      	mov	r2, r6
 80143ec:	f000 fdd8 	bl	8014fa0 <_dtoa_r>
 80143f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80143f4:	4607      	mov	r7, r0
 80143f6:	d102      	bne.n	80143fe <__cvt+0x66>
 80143f8:	f019 0f01 	tst.w	r9, #1
 80143fc:	d022      	beq.n	8014444 <__cvt+0xac>
 80143fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014402:	eb07 0906 	add.w	r9, r7, r6
 8014406:	d110      	bne.n	801442a <__cvt+0x92>
 8014408:	783b      	ldrb	r3, [r7, #0]
 801440a:	2b30      	cmp	r3, #48	; 0x30
 801440c:	d10a      	bne.n	8014424 <__cvt+0x8c>
 801440e:	2200      	movs	r2, #0
 8014410:	2300      	movs	r3, #0
 8014412:	4620      	mov	r0, r4
 8014414:	4629      	mov	r1, r5
 8014416:	f7ec fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 801441a:	b918      	cbnz	r0, 8014424 <__cvt+0x8c>
 801441c:	f1c6 0601 	rsb	r6, r6, #1
 8014420:	f8ca 6000 	str.w	r6, [sl]
 8014424:	f8da 3000 	ldr.w	r3, [sl]
 8014428:	4499      	add	r9, r3
 801442a:	2200      	movs	r2, #0
 801442c:	2300      	movs	r3, #0
 801442e:	4620      	mov	r0, r4
 8014430:	4629      	mov	r1, r5
 8014432:	f7ec fb51 	bl	8000ad8 <__aeabi_dcmpeq>
 8014436:	b108      	cbz	r0, 801443c <__cvt+0xa4>
 8014438:	f8cd 900c 	str.w	r9, [sp, #12]
 801443c:	2230      	movs	r2, #48	; 0x30
 801443e:	9b03      	ldr	r3, [sp, #12]
 8014440:	454b      	cmp	r3, r9
 8014442:	d307      	bcc.n	8014454 <__cvt+0xbc>
 8014444:	9b03      	ldr	r3, [sp, #12]
 8014446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014448:	1bdb      	subs	r3, r3, r7
 801444a:	4638      	mov	r0, r7
 801444c:	6013      	str	r3, [r2, #0]
 801444e:	b004      	add	sp, #16
 8014450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014454:	1c59      	adds	r1, r3, #1
 8014456:	9103      	str	r1, [sp, #12]
 8014458:	701a      	strb	r2, [r3, #0]
 801445a:	e7f0      	b.n	801443e <__cvt+0xa6>

0801445c <__exponent>:
 801445c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801445e:	4603      	mov	r3, r0
 8014460:	2900      	cmp	r1, #0
 8014462:	bfb8      	it	lt
 8014464:	4249      	neglt	r1, r1
 8014466:	f803 2b02 	strb.w	r2, [r3], #2
 801446a:	bfb4      	ite	lt
 801446c:	222d      	movlt	r2, #45	; 0x2d
 801446e:	222b      	movge	r2, #43	; 0x2b
 8014470:	2909      	cmp	r1, #9
 8014472:	7042      	strb	r2, [r0, #1]
 8014474:	dd2a      	ble.n	80144cc <__exponent+0x70>
 8014476:	f10d 0407 	add.w	r4, sp, #7
 801447a:	46a4      	mov	ip, r4
 801447c:	270a      	movs	r7, #10
 801447e:	46a6      	mov	lr, r4
 8014480:	460a      	mov	r2, r1
 8014482:	fb91 f6f7 	sdiv	r6, r1, r7
 8014486:	fb07 1516 	mls	r5, r7, r6, r1
 801448a:	3530      	adds	r5, #48	; 0x30
 801448c:	2a63      	cmp	r2, #99	; 0x63
 801448e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014492:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014496:	4631      	mov	r1, r6
 8014498:	dcf1      	bgt.n	801447e <__exponent+0x22>
 801449a:	3130      	adds	r1, #48	; 0x30
 801449c:	f1ae 0502 	sub.w	r5, lr, #2
 80144a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80144a4:	1c44      	adds	r4, r0, #1
 80144a6:	4629      	mov	r1, r5
 80144a8:	4561      	cmp	r1, ip
 80144aa:	d30a      	bcc.n	80144c2 <__exponent+0x66>
 80144ac:	f10d 0209 	add.w	r2, sp, #9
 80144b0:	eba2 020e 	sub.w	r2, r2, lr
 80144b4:	4565      	cmp	r5, ip
 80144b6:	bf88      	it	hi
 80144b8:	2200      	movhi	r2, #0
 80144ba:	4413      	add	r3, r2
 80144bc:	1a18      	subs	r0, r3, r0
 80144be:	b003      	add	sp, #12
 80144c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80144c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80144ca:	e7ed      	b.n	80144a8 <__exponent+0x4c>
 80144cc:	2330      	movs	r3, #48	; 0x30
 80144ce:	3130      	adds	r1, #48	; 0x30
 80144d0:	7083      	strb	r3, [r0, #2]
 80144d2:	70c1      	strb	r1, [r0, #3]
 80144d4:	1d03      	adds	r3, r0, #4
 80144d6:	e7f1      	b.n	80144bc <__exponent+0x60>

080144d8 <_printf_float>:
 80144d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144dc:	ed2d 8b02 	vpush	{d8}
 80144e0:	b08d      	sub	sp, #52	; 0x34
 80144e2:	460c      	mov	r4, r1
 80144e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80144e8:	4616      	mov	r6, r2
 80144ea:	461f      	mov	r7, r3
 80144ec:	4605      	mov	r5, r0
 80144ee:	f001 fc07 	bl	8015d00 <_localeconv_r>
 80144f2:	f8d0 a000 	ldr.w	sl, [r0]
 80144f6:	4650      	mov	r0, sl
 80144f8:	f7eb fe72 	bl	80001e0 <strlen>
 80144fc:	2300      	movs	r3, #0
 80144fe:	930a      	str	r3, [sp, #40]	; 0x28
 8014500:	6823      	ldr	r3, [r4, #0]
 8014502:	9305      	str	r3, [sp, #20]
 8014504:	f8d8 3000 	ldr.w	r3, [r8]
 8014508:	f894 b018 	ldrb.w	fp, [r4, #24]
 801450c:	3307      	adds	r3, #7
 801450e:	f023 0307 	bic.w	r3, r3, #7
 8014512:	f103 0208 	add.w	r2, r3, #8
 8014516:	f8c8 2000 	str.w	r2, [r8]
 801451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801451e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014522:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801452a:	9307      	str	r3, [sp, #28]
 801452c:	f8cd 8018 	str.w	r8, [sp, #24]
 8014530:	ee08 0a10 	vmov	s16, r0
 8014534:	4b9f      	ldr	r3, [pc, #636]	; (80147b4 <_printf_float+0x2dc>)
 8014536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801453a:	f04f 32ff 	mov.w	r2, #4294967295
 801453e:	f7ec fafd 	bl	8000b3c <__aeabi_dcmpun>
 8014542:	bb88      	cbnz	r0, 80145a8 <_printf_float+0xd0>
 8014544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014548:	4b9a      	ldr	r3, [pc, #616]	; (80147b4 <_printf_float+0x2dc>)
 801454a:	f04f 32ff 	mov.w	r2, #4294967295
 801454e:	f7ec fad7 	bl	8000b00 <__aeabi_dcmple>
 8014552:	bb48      	cbnz	r0, 80145a8 <_printf_float+0xd0>
 8014554:	2200      	movs	r2, #0
 8014556:	2300      	movs	r3, #0
 8014558:	4640      	mov	r0, r8
 801455a:	4649      	mov	r1, r9
 801455c:	f7ec fac6 	bl	8000aec <__aeabi_dcmplt>
 8014560:	b110      	cbz	r0, 8014568 <_printf_float+0x90>
 8014562:	232d      	movs	r3, #45	; 0x2d
 8014564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014568:	4b93      	ldr	r3, [pc, #588]	; (80147b8 <_printf_float+0x2e0>)
 801456a:	4894      	ldr	r0, [pc, #592]	; (80147bc <_printf_float+0x2e4>)
 801456c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014570:	bf94      	ite	ls
 8014572:	4698      	movls	r8, r3
 8014574:	4680      	movhi	r8, r0
 8014576:	2303      	movs	r3, #3
 8014578:	6123      	str	r3, [r4, #16]
 801457a:	9b05      	ldr	r3, [sp, #20]
 801457c:	f023 0204 	bic.w	r2, r3, #4
 8014580:	6022      	str	r2, [r4, #0]
 8014582:	f04f 0900 	mov.w	r9, #0
 8014586:	9700      	str	r7, [sp, #0]
 8014588:	4633      	mov	r3, r6
 801458a:	aa0b      	add	r2, sp, #44	; 0x2c
 801458c:	4621      	mov	r1, r4
 801458e:	4628      	mov	r0, r5
 8014590:	f000 f9d8 	bl	8014944 <_printf_common>
 8014594:	3001      	adds	r0, #1
 8014596:	f040 8090 	bne.w	80146ba <_printf_float+0x1e2>
 801459a:	f04f 30ff 	mov.w	r0, #4294967295
 801459e:	b00d      	add	sp, #52	; 0x34
 80145a0:	ecbd 8b02 	vpop	{d8}
 80145a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a8:	4642      	mov	r2, r8
 80145aa:	464b      	mov	r3, r9
 80145ac:	4640      	mov	r0, r8
 80145ae:	4649      	mov	r1, r9
 80145b0:	f7ec fac4 	bl	8000b3c <__aeabi_dcmpun>
 80145b4:	b140      	cbz	r0, 80145c8 <_printf_float+0xf0>
 80145b6:	464b      	mov	r3, r9
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	bfbc      	itt	lt
 80145bc:	232d      	movlt	r3, #45	; 0x2d
 80145be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80145c2:	487f      	ldr	r0, [pc, #508]	; (80147c0 <_printf_float+0x2e8>)
 80145c4:	4b7f      	ldr	r3, [pc, #508]	; (80147c4 <_printf_float+0x2ec>)
 80145c6:	e7d1      	b.n	801456c <_printf_float+0x94>
 80145c8:	6863      	ldr	r3, [r4, #4]
 80145ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80145ce:	9206      	str	r2, [sp, #24]
 80145d0:	1c5a      	adds	r2, r3, #1
 80145d2:	d13f      	bne.n	8014654 <_printf_float+0x17c>
 80145d4:	2306      	movs	r3, #6
 80145d6:	6063      	str	r3, [r4, #4]
 80145d8:	9b05      	ldr	r3, [sp, #20]
 80145da:	6861      	ldr	r1, [r4, #4]
 80145dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80145e0:	2300      	movs	r3, #0
 80145e2:	9303      	str	r3, [sp, #12]
 80145e4:	ab0a      	add	r3, sp, #40	; 0x28
 80145e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80145ea:	ab09      	add	r3, sp, #36	; 0x24
 80145ec:	ec49 8b10 	vmov	d0, r8, r9
 80145f0:	9300      	str	r3, [sp, #0]
 80145f2:	6022      	str	r2, [r4, #0]
 80145f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80145f8:	4628      	mov	r0, r5
 80145fa:	f7ff fecd 	bl	8014398 <__cvt>
 80145fe:	9b06      	ldr	r3, [sp, #24]
 8014600:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014602:	2b47      	cmp	r3, #71	; 0x47
 8014604:	4680      	mov	r8, r0
 8014606:	d108      	bne.n	801461a <_printf_float+0x142>
 8014608:	1cc8      	adds	r0, r1, #3
 801460a:	db02      	blt.n	8014612 <_printf_float+0x13a>
 801460c:	6863      	ldr	r3, [r4, #4]
 801460e:	4299      	cmp	r1, r3
 8014610:	dd41      	ble.n	8014696 <_printf_float+0x1be>
 8014612:	f1ab 0b02 	sub.w	fp, fp, #2
 8014616:	fa5f fb8b 	uxtb.w	fp, fp
 801461a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801461e:	d820      	bhi.n	8014662 <_printf_float+0x18a>
 8014620:	3901      	subs	r1, #1
 8014622:	465a      	mov	r2, fp
 8014624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014628:	9109      	str	r1, [sp, #36]	; 0x24
 801462a:	f7ff ff17 	bl	801445c <__exponent>
 801462e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014630:	1813      	adds	r3, r2, r0
 8014632:	2a01      	cmp	r2, #1
 8014634:	4681      	mov	r9, r0
 8014636:	6123      	str	r3, [r4, #16]
 8014638:	dc02      	bgt.n	8014640 <_printf_float+0x168>
 801463a:	6822      	ldr	r2, [r4, #0]
 801463c:	07d2      	lsls	r2, r2, #31
 801463e:	d501      	bpl.n	8014644 <_printf_float+0x16c>
 8014640:	3301      	adds	r3, #1
 8014642:	6123      	str	r3, [r4, #16]
 8014644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014648:	2b00      	cmp	r3, #0
 801464a:	d09c      	beq.n	8014586 <_printf_float+0xae>
 801464c:	232d      	movs	r3, #45	; 0x2d
 801464e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014652:	e798      	b.n	8014586 <_printf_float+0xae>
 8014654:	9a06      	ldr	r2, [sp, #24]
 8014656:	2a47      	cmp	r2, #71	; 0x47
 8014658:	d1be      	bne.n	80145d8 <_printf_float+0x100>
 801465a:	2b00      	cmp	r3, #0
 801465c:	d1bc      	bne.n	80145d8 <_printf_float+0x100>
 801465e:	2301      	movs	r3, #1
 8014660:	e7b9      	b.n	80145d6 <_printf_float+0xfe>
 8014662:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014666:	d118      	bne.n	801469a <_printf_float+0x1c2>
 8014668:	2900      	cmp	r1, #0
 801466a:	6863      	ldr	r3, [r4, #4]
 801466c:	dd0b      	ble.n	8014686 <_printf_float+0x1ae>
 801466e:	6121      	str	r1, [r4, #16]
 8014670:	b913      	cbnz	r3, 8014678 <_printf_float+0x1a0>
 8014672:	6822      	ldr	r2, [r4, #0]
 8014674:	07d0      	lsls	r0, r2, #31
 8014676:	d502      	bpl.n	801467e <_printf_float+0x1a6>
 8014678:	3301      	adds	r3, #1
 801467a:	440b      	add	r3, r1
 801467c:	6123      	str	r3, [r4, #16]
 801467e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014680:	f04f 0900 	mov.w	r9, #0
 8014684:	e7de      	b.n	8014644 <_printf_float+0x16c>
 8014686:	b913      	cbnz	r3, 801468e <_printf_float+0x1b6>
 8014688:	6822      	ldr	r2, [r4, #0]
 801468a:	07d2      	lsls	r2, r2, #31
 801468c:	d501      	bpl.n	8014692 <_printf_float+0x1ba>
 801468e:	3302      	adds	r3, #2
 8014690:	e7f4      	b.n	801467c <_printf_float+0x1a4>
 8014692:	2301      	movs	r3, #1
 8014694:	e7f2      	b.n	801467c <_printf_float+0x1a4>
 8014696:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801469a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801469c:	4299      	cmp	r1, r3
 801469e:	db05      	blt.n	80146ac <_printf_float+0x1d4>
 80146a0:	6823      	ldr	r3, [r4, #0]
 80146a2:	6121      	str	r1, [r4, #16]
 80146a4:	07d8      	lsls	r0, r3, #31
 80146a6:	d5ea      	bpl.n	801467e <_printf_float+0x1a6>
 80146a8:	1c4b      	adds	r3, r1, #1
 80146aa:	e7e7      	b.n	801467c <_printf_float+0x1a4>
 80146ac:	2900      	cmp	r1, #0
 80146ae:	bfd4      	ite	le
 80146b0:	f1c1 0202 	rsble	r2, r1, #2
 80146b4:	2201      	movgt	r2, #1
 80146b6:	4413      	add	r3, r2
 80146b8:	e7e0      	b.n	801467c <_printf_float+0x1a4>
 80146ba:	6823      	ldr	r3, [r4, #0]
 80146bc:	055a      	lsls	r2, r3, #21
 80146be:	d407      	bmi.n	80146d0 <_printf_float+0x1f8>
 80146c0:	6923      	ldr	r3, [r4, #16]
 80146c2:	4642      	mov	r2, r8
 80146c4:	4631      	mov	r1, r6
 80146c6:	4628      	mov	r0, r5
 80146c8:	47b8      	blx	r7
 80146ca:	3001      	adds	r0, #1
 80146cc:	d12c      	bne.n	8014728 <_printf_float+0x250>
 80146ce:	e764      	b.n	801459a <_printf_float+0xc2>
 80146d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80146d4:	f240 80e0 	bls.w	8014898 <_printf_float+0x3c0>
 80146d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80146dc:	2200      	movs	r2, #0
 80146de:	2300      	movs	r3, #0
 80146e0:	f7ec f9fa 	bl	8000ad8 <__aeabi_dcmpeq>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	d034      	beq.n	8014752 <_printf_float+0x27a>
 80146e8:	4a37      	ldr	r2, [pc, #220]	; (80147c8 <_printf_float+0x2f0>)
 80146ea:	2301      	movs	r3, #1
 80146ec:	4631      	mov	r1, r6
 80146ee:	4628      	mov	r0, r5
 80146f0:	47b8      	blx	r7
 80146f2:	3001      	adds	r0, #1
 80146f4:	f43f af51 	beq.w	801459a <_printf_float+0xc2>
 80146f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80146fc:	429a      	cmp	r2, r3
 80146fe:	db02      	blt.n	8014706 <_printf_float+0x22e>
 8014700:	6823      	ldr	r3, [r4, #0]
 8014702:	07d8      	lsls	r0, r3, #31
 8014704:	d510      	bpl.n	8014728 <_printf_float+0x250>
 8014706:	ee18 3a10 	vmov	r3, s16
 801470a:	4652      	mov	r2, sl
 801470c:	4631      	mov	r1, r6
 801470e:	4628      	mov	r0, r5
 8014710:	47b8      	blx	r7
 8014712:	3001      	adds	r0, #1
 8014714:	f43f af41 	beq.w	801459a <_printf_float+0xc2>
 8014718:	f04f 0800 	mov.w	r8, #0
 801471c:	f104 091a 	add.w	r9, r4, #26
 8014720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014722:	3b01      	subs	r3, #1
 8014724:	4543      	cmp	r3, r8
 8014726:	dc09      	bgt.n	801473c <_printf_float+0x264>
 8014728:	6823      	ldr	r3, [r4, #0]
 801472a:	079b      	lsls	r3, r3, #30
 801472c:	f100 8105 	bmi.w	801493a <_printf_float+0x462>
 8014730:	68e0      	ldr	r0, [r4, #12]
 8014732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014734:	4298      	cmp	r0, r3
 8014736:	bfb8      	it	lt
 8014738:	4618      	movlt	r0, r3
 801473a:	e730      	b.n	801459e <_printf_float+0xc6>
 801473c:	2301      	movs	r3, #1
 801473e:	464a      	mov	r2, r9
 8014740:	4631      	mov	r1, r6
 8014742:	4628      	mov	r0, r5
 8014744:	47b8      	blx	r7
 8014746:	3001      	adds	r0, #1
 8014748:	f43f af27 	beq.w	801459a <_printf_float+0xc2>
 801474c:	f108 0801 	add.w	r8, r8, #1
 8014750:	e7e6      	b.n	8014720 <_printf_float+0x248>
 8014752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014754:	2b00      	cmp	r3, #0
 8014756:	dc39      	bgt.n	80147cc <_printf_float+0x2f4>
 8014758:	4a1b      	ldr	r2, [pc, #108]	; (80147c8 <_printf_float+0x2f0>)
 801475a:	2301      	movs	r3, #1
 801475c:	4631      	mov	r1, r6
 801475e:	4628      	mov	r0, r5
 8014760:	47b8      	blx	r7
 8014762:	3001      	adds	r0, #1
 8014764:	f43f af19 	beq.w	801459a <_printf_float+0xc2>
 8014768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801476c:	4313      	orrs	r3, r2
 801476e:	d102      	bne.n	8014776 <_printf_float+0x29e>
 8014770:	6823      	ldr	r3, [r4, #0]
 8014772:	07d9      	lsls	r1, r3, #31
 8014774:	d5d8      	bpl.n	8014728 <_printf_float+0x250>
 8014776:	ee18 3a10 	vmov	r3, s16
 801477a:	4652      	mov	r2, sl
 801477c:	4631      	mov	r1, r6
 801477e:	4628      	mov	r0, r5
 8014780:	47b8      	blx	r7
 8014782:	3001      	adds	r0, #1
 8014784:	f43f af09 	beq.w	801459a <_printf_float+0xc2>
 8014788:	f04f 0900 	mov.w	r9, #0
 801478c:	f104 0a1a 	add.w	sl, r4, #26
 8014790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014792:	425b      	negs	r3, r3
 8014794:	454b      	cmp	r3, r9
 8014796:	dc01      	bgt.n	801479c <_printf_float+0x2c4>
 8014798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801479a:	e792      	b.n	80146c2 <_printf_float+0x1ea>
 801479c:	2301      	movs	r3, #1
 801479e:	4652      	mov	r2, sl
 80147a0:	4631      	mov	r1, r6
 80147a2:	4628      	mov	r0, r5
 80147a4:	47b8      	blx	r7
 80147a6:	3001      	adds	r0, #1
 80147a8:	f43f aef7 	beq.w	801459a <_printf_float+0xc2>
 80147ac:	f109 0901 	add.w	r9, r9, #1
 80147b0:	e7ee      	b.n	8014790 <_printf_float+0x2b8>
 80147b2:	bf00      	nop
 80147b4:	7fefffff 	.word	0x7fefffff
 80147b8:	080179f4 	.word	0x080179f4
 80147bc:	080179f8 	.word	0x080179f8
 80147c0:	08017a00 	.word	0x08017a00
 80147c4:	080179fc 	.word	0x080179fc
 80147c8:	08017a04 	.word	0x08017a04
 80147cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80147d0:	429a      	cmp	r2, r3
 80147d2:	bfa8      	it	ge
 80147d4:	461a      	movge	r2, r3
 80147d6:	2a00      	cmp	r2, #0
 80147d8:	4691      	mov	r9, r2
 80147da:	dc37      	bgt.n	801484c <_printf_float+0x374>
 80147dc:	f04f 0b00 	mov.w	fp, #0
 80147e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80147e4:	f104 021a 	add.w	r2, r4, #26
 80147e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80147ea:	9305      	str	r3, [sp, #20]
 80147ec:	eba3 0309 	sub.w	r3, r3, r9
 80147f0:	455b      	cmp	r3, fp
 80147f2:	dc33      	bgt.n	801485c <_printf_float+0x384>
 80147f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80147f8:	429a      	cmp	r2, r3
 80147fa:	db3b      	blt.n	8014874 <_printf_float+0x39c>
 80147fc:	6823      	ldr	r3, [r4, #0]
 80147fe:	07da      	lsls	r2, r3, #31
 8014800:	d438      	bmi.n	8014874 <_printf_float+0x39c>
 8014802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014804:	9a05      	ldr	r2, [sp, #20]
 8014806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014808:	1a9a      	subs	r2, r3, r2
 801480a:	eba3 0901 	sub.w	r9, r3, r1
 801480e:	4591      	cmp	r9, r2
 8014810:	bfa8      	it	ge
 8014812:	4691      	movge	r9, r2
 8014814:	f1b9 0f00 	cmp.w	r9, #0
 8014818:	dc35      	bgt.n	8014886 <_printf_float+0x3ae>
 801481a:	f04f 0800 	mov.w	r8, #0
 801481e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014822:	f104 0a1a 	add.w	sl, r4, #26
 8014826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801482a:	1a9b      	subs	r3, r3, r2
 801482c:	eba3 0309 	sub.w	r3, r3, r9
 8014830:	4543      	cmp	r3, r8
 8014832:	f77f af79 	ble.w	8014728 <_printf_float+0x250>
 8014836:	2301      	movs	r3, #1
 8014838:	4652      	mov	r2, sl
 801483a:	4631      	mov	r1, r6
 801483c:	4628      	mov	r0, r5
 801483e:	47b8      	blx	r7
 8014840:	3001      	adds	r0, #1
 8014842:	f43f aeaa 	beq.w	801459a <_printf_float+0xc2>
 8014846:	f108 0801 	add.w	r8, r8, #1
 801484a:	e7ec      	b.n	8014826 <_printf_float+0x34e>
 801484c:	4613      	mov	r3, r2
 801484e:	4631      	mov	r1, r6
 8014850:	4642      	mov	r2, r8
 8014852:	4628      	mov	r0, r5
 8014854:	47b8      	blx	r7
 8014856:	3001      	adds	r0, #1
 8014858:	d1c0      	bne.n	80147dc <_printf_float+0x304>
 801485a:	e69e      	b.n	801459a <_printf_float+0xc2>
 801485c:	2301      	movs	r3, #1
 801485e:	4631      	mov	r1, r6
 8014860:	4628      	mov	r0, r5
 8014862:	9205      	str	r2, [sp, #20]
 8014864:	47b8      	blx	r7
 8014866:	3001      	adds	r0, #1
 8014868:	f43f ae97 	beq.w	801459a <_printf_float+0xc2>
 801486c:	9a05      	ldr	r2, [sp, #20]
 801486e:	f10b 0b01 	add.w	fp, fp, #1
 8014872:	e7b9      	b.n	80147e8 <_printf_float+0x310>
 8014874:	ee18 3a10 	vmov	r3, s16
 8014878:	4652      	mov	r2, sl
 801487a:	4631      	mov	r1, r6
 801487c:	4628      	mov	r0, r5
 801487e:	47b8      	blx	r7
 8014880:	3001      	adds	r0, #1
 8014882:	d1be      	bne.n	8014802 <_printf_float+0x32a>
 8014884:	e689      	b.n	801459a <_printf_float+0xc2>
 8014886:	9a05      	ldr	r2, [sp, #20]
 8014888:	464b      	mov	r3, r9
 801488a:	4442      	add	r2, r8
 801488c:	4631      	mov	r1, r6
 801488e:	4628      	mov	r0, r5
 8014890:	47b8      	blx	r7
 8014892:	3001      	adds	r0, #1
 8014894:	d1c1      	bne.n	801481a <_printf_float+0x342>
 8014896:	e680      	b.n	801459a <_printf_float+0xc2>
 8014898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801489a:	2a01      	cmp	r2, #1
 801489c:	dc01      	bgt.n	80148a2 <_printf_float+0x3ca>
 801489e:	07db      	lsls	r3, r3, #31
 80148a0:	d538      	bpl.n	8014914 <_printf_float+0x43c>
 80148a2:	2301      	movs	r3, #1
 80148a4:	4642      	mov	r2, r8
 80148a6:	4631      	mov	r1, r6
 80148a8:	4628      	mov	r0, r5
 80148aa:	47b8      	blx	r7
 80148ac:	3001      	adds	r0, #1
 80148ae:	f43f ae74 	beq.w	801459a <_printf_float+0xc2>
 80148b2:	ee18 3a10 	vmov	r3, s16
 80148b6:	4652      	mov	r2, sl
 80148b8:	4631      	mov	r1, r6
 80148ba:	4628      	mov	r0, r5
 80148bc:	47b8      	blx	r7
 80148be:	3001      	adds	r0, #1
 80148c0:	f43f ae6b 	beq.w	801459a <_printf_float+0xc2>
 80148c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80148c8:	2200      	movs	r2, #0
 80148ca:	2300      	movs	r3, #0
 80148cc:	f7ec f904 	bl	8000ad8 <__aeabi_dcmpeq>
 80148d0:	b9d8      	cbnz	r0, 801490a <_printf_float+0x432>
 80148d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148d4:	f108 0201 	add.w	r2, r8, #1
 80148d8:	3b01      	subs	r3, #1
 80148da:	4631      	mov	r1, r6
 80148dc:	4628      	mov	r0, r5
 80148de:	47b8      	blx	r7
 80148e0:	3001      	adds	r0, #1
 80148e2:	d10e      	bne.n	8014902 <_printf_float+0x42a>
 80148e4:	e659      	b.n	801459a <_printf_float+0xc2>
 80148e6:	2301      	movs	r3, #1
 80148e8:	4652      	mov	r2, sl
 80148ea:	4631      	mov	r1, r6
 80148ec:	4628      	mov	r0, r5
 80148ee:	47b8      	blx	r7
 80148f0:	3001      	adds	r0, #1
 80148f2:	f43f ae52 	beq.w	801459a <_printf_float+0xc2>
 80148f6:	f108 0801 	add.w	r8, r8, #1
 80148fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148fc:	3b01      	subs	r3, #1
 80148fe:	4543      	cmp	r3, r8
 8014900:	dcf1      	bgt.n	80148e6 <_printf_float+0x40e>
 8014902:	464b      	mov	r3, r9
 8014904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014908:	e6dc      	b.n	80146c4 <_printf_float+0x1ec>
 801490a:	f04f 0800 	mov.w	r8, #0
 801490e:	f104 0a1a 	add.w	sl, r4, #26
 8014912:	e7f2      	b.n	80148fa <_printf_float+0x422>
 8014914:	2301      	movs	r3, #1
 8014916:	4642      	mov	r2, r8
 8014918:	e7df      	b.n	80148da <_printf_float+0x402>
 801491a:	2301      	movs	r3, #1
 801491c:	464a      	mov	r2, r9
 801491e:	4631      	mov	r1, r6
 8014920:	4628      	mov	r0, r5
 8014922:	47b8      	blx	r7
 8014924:	3001      	adds	r0, #1
 8014926:	f43f ae38 	beq.w	801459a <_printf_float+0xc2>
 801492a:	f108 0801 	add.w	r8, r8, #1
 801492e:	68e3      	ldr	r3, [r4, #12]
 8014930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014932:	1a5b      	subs	r3, r3, r1
 8014934:	4543      	cmp	r3, r8
 8014936:	dcf0      	bgt.n	801491a <_printf_float+0x442>
 8014938:	e6fa      	b.n	8014730 <_printf_float+0x258>
 801493a:	f04f 0800 	mov.w	r8, #0
 801493e:	f104 0919 	add.w	r9, r4, #25
 8014942:	e7f4      	b.n	801492e <_printf_float+0x456>

08014944 <_printf_common>:
 8014944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014948:	4616      	mov	r6, r2
 801494a:	4699      	mov	r9, r3
 801494c:	688a      	ldr	r2, [r1, #8]
 801494e:	690b      	ldr	r3, [r1, #16]
 8014950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014954:	4293      	cmp	r3, r2
 8014956:	bfb8      	it	lt
 8014958:	4613      	movlt	r3, r2
 801495a:	6033      	str	r3, [r6, #0]
 801495c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014960:	4607      	mov	r7, r0
 8014962:	460c      	mov	r4, r1
 8014964:	b10a      	cbz	r2, 801496a <_printf_common+0x26>
 8014966:	3301      	adds	r3, #1
 8014968:	6033      	str	r3, [r6, #0]
 801496a:	6823      	ldr	r3, [r4, #0]
 801496c:	0699      	lsls	r1, r3, #26
 801496e:	bf42      	ittt	mi
 8014970:	6833      	ldrmi	r3, [r6, #0]
 8014972:	3302      	addmi	r3, #2
 8014974:	6033      	strmi	r3, [r6, #0]
 8014976:	6825      	ldr	r5, [r4, #0]
 8014978:	f015 0506 	ands.w	r5, r5, #6
 801497c:	d106      	bne.n	801498c <_printf_common+0x48>
 801497e:	f104 0a19 	add.w	sl, r4, #25
 8014982:	68e3      	ldr	r3, [r4, #12]
 8014984:	6832      	ldr	r2, [r6, #0]
 8014986:	1a9b      	subs	r3, r3, r2
 8014988:	42ab      	cmp	r3, r5
 801498a:	dc26      	bgt.n	80149da <_printf_common+0x96>
 801498c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014990:	1e13      	subs	r3, r2, #0
 8014992:	6822      	ldr	r2, [r4, #0]
 8014994:	bf18      	it	ne
 8014996:	2301      	movne	r3, #1
 8014998:	0692      	lsls	r2, r2, #26
 801499a:	d42b      	bmi.n	80149f4 <_printf_common+0xb0>
 801499c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80149a0:	4649      	mov	r1, r9
 80149a2:	4638      	mov	r0, r7
 80149a4:	47c0      	blx	r8
 80149a6:	3001      	adds	r0, #1
 80149a8:	d01e      	beq.n	80149e8 <_printf_common+0xa4>
 80149aa:	6823      	ldr	r3, [r4, #0]
 80149ac:	68e5      	ldr	r5, [r4, #12]
 80149ae:	6832      	ldr	r2, [r6, #0]
 80149b0:	f003 0306 	and.w	r3, r3, #6
 80149b4:	2b04      	cmp	r3, #4
 80149b6:	bf08      	it	eq
 80149b8:	1aad      	subeq	r5, r5, r2
 80149ba:	68a3      	ldr	r3, [r4, #8]
 80149bc:	6922      	ldr	r2, [r4, #16]
 80149be:	bf0c      	ite	eq
 80149c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80149c4:	2500      	movne	r5, #0
 80149c6:	4293      	cmp	r3, r2
 80149c8:	bfc4      	itt	gt
 80149ca:	1a9b      	subgt	r3, r3, r2
 80149cc:	18ed      	addgt	r5, r5, r3
 80149ce:	2600      	movs	r6, #0
 80149d0:	341a      	adds	r4, #26
 80149d2:	42b5      	cmp	r5, r6
 80149d4:	d11a      	bne.n	8014a0c <_printf_common+0xc8>
 80149d6:	2000      	movs	r0, #0
 80149d8:	e008      	b.n	80149ec <_printf_common+0xa8>
 80149da:	2301      	movs	r3, #1
 80149dc:	4652      	mov	r2, sl
 80149de:	4649      	mov	r1, r9
 80149e0:	4638      	mov	r0, r7
 80149e2:	47c0      	blx	r8
 80149e4:	3001      	adds	r0, #1
 80149e6:	d103      	bne.n	80149f0 <_printf_common+0xac>
 80149e8:	f04f 30ff 	mov.w	r0, #4294967295
 80149ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149f0:	3501      	adds	r5, #1
 80149f2:	e7c6      	b.n	8014982 <_printf_common+0x3e>
 80149f4:	18e1      	adds	r1, r4, r3
 80149f6:	1c5a      	adds	r2, r3, #1
 80149f8:	2030      	movs	r0, #48	; 0x30
 80149fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80149fe:	4422      	add	r2, r4
 8014a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014a08:	3302      	adds	r3, #2
 8014a0a:	e7c7      	b.n	801499c <_printf_common+0x58>
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	4622      	mov	r2, r4
 8014a10:	4649      	mov	r1, r9
 8014a12:	4638      	mov	r0, r7
 8014a14:	47c0      	blx	r8
 8014a16:	3001      	adds	r0, #1
 8014a18:	d0e6      	beq.n	80149e8 <_printf_common+0xa4>
 8014a1a:	3601      	adds	r6, #1
 8014a1c:	e7d9      	b.n	80149d2 <_printf_common+0x8e>
	...

08014a20 <_printf_i>:
 8014a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a24:	7e0f      	ldrb	r7, [r1, #24]
 8014a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014a28:	2f78      	cmp	r7, #120	; 0x78
 8014a2a:	4691      	mov	r9, r2
 8014a2c:	4680      	mov	r8, r0
 8014a2e:	460c      	mov	r4, r1
 8014a30:	469a      	mov	sl, r3
 8014a32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014a36:	d807      	bhi.n	8014a48 <_printf_i+0x28>
 8014a38:	2f62      	cmp	r7, #98	; 0x62
 8014a3a:	d80a      	bhi.n	8014a52 <_printf_i+0x32>
 8014a3c:	2f00      	cmp	r7, #0
 8014a3e:	f000 80d8 	beq.w	8014bf2 <_printf_i+0x1d2>
 8014a42:	2f58      	cmp	r7, #88	; 0x58
 8014a44:	f000 80a3 	beq.w	8014b8e <_printf_i+0x16e>
 8014a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014a50:	e03a      	b.n	8014ac8 <_printf_i+0xa8>
 8014a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014a56:	2b15      	cmp	r3, #21
 8014a58:	d8f6      	bhi.n	8014a48 <_printf_i+0x28>
 8014a5a:	a101      	add	r1, pc, #4	; (adr r1, 8014a60 <_printf_i+0x40>)
 8014a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014a60:	08014ab9 	.word	0x08014ab9
 8014a64:	08014acd 	.word	0x08014acd
 8014a68:	08014a49 	.word	0x08014a49
 8014a6c:	08014a49 	.word	0x08014a49
 8014a70:	08014a49 	.word	0x08014a49
 8014a74:	08014a49 	.word	0x08014a49
 8014a78:	08014acd 	.word	0x08014acd
 8014a7c:	08014a49 	.word	0x08014a49
 8014a80:	08014a49 	.word	0x08014a49
 8014a84:	08014a49 	.word	0x08014a49
 8014a88:	08014a49 	.word	0x08014a49
 8014a8c:	08014bd9 	.word	0x08014bd9
 8014a90:	08014afd 	.word	0x08014afd
 8014a94:	08014bbb 	.word	0x08014bbb
 8014a98:	08014a49 	.word	0x08014a49
 8014a9c:	08014a49 	.word	0x08014a49
 8014aa0:	08014bfb 	.word	0x08014bfb
 8014aa4:	08014a49 	.word	0x08014a49
 8014aa8:	08014afd 	.word	0x08014afd
 8014aac:	08014a49 	.word	0x08014a49
 8014ab0:	08014a49 	.word	0x08014a49
 8014ab4:	08014bc3 	.word	0x08014bc3
 8014ab8:	682b      	ldr	r3, [r5, #0]
 8014aba:	1d1a      	adds	r2, r3, #4
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	602a      	str	r2, [r5, #0]
 8014ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014ac8:	2301      	movs	r3, #1
 8014aca:	e0a3      	b.n	8014c14 <_printf_i+0x1f4>
 8014acc:	6820      	ldr	r0, [r4, #0]
 8014ace:	6829      	ldr	r1, [r5, #0]
 8014ad0:	0606      	lsls	r6, r0, #24
 8014ad2:	f101 0304 	add.w	r3, r1, #4
 8014ad6:	d50a      	bpl.n	8014aee <_printf_i+0xce>
 8014ad8:	680e      	ldr	r6, [r1, #0]
 8014ada:	602b      	str	r3, [r5, #0]
 8014adc:	2e00      	cmp	r6, #0
 8014ade:	da03      	bge.n	8014ae8 <_printf_i+0xc8>
 8014ae0:	232d      	movs	r3, #45	; 0x2d
 8014ae2:	4276      	negs	r6, r6
 8014ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ae8:	485e      	ldr	r0, [pc, #376]	; (8014c64 <_printf_i+0x244>)
 8014aea:	230a      	movs	r3, #10
 8014aec:	e019      	b.n	8014b22 <_printf_i+0x102>
 8014aee:	680e      	ldr	r6, [r1, #0]
 8014af0:	602b      	str	r3, [r5, #0]
 8014af2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014af6:	bf18      	it	ne
 8014af8:	b236      	sxthne	r6, r6
 8014afa:	e7ef      	b.n	8014adc <_printf_i+0xbc>
 8014afc:	682b      	ldr	r3, [r5, #0]
 8014afe:	6820      	ldr	r0, [r4, #0]
 8014b00:	1d19      	adds	r1, r3, #4
 8014b02:	6029      	str	r1, [r5, #0]
 8014b04:	0601      	lsls	r1, r0, #24
 8014b06:	d501      	bpl.n	8014b0c <_printf_i+0xec>
 8014b08:	681e      	ldr	r6, [r3, #0]
 8014b0a:	e002      	b.n	8014b12 <_printf_i+0xf2>
 8014b0c:	0646      	lsls	r6, r0, #25
 8014b0e:	d5fb      	bpl.n	8014b08 <_printf_i+0xe8>
 8014b10:	881e      	ldrh	r6, [r3, #0]
 8014b12:	4854      	ldr	r0, [pc, #336]	; (8014c64 <_printf_i+0x244>)
 8014b14:	2f6f      	cmp	r7, #111	; 0x6f
 8014b16:	bf0c      	ite	eq
 8014b18:	2308      	moveq	r3, #8
 8014b1a:	230a      	movne	r3, #10
 8014b1c:	2100      	movs	r1, #0
 8014b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014b22:	6865      	ldr	r5, [r4, #4]
 8014b24:	60a5      	str	r5, [r4, #8]
 8014b26:	2d00      	cmp	r5, #0
 8014b28:	bfa2      	ittt	ge
 8014b2a:	6821      	ldrge	r1, [r4, #0]
 8014b2c:	f021 0104 	bicge.w	r1, r1, #4
 8014b30:	6021      	strge	r1, [r4, #0]
 8014b32:	b90e      	cbnz	r6, 8014b38 <_printf_i+0x118>
 8014b34:	2d00      	cmp	r5, #0
 8014b36:	d04d      	beq.n	8014bd4 <_printf_i+0x1b4>
 8014b38:	4615      	mov	r5, r2
 8014b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8014b42:	5dc7      	ldrb	r7, [r0, r7]
 8014b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014b48:	4637      	mov	r7, r6
 8014b4a:	42bb      	cmp	r3, r7
 8014b4c:	460e      	mov	r6, r1
 8014b4e:	d9f4      	bls.n	8014b3a <_printf_i+0x11a>
 8014b50:	2b08      	cmp	r3, #8
 8014b52:	d10b      	bne.n	8014b6c <_printf_i+0x14c>
 8014b54:	6823      	ldr	r3, [r4, #0]
 8014b56:	07de      	lsls	r6, r3, #31
 8014b58:	d508      	bpl.n	8014b6c <_printf_i+0x14c>
 8014b5a:	6923      	ldr	r3, [r4, #16]
 8014b5c:	6861      	ldr	r1, [r4, #4]
 8014b5e:	4299      	cmp	r1, r3
 8014b60:	bfde      	ittt	le
 8014b62:	2330      	movle	r3, #48	; 0x30
 8014b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014b6c:	1b52      	subs	r2, r2, r5
 8014b6e:	6122      	str	r2, [r4, #16]
 8014b70:	f8cd a000 	str.w	sl, [sp]
 8014b74:	464b      	mov	r3, r9
 8014b76:	aa03      	add	r2, sp, #12
 8014b78:	4621      	mov	r1, r4
 8014b7a:	4640      	mov	r0, r8
 8014b7c:	f7ff fee2 	bl	8014944 <_printf_common>
 8014b80:	3001      	adds	r0, #1
 8014b82:	d14c      	bne.n	8014c1e <_printf_i+0x1fe>
 8014b84:	f04f 30ff 	mov.w	r0, #4294967295
 8014b88:	b004      	add	sp, #16
 8014b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b8e:	4835      	ldr	r0, [pc, #212]	; (8014c64 <_printf_i+0x244>)
 8014b90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014b94:	6829      	ldr	r1, [r5, #0]
 8014b96:	6823      	ldr	r3, [r4, #0]
 8014b98:	f851 6b04 	ldr.w	r6, [r1], #4
 8014b9c:	6029      	str	r1, [r5, #0]
 8014b9e:	061d      	lsls	r5, r3, #24
 8014ba0:	d514      	bpl.n	8014bcc <_printf_i+0x1ac>
 8014ba2:	07df      	lsls	r7, r3, #31
 8014ba4:	bf44      	itt	mi
 8014ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8014baa:	6023      	strmi	r3, [r4, #0]
 8014bac:	b91e      	cbnz	r6, 8014bb6 <_printf_i+0x196>
 8014bae:	6823      	ldr	r3, [r4, #0]
 8014bb0:	f023 0320 	bic.w	r3, r3, #32
 8014bb4:	6023      	str	r3, [r4, #0]
 8014bb6:	2310      	movs	r3, #16
 8014bb8:	e7b0      	b.n	8014b1c <_printf_i+0xfc>
 8014bba:	6823      	ldr	r3, [r4, #0]
 8014bbc:	f043 0320 	orr.w	r3, r3, #32
 8014bc0:	6023      	str	r3, [r4, #0]
 8014bc2:	2378      	movs	r3, #120	; 0x78
 8014bc4:	4828      	ldr	r0, [pc, #160]	; (8014c68 <_printf_i+0x248>)
 8014bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014bca:	e7e3      	b.n	8014b94 <_printf_i+0x174>
 8014bcc:	0659      	lsls	r1, r3, #25
 8014bce:	bf48      	it	mi
 8014bd0:	b2b6      	uxthmi	r6, r6
 8014bd2:	e7e6      	b.n	8014ba2 <_printf_i+0x182>
 8014bd4:	4615      	mov	r5, r2
 8014bd6:	e7bb      	b.n	8014b50 <_printf_i+0x130>
 8014bd8:	682b      	ldr	r3, [r5, #0]
 8014bda:	6826      	ldr	r6, [r4, #0]
 8014bdc:	6961      	ldr	r1, [r4, #20]
 8014bde:	1d18      	adds	r0, r3, #4
 8014be0:	6028      	str	r0, [r5, #0]
 8014be2:	0635      	lsls	r5, r6, #24
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	d501      	bpl.n	8014bec <_printf_i+0x1cc>
 8014be8:	6019      	str	r1, [r3, #0]
 8014bea:	e002      	b.n	8014bf2 <_printf_i+0x1d2>
 8014bec:	0670      	lsls	r0, r6, #25
 8014bee:	d5fb      	bpl.n	8014be8 <_printf_i+0x1c8>
 8014bf0:	8019      	strh	r1, [r3, #0]
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	6123      	str	r3, [r4, #16]
 8014bf6:	4615      	mov	r5, r2
 8014bf8:	e7ba      	b.n	8014b70 <_printf_i+0x150>
 8014bfa:	682b      	ldr	r3, [r5, #0]
 8014bfc:	1d1a      	adds	r2, r3, #4
 8014bfe:	602a      	str	r2, [r5, #0]
 8014c00:	681d      	ldr	r5, [r3, #0]
 8014c02:	6862      	ldr	r2, [r4, #4]
 8014c04:	2100      	movs	r1, #0
 8014c06:	4628      	mov	r0, r5
 8014c08:	f7eb faf2 	bl	80001f0 <memchr>
 8014c0c:	b108      	cbz	r0, 8014c12 <_printf_i+0x1f2>
 8014c0e:	1b40      	subs	r0, r0, r5
 8014c10:	6060      	str	r0, [r4, #4]
 8014c12:	6863      	ldr	r3, [r4, #4]
 8014c14:	6123      	str	r3, [r4, #16]
 8014c16:	2300      	movs	r3, #0
 8014c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c1c:	e7a8      	b.n	8014b70 <_printf_i+0x150>
 8014c1e:	6923      	ldr	r3, [r4, #16]
 8014c20:	462a      	mov	r2, r5
 8014c22:	4649      	mov	r1, r9
 8014c24:	4640      	mov	r0, r8
 8014c26:	47d0      	blx	sl
 8014c28:	3001      	adds	r0, #1
 8014c2a:	d0ab      	beq.n	8014b84 <_printf_i+0x164>
 8014c2c:	6823      	ldr	r3, [r4, #0]
 8014c2e:	079b      	lsls	r3, r3, #30
 8014c30:	d413      	bmi.n	8014c5a <_printf_i+0x23a>
 8014c32:	68e0      	ldr	r0, [r4, #12]
 8014c34:	9b03      	ldr	r3, [sp, #12]
 8014c36:	4298      	cmp	r0, r3
 8014c38:	bfb8      	it	lt
 8014c3a:	4618      	movlt	r0, r3
 8014c3c:	e7a4      	b.n	8014b88 <_printf_i+0x168>
 8014c3e:	2301      	movs	r3, #1
 8014c40:	4632      	mov	r2, r6
 8014c42:	4649      	mov	r1, r9
 8014c44:	4640      	mov	r0, r8
 8014c46:	47d0      	blx	sl
 8014c48:	3001      	adds	r0, #1
 8014c4a:	d09b      	beq.n	8014b84 <_printf_i+0x164>
 8014c4c:	3501      	adds	r5, #1
 8014c4e:	68e3      	ldr	r3, [r4, #12]
 8014c50:	9903      	ldr	r1, [sp, #12]
 8014c52:	1a5b      	subs	r3, r3, r1
 8014c54:	42ab      	cmp	r3, r5
 8014c56:	dcf2      	bgt.n	8014c3e <_printf_i+0x21e>
 8014c58:	e7eb      	b.n	8014c32 <_printf_i+0x212>
 8014c5a:	2500      	movs	r5, #0
 8014c5c:	f104 0619 	add.w	r6, r4, #25
 8014c60:	e7f5      	b.n	8014c4e <_printf_i+0x22e>
 8014c62:	bf00      	nop
 8014c64:	08017a06 	.word	0x08017a06
 8014c68:	08017a17 	.word	0x08017a17

08014c6c <cleanup_glue>:
 8014c6c:	b538      	push	{r3, r4, r5, lr}
 8014c6e:	460c      	mov	r4, r1
 8014c70:	6809      	ldr	r1, [r1, #0]
 8014c72:	4605      	mov	r5, r0
 8014c74:	b109      	cbz	r1, 8014c7a <cleanup_glue+0xe>
 8014c76:	f7ff fff9 	bl	8014c6c <cleanup_glue>
 8014c7a:	4621      	mov	r1, r4
 8014c7c:	4628      	mov	r0, r5
 8014c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c82:	f001 bc01 	b.w	8016488 <_free_r>
	...

08014c88 <_reclaim_reent>:
 8014c88:	4b2c      	ldr	r3, [pc, #176]	; (8014d3c <_reclaim_reent+0xb4>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4283      	cmp	r3, r0
 8014c8e:	b570      	push	{r4, r5, r6, lr}
 8014c90:	4604      	mov	r4, r0
 8014c92:	d051      	beq.n	8014d38 <_reclaim_reent+0xb0>
 8014c94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014c96:	b143      	cbz	r3, 8014caa <_reclaim_reent+0x22>
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d14a      	bne.n	8014d34 <_reclaim_reent+0xac>
 8014c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ca0:	6819      	ldr	r1, [r3, #0]
 8014ca2:	b111      	cbz	r1, 8014caa <_reclaim_reent+0x22>
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	f001 fbef 	bl	8016488 <_free_r>
 8014caa:	6961      	ldr	r1, [r4, #20]
 8014cac:	b111      	cbz	r1, 8014cb4 <_reclaim_reent+0x2c>
 8014cae:	4620      	mov	r0, r4
 8014cb0:	f001 fbea 	bl	8016488 <_free_r>
 8014cb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014cb6:	b111      	cbz	r1, 8014cbe <_reclaim_reent+0x36>
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f001 fbe5 	bl	8016488 <_free_r>
 8014cbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014cc0:	b111      	cbz	r1, 8014cc8 <_reclaim_reent+0x40>
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f001 fbe0 	bl	8016488 <_free_r>
 8014cc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014cca:	b111      	cbz	r1, 8014cd2 <_reclaim_reent+0x4a>
 8014ccc:	4620      	mov	r0, r4
 8014cce:	f001 fbdb 	bl	8016488 <_free_r>
 8014cd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014cd4:	b111      	cbz	r1, 8014cdc <_reclaim_reent+0x54>
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	f001 fbd6 	bl	8016488 <_free_r>
 8014cdc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014cde:	b111      	cbz	r1, 8014ce6 <_reclaim_reent+0x5e>
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	f001 fbd1 	bl	8016488 <_free_r>
 8014ce6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014ce8:	b111      	cbz	r1, 8014cf0 <_reclaim_reent+0x68>
 8014cea:	4620      	mov	r0, r4
 8014cec:	f001 fbcc 	bl	8016488 <_free_r>
 8014cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cf2:	b111      	cbz	r1, 8014cfa <_reclaim_reent+0x72>
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	f001 fbc7 	bl	8016488 <_free_r>
 8014cfa:	69a3      	ldr	r3, [r4, #24]
 8014cfc:	b1e3      	cbz	r3, 8014d38 <_reclaim_reent+0xb0>
 8014cfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014d00:	4620      	mov	r0, r4
 8014d02:	4798      	blx	r3
 8014d04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014d06:	b1b9      	cbz	r1, 8014d38 <_reclaim_reent+0xb0>
 8014d08:	4620      	mov	r0, r4
 8014d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d0e:	f7ff bfad 	b.w	8014c6c <cleanup_glue>
 8014d12:	5949      	ldr	r1, [r1, r5]
 8014d14:	b941      	cbnz	r1, 8014d28 <_reclaim_reent+0xa0>
 8014d16:	3504      	adds	r5, #4
 8014d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d1a:	2d80      	cmp	r5, #128	; 0x80
 8014d1c:	68d9      	ldr	r1, [r3, #12]
 8014d1e:	d1f8      	bne.n	8014d12 <_reclaim_reent+0x8a>
 8014d20:	4620      	mov	r0, r4
 8014d22:	f001 fbb1 	bl	8016488 <_free_r>
 8014d26:	e7ba      	b.n	8014c9e <_reclaim_reent+0x16>
 8014d28:	680e      	ldr	r6, [r1, #0]
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	f001 fbac 	bl	8016488 <_free_r>
 8014d30:	4631      	mov	r1, r6
 8014d32:	e7ef      	b.n	8014d14 <_reclaim_reent+0x8c>
 8014d34:	2500      	movs	r5, #0
 8014d36:	e7ef      	b.n	8014d18 <_reclaim_reent+0x90>
 8014d38:	bd70      	pop	{r4, r5, r6, pc}
 8014d3a:	bf00      	nop
 8014d3c:	20000124 	.word	0x20000124

08014d40 <_sbrk_r>:
 8014d40:	b538      	push	{r3, r4, r5, lr}
 8014d42:	4d06      	ldr	r5, [pc, #24]	; (8014d5c <_sbrk_r+0x1c>)
 8014d44:	2300      	movs	r3, #0
 8014d46:	4604      	mov	r4, r0
 8014d48:	4608      	mov	r0, r1
 8014d4a:	602b      	str	r3, [r5, #0]
 8014d4c:	f7f0 fa44 	bl	80051d8 <_sbrk>
 8014d50:	1c43      	adds	r3, r0, #1
 8014d52:	d102      	bne.n	8014d5a <_sbrk_r+0x1a>
 8014d54:	682b      	ldr	r3, [r5, #0]
 8014d56:	b103      	cbz	r3, 8014d5a <_sbrk_r+0x1a>
 8014d58:	6023      	str	r3, [r4, #0]
 8014d5a:	bd38      	pop	{r3, r4, r5, pc}
 8014d5c:	20005ae8 	.word	0x20005ae8

08014d60 <siprintf>:
 8014d60:	b40e      	push	{r1, r2, r3}
 8014d62:	b500      	push	{lr}
 8014d64:	b09c      	sub	sp, #112	; 0x70
 8014d66:	ab1d      	add	r3, sp, #116	; 0x74
 8014d68:	9002      	str	r0, [sp, #8]
 8014d6a:	9006      	str	r0, [sp, #24]
 8014d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014d70:	4809      	ldr	r0, [pc, #36]	; (8014d98 <siprintf+0x38>)
 8014d72:	9107      	str	r1, [sp, #28]
 8014d74:	9104      	str	r1, [sp, #16]
 8014d76:	4909      	ldr	r1, [pc, #36]	; (8014d9c <siprintf+0x3c>)
 8014d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d7c:	9105      	str	r1, [sp, #20]
 8014d7e:	6800      	ldr	r0, [r0, #0]
 8014d80:	9301      	str	r3, [sp, #4]
 8014d82:	a902      	add	r1, sp, #8
 8014d84:	f001 fc28 	bl	80165d8 <_svfiprintf_r>
 8014d88:	9b02      	ldr	r3, [sp, #8]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	701a      	strb	r2, [r3, #0]
 8014d8e:	b01c      	add	sp, #112	; 0x70
 8014d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d94:	b003      	add	sp, #12
 8014d96:	4770      	bx	lr
 8014d98:	20000124 	.word	0x20000124
 8014d9c:	ffff0208 	.word	0xffff0208

08014da0 <__sread>:
 8014da0:	b510      	push	{r4, lr}
 8014da2:	460c      	mov	r4, r1
 8014da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014da8:	f001 fd16 	bl	80167d8 <_read_r>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	bfab      	itete	ge
 8014db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014db2:	89a3      	ldrhlt	r3, [r4, #12]
 8014db4:	181b      	addge	r3, r3, r0
 8014db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014dba:	bfac      	ite	ge
 8014dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8014dbe:	81a3      	strhlt	r3, [r4, #12]
 8014dc0:	bd10      	pop	{r4, pc}

08014dc2 <__swrite>:
 8014dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc6:	461f      	mov	r7, r3
 8014dc8:	898b      	ldrh	r3, [r1, #12]
 8014dca:	05db      	lsls	r3, r3, #23
 8014dcc:	4605      	mov	r5, r0
 8014dce:	460c      	mov	r4, r1
 8014dd0:	4616      	mov	r6, r2
 8014dd2:	d505      	bpl.n	8014de0 <__swrite+0x1e>
 8014dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dd8:	2302      	movs	r3, #2
 8014dda:	2200      	movs	r2, #0
 8014ddc:	f000 ff94 	bl	8015d08 <_lseek_r>
 8014de0:	89a3      	ldrh	r3, [r4, #12]
 8014de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014dea:	81a3      	strh	r3, [r4, #12]
 8014dec:	4632      	mov	r2, r6
 8014dee:	463b      	mov	r3, r7
 8014df0:	4628      	mov	r0, r5
 8014df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014df6:	f000 b825 	b.w	8014e44 <_write_r>

08014dfa <__sseek>:
 8014dfa:	b510      	push	{r4, lr}
 8014dfc:	460c      	mov	r4, r1
 8014dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e02:	f000 ff81 	bl	8015d08 <_lseek_r>
 8014e06:	1c43      	adds	r3, r0, #1
 8014e08:	89a3      	ldrh	r3, [r4, #12]
 8014e0a:	bf15      	itete	ne
 8014e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014e16:	81a3      	strheq	r3, [r4, #12]
 8014e18:	bf18      	it	ne
 8014e1a:	81a3      	strhne	r3, [r4, #12]
 8014e1c:	bd10      	pop	{r4, pc}

08014e1e <__sclose>:
 8014e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e22:	f000 b821 	b.w	8014e68 <_close_r>

08014e26 <strcat>:
 8014e26:	b510      	push	{r4, lr}
 8014e28:	4602      	mov	r2, r0
 8014e2a:	7814      	ldrb	r4, [r2, #0]
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	3201      	adds	r2, #1
 8014e30:	2c00      	cmp	r4, #0
 8014e32:	d1fa      	bne.n	8014e2a <strcat+0x4>
 8014e34:	3b01      	subs	r3, #1
 8014e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014e3e:	2a00      	cmp	r2, #0
 8014e40:	d1f9      	bne.n	8014e36 <strcat+0x10>
 8014e42:	bd10      	pop	{r4, pc}

08014e44 <_write_r>:
 8014e44:	b538      	push	{r3, r4, r5, lr}
 8014e46:	4d07      	ldr	r5, [pc, #28]	; (8014e64 <_write_r+0x20>)
 8014e48:	4604      	mov	r4, r0
 8014e4a:	4608      	mov	r0, r1
 8014e4c:	4611      	mov	r1, r2
 8014e4e:	2200      	movs	r2, #0
 8014e50:	602a      	str	r2, [r5, #0]
 8014e52:	461a      	mov	r2, r3
 8014e54:	f7f0 f96f 	bl	8005136 <_write>
 8014e58:	1c43      	adds	r3, r0, #1
 8014e5a:	d102      	bne.n	8014e62 <_write_r+0x1e>
 8014e5c:	682b      	ldr	r3, [r5, #0]
 8014e5e:	b103      	cbz	r3, 8014e62 <_write_r+0x1e>
 8014e60:	6023      	str	r3, [r4, #0]
 8014e62:	bd38      	pop	{r3, r4, r5, pc}
 8014e64:	20005ae8 	.word	0x20005ae8

08014e68 <_close_r>:
 8014e68:	b538      	push	{r3, r4, r5, lr}
 8014e6a:	4d06      	ldr	r5, [pc, #24]	; (8014e84 <_close_r+0x1c>)
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	4604      	mov	r4, r0
 8014e70:	4608      	mov	r0, r1
 8014e72:	602b      	str	r3, [r5, #0]
 8014e74:	f7f0 f97b 	bl	800516e <_close>
 8014e78:	1c43      	adds	r3, r0, #1
 8014e7a:	d102      	bne.n	8014e82 <_close_r+0x1a>
 8014e7c:	682b      	ldr	r3, [r5, #0]
 8014e7e:	b103      	cbz	r3, 8014e82 <_close_r+0x1a>
 8014e80:	6023      	str	r3, [r4, #0]
 8014e82:	bd38      	pop	{r3, r4, r5, pc}
 8014e84:	20005ae8 	.word	0x20005ae8

08014e88 <quorem>:
 8014e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e8c:	6903      	ldr	r3, [r0, #16]
 8014e8e:	690c      	ldr	r4, [r1, #16]
 8014e90:	42a3      	cmp	r3, r4
 8014e92:	4607      	mov	r7, r0
 8014e94:	f2c0 8081 	blt.w	8014f9a <quorem+0x112>
 8014e98:	3c01      	subs	r4, #1
 8014e9a:	f101 0814 	add.w	r8, r1, #20
 8014e9e:	f100 0514 	add.w	r5, r0, #20
 8014ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ea6:	9301      	str	r3, [sp, #4]
 8014ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	429a      	cmp	r2, r3
 8014eb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8014ec0:	d331      	bcc.n	8014f26 <quorem+0x9e>
 8014ec2:	f04f 0e00 	mov.w	lr, #0
 8014ec6:	4640      	mov	r0, r8
 8014ec8:	46ac      	mov	ip, r5
 8014eca:	46f2      	mov	sl, lr
 8014ecc:	f850 2b04 	ldr.w	r2, [r0], #4
 8014ed0:	b293      	uxth	r3, r2
 8014ed2:	fb06 e303 	mla	r3, r6, r3, lr
 8014ed6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014eda:	b29b      	uxth	r3, r3
 8014edc:	ebaa 0303 	sub.w	r3, sl, r3
 8014ee0:	f8dc a000 	ldr.w	sl, [ip]
 8014ee4:	0c12      	lsrs	r2, r2, #16
 8014ee6:	fa13 f38a 	uxtah	r3, r3, sl
 8014eea:	fb06 e202 	mla	r2, r6, r2, lr
 8014eee:	9300      	str	r3, [sp, #0]
 8014ef0:	9b00      	ldr	r3, [sp, #0]
 8014ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014ef6:	b292      	uxth	r2, r2
 8014ef8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014f00:	f8bd 3000 	ldrh.w	r3, [sp]
 8014f04:	4581      	cmp	r9, r0
 8014f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8014f0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014f12:	d2db      	bcs.n	8014ecc <quorem+0x44>
 8014f14:	f855 300b 	ldr.w	r3, [r5, fp]
 8014f18:	b92b      	cbnz	r3, 8014f26 <quorem+0x9e>
 8014f1a:	9b01      	ldr	r3, [sp, #4]
 8014f1c:	3b04      	subs	r3, #4
 8014f1e:	429d      	cmp	r5, r3
 8014f20:	461a      	mov	r2, r3
 8014f22:	d32e      	bcc.n	8014f82 <quorem+0xfa>
 8014f24:	613c      	str	r4, [r7, #16]
 8014f26:	4638      	mov	r0, r7
 8014f28:	f001 f996 	bl	8016258 <__mcmp>
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	db24      	blt.n	8014f7a <quorem+0xf2>
 8014f30:	3601      	adds	r6, #1
 8014f32:	4628      	mov	r0, r5
 8014f34:	f04f 0c00 	mov.w	ip, #0
 8014f38:	f858 2b04 	ldr.w	r2, [r8], #4
 8014f3c:	f8d0 e000 	ldr.w	lr, [r0]
 8014f40:	b293      	uxth	r3, r2
 8014f42:	ebac 0303 	sub.w	r3, ip, r3
 8014f46:	0c12      	lsrs	r2, r2, #16
 8014f48:	fa13 f38e 	uxtah	r3, r3, lr
 8014f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014f5a:	45c1      	cmp	r9, r8
 8014f5c:	f840 3b04 	str.w	r3, [r0], #4
 8014f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014f64:	d2e8      	bcs.n	8014f38 <quorem+0xb0>
 8014f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f6e:	b922      	cbnz	r2, 8014f7a <quorem+0xf2>
 8014f70:	3b04      	subs	r3, #4
 8014f72:	429d      	cmp	r5, r3
 8014f74:	461a      	mov	r2, r3
 8014f76:	d30a      	bcc.n	8014f8e <quorem+0x106>
 8014f78:	613c      	str	r4, [r7, #16]
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	b003      	add	sp, #12
 8014f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f82:	6812      	ldr	r2, [r2, #0]
 8014f84:	3b04      	subs	r3, #4
 8014f86:	2a00      	cmp	r2, #0
 8014f88:	d1cc      	bne.n	8014f24 <quorem+0x9c>
 8014f8a:	3c01      	subs	r4, #1
 8014f8c:	e7c7      	b.n	8014f1e <quorem+0x96>
 8014f8e:	6812      	ldr	r2, [r2, #0]
 8014f90:	3b04      	subs	r3, #4
 8014f92:	2a00      	cmp	r2, #0
 8014f94:	d1f0      	bne.n	8014f78 <quorem+0xf0>
 8014f96:	3c01      	subs	r4, #1
 8014f98:	e7eb      	b.n	8014f72 <quorem+0xea>
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	e7ee      	b.n	8014f7c <quorem+0xf4>
	...

08014fa0 <_dtoa_r>:
 8014fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa4:	ed2d 8b04 	vpush	{d8-d9}
 8014fa8:	ec57 6b10 	vmov	r6, r7, d0
 8014fac:	b093      	sub	sp, #76	; 0x4c
 8014fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014fb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014fb4:	9106      	str	r1, [sp, #24]
 8014fb6:	ee10 aa10 	vmov	sl, s0
 8014fba:	4604      	mov	r4, r0
 8014fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8014fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8014fc0:	46bb      	mov	fp, r7
 8014fc2:	b975      	cbnz	r5, 8014fe2 <_dtoa_r+0x42>
 8014fc4:	2010      	movs	r0, #16
 8014fc6:	f000 feb1 	bl	8015d2c <malloc>
 8014fca:	4602      	mov	r2, r0
 8014fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8014fce:	b920      	cbnz	r0, 8014fda <_dtoa_r+0x3a>
 8014fd0:	4ba7      	ldr	r3, [pc, #668]	; (8015270 <_dtoa_r+0x2d0>)
 8014fd2:	21ea      	movs	r1, #234	; 0xea
 8014fd4:	48a7      	ldr	r0, [pc, #668]	; (8015274 <_dtoa_r+0x2d4>)
 8014fd6:	f001 fc11 	bl	80167fc <__assert_func>
 8014fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014fde:	6005      	str	r5, [r0, #0]
 8014fe0:	60c5      	str	r5, [r0, #12]
 8014fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fe4:	6819      	ldr	r1, [r3, #0]
 8014fe6:	b151      	cbz	r1, 8014ffe <_dtoa_r+0x5e>
 8014fe8:	685a      	ldr	r2, [r3, #4]
 8014fea:	604a      	str	r2, [r1, #4]
 8014fec:	2301      	movs	r3, #1
 8014fee:	4093      	lsls	r3, r2
 8014ff0:	608b      	str	r3, [r1, #8]
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f000 feee 	bl	8015dd4 <_Bfree>
 8014ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	601a      	str	r2, [r3, #0]
 8014ffe:	1e3b      	subs	r3, r7, #0
 8015000:	bfaa      	itet	ge
 8015002:	2300      	movge	r3, #0
 8015004:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015008:	f8c8 3000 	strge.w	r3, [r8]
 801500c:	4b9a      	ldr	r3, [pc, #616]	; (8015278 <_dtoa_r+0x2d8>)
 801500e:	bfbc      	itt	lt
 8015010:	2201      	movlt	r2, #1
 8015012:	f8c8 2000 	strlt.w	r2, [r8]
 8015016:	ea33 030b 	bics.w	r3, r3, fp
 801501a:	d11b      	bne.n	8015054 <_dtoa_r+0xb4>
 801501c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801501e:	f242 730f 	movw	r3, #9999	; 0x270f
 8015022:	6013      	str	r3, [r2, #0]
 8015024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015028:	4333      	orrs	r3, r6
 801502a:	f000 8592 	beq.w	8015b52 <_dtoa_r+0xbb2>
 801502e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015030:	b963      	cbnz	r3, 801504c <_dtoa_r+0xac>
 8015032:	4b92      	ldr	r3, [pc, #584]	; (801527c <_dtoa_r+0x2dc>)
 8015034:	e022      	b.n	801507c <_dtoa_r+0xdc>
 8015036:	4b92      	ldr	r3, [pc, #584]	; (8015280 <_dtoa_r+0x2e0>)
 8015038:	9301      	str	r3, [sp, #4]
 801503a:	3308      	adds	r3, #8
 801503c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801503e:	6013      	str	r3, [r2, #0]
 8015040:	9801      	ldr	r0, [sp, #4]
 8015042:	b013      	add	sp, #76	; 0x4c
 8015044:	ecbd 8b04 	vpop	{d8-d9}
 8015048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801504c:	4b8b      	ldr	r3, [pc, #556]	; (801527c <_dtoa_r+0x2dc>)
 801504e:	9301      	str	r3, [sp, #4]
 8015050:	3303      	adds	r3, #3
 8015052:	e7f3      	b.n	801503c <_dtoa_r+0x9c>
 8015054:	2200      	movs	r2, #0
 8015056:	2300      	movs	r3, #0
 8015058:	4650      	mov	r0, sl
 801505a:	4659      	mov	r1, fp
 801505c:	f7eb fd3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8015060:	ec4b ab19 	vmov	d9, sl, fp
 8015064:	4680      	mov	r8, r0
 8015066:	b158      	cbz	r0, 8015080 <_dtoa_r+0xe0>
 8015068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801506a:	2301      	movs	r3, #1
 801506c:	6013      	str	r3, [r2, #0]
 801506e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015070:	2b00      	cmp	r3, #0
 8015072:	f000 856b 	beq.w	8015b4c <_dtoa_r+0xbac>
 8015076:	4883      	ldr	r0, [pc, #524]	; (8015284 <_dtoa_r+0x2e4>)
 8015078:	6018      	str	r0, [r3, #0]
 801507a:	1e43      	subs	r3, r0, #1
 801507c:	9301      	str	r3, [sp, #4]
 801507e:	e7df      	b.n	8015040 <_dtoa_r+0xa0>
 8015080:	ec4b ab10 	vmov	d0, sl, fp
 8015084:	aa10      	add	r2, sp, #64	; 0x40
 8015086:	a911      	add	r1, sp, #68	; 0x44
 8015088:	4620      	mov	r0, r4
 801508a:	f001 f98b 	bl	80163a4 <__d2b>
 801508e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015092:	ee08 0a10 	vmov	s16, r0
 8015096:	2d00      	cmp	r5, #0
 8015098:	f000 8084 	beq.w	80151a4 <_dtoa_r+0x204>
 801509c:	ee19 3a90 	vmov	r3, s19
 80150a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80150a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80150a8:	4656      	mov	r6, sl
 80150aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80150ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80150b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80150b6:	4b74      	ldr	r3, [pc, #464]	; (8015288 <_dtoa_r+0x2e8>)
 80150b8:	2200      	movs	r2, #0
 80150ba:	4630      	mov	r0, r6
 80150bc:	4639      	mov	r1, r7
 80150be:	f7eb f8eb 	bl	8000298 <__aeabi_dsub>
 80150c2:	a365      	add	r3, pc, #404	; (adr r3, 8015258 <_dtoa_r+0x2b8>)
 80150c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c8:	f7eb fa9e 	bl	8000608 <__aeabi_dmul>
 80150cc:	a364      	add	r3, pc, #400	; (adr r3, 8015260 <_dtoa_r+0x2c0>)
 80150ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d2:	f7eb f8e3 	bl	800029c <__adddf3>
 80150d6:	4606      	mov	r6, r0
 80150d8:	4628      	mov	r0, r5
 80150da:	460f      	mov	r7, r1
 80150dc:	f7eb fa2a 	bl	8000534 <__aeabi_i2d>
 80150e0:	a361      	add	r3, pc, #388	; (adr r3, 8015268 <_dtoa_r+0x2c8>)
 80150e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e6:	f7eb fa8f 	bl	8000608 <__aeabi_dmul>
 80150ea:	4602      	mov	r2, r0
 80150ec:	460b      	mov	r3, r1
 80150ee:	4630      	mov	r0, r6
 80150f0:	4639      	mov	r1, r7
 80150f2:	f7eb f8d3 	bl	800029c <__adddf3>
 80150f6:	4606      	mov	r6, r0
 80150f8:	460f      	mov	r7, r1
 80150fa:	f7eb fd35 	bl	8000b68 <__aeabi_d2iz>
 80150fe:	2200      	movs	r2, #0
 8015100:	9000      	str	r0, [sp, #0]
 8015102:	2300      	movs	r3, #0
 8015104:	4630      	mov	r0, r6
 8015106:	4639      	mov	r1, r7
 8015108:	f7eb fcf0 	bl	8000aec <__aeabi_dcmplt>
 801510c:	b150      	cbz	r0, 8015124 <_dtoa_r+0x184>
 801510e:	9800      	ldr	r0, [sp, #0]
 8015110:	f7eb fa10 	bl	8000534 <__aeabi_i2d>
 8015114:	4632      	mov	r2, r6
 8015116:	463b      	mov	r3, r7
 8015118:	f7eb fcde 	bl	8000ad8 <__aeabi_dcmpeq>
 801511c:	b910      	cbnz	r0, 8015124 <_dtoa_r+0x184>
 801511e:	9b00      	ldr	r3, [sp, #0]
 8015120:	3b01      	subs	r3, #1
 8015122:	9300      	str	r3, [sp, #0]
 8015124:	9b00      	ldr	r3, [sp, #0]
 8015126:	2b16      	cmp	r3, #22
 8015128:	d85a      	bhi.n	80151e0 <_dtoa_r+0x240>
 801512a:	9a00      	ldr	r2, [sp, #0]
 801512c:	4b57      	ldr	r3, [pc, #348]	; (801528c <_dtoa_r+0x2ec>)
 801512e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015136:	ec51 0b19 	vmov	r0, r1, d9
 801513a:	f7eb fcd7 	bl	8000aec <__aeabi_dcmplt>
 801513e:	2800      	cmp	r0, #0
 8015140:	d050      	beq.n	80151e4 <_dtoa_r+0x244>
 8015142:	9b00      	ldr	r3, [sp, #0]
 8015144:	3b01      	subs	r3, #1
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	2300      	movs	r3, #0
 801514a:	930b      	str	r3, [sp, #44]	; 0x2c
 801514c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801514e:	1b5d      	subs	r5, r3, r5
 8015150:	1e6b      	subs	r3, r5, #1
 8015152:	9305      	str	r3, [sp, #20]
 8015154:	bf45      	ittet	mi
 8015156:	f1c5 0301 	rsbmi	r3, r5, #1
 801515a:	9304      	strmi	r3, [sp, #16]
 801515c:	2300      	movpl	r3, #0
 801515e:	2300      	movmi	r3, #0
 8015160:	bf4c      	ite	mi
 8015162:	9305      	strmi	r3, [sp, #20]
 8015164:	9304      	strpl	r3, [sp, #16]
 8015166:	9b00      	ldr	r3, [sp, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	db3d      	blt.n	80151e8 <_dtoa_r+0x248>
 801516c:	9b05      	ldr	r3, [sp, #20]
 801516e:	9a00      	ldr	r2, [sp, #0]
 8015170:	920a      	str	r2, [sp, #40]	; 0x28
 8015172:	4413      	add	r3, r2
 8015174:	9305      	str	r3, [sp, #20]
 8015176:	2300      	movs	r3, #0
 8015178:	9307      	str	r3, [sp, #28]
 801517a:	9b06      	ldr	r3, [sp, #24]
 801517c:	2b09      	cmp	r3, #9
 801517e:	f200 8089 	bhi.w	8015294 <_dtoa_r+0x2f4>
 8015182:	2b05      	cmp	r3, #5
 8015184:	bfc4      	itt	gt
 8015186:	3b04      	subgt	r3, #4
 8015188:	9306      	strgt	r3, [sp, #24]
 801518a:	9b06      	ldr	r3, [sp, #24]
 801518c:	f1a3 0302 	sub.w	r3, r3, #2
 8015190:	bfcc      	ite	gt
 8015192:	2500      	movgt	r5, #0
 8015194:	2501      	movle	r5, #1
 8015196:	2b03      	cmp	r3, #3
 8015198:	f200 8087 	bhi.w	80152aa <_dtoa_r+0x30a>
 801519c:	e8df f003 	tbb	[pc, r3]
 80151a0:	59383a2d 	.word	0x59383a2d
 80151a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80151a8:	441d      	add	r5, r3
 80151aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80151ae:	2b20      	cmp	r3, #32
 80151b0:	bfc1      	itttt	gt
 80151b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80151b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80151ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80151be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80151c2:	bfda      	itte	le
 80151c4:	f1c3 0320 	rsble	r3, r3, #32
 80151c8:	fa06 f003 	lslle.w	r0, r6, r3
 80151cc:	4318      	orrgt	r0, r3
 80151ce:	f7eb f9a1 	bl	8000514 <__aeabi_ui2d>
 80151d2:	2301      	movs	r3, #1
 80151d4:	4606      	mov	r6, r0
 80151d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80151da:	3d01      	subs	r5, #1
 80151dc:	930e      	str	r3, [sp, #56]	; 0x38
 80151de:	e76a      	b.n	80150b6 <_dtoa_r+0x116>
 80151e0:	2301      	movs	r3, #1
 80151e2:	e7b2      	b.n	801514a <_dtoa_r+0x1aa>
 80151e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80151e6:	e7b1      	b.n	801514c <_dtoa_r+0x1ac>
 80151e8:	9b04      	ldr	r3, [sp, #16]
 80151ea:	9a00      	ldr	r2, [sp, #0]
 80151ec:	1a9b      	subs	r3, r3, r2
 80151ee:	9304      	str	r3, [sp, #16]
 80151f0:	4253      	negs	r3, r2
 80151f2:	9307      	str	r3, [sp, #28]
 80151f4:	2300      	movs	r3, #0
 80151f6:	930a      	str	r3, [sp, #40]	; 0x28
 80151f8:	e7bf      	b.n	801517a <_dtoa_r+0x1da>
 80151fa:	2300      	movs	r3, #0
 80151fc:	9308      	str	r3, [sp, #32]
 80151fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015200:	2b00      	cmp	r3, #0
 8015202:	dc55      	bgt.n	80152b0 <_dtoa_r+0x310>
 8015204:	2301      	movs	r3, #1
 8015206:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801520a:	461a      	mov	r2, r3
 801520c:	9209      	str	r2, [sp, #36]	; 0x24
 801520e:	e00c      	b.n	801522a <_dtoa_r+0x28a>
 8015210:	2301      	movs	r3, #1
 8015212:	e7f3      	b.n	80151fc <_dtoa_r+0x25c>
 8015214:	2300      	movs	r3, #0
 8015216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015218:	9308      	str	r3, [sp, #32]
 801521a:	9b00      	ldr	r3, [sp, #0]
 801521c:	4413      	add	r3, r2
 801521e:	9302      	str	r3, [sp, #8]
 8015220:	3301      	adds	r3, #1
 8015222:	2b01      	cmp	r3, #1
 8015224:	9303      	str	r3, [sp, #12]
 8015226:	bfb8      	it	lt
 8015228:	2301      	movlt	r3, #1
 801522a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801522c:	2200      	movs	r2, #0
 801522e:	6042      	str	r2, [r0, #4]
 8015230:	2204      	movs	r2, #4
 8015232:	f102 0614 	add.w	r6, r2, #20
 8015236:	429e      	cmp	r6, r3
 8015238:	6841      	ldr	r1, [r0, #4]
 801523a:	d93d      	bls.n	80152b8 <_dtoa_r+0x318>
 801523c:	4620      	mov	r0, r4
 801523e:	f000 fd89 	bl	8015d54 <_Balloc>
 8015242:	9001      	str	r0, [sp, #4]
 8015244:	2800      	cmp	r0, #0
 8015246:	d13b      	bne.n	80152c0 <_dtoa_r+0x320>
 8015248:	4b11      	ldr	r3, [pc, #68]	; (8015290 <_dtoa_r+0x2f0>)
 801524a:	4602      	mov	r2, r0
 801524c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015250:	e6c0      	b.n	8014fd4 <_dtoa_r+0x34>
 8015252:	2301      	movs	r3, #1
 8015254:	e7df      	b.n	8015216 <_dtoa_r+0x276>
 8015256:	bf00      	nop
 8015258:	636f4361 	.word	0x636f4361
 801525c:	3fd287a7 	.word	0x3fd287a7
 8015260:	8b60c8b3 	.word	0x8b60c8b3
 8015264:	3fc68a28 	.word	0x3fc68a28
 8015268:	509f79fb 	.word	0x509f79fb
 801526c:	3fd34413 	.word	0x3fd34413
 8015270:	08017a35 	.word	0x08017a35
 8015274:	08017a4c 	.word	0x08017a4c
 8015278:	7ff00000 	.word	0x7ff00000
 801527c:	08017a31 	.word	0x08017a31
 8015280:	08017a28 	.word	0x08017a28
 8015284:	08017a05 	.word	0x08017a05
 8015288:	3ff80000 	.word	0x3ff80000
 801528c:	08017b40 	.word	0x08017b40
 8015290:	08017aa7 	.word	0x08017aa7
 8015294:	2501      	movs	r5, #1
 8015296:	2300      	movs	r3, #0
 8015298:	9306      	str	r3, [sp, #24]
 801529a:	9508      	str	r5, [sp, #32]
 801529c:	f04f 33ff 	mov.w	r3, #4294967295
 80152a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80152a4:	2200      	movs	r2, #0
 80152a6:	2312      	movs	r3, #18
 80152a8:	e7b0      	b.n	801520c <_dtoa_r+0x26c>
 80152aa:	2301      	movs	r3, #1
 80152ac:	9308      	str	r3, [sp, #32]
 80152ae:	e7f5      	b.n	801529c <_dtoa_r+0x2fc>
 80152b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80152b6:	e7b8      	b.n	801522a <_dtoa_r+0x28a>
 80152b8:	3101      	adds	r1, #1
 80152ba:	6041      	str	r1, [r0, #4]
 80152bc:	0052      	lsls	r2, r2, #1
 80152be:	e7b8      	b.n	8015232 <_dtoa_r+0x292>
 80152c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152c2:	9a01      	ldr	r2, [sp, #4]
 80152c4:	601a      	str	r2, [r3, #0]
 80152c6:	9b03      	ldr	r3, [sp, #12]
 80152c8:	2b0e      	cmp	r3, #14
 80152ca:	f200 809d 	bhi.w	8015408 <_dtoa_r+0x468>
 80152ce:	2d00      	cmp	r5, #0
 80152d0:	f000 809a 	beq.w	8015408 <_dtoa_r+0x468>
 80152d4:	9b00      	ldr	r3, [sp, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	dd32      	ble.n	8015340 <_dtoa_r+0x3a0>
 80152da:	4ab7      	ldr	r2, [pc, #732]	; (80155b8 <_dtoa_r+0x618>)
 80152dc:	f003 030f 	and.w	r3, r3, #15
 80152e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80152e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80152e8:	9b00      	ldr	r3, [sp, #0]
 80152ea:	05d8      	lsls	r0, r3, #23
 80152ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80152f0:	d516      	bpl.n	8015320 <_dtoa_r+0x380>
 80152f2:	4bb2      	ldr	r3, [pc, #712]	; (80155bc <_dtoa_r+0x61c>)
 80152f4:	ec51 0b19 	vmov	r0, r1, d9
 80152f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80152fc:	f7eb faae 	bl	800085c <__aeabi_ddiv>
 8015300:	f007 070f 	and.w	r7, r7, #15
 8015304:	4682      	mov	sl, r0
 8015306:	468b      	mov	fp, r1
 8015308:	2503      	movs	r5, #3
 801530a:	4eac      	ldr	r6, [pc, #688]	; (80155bc <_dtoa_r+0x61c>)
 801530c:	b957      	cbnz	r7, 8015324 <_dtoa_r+0x384>
 801530e:	4642      	mov	r2, r8
 8015310:	464b      	mov	r3, r9
 8015312:	4650      	mov	r0, sl
 8015314:	4659      	mov	r1, fp
 8015316:	f7eb faa1 	bl	800085c <__aeabi_ddiv>
 801531a:	4682      	mov	sl, r0
 801531c:	468b      	mov	fp, r1
 801531e:	e028      	b.n	8015372 <_dtoa_r+0x3d2>
 8015320:	2502      	movs	r5, #2
 8015322:	e7f2      	b.n	801530a <_dtoa_r+0x36a>
 8015324:	07f9      	lsls	r1, r7, #31
 8015326:	d508      	bpl.n	801533a <_dtoa_r+0x39a>
 8015328:	4640      	mov	r0, r8
 801532a:	4649      	mov	r1, r9
 801532c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015330:	f7eb f96a 	bl	8000608 <__aeabi_dmul>
 8015334:	3501      	adds	r5, #1
 8015336:	4680      	mov	r8, r0
 8015338:	4689      	mov	r9, r1
 801533a:	107f      	asrs	r7, r7, #1
 801533c:	3608      	adds	r6, #8
 801533e:	e7e5      	b.n	801530c <_dtoa_r+0x36c>
 8015340:	f000 809b 	beq.w	801547a <_dtoa_r+0x4da>
 8015344:	9b00      	ldr	r3, [sp, #0]
 8015346:	4f9d      	ldr	r7, [pc, #628]	; (80155bc <_dtoa_r+0x61c>)
 8015348:	425e      	negs	r6, r3
 801534a:	4b9b      	ldr	r3, [pc, #620]	; (80155b8 <_dtoa_r+0x618>)
 801534c:	f006 020f 	and.w	r2, r6, #15
 8015350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015358:	ec51 0b19 	vmov	r0, r1, d9
 801535c:	f7eb f954 	bl	8000608 <__aeabi_dmul>
 8015360:	1136      	asrs	r6, r6, #4
 8015362:	4682      	mov	sl, r0
 8015364:	468b      	mov	fp, r1
 8015366:	2300      	movs	r3, #0
 8015368:	2502      	movs	r5, #2
 801536a:	2e00      	cmp	r6, #0
 801536c:	d17a      	bne.n	8015464 <_dtoa_r+0x4c4>
 801536e:	2b00      	cmp	r3, #0
 8015370:	d1d3      	bne.n	801531a <_dtoa_r+0x37a>
 8015372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015374:	2b00      	cmp	r3, #0
 8015376:	f000 8082 	beq.w	801547e <_dtoa_r+0x4de>
 801537a:	4b91      	ldr	r3, [pc, #580]	; (80155c0 <_dtoa_r+0x620>)
 801537c:	2200      	movs	r2, #0
 801537e:	4650      	mov	r0, sl
 8015380:	4659      	mov	r1, fp
 8015382:	f7eb fbb3 	bl	8000aec <__aeabi_dcmplt>
 8015386:	2800      	cmp	r0, #0
 8015388:	d079      	beq.n	801547e <_dtoa_r+0x4de>
 801538a:	9b03      	ldr	r3, [sp, #12]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d076      	beq.n	801547e <_dtoa_r+0x4de>
 8015390:	9b02      	ldr	r3, [sp, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	dd36      	ble.n	8015404 <_dtoa_r+0x464>
 8015396:	9b00      	ldr	r3, [sp, #0]
 8015398:	4650      	mov	r0, sl
 801539a:	4659      	mov	r1, fp
 801539c:	1e5f      	subs	r7, r3, #1
 801539e:	2200      	movs	r2, #0
 80153a0:	4b88      	ldr	r3, [pc, #544]	; (80155c4 <_dtoa_r+0x624>)
 80153a2:	f7eb f931 	bl	8000608 <__aeabi_dmul>
 80153a6:	9e02      	ldr	r6, [sp, #8]
 80153a8:	4682      	mov	sl, r0
 80153aa:	468b      	mov	fp, r1
 80153ac:	3501      	adds	r5, #1
 80153ae:	4628      	mov	r0, r5
 80153b0:	f7eb f8c0 	bl	8000534 <__aeabi_i2d>
 80153b4:	4652      	mov	r2, sl
 80153b6:	465b      	mov	r3, fp
 80153b8:	f7eb f926 	bl	8000608 <__aeabi_dmul>
 80153bc:	4b82      	ldr	r3, [pc, #520]	; (80155c8 <_dtoa_r+0x628>)
 80153be:	2200      	movs	r2, #0
 80153c0:	f7ea ff6c 	bl	800029c <__adddf3>
 80153c4:	46d0      	mov	r8, sl
 80153c6:	46d9      	mov	r9, fp
 80153c8:	4682      	mov	sl, r0
 80153ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80153ce:	2e00      	cmp	r6, #0
 80153d0:	d158      	bne.n	8015484 <_dtoa_r+0x4e4>
 80153d2:	4b7e      	ldr	r3, [pc, #504]	; (80155cc <_dtoa_r+0x62c>)
 80153d4:	2200      	movs	r2, #0
 80153d6:	4640      	mov	r0, r8
 80153d8:	4649      	mov	r1, r9
 80153da:	f7ea ff5d 	bl	8000298 <__aeabi_dsub>
 80153de:	4652      	mov	r2, sl
 80153e0:	465b      	mov	r3, fp
 80153e2:	4680      	mov	r8, r0
 80153e4:	4689      	mov	r9, r1
 80153e6:	f7eb fb9f 	bl	8000b28 <__aeabi_dcmpgt>
 80153ea:	2800      	cmp	r0, #0
 80153ec:	f040 8295 	bne.w	801591a <_dtoa_r+0x97a>
 80153f0:	4652      	mov	r2, sl
 80153f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80153f6:	4640      	mov	r0, r8
 80153f8:	4649      	mov	r1, r9
 80153fa:	f7eb fb77 	bl	8000aec <__aeabi_dcmplt>
 80153fe:	2800      	cmp	r0, #0
 8015400:	f040 8289 	bne.w	8015916 <_dtoa_r+0x976>
 8015404:	ec5b ab19 	vmov	sl, fp, d9
 8015408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801540a:	2b00      	cmp	r3, #0
 801540c:	f2c0 8148 	blt.w	80156a0 <_dtoa_r+0x700>
 8015410:	9a00      	ldr	r2, [sp, #0]
 8015412:	2a0e      	cmp	r2, #14
 8015414:	f300 8144 	bgt.w	80156a0 <_dtoa_r+0x700>
 8015418:	4b67      	ldr	r3, [pc, #412]	; (80155b8 <_dtoa_r+0x618>)
 801541a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801541e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015424:	2b00      	cmp	r3, #0
 8015426:	f280 80d5 	bge.w	80155d4 <_dtoa_r+0x634>
 801542a:	9b03      	ldr	r3, [sp, #12]
 801542c:	2b00      	cmp	r3, #0
 801542e:	f300 80d1 	bgt.w	80155d4 <_dtoa_r+0x634>
 8015432:	f040 826f 	bne.w	8015914 <_dtoa_r+0x974>
 8015436:	4b65      	ldr	r3, [pc, #404]	; (80155cc <_dtoa_r+0x62c>)
 8015438:	2200      	movs	r2, #0
 801543a:	4640      	mov	r0, r8
 801543c:	4649      	mov	r1, r9
 801543e:	f7eb f8e3 	bl	8000608 <__aeabi_dmul>
 8015442:	4652      	mov	r2, sl
 8015444:	465b      	mov	r3, fp
 8015446:	f7eb fb65 	bl	8000b14 <__aeabi_dcmpge>
 801544a:	9e03      	ldr	r6, [sp, #12]
 801544c:	4637      	mov	r7, r6
 801544e:	2800      	cmp	r0, #0
 8015450:	f040 8245 	bne.w	80158de <_dtoa_r+0x93e>
 8015454:	9d01      	ldr	r5, [sp, #4]
 8015456:	2331      	movs	r3, #49	; 0x31
 8015458:	f805 3b01 	strb.w	r3, [r5], #1
 801545c:	9b00      	ldr	r3, [sp, #0]
 801545e:	3301      	adds	r3, #1
 8015460:	9300      	str	r3, [sp, #0]
 8015462:	e240      	b.n	80158e6 <_dtoa_r+0x946>
 8015464:	07f2      	lsls	r2, r6, #31
 8015466:	d505      	bpl.n	8015474 <_dtoa_r+0x4d4>
 8015468:	e9d7 2300 	ldrd	r2, r3, [r7]
 801546c:	f7eb f8cc 	bl	8000608 <__aeabi_dmul>
 8015470:	3501      	adds	r5, #1
 8015472:	2301      	movs	r3, #1
 8015474:	1076      	asrs	r6, r6, #1
 8015476:	3708      	adds	r7, #8
 8015478:	e777      	b.n	801536a <_dtoa_r+0x3ca>
 801547a:	2502      	movs	r5, #2
 801547c:	e779      	b.n	8015372 <_dtoa_r+0x3d2>
 801547e:	9f00      	ldr	r7, [sp, #0]
 8015480:	9e03      	ldr	r6, [sp, #12]
 8015482:	e794      	b.n	80153ae <_dtoa_r+0x40e>
 8015484:	9901      	ldr	r1, [sp, #4]
 8015486:	4b4c      	ldr	r3, [pc, #304]	; (80155b8 <_dtoa_r+0x618>)
 8015488:	4431      	add	r1, r6
 801548a:	910d      	str	r1, [sp, #52]	; 0x34
 801548c:	9908      	ldr	r1, [sp, #32]
 801548e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015496:	2900      	cmp	r1, #0
 8015498:	d043      	beq.n	8015522 <_dtoa_r+0x582>
 801549a:	494d      	ldr	r1, [pc, #308]	; (80155d0 <_dtoa_r+0x630>)
 801549c:	2000      	movs	r0, #0
 801549e:	f7eb f9dd 	bl	800085c <__aeabi_ddiv>
 80154a2:	4652      	mov	r2, sl
 80154a4:	465b      	mov	r3, fp
 80154a6:	f7ea fef7 	bl	8000298 <__aeabi_dsub>
 80154aa:	9d01      	ldr	r5, [sp, #4]
 80154ac:	4682      	mov	sl, r0
 80154ae:	468b      	mov	fp, r1
 80154b0:	4649      	mov	r1, r9
 80154b2:	4640      	mov	r0, r8
 80154b4:	f7eb fb58 	bl	8000b68 <__aeabi_d2iz>
 80154b8:	4606      	mov	r6, r0
 80154ba:	f7eb f83b 	bl	8000534 <__aeabi_i2d>
 80154be:	4602      	mov	r2, r0
 80154c0:	460b      	mov	r3, r1
 80154c2:	4640      	mov	r0, r8
 80154c4:	4649      	mov	r1, r9
 80154c6:	f7ea fee7 	bl	8000298 <__aeabi_dsub>
 80154ca:	3630      	adds	r6, #48	; 0x30
 80154cc:	f805 6b01 	strb.w	r6, [r5], #1
 80154d0:	4652      	mov	r2, sl
 80154d2:	465b      	mov	r3, fp
 80154d4:	4680      	mov	r8, r0
 80154d6:	4689      	mov	r9, r1
 80154d8:	f7eb fb08 	bl	8000aec <__aeabi_dcmplt>
 80154dc:	2800      	cmp	r0, #0
 80154de:	d163      	bne.n	80155a8 <_dtoa_r+0x608>
 80154e0:	4642      	mov	r2, r8
 80154e2:	464b      	mov	r3, r9
 80154e4:	4936      	ldr	r1, [pc, #216]	; (80155c0 <_dtoa_r+0x620>)
 80154e6:	2000      	movs	r0, #0
 80154e8:	f7ea fed6 	bl	8000298 <__aeabi_dsub>
 80154ec:	4652      	mov	r2, sl
 80154ee:	465b      	mov	r3, fp
 80154f0:	f7eb fafc 	bl	8000aec <__aeabi_dcmplt>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	f040 80b5 	bne.w	8015664 <_dtoa_r+0x6c4>
 80154fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154fc:	429d      	cmp	r5, r3
 80154fe:	d081      	beq.n	8015404 <_dtoa_r+0x464>
 8015500:	4b30      	ldr	r3, [pc, #192]	; (80155c4 <_dtoa_r+0x624>)
 8015502:	2200      	movs	r2, #0
 8015504:	4650      	mov	r0, sl
 8015506:	4659      	mov	r1, fp
 8015508:	f7eb f87e 	bl	8000608 <__aeabi_dmul>
 801550c:	4b2d      	ldr	r3, [pc, #180]	; (80155c4 <_dtoa_r+0x624>)
 801550e:	4682      	mov	sl, r0
 8015510:	468b      	mov	fp, r1
 8015512:	4640      	mov	r0, r8
 8015514:	4649      	mov	r1, r9
 8015516:	2200      	movs	r2, #0
 8015518:	f7eb f876 	bl	8000608 <__aeabi_dmul>
 801551c:	4680      	mov	r8, r0
 801551e:	4689      	mov	r9, r1
 8015520:	e7c6      	b.n	80154b0 <_dtoa_r+0x510>
 8015522:	4650      	mov	r0, sl
 8015524:	4659      	mov	r1, fp
 8015526:	f7eb f86f 	bl	8000608 <__aeabi_dmul>
 801552a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801552c:	9d01      	ldr	r5, [sp, #4]
 801552e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015530:	4682      	mov	sl, r0
 8015532:	468b      	mov	fp, r1
 8015534:	4649      	mov	r1, r9
 8015536:	4640      	mov	r0, r8
 8015538:	f7eb fb16 	bl	8000b68 <__aeabi_d2iz>
 801553c:	4606      	mov	r6, r0
 801553e:	f7ea fff9 	bl	8000534 <__aeabi_i2d>
 8015542:	3630      	adds	r6, #48	; 0x30
 8015544:	4602      	mov	r2, r0
 8015546:	460b      	mov	r3, r1
 8015548:	4640      	mov	r0, r8
 801554a:	4649      	mov	r1, r9
 801554c:	f7ea fea4 	bl	8000298 <__aeabi_dsub>
 8015550:	f805 6b01 	strb.w	r6, [r5], #1
 8015554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015556:	429d      	cmp	r5, r3
 8015558:	4680      	mov	r8, r0
 801555a:	4689      	mov	r9, r1
 801555c:	f04f 0200 	mov.w	r2, #0
 8015560:	d124      	bne.n	80155ac <_dtoa_r+0x60c>
 8015562:	4b1b      	ldr	r3, [pc, #108]	; (80155d0 <_dtoa_r+0x630>)
 8015564:	4650      	mov	r0, sl
 8015566:	4659      	mov	r1, fp
 8015568:	f7ea fe98 	bl	800029c <__adddf3>
 801556c:	4602      	mov	r2, r0
 801556e:	460b      	mov	r3, r1
 8015570:	4640      	mov	r0, r8
 8015572:	4649      	mov	r1, r9
 8015574:	f7eb fad8 	bl	8000b28 <__aeabi_dcmpgt>
 8015578:	2800      	cmp	r0, #0
 801557a:	d173      	bne.n	8015664 <_dtoa_r+0x6c4>
 801557c:	4652      	mov	r2, sl
 801557e:	465b      	mov	r3, fp
 8015580:	4913      	ldr	r1, [pc, #76]	; (80155d0 <_dtoa_r+0x630>)
 8015582:	2000      	movs	r0, #0
 8015584:	f7ea fe88 	bl	8000298 <__aeabi_dsub>
 8015588:	4602      	mov	r2, r0
 801558a:	460b      	mov	r3, r1
 801558c:	4640      	mov	r0, r8
 801558e:	4649      	mov	r1, r9
 8015590:	f7eb faac 	bl	8000aec <__aeabi_dcmplt>
 8015594:	2800      	cmp	r0, #0
 8015596:	f43f af35 	beq.w	8015404 <_dtoa_r+0x464>
 801559a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801559c:	1e6b      	subs	r3, r5, #1
 801559e:	930f      	str	r3, [sp, #60]	; 0x3c
 80155a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80155a4:	2b30      	cmp	r3, #48	; 0x30
 80155a6:	d0f8      	beq.n	801559a <_dtoa_r+0x5fa>
 80155a8:	9700      	str	r7, [sp, #0]
 80155aa:	e049      	b.n	8015640 <_dtoa_r+0x6a0>
 80155ac:	4b05      	ldr	r3, [pc, #20]	; (80155c4 <_dtoa_r+0x624>)
 80155ae:	f7eb f82b 	bl	8000608 <__aeabi_dmul>
 80155b2:	4680      	mov	r8, r0
 80155b4:	4689      	mov	r9, r1
 80155b6:	e7bd      	b.n	8015534 <_dtoa_r+0x594>
 80155b8:	08017b40 	.word	0x08017b40
 80155bc:	08017b18 	.word	0x08017b18
 80155c0:	3ff00000 	.word	0x3ff00000
 80155c4:	40240000 	.word	0x40240000
 80155c8:	401c0000 	.word	0x401c0000
 80155cc:	40140000 	.word	0x40140000
 80155d0:	3fe00000 	.word	0x3fe00000
 80155d4:	9d01      	ldr	r5, [sp, #4]
 80155d6:	4656      	mov	r6, sl
 80155d8:	465f      	mov	r7, fp
 80155da:	4642      	mov	r2, r8
 80155dc:	464b      	mov	r3, r9
 80155de:	4630      	mov	r0, r6
 80155e0:	4639      	mov	r1, r7
 80155e2:	f7eb f93b 	bl	800085c <__aeabi_ddiv>
 80155e6:	f7eb fabf 	bl	8000b68 <__aeabi_d2iz>
 80155ea:	4682      	mov	sl, r0
 80155ec:	f7ea ffa2 	bl	8000534 <__aeabi_i2d>
 80155f0:	4642      	mov	r2, r8
 80155f2:	464b      	mov	r3, r9
 80155f4:	f7eb f808 	bl	8000608 <__aeabi_dmul>
 80155f8:	4602      	mov	r2, r0
 80155fa:	460b      	mov	r3, r1
 80155fc:	4630      	mov	r0, r6
 80155fe:	4639      	mov	r1, r7
 8015600:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015604:	f7ea fe48 	bl	8000298 <__aeabi_dsub>
 8015608:	f805 6b01 	strb.w	r6, [r5], #1
 801560c:	9e01      	ldr	r6, [sp, #4]
 801560e:	9f03      	ldr	r7, [sp, #12]
 8015610:	1bae      	subs	r6, r5, r6
 8015612:	42b7      	cmp	r7, r6
 8015614:	4602      	mov	r2, r0
 8015616:	460b      	mov	r3, r1
 8015618:	d135      	bne.n	8015686 <_dtoa_r+0x6e6>
 801561a:	f7ea fe3f 	bl	800029c <__adddf3>
 801561e:	4642      	mov	r2, r8
 8015620:	464b      	mov	r3, r9
 8015622:	4606      	mov	r6, r0
 8015624:	460f      	mov	r7, r1
 8015626:	f7eb fa7f 	bl	8000b28 <__aeabi_dcmpgt>
 801562a:	b9d0      	cbnz	r0, 8015662 <_dtoa_r+0x6c2>
 801562c:	4642      	mov	r2, r8
 801562e:	464b      	mov	r3, r9
 8015630:	4630      	mov	r0, r6
 8015632:	4639      	mov	r1, r7
 8015634:	f7eb fa50 	bl	8000ad8 <__aeabi_dcmpeq>
 8015638:	b110      	cbz	r0, 8015640 <_dtoa_r+0x6a0>
 801563a:	f01a 0f01 	tst.w	sl, #1
 801563e:	d110      	bne.n	8015662 <_dtoa_r+0x6c2>
 8015640:	4620      	mov	r0, r4
 8015642:	ee18 1a10 	vmov	r1, s16
 8015646:	f000 fbc5 	bl	8015dd4 <_Bfree>
 801564a:	2300      	movs	r3, #0
 801564c:	9800      	ldr	r0, [sp, #0]
 801564e:	702b      	strb	r3, [r5, #0]
 8015650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015652:	3001      	adds	r0, #1
 8015654:	6018      	str	r0, [r3, #0]
 8015656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015658:	2b00      	cmp	r3, #0
 801565a:	f43f acf1 	beq.w	8015040 <_dtoa_r+0xa0>
 801565e:	601d      	str	r5, [r3, #0]
 8015660:	e4ee      	b.n	8015040 <_dtoa_r+0xa0>
 8015662:	9f00      	ldr	r7, [sp, #0]
 8015664:	462b      	mov	r3, r5
 8015666:	461d      	mov	r5, r3
 8015668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801566c:	2a39      	cmp	r2, #57	; 0x39
 801566e:	d106      	bne.n	801567e <_dtoa_r+0x6de>
 8015670:	9a01      	ldr	r2, [sp, #4]
 8015672:	429a      	cmp	r2, r3
 8015674:	d1f7      	bne.n	8015666 <_dtoa_r+0x6c6>
 8015676:	9901      	ldr	r1, [sp, #4]
 8015678:	2230      	movs	r2, #48	; 0x30
 801567a:	3701      	adds	r7, #1
 801567c:	700a      	strb	r2, [r1, #0]
 801567e:	781a      	ldrb	r2, [r3, #0]
 8015680:	3201      	adds	r2, #1
 8015682:	701a      	strb	r2, [r3, #0]
 8015684:	e790      	b.n	80155a8 <_dtoa_r+0x608>
 8015686:	4ba6      	ldr	r3, [pc, #664]	; (8015920 <_dtoa_r+0x980>)
 8015688:	2200      	movs	r2, #0
 801568a:	f7ea ffbd 	bl	8000608 <__aeabi_dmul>
 801568e:	2200      	movs	r2, #0
 8015690:	2300      	movs	r3, #0
 8015692:	4606      	mov	r6, r0
 8015694:	460f      	mov	r7, r1
 8015696:	f7eb fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 801569a:	2800      	cmp	r0, #0
 801569c:	d09d      	beq.n	80155da <_dtoa_r+0x63a>
 801569e:	e7cf      	b.n	8015640 <_dtoa_r+0x6a0>
 80156a0:	9a08      	ldr	r2, [sp, #32]
 80156a2:	2a00      	cmp	r2, #0
 80156a4:	f000 80d7 	beq.w	8015856 <_dtoa_r+0x8b6>
 80156a8:	9a06      	ldr	r2, [sp, #24]
 80156aa:	2a01      	cmp	r2, #1
 80156ac:	f300 80ba 	bgt.w	8015824 <_dtoa_r+0x884>
 80156b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156b2:	2a00      	cmp	r2, #0
 80156b4:	f000 80b2 	beq.w	801581c <_dtoa_r+0x87c>
 80156b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80156bc:	9e07      	ldr	r6, [sp, #28]
 80156be:	9d04      	ldr	r5, [sp, #16]
 80156c0:	9a04      	ldr	r2, [sp, #16]
 80156c2:	441a      	add	r2, r3
 80156c4:	9204      	str	r2, [sp, #16]
 80156c6:	9a05      	ldr	r2, [sp, #20]
 80156c8:	2101      	movs	r1, #1
 80156ca:	441a      	add	r2, r3
 80156cc:	4620      	mov	r0, r4
 80156ce:	9205      	str	r2, [sp, #20]
 80156d0:	f000 fc38 	bl	8015f44 <__i2b>
 80156d4:	4607      	mov	r7, r0
 80156d6:	2d00      	cmp	r5, #0
 80156d8:	dd0c      	ble.n	80156f4 <_dtoa_r+0x754>
 80156da:	9b05      	ldr	r3, [sp, #20]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	dd09      	ble.n	80156f4 <_dtoa_r+0x754>
 80156e0:	42ab      	cmp	r3, r5
 80156e2:	9a04      	ldr	r2, [sp, #16]
 80156e4:	bfa8      	it	ge
 80156e6:	462b      	movge	r3, r5
 80156e8:	1ad2      	subs	r2, r2, r3
 80156ea:	9204      	str	r2, [sp, #16]
 80156ec:	9a05      	ldr	r2, [sp, #20]
 80156ee:	1aed      	subs	r5, r5, r3
 80156f0:	1ad3      	subs	r3, r2, r3
 80156f2:	9305      	str	r3, [sp, #20]
 80156f4:	9b07      	ldr	r3, [sp, #28]
 80156f6:	b31b      	cbz	r3, 8015740 <_dtoa_r+0x7a0>
 80156f8:	9b08      	ldr	r3, [sp, #32]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	f000 80af 	beq.w	801585e <_dtoa_r+0x8be>
 8015700:	2e00      	cmp	r6, #0
 8015702:	dd13      	ble.n	801572c <_dtoa_r+0x78c>
 8015704:	4639      	mov	r1, r7
 8015706:	4632      	mov	r2, r6
 8015708:	4620      	mov	r0, r4
 801570a:	f000 fcdb 	bl	80160c4 <__pow5mult>
 801570e:	ee18 2a10 	vmov	r2, s16
 8015712:	4601      	mov	r1, r0
 8015714:	4607      	mov	r7, r0
 8015716:	4620      	mov	r0, r4
 8015718:	f000 fc2a 	bl	8015f70 <__multiply>
 801571c:	ee18 1a10 	vmov	r1, s16
 8015720:	4680      	mov	r8, r0
 8015722:	4620      	mov	r0, r4
 8015724:	f000 fb56 	bl	8015dd4 <_Bfree>
 8015728:	ee08 8a10 	vmov	s16, r8
 801572c:	9b07      	ldr	r3, [sp, #28]
 801572e:	1b9a      	subs	r2, r3, r6
 8015730:	d006      	beq.n	8015740 <_dtoa_r+0x7a0>
 8015732:	ee18 1a10 	vmov	r1, s16
 8015736:	4620      	mov	r0, r4
 8015738:	f000 fcc4 	bl	80160c4 <__pow5mult>
 801573c:	ee08 0a10 	vmov	s16, r0
 8015740:	2101      	movs	r1, #1
 8015742:	4620      	mov	r0, r4
 8015744:	f000 fbfe 	bl	8015f44 <__i2b>
 8015748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801574a:	2b00      	cmp	r3, #0
 801574c:	4606      	mov	r6, r0
 801574e:	f340 8088 	ble.w	8015862 <_dtoa_r+0x8c2>
 8015752:	461a      	mov	r2, r3
 8015754:	4601      	mov	r1, r0
 8015756:	4620      	mov	r0, r4
 8015758:	f000 fcb4 	bl	80160c4 <__pow5mult>
 801575c:	9b06      	ldr	r3, [sp, #24]
 801575e:	2b01      	cmp	r3, #1
 8015760:	4606      	mov	r6, r0
 8015762:	f340 8081 	ble.w	8015868 <_dtoa_r+0x8c8>
 8015766:	f04f 0800 	mov.w	r8, #0
 801576a:	6933      	ldr	r3, [r6, #16]
 801576c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015770:	6918      	ldr	r0, [r3, #16]
 8015772:	f000 fb97 	bl	8015ea4 <__hi0bits>
 8015776:	f1c0 0020 	rsb	r0, r0, #32
 801577a:	9b05      	ldr	r3, [sp, #20]
 801577c:	4418      	add	r0, r3
 801577e:	f010 001f 	ands.w	r0, r0, #31
 8015782:	f000 8092 	beq.w	80158aa <_dtoa_r+0x90a>
 8015786:	f1c0 0320 	rsb	r3, r0, #32
 801578a:	2b04      	cmp	r3, #4
 801578c:	f340 808a 	ble.w	80158a4 <_dtoa_r+0x904>
 8015790:	f1c0 001c 	rsb	r0, r0, #28
 8015794:	9b04      	ldr	r3, [sp, #16]
 8015796:	4403      	add	r3, r0
 8015798:	9304      	str	r3, [sp, #16]
 801579a:	9b05      	ldr	r3, [sp, #20]
 801579c:	4403      	add	r3, r0
 801579e:	4405      	add	r5, r0
 80157a0:	9305      	str	r3, [sp, #20]
 80157a2:	9b04      	ldr	r3, [sp, #16]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	dd07      	ble.n	80157b8 <_dtoa_r+0x818>
 80157a8:	ee18 1a10 	vmov	r1, s16
 80157ac:	461a      	mov	r2, r3
 80157ae:	4620      	mov	r0, r4
 80157b0:	f000 fce2 	bl	8016178 <__lshift>
 80157b4:	ee08 0a10 	vmov	s16, r0
 80157b8:	9b05      	ldr	r3, [sp, #20]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	dd05      	ble.n	80157ca <_dtoa_r+0x82a>
 80157be:	4631      	mov	r1, r6
 80157c0:	461a      	mov	r2, r3
 80157c2:	4620      	mov	r0, r4
 80157c4:	f000 fcd8 	bl	8016178 <__lshift>
 80157c8:	4606      	mov	r6, r0
 80157ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d06e      	beq.n	80158ae <_dtoa_r+0x90e>
 80157d0:	ee18 0a10 	vmov	r0, s16
 80157d4:	4631      	mov	r1, r6
 80157d6:	f000 fd3f 	bl	8016258 <__mcmp>
 80157da:	2800      	cmp	r0, #0
 80157dc:	da67      	bge.n	80158ae <_dtoa_r+0x90e>
 80157de:	9b00      	ldr	r3, [sp, #0]
 80157e0:	3b01      	subs	r3, #1
 80157e2:	ee18 1a10 	vmov	r1, s16
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	220a      	movs	r2, #10
 80157ea:	2300      	movs	r3, #0
 80157ec:	4620      	mov	r0, r4
 80157ee:	f000 fb13 	bl	8015e18 <__multadd>
 80157f2:	9b08      	ldr	r3, [sp, #32]
 80157f4:	ee08 0a10 	vmov	s16, r0
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	f000 81b1 	beq.w	8015b60 <_dtoa_r+0xbc0>
 80157fe:	2300      	movs	r3, #0
 8015800:	4639      	mov	r1, r7
 8015802:	220a      	movs	r2, #10
 8015804:	4620      	mov	r0, r4
 8015806:	f000 fb07 	bl	8015e18 <__multadd>
 801580a:	9b02      	ldr	r3, [sp, #8]
 801580c:	2b00      	cmp	r3, #0
 801580e:	4607      	mov	r7, r0
 8015810:	f300 808e 	bgt.w	8015930 <_dtoa_r+0x990>
 8015814:	9b06      	ldr	r3, [sp, #24]
 8015816:	2b02      	cmp	r3, #2
 8015818:	dc51      	bgt.n	80158be <_dtoa_r+0x91e>
 801581a:	e089      	b.n	8015930 <_dtoa_r+0x990>
 801581c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801581e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015822:	e74b      	b.n	80156bc <_dtoa_r+0x71c>
 8015824:	9b03      	ldr	r3, [sp, #12]
 8015826:	1e5e      	subs	r6, r3, #1
 8015828:	9b07      	ldr	r3, [sp, #28]
 801582a:	42b3      	cmp	r3, r6
 801582c:	bfbf      	itttt	lt
 801582e:	9b07      	ldrlt	r3, [sp, #28]
 8015830:	9607      	strlt	r6, [sp, #28]
 8015832:	1af2      	sublt	r2, r6, r3
 8015834:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015836:	bfb6      	itet	lt
 8015838:	189b      	addlt	r3, r3, r2
 801583a:	1b9e      	subge	r6, r3, r6
 801583c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801583e:	9b03      	ldr	r3, [sp, #12]
 8015840:	bfb8      	it	lt
 8015842:	2600      	movlt	r6, #0
 8015844:	2b00      	cmp	r3, #0
 8015846:	bfb7      	itett	lt
 8015848:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801584c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015850:	1a9d      	sublt	r5, r3, r2
 8015852:	2300      	movlt	r3, #0
 8015854:	e734      	b.n	80156c0 <_dtoa_r+0x720>
 8015856:	9e07      	ldr	r6, [sp, #28]
 8015858:	9d04      	ldr	r5, [sp, #16]
 801585a:	9f08      	ldr	r7, [sp, #32]
 801585c:	e73b      	b.n	80156d6 <_dtoa_r+0x736>
 801585e:	9a07      	ldr	r2, [sp, #28]
 8015860:	e767      	b.n	8015732 <_dtoa_r+0x792>
 8015862:	9b06      	ldr	r3, [sp, #24]
 8015864:	2b01      	cmp	r3, #1
 8015866:	dc18      	bgt.n	801589a <_dtoa_r+0x8fa>
 8015868:	f1ba 0f00 	cmp.w	sl, #0
 801586c:	d115      	bne.n	801589a <_dtoa_r+0x8fa>
 801586e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015872:	b993      	cbnz	r3, 801589a <_dtoa_r+0x8fa>
 8015874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015878:	0d1b      	lsrs	r3, r3, #20
 801587a:	051b      	lsls	r3, r3, #20
 801587c:	b183      	cbz	r3, 80158a0 <_dtoa_r+0x900>
 801587e:	9b04      	ldr	r3, [sp, #16]
 8015880:	3301      	adds	r3, #1
 8015882:	9304      	str	r3, [sp, #16]
 8015884:	9b05      	ldr	r3, [sp, #20]
 8015886:	3301      	adds	r3, #1
 8015888:	9305      	str	r3, [sp, #20]
 801588a:	f04f 0801 	mov.w	r8, #1
 801588e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015890:	2b00      	cmp	r3, #0
 8015892:	f47f af6a 	bne.w	801576a <_dtoa_r+0x7ca>
 8015896:	2001      	movs	r0, #1
 8015898:	e76f      	b.n	801577a <_dtoa_r+0x7da>
 801589a:	f04f 0800 	mov.w	r8, #0
 801589e:	e7f6      	b.n	801588e <_dtoa_r+0x8ee>
 80158a0:	4698      	mov	r8, r3
 80158a2:	e7f4      	b.n	801588e <_dtoa_r+0x8ee>
 80158a4:	f43f af7d 	beq.w	80157a2 <_dtoa_r+0x802>
 80158a8:	4618      	mov	r0, r3
 80158aa:	301c      	adds	r0, #28
 80158ac:	e772      	b.n	8015794 <_dtoa_r+0x7f4>
 80158ae:	9b03      	ldr	r3, [sp, #12]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	dc37      	bgt.n	8015924 <_dtoa_r+0x984>
 80158b4:	9b06      	ldr	r3, [sp, #24]
 80158b6:	2b02      	cmp	r3, #2
 80158b8:	dd34      	ble.n	8015924 <_dtoa_r+0x984>
 80158ba:	9b03      	ldr	r3, [sp, #12]
 80158bc:	9302      	str	r3, [sp, #8]
 80158be:	9b02      	ldr	r3, [sp, #8]
 80158c0:	b96b      	cbnz	r3, 80158de <_dtoa_r+0x93e>
 80158c2:	4631      	mov	r1, r6
 80158c4:	2205      	movs	r2, #5
 80158c6:	4620      	mov	r0, r4
 80158c8:	f000 faa6 	bl	8015e18 <__multadd>
 80158cc:	4601      	mov	r1, r0
 80158ce:	4606      	mov	r6, r0
 80158d0:	ee18 0a10 	vmov	r0, s16
 80158d4:	f000 fcc0 	bl	8016258 <__mcmp>
 80158d8:	2800      	cmp	r0, #0
 80158da:	f73f adbb 	bgt.w	8015454 <_dtoa_r+0x4b4>
 80158de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158e0:	9d01      	ldr	r5, [sp, #4]
 80158e2:	43db      	mvns	r3, r3
 80158e4:	9300      	str	r3, [sp, #0]
 80158e6:	f04f 0800 	mov.w	r8, #0
 80158ea:	4631      	mov	r1, r6
 80158ec:	4620      	mov	r0, r4
 80158ee:	f000 fa71 	bl	8015dd4 <_Bfree>
 80158f2:	2f00      	cmp	r7, #0
 80158f4:	f43f aea4 	beq.w	8015640 <_dtoa_r+0x6a0>
 80158f8:	f1b8 0f00 	cmp.w	r8, #0
 80158fc:	d005      	beq.n	801590a <_dtoa_r+0x96a>
 80158fe:	45b8      	cmp	r8, r7
 8015900:	d003      	beq.n	801590a <_dtoa_r+0x96a>
 8015902:	4641      	mov	r1, r8
 8015904:	4620      	mov	r0, r4
 8015906:	f000 fa65 	bl	8015dd4 <_Bfree>
 801590a:	4639      	mov	r1, r7
 801590c:	4620      	mov	r0, r4
 801590e:	f000 fa61 	bl	8015dd4 <_Bfree>
 8015912:	e695      	b.n	8015640 <_dtoa_r+0x6a0>
 8015914:	2600      	movs	r6, #0
 8015916:	4637      	mov	r7, r6
 8015918:	e7e1      	b.n	80158de <_dtoa_r+0x93e>
 801591a:	9700      	str	r7, [sp, #0]
 801591c:	4637      	mov	r7, r6
 801591e:	e599      	b.n	8015454 <_dtoa_r+0x4b4>
 8015920:	40240000 	.word	0x40240000
 8015924:	9b08      	ldr	r3, [sp, #32]
 8015926:	2b00      	cmp	r3, #0
 8015928:	f000 80ca 	beq.w	8015ac0 <_dtoa_r+0xb20>
 801592c:	9b03      	ldr	r3, [sp, #12]
 801592e:	9302      	str	r3, [sp, #8]
 8015930:	2d00      	cmp	r5, #0
 8015932:	dd05      	ble.n	8015940 <_dtoa_r+0x9a0>
 8015934:	4639      	mov	r1, r7
 8015936:	462a      	mov	r2, r5
 8015938:	4620      	mov	r0, r4
 801593a:	f000 fc1d 	bl	8016178 <__lshift>
 801593e:	4607      	mov	r7, r0
 8015940:	f1b8 0f00 	cmp.w	r8, #0
 8015944:	d05b      	beq.n	80159fe <_dtoa_r+0xa5e>
 8015946:	6879      	ldr	r1, [r7, #4]
 8015948:	4620      	mov	r0, r4
 801594a:	f000 fa03 	bl	8015d54 <_Balloc>
 801594e:	4605      	mov	r5, r0
 8015950:	b928      	cbnz	r0, 801595e <_dtoa_r+0x9be>
 8015952:	4b87      	ldr	r3, [pc, #540]	; (8015b70 <_dtoa_r+0xbd0>)
 8015954:	4602      	mov	r2, r0
 8015956:	f240 21ea 	movw	r1, #746	; 0x2ea
 801595a:	f7ff bb3b 	b.w	8014fd4 <_dtoa_r+0x34>
 801595e:	693a      	ldr	r2, [r7, #16]
 8015960:	3202      	adds	r2, #2
 8015962:	0092      	lsls	r2, r2, #2
 8015964:	f107 010c 	add.w	r1, r7, #12
 8015968:	300c      	adds	r0, #12
 801596a:	f7fe fc50 	bl	801420e <memcpy>
 801596e:	2201      	movs	r2, #1
 8015970:	4629      	mov	r1, r5
 8015972:	4620      	mov	r0, r4
 8015974:	f000 fc00 	bl	8016178 <__lshift>
 8015978:	9b01      	ldr	r3, [sp, #4]
 801597a:	f103 0901 	add.w	r9, r3, #1
 801597e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015982:	4413      	add	r3, r2
 8015984:	9305      	str	r3, [sp, #20]
 8015986:	f00a 0301 	and.w	r3, sl, #1
 801598a:	46b8      	mov	r8, r7
 801598c:	9304      	str	r3, [sp, #16]
 801598e:	4607      	mov	r7, r0
 8015990:	4631      	mov	r1, r6
 8015992:	ee18 0a10 	vmov	r0, s16
 8015996:	f7ff fa77 	bl	8014e88 <quorem>
 801599a:	4641      	mov	r1, r8
 801599c:	9002      	str	r0, [sp, #8]
 801599e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80159a2:	ee18 0a10 	vmov	r0, s16
 80159a6:	f000 fc57 	bl	8016258 <__mcmp>
 80159aa:	463a      	mov	r2, r7
 80159ac:	9003      	str	r0, [sp, #12]
 80159ae:	4631      	mov	r1, r6
 80159b0:	4620      	mov	r0, r4
 80159b2:	f000 fc6d 	bl	8016290 <__mdiff>
 80159b6:	68c2      	ldr	r2, [r0, #12]
 80159b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80159bc:	4605      	mov	r5, r0
 80159be:	bb02      	cbnz	r2, 8015a02 <_dtoa_r+0xa62>
 80159c0:	4601      	mov	r1, r0
 80159c2:	ee18 0a10 	vmov	r0, s16
 80159c6:	f000 fc47 	bl	8016258 <__mcmp>
 80159ca:	4602      	mov	r2, r0
 80159cc:	4629      	mov	r1, r5
 80159ce:	4620      	mov	r0, r4
 80159d0:	9207      	str	r2, [sp, #28]
 80159d2:	f000 f9ff 	bl	8015dd4 <_Bfree>
 80159d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80159da:	ea43 0102 	orr.w	r1, r3, r2
 80159de:	9b04      	ldr	r3, [sp, #16]
 80159e0:	430b      	orrs	r3, r1
 80159e2:	464d      	mov	r5, r9
 80159e4:	d10f      	bne.n	8015a06 <_dtoa_r+0xa66>
 80159e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80159ea:	d02a      	beq.n	8015a42 <_dtoa_r+0xaa2>
 80159ec:	9b03      	ldr	r3, [sp, #12]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	dd02      	ble.n	80159f8 <_dtoa_r+0xa58>
 80159f2:	9b02      	ldr	r3, [sp, #8]
 80159f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80159f8:	f88b a000 	strb.w	sl, [fp]
 80159fc:	e775      	b.n	80158ea <_dtoa_r+0x94a>
 80159fe:	4638      	mov	r0, r7
 8015a00:	e7ba      	b.n	8015978 <_dtoa_r+0x9d8>
 8015a02:	2201      	movs	r2, #1
 8015a04:	e7e2      	b.n	80159cc <_dtoa_r+0xa2c>
 8015a06:	9b03      	ldr	r3, [sp, #12]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	db04      	blt.n	8015a16 <_dtoa_r+0xa76>
 8015a0c:	9906      	ldr	r1, [sp, #24]
 8015a0e:	430b      	orrs	r3, r1
 8015a10:	9904      	ldr	r1, [sp, #16]
 8015a12:	430b      	orrs	r3, r1
 8015a14:	d122      	bne.n	8015a5c <_dtoa_r+0xabc>
 8015a16:	2a00      	cmp	r2, #0
 8015a18:	ddee      	ble.n	80159f8 <_dtoa_r+0xa58>
 8015a1a:	ee18 1a10 	vmov	r1, s16
 8015a1e:	2201      	movs	r2, #1
 8015a20:	4620      	mov	r0, r4
 8015a22:	f000 fba9 	bl	8016178 <__lshift>
 8015a26:	4631      	mov	r1, r6
 8015a28:	ee08 0a10 	vmov	s16, r0
 8015a2c:	f000 fc14 	bl	8016258 <__mcmp>
 8015a30:	2800      	cmp	r0, #0
 8015a32:	dc03      	bgt.n	8015a3c <_dtoa_r+0xa9c>
 8015a34:	d1e0      	bne.n	80159f8 <_dtoa_r+0xa58>
 8015a36:	f01a 0f01 	tst.w	sl, #1
 8015a3a:	d0dd      	beq.n	80159f8 <_dtoa_r+0xa58>
 8015a3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015a40:	d1d7      	bne.n	80159f2 <_dtoa_r+0xa52>
 8015a42:	2339      	movs	r3, #57	; 0x39
 8015a44:	f88b 3000 	strb.w	r3, [fp]
 8015a48:	462b      	mov	r3, r5
 8015a4a:	461d      	mov	r5, r3
 8015a4c:	3b01      	subs	r3, #1
 8015a4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015a52:	2a39      	cmp	r2, #57	; 0x39
 8015a54:	d071      	beq.n	8015b3a <_dtoa_r+0xb9a>
 8015a56:	3201      	adds	r2, #1
 8015a58:	701a      	strb	r2, [r3, #0]
 8015a5a:	e746      	b.n	80158ea <_dtoa_r+0x94a>
 8015a5c:	2a00      	cmp	r2, #0
 8015a5e:	dd07      	ble.n	8015a70 <_dtoa_r+0xad0>
 8015a60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015a64:	d0ed      	beq.n	8015a42 <_dtoa_r+0xaa2>
 8015a66:	f10a 0301 	add.w	r3, sl, #1
 8015a6a:	f88b 3000 	strb.w	r3, [fp]
 8015a6e:	e73c      	b.n	80158ea <_dtoa_r+0x94a>
 8015a70:	9b05      	ldr	r3, [sp, #20]
 8015a72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015a76:	4599      	cmp	r9, r3
 8015a78:	d047      	beq.n	8015b0a <_dtoa_r+0xb6a>
 8015a7a:	ee18 1a10 	vmov	r1, s16
 8015a7e:	2300      	movs	r3, #0
 8015a80:	220a      	movs	r2, #10
 8015a82:	4620      	mov	r0, r4
 8015a84:	f000 f9c8 	bl	8015e18 <__multadd>
 8015a88:	45b8      	cmp	r8, r7
 8015a8a:	ee08 0a10 	vmov	s16, r0
 8015a8e:	f04f 0300 	mov.w	r3, #0
 8015a92:	f04f 020a 	mov.w	r2, #10
 8015a96:	4641      	mov	r1, r8
 8015a98:	4620      	mov	r0, r4
 8015a9a:	d106      	bne.n	8015aaa <_dtoa_r+0xb0a>
 8015a9c:	f000 f9bc 	bl	8015e18 <__multadd>
 8015aa0:	4680      	mov	r8, r0
 8015aa2:	4607      	mov	r7, r0
 8015aa4:	f109 0901 	add.w	r9, r9, #1
 8015aa8:	e772      	b.n	8015990 <_dtoa_r+0x9f0>
 8015aaa:	f000 f9b5 	bl	8015e18 <__multadd>
 8015aae:	4639      	mov	r1, r7
 8015ab0:	4680      	mov	r8, r0
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	220a      	movs	r2, #10
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	f000 f9ae 	bl	8015e18 <__multadd>
 8015abc:	4607      	mov	r7, r0
 8015abe:	e7f1      	b.n	8015aa4 <_dtoa_r+0xb04>
 8015ac0:	9b03      	ldr	r3, [sp, #12]
 8015ac2:	9302      	str	r3, [sp, #8]
 8015ac4:	9d01      	ldr	r5, [sp, #4]
 8015ac6:	ee18 0a10 	vmov	r0, s16
 8015aca:	4631      	mov	r1, r6
 8015acc:	f7ff f9dc 	bl	8014e88 <quorem>
 8015ad0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015ad4:	9b01      	ldr	r3, [sp, #4]
 8015ad6:	f805 ab01 	strb.w	sl, [r5], #1
 8015ada:	1aea      	subs	r2, r5, r3
 8015adc:	9b02      	ldr	r3, [sp, #8]
 8015ade:	4293      	cmp	r3, r2
 8015ae0:	dd09      	ble.n	8015af6 <_dtoa_r+0xb56>
 8015ae2:	ee18 1a10 	vmov	r1, s16
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	220a      	movs	r2, #10
 8015aea:	4620      	mov	r0, r4
 8015aec:	f000 f994 	bl	8015e18 <__multadd>
 8015af0:	ee08 0a10 	vmov	s16, r0
 8015af4:	e7e7      	b.n	8015ac6 <_dtoa_r+0xb26>
 8015af6:	9b02      	ldr	r3, [sp, #8]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	bfc8      	it	gt
 8015afc:	461d      	movgt	r5, r3
 8015afe:	9b01      	ldr	r3, [sp, #4]
 8015b00:	bfd8      	it	le
 8015b02:	2501      	movle	r5, #1
 8015b04:	441d      	add	r5, r3
 8015b06:	f04f 0800 	mov.w	r8, #0
 8015b0a:	ee18 1a10 	vmov	r1, s16
 8015b0e:	2201      	movs	r2, #1
 8015b10:	4620      	mov	r0, r4
 8015b12:	f000 fb31 	bl	8016178 <__lshift>
 8015b16:	4631      	mov	r1, r6
 8015b18:	ee08 0a10 	vmov	s16, r0
 8015b1c:	f000 fb9c 	bl	8016258 <__mcmp>
 8015b20:	2800      	cmp	r0, #0
 8015b22:	dc91      	bgt.n	8015a48 <_dtoa_r+0xaa8>
 8015b24:	d102      	bne.n	8015b2c <_dtoa_r+0xb8c>
 8015b26:	f01a 0f01 	tst.w	sl, #1
 8015b2a:	d18d      	bne.n	8015a48 <_dtoa_r+0xaa8>
 8015b2c:	462b      	mov	r3, r5
 8015b2e:	461d      	mov	r5, r3
 8015b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015b34:	2a30      	cmp	r2, #48	; 0x30
 8015b36:	d0fa      	beq.n	8015b2e <_dtoa_r+0xb8e>
 8015b38:	e6d7      	b.n	80158ea <_dtoa_r+0x94a>
 8015b3a:	9a01      	ldr	r2, [sp, #4]
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d184      	bne.n	8015a4a <_dtoa_r+0xaaa>
 8015b40:	9b00      	ldr	r3, [sp, #0]
 8015b42:	3301      	adds	r3, #1
 8015b44:	9300      	str	r3, [sp, #0]
 8015b46:	2331      	movs	r3, #49	; 0x31
 8015b48:	7013      	strb	r3, [r2, #0]
 8015b4a:	e6ce      	b.n	80158ea <_dtoa_r+0x94a>
 8015b4c:	4b09      	ldr	r3, [pc, #36]	; (8015b74 <_dtoa_r+0xbd4>)
 8015b4e:	f7ff ba95 	b.w	801507c <_dtoa_r+0xdc>
 8015b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	f47f aa6e 	bne.w	8015036 <_dtoa_r+0x96>
 8015b5a:	4b07      	ldr	r3, [pc, #28]	; (8015b78 <_dtoa_r+0xbd8>)
 8015b5c:	f7ff ba8e 	b.w	801507c <_dtoa_r+0xdc>
 8015b60:	9b02      	ldr	r3, [sp, #8]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	dcae      	bgt.n	8015ac4 <_dtoa_r+0xb24>
 8015b66:	9b06      	ldr	r3, [sp, #24]
 8015b68:	2b02      	cmp	r3, #2
 8015b6a:	f73f aea8 	bgt.w	80158be <_dtoa_r+0x91e>
 8015b6e:	e7a9      	b.n	8015ac4 <_dtoa_r+0xb24>
 8015b70:	08017aa7 	.word	0x08017aa7
 8015b74:	08017a04 	.word	0x08017a04
 8015b78:	08017a28 	.word	0x08017a28

08015b7c <__sflush_r>:
 8015b7c:	898a      	ldrh	r2, [r1, #12]
 8015b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b82:	4605      	mov	r5, r0
 8015b84:	0710      	lsls	r0, r2, #28
 8015b86:	460c      	mov	r4, r1
 8015b88:	d458      	bmi.n	8015c3c <__sflush_r+0xc0>
 8015b8a:	684b      	ldr	r3, [r1, #4]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	dc05      	bgt.n	8015b9c <__sflush_r+0x20>
 8015b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	dc02      	bgt.n	8015b9c <__sflush_r+0x20>
 8015b96:	2000      	movs	r0, #0
 8015b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b9e:	2e00      	cmp	r6, #0
 8015ba0:	d0f9      	beq.n	8015b96 <__sflush_r+0x1a>
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ba8:	682f      	ldr	r7, [r5, #0]
 8015baa:	602b      	str	r3, [r5, #0]
 8015bac:	d032      	beq.n	8015c14 <__sflush_r+0x98>
 8015bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015bb0:	89a3      	ldrh	r3, [r4, #12]
 8015bb2:	075a      	lsls	r2, r3, #29
 8015bb4:	d505      	bpl.n	8015bc2 <__sflush_r+0x46>
 8015bb6:	6863      	ldr	r3, [r4, #4]
 8015bb8:	1ac0      	subs	r0, r0, r3
 8015bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015bbc:	b10b      	cbz	r3, 8015bc2 <__sflush_r+0x46>
 8015bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015bc0:	1ac0      	subs	r0, r0, r3
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015bc8:	6a21      	ldr	r1, [r4, #32]
 8015bca:	4628      	mov	r0, r5
 8015bcc:	47b0      	blx	r6
 8015bce:	1c43      	adds	r3, r0, #1
 8015bd0:	89a3      	ldrh	r3, [r4, #12]
 8015bd2:	d106      	bne.n	8015be2 <__sflush_r+0x66>
 8015bd4:	6829      	ldr	r1, [r5, #0]
 8015bd6:	291d      	cmp	r1, #29
 8015bd8:	d82c      	bhi.n	8015c34 <__sflush_r+0xb8>
 8015bda:	4a2a      	ldr	r2, [pc, #168]	; (8015c84 <__sflush_r+0x108>)
 8015bdc:	40ca      	lsrs	r2, r1
 8015bde:	07d6      	lsls	r6, r2, #31
 8015be0:	d528      	bpl.n	8015c34 <__sflush_r+0xb8>
 8015be2:	2200      	movs	r2, #0
 8015be4:	6062      	str	r2, [r4, #4]
 8015be6:	04d9      	lsls	r1, r3, #19
 8015be8:	6922      	ldr	r2, [r4, #16]
 8015bea:	6022      	str	r2, [r4, #0]
 8015bec:	d504      	bpl.n	8015bf8 <__sflush_r+0x7c>
 8015bee:	1c42      	adds	r2, r0, #1
 8015bf0:	d101      	bne.n	8015bf6 <__sflush_r+0x7a>
 8015bf2:	682b      	ldr	r3, [r5, #0]
 8015bf4:	b903      	cbnz	r3, 8015bf8 <__sflush_r+0x7c>
 8015bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8015bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015bfa:	602f      	str	r7, [r5, #0]
 8015bfc:	2900      	cmp	r1, #0
 8015bfe:	d0ca      	beq.n	8015b96 <__sflush_r+0x1a>
 8015c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c04:	4299      	cmp	r1, r3
 8015c06:	d002      	beq.n	8015c0e <__sflush_r+0x92>
 8015c08:	4628      	mov	r0, r5
 8015c0a:	f000 fc3d 	bl	8016488 <_free_r>
 8015c0e:	2000      	movs	r0, #0
 8015c10:	6360      	str	r0, [r4, #52]	; 0x34
 8015c12:	e7c1      	b.n	8015b98 <__sflush_r+0x1c>
 8015c14:	6a21      	ldr	r1, [r4, #32]
 8015c16:	2301      	movs	r3, #1
 8015c18:	4628      	mov	r0, r5
 8015c1a:	47b0      	blx	r6
 8015c1c:	1c41      	adds	r1, r0, #1
 8015c1e:	d1c7      	bne.n	8015bb0 <__sflush_r+0x34>
 8015c20:	682b      	ldr	r3, [r5, #0]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d0c4      	beq.n	8015bb0 <__sflush_r+0x34>
 8015c26:	2b1d      	cmp	r3, #29
 8015c28:	d001      	beq.n	8015c2e <__sflush_r+0xb2>
 8015c2a:	2b16      	cmp	r3, #22
 8015c2c:	d101      	bne.n	8015c32 <__sflush_r+0xb6>
 8015c2e:	602f      	str	r7, [r5, #0]
 8015c30:	e7b1      	b.n	8015b96 <__sflush_r+0x1a>
 8015c32:	89a3      	ldrh	r3, [r4, #12]
 8015c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c38:	81a3      	strh	r3, [r4, #12]
 8015c3a:	e7ad      	b.n	8015b98 <__sflush_r+0x1c>
 8015c3c:	690f      	ldr	r7, [r1, #16]
 8015c3e:	2f00      	cmp	r7, #0
 8015c40:	d0a9      	beq.n	8015b96 <__sflush_r+0x1a>
 8015c42:	0793      	lsls	r3, r2, #30
 8015c44:	680e      	ldr	r6, [r1, #0]
 8015c46:	bf08      	it	eq
 8015c48:	694b      	ldreq	r3, [r1, #20]
 8015c4a:	600f      	str	r7, [r1, #0]
 8015c4c:	bf18      	it	ne
 8015c4e:	2300      	movne	r3, #0
 8015c50:	eba6 0807 	sub.w	r8, r6, r7
 8015c54:	608b      	str	r3, [r1, #8]
 8015c56:	f1b8 0f00 	cmp.w	r8, #0
 8015c5a:	dd9c      	ble.n	8015b96 <__sflush_r+0x1a>
 8015c5c:	6a21      	ldr	r1, [r4, #32]
 8015c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015c60:	4643      	mov	r3, r8
 8015c62:	463a      	mov	r2, r7
 8015c64:	4628      	mov	r0, r5
 8015c66:	47b0      	blx	r6
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	dc06      	bgt.n	8015c7a <__sflush_r+0xfe>
 8015c6c:	89a3      	ldrh	r3, [r4, #12]
 8015c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c72:	81a3      	strh	r3, [r4, #12]
 8015c74:	f04f 30ff 	mov.w	r0, #4294967295
 8015c78:	e78e      	b.n	8015b98 <__sflush_r+0x1c>
 8015c7a:	4407      	add	r7, r0
 8015c7c:	eba8 0800 	sub.w	r8, r8, r0
 8015c80:	e7e9      	b.n	8015c56 <__sflush_r+0xda>
 8015c82:	bf00      	nop
 8015c84:	20400001 	.word	0x20400001

08015c88 <_fflush_r>:
 8015c88:	b538      	push	{r3, r4, r5, lr}
 8015c8a:	690b      	ldr	r3, [r1, #16]
 8015c8c:	4605      	mov	r5, r0
 8015c8e:	460c      	mov	r4, r1
 8015c90:	b913      	cbnz	r3, 8015c98 <_fflush_r+0x10>
 8015c92:	2500      	movs	r5, #0
 8015c94:	4628      	mov	r0, r5
 8015c96:	bd38      	pop	{r3, r4, r5, pc}
 8015c98:	b118      	cbz	r0, 8015ca2 <_fflush_r+0x1a>
 8015c9a:	6983      	ldr	r3, [r0, #24]
 8015c9c:	b90b      	cbnz	r3, 8015ca2 <_fflush_r+0x1a>
 8015c9e:	f7fe f9f1 	bl	8014084 <__sinit>
 8015ca2:	4b14      	ldr	r3, [pc, #80]	; (8015cf4 <_fflush_r+0x6c>)
 8015ca4:	429c      	cmp	r4, r3
 8015ca6:	d11b      	bne.n	8015ce0 <_fflush_r+0x58>
 8015ca8:	686c      	ldr	r4, [r5, #4]
 8015caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d0ef      	beq.n	8015c92 <_fflush_r+0xa>
 8015cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015cb4:	07d0      	lsls	r0, r2, #31
 8015cb6:	d404      	bmi.n	8015cc2 <_fflush_r+0x3a>
 8015cb8:	0599      	lsls	r1, r3, #22
 8015cba:	d402      	bmi.n	8015cc2 <_fflush_r+0x3a>
 8015cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cbe:	f7fe faa4 	bl	801420a <__retarget_lock_acquire_recursive>
 8015cc2:	4628      	mov	r0, r5
 8015cc4:	4621      	mov	r1, r4
 8015cc6:	f7ff ff59 	bl	8015b7c <__sflush_r>
 8015cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ccc:	07da      	lsls	r2, r3, #31
 8015cce:	4605      	mov	r5, r0
 8015cd0:	d4e0      	bmi.n	8015c94 <_fflush_r+0xc>
 8015cd2:	89a3      	ldrh	r3, [r4, #12]
 8015cd4:	059b      	lsls	r3, r3, #22
 8015cd6:	d4dd      	bmi.n	8015c94 <_fflush_r+0xc>
 8015cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cda:	f7fe fa97 	bl	801420c <__retarget_lock_release_recursive>
 8015cde:	e7d9      	b.n	8015c94 <_fflush_r+0xc>
 8015ce0:	4b05      	ldr	r3, [pc, #20]	; (8015cf8 <_fflush_r+0x70>)
 8015ce2:	429c      	cmp	r4, r3
 8015ce4:	d101      	bne.n	8015cea <_fflush_r+0x62>
 8015ce6:	68ac      	ldr	r4, [r5, #8]
 8015ce8:	e7df      	b.n	8015caa <_fflush_r+0x22>
 8015cea:	4b04      	ldr	r3, [pc, #16]	; (8015cfc <_fflush_r+0x74>)
 8015cec:	429c      	cmp	r4, r3
 8015cee:	bf08      	it	eq
 8015cf0:	68ec      	ldreq	r4, [r5, #12]
 8015cf2:	e7da      	b.n	8015caa <_fflush_r+0x22>
 8015cf4:	080179b0 	.word	0x080179b0
 8015cf8:	080179d0 	.word	0x080179d0
 8015cfc:	08017990 	.word	0x08017990

08015d00 <_localeconv_r>:
 8015d00:	4800      	ldr	r0, [pc, #0]	; (8015d04 <_localeconv_r+0x4>)
 8015d02:	4770      	bx	lr
 8015d04:	20000278 	.word	0x20000278

08015d08 <_lseek_r>:
 8015d08:	b538      	push	{r3, r4, r5, lr}
 8015d0a:	4d07      	ldr	r5, [pc, #28]	; (8015d28 <_lseek_r+0x20>)
 8015d0c:	4604      	mov	r4, r0
 8015d0e:	4608      	mov	r0, r1
 8015d10:	4611      	mov	r1, r2
 8015d12:	2200      	movs	r2, #0
 8015d14:	602a      	str	r2, [r5, #0]
 8015d16:	461a      	mov	r2, r3
 8015d18:	f7ef fa50 	bl	80051bc <_lseek>
 8015d1c:	1c43      	adds	r3, r0, #1
 8015d1e:	d102      	bne.n	8015d26 <_lseek_r+0x1e>
 8015d20:	682b      	ldr	r3, [r5, #0]
 8015d22:	b103      	cbz	r3, 8015d26 <_lseek_r+0x1e>
 8015d24:	6023      	str	r3, [r4, #0]
 8015d26:	bd38      	pop	{r3, r4, r5, pc}
 8015d28:	20005ae8 	.word	0x20005ae8

08015d2c <malloc>:
 8015d2c:	4b02      	ldr	r3, [pc, #8]	; (8015d38 <malloc+0xc>)
 8015d2e:	4601      	mov	r1, r0
 8015d30:	6818      	ldr	r0, [r3, #0]
 8015d32:	f7fe babd 	b.w	80142b0 <_malloc_r>
 8015d36:	bf00      	nop
 8015d38:	20000124 	.word	0x20000124

08015d3c <__malloc_lock>:
 8015d3c:	4801      	ldr	r0, [pc, #4]	; (8015d44 <__malloc_lock+0x8>)
 8015d3e:	f7fe ba64 	b.w	801420a <__retarget_lock_acquire_recursive>
 8015d42:	bf00      	nop
 8015d44:	20005adc 	.word	0x20005adc

08015d48 <__malloc_unlock>:
 8015d48:	4801      	ldr	r0, [pc, #4]	; (8015d50 <__malloc_unlock+0x8>)
 8015d4a:	f7fe ba5f 	b.w	801420c <__retarget_lock_release_recursive>
 8015d4e:	bf00      	nop
 8015d50:	20005adc 	.word	0x20005adc

08015d54 <_Balloc>:
 8015d54:	b570      	push	{r4, r5, r6, lr}
 8015d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015d58:	4604      	mov	r4, r0
 8015d5a:	460d      	mov	r5, r1
 8015d5c:	b976      	cbnz	r6, 8015d7c <_Balloc+0x28>
 8015d5e:	2010      	movs	r0, #16
 8015d60:	f7ff ffe4 	bl	8015d2c <malloc>
 8015d64:	4602      	mov	r2, r0
 8015d66:	6260      	str	r0, [r4, #36]	; 0x24
 8015d68:	b920      	cbnz	r0, 8015d74 <_Balloc+0x20>
 8015d6a:	4b18      	ldr	r3, [pc, #96]	; (8015dcc <_Balloc+0x78>)
 8015d6c:	4818      	ldr	r0, [pc, #96]	; (8015dd0 <_Balloc+0x7c>)
 8015d6e:	2166      	movs	r1, #102	; 0x66
 8015d70:	f000 fd44 	bl	80167fc <__assert_func>
 8015d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d78:	6006      	str	r6, [r0, #0]
 8015d7a:	60c6      	str	r6, [r0, #12]
 8015d7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015d7e:	68f3      	ldr	r3, [r6, #12]
 8015d80:	b183      	cbz	r3, 8015da4 <_Balloc+0x50>
 8015d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015d8a:	b9b8      	cbnz	r0, 8015dbc <_Balloc+0x68>
 8015d8c:	2101      	movs	r1, #1
 8015d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8015d92:	1d72      	adds	r2, r6, #5
 8015d94:	0092      	lsls	r2, r2, #2
 8015d96:	4620      	mov	r0, r4
 8015d98:	f000 fb60 	bl	801645c <_calloc_r>
 8015d9c:	b160      	cbz	r0, 8015db8 <_Balloc+0x64>
 8015d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015da2:	e00e      	b.n	8015dc2 <_Balloc+0x6e>
 8015da4:	2221      	movs	r2, #33	; 0x21
 8015da6:	2104      	movs	r1, #4
 8015da8:	4620      	mov	r0, r4
 8015daa:	f000 fb57 	bl	801645c <_calloc_r>
 8015dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015db0:	60f0      	str	r0, [r6, #12]
 8015db2:	68db      	ldr	r3, [r3, #12]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d1e4      	bne.n	8015d82 <_Balloc+0x2e>
 8015db8:	2000      	movs	r0, #0
 8015dba:	bd70      	pop	{r4, r5, r6, pc}
 8015dbc:	6802      	ldr	r2, [r0, #0]
 8015dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015dc8:	e7f7      	b.n	8015dba <_Balloc+0x66>
 8015dca:	bf00      	nop
 8015dcc:	08017a35 	.word	0x08017a35
 8015dd0:	08017ab8 	.word	0x08017ab8

08015dd4 <_Bfree>:
 8015dd4:	b570      	push	{r4, r5, r6, lr}
 8015dd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015dd8:	4605      	mov	r5, r0
 8015dda:	460c      	mov	r4, r1
 8015ddc:	b976      	cbnz	r6, 8015dfc <_Bfree+0x28>
 8015dde:	2010      	movs	r0, #16
 8015de0:	f7ff ffa4 	bl	8015d2c <malloc>
 8015de4:	4602      	mov	r2, r0
 8015de6:	6268      	str	r0, [r5, #36]	; 0x24
 8015de8:	b920      	cbnz	r0, 8015df4 <_Bfree+0x20>
 8015dea:	4b09      	ldr	r3, [pc, #36]	; (8015e10 <_Bfree+0x3c>)
 8015dec:	4809      	ldr	r0, [pc, #36]	; (8015e14 <_Bfree+0x40>)
 8015dee:	218a      	movs	r1, #138	; 0x8a
 8015df0:	f000 fd04 	bl	80167fc <__assert_func>
 8015df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015df8:	6006      	str	r6, [r0, #0]
 8015dfa:	60c6      	str	r6, [r0, #12]
 8015dfc:	b13c      	cbz	r4, 8015e0e <_Bfree+0x3a>
 8015dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015e00:	6862      	ldr	r2, [r4, #4]
 8015e02:	68db      	ldr	r3, [r3, #12]
 8015e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015e08:	6021      	str	r1, [r4, #0]
 8015e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015e0e:	bd70      	pop	{r4, r5, r6, pc}
 8015e10:	08017a35 	.word	0x08017a35
 8015e14:	08017ab8 	.word	0x08017ab8

08015e18 <__multadd>:
 8015e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e1c:	690d      	ldr	r5, [r1, #16]
 8015e1e:	4607      	mov	r7, r0
 8015e20:	460c      	mov	r4, r1
 8015e22:	461e      	mov	r6, r3
 8015e24:	f101 0c14 	add.w	ip, r1, #20
 8015e28:	2000      	movs	r0, #0
 8015e2a:	f8dc 3000 	ldr.w	r3, [ip]
 8015e2e:	b299      	uxth	r1, r3
 8015e30:	fb02 6101 	mla	r1, r2, r1, r6
 8015e34:	0c1e      	lsrs	r6, r3, #16
 8015e36:	0c0b      	lsrs	r3, r1, #16
 8015e38:	fb02 3306 	mla	r3, r2, r6, r3
 8015e3c:	b289      	uxth	r1, r1
 8015e3e:	3001      	adds	r0, #1
 8015e40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015e44:	4285      	cmp	r5, r0
 8015e46:	f84c 1b04 	str.w	r1, [ip], #4
 8015e4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015e4e:	dcec      	bgt.n	8015e2a <__multadd+0x12>
 8015e50:	b30e      	cbz	r6, 8015e96 <__multadd+0x7e>
 8015e52:	68a3      	ldr	r3, [r4, #8]
 8015e54:	42ab      	cmp	r3, r5
 8015e56:	dc19      	bgt.n	8015e8c <__multadd+0x74>
 8015e58:	6861      	ldr	r1, [r4, #4]
 8015e5a:	4638      	mov	r0, r7
 8015e5c:	3101      	adds	r1, #1
 8015e5e:	f7ff ff79 	bl	8015d54 <_Balloc>
 8015e62:	4680      	mov	r8, r0
 8015e64:	b928      	cbnz	r0, 8015e72 <__multadd+0x5a>
 8015e66:	4602      	mov	r2, r0
 8015e68:	4b0c      	ldr	r3, [pc, #48]	; (8015e9c <__multadd+0x84>)
 8015e6a:	480d      	ldr	r0, [pc, #52]	; (8015ea0 <__multadd+0x88>)
 8015e6c:	21b5      	movs	r1, #181	; 0xb5
 8015e6e:	f000 fcc5 	bl	80167fc <__assert_func>
 8015e72:	6922      	ldr	r2, [r4, #16]
 8015e74:	3202      	adds	r2, #2
 8015e76:	f104 010c 	add.w	r1, r4, #12
 8015e7a:	0092      	lsls	r2, r2, #2
 8015e7c:	300c      	adds	r0, #12
 8015e7e:	f7fe f9c6 	bl	801420e <memcpy>
 8015e82:	4621      	mov	r1, r4
 8015e84:	4638      	mov	r0, r7
 8015e86:	f7ff ffa5 	bl	8015dd4 <_Bfree>
 8015e8a:	4644      	mov	r4, r8
 8015e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015e90:	3501      	adds	r5, #1
 8015e92:	615e      	str	r6, [r3, #20]
 8015e94:	6125      	str	r5, [r4, #16]
 8015e96:	4620      	mov	r0, r4
 8015e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e9c:	08017aa7 	.word	0x08017aa7
 8015ea0:	08017ab8 	.word	0x08017ab8

08015ea4 <__hi0bits>:
 8015ea4:	0c03      	lsrs	r3, r0, #16
 8015ea6:	041b      	lsls	r3, r3, #16
 8015ea8:	b9d3      	cbnz	r3, 8015ee0 <__hi0bits+0x3c>
 8015eaa:	0400      	lsls	r0, r0, #16
 8015eac:	2310      	movs	r3, #16
 8015eae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015eb2:	bf04      	itt	eq
 8015eb4:	0200      	lsleq	r0, r0, #8
 8015eb6:	3308      	addeq	r3, #8
 8015eb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015ebc:	bf04      	itt	eq
 8015ebe:	0100      	lsleq	r0, r0, #4
 8015ec0:	3304      	addeq	r3, #4
 8015ec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015ec6:	bf04      	itt	eq
 8015ec8:	0080      	lsleq	r0, r0, #2
 8015eca:	3302      	addeq	r3, #2
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	db05      	blt.n	8015edc <__hi0bits+0x38>
 8015ed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015ed4:	f103 0301 	add.w	r3, r3, #1
 8015ed8:	bf08      	it	eq
 8015eda:	2320      	moveq	r3, #32
 8015edc:	4618      	mov	r0, r3
 8015ede:	4770      	bx	lr
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	e7e4      	b.n	8015eae <__hi0bits+0xa>

08015ee4 <__lo0bits>:
 8015ee4:	6803      	ldr	r3, [r0, #0]
 8015ee6:	f013 0207 	ands.w	r2, r3, #7
 8015eea:	4601      	mov	r1, r0
 8015eec:	d00b      	beq.n	8015f06 <__lo0bits+0x22>
 8015eee:	07da      	lsls	r2, r3, #31
 8015ef0:	d423      	bmi.n	8015f3a <__lo0bits+0x56>
 8015ef2:	0798      	lsls	r0, r3, #30
 8015ef4:	bf49      	itett	mi
 8015ef6:	085b      	lsrmi	r3, r3, #1
 8015ef8:	089b      	lsrpl	r3, r3, #2
 8015efa:	2001      	movmi	r0, #1
 8015efc:	600b      	strmi	r3, [r1, #0]
 8015efe:	bf5c      	itt	pl
 8015f00:	600b      	strpl	r3, [r1, #0]
 8015f02:	2002      	movpl	r0, #2
 8015f04:	4770      	bx	lr
 8015f06:	b298      	uxth	r0, r3
 8015f08:	b9a8      	cbnz	r0, 8015f36 <__lo0bits+0x52>
 8015f0a:	0c1b      	lsrs	r3, r3, #16
 8015f0c:	2010      	movs	r0, #16
 8015f0e:	b2da      	uxtb	r2, r3
 8015f10:	b90a      	cbnz	r2, 8015f16 <__lo0bits+0x32>
 8015f12:	3008      	adds	r0, #8
 8015f14:	0a1b      	lsrs	r3, r3, #8
 8015f16:	071a      	lsls	r2, r3, #28
 8015f18:	bf04      	itt	eq
 8015f1a:	091b      	lsreq	r3, r3, #4
 8015f1c:	3004      	addeq	r0, #4
 8015f1e:	079a      	lsls	r2, r3, #30
 8015f20:	bf04      	itt	eq
 8015f22:	089b      	lsreq	r3, r3, #2
 8015f24:	3002      	addeq	r0, #2
 8015f26:	07da      	lsls	r2, r3, #31
 8015f28:	d403      	bmi.n	8015f32 <__lo0bits+0x4e>
 8015f2a:	085b      	lsrs	r3, r3, #1
 8015f2c:	f100 0001 	add.w	r0, r0, #1
 8015f30:	d005      	beq.n	8015f3e <__lo0bits+0x5a>
 8015f32:	600b      	str	r3, [r1, #0]
 8015f34:	4770      	bx	lr
 8015f36:	4610      	mov	r0, r2
 8015f38:	e7e9      	b.n	8015f0e <__lo0bits+0x2a>
 8015f3a:	2000      	movs	r0, #0
 8015f3c:	4770      	bx	lr
 8015f3e:	2020      	movs	r0, #32
 8015f40:	4770      	bx	lr
	...

08015f44 <__i2b>:
 8015f44:	b510      	push	{r4, lr}
 8015f46:	460c      	mov	r4, r1
 8015f48:	2101      	movs	r1, #1
 8015f4a:	f7ff ff03 	bl	8015d54 <_Balloc>
 8015f4e:	4602      	mov	r2, r0
 8015f50:	b928      	cbnz	r0, 8015f5e <__i2b+0x1a>
 8015f52:	4b05      	ldr	r3, [pc, #20]	; (8015f68 <__i2b+0x24>)
 8015f54:	4805      	ldr	r0, [pc, #20]	; (8015f6c <__i2b+0x28>)
 8015f56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015f5a:	f000 fc4f 	bl	80167fc <__assert_func>
 8015f5e:	2301      	movs	r3, #1
 8015f60:	6144      	str	r4, [r0, #20]
 8015f62:	6103      	str	r3, [r0, #16]
 8015f64:	bd10      	pop	{r4, pc}
 8015f66:	bf00      	nop
 8015f68:	08017aa7 	.word	0x08017aa7
 8015f6c:	08017ab8 	.word	0x08017ab8

08015f70 <__multiply>:
 8015f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f74:	4691      	mov	r9, r2
 8015f76:	690a      	ldr	r2, [r1, #16]
 8015f78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	bfb8      	it	lt
 8015f80:	460b      	movlt	r3, r1
 8015f82:	460c      	mov	r4, r1
 8015f84:	bfbc      	itt	lt
 8015f86:	464c      	movlt	r4, r9
 8015f88:	4699      	movlt	r9, r3
 8015f8a:	6927      	ldr	r7, [r4, #16]
 8015f8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015f90:	68a3      	ldr	r3, [r4, #8]
 8015f92:	6861      	ldr	r1, [r4, #4]
 8015f94:	eb07 060a 	add.w	r6, r7, sl
 8015f98:	42b3      	cmp	r3, r6
 8015f9a:	b085      	sub	sp, #20
 8015f9c:	bfb8      	it	lt
 8015f9e:	3101      	addlt	r1, #1
 8015fa0:	f7ff fed8 	bl	8015d54 <_Balloc>
 8015fa4:	b930      	cbnz	r0, 8015fb4 <__multiply+0x44>
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	4b44      	ldr	r3, [pc, #272]	; (80160bc <__multiply+0x14c>)
 8015faa:	4845      	ldr	r0, [pc, #276]	; (80160c0 <__multiply+0x150>)
 8015fac:	f240 115d 	movw	r1, #349	; 0x15d
 8015fb0:	f000 fc24 	bl	80167fc <__assert_func>
 8015fb4:	f100 0514 	add.w	r5, r0, #20
 8015fb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015fbc:	462b      	mov	r3, r5
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	4543      	cmp	r3, r8
 8015fc2:	d321      	bcc.n	8016008 <__multiply+0x98>
 8015fc4:	f104 0314 	add.w	r3, r4, #20
 8015fc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015fcc:	f109 0314 	add.w	r3, r9, #20
 8015fd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015fd4:	9202      	str	r2, [sp, #8]
 8015fd6:	1b3a      	subs	r2, r7, r4
 8015fd8:	3a15      	subs	r2, #21
 8015fda:	f022 0203 	bic.w	r2, r2, #3
 8015fde:	3204      	adds	r2, #4
 8015fe0:	f104 0115 	add.w	r1, r4, #21
 8015fe4:	428f      	cmp	r7, r1
 8015fe6:	bf38      	it	cc
 8015fe8:	2204      	movcc	r2, #4
 8015fea:	9201      	str	r2, [sp, #4]
 8015fec:	9a02      	ldr	r2, [sp, #8]
 8015fee:	9303      	str	r3, [sp, #12]
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d80c      	bhi.n	801600e <__multiply+0x9e>
 8015ff4:	2e00      	cmp	r6, #0
 8015ff6:	dd03      	ble.n	8016000 <__multiply+0x90>
 8015ff8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d05a      	beq.n	80160b6 <__multiply+0x146>
 8016000:	6106      	str	r6, [r0, #16]
 8016002:	b005      	add	sp, #20
 8016004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016008:	f843 2b04 	str.w	r2, [r3], #4
 801600c:	e7d8      	b.n	8015fc0 <__multiply+0x50>
 801600e:	f8b3 a000 	ldrh.w	sl, [r3]
 8016012:	f1ba 0f00 	cmp.w	sl, #0
 8016016:	d024      	beq.n	8016062 <__multiply+0xf2>
 8016018:	f104 0e14 	add.w	lr, r4, #20
 801601c:	46a9      	mov	r9, r5
 801601e:	f04f 0c00 	mov.w	ip, #0
 8016022:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016026:	f8d9 1000 	ldr.w	r1, [r9]
 801602a:	fa1f fb82 	uxth.w	fp, r2
 801602e:	b289      	uxth	r1, r1
 8016030:	fb0a 110b 	mla	r1, sl, fp, r1
 8016034:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016038:	f8d9 2000 	ldr.w	r2, [r9]
 801603c:	4461      	add	r1, ip
 801603e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016042:	fb0a c20b 	mla	r2, sl, fp, ip
 8016046:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801604a:	b289      	uxth	r1, r1
 801604c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016050:	4577      	cmp	r7, lr
 8016052:	f849 1b04 	str.w	r1, [r9], #4
 8016056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801605a:	d8e2      	bhi.n	8016022 <__multiply+0xb2>
 801605c:	9a01      	ldr	r2, [sp, #4]
 801605e:	f845 c002 	str.w	ip, [r5, r2]
 8016062:	9a03      	ldr	r2, [sp, #12]
 8016064:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016068:	3304      	adds	r3, #4
 801606a:	f1b9 0f00 	cmp.w	r9, #0
 801606e:	d020      	beq.n	80160b2 <__multiply+0x142>
 8016070:	6829      	ldr	r1, [r5, #0]
 8016072:	f104 0c14 	add.w	ip, r4, #20
 8016076:	46ae      	mov	lr, r5
 8016078:	f04f 0a00 	mov.w	sl, #0
 801607c:	f8bc b000 	ldrh.w	fp, [ip]
 8016080:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016084:	fb09 220b 	mla	r2, r9, fp, r2
 8016088:	4492      	add	sl, r2
 801608a:	b289      	uxth	r1, r1
 801608c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016090:	f84e 1b04 	str.w	r1, [lr], #4
 8016094:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016098:	f8be 1000 	ldrh.w	r1, [lr]
 801609c:	0c12      	lsrs	r2, r2, #16
 801609e:	fb09 1102 	mla	r1, r9, r2, r1
 80160a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80160a6:	4567      	cmp	r7, ip
 80160a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80160ac:	d8e6      	bhi.n	801607c <__multiply+0x10c>
 80160ae:	9a01      	ldr	r2, [sp, #4]
 80160b0:	50a9      	str	r1, [r5, r2]
 80160b2:	3504      	adds	r5, #4
 80160b4:	e79a      	b.n	8015fec <__multiply+0x7c>
 80160b6:	3e01      	subs	r6, #1
 80160b8:	e79c      	b.n	8015ff4 <__multiply+0x84>
 80160ba:	bf00      	nop
 80160bc:	08017aa7 	.word	0x08017aa7
 80160c0:	08017ab8 	.word	0x08017ab8

080160c4 <__pow5mult>:
 80160c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160c8:	4615      	mov	r5, r2
 80160ca:	f012 0203 	ands.w	r2, r2, #3
 80160ce:	4606      	mov	r6, r0
 80160d0:	460f      	mov	r7, r1
 80160d2:	d007      	beq.n	80160e4 <__pow5mult+0x20>
 80160d4:	4c25      	ldr	r4, [pc, #148]	; (801616c <__pow5mult+0xa8>)
 80160d6:	3a01      	subs	r2, #1
 80160d8:	2300      	movs	r3, #0
 80160da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80160de:	f7ff fe9b 	bl	8015e18 <__multadd>
 80160e2:	4607      	mov	r7, r0
 80160e4:	10ad      	asrs	r5, r5, #2
 80160e6:	d03d      	beq.n	8016164 <__pow5mult+0xa0>
 80160e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80160ea:	b97c      	cbnz	r4, 801610c <__pow5mult+0x48>
 80160ec:	2010      	movs	r0, #16
 80160ee:	f7ff fe1d 	bl	8015d2c <malloc>
 80160f2:	4602      	mov	r2, r0
 80160f4:	6270      	str	r0, [r6, #36]	; 0x24
 80160f6:	b928      	cbnz	r0, 8016104 <__pow5mult+0x40>
 80160f8:	4b1d      	ldr	r3, [pc, #116]	; (8016170 <__pow5mult+0xac>)
 80160fa:	481e      	ldr	r0, [pc, #120]	; (8016174 <__pow5mult+0xb0>)
 80160fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016100:	f000 fb7c 	bl	80167fc <__assert_func>
 8016104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016108:	6004      	str	r4, [r0, #0]
 801610a:	60c4      	str	r4, [r0, #12]
 801610c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016114:	b94c      	cbnz	r4, 801612a <__pow5mult+0x66>
 8016116:	f240 2171 	movw	r1, #625	; 0x271
 801611a:	4630      	mov	r0, r6
 801611c:	f7ff ff12 	bl	8015f44 <__i2b>
 8016120:	2300      	movs	r3, #0
 8016122:	f8c8 0008 	str.w	r0, [r8, #8]
 8016126:	4604      	mov	r4, r0
 8016128:	6003      	str	r3, [r0, #0]
 801612a:	f04f 0900 	mov.w	r9, #0
 801612e:	07eb      	lsls	r3, r5, #31
 8016130:	d50a      	bpl.n	8016148 <__pow5mult+0x84>
 8016132:	4639      	mov	r1, r7
 8016134:	4622      	mov	r2, r4
 8016136:	4630      	mov	r0, r6
 8016138:	f7ff ff1a 	bl	8015f70 <__multiply>
 801613c:	4639      	mov	r1, r7
 801613e:	4680      	mov	r8, r0
 8016140:	4630      	mov	r0, r6
 8016142:	f7ff fe47 	bl	8015dd4 <_Bfree>
 8016146:	4647      	mov	r7, r8
 8016148:	106d      	asrs	r5, r5, #1
 801614a:	d00b      	beq.n	8016164 <__pow5mult+0xa0>
 801614c:	6820      	ldr	r0, [r4, #0]
 801614e:	b938      	cbnz	r0, 8016160 <__pow5mult+0x9c>
 8016150:	4622      	mov	r2, r4
 8016152:	4621      	mov	r1, r4
 8016154:	4630      	mov	r0, r6
 8016156:	f7ff ff0b 	bl	8015f70 <__multiply>
 801615a:	6020      	str	r0, [r4, #0]
 801615c:	f8c0 9000 	str.w	r9, [r0]
 8016160:	4604      	mov	r4, r0
 8016162:	e7e4      	b.n	801612e <__pow5mult+0x6a>
 8016164:	4638      	mov	r0, r7
 8016166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801616a:	bf00      	nop
 801616c:	08017c08 	.word	0x08017c08
 8016170:	08017a35 	.word	0x08017a35
 8016174:	08017ab8 	.word	0x08017ab8

08016178 <__lshift>:
 8016178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801617c:	460c      	mov	r4, r1
 801617e:	6849      	ldr	r1, [r1, #4]
 8016180:	6923      	ldr	r3, [r4, #16]
 8016182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016186:	68a3      	ldr	r3, [r4, #8]
 8016188:	4607      	mov	r7, r0
 801618a:	4691      	mov	r9, r2
 801618c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016190:	f108 0601 	add.w	r6, r8, #1
 8016194:	42b3      	cmp	r3, r6
 8016196:	db0b      	blt.n	80161b0 <__lshift+0x38>
 8016198:	4638      	mov	r0, r7
 801619a:	f7ff fddb 	bl	8015d54 <_Balloc>
 801619e:	4605      	mov	r5, r0
 80161a0:	b948      	cbnz	r0, 80161b6 <__lshift+0x3e>
 80161a2:	4602      	mov	r2, r0
 80161a4:	4b2a      	ldr	r3, [pc, #168]	; (8016250 <__lshift+0xd8>)
 80161a6:	482b      	ldr	r0, [pc, #172]	; (8016254 <__lshift+0xdc>)
 80161a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80161ac:	f000 fb26 	bl	80167fc <__assert_func>
 80161b0:	3101      	adds	r1, #1
 80161b2:	005b      	lsls	r3, r3, #1
 80161b4:	e7ee      	b.n	8016194 <__lshift+0x1c>
 80161b6:	2300      	movs	r3, #0
 80161b8:	f100 0114 	add.w	r1, r0, #20
 80161bc:	f100 0210 	add.w	r2, r0, #16
 80161c0:	4618      	mov	r0, r3
 80161c2:	4553      	cmp	r3, sl
 80161c4:	db37      	blt.n	8016236 <__lshift+0xbe>
 80161c6:	6920      	ldr	r0, [r4, #16]
 80161c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80161cc:	f104 0314 	add.w	r3, r4, #20
 80161d0:	f019 091f 	ands.w	r9, r9, #31
 80161d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80161d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80161dc:	d02f      	beq.n	801623e <__lshift+0xc6>
 80161de:	f1c9 0e20 	rsb	lr, r9, #32
 80161e2:	468a      	mov	sl, r1
 80161e4:	f04f 0c00 	mov.w	ip, #0
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	fa02 f209 	lsl.w	r2, r2, r9
 80161ee:	ea42 020c 	orr.w	r2, r2, ip
 80161f2:	f84a 2b04 	str.w	r2, [sl], #4
 80161f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80161fa:	4298      	cmp	r0, r3
 80161fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016200:	d8f2      	bhi.n	80161e8 <__lshift+0x70>
 8016202:	1b03      	subs	r3, r0, r4
 8016204:	3b15      	subs	r3, #21
 8016206:	f023 0303 	bic.w	r3, r3, #3
 801620a:	3304      	adds	r3, #4
 801620c:	f104 0215 	add.w	r2, r4, #21
 8016210:	4290      	cmp	r0, r2
 8016212:	bf38      	it	cc
 8016214:	2304      	movcc	r3, #4
 8016216:	f841 c003 	str.w	ip, [r1, r3]
 801621a:	f1bc 0f00 	cmp.w	ip, #0
 801621e:	d001      	beq.n	8016224 <__lshift+0xac>
 8016220:	f108 0602 	add.w	r6, r8, #2
 8016224:	3e01      	subs	r6, #1
 8016226:	4638      	mov	r0, r7
 8016228:	612e      	str	r6, [r5, #16]
 801622a:	4621      	mov	r1, r4
 801622c:	f7ff fdd2 	bl	8015dd4 <_Bfree>
 8016230:	4628      	mov	r0, r5
 8016232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016236:	f842 0f04 	str.w	r0, [r2, #4]!
 801623a:	3301      	adds	r3, #1
 801623c:	e7c1      	b.n	80161c2 <__lshift+0x4a>
 801623e:	3904      	subs	r1, #4
 8016240:	f853 2b04 	ldr.w	r2, [r3], #4
 8016244:	f841 2f04 	str.w	r2, [r1, #4]!
 8016248:	4298      	cmp	r0, r3
 801624a:	d8f9      	bhi.n	8016240 <__lshift+0xc8>
 801624c:	e7ea      	b.n	8016224 <__lshift+0xac>
 801624e:	bf00      	nop
 8016250:	08017aa7 	.word	0x08017aa7
 8016254:	08017ab8 	.word	0x08017ab8

08016258 <__mcmp>:
 8016258:	b530      	push	{r4, r5, lr}
 801625a:	6902      	ldr	r2, [r0, #16]
 801625c:	690c      	ldr	r4, [r1, #16]
 801625e:	1b12      	subs	r2, r2, r4
 8016260:	d10e      	bne.n	8016280 <__mcmp+0x28>
 8016262:	f100 0314 	add.w	r3, r0, #20
 8016266:	3114      	adds	r1, #20
 8016268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801626c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016278:	42a5      	cmp	r5, r4
 801627a:	d003      	beq.n	8016284 <__mcmp+0x2c>
 801627c:	d305      	bcc.n	801628a <__mcmp+0x32>
 801627e:	2201      	movs	r2, #1
 8016280:	4610      	mov	r0, r2
 8016282:	bd30      	pop	{r4, r5, pc}
 8016284:	4283      	cmp	r3, r0
 8016286:	d3f3      	bcc.n	8016270 <__mcmp+0x18>
 8016288:	e7fa      	b.n	8016280 <__mcmp+0x28>
 801628a:	f04f 32ff 	mov.w	r2, #4294967295
 801628e:	e7f7      	b.n	8016280 <__mcmp+0x28>

08016290 <__mdiff>:
 8016290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016294:	460c      	mov	r4, r1
 8016296:	4606      	mov	r6, r0
 8016298:	4611      	mov	r1, r2
 801629a:	4620      	mov	r0, r4
 801629c:	4690      	mov	r8, r2
 801629e:	f7ff ffdb 	bl	8016258 <__mcmp>
 80162a2:	1e05      	subs	r5, r0, #0
 80162a4:	d110      	bne.n	80162c8 <__mdiff+0x38>
 80162a6:	4629      	mov	r1, r5
 80162a8:	4630      	mov	r0, r6
 80162aa:	f7ff fd53 	bl	8015d54 <_Balloc>
 80162ae:	b930      	cbnz	r0, 80162be <__mdiff+0x2e>
 80162b0:	4b3a      	ldr	r3, [pc, #232]	; (801639c <__mdiff+0x10c>)
 80162b2:	4602      	mov	r2, r0
 80162b4:	f240 2132 	movw	r1, #562	; 0x232
 80162b8:	4839      	ldr	r0, [pc, #228]	; (80163a0 <__mdiff+0x110>)
 80162ba:	f000 fa9f 	bl	80167fc <__assert_func>
 80162be:	2301      	movs	r3, #1
 80162c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80162c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c8:	bfa4      	itt	ge
 80162ca:	4643      	movge	r3, r8
 80162cc:	46a0      	movge	r8, r4
 80162ce:	4630      	mov	r0, r6
 80162d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80162d4:	bfa6      	itte	ge
 80162d6:	461c      	movge	r4, r3
 80162d8:	2500      	movge	r5, #0
 80162da:	2501      	movlt	r5, #1
 80162dc:	f7ff fd3a 	bl	8015d54 <_Balloc>
 80162e0:	b920      	cbnz	r0, 80162ec <__mdiff+0x5c>
 80162e2:	4b2e      	ldr	r3, [pc, #184]	; (801639c <__mdiff+0x10c>)
 80162e4:	4602      	mov	r2, r0
 80162e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80162ea:	e7e5      	b.n	80162b8 <__mdiff+0x28>
 80162ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80162f0:	6926      	ldr	r6, [r4, #16]
 80162f2:	60c5      	str	r5, [r0, #12]
 80162f4:	f104 0914 	add.w	r9, r4, #20
 80162f8:	f108 0514 	add.w	r5, r8, #20
 80162fc:	f100 0e14 	add.w	lr, r0, #20
 8016300:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016304:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016308:	f108 0210 	add.w	r2, r8, #16
 801630c:	46f2      	mov	sl, lr
 801630e:	2100      	movs	r1, #0
 8016310:	f859 3b04 	ldr.w	r3, [r9], #4
 8016314:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016318:	fa1f f883 	uxth.w	r8, r3
 801631c:	fa11 f18b 	uxtah	r1, r1, fp
 8016320:	0c1b      	lsrs	r3, r3, #16
 8016322:	eba1 0808 	sub.w	r8, r1, r8
 8016326:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801632a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801632e:	fa1f f888 	uxth.w	r8, r8
 8016332:	1419      	asrs	r1, r3, #16
 8016334:	454e      	cmp	r6, r9
 8016336:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801633a:	f84a 3b04 	str.w	r3, [sl], #4
 801633e:	d8e7      	bhi.n	8016310 <__mdiff+0x80>
 8016340:	1b33      	subs	r3, r6, r4
 8016342:	3b15      	subs	r3, #21
 8016344:	f023 0303 	bic.w	r3, r3, #3
 8016348:	3304      	adds	r3, #4
 801634a:	3415      	adds	r4, #21
 801634c:	42a6      	cmp	r6, r4
 801634e:	bf38      	it	cc
 8016350:	2304      	movcc	r3, #4
 8016352:	441d      	add	r5, r3
 8016354:	4473      	add	r3, lr
 8016356:	469e      	mov	lr, r3
 8016358:	462e      	mov	r6, r5
 801635a:	4566      	cmp	r6, ip
 801635c:	d30e      	bcc.n	801637c <__mdiff+0xec>
 801635e:	f10c 0203 	add.w	r2, ip, #3
 8016362:	1b52      	subs	r2, r2, r5
 8016364:	f022 0203 	bic.w	r2, r2, #3
 8016368:	3d03      	subs	r5, #3
 801636a:	45ac      	cmp	ip, r5
 801636c:	bf38      	it	cc
 801636e:	2200      	movcc	r2, #0
 8016370:	441a      	add	r2, r3
 8016372:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016376:	b17b      	cbz	r3, 8016398 <__mdiff+0x108>
 8016378:	6107      	str	r7, [r0, #16]
 801637a:	e7a3      	b.n	80162c4 <__mdiff+0x34>
 801637c:	f856 8b04 	ldr.w	r8, [r6], #4
 8016380:	fa11 f288 	uxtah	r2, r1, r8
 8016384:	1414      	asrs	r4, r2, #16
 8016386:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801638a:	b292      	uxth	r2, r2
 801638c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016390:	f84e 2b04 	str.w	r2, [lr], #4
 8016394:	1421      	asrs	r1, r4, #16
 8016396:	e7e0      	b.n	801635a <__mdiff+0xca>
 8016398:	3f01      	subs	r7, #1
 801639a:	e7ea      	b.n	8016372 <__mdiff+0xe2>
 801639c:	08017aa7 	.word	0x08017aa7
 80163a0:	08017ab8 	.word	0x08017ab8

080163a4 <__d2b>:
 80163a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80163a8:	4689      	mov	r9, r1
 80163aa:	2101      	movs	r1, #1
 80163ac:	ec57 6b10 	vmov	r6, r7, d0
 80163b0:	4690      	mov	r8, r2
 80163b2:	f7ff fccf 	bl	8015d54 <_Balloc>
 80163b6:	4604      	mov	r4, r0
 80163b8:	b930      	cbnz	r0, 80163c8 <__d2b+0x24>
 80163ba:	4602      	mov	r2, r0
 80163bc:	4b25      	ldr	r3, [pc, #148]	; (8016454 <__d2b+0xb0>)
 80163be:	4826      	ldr	r0, [pc, #152]	; (8016458 <__d2b+0xb4>)
 80163c0:	f240 310a 	movw	r1, #778	; 0x30a
 80163c4:	f000 fa1a 	bl	80167fc <__assert_func>
 80163c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80163cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80163d0:	bb35      	cbnz	r5, 8016420 <__d2b+0x7c>
 80163d2:	2e00      	cmp	r6, #0
 80163d4:	9301      	str	r3, [sp, #4]
 80163d6:	d028      	beq.n	801642a <__d2b+0x86>
 80163d8:	4668      	mov	r0, sp
 80163da:	9600      	str	r6, [sp, #0]
 80163dc:	f7ff fd82 	bl	8015ee4 <__lo0bits>
 80163e0:	9900      	ldr	r1, [sp, #0]
 80163e2:	b300      	cbz	r0, 8016426 <__d2b+0x82>
 80163e4:	9a01      	ldr	r2, [sp, #4]
 80163e6:	f1c0 0320 	rsb	r3, r0, #32
 80163ea:	fa02 f303 	lsl.w	r3, r2, r3
 80163ee:	430b      	orrs	r3, r1
 80163f0:	40c2      	lsrs	r2, r0
 80163f2:	6163      	str	r3, [r4, #20]
 80163f4:	9201      	str	r2, [sp, #4]
 80163f6:	9b01      	ldr	r3, [sp, #4]
 80163f8:	61a3      	str	r3, [r4, #24]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	bf14      	ite	ne
 80163fe:	2202      	movne	r2, #2
 8016400:	2201      	moveq	r2, #1
 8016402:	6122      	str	r2, [r4, #16]
 8016404:	b1d5      	cbz	r5, 801643c <__d2b+0x98>
 8016406:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801640a:	4405      	add	r5, r0
 801640c:	f8c9 5000 	str.w	r5, [r9]
 8016410:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016414:	f8c8 0000 	str.w	r0, [r8]
 8016418:	4620      	mov	r0, r4
 801641a:	b003      	add	sp, #12
 801641c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016424:	e7d5      	b.n	80163d2 <__d2b+0x2e>
 8016426:	6161      	str	r1, [r4, #20]
 8016428:	e7e5      	b.n	80163f6 <__d2b+0x52>
 801642a:	a801      	add	r0, sp, #4
 801642c:	f7ff fd5a 	bl	8015ee4 <__lo0bits>
 8016430:	9b01      	ldr	r3, [sp, #4]
 8016432:	6163      	str	r3, [r4, #20]
 8016434:	2201      	movs	r2, #1
 8016436:	6122      	str	r2, [r4, #16]
 8016438:	3020      	adds	r0, #32
 801643a:	e7e3      	b.n	8016404 <__d2b+0x60>
 801643c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016440:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016444:	f8c9 0000 	str.w	r0, [r9]
 8016448:	6918      	ldr	r0, [r3, #16]
 801644a:	f7ff fd2b 	bl	8015ea4 <__hi0bits>
 801644e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016452:	e7df      	b.n	8016414 <__d2b+0x70>
 8016454:	08017aa7 	.word	0x08017aa7
 8016458:	08017ab8 	.word	0x08017ab8

0801645c <_calloc_r>:
 801645c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801645e:	fba1 2402 	umull	r2, r4, r1, r2
 8016462:	b94c      	cbnz	r4, 8016478 <_calloc_r+0x1c>
 8016464:	4611      	mov	r1, r2
 8016466:	9201      	str	r2, [sp, #4]
 8016468:	f7fd ff22 	bl	80142b0 <_malloc_r>
 801646c:	9a01      	ldr	r2, [sp, #4]
 801646e:	4605      	mov	r5, r0
 8016470:	b930      	cbnz	r0, 8016480 <_calloc_r+0x24>
 8016472:	4628      	mov	r0, r5
 8016474:	b003      	add	sp, #12
 8016476:	bd30      	pop	{r4, r5, pc}
 8016478:	220c      	movs	r2, #12
 801647a:	6002      	str	r2, [r0, #0]
 801647c:	2500      	movs	r5, #0
 801647e:	e7f8      	b.n	8016472 <_calloc_r+0x16>
 8016480:	4621      	mov	r1, r4
 8016482:	f7fd feec 	bl	801425e <memset>
 8016486:	e7f4      	b.n	8016472 <_calloc_r+0x16>

08016488 <_free_r>:
 8016488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801648a:	2900      	cmp	r1, #0
 801648c:	d044      	beq.n	8016518 <_free_r+0x90>
 801648e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016492:	9001      	str	r0, [sp, #4]
 8016494:	2b00      	cmp	r3, #0
 8016496:	f1a1 0404 	sub.w	r4, r1, #4
 801649a:	bfb8      	it	lt
 801649c:	18e4      	addlt	r4, r4, r3
 801649e:	f7ff fc4d 	bl	8015d3c <__malloc_lock>
 80164a2:	4a1e      	ldr	r2, [pc, #120]	; (801651c <_free_r+0x94>)
 80164a4:	9801      	ldr	r0, [sp, #4]
 80164a6:	6813      	ldr	r3, [r2, #0]
 80164a8:	b933      	cbnz	r3, 80164b8 <_free_r+0x30>
 80164aa:	6063      	str	r3, [r4, #4]
 80164ac:	6014      	str	r4, [r2, #0]
 80164ae:	b003      	add	sp, #12
 80164b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164b4:	f7ff bc48 	b.w	8015d48 <__malloc_unlock>
 80164b8:	42a3      	cmp	r3, r4
 80164ba:	d908      	bls.n	80164ce <_free_r+0x46>
 80164bc:	6825      	ldr	r5, [r4, #0]
 80164be:	1961      	adds	r1, r4, r5
 80164c0:	428b      	cmp	r3, r1
 80164c2:	bf01      	itttt	eq
 80164c4:	6819      	ldreq	r1, [r3, #0]
 80164c6:	685b      	ldreq	r3, [r3, #4]
 80164c8:	1949      	addeq	r1, r1, r5
 80164ca:	6021      	streq	r1, [r4, #0]
 80164cc:	e7ed      	b.n	80164aa <_free_r+0x22>
 80164ce:	461a      	mov	r2, r3
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	b10b      	cbz	r3, 80164d8 <_free_r+0x50>
 80164d4:	42a3      	cmp	r3, r4
 80164d6:	d9fa      	bls.n	80164ce <_free_r+0x46>
 80164d8:	6811      	ldr	r1, [r2, #0]
 80164da:	1855      	adds	r5, r2, r1
 80164dc:	42a5      	cmp	r5, r4
 80164de:	d10b      	bne.n	80164f8 <_free_r+0x70>
 80164e0:	6824      	ldr	r4, [r4, #0]
 80164e2:	4421      	add	r1, r4
 80164e4:	1854      	adds	r4, r2, r1
 80164e6:	42a3      	cmp	r3, r4
 80164e8:	6011      	str	r1, [r2, #0]
 80164ea:	d1e0      	bne.n	80164ae <_free_r+0x26>
 80164ec:	681c      	ldr	r4, [r3, #0]
 80164ee:	685b      	ldr	r3, [r3, #4]
 80164f0:	6053      	str	r3, [r2, #4]
 80164f2:	4421      	add	r1, r4
 80164f4:	6011      	str	r1, [r2, #0]
 80164f6:	e7da      	b.n	80164ae <_free_r+0x26>
 80164f8:	d902      	bls.n	8016500 <_free_r+0x78>
 80164fa:	230c      	movs	r3, #12
 80164fc:	6003      	str	r3, [r0, #0]
 80164fe:	e7d6      	b.n	80164ae <_free_r+0x26>
 8016500:	6825      	ldr	r5, [r4, #0]
 8016502:	1961      	adds	r1, r4, r5
 8016504:	428b      	cmp	r3, r1
 8016506:	bf04      	itt	eq
 8016508:	6819      	ldreq	r1, [r3, #0]
 801650a:	685b      	ldreq	r3, [r3, #4]
 801650c:	6063      	str	r3, [r4, #4]
 801650e:	bf04      	itt	eq
 8016510:	1949      	addeq	r1, r1, r5
 8016512:	6021      	streq	r1, [r4, #0]
 8016514:	6054      	str	r4, [r2, #4]
 8016516:	e7ca      	b.n	80164ae <_free_r+0x26>
 8016518:	b003      	add	sp, #12
 801651a:	bd30      	pop	{r4, r5, pc}
 801651c:	20005ae0 	.word	0x20005ae0

08016520 <__ssputs_r>:
 8016520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016524:	688e      	ldr	r6, [r1, #8]
 8016526:	429e      	cmp	r6, r3
 8016528:	4682      	mov	sl, r0
 801652a:	460c      	mov	r4, r1
 801652c:	4690      	mov	r8, r2
 801652e:	461f      	mov	r7, r3
 8016530:	d838      	bhi.n	80165a4 <__ssputs_r+0x84>
 8016532:	898a      	ldrh	r2, [r1, #12]
 8016534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016538:	d032      	beq.n	80165a0 <__ssputs_r+0x80>
 801653a:	6825      	ldr	r5, [r4, #0]
 801653c:	6909      	ldr	r1, [r1, #16]
 801653e:	eba5 0901 	sub.w	r9, r5, r1
 8016542:	6965      	ldr	r5, [r4, #20]
 8016544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801654c:	3301      	adds	r3, #1
 801654e:	444b      	add	r3, r9
 8016550:	106d      	asrs	r5, r5, #1
 8016552:	429d      	cmp	r5, r3
 8016554:	bf38      	it	cc
 8016556:	461d      	movcc	r5, r3
 8016558:	0553      	lsls	r3, r2, #21
 801655a:	d531      	bpl.n	80165c0 <__ssputs_r+0xa0>
 801655c:	4629      	mov	r1, r5
 801655e:	f7fd fea7 	bl	80142b0 <_malloc_r>
 8016562:	4606      	mov	r6, r0
 8016564:	b950      	cbnz	r0, 801657c <__ssputs_r+0x5c>
 8016566:	230c      	movs	r3, #12
 8016568:	f8ca 3000 	str.w	r3, [sl]
 801656c:	89a3      	ldrh	r3, [r4, #12]
 801656e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016572:	81a3      	strh	r3, [r4, #12]
 8016574:	f04f 30ff 	mov.w	r0, #4294967295
 8016578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801657c:	6921      	ldr	r1, [r4, #16]
 801657e:	464a      	mov	r2, r9
 8016580:	f7fd fe45 	bl	801420e <memcpy>
 8016584:	89a3      	ldrh	r3, [r4, #12]
 8016586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801658e:	81a3      	strh	r3, [r4, #12]
 8016590:	6126      	str	r6, [r4, #16]
 8016592:	6165      	str	r5, [r4, #20]
 8016594:	444e      	add	r6, r9
 8016596:	eba5 0509 	sub.w	r5, r5, r9
 801659a:	6026      	str	r6, [r4, #0]
 801659c:	60a5      	str	r5, [r4, #8]
 801659e:	463e      	mov	r6, r7
 80165a0:	42be      	cmp	r6, r7
 80165a2:	d900      	bls.n	80165a6 <__ssputs_r+0x86>
 80165a4:	463e      	mov	r6, r7
 80165a6:	6820      	ldr	r0, [r4, #0]
 80165a8:	4632      	mov	r2, r6
 80165aa:	4641      	mov	r1, r8
 80165ac:	f7fd fe3d 	bl	801422a <memmove>
 80165b0:	68a3      	ldr	r3, [r4, #8]
 80165b2:	1b9b      	subs	r3, r3, r6
 80165b4:	60a3      	str	r3, [r4, #8]
 80165b6:	6823      	ldr	r3, [r4, #0]
 80165b8:	4433      	add	r3, r6
 80165ba:	6023      	str	r3, [r4, #0]
 80165bc:	2000      	movs	r0, #0
 80165be:	e7db      	b.n	8016578 <__ssputs_r+0x58>
 80165c0:	462a      	mov	r2, r5
 80165c2:	f000 f95d 	bl	8016880 <_realloc_r>
 80165c6:	4606      	mov	r6, r0
 80165c8:	2800      	cmp	r0, #0
 80165ca:	d1e1      	bne.n	8016590 <__ssputs_r+0x70>
 80165cc:	6921      	ldr	r1, [r4, #16]
 80165ce:	4650      	mov	r0, sl
 80165d0:	f7ff ff5a 	bl	8016488 <_free_r>
 80165d4:	e7c7      	b.n	8016566 <__ssputs_r+0x46>
	...

080165d8 <_svfiprintf_r>:
 80165d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165dc:	4698      	mov	r8, r3
 80165de:	898b      	ldrh	r3, [r1, #12]
 80165e0:	061b      	lsls	r3, r3, #24
 80165e2:	b09d      	sub	sp, #116	; 0x74
 80165e4:	4607      	mov	r7, r0
 80165e6:	460d      	mov	r5, r1
 80165e8:	4614      	mov	r4, r2
 80165ea:	d50e      	bpl.n	801660a <_svfiprintf_r+0x32>
 80165ec:	690b      	ldr	r3, [r1, #16]
 80165ee:	b963      	cbnz	r3, 801660a <_svfiprintf_r+0x32>
 80165f0:	2140      	movs	r1, #64	; 0x40
 80165f2:	f7fd fe5d 	bl	80142b0 <_malloc_r>
 80165f6:	6028      	str	r0, [r5, #0]
 80165f8:	6128      	str	r0, [r5, #16]
 80165fa:	b920      	cbnz	r0, 8016606 <_svfiprintf_r+0x2e>
 80165fc:	230c      	movs	r3, #12
 80165fe:	603b      	str	r3, [r7, #0]
 8016600:	f04f 30ff 	mov.w	r0, #4294967295
 8016604:	e0d1      	b.n	80167aa <_svfiprintf_r+0x1d2>
 8016606:	2340      	movs	r3, #64	; 0x40
 8016608:	616b      	str	r3, [r5, #20]
 801660a:	2300      	movs	r3, #0
 801660c:	9309      	str	r3, [sp, #36]	; 0x24
 801660e:	2320      	movs	r3, #32
 8016610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016614:	f8cd 800c 	str.w	r8, [sp, #12]
 8016618:	2330      	movs	r3, #48	; 0x30
 801661a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80167c4 <_svfiprintf_r+0x1ec>
 801661e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016622:	f04f 0901 	mov.w	r9, #1
 8016626:	4623      	mov	r3, r4
 8016628:	469a      	mov	sl, r3
 801662a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801662e:	b10a      	cbz	r2, 8016634 <_svfiprintf_r+0x5c>
 8016630:	2a25      	cmp	r2, #37	; 0x25
 8016632:	d1f9      	bne.n	8016628 <_svfiprintf_r+0x50>
 8016634:	ebba 0b04 	subs.w	fp, sl, r4
 8016638:	d00b      	beq.n	8016652 <_svfiprintf_r+0x7a>
 801663a:	465b      	mov	r3, fp
 801663c:	4622      	mov	r2, r4
 801663e:	4629      	mov	r1, r5
 8016640:	4638      	mov	r0, r7
 8016642:	f7ff ff6d 	bl	8016520 <__ssputs_r>
 8016646:	3001      	adds	r0, #1
 8016648:	f000 80aa 	beq.w	80167a0 <_svfiprintf_r+0x1c8>
 801664c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801664e:	445a      	add	r2, fp
 8016650:	9209      	str	r2, [sp, #36]	; 0x24
 8016652:	f89a 3000 	ldrb.w	r3, [sl]
 8016656:	2b00      	cmp	r3, #0
 8016658:	f000 80a2 	beq.w	80167a0 <_svfiprintf_r+0x1c8>
 801665c:	2300      	movs	r3, #0
 801665e:	f04f 32ff 	mov.w	r2, #4294967295
 8016662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016666:	f10a 0a01 	add.w	sl, sl, #1
 801666a:	9304      	str	r3, [sp, #16]
 801666c:	9307      	str	r3, [sp, #28]
 801666e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016672:	931a      	str	r3, [sp, #104]	; 0x68
 8016674:	4654      	mov	r4, sl
 8016676:	2205      	movs	r2, #5
 8016678:	f814 1b01 	ldrb.w	r1, [r4], #1
 801667c:	4851      	ldr	r0, [pc, #324]	; (80167c4 <_svfiprintf_r+0x1ec>)
 801667e:	f7e9 fdb7 	bl	80001f0 <memchr>
 8016682:	9a04      	ldr	r2, [sp, #16]
 8016684:	b9d8      	cbnz	r0, 80166be <_svfiprintf_r+0xe6>
 8016686:	06d0      	lsls	r0, r2, #27
 8016688:	bf44      	itt	mi
 801668a:	2320      	movmi	r3, #32
 801668c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016690:	0711      	lsls	r1, r2, #28
 8016692:	bf44      	itt	mi
 8016694:	232b      	movmi	r3, #43	; 0x2b
 8016696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801669a:	f89a 3000 	ldrb.w	r3, [sl]
 801669e:	2b2a      	cmp	r3, #42	; 0x2a
 80166a0:	d015      	beq.n	80166ce <_svfiprintf_r+0xf6>
 80166a2:	9a07      	ldr	r2, [sp, #28]
 80166a4:	4654      	mov	r4, sl
 80166a6:	2000      	movs	r0, #0
 80166a8:	f04f 0c0a 	mov.w	ip, #10
 80166ac:	4621      	mov	r1, r4
 80166ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80166b2:	3b30      	subs	r3, #48	; 0x30
 80166b4:	2b09      	cmp	r3, #9
 80166b6:	d94e      	bls.n	8016756 <_svfiprintf_r+0x17e>
 80166b8:	b1b0      	cbz	r0, 80166e8 <_svfiprintf_r+0x110>
 80166ba:	9207      	str	r2, [sp, #28]
 80166bc:	e014      	b.n	80166e8 <_svfiprintf_r+0x110>
 80166be:	eba0 0308 	sub.w	r3, r0, r8
 80166c2:	fa09 f303 	lsl.w	r3, r9, r3
 80166c6:	4313      	orrs	r3, r2
 80166c8:	9304      	str	r3, [sp, #16]
 80166ca:	46a2      	mov	sl, r4
 80166cc:	e7d2      	b.n	8016674 <_svfiprintf_r+0x9c>
 80166ce:	9b03      	ldr	r3, [sp, #12]
 80166d0:	1d19      	adds	r1, r3, #4
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	9103      	str	r1, [sp, #12]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	bfbb      	ittet	lt
 80166da:	425b      	neglt	r3, r3
 80166dc:	f042 0202 	orrlt.w	r2, r2, #2
 80166e0:	9307      	strge	r3, [sp, #28]
 80166e2:	9307      	strlt	r3, [sp, #28]
 80166e4:	bfb8      	it	lt
 80166e6:	9204      	strlt	r2, [sp, #16]
 80166e8:	7823      	ldrb	r3, [r4, #0]
 80166ea:	2b2e      	cmp	r3, #46	; 0x2e
 80166ec:	d10c      	bne.n	8016708 <_svfiprintf_r+0x130>
 80166ee:	7863      	ldrb	r3, [r4, #1]
 80166f0:	2b2a      	cmp	r3, #42	; 0x2a
 80166f2:	d135      	bne.n	8016760 <_svfiprintf_r+0x188>
 80166f4:	9b03      	ldr	r3, [sp, #12]
 80166f6:	1d1a      	adds	r2, r3, #4
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	9203      	str	r2, [sp, #12]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	bfb8      	it	lt
 8016700:	f04f 33ff 	movlt.w	r3, #4294967295
 8016704:	3402      	adds	r4, #2
 8016706:	9305      	str	r3, [sp, #20]
 8016708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80167d4 <_svfiprintf_r+0x1fc>
 801670c:	7821      	ldrb	r1, [r4, #0]
 801670e:	2203      	movs	r2, #3
 8016710:	4650      	mov	r0, sl
 8016712:	f7e9 fd6d 	bl	80001f0 <memchr>
 8016716:	b140      	cbz	r0, 801672a <_svfiprintf_r+0x152>
 8016718:	2340      	movs	r3, #64	; 0x40
 801671a:	eba0 000a 	sub.w	r0, r0, sl
 801671e:	fa03 f000 	lsl.w	r0, r3, r0
 8016722:	9b04      	ldr	r3, [sp, #16]
 8016724:	4303      	orrs	r3, r0
 8016726:	3401      	adds	r4, #1
 8016728:	9304      	str	r3, [sp, #16]
 801672a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801672e:	4826      	ldr	r0, [pc, #152]	; (80167c8 <_svfiprintf_r+0x1f0>)
 8016730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016734:	2206      	movs	r2, #6
 8016736:	f7e9 fd5b 	bl	80001f0 <memchr>
 801673a:	2800      	cmp	r0, #0
 801673c:	d038      	beq.n	80167b0 <_svfiprintf_r+0x1d8>
 801673e:	4b23      	ldr	r3, [pc, #140]	; (80167cc <_svfiprintf_r+0x1f4>)
 8016740:	bb1b      	cbnz	r3, 801678a <_svfiprintf_r+0x1b2>
 8016742:	9b03      	ldr	r3, [sp, #12]
 8016744:	3307      	adds	r3, #7
 8016746:	f023 0307 	bic.w	r3, r3, #7
 801674a:	3308      	adds	r3, #8
 801674c:	9303      	str	r3, [sp, #12]
 801674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016750:	4433      	add	r3, r6
 8016752:	9309      	str	r3, [sp, #36]	; 0x24
 8016754:	e767      	b.n	8016626 <_svfiprintf_r+0x4e>
 8016756:	fb0c 3202 	mla	r2, ip, r2, r3
 801675a:	460c      	mov	r4, r1
 801675c:	2001      	movs	r0, #1
 801675e:	e7a5      	b.n	80166ac <_svfiprintf_r+0xd4>
 8016760:	2300      	movs	r3, #0
 8016762:	3401      	adds	r4, #1
 8016764:	9305      	str	r3, [sp, #20]
 8016766:	4619      	mov	r1, r3
 8016768:	f04f 0c0a 	mov.w	ip, #10
 801676c:	4620      	mov	r0, r4
 801676e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016772:	3a30      	subs	r2, #48	; 0x30
 8016774:	2a09      	cmp	r2, #9
 8016776:	d903      	bls.n	8016780 <_svfiprintf_r+0x1a8>
 8016778:	2b00      	cmp	r3, #0
 801677a:	d0c5      	beq.n	8016708 <_svfiprintf_r+0x130>
 801677c:	9105      	str	r1, [sp, #20]
 801677e:	e7c3      	b.n	8016708 <_svfiprintf_r+0x130>
 8016780:	fb0c 2101 	mla	r1, ip, r1, r2
 8016784:	4604      	mov	r4, r0
 8016786:	2301      	movs	r3, #1
 8016788:	e7f0      	b.n	801676c <_svfiprintf_r+0x194>
 801678a:	ab03      	add	r3, sp, #12
 801678c:	9300      	str	r3, [sp, #0]
 801678e:	462a      	mov	r2, r5
 8016790:	4b0f      	ldr	r3, [pc, #60]	; (80167d0 <_svfiprintf_r+0x1f8>)
 8016792:	a904      	add	r1, sp, #16
 8016794:	4638      	mov	r0, r7
 8016796:	f7fd fe9f 	bl	80144d8 <_printf_float>
 801679a:	1c42      	adds	r2, r0, #1
 801679c:	4606      	mov	r6, r0
 801679e:	d1d6      	bne.n	801674e <_svfiprintf_r+0x176>
 80167a0:	89ab      	ldrh	r3, [r5, #12]
 80167a2:	065b      	lsls	r3, r3, #25
 80167a4:	f53f af2c 	bmi.w	8016600 <_svfiprintf_r+0x28>
 80167a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167aa:	b01d      	add	sp, #116	; 0x74
 80167ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b0:	ab03      	add	r3, sp, #12
 80167b2:	9300      	str	r3, [sp, #0]
 80167b4:	462a      	mov	r2, r5
 80167b6:	4b06      	ldr	r3, [pc, #24]	; (80167d0 <_svfiprintf_r+0x1f8>)
 80167b8:	a904      	add	r1, sp, #16
 80167ba:	4638      	mov	r0, r7
 80167bc:	f7fe f930 	bl	8014a20 <_printf_i>
 80167c0:	e7eb      	b.n	801679a <_svfiprintf_r+0x1c2>
 80167c2:	bf00      	nop
 80167c4:	08017c14 	.word	0x08017c14
 80167c8:	08017c1e 	.word	0x08017c1e
 80167cc:	080144d9 	.word	0x080144d9
 80167d0:	08016521 	.word	0x08016521
 80167d4:	08017c1a 	.word	0x08017c1a

080167d8 <_read_r>:
 80167d8:	b538      	push	{r3, r4, r5, lr}
 80167da:	4d07      	ldr	r5, [pc, #28]	; (80167f8 <_read_r+0x20>)
 80167dc:	4604      	mov	r4, r0
 80167de:	4608      	mov	r0, r1
 80167e0:	4611      	mov	r1, r2
 80167e2:	2200      	movs	r2, #0
 80167e4:	602a      	str	r2, [r5, #0]
 80167e6:	461a      	mov	r2, r3
 80167e8:	f7ee fc88 	bl	80050fc <_read>
 80167ec:	1c43      	adds	r3, r0, #1
 80167ee:	d102      	bne.n	80167f6 <_read_r+0x1e>
 80167f0:	682b      	ldr	r3, [r5, #0]
 80167f2:	b103      	cbz	r3, 80167f6 <_read_r+0x1e>
 80167f4:	6023      	str	r3, [r4, #0]
 80167f6:	bd38      	pop	{r3, r4, r5, pc}
 80167f8:	20005ae8 	.word	0x20005ae8

080167fc <__assert_func>:
 80167fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167fe:	4614      	mov	r4, r2
 8016800:	461a      	mov	r2, r3
 8016802:	4b09      	ldr	r3, [pc, #36]	; (8016828 <__assert_func+0x2c>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	4605      	mov	r5, r0
 8016808:	68d8      	ldr	r0, [r3, #12]
 801680a:	b14c      	cbz	r4, 8016820 <__assert_func+0x24>
 801680c:	4b07      	ldr	r3, [pc, #28]	; (801682c <__assert_func+0x30>)
 801680e:	9100      	str	r1, [sp, #0]
 8016810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016814:	4906      	ldr	r1, [pc, #24]	; (8016830 <__assert_func+0x34>)
 8016816:	462b      	mov	r3, r5
 8016818:	f000 f80e 	bl	8016838 <fiprintf>
 801681c:	f000 fa86 	bl	8016d2c <abort>
 8016820:	4b04      	ldr	r3, [pc, #16]	; (8016834 <__assert_func+0x38>)
 8016822:	461c      	mov	r4, r3
 8016824:	e7f3      	b.n	801680e <__assert_func+0x12>
 8016826:	bf00      	nop
 8016828:	20000124 	.word	0x20000124
 801682c:	08017c25 	.word	0x08017c25
 8016830:	08017c32 	.word	0x08017c32
 8016834:	08017c60 	.word	0x08017c60

08016838 <fiprintf>:
 8016838:	b40e      	push	{r1, r2, r3}
 801683a:	b503      	push	{r0, r1, lr}
 801683c:	4601      	mov	r1, r0
 801683e:	ab03      	add	r3, sp, #12
 8016840:	4805      	ldr	r0, [pc, #20]	; (8016858 <fiprintf+0x20>)
 8016842:	f853 2b04 	ldr.w	r2, [r3], #4
 8016846:	6800      	ldr	r0, [r0, #0]
 8016848:	9301      	str	r3, [sp, #4]
 801684a:	f000 f871 	bl	8016930 <_vfiprintf_r>
 801684e:	b002      	add	sp, #8
 8016850:	f85d eb04 	ldr.w	lr, [sp], #4
 8016854:	b003      	add	sp, #12
 8016856:	4770      	bx	lr
 8016858:	20000124 	.word	0x20000124

0801685c <__ascii_mbtowc>:
 801685c:	b082      	sub	sp, #8
 801685e:	b901      	cbnz	r1, 8016862 <__ascii_mbtowc+0x6>
 8016860:	a901      	add	r1, sp, #4
 8016862:	b142      	cbz	r2, 8016876 <__ascii_mbtowc+0x1a>
 8016864:	b14b      	cbz	r3, 801687a <__ascii_mbtowc+0x1e>
 8016866:	7813      	ldrb	r3, [r2, #0]
 8016868:	600b      	str	r3, [r1, #0]
 801686a:	7812      	ldrb	r2, [r2, #0]
 801686c:	1e10      	subs	r0, r2, #0
 801686e:	bf18      	it	ne
 8016870:	2001      	movne	r0, #1
 8016872:	b002      	add	sp, #8
 8016874:	4770      	bx	lr
 8016876:	4610      	mov	r0, r2
 8016878:	e7fb      	b.n	8016872 <__ascii_mbtowc+0x16>
 801687a:	f06f 0001 	mvn.w	r0, #1
 801687e:	e7f8      	b.n	8016872 <__ascii_mbtowc+0x16>

08016880 <_realloc_r>:
 8016880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016884:	4680      	mov	r8, r0
 8016886:	4614      	mov	r4, r2
 8016888:	460e      	mov	r6, r1
 801688a:	b921      	cbnz	r1, 8016896 <_realloc_r+0x16>
 801688c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016890:	4611      	mov	r1, r2
 8016892:	f7fd bd0d 	b.w	80142b0 <_malloc_r>
 8016896:	b92a      	cbnz	r2, 80168a4 <_realloc_r+0x24>
 8016898:	f7ff fdf6 	bl	8016488 <_free_r>
 801689c:	4625      	mov	r5, r4
 801689e:	4628      	mov	r0, r5
 80168a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a4:	f000 faae 	bl	8016e04 <_malloc_usable_size_r>
 80168a8:	4284      	cmp	r4, r0
 80168aa:	4607      	mov	r7, r0
 80168ac:	d802      	bhi.n	80168b4 <_realloc_r+0x34>
 80168ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80168b2:	d812      	bhi.n	80168da <_realloc_r+0x5a>
 80168b4:	4621      	mov	r1, r4
 80168b6:	4640      	mov	r0, r8
 80168b8:	f7fd fcfa 	bl	80142b0 <_malloc_r>
 80168bc:	4605      	mov	r5, r0
 80168be:	2800      	cmp	r0, #0
 80168c0:	d0ed      	beq.n	801689e <_realloc_r+0x1e>
 80168c2:	42bc      	cmp	r4, r7
 80168c4:	4622      	mov	r2, r4
 80168c6:	4631      	mov	r1, r6
 80168c8:	bf28      	it	cs
 80168ca:	463a      	movcs	r2, r7
 80168cc:	f7fd fc9f 	bl	801420e <memcpy>
 80168d0:	4631      	mov	r1, r6
 80168d2:	4640      	mov	r0, r8
 80168d4:	f7ff fdd8 	bl	8016488 <_free_r>
 80168d8:	e7e1      	b.n	801689e <_realloc_r+0x1e>
 80168da:	4635      	mov	r5, r6
 80168dc:	e7df      	b.n	801689e <_realloc_r+0x1e>

080168de <__sfputc_r>:
 80168de:	6893      	ldr	r3, [r2, #8]
 80168e0:	3b01      	subs	r3, #1
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	b410      	push	{r4}
 80168e6:	6093      	str	r3, [r2, #8]
 80168e8:	da08      	bge.n	80168fc <__sfputc_r+0x1e>
 80168ea:	6994      	ldr	r4, [r2, #24]
 80168ec:	42a3      	cmp	r3, r4
 80168ee:	db01      	blt.n	80168f4 <__sfputc_r+0x16>
 80168f0:	290a      	cmp	r1, #10
 80168f2:	d103      	bne.n	80168fc <__sfputc_r+0x1e>
 80168f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168f8:	f000 b94a 	b.w	8016b90 <__swbuf_r>
 80168fc:	6813      	ldr	r3, [r2, #0]
 80168fe:	1c58      	adds	r0, r3, #1
 8016900:	6010      	str	r0, [r2, #0]
 8016902:	7019      	strb	r1, [r3, #0]
 8016904:	4608      	mov	r0, r1
 8016906:	f85d 4b04 	ldr.w	r4, [sp], #4
 801690a:	4770      	bx	lr

0801690c <__sfputs_r>:
 801690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801690e:	4606      	mov	r6, r0
 8016910:	460f      	mov	r7, r1
 8016912:	4614      	mov	r4, r2
 8016914:	18d5      	adds	r5, r2, r3
 8016916:	42ac      	cmp	r4, r5
 8016918:	d101      	bne.n	801691e <__sfputs_r+0x12>
 801691a:	2000      	movs	r0, #0
 801691c:	e007      	b.n	801692e <__sfputs_r+0x22>
 801691e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016922:	463a      	mov	r2, r7
 8016924:	4630      	mov	r0, r6
 8016926:	f7ff ffda 	bl	80168de <__sfputc_r>
 801692a:	1c43      	adds	r3, r0, #1
 801692c:	d1f3      	bne.n	8016916 <__sfputs_r+0xa>
 801692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016930 <_vfiprintf_r>:
 8016930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016934:	460d      	mov	r5, r1
 8016936:	b09d      	sub	sp, #116	; 0x74
 8016938:	4614      	mov	r4, r2
 801693a:	4698      	mov	r8, r3
 801693c:	4606      	mov	r6, r0
 801693e:	b118      	cbz	r0, 8016948 <_vfiprintf_r+0x18>
 8016940:	6983      	ldr	r3, [r0, #24]
 8016942:	b90b      	cbnz	r3, 8016948 <_vfiprintf_r+0x18>
 8016944:	f7fd fb9e 	bl	8014084 <__sinit>
 8016948:	4b89      	ldr	r3, [pc, #548]	; (8016b70 <_vfiprintf_r+0x240>)
 801694a:	429d      	cmp	r5, r3
 801694c:	d11b      	bne.n	8016986 <_vfiprintf_r+0x56>
 801694e:	6875      	ldr	r5, [r6, #4]
 8016950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016952:	07d9      	lsls	r1, r3, #31
 8016954:	d405      	bmi.n	8016962 <_vfiprintf_r+0x32>
 8016956:	89ab      	ldrh	r3, [r5, #12]
 8016958:	059a      	lsls	r2, r3, #22
 801695a:	d402      	bmi.n	8016962 <_vfiprintf_r+0x32>
 801695c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801695e:	f7fd fc54 	bl	801420a <__retarget_lock_acquire_recursive>
 8016962:	89ab      	ldrh	r3, [r5, #12]
 8016964:	071b      	lsls	r3, r3, #28
 8016966:	d501      	bpl.n	801696c <_vfiprintf_r+0x3c>
 8016968:	692b      	ldr	r3, [r5, #16]
 801696a:	b9eb      	cbnz	r3, 80169a8 <_vfiprintf_r+0x78>
 801696c:	4629      	mov	r1, r5
 801696e:	4630      	mov	r0, r6
 8016970:	f000 f96e 	bl	8016c50 <__swsetup_r>
 8016974:	b1c0      	cbz	r0, 80169a8 <_vfiprintf_r+0x78>
 8016976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016978:	07dc      	lsls	r4, r3, #31
 801697a:	d50e      	bpl.n	801699a <_vfiprintf_r+0x6a>
 801697c:	f04f 30ff 	mov.w	r0, #4294967295
 8016980:	b01d      	add	sp, #116	; 0x74
 8016982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016986:	4b7b      	ldr	r3, [pc, #492]	; (8016b74 <_vfiprintf_r+0x244>)
 8016988:	429d      	cmp	r5, r3
 801698a:	d101      	bne.n	8016990 <_vfiprintf_r+0x60>
 801698c:	68b5      	ldr	r5, [r6, #8]
 801698e:	e7df      	b.n	8016950 <_vfiprintf_r+0x20>
 8016990:	4b79      	ldr	r3, [pc, #484]	; (8016b78 <_vfiprintf_r+0x248>)
 8016992:	429d      	cmp	r5, r3
 8016994:	bf08      	it	eq
 8016996:	68f5      	ldreq	r5, [r6, #12]
 8016998:	e7da      	b.n	8016950 <_vfiprintf_r+0x20>
 801699a:	89ab      	ldrh	r3, [r5, #12]
 801699c:	0598      	lsls	r0, r3, #22
 801699e:	d4ed      	bmi.n	801697c <_vfiprintf_r+0x4c>
 80169a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169a2:	f7fd fc33 	bl	801420c <__retarget_lock_release_recursive>
 80169a6:	e7e9      	b.n	801697c <_vfiprintf_r+0x4c>
 80169a8:	2300      	movs	r3, #0
 80169aa:	9309      	str	r3, [sp, #36]	; 0x24
 80169ac:	2320      	movs	r3, #32
 80169ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80169b6:	2330      	movs	r3, #48	; 0x30
 80169b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016b7c <_vfiprintf_r+0x24c>
 80169bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169c0:	f04f 0901 	mov.w	r9, #1
 80169c4:	4623      	mov	r3, r4
 80169c6:	469a      	mov	sl, r3
 80169c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169cc:	b10a      	cbz	r2, 80169d2 <_vfiprintf_r+0xa2>
 80169ce:	2a25      	cmp	r2, #37	; 0x25
 80169d0:	d1f9      	bne.n	80169c6 <_vfiprintf_r+0x96>
 80169d2:	ebba 0b04 	subs.w	fp, sl, r4
 80169d6:	d00b      	beq.n	80169f0 <_vfiprintf_r+0xc0>
 80169d8:	465b      	mov	r3, fp
 80169da:	4622      	mov	r2, r4
 80169dc:	4629      	mov	r1, r5
 80169de:	4630      	mov	r0, r6
 80169e0:	f7ff ff94 	bl	801690c <__sfputs_r>
 80169e4:	3001      	adds	r0, #1
 80169e6:	f000 80aa 	beq.w	8016b3e <_vfiprintf_r+0x20e>
 80169ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169ec:	445a      	add	r2, fp
 80169ee:	9209      	str	r2, [sp, #36]	; 0x24
 80169f0:	f89a 3000 	ldrb.w	r3, [sl]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	f000 80a2 	beq.w	8016b3e <_vfiprintf_r+0x20e>
 80169fa:	2300      	movs	r3, #0
 80169fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a04:	f10a 0a01 	add.w	sl, sl, #1
 8016a08:	9304      	str	r3, [sp, #16]
 8016a0a:	9307      	str	r3, [sp, #28]
 8016a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a10:	931a      	str	r3, [sp, #104]	; 0x68
 8016a12:	4654      	mov	r4, sl
 8016a14:	2205      	movs	r2, #5
 8016a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a1a:	4858      	ldr	r0, [pc, #352]	; (8016b7c <_vfiprintf_r+0x24c>)
 8016a1c:	f7e9 fbe8 	bl	80001f0 <memchr>
 8016a20:	9a04      	ldr	r2, [sp, #16]
 8016a22:	b9d8      	cbnz	r0, 8016a5c <_vfiprintf_r+0x12c>
 8016a24:	06d1      	lsls	r1, r2, #27
 8016a26:	bf44      	itt	mi
 8016a28:	2320      	movmi	r3, #32
 8016a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a2e:	0713      	lsls	r3, r2, #28
 8016a30:	bf44      	itt	mi
 8016a32:	232b      	movmi	r3, #43	; 0x2b
 8016a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a38:	f89a 3000 	ldrb.w	r3, [sl]
 8016a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8016a3e:	d015      	beq.n	8016a6c <_vfiprintf_r+0x13c>
 8016a40:	9a07      	ldr	r2, [sp, #28]
 8016a42:	4654      	mov	r4, sl
 8016a44:	2000      	movs	r0, #0
 8016a46:	f04f 0c0a 	mov.w	ip, #10
 8016a4a:	4621      	mov	r1, r4
 8016a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a50:	3b30      	subs	r3, #48	; 0x30
 8016a52:	2b09      	cmp	r3, #9
 8016a54:	d94e      	bls.n	8016af4 <_vfiprintf_r+0x1c4>
 8016a56:	b1b0      	cbz	r0, 8016a86 <_vfiprintf_r+0x156>
 8016a58:	9207      	str	r2, [sp, #28]
 8016a5a:	e014      	b.n	8016a86 <_vfiprintf_r+0x156>
 8016a5c:	eba0 0308 	sub.w	r3, r0, r8
 8016a60:	fa09 f303 	lsl.w	r3, r9, r3
 8016a64:	4313      	orrs	r3, r2
 8016a66:	9304      	str	r3, [sp, #16]
 8016a68:	46a2      	mov	sl, r4
 8016a6a:	e7d2      	b.n	8016a12 <_vfiprintf_r+0xe2>
 8016a6c:	9b03      	ldr	r3, [sp, #12]
 8016a6e:	1d19      	adds	r1, r3, #4
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	9103      	str	r1, [sp, #12]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	bfbb      	ittet	lt
 8016a78:	425b      	neglt	r3, r3
 8016a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8016a7e:	9307      	strge	r3, [sp, #28]
 8016a80:	9307      	strlt	r3, [sp, #28]
 8016a82:	bfb8      	it	lt
 8016a84:	9204      	strlt	r2, [sp, #16]
 8016a86:	7823      	ldrb	r3, [r4, #0]
 8016a88:	2b2e      	cmp	r3, #46	; 0x2e
 8016a8a:	d10c      	bne.n	8016aa6 <_vfiprintf_r+0x176>
 8016a8c:	7863      	ldrb	r3, [r4, #1]
 8016a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8016a90:	d135      	bne.n	8016afe <_vfiprintf_r+0x1ce>
 8016a92:	9b03      	ldr	r3, [sp, #12]
 8016a94:	1d1a      	adds	r2, r3, #4
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	9203      	str	r2, [sp, #12]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	bfb8      	it	lt
 8016a9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016aa2:	3402      	adds	r4, #2
 8016aa4:	9305      	str	r3, [sp, #20]
 8016aa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016b8c <_vfiprintf_r+0x25c>
 8016aaa:	7821      	ldrb	r1, [r4, #0]
 8016aac:	2203      	movs	r2, #3
 8016aae:	4650      	mov	r0, sl
 8016ab0:	f7e9 fb9e 	bl	80001f0 <memchr>
 8016ab4:	b140      	cbz	r0, 8016ac8 <_vfiprintf_r+0x198>
 8016ab6:	2340      	movs	r3, #64	; 0x40
 8016ab8:	eba0 000a 	sub.w	r0, r0, sl
 8016abc:	fa03 f000 	lsl.w	r0, r3, r0
 8016ac0:	9b04      	ldr	r3, [sp, #16]
 8016ac2:	4303      	orrs	r3, r0
 8016ac4:	3401      	adds	r4, #1
 8016ac6:	9304      	str	r3, [sp, #16]
 8016ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016acc:	482c      	ldr	r0, [pc, #176]	; (8016b80 <_vfiprintf_r+0x250>)
 8016ace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ad2:	2206      	movs	r2, #6
 8016ad4:	f7e9 fb8c 	bl	80001f0 <memchr>
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	d03f      	beq.n	8016b5c <_vfiprintf_r+0x22c>
 8016adc:	4b29      	ldr	r3, [pc, #164]	; (8016b84 <_vfiprintf_r+0x254>)
 8016ade:	bb1b      	cbnz	r3, 8016b28 <_vfiprintf_r+0x1f8>
 8016ae0:	9b03      	ldr	r3, [sp, #12]
 8016ae2:	3307      	adds	r3, #7
 8016ae4:	f023 0307 	bic.w	r3, r3, #7
 8016ae8:	3308      	adds	r3, #8
 8016aea:	9303      	str	r3, [sp, #12]
 8016aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aee:	443b      	add	r3, r7
 8016af0:	9309      	str	r3, [sp, #36]	; 0x24
 8016af2:	e767      	b.n	80169c4 <_vfiprintf_r+0x94>
 8016af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8016af8:	460c      	mov	r4, r1
 8016afa:	2001      	movs	r0, #1
 8016afc:	e7a5      	b.n	8016a4a <_vfiprintf_r+0x11a>
 8016afe:	2300      	movs	r3, #0
 8016b00:	3401      	adds	r4, #1
 8016b02:	9305      	str	r3, [sp, #20]
 8016b04:	4619      	mov	r1, r3
 8016b06:	f04f 0c0a 	mov.w	ip, #10
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b10:	3a30      	subs	r2, #48	; 0x30
 8016b12:	2a09      	cmp	r2, #9
 8016b14:	d903      	bls.n	8016b1e <_vfiprintf_r+0x1ee>
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d0c5      	beq.n	8016aa6 <_vfiprintf_r+0x176>
 8016b1a:	9105      	str	r1, [sp, #20]
 8016b1c:	e7c3      	b.n	8016aa6 <_vfiprintf_r+0x176>
 8016b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b22:	4604      	mov	r4, r0
 8016b24:	2301      	movs	r3, #1
 8016b26:	e7f0      	b.n	8016b0a <_vfiprintf_r+0x1da>
 8016b28:	ab03      	add	r3, sp, #12
 8016b2a:	9300      	str	r3, [sp, #0]
 8016b2c:	462a      	mov	r2, r5
 8016b2e:	4b16      	ldr	r3, [pc, #88]	; (8016b88 <_vfiprintf_r+0x258>)
 8016b30:	a904      	add	r1, sp, #16
 8016b32:	4630      	mov	r0, r6
 8016b34:	f7fd fcd0 	bl	80144d8 <_printf_float>
 8016b38:	4607      	mov	r7, r0
 8016b3a:	1c78      	adds	r0, r7, #1
 8016b3c:	d1d6      	bne.n	8016aec <_vfiprintf_r+0x1bc>
 8016b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b40:	07d9      	lsls	r1, r3, #31
 8016b42:	d405      	bmi.n	8016b50 <_vfiprintf_r+0x220>
 8016b44:	89ab      	ldrh	r3, [r5, #12]
 8016b46:	059a      	lsls	r2, r3, #22
 8016b48:	d402      	bmi.n	8016b50 <_vfiprintf_r+0x220>
 8016b4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b4c:	f7fd fb5e 	bl	801420c <__retarget_lock_release_recursive>
 8016b50:	89ab      	ldrh	r3, [r5, #12]
 8016b52:	065b      	lsls	r3, r3, #25
 8016b54:	f53f af12 	bmi.w	801697c <_vfiprintf_r+0x4c>
 8016b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b5a:	e711      	b.n	8016980 <_vfiprintf_r+0x50>
 8016b5c:	ab03      	add	r3, sp, #12
 8016b5e:	9300      	str	r3, [sp, #0]
 8016b60:	462a      	mov	r2, r5
 8016b62:	4b09      	ldr	r3, [pc, #36]	; (8016b88 <_vfiprintf_r+0x258>)
 8016b64:	a904      	add	r1, sp, #16
 8016b66:	4630      	mov	r0, r6
 8016b68:	f7fd ff5a 	bl	8014a20 <_printf_i>
 8016b6c:	e7e4      	b.n	8016b38 <_vfiprintf_r+0x208>
 8016b6e:	bf00      	nop
 8016b70:	080179b0 	.word	0x080179b0
 8016b74:	080179d0 	.word	0x080179d0
 8016b78:	08017990 	.word	0x08017990
 8016b7c:	08017c14 	.word	0x08017c14
 8016b80:	08017c1e 	.word	0x08017c1e
 8016b84:	080144d9 	.word	0x080144d9
 8016b88:	0801690d 	.word	0x0801690d
 8016b8c:	08017c1a 	.word	0x08017c1a

08016b90 <__swbuf_r>:
 8016b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b92:	460e      	mov	r6, r1
 8016b94:	4614      	mov	r4, r2
 8016b96:	4605      	mov	r5, r0
 8016b98:	b118      	cbz	r0, 8016ba2 <__swbuf_r+0x12>
 8016b9a:	6983      	ldr	r3, [r0, #24]
 8016b9c:	b90b      	cbnz	r3, 8016ba2 <__swbuf_r+0x12>
 8016b9e:	f7fd fa71 	bl	8014084 <__sinit>
 8016ba2:	4b21      	ldr	r3, [pc, #132]	; (8016c28 <__swbuf_r+0x98>)
 8016ba4:	429c      	cmp	r4, r3
 8016ba6:	d12b      	bne.n	8016c00 <__swbuf_r+0x70>
 8016ba8:	686c      	ldr	r4, [r5, #4]
 8016baa:	69a3      	ldr	r3, [r4, #24]
 8016bac:	60a3      	str	r3, [r4, #8]
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	071a      	lsls	r2, r3, #28
 8016bb2:	d52f      	bpl.n	8016c14 <__swbuf_r+0x84>
 8016bb4:	6923      	ldr	r3, [r4, #16]
 8016bb6:	b36b      	cbz	r3, 8016c14 <__swbuf_r+0x84>
 8016bb8:	6923      	ldr	r3, [r4, #16]
 8016bba:	6820      	ldr	r0, [r4, #0]
 8016bbc:	1ac0      	subs	r0, r0, r3
 8016bbe:	6963      	ldr	r3, [r4, #20]
 8016bc0:	b2f6      	uxtb	r6, r6
 8016bc2:	4283      	cmp	r3, r0
 8016bc4:	4637      	mov	r7, r6
 8016bc6:	dc04      	bgt.n	8016bd2 <__swbuf_r+0x42>
 8016bc8:	4621      	mov	r1, r4
 8016bca:	4628      	mov	r0, r5
 8016bcc:	f7ff f85c 	bl	8015c88 <_fflush_r>
 8016bd0:	bb30      	cbnz	r0, 8016c20 <__swbuf_r+0x90>
 8016bd2:	68a3      	ldr	r3, [r4, #8]
 8016bd4:	3b01      	subs	r3, #1
 8016bd6:	60a3      	str	r3, [r4, #8]
 8016bd8:	6823      	ldr	r3, [r4, #0]
 8016bda:	1c5a      	adds	r2, r3, #1
 8016bdc:	6022      	str	r2, [r4, #0]
 8016bde:	701e      	strb	r6, [r3, #0]
 8016be0:	6963      	ldr	r3, [r4, #20]
 8016be2:	3001      	adds	r0, #1
 8016be4:	4283      	cmp	r3, r0
 8016be6:	d004      	beq.n	8016bf2 <__swbuf_r+0x62>
 8016be8:	89a3      	ldrh	r3, [r4, #12]
 8016bea:	07db      	lsls	r3, r3, #31
 8016bec:	d506      	bpl.n	8016bfc <__swbuf_r+0x6c>
 8016bee:	2e0a      	cmp	r6, #10
 8016bf0:	d104      	bne.n	8016bfc <__swbuf_r+0x6c>
 8016bf2:	4621      	mov	r1, r4
 8016bf4:	4628      	mov	r0, r5
 8016bf6:	f7ff f847 	bl	8015c88 <_fflush_r>
 8016bfa:	b988      	cbnz	r0, 8016c20 <__swbuf_r+0x90>
 8016bfc:	4638      	mov	r0, r7
 8016bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c00:	4b0a      	ldr	r3, [pc, #40]	; (8016c2c <__swbuf_r+0x9c>)
 8016c02:	429c      	cmp	r4, r3
 8016c04:	d101      	bne.n	8016c0a <__swbuf_r+0x7a>
 8016c06:	68ac      	ldr	r4, [r5, #8]
 8016c08:	e7cf      	b.n	8016baa <__swbuf_r+0x1a>
 8016c0a:	4b09      	ldr	r3, [pc, #36]	; (8016c30 <__swbuf_r+0xa0>)
 8016c0c:	429c      	cmp	r4, r3
 8016c0e:	bf08      	it	eq
 8016c10:	68ec      	ldreq	r4, [r5, #12]
 8016c12:	e7ca      	b.n	8016baa <__swbuf_r+0x1a>
 8016c14:	4621      	mov	r1, r4
 8016c16:	4628      	mov	r0, r5
 8016c18:	f000 f81a 	bl	8016c50 <__swsetup_r>
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	d0cb      	beq.n	8016bb8 <__swbuf_r+0x28>
 8016c20:	f04f 37ff 	mov.w	r7, #4294967295
 8016c24:	e7ea      	b.n	8016bfc <__swbuf_r+0x6c>
 8016c26:	bf00      	nop
 8016c28:	080179b0 	.word	0x080179b0
 8016c2c:	080179d0 	.word	0x080179d0
 8016c30:	08017990 	.word	0x08017990

08016c34 <__ascii_wctomb>:
 8016c34:	b149      	cbz	r1, 8016c4a <__ascii_wctomb+0x16>
 8016c36:	2aff      	cmp	r2, #255	; 0xff
 8016c38:	bf85      	ittet	hi
 8016c3a:	238a      	movhi	r3, #138	; 0x8a
 8016c3c:	6003      	strhi	r3, [r0, #0]
 8016c3e:	700a      	strbls	r2, [r1, #0]
 8016c40:	f04f 30ff 	movhi.w	r0, #4294967295
 8016c44:	bf98      	it	ls
 8016c46:	2001      	movls	r0, #1
 8016c48:	4770      	bx	lr
 8016c4a:	4608      	mov	r0, r1
 8016c4c:	4770      	bx	lr
	...

08016c50 <__swsetup_r>:
 8016c50:	4b32      	ldr	r3, [pc, #200]	; (8016d1c <__swsetup_r+0xcc>)
 8016c52:	b570      	push	{r4, r5, r6, lr}
 8016c54:	681d      	ldr	r5, [r3, #0]
 8016c56:	4606      	mov	r6, r0
 8016c58:	460c      	mov	r4, r1
 8016c5a:	b125      	cbz	r5, 8016c66 <__swsetup_r+0x16>
 8016c5c:	69ab      	ldr	r3, [r5, #24]
 8016c5e:	b913      	cbnz	r3, 8016c66 <__swsetup_r+0x16>
 8016c60:	4628      	mov	r0, r5
 8016c62:	f7fd fa0f 	bl	8014084 <__sinit>
 8016c66:	4b2e      	ldr	r3, [pc, #184]	; (8016d20 <__swsetup_r+0xd0>)
 8016c68:	429c      	cmp	r4, r3
 8016c6a:	d10f      	bne.n	8016c8c <__swsetup_r+0x3c>
 8016c6c:	686c      	ldr	r4, [r5, #4]
 8016c6e:	89a3      	ldrh	r3, [r4, #12]
 8016c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c74:	0719      	lsls	r1, r3, #28
 8016c76:	d42c      	bmi.n	8016cd2 <__swsetup_r+0x82>
 8016c78:	06dd      	lsls	r5, r3, #27
 8016c7a:	d411      	bmi.n	8016ca0 <__swsetup_r+0x50>
 8016c7c:	2309      	movs	r3, #9
 8016c7e:	6033      	str	r3, [r6, #0]
 8016c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c84:	81a3      	strh	r3, [r4, #12]
 8016c86:	f04f 30ff 	mov.w	r0, #4294967295
 8016c8a:	e03e      	b.n	8016d0a <__swsetup_r+0xba>
 8016c8c:	4b25      	ldr	r3, [pc, #148]	; (8016d24 <__swsetup_r+0xd4>)
 8016c8e:	429c      	cmp	r4, r3
 8016c90:	d101      	bne.n	8016c96 <__swsetup_r+0x46>
 8016c92:	68ac      	ldr	r4, [r5, #8]
 8016c94:	e7eb      	b.n	8016c6e <__swsetup_r+0x1e>
 8016c96:	4b24      	ldr	r3, [pc, #144]	; (8016d28 <__swsetup_r+0xd8>)
 8016c98:	429c      	cmp	r4, r3
 8016c9a:	bf08      	it	eq
 8016c9c:	68ec      	ldreq	r4, [r5, #12]
 8016c9e:	e7e6      	b.n	8016c6e <__swsetup_r+0x1e>
 8016ca0:	0758      	lsls	r0, r3, #29
 8016ca2:	d512      	bpl.n	8016cca <__swsetup_r+0x7a>
 8016ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ca6:	b141      	cbz	r1, 8016cba <__swsetup_r+0x6a>
 8016ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016cac:	4299      	cmp	r1, r3
 8016cae:	d002      	beq.n	8016cb6 <__swsetup_r+0x66>
 8016cb0:	4630      	mov	r0, r6
 8016cb2:	f7ff fbe9 	bl	8016488 <_free_r>
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8016cba:	89a3      	ldrh	r3, [r4, #12]
 8016cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016cc0:	81a3      	strh	r3, [r4, #12]
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	6063      	str	r3, [r4, #4]
 8016cc6:	6923      	ldr	r3, [r4, #16]
 8016cc8:	6023      	str	r3, [r4, #0]
 8016cca:	89a3      	ldrh	r3, [r4, #12]
 8016ccc:	f043 0308 	orr.w	r3, r3, #8
 8016cd0:	81a3      	strh	r3, [r4, #12]
 8016cd2:	6923      	ldr	r3, [r4, #16]
 8016cd4:	b94b      	cbnz	r3, 8016cea <__swsetup_r+0x9a>
 8016cd6:	89a3      	ldrh	r3, [r4, #12]
 8016cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ce0:	d003      	beq.n	8016cea <__swsetup_r+0x9a>
 8016ce2:	4621      	mov	r1, r4
 8016ce4:	4630      	mov	r0, r6
 8016ce6:	f000 f84d 	bl	8016d84 <__smakebuf_r>
 8016cea:	89a0      	ldrh	r0, [r4, #12]
 8016cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016cf0:	f010 0301 	ands.w	r3, r0, #1
 8016cf4:	d00a      	beq.n	8016d0c <__swsetup_r+0xbc>
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	60a3      	str	r3, [r4, #8]
 8016cfa:	6963      	ldr	r3, [r4, #20]
 8016cfc:	425b      	negs	r3, r3
 8016cfe:	61a3      	str	r3, [r4, #24]
 8016d00:	6923      	ldr	r3, [r4, #16]
 8016d02:	b943      	cbnz	r3, 8016d16 <__swsetup_r+0xc6>
 8016d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016d08:	d1ba      	bne.n	8016c80 <__swsetup_r+0x30>
 8016d0a:	bd70      	pop	{r4, r5, r6, pc}
 8016d0c:	0781      	lsls	r1, r0, #30
 8016d0e:	bf58      	it	pl
 8016d10:	6963      	ldrpl	r3, [r4, #20]
 8016d12:	60a3      	str	r3, [r4, #8]
 8016d14:	e7f4      	b.n	8016d00 <__swsetup_r+0xb0>
 8016d16:	2000      	movs	r0, #0
 8016d18:	e7f7      	b.n	8016d0a <__swsetup_r+0xba>
 8016d1a:	bf00      	nop
 8016d1c:	20000124 	.word	0x20000124
 8016d20:	080179b0 	.word	0x080179b0
 8016d24:	080179d0 	.word	0x080179d0
 8016d28:	08017990 	.word	0x08017990

08016d2c <abort>:
 8016d2c:	b508      	push	{r3, lr}
 8016d2e:	2006      	movs	r0, #6
 8016d30:	f000 f898 	bl	8016e64 <raise>
 8016d34:	2001      	movs	r0, #1
 8016d36:	f7ee f9d7 	bl	80050e8 <_exit>

08016d3a <__swhatbuf_r>:
 8016d3a:	b570      	push	{r4, r5, r6, lr}
 8016d3c:	460e      	mov	r6, r1
 8016d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d42:	2900      	cmp	r1, #0
 8016d44:	b096      	sub	sp, #88	; 0x58
 8016d46:	4614      	mov	r4, r2
 8016d48:	461d      	mov	r5, r3
 8016d4a:	da08      	bge.n	8016d5e <__swhatbuf_r+0x24>
 8016d4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016d50:	2200      	movs	r2, #0
 8016d52:	602a      	str	r2, [r5, #0]
 8016d54:	061a      	lsls	r2, r3, #24
 8016d56:	d410      	bmi.n	8016d7a <__swhatbuf_r+0x40>
 8016d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d5c:	e00e      	b.n	8016d7c <__swhatbuf_r+0x42>
 8016d5e:	466a      	mov	r2, sp
 8016d60:	f000 f89c 	bl	8016e9c <_fstat_r>
 8016d64:	2800      	cmp	r0, #0
 8016d66:	dbf1      	blt.n	8016d4c <__swhatbuf_r+0x12>
 8016d68:	9a01      	ldr	r2, [sp, #4]
 8016d6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016d6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016d72:	425a      	negs	r2, r3
 8016d74:	415a      	adcs	r2, r3
 8016d76:	602a      	str	r2, [r5, #0]
 8016d78:	e7ee      	b.n	8016d58 <__swhatbuf_r+0x1e>
 8016d7a:	2340      	movs	r3, #64	; 0x40
 8016d7c:	2000      	movs	r0, #0
 8016d7e:	6023      	str	r3, [r4, #0]
 8016d80:	b016      	add	sp, #88	; 0x58
 8016d82:	bd70      	pop	{r4, r5, r6, pc}

08016d84 <__smakebuf_r>:
 8016d84:	898b      	ldrh	r3, [r1, #12]
 8016d86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d88:	079d      	lsls	r5, r3, #30
 8016d8a:	4606      	mov	r6, r0
 8016d8c:	460c      	mov	r4, r1
 8016d8e:	d507      	bpl.n	8016da0 <__smakebuf_r+0x1c>
 8016d90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016d94:	6023      	str	r3, [r4, #0]
 8016d96:	6123      	str	r3, [r4, #16]
 8016d98:	2301      	movs	r3, #1
 8016d9a:	6163      	str	r3, [r4, #20]
 8016d9c:	b002      	add	sp, #8
 8016d9e:	bd70      	pop	{r4, r5, r6, pc}
 8016da0:	ab01      	add	r3, sp, #4
 8016da2:	466a      	mov	r2, sp
 8016da4:	f7ff ffc9 	bl	8016d3a <__swhatbuf_r>
 8016da8:	9900      	ldr	r1, [sp, #0]
 8016daa:	4605      	mov	r5, r0
 8016dac:	4630      	mov	r0, r6
 8016dae:	f7fd fa7f 	bl	80142b0 <_malloc_r>
 8016db2:	b948      	cbnz	r0, 8016dc8 <__smakebuf_r+0x44>
 8016db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016db8:	059a      	lsls	r2, r3, #22
 8016dba:	d4ef      	bmi.n	8016d9c <__smakebuf_r+0x18>
 8016dbc:	f023 0303 	bic.w	r3, r3, #3
 8016dc0:	f043 0302 	orr.w	r3, r3, #2
 8016dc4:	81a3      	strh	r3, [r4, #12]
 8016dc6:	e7e3      	b.n	8016d90 <__smakebuf_r+0xc>
 8016dc8:	4b0d      	ldr	r3, [pc, #52]	; (8016e00 <__smakebuf_r+0x7c>)
 8016dca:	62b3      	str	r3, [r6, #40]	; 0x28
 8016dcc:	89a3      	ldrh	r3, [r4, #12]
 8016dce:	6020      	str	r0, [r4, #0]
 8016dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dd4:	81a3      	strh	r3, [r4, #12]
 8016dd6:	9b00      	ldr	r3, [sp, #0]
 8016dd8:	6163      	str	r3, [r4, #20]
 8016dda:	9b01      	ldr	r3, [sp, #4]
 8016ddc:	6120      	str	r0, [r4, #16]
 8016dde:	b15b      	cbz	r3, 8016df8 <__smakebuf_r+0x74>
 8016de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016de4:	4630      	mov	r0, r6
 8016de6:	f000 f86b 	bl	8016ec0 <_isatty_r>
 8016dea:	b128      	cbz	r0, 8016df8 <__smakebuf_r+0x74>
 8016dec:	89a3      	ldrh	r3, [r4, #12]
 8016dee:	f023 0303 	bic.w	r3, r3, #3
 8016df2:	f043 0301 	orr.w	r3, r3, #1
 8016df6:	81a3      	strh	r3, [r4, #12]
 8016df8:	89a0      	ldrh	r0, [r4, #12]
 8016dfa:	4305      	orrs	r5, r0
 8016dfc:	81a5      	strh	r5, [r4, #12]
 8016dfe:	e7cd      	b.n	8016d9c <__smakebuf_r+0x18>
 8016e00:	0801401d 	.word	0x0801401d

08016e04 <_malloc_usable_size_r>:
 8016e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e08:	1f18      	subs	r0, r3, #4
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	bfbc      	itt	lt
 8016e0e:	580b      	ldrlt	r3, [r1, r0]
 8016e10:	18c0      	addlt	r0, r0, r3
 8016e12:	4770      	bx	lr

08016e14 <_raise_r>:
 8016e14:	291f      	cmp	r1, #31
 8016e16:	b538      	push	{r3, r4, r5, lr}
 8016e18:	4604      	mov	r4, r0
 8016e1a:	460d      	mov	r5, r1
 8016e1c:	d904      	bls.n	8016e28 <_raise_r+0x14>
 8016e1e:	2316      	movs	r3, #22
 8016e20:	6003      	str	r3, [r0, #0]
 8016e22:	f04f 30ff 	mov.w	r0, #4294967295
 8016e26:	bd38      	pop	{r3, r4, r5, pc}
 8016e28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016e2a:	b112      	cbz	r2, 8016e32 <_raise_r+0x1e>
 8016e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016e30:	b94b      	cbnz	r3, 8016e46 <_raise_r+0x32>
 8016e32:	4620      	mov	r0, r4
 8016e34:	f000 f830 	bl	8016e98 <_getpid_r>
 8016e38:	462a      	mov	r2, r5
 8016e3a:	4601      	mov	r1, r0
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e42:	f000 b817 	b.w	8016e74 <_kill_r>
 8016e46:	2b01      	cmp	r3, #1
 8016e48:	d00a      	beq.n	8016e60 <_raise_r+0x4c>
 8016e4a:	1c59      	adds	r1, r3, #1
 8016e4c:	d103      	bne.n	8016e56 <_raise_r+0x42>
 8016e4e:	2316      	movs	r3, #22
 8016e50:	6003      	str	r3, [r0, #0]
 8016e52:	2001      	movs	r0, #1
 8016e54:	e7e7      	b.n	8016e26 <_raise_r+0x12>
 8016e56:	2400      	movs	r4, #0
 8016e58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016e5c:	4628      	mov	r0, r5
 8016e5e:	4798      	blx	r3
 8016e60:	2000      	movs	r0, #0
 8016e62:	e7e0      	b.n	8016e26 <_raise_r+0x12>

08016e64 <raise>:
 8016e64:	4b02      	ldr	r3, [pc, #8]	; (8016e70 <raise+0xc>)
 8016e66:	4601      	mov	r1, r0
 8016e68:	6818      	ldr	r0, [r3, #0]
 8016e6a:	f7ff bfd3 	b.w	8016e14 <_raise_r>
 8016e6e:	bf00      	nop
 8016e70:	20000124 	.word	0x20000124

08016e74 <_kill_r>:
 8016e74:	b538      	push	{r3, r4, r5, lr}
 8016e76:	4d07      	ldr	r5, [pc, #28]	; (8016e94 <_kill_r+0x20>)
 8016e78:	2300      	movs	r3, #0
 8016e7a:	4604      	mov	r4, r0
 8016e7c:	4608      	mov	r0, r1
 8016e7e:	4611      	mov	r1, r2
 8016e80:	602b      	str	r3, [r5, #0]
 8016e82:	f7ee f921 	bl	80050c8 <_kill>
 8016e86:	1c43      	adds	r3, r0, #1
 8016e88:	d102      	bne.n	8016e90 <_kill_r+0x1c>
 8016e8a:	682b      	ldr	r3, [r5, #0]
 8016e8c:	b103      	cbz	r3, 8016e90 <_kill_r+0x1c>
 8016e8e:	6023      	str	r3, [r4, #0]
 8016e90:	bd38      	pop	{r3, r4, r5, pc}
 8016e92:	bf00      	nop
 8016e94:	20005ae8 	.word	0x20005ae8

08016e98 <_getpid_r>:
 8016e98:	f7ee b90e 	b.w	80050b8 <_getpid>

08016e9c <_fstat_r>:
 8016e9c:	b538      	push	{r3, r4, r5, lr}
 8016e9e:	4d07      	ldr	r5, [pc, #28]	; (8016ebc <_fstat_r+0x20>)
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	4608      	mov	r0, r1
 8016ea6:	4611      	mov	r1, r2
 8016ea8:	602b      	str	r3, [r5, #0]
 8016eaa:	f7ee f96c 	bl	8005186 <_fstat>
 8016eae:	1c43      	adds	r3, r0, #1
 8016eb0:	d102      	bne.n	8016eb8 <_fstat_r+0x1c>
 8016eb2:	682b      	ldr	r3, [r5, #0]
 8016eb4:	b103      	cbz	r3, 8016eb8 <_fstat_r+0x1c>
 8016eb6:	6023      	str	r3, [r4, #0]
 8016eb8:	bd38      	pop	{r3, r4, r5, pc}
 8016eba:	bf00      	nop
 8016ebc:	20005ae8 	.word	0x20005ae8

08016ec0 <_isatty_r>:
 8016ec0:	b538      	push	{r3, r4, r5, lr}
 8016ec2:	4d06      	ldr	r5, [pc, #24]	; (8016edc <_isatty_r+0x1c>)
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	4604      	mov	r4, r0
 8016ec8:	4608      	mov	r0, r1
 8016eca:	602b      	str	r3, [r5, #0]
 8016ecc:	f7ee f96b 	bl	80051a6 <_isatty>
 8016ed0:	1c43      	adds	r3, r0, #1
 8016ed2:	d102      	bne.n	8016eda <_isatty_r+0x1a>
 8016ed4:	682b      	ldr	r3, [r5, #0]
 8016ed6:	b103      	cbz	r3, 8016eda <_isatty_r+0x1a>
 8016ed8:	6023      	str	r3, [r4, #0]
 8016eda:	bd38      	pop	{r3, r4, r5, pc}
 8016edc:	20005ae8 	.word	0x20005ae8

08016ee0 <round>:
 8016ee0:	ec51 0b10 	vmov	r0, r1, d0
 8016ee4:	b570      	push	{r4, r5, r6, lr}
 8016ee6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8016eea:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8016eee:	2c13      	cmp	r4, #19
 8016ef0:	ee10 2a10 	vmov	r2, s0
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	dc19      	bgt.n	8016f2c <round+0x4c>
 8016ef8:	2c00      	cmp	r4, #0
 8016efa:	da09      	bge.n	8016f10 <round+0x30>
 8016efc:	3401      	adds	r4, #1
 8016efe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8016f02:	d103      	bne.n	8016f0c <round+0x2c>
 8016f04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016f08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	e028      	b.n	8016f62 <round+0x82>
 8016f10:	4d15      	ldr	r5, [pc, #84]	; (8016f68 <round+0x88>)
 8016f12:	4125      	asrs	r5, r4
 8016f14:	ea01 0605 	and.w	r6, r1, r5
 8016f18:	4332      	orrs	r2, r6
 8016f1a:	d00e      	beq.n	8016f3a <round+0x5a>
 8016f1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016f20:	fa42 f404 	asr.w	r4, r2, r4
 8016f24:	4423      	add	r3, r4
 8016f26:	ea23 0305 	bic.w	r3, r3, r5
 8016f2a:	e7ef      	b.n	8016f0c <round+0x2c>
 8016f2c:	2c33      	cmp	r4, #51	; 0x33
 8016f2e:	dd07      	ble.n	8016f40 <round+0x60>
 8016f30:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8016f34:	d101      	bne.n	8016f3a <round+0x5a>
 8016f36:	f7e9 f9b1 	bl	800029c <__adddf3>
 8016f3a:	ec41 0b10 	vmov	d0, r0, r1
 8016f3e:	bd70      	pop	{r4, r5, r6, pc}
 8016f40:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8016f44:	f04f 35ff 	mov.w	r5, #4294967295
 8016f48:	40f5      	lsrs	r5, r6
 8016f4a:	4228      	tst	r0, r5
 8016f4c:	d0f5      	beq.n	8016f3a <round+0x5a>
 8016f4e:	2101      	movs	r1, #1
 8016f50:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8016f54:	fa01 f404 	lsl.w	r4, r1, r4
 8016f58:	1912      	adds	r2, r2, r4
 8016f5a:	bf28      	it	cs
 8016f5c:	185b      	addcs	r3, r3, r1
 8016f5e:	ea22 0205 	bic.w	r2, r2, r5
 8016f62:	4619      	mov	r1, r3
 8016f64:	4610      	mov	r0, r2
 8016f66:	e7e8      	b.n	8016f3a <round+0x5a>
 8016f68:	000fffff 	.word	0x000fffff

08016f6c <_init>:
 8016f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f6e:	bf00      	nop
 8016f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f72:	bc08      	pop	{r3}
 8016f74:	469e      	mov	lr, r3
 8016f76:	4770      	bx	lr

08016f78 <_fini>:
 8016f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f7a:	bf00      	nop
 8016f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f7e:	bc08      	pop	{r3}
 8016f80:	469e      	mov	lr, r3
 8016f82:	4770      	bx	lr
