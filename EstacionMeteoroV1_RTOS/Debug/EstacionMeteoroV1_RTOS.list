
EstacionMeteoroV1_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d54  08016e90  08016e90  00026e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017be4  08017be4  000302ec  2**0
                  CONTENTS
  4 .ARM          00000008  08017be4  08017be4  00027be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017bec  08017bec  000302ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017bec  08017bec  00027bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017bf0  08017bf0  00027bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08017bf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005914  200002ec  08017ee0  000302ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c00  08017ee0  00035c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b244  00000000  00000000  0003035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c49  00000000  00000000  0005b5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002470  00000000  00000000  000621f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c0f  00000000  00000000  00064660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b09  00000000  00000000  0006626f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034d9e  00000000  00000000  00088d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b27ec  00000000  00000000  000bdb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a920  00000000  00000000  00170304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0017ac24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002ec 	.word	0x200002ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016e78 	.word	0x08016e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f0 	.word	0x200002f0
 80001dc:	08016e78 	.word	0x08016e78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bb 	b.w	8000ff0 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b970 	b.w	8000ff0 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Mostrar_Temperatura>:
//----------------------------------------------------------------------//
//---------- Funciones -------------------------------------------------//
//----------------------------------------------------------------------//

void Mostrar_Temperatura()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	float Temperatura = MedicionesEstacion.Temperature;
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <Mostrar_Temperatura+0xc0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <Mostrar_Temperatura+0xc4>)
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800100a:	da08      	bge.n	800101e <Mostrar_Temperatura+0x2a>
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <Mostrar_Temperatura+0xc8>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001016:	da02      	bge.n	800101e <Mostrar_Temperatura+0x2a>
	{
		Cambio_Pantalla = 1;
 8001018:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <Mostrar_Temperatura+0xcc>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
	}

	if(!Cambio_Pantalla && iD <= 140 && jD <= 140)
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <Mostrar_Temperatura+0xcc>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d142      	bne.n	80010ac <Mostrar_Temperatura+0xb8>
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <Mostrar_Temperatura+0xd0>)
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	2b8c      	cmp	r3, #140	; 0x8c
 800102e:	dc3d      	bgt.n	80010ac <Mostrar_Temperatura+0xb8>
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <Mostrar_Temperatura+0xd4>)
 8001032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001036:	2b8c      	cmp	r3, #140	; 0x8c
 8001038:	dc38      	bgt.n	80010ac <Mostrar_Temperatura+0xb8>
	{
		ssd1306_SetCursor(i - 3, 20);
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <Mostrar_Temperatura+0xc4>)
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b03      	subs	r3, #3
 8001044:	b29b      	uxth	r3, r3
 8001046:	b21b      	sxth	r3, r3
 8001048:	2114      	movs	r1, #20
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe34 	bl	8001cb8 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Temp", Font_7x10, White);
 8001050:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <Mostrar_Temperatura+0xd8>)
 8001052:	2301      	movs	r3, #1
 8001054:	ca06      	ldmia	r2, {r1, r2}
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <Mostrar_Temperatura+0xdc>)
 8001058:	f000 fe08 	bl	8001c6c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 10, 35);
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <Mostrar_Temperatura+0xc8>)
 800105e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001062:	b29b      	uxth	r3, r3
 8001064:	3b0a      	subs	r3, #10
 8001066:	b29b      	uxth	r3, r3
 8001068:	b21b      	sxth	r3, r3
 800106a:	2123      	movs	r1, #35	; 0x23
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fe23 	bl	8001cb8 <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Temperatura);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fa70 	bl	8000558 <__aeabi_f2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4915      	ldr	r1, [pc, #84]	; (80010d4 <Mostrar_Temperatura+0xe0>)
 800107e:	4816      	ldr	r0, [pc, #88]	; (80010d8 <Mostrar_Temperatura+0xe4>)
 8001080:	f013 fcf2 	bl	8014a68 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <Mostrar_Temperatura+0xd8>)
 8001086:	2301      	movs	r3, #1
 8001088:	ca06      	ldmia	r2, {r1, r2}
 800108a:	4813      	ldr	r0, [pc, #76]	; (80010d8 <Mostrar_Temperatura+0xe4>)
 800108c:	f000 fdee 	bl	8001c6c <ssd1306_WriteString>

		ssd1306_WriteChar(32, Font_7x10, White);
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <Mostrar_Temperatura+0xd8>)
 8001092:	2301      	movs	r3, #1
 8001094:	ca06      	ldmia	r2, {r1, r2}
 8001096:	2020      	movs	r0, #32
 8001098:	f000 fd68 	bl	8001b6c <ssd1306_WriteChar>

		Grados();
 800109c:	f000 ffdc 	bl	8002058 <Grados>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("C", Font_7x10, White);
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <Mostrar_Temperatura+0xd8>)
 80010a2:	2301      	movs	r3, #1
 80010a4:	ca06      	ldmia	r2, {r1, r2}
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <Mostrar_Temperatura+0xe8>)
 80010a8:	f000 fde0 	bl	8001c6c <ssd1306_WriteString>
		#endif
	}
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20001278 	.word	0x20001278
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000002 	.word	0x20000002
 80010c0:	20000309 	.word	0x20000309
 80010c4:	20000004 	.word	0x20000004
 80010c8:	20000006 	.word	0x20000006
 80010cc:	20000008 	.word	0x20000008
 80010d0:	08016e90 	.word	0x08016e90
 80010d4:	08016e98 	.word	0x08016e98
 80010d8:	20000310 	.word	0x20000310
 80010dc:	08016ea0 	.word	0x08016ea0

080010e0 <Mostrar_Humedad>:

void Mostrar_Humedad()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	//Humedad = 35.456;

	Humedad = MedicionesEstacion.Humidity;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <Mostrar_Humedad+0x78>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a1c      	ldr	r2, [pc, #112]	; (800115c <Mostrar_Humedad+0x7c>)
 80010ea:	6013      	str	r3, [r2, #0]

	if(!Cambio_Pantalla)
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <Mostrar_Humedad+0x80>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d12e      	bne.n	8001152 <Mostrar_Humedad+0x72>
	{
		ssd1306_SetCursor(iD, 20);
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <Mostrar_Humedad+0x84>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	2114      	movs	r1, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fddb 	bl	8001cb8 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Hum", Font_7x10, White);
 8001102:	4a19      	ldr	r2, [pc, #100]	; (8001168 <Mostrar_Humedad+0x88>)
 8001104:	2301      	movs	r3, #1
 8001106:	ca06      	ldmia	r2, {r1, r2}
 8001108:	4818      	ldr	r0, [pc, #96]	; (800116c <Mostrar_Humedad+0x8c>)
 800110a:	f000 fdaf 	bl	8001c6c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD - 3, 35);
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <Mostrar_Humedad+0x90>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	b29b      	uxth	r3, r3
 8001116:	3b03      	subs	r3, #3
 8001118:	b29b      	uxth	r3, r3
 800111a:	b21b      	sxth	r3, r3
 800111c:	2123      	movs	r1, #35	; 0x23
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fdca 	bl	8001cb8 <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Humedad);
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <Mostrar_Humedad+0x7c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa15 	bl	8000558 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4910      	ldr	r1, [pc, #64]	; (8001174 <Mostrar_Humedad+0x94>)
 8001134:	4810      	ldr	r0, [pc, #64]	; (8001178 <Mostrar_Humedad+0x98>)
 8001136:	f013 fc97 	bl	8014a68 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <Mostrar_Humedad+0x88>)
 800113c:	2301      	movs	r3, #1
 800113e:	ca06      	ldmia	r2, {r1, r2}
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <Mostrar_Humedad+0x98>)
 8001142:	f000 fd93 	bl	8001c6c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" %", Font_7x10, White);
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <Mostrar_Humedad+0x88>)
 8001148:	2301      	movs	r3, #1
 800114a:	ca06      	ldmia	r2, {r1, r2}
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <Mostrar_Humedad+0x9c>)
 800114e:	f000 fd8d 	bl	8001c6c <ssd1306_WriteString>
		#endif
	}
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20001278 	.word	0x20001278
 800115c:	2000030c 	.word	0x2000030c
 8001160:	20000309 	.word	0x20000309
 8001164:	20000004 	.word	0x20000004
 8001168:	20000008 	.word	0x20000008
 800116c:	08016ea4 	.word	0x08016ea4
 8001170:	20000006 	.word	0x20000006
 8001174:	08016e98 	.word	0x08016e98
 8001178:	20000310 	.word	0x20000310
 800117c:	08016ea8 	.word	0x08016ea8

08001180 <Mostrar_Presion>:

uint16_t read;

void Mostrar_Presion()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	float Presion = 34.56;
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <Mostrar_Presion+0x9c>)
 8001188:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <Mostrar_Presion+0xa0>)
 800118c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001190:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001194:	da08      	bge.n	80011a8 <Mostrar_Presion+0x28>
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <Mostrar_Presion+0xa4>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80011a0:	da02      	bge.n	80011a8 <Mostrar_Presion+0x28>
	{
		Cambio_Pantalla = 2;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <Mostrar_Presion+0xa8>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	701a      	strb	r2, [r3, #0]
	}

	if(Cambio_Pantalla == 1)
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <Mostrar_Presion+0xa8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d130      	bne.n	8001212 <Mostrar_Presion+0x92>
	{
		ssd1306_SetCursor(i + 2, 20);
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <Mostrar_Presion+0xa0>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3302      	adds	r3, #2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b21b      	sxth	r3, r3
 80011be:	2114      	movs	r1, #20
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fd79 	bl	8001cb8 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Pres", Font_7x10, White);
 80011c6:	4a19      	ldr	r2, [pc, #100]	; (800122c <Mostrar_Presion+0xac>)
 80011c8:	2301      	movs	r3, #1
 80011ca:	ca06      	ldmia	r2, {r1, r2}
 80011cc:	4818      	ldr	r0, [pc, #96]	; (8001230 <Mostrar_Presion+0xb0>)
 80011ce:	f000 fd4d 	bl	8001c6c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 9, 35);
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <Mostrar_Presion+0xa4>)
 80011d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	3b09      	subs	r3, #9
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b21b      	sxth	r3, r3
 80011e0:	2123      	movs	r1, #35	; 0x23
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fd68 	bl	8001cb8 <ssd1306_SetCursor>

		//Char_Display(Presion, 1);

		sprintf(Humedad_str, "%.1f", Presion);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff f9b5 	bl	8000558 <__aeabi_f2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4910      	ldr	r1, [pc, #64]	; (8001234 <Mostrar_Presion+0xb4>)
 80011f4:	4810      	ldr	r0, [pc, #64]	; (8001238 <Mostrar_Presion+0xb8>)
 80011f6:	f013 fc37 	bl	8014a68 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <Mostrar_Presion+0xac>)
 80011fc:	2301      	movs	r3, #1
 80011fe:	ca06      	ldmia	r2, {r1, r2}
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <Mostrar_Presion+0xb8>)
 8001202:	f000 fd33 	bl	8001c6c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" Atm", Font_7x10, White);
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <Mostrar_Presion+0xac>)
 8001208:	2301      	movs	r3, #1
 800120a:	ca06      	ldmia	r2, {r1, r2}
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <Mostrar_Presion+0xbc>)
 800120e:	f000 fd2d 	bl	8001c6c <ssd1306_WriteString>
		#endif
	}
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	420a3d71 	.word	0x420a3d71
 8001220:	20000000 	.word	0x20000000
 8001224:	20000002 	.word	0x20000002
 8001228:	20000309 	.word	0x20000309
 800122c:	20000008 	.word	0x20000008
 8001230:	08016eac 	.word	0x08016eac
 8001234:	08016e98 	.word	0x08016e98
 8001238:	20000310 	.word	0x20000310
 800123c:	08016eb4 	.word	0x08016eb4

08001240 <Mostrar_Lux>:

void Mostrar_Lux()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	float Lux = 30.34;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <Mostrar_Lux+0x7c>)
 8001248:	607b      	str	r3, [r7, #4]

	if(Cambio_Pantalla == 1)
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <Mostrar_Lux+0x80>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d130      	bne.n	80012b4 <Mostrar_Lux+0x74>
	{
		ssd1306_SetCursor(iD + 2, 20);
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <Mostrar_Lux+0x84>)
 8001254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001258:	b29b      	uxth	r3, r3
 800125a:	3302      	adds	r3, #2
 800125c:	b29b      	uxth	r3, r3
 800125e:	b21b      	sxth	r3, r3
 8001260:	2114      	movs	r1, #20
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fd28 	bl	8001cb8 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Lux", Font_7x10, White);
 8001268:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <Mostrar_Lux+0x88>)
 800126a:	2301      	movs	r3, #1
 800126c:	ca06      	ldmia	r2, {r1, r2}
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <Mostrar_Lux+0x8c>)
 8001270:	f000 fcfc 	bl	8001c6c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD - 4, 35);
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <Mostrar_Lux+0x90>)
 8001276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b04      	subs	r3, #4
 800127e:	b29b      	uxth	r3, r3
 8001280:	b21b      	sxth	r3, r3
 8001282:	2123      	movs	r1, #35	; 0x23
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fd17 	bl	8001cb8 <ssd1306_SetCursor>

		//Char_Display(Lux, 1);

		sprintf(Humedad_str, "%.1f", Lux);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff f964 	bl	8000558 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	490f      	ldr	r1, [pc, #60]	; (80012d4 <Mostrar_Lux+0x94>)
 8001296:	4810      	ldr	r0, [pc, #64]	; (80012d8 <Mostrar_Lux+0x98>)
 8001298:	f013 fbe6 	bl	8014a68 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <Mostrar_Lux+0x88>)
 800129e:	2301      	movs	r3, #1
 80012a0:	ca06      	ldmia	r2, {r1, r2}
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <Mostrar_Lux+0x98>)
 80012a4:	f000 fce2 	bl	8001c6c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" %", Font_7x10, White);
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <Mostrar_Lux+0x88>)
 80012aa:	2301      	movs	r3, #1
 80012ac:	ca06      	ldmia	r2, {r1, r2}
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <Mostrar_Lux+0x9c>)
 80012b0:	f000 fcdc 	bl	8001c6c <ssd1306_WriteString>
		#endif
	}
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	41f2b852 	.word	0x41f2b852
 80012c0:	20000309 	.word	0x20000309
 80012c4:	20000004 	.word	0x20000004
 80012c8:	20000008 	.word	0x20000008
 80012cc:	08016ebc 	.word	0x08016ebc
 80012d0:	20000006 	.word	0x20000006
 80012d4:	08016e98 	.word	0x08016e98
 80012d8:	20000310 	.word	0x20000310
 80012dc:	08016ea8 	.word	0x08016ea8

080012e0 <Mostrar_Velocidad>:

void Mostrar_Velocidad()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	float Velocidad = 30.45;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <Mostrar_Velocidad+0x9c>)
 80012e8:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <Mostrar_Velocidad+0xa0>)
 80012ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f0:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80012f4:	da08      	bge.n	8001308 <Mostrar_Velocidad+0x28>
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <Mostrar_Velocidad+0xa4>)
 80012f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fc:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001300:	da02      	bge.n	8001308 <Mostrar_Velocidad+0x28>
	{
		Cambio_Pantalla = 0;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <Mostrar_Velocidad+0xa8>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	}

	if(Cambio_Pantalla == 2)
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <Mostrar_Velocidad+0xa8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <Mostrar_Velocidad+0x92>
	{
		ssd1306_SetCursor(i + 8, 20);
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <Mostrar_Velocidad+0xa0>)
 8001312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001316:	b29b      	uxth	r3, r3
 8001318:	3308      	adds	r3, #8
 800131a:	b29b      	uxth	r3, r3
 800131c:	b21b      	sxth	r3, r3
 800131e:	2114      	movs	r1, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fcc9 	bl	8001cb8 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Vel", Font_7x10, White);
 8001326:	4a19      	ldr	r2, [pc, #100]	; (800138c <Mostrar_Velocidad+0xac>)
 8001328:	2301      	movs	r3, #1
 800132a:	ca06      	ldmia	r2, {r1, r2}
 800132c:	4818      	ldr	r0, [pc, #96]	; (8001390 <Mostrar_Velocidad+0xb0>)
 800132e:	f000 fc9d 	bl	8001c6c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 11, 35);
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <Mostrar_Velocidad+0xa4>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b0b      	subs	r3, #11
 800133c:	b29b      	uxth	r3, r3
 800133e:	b21b      	sxth	r3, r3
 8001340:	2123      	movs	r1, #35	; 0x23
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fcb8 	bl	8001cb8 <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Velocidad);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff f905 	bl	8000558 <__aeabi_f2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4910      	ldr	r1, [pc, #64]	; (8001394 <Mostrar_Velocidad+0xb4>)
 8001354:	4810      	ldr	r0, [pc, #64]	; (8001398 <Mostrar_Velocidad+0xb8>)
 8001356:	f013 fb87 	bl	8014a68 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <Mostrar_Velocidad+0xac>)
 800135c:	2301      	movs	r3, #1
 800135e:	ca06      	ldmia	r2, {r1, r2}
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <Mostrar_Velocidad+0xb8>)
 8001362:	f000 fc83 	bl	8001c6c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" km/h", Font_7x10, White);
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <Mostrar_Velocidad+0xac>)
 8001368:	2301      	movs	r3, #1
 800136a:	ca06      	ldmia	r2, {r1, r2}
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <Mostrar_Velocidad+0xbc>)
 800136e:	f000 fc7d 	bl	8001c6c <ssd1306_WriteString>
		#endif
	}
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	41f3999a 	.word	0x41f3999a
 8001380:	20000000 	.word	0x20000000
 8001384:	20000002 	.word	0x20000002
 8001388:	20000309 	.word	0x20000309
 800138c:	20000008 	.word	0x20000008
 8001390:	08016ec0 	.word	0x08016ec0
 8001394:	08016e98 	.word	0x08016e98
 8001398:	20000310 	.word	0x20000310
 800139c:	08016ec4 	.word	0x08016ec4

080013a0 <Mostrar_Calidad_Aire>:

void Mostrar_Calidad_Aire()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	float Calidad = 30.45;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <Mostrar_Calidad_Aire+0x74>)
 80013a8:	607b      	str	r3, [r7, #4]

	if(Cambio_Pantalla == 2)
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <Mostrar_Calidad_Aire+0x78>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d12c      	bne.n	800140c <Mostrar_Calidad_Aire+0x6c>
	{
		ssd1306_SetCursor(iD + 3, 20);
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <Mostrar_Calidad_Aire+0x7c>)
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3303      	adds	r3, #3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b21b      	sxth	r3, r3
 80013c0:	2114      	movs	r1, #20
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fc78 	bl	8001cb8 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Aire", Font_7x10, White);
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <Mostrar_Calidad_Aire+0x80>)
 80013ca:	2301      	movs	r3, #1
 80013cc:	ca06      	ldmia	r2, {r1, r2}
 80013ce:	4815      	ldr	r0, [pc, #84]	; (8001424 <Mostrar_Calidad_Aire+0x84>)
 80013d0:	f000 fc4c 	bl	8001c6c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD, 35);
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <Mostrar_Calidad_Aire+0x88>)
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	2123      	movs	r1, #35	; 0x23
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fc6b 	bl	8001cb8 <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Calidad);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	490f      	ldr	r1, [pc, #60]	; (800142c <Mostrar_Calidad_Aire+0x8c>)
 80013ee:	4810      	ldr	r0, [pc, #64]	; (8001430 <Mostrar_Calidad_Aire+0x90>)
 80013f0:	f013 fb3a 	bl	8014a68 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <Mostrar_Calidad_Aire+0x80>)
 80013f6:	2301      	movs	r3, #1
 80013f8:	ca06      	ldmia	r2, {r1, r2}
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <Mostrar_Calidad_Aire+0x90>)
 80013fc:	f000 fc36 	bl	8001c6c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" %", Font_7x10, White);
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <Mostrar_Calidad_Aire+0x80>)
 8001402:	2301      	movs	r3, #1
 8001404:	ca06      	ldmia	r2, {r1, r2}
 8001406:	480b      	ldr	r0, [pc, #44]	; (8001434 <Mostrar_Calidad_Aire+0x94>)
 8001408:	f000 fc30 	bl	8001c6c <ssd1306_WriteString>
		#endif
	}
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	41f3999a 	.word	0x41f3999a
 8001418:	20000309 	.word	0x20000309
 800141c:	20000004 	.word	0x20000004
 8001420:	20000008 	.word	0x20000008
 8001424:	08016ecc 	.word	0x08016ecc
 8001428:	20000006 	.word	0x20000006
 800142c:	08016e98 	.word	0x08016e98
 8001430:	20000310 	.word	0x20000310
 8001434:	08016ea8 	.word	0x08016ea8

08001438 <Mostrar_Tiempo>:

void Mostrar_Tiempo(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	4619      	mov	r1, r3
 8001444:	482e      	ldr	r0, [pc, #184]	; (8001500 <Mostrar_Tiempo+0xc8>)
 8001446:	f00a fab9 	bl	800b9bc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	482b      	ldr	r0, [pc, #172]	; (8001500 <Mostrar_Tiempo+0xc8>)
 8001454:	f00a fb94 	bl	800bb80 <HAL_RTC_GetDate>

	ssd1306_SetCursor(35, 0);
 8001458:	2100      	movs	r1, #0
 800145a:	2023      	movs	r0, #35	; 0x23
 800145c:	f000 fc2c 	bl	8001cb8 <ssd1306_SetCursor>

	Char_Display(15 + gTime.Hours, 0);
 8001460:	783b      	ldrb	r3, [r7, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	330f      	adds	r3, #15
 8001466:	b29b      	uxth	r3, r3
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f850 	bl	8001510 <Char_Display>
	ssd1306_WriteString(":", Font_7x10, White);
 8001470:	4a24      	ldr	r2, [pc, #144]	; (8001504 <Mostrar_Tiempo+0xcc>)
 8001472:	2301      	movs	r3, #1
 8001474:	ca06      	ldmia	r2, {r1, r2}
 8001476:	4824      	ldr	r0, [pc, #144]	; (8001508 <Mostrar_Tiempo+0xd0>)
 8001478:	f000 fbf8 	bl	8001c6c <ssd1306_WriteString>
	Char_Display(1 + gTime.Minutes, 1);
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	b29b      	uxth	r3, r3
 8001480:	3301      	adds	r3, #1
 8001482:	b29b      	uxth	r3, r3
 8001484:	2101      	movs	r1, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f842 	bl	8001510 <Char_Display>
	ssd1306_WriteString(":", Font_7x10, White);
 800148c:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <Mostrar_Tiempo+0xcc>)
 800148e:	2301      	movs	r3, #1
 8001490:	ca06      	ldmia	r2, {r1, r2}
 8001492:	481d      	ldr	r0, [pc, #116]	; (8001508 <Mostrar_Tiempo+0xd0>)
 8001494:	f000 fbea 	bl	8001c6c <ssd1306_WriteString>
	Char_Display(gTime.Seconds, 1);
 8001498:	78bb      	ldrb	r3, [r7, #2]
 800149a:	b29b      	uxth	r3, r3
 800149c:	2101      	movs	r1, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f836 	bl	8001510 <Char_Display>

	ssd1306_SetCursor(28, 54);
 80014a4:	2136      	movs	r1, #54	; 0x36
 80014a6:	201c      	movs	r0, #28
 80014a8:	f000 fc06 	bl	8001cb8 <ssd1306_SetCursor>

	Char_Display(2023 + gDate.Year, 0);
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f203 73e7 	addw	r3, r3, #2023	; 0x7e7
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f829 	bl	8001510 <Char_Display>
	ssd1306_WriteString("/", Font_7x10, White);
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <Mostrar_Tiempo+0xcc>)
 80014c0:	2301      	movs	r3, #1
 80014c2:	ca06      	ldmia	r2, {r1, r2}
 80014c4:	4811      	ldr	r0, [pc, #68]	; (800150c <Mostrar_Tiempo+0xd4>)
 80014c6:	f000 fbd1 	bl	8001c6c <ssd1306_WriteString>
	Char_Display(7 + gDate.Month, 1);
 80014ca:	7d7b      	ldrb	r3, [r7, #21]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3307      	adds	r3, #7
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2101      	movs	r1, #1
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f81b 	bl	8001510 <Char_Display>
	ssd1306_WriteString("/", Font_7x10, White);
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <Mostrar_Tiempo+0xcc>)
 80014dc:	2301      	movs	r3, #1
 80014de:	ca06      	ldmia	r2, {r1, r2}
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <Mostrar_Tiempo+0xd4>)
 80014e2:	f000 fbc3 	bl	8001c6c <ssd1306_WriteString>
	Char_Display(29 + gDate.Date, 1);
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	331d      	adds	r3, #29
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2101      	movs	r1, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f80d 	bl	8001510 <Char_Display>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000cec 	.word	0x20000cec
 8001504:	20000008 	.word	0x20000008
 8001508:	08016ed4 	.word	0x08016ed4
 800150c:	08016ed8 	.word	0x08016ed8

08001510 <Char_Display>:

void Char_Display(uint16_t dato, uint8_t Cero)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	80fb      	strh	r3, [r7, #6]
 800151c:	4613      	mov	r3, r2
 800151e:	717b      	strb	r3, [r7, #5]
	uint8_t aux1 = 0, aux2 = 0, aux3 = 0, aux4 = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	2300      	movs	r3, #0
 8001526:	73bb      	strb	r3, [r7, #14]
 8001528:	2300      	movs	r3, #0
 800152a:	737b      	strb	r3, [r7, #13]
 800152c:	2300      	movs	r3, #0
 800152e:	733b      	strb	r3, [r7, #12]

	#ifdef SSD1306_INCLUDE_FONT_7x10

	if(dato >= 0 && dato < 10)
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	2b09      	cmp	r3, #9
 8001534:	d812      	bhi.n	800155c <Char_Display+0x4c>
	{
		if (Cero)
 8001536:	797b      	ldrb	r3, [r7, #5]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <Char_Display+0x38>
			ssd1306_WriteChar(48, Font_7x10, White);
 800153c:	4a70      	ldr	r2, [pc, #448]	; (8001700 <Char_Display+0x1f0>)
 800153e:	2301      	movs	r3, #1
 8001540:	ca06      	ldmia	r2, {r1, r2}
 8001542:	2030      	movs	r0, #48	; 0x30
 8001544:	f000 fb12 	bl	8001b6c <ssd1306_WriteChar>
		ssd1306_WriteChar(dato + 48, Font_7x10, White);
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	3330      	adds	r3, #48	; 0x30
 800154e:	b2d8      	uxtb	r0, r3
 8001550:	4a6b      	ldr	r2, [pc, #428]	; (8001700 <Char_Display+0x1f0>)
 8001552:	2301      	movs	r3, #1
 8001554:	ca06      	ldmia	r2, {r1, r2}
 8001556:	f000 fb09 	bl	8001b6c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
	}

	#endif
}
 800155a:	e0cc      	b.n	80016f6 <Char_Display+0x1e6>
	else if(dato >= 10 && dato < 100)
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	2b09      	cmp	r3, #9
 8001560:	d926      	bls.n	80015b0 <Char_Display+0xa0>
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	2b63      	cmp	r3, #99	; 0x63
 8001566:	d823      	bhi.n	80015b0 <Char_Display+0xa0>
		aux1 = dato / 10;
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	4a66      	ldr	r2, [pc, #408]	; (8001704 <Char_Display+0x1f4>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	b29b      	uxth	r3, r3
 8001574:	73fb      	strb	r3, [r7, #15]
		dato %= 10;
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	4b62      	ldr	r3, [pc, #392]	; (8001704 <Char_Display+0x1f4>)
 800157a:	fba3 1302 	umull	r1, r3, r3, r2
 800157e:	08d9      	lsrs	r1, r3, #3
 8001580:	460b      	mov	r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	80fb      	strh	r3, [r7, #6]
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	3330      	adds	r3, #48	; 0x30
 8001590:	b2d8      	uxtb	r0, r3
 8001592:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <Char_Display+0x1f0>)
 8001594:	2301      	movs	r3, #1
 8001596:	ca06      	ldmia	r2, {r1, r2}
 8001598:	f000 fae8 	bl	8001b6c <ssd1306_WriteChar>
		ssd1306_WriteChar(dato + 48, Font_7x10, White);
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	3330      	adds	r3, #48	; 0x30
 80015a2:	b2d8      	uxtb	r0, r3
 80015a4:	4a56      	ldr	r2, [pc, #344]	; (8001700 <Char_Display+0x1f0>)
 80015a6:	2301      	movs	r3, #1
 80015a8:	ca06      	ldmia	r2, {r1, r2}
 80015aa:	f000 fadf 	bl	8001b6c <ssd1306_WriteChar>
 80015ae:	e0a2      	b.n	80016f6 <Char_Display+0x1e6>
	else if(dato >= 100 && dato < 1000)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	2b63      	cmp	r3, #99	; 0x63
 80015b4:	d940      	bls.n	8001638 <Char_Display+0x128>
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015bc:	d23c      	bcs.n	8001638 <Char_Display+0x128>
		aux1 = dato % 10;
 80015be:	88fa      	ldrh	r2, [r7, #6]
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <Char_Display+0x1f4>)
 80015c2:	fba3 1302 	umull	r1, r3, r3, r2
 80015c6:	08d9      	lsrs	r1, r3, #3
 80015c8:	460b      	mov	r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	73fb      	strb	r3, [r7, #15]
		aux2 = dato / 10;
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	4a4a      	ldr	r2, [pc, #296]	; (8001704 <Char_Display+0x1f4>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	73bb      	strb	r3, [r7, #14]
		aux3 = aux2 / 10;
 80015e4:	7bbb      	ldrb	r3, [r7, #14]
 80015e6:	4a47      	ldr	r2, [pc, #284]	; (8001704 <Char_Display+0x1f4>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	737b      	strb	r3, [r7, #13]
		aux2 %= 10;
 80015f0:	7bba      	ldrb	r2, [r7, #14]
 80015f2:	4b44      	ldr	r3, [pc, #272]	; (8001704 <Char_Display+0x1f4>)
 80015f4:	fba3 1302 	umull	r1, r3, r3, r2
 80015f8:	08d9      	lsrs	r1, r3, #3
 80015fa:	460b      	mov	r3, r1
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	73bb      	strb	r3, [r7, #14]
		ssd1306_WriteChar(aux3 + 48, Font_7x10, White);
 8001606:	7b7b      	ldrb	r3, [r7, #13]
 8001608:	3330      	adds	r3, #48	; 0x30
 800160a:	b2d8      	uxtb	r0, r3
 800160c:	4a3c      	ldr	r2, [pc, #240]	; (8001700 <Char_Display+0x1f0>)
 800160e:	2301      	movs	r3, #1
 8001610:	ca06      	ldmia	r2, {r1, r2}
 8001612:	f000 faab 	bl	8001b6c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	3330      	adds	r3, #48	; 0x30
 800161a:	b2d8      	uxtb	r0, r3
 800161c:	4a38      	ldr	r2, [pc, #224]	; (8001700 <Char_Display+0x1f0>)
 800161e:	2301      	movs	r3, #1
 8001620:	ca06      	ldmia	r2, {r1, r2}
 8001622:	f000 faa3 	bl	8001b6c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	3330      	adds	r3, #48	; 0x30
 800162a:	b2d8      	uxtb	r0, r3
 800162c:	4a34      	ldr	r2, [pc, #208]	; (8001700 <Char_Display+0x1f0>)
 800162e:	2301      	movs	r3, #1
 8001630:	ca06      	ldmia	r2, {r1, r2}
 8001632:	f000 fa9b 	bl	8001b6c <ssd1306_WriteChar>
 8001636:	e05e      	b.n	80016f6 <Char_Display+0x1e6>
	else if(dato >= 1000 && dato < 10000)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800163e:	d35a      	bcc.n	80016f6 <Char_Display+0x1e6>
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	f242 720f 	movw	r2, #9999	; 0x270f
 8001646:	4293      	cmp	r3, r2
 8001648:	d855      	bhi.n	80016f6 <Char_Display+0x1e6>
		aux1 = dato % 10;
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <Char_Display+0x1f4>)
 800164e:	fba3 1302 	umull	r1, r3, r3, r2
 8001652:	08d9      	lsrs	r1, r3, #3
 8001654:	460b      	mov	r3, r1
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	b29b      	uxth	r3, r3
 8001660:	73fb      	strb	r3, [r7, #15]
		aux2 = dato / 10;
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4a27      	ldr	r2, [pc, #156]	; (8001704 <Char_Display+0x1f4>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	b29b      	uxth	r3, r3
 800166e:	73bb      	strb	r3, [r7, #14]
		aux3 = aux2 / 10;
 8001670:	7bbb      	ldrb	r3, [r7, #14]
 8001672:	4a24      	ldr	r2, [pc, #144]	; (8001704 <Char_Display+0x1f4>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	737b      	strb	r3, [r7, #13]
		aux2 %= 10;
 800167c:	7bba      	ldrb	r2, [r7, #14]
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <Char_Display+0x1f4>)
 8001680:	fba3 1302 	umull	r1, r3, r3, r2
 8001684:	08d9      	lsrs	r1, r3, #3
 8001686:	460b      	mov	r3, r1
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	73bb      	strb	r3, [r7, #14]
		aux4 = aux3 / 10;
 8001692:	7b7b      	ldrb	r3, [r7, #13]
 8001694:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <Char_Display+0x1f4>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	08db      	lsrs	r3, r3, #3
 800169c:	733b      	strb	r3, [r7, #12]
		aux3 %= 10;
 800169e:	7b7a      	ldrb	r2, [r7, #13]
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <Char_Display+0x1f4>)
 80016a2:	fba3 1302 	umull	r1, r3, r3, r2
 80016a6:	08d9      	lsrs	r1, r3, #3
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	737b      	strb	r3, [r7, #13]
		ssd1306_WriteChar(aux4 + 48, Font_7x10, White);
 80016b4:	7b3b      	ldrb	r3, [r7, #12]
 80016b6:	3330      	adds	r3, #48	; 0x30
 80016b8:	b2d8      	uxtb	r0, r3
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <Char_Display+0x1f0>)
 80016bc:	2301      	movs	r3, #1
 80016be:	ca06      	ldmia	r2, {r1, r2}
 80016c0:	f000 fa54 	bl	8001b6c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux3 + 48, Font_7x10, White);
 80016c4:	7b7b      	ldrb	r3, [r7, #13]
 80016c6:	3330      	adds	r3, #48	; 0x30
 80016c8:	b2d8      	uxtb	r0, r3
 80016ca:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <Char_Display+0x1f0>)
 80016cc:	2301      	movs	r3, #1
 80016ce:	ca06      	ldmia	r2, {r1, r2}
 80016d0:	f000 fa4c 	bl	8001b6c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	3330      	adds	r3, #48	; 0x30
 80016d8:	b2d8      	uxtb	r0, r3
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <Char_Display+0x1f0>)
 80016dc:	2301      	movs	r3, #1
 80016de:	ca06      	ldmia	r2, {r1, r2}
 80016e0:	f000 fa44 	bl	8001b6c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3330      	adds	r3, #48	; 0x30
 80016e8:	b2d8      	uxtb	r0, r3
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <Char_Display+0x1f0>)
 80016ec:	2301      	movs	r3, #1
 80016ee:	ca06      	ldmia	r2, {r1, r2}
 80016f0:	f000 fa3c 	bl	8001b6c <ssd1306_WriteChar>
}
 80016f4:	e7ff      	b.n	80016f6 <Char_Display+0x1e6>
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008
 8001704:	cccccccd 	.word	0xcccccccd

08001708 <Scroll>:

	#endif
}

void Scroll(uint8_t Cambio_Datos, uint8_t Posicion_X, uint8_t Posicion_Y)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	460b      	mov	r3, r1
 8001714:	71bb      	strb	r3, [r7, #6]
 8001716:	4613      	mov	r3, r2
 8001718:	717b      	strb	r3, [r7, #5]
	if (Flag_Datos && Flag_Scroll && Cambio_Pantalla == Cambio_Datos)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <Scroll+0x130>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d02f      	beq.n	8001782 <Scroll+0x7a>
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <Scroll+0x134>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d02b      	beq.n	8001782 <Scroll+0x7a>
 800172a:	4b45      	ldr	r3, [pc, #276]	; (8001840 <Scroll+0x138>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	79fa      	ldrb	r2, [r7, #7]
 8001730:	429a      	cmp	r2, r3
 8001732:	d126      	bne.n	8001782 <Scroll+0x7a>
	{
		Flag_Scroll = 0;
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <Scroll+0x134>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]

			i--;
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <Scroll+0x13c>)
 800173c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001740:	b29b      	uxth	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21a      	sxth	r2, r3
 8001748:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <Scroll+0x13c>)
 800174a:	801a      	strh	r2, [r3, #0]
			j--;
 800174c:	4b3e      	ldr	r3, [pc, #248]	; (8001848 <Scroll+0x140>)
 800174e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29b      	uxth	r3, r3
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <Scroll+0x140>)
 800175c:	801a      	strh	r2, [r3, #0]

			iD++;
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <Scroll+0x144>)
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	b29b      	uxth	r3, r3
 8001766:	3301      	adds	r3, #1
 8001768:	b29b      	uxth	r3, r3
 800176a:	b21a      	sxth	r2, r3
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <Scroll+0x144>)
 800176e:	801a      	strh	r2, [r3, #0]
			jD++;
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <Scroll+0x148>)
 8001772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001776:	b29b      	uxth	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	b21a      	sxth	r2, r3
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <Scroll+0x148>)
 8001780:	801a      	strh	r2, [r3, #0]
	}

	if (Cambio_Pantalla == Cambio_Datos)
 8001782:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <Scroll+0x138>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	79fa      	ldrb	r2, [r7, #7]
 8001788:	429a      	cmp	r2, r3
 800178a:	d14f      	bne.n	800182c <Scroll+0x124>
	{
		if(i < Posicion_X && j < Posicion_Y && Reinicio_Scroll == Cambio_Datos)
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <Scroll+0x13c>)
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	461a      	mov	r2, r3
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	429a      	cmp	r2, r3
 8001798:	da33      	bge.n	8001802 <Scroll+0xfa>
 800179a:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <Scroll+0x140>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	461a      	mov	r2, r3
 80017a2:	797b      	ldrb	r3, [r7, #5]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	da2c      	bge.n	8001802 <Scroll+0xfa>
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <Scroll+0x14c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d127      	bne.n	8001802 <Scroll+0xfa>
		{
			i++;
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <Scroll+0x13c>)
 80017b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b21a      	sxth	r2, r3
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <Scroll+0x13c>)
 80017c2:	801a      	strh	r2, [r3, #0]
			j++;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <Scroll+0x140>)
 80017c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <Scroll+0x140>)
 80017d4:	801a      	strh	r2, [r3, #0]

			iD--;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <Scroll+0x144>)
 80017d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <Scroll+0x144>)
 80017e6:	801a      	strh	r2, [r3, #0]
			jD--;
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <Scroll+0x148>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <Scroll+0x148>)
 80017f8:	801a      	strh	r2, [r3, #0]

			Flag_Datos = 0;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <Scroll+0x130>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
				Reinicio_Scroll = Cambio_Datos + 1;
			}

		}
	}
}
 8001800:	e014      	b.n	800182c <Scroll+0x124>
		else if(Reinicio_Scroll == Cambio_Datos)
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <Scroll+0x14c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	429a      	cmp	r2, r3
 800180a:	d10f      	bne.n	800182c <Scroll+0x124>
			Datos = 3000;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <Scroll+0x150>)
 800180e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001812:	801a      	strh	r2, [r3, #0]
			if(Cambio_Datos == 2)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d103      	bne.n	8001822 <Scroll+0x11a>
				Reinicio_Scroll = 0;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <Scroll+0x14c>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
}
 8001820:	e004      	b.n	800182c <Scroll+0x124>
				Reinicio_Scroll = Cambio_Datos + 1;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	3301      	adds	r3, #1
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <Scroll+0x14c>)
 800182a:	701a      	strb	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	20001271 	.word	0x20001271
 800183c:	20001270 	.word	0x20001270
 8001840:	20000309 	.word	0x20000309
 8001844:	20000000 	.word	0x20000000
 8001848:	20000002 	.word	0x20000002
 800184c:	20000004 	.word	0x20000004
 8001850:	20000006 	.word	0x20000006
 8001854:	20000308 	.word	0x20000308
 8001858:	20000010 	.word	0x20000010

0800185c <Mostrar_Datos>:
	}
}


void Mostrar_Datos()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001860:	2000      	movs	r0, #0
 8001862:	f000 f8cd 	bl	8001a00 <ssd1306_Fill>

	Scroll(0, 25, 17);
 8001866:	2211      	movs	r2, #17
 8001868:	2119      	movs	r1, #25
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff ff4c 	bl	8001708 <Scroll>

	Mostrar_Tiempo();
 8001870:	f7ff fde2 	bl	8001438 <Mostrar_Tiempo>
	Mostrar_Temperatura();
 8001874:	f7ff fbbe 	bl	8000ff4 <Mostrar_Temperatura>
	Mostrar_Humedad();
 8001878:	f7ff fc32 	bl	80010e0 <Mostrar_Humedad>

	Scroll(1, 25, 17);
 800187c:	2211      	movs	r2, #17
 800187e:	2119      	movs	r1, #25
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff ff41 	bl	8001708 <Scroll>

	Mostrar_Tiempo();
 8001886:	f7ff fdd7 	bl	8001438 <Mostrar_Tiempo>
	Mostrar_Presion();
 800188a:	f7ff fc79 	bl	8001180 <Mostrar_Presion>
	Mostrar_Lux();
 800188e:	f7ff fcd7 	bl	8001240 <Mostrar_Lux>

	Scroll(2, 25, 17);
 8001892:	2211      	movs	r2, #17
 8001894:	2119      	movs	r1, #25
 8001896:	2002      	movs	r0, #2
 8001898:	f7ff ff36 	bl	8001708 <Scroll>

	Mostrar_Tiempo();
 800189c:	f7ff fdcc 	bl	8001438 <Mostrar_Tiempo>
	Mostrar_Velocidad();
 80018a0:	f7ff fd1e 	bl	80012e0 <Mostrar_Velocidad>
	Mostrar_Calidad_Aire();
 80018a4:	f7ff fd7c 	bl	80013a0 <Mostrar_Calidad_Aire>

	Battery_100();
 80018a8:	f000 fb42 	bl	8001f30 <Battery_100>
	Wifi_On();
 80018ac:	f000 fb6e 	bl	8001f8c <Wifi_On>

	ssd1306_UpdateScreen();
 80018b0:	f000 f8ca 	bl	8001a48 <ssd1306_UpdateScreen>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <ssd1306_Reset>:

#include "Datos_Display.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	2301      	movs	r3, #1
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	2200      	movs	r2, #0
 80018e4:	2178      	movs	r1, #120	; 0x78
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <ssd1306_WriteCommand+0x2c>)
 80018e8:	f005 fad2 	bl	8006e90 <HAL_I2C_Mem_Write>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000bd8 	.word	0x20000bd8

080018f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f04f 32ff 	mov.w	r2, #4294967295
 800190a:	9202      	str	r2, [sp, #8]
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2301      	movs	r3, #1
 8001914:	2240      	movs	r2, #64	; 0x40
 8001916:	2178      	movs	r1, #120	; 0x78
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <ssd1306_WriteData+0x30>)
 800191a:	f005 fab9 	bl	8006e90 <HAL_I2C_Mem_Write>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000bd8 	.word	0x20000bd8

0800192c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001930:	f7ff ffc2 	bl	80018b8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001934:	2064      	movs	r0, #100	; 0x64
 8001936:	f003 fc6f 	bl	8005218 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800193a:	2000      	movs	r0, #0
 800193c:	f000 fada 	bl	8001ef4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001940:	2020      	movs	r0, #32
 8001942:	f7ff ffc1 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff ffbe 	bl	80018c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800194c:	20b0      	movs	r0, #176	; 0xb0
 800194e:	f7ff ffbb 	bl	80018c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001952:	20c8      	movs	r0, #200	; 0xc8
 8001954:	f7ff ffb8 	bl	80018c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff ffb5 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800195e:	2010      	movs	r0, #16
 8001960:	f7ff ffb2 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001964:	2040      	movs	r0, #64	; 0x40
 8001966:	f7ff ffaf 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800196a:	20ff      	movs	r0, #255	; 0xff
 800196c:	f000 faaf 	bl	8001ece <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001970:	20a1      	movs	r0, #161	; 0xa1
 8001972:	f7ff ffa9 	bl	80018c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001976:	20a6      	movs	r0, #166	; 0xa6
 8001978:	f7ff ffa6 	bl	80018c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800197c:	20a8      	movs	r0, #168	; 0xa8
 800197e:	f7ff ffa3 	bl	80018c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001982:	203f      	movs	r0, #63	; 0x3f
 8001984:	f7ff ffa0 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001988:	20a4      	movs	r0, #164	; 0xa4
 800198a:	f7ff ff9d 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800198e:	20d3      	movs	r0, #211	; 0xd3
 8001990:	f7ff ff9a 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff ff97 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800199a:	20d5      	movs	r0, #213	; 0xd5
 800199c:	f7ff ff94 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019a0:	20f0      	movs	r0, #240	; 0xf0
 80019a2:	f7ff ff91 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019a6:	20d9      	movs	r0, #217	; 0xd9
 80019a8:	f7ff ff8e 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019ac:	2022      	movs	r0, #34	; 0x22
 80019ae:	f7ff ff8b 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019b2:	20da      	movs	r0, #218	; 0xda
 80019b4:	f7ff ff88 	bl	80018c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80019b8:	2012      	movs	r0, #18
 80019ba:	f7ff ff85 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80019be:	20db      	movs	r0, #219	; 0xdb
 80019c0:	f7ff ff82 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80019c4:	2020      	movs	r0, #32
 80019c6:	f7ff ff7f 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80019ca:	208d      	movs	r0, #141	; 0x8d
 80019cc:	f7ff ff7c 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80019d0:	2014      	movs	r0, #20
 80019d2:	f7ff ff79 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 fa8c 	bl	8001ef4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80019dc:	2000      	movs	r0, #0
 80019de:	f000 f80f 	bl	8001a00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80019e2:	f000 f831 	bl	8001a48 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <ssd1306_Init+0xd0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <ssd1306_Init+0xd0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80019f2:	4b02      	ldr	r3, [pc, #8]	; (80019fc <ssd1306_Init+0xd0>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	711a      	strb	r2, [r3, #4]
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000072c 	.word	0x2000072c

08001a00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e00d      	b.n	8001a2c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <ssd1306_Fill+0x1a>
 8001a16:	2100      	movs	r1, #0
 8001a18:	e000      	b.n	8001a1c <ssd1306_Fill+0x1c>
 8001a1a:	21ff      	movs	r1, #255	; 0xff
 8001a1c:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <ssd1306_Fill+0x44>)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4413      	add	r3, r2
 8001a22:	460a      	mov	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8001a32:	d3ed      	bcc.n	8001a10 <ssd1306_Fill+0x10>
    }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000031c 	.word	0x2000031c

08001a48 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	e01a      	b.n	8001a8a <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	3b50      	subs	r3, #80	; 0x50
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff34 	bl	80018c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff ff31 	bl	80018c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a66:	2010      	movs	r0, #16
 8001a68:	f7ff ff2e 	bl	80018c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <ssd1306_UpdateScreen+0x54>)
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2182      	movs	r1, #130	; 0x82
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff3a 	bl	80018f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	3301      	adds	r3, #1
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b07      	cmp	r3, #7
 8001a8e:	d9e1      	bls.n	8001a54 <ssd1306_UpdateScreen+0xc>
    }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000031c 	.word	0x2000031c

08001aa0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(int16_t x, uint8_t y, SSD1306_COLOR color) {
 8001aa0:	b490      	push	{r4, r7}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	717b      	strb	r3, [r7, #5]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	713b      	strb	r3, [r7, #4]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT || x <= 0)
 8001ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab6:	2b81      	cmp	r3, #129	; 0x81
 8001ab8:	dc51      	bgt.n	8001b5e <ssd1306_DrawPixel+0xbe>
 8001aba:	797b      	ldrb	r3, [r7, #5]
 8001abc:	2b3f      	cmp	r3, #63	; 0x3f
 8001abe:	d84e      	bhi.n	8001b5e <ssd1306_DrawPixel+0xbe>
 8001ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dd4a      	ble.n	8001b5e <ssd1306_DrawPixel+0xbe>
        // Don't write outside the buffer
    	return ;
     }
   
    // Draw in the right color
    if(color == White) {
 8001ac8:	793b      	ldrb	r3, [r7, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d122      	bne.n	8001b14 <ssd1306_DrawPixel+0x74>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ace:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ad2:	797b      	ldrb	r3, [r7, #5]
 8001ad4:	08db      	lsrs	r3, r3, #3
 8001ad6:	b2d8      	uxtb	r0, r3
 8001ad8:	4601      	mov	r1, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	019b      	lsls	r3, r3, #6
 8001ade:	440b      	add	r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <ssd1306_DrawPixel+0xc8>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	797b      	ldrb	r3, [r7, #5]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b25c      	sxtb	r4, r3
 8001afc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b00:	4601      	mov	r1, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	440b      	add	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2e1      	uxtb	r1, r4
 8001b0e:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <ssd1306_DrawPixel+0xc8>)
 8001b10:	54d1      	strb	r1, [r2, r3]
 8001b12:	e025      	b.n	8001b60 <ssd1306_DrawPixel+0xc0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b18:	797b      	ldrb	r3, [r7, #5]
 8001b1a:	08db      	lsrs	r3, r3, #3
 8001b1c:	b2d8      	uxtb	r0, r3
 8001b1e:	4601      	mov	r1, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	019b      	lsls	r3, r3, #6
 8001b24:	440b      	add	r3, r1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <ssd1306_DrawPixel+0xc8>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	797b      	ldrb	r3, [r7, #5]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	4013      	ands	r3, r2
 8001b44:	b25c      	sxtb	r4, r3
 8001b46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	019b      	lsls	r3, r3, #6
 8001b50:	440b      	add	r3, r1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	b2e1      	uxtb	r1, r4
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <ssd1306_DrawPixel+0xc8>)
 8001b5a:	54d1      	strb	r1, [r2, r3]
 8001b5c:	e000      	b.n	8001b60 <ssd1306_DrawPixel+0xc0>
    	return ;
 8001b5e:	bf00      	nop
    }
}
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc90      	pop	{r4, r7}
 8001b66:	4770      	bx	lr
 8001b68:	2000031c 	.word	0x2000031c

08001b6c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4604      	mov	r4, r0
 8001b74:	1d38      	adds	r0, r7, #4
 8001b76:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4623      	mov	r3, r4
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	4613      	mov	r3, r2
 8001b82:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b1f      	cmp	r3, #31
 8001b88:	d902      	bls.n	8001b90 <ssd1306_WriteChar+0x24>
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b7e      	cmp	r3, #126	; 0x7e
 8001b8e:	d901      	bls.n	8001b94 <ssd1306_WriteChar+0x28>
        return 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e064      	b.n	8001c5e <ssd1306_WriteChar+0xf2>
        // Not enough space on current line
        return 0;
    }*/
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	e050      	b.n	8001c3c <ssd1306_WriteChar+0xd0>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3b20      	subs	r3, #32
 8001ba0:	7979      	ldrb	r1, [r7, #5]
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	440b      	add	r3, r1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	e038      	b.n	8001c2c <ssd1306_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d014      	beq.n	8001bf4 <ssd1306_WriteChar+0x88>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <ssd1306_WriteChar+0xfc>)
 8001bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b218      	sxth	r0, r3
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <ssd1306_WriteChar+0xfc>)
 8001bde:	885b      	ldrh	r3, [r3, #2]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	7bba      	ldrb	r2, [r7, #14]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7ff ff57 	bl	8001aa0 <ssd1306_DrawPixel>
 8001bf2:	e018      	b.n	8001c26 <ssd1306_WriteChar+0xba>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <ssd1306_WriteChar+0xfc>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <ssd1306_WriteChar+0xfc>)
 8001c08:	885b      	ldrh	r3, [r3, #2]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b2d9      	uxtb	r1, r3
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	f7ff ff3d 	bl	8001aa0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	793b      	ldrb	r3, [r7, #4]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d3c1      	bcc.n	8001bba <ssd1306_WriteChar+0x4e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	797b      	ldrb	r3, [r7, #5]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d3a9      	bcc.n	8001b9a <ssd1306_WriteChar+0x2e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <ssd1306_WriteChar+0xfc>)
 8001c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	793b      	ldrb	r3, [r7, #4]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <ssd1306_WriteChar+0xfc>)
 8001c5a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000072c 	.word	0x2000072c

08001c6c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	1d38      	adds	r0, r7, #4
 8001c76:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c7a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001c7c:	e012      	b.n	8001ca4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	7818      	ldrb	r0, [r3, #0]
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	1d3a      	adds	r2, r7, #4
 8001c86:	ca06      	ldmia	r2, {r1, r2}
 8001c88:	f7ff ff70 	bl	8001b6c <ssd1306_WriteChar>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d002      	beq.n	8001c9e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	e008      	b.n	8001cb0 <ssd1306_WriteString+0x44>
        }
        str++;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e8      	bne.n	8001c7e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	781b      	ldrb	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(int16_t x, uint8_t y) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	717b      	strb	r3, [r7, #5]
    SSD1306.CurrentX = x;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <ssd1306_SetCursor+0x2c>)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8001cce:	797b      	ldrb	r3, [r7, #5]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <ssd1306_SetCursor+0x2c>)
 8001cd4:	805a      	strh	r2, [r3, #2]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2000072c 	.word	0x2000072c

08001ce8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4604      	mov	r4, r0
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71bb      	strb	r3, [r7, #6]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	717b      	strb	r3, [r7, #5]
 8001d02:	4613      	mov	r3, r2
 8001d04:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001d06:	797a      	ldrb	r2, [r7, #5]
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bfb8      	it	lt
 8001d10:	425b      	neglt	r3, r3
 8001d12:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001d14:	793a      	ldrb	r2, [r7, #4]
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bfb8      	it	lt
 8001d1e:	425b      	neglt	r3, r3
 8001d20:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001d22:	79fa      	ldrb	r2, [r7, #7]
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d201      	bcs.n	8001d2e <ssd1306_Line+0x46>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e001      	b.n	8001d32 <ssd1306_Line+0x4a>
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001d34:	79ba      	ldrb	r2, [r7, #6]
 8001d36:	793b      	ldrb	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d201      	bcs.n	8001d40 <ssd1306_Line+0x58>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e001      	b.n	8001d44 <ssd1306_Line+0x5c>
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001d4e:	797b      	ldrb	r3, [r7, #5]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d56:	7939      	ldrb	r1, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fea1 	bl	8001aa0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001d5e:	e025      	b.n	8001dac <ssd1306_Line+0xc4>
        ssd1306_DrawPixel(x1, y1, color);
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d68:	79b9      	ldrb	r1, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fe98 	bl	8001aa0 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	425b      	negs	r3, r3
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	dd08      	ble.n	8001d92 <ssd1306_Line+0xaa>
            error -= deltaY;
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4413      	add	r3, r2
 8001d90:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	da08      	bge.n	8001dac <ssd1306_Line+0xc4>
            error += deltaX;
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	4413      	add	r3, r2
 8001da0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	4413      	add	r3, r2
 8001daa:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	797b      	ldrb	r3, [r7, #5]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1d5      	bne.n	8001d60 <ssd1306_Line+0x78>
 8001db4:	79ba      	ldrb	r2, [r7, #6]
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1d1      	bne.n	8001d60 <ssd1306_Line+0x78>
        }
    }
    return;
 8001dbc:	bf00      	nop
}
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}

08001dc4 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	4604      	mov	r4, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71bb      	strb	r3, [r7, #6]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	717b      	strb	r3, [r7, #5]
 8001dde:	4613      	mov	r3, r2
 8001de0:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001de2:	79bc      	ldrb	r4, [r7, #6]
 8001de4:	797a      	ldrb	r2, [r7, #5]
 8001de6:	79b9      	ldrb	r1, [r7, #6]
 8001de8:	79f8      	ldrb	r0, [r7, #7]
 8001dea:	7e3b      	ldrb	r3, [r7, #24]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	4623      	mov	r3, r4
 8001df0:	f7ff ff7a 	bl	8001ce8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001df4:	793c      	ldrb	r4, [r7, #4]
 8001df6:	797a      	ldrb	r2, [r7, #5]
 8001df8:	79b9      	ldrb	r1, [r7, #6]
 8001dfa:	7978      	ldrb	r0, [r7, #5]
 8001dfc:	7e3b      	ldrb	r3, [r7, #24]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4623      	mov	r3, r4
 8001e02:	f7ff ff71 	bl	8001ce8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001e06:	793c      	ldrb	r4, [r7, #4]
 8001e08:	79fa      	ldrb	r2, [r7, #7]
 8001e0a:	7939      	ldrb	r1, [r7, #4]
 8001e0c:	7978      	ldrb	r0, [r7, #5]
 8001e0e:	7e3b      	ldrb	r3, [r7, #24]
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	4623      	mov	r3, r4
 8001e14:	f7ff ff68 	bl	8001ce8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001e18:	79bc      	ldrb	r4, [r7, #6]
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	7939      	ldrb	r1, [r7, #4]
 8001e1e:	79f8      	ldrb	r0, [r7, #7]
 8001e20:	7e3b      	ldrb	r3, [r7, #24]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4623      	mov	r3, r4
 8001e26:	f7ff ff5f 	bl	8001ce8 <ssd1306_Line>

    return;
 8001e2a:	bf00      	nop
}
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}

08001e32 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001e32:	b590      	push	{r4, r7, lr}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4604      	mov	r4, r0
 8001e3a:	4608      	mov	r0, r1
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4623      	mov	r3, r4
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4603      	mov	r3, r0
 8001e46:	71bb      	strb	r3, [r7, #6]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	717b      	strb	r3, [r7, #5]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001e50:	79fa      	ldrb	r2, [r7, #7]
 8001e52:	797b      	ldrb	r3, [r7, #5]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	bf28      	it	cs
 8001e58:	4613      	movcs	r3, r2
 8001e5a:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001e5c:	797a      	ldrb	r2, [r7, #5]
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	4293      	cmp	r3, r2
 8001e62:	bf38      	it	cc
 8001e64:	4613      	movcc	r3, r2
 8001e66:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001e68:	79ba      	ldrb	r2, [r7, #6]
 8001e6a:	793b      	ldrb	r3, [r7, #4]
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	bf28      	it	cs
 8001e70:	4613      	movcs	r3, r2
 8001e72:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001e74:	793a      	ldrb	r2, [r7, #4]
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	bf38      	it	cc
 8001e7c:	4613      	movcc	r3, r2
 8001e7e:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e017      	b.n	8001eb6 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001e86:	7b7b      	ldrb	r3, [r7, #13]
 8001e88:	73bb      	strb	r3, [r7, #14]
 8001e8a:	e00a      	b.n	8001ea2 <ssd1306_FillRectangle+0x70>
            ssd1306_DrawPixel(x, y, color);
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e94:	7bf9      	ldrb	r1, [r7, #15]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe02 	bl	8001aa0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	73bb      	strb	r3, [r7, #14]
 8001ea2:	7bba      	ldrb	r2, [r7, #14]
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d802      	bhi.n	8001eb0 <ssd1306_FillRectangle+0x7e>
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	2b81      	cmp	r3, #129	; 0x81
 8001eae:	d9ed      	bls.n	8001e8c <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	7abb      	ldrb	r3, [r7, #10]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d803      	bhi.n	8001ec6 <ssd1306_FillRectangle+0x94>
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ec2:	d9e0      	bls.n	8001e86 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
}
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}

08001ece <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ed8:	2381      	movs	r3, #129	; 0x81
 8001eda:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fcf2 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fcee 	bl	80018c8 <ssd1306_WriteCommand>
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f04:	23af      	movs	r3, #175	; 0xaf
 8001f06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <ssd1306_SetDisplayOn+0x38>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	715a      	strb	r2, [r3, #5]
 8001f0e:	e004      	b.n	8001f1a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f10:	23ae      	movs	r3, #174	; 0xae
 8001f12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <ssd1306_SetDisplayOn+0x38>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fcd3 	bl	80018c8 <ssd1306_WriteCommand>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000072c 	.word	0x2000072c

08001f30 <Battery_100>:
    0b00000000,  //
    0b00000000   //
};

void Battery_100(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(110, 0, 124, 8, White);
 8001f36:	2301      	movs	r3, #1
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	227c      	movs	r2, #124	; 0x7c
 8001f3e:	2100      	movs	r1, #0
 8001f40:	206e      	movs	r0, #110	; 0x6e
 8001f42:	f7ff ff3f 	bl	8001dc4 <ssd1306_DrawRectangle>
	ssd1306_FillRectangle(112, 2, 114, 6, White);
 8001f46:	2301      	movs	r3, #1
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	2272      	movs	r2, #114	; 0x72
 8001f4e:	2102      	movs	r1, #2
 8001f50:	2070      	movs	r0, #112	; 0x70
 8001f52:	f7ff ff6e 	bl	8001e32 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(116, 2, 118, 6, White);
 8001f56:	2301      	movs	r3, #1
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	2276      	movs	r2, #118	; 0x76
 8001f5e:	2102      	movs	r1, #2
 8001f60:	2074      	movs	r0, #116	; 0x74
 8001f62:	f7ff ff66 	bl	8001e32 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(120, 2, 122, 6, White);
 8001f66:	2301      	movs	r3, #1
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	227a      	movs	r2, #122	; 0x7a
 8001f6e:	2102      	movs	r1, #2
 8001f70:	2078      	movs	r0, #120	; 0x78
 8001f72:	f7ff ff5e 	bl	8001e32 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(124, 2, 126, 6, White);
 8001f76:	2301      	movs	r3, #1
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	227e      	movs	r2, #126	; 0x7e
 8001f7e:	2102      	movs	r1, #2
 8001f80:	207c      	movs	r0, #124	; 0x7c
 8001f82:	f7ff ff56 	bl	8001e32 <ssd1306_FillRectangle>
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <Wifi_On>:
	ssd1306_DrawRectangle(110, 0, 124, 8, White);
	ssd1306_FillRectangle(124, 2, 126, 6, White);
}

void Wifi_On(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af02      	add	r7, sp, #8
	ssd1306_Line(7, 0, 7, 9, White);
 8001f92:	2301      	movs	r3, #1
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2309      	movs	r3, #9
 8001f98:	2207      	movs	r2, #7
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2007      	movs	r0, #7
 8001f9e:	f7ff fea3 	bl	8001ce8 <ssd1306_Line>
	ssd1306_Line(2, 0, 12, 0, White);
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	220c      	movs	r2, #12
 8001faa:	2100      	movs	r1, #0
 8001fac:	2002      	movs	r0, #2
 8001fae:	f7ff fe9b 	bl	8001ce8 <ssd1306_Line>
	ssd1306_Line(2, 0, 7, 5, White);
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	2207      	movs	r2, #7
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	f7ff fe93 	bl	8001ce8 <ssd1306_Line>
	ssd1306_Line(7, 5, 12, 0, White);
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	220c      	movs	r2, #12
 8001fca:	2105      	movs	r1, #5
 8001fcc:	2007      	movs	r0, #7
 8001fce:	f7ff fe8b 	bl	8001ce8 <ssd1306_Line>

	ssd1306_Line(9, 8, 9, 9, White);
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2309      	movs	r3, #9
 8001fd8:	2209      	movs	r2, #9
 8001fda:	2108      	movs	r1, #8
 8001fdc:	2009      	movs	r0, #9
 8001fde:	f7ff fe83 	bl	8001ce8 <ssd1306_Line>
	ssd1306_Line(10, 8, 10, 9, White);
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2309      	movs	r3, #9
 8001fe8:	220a      	movs	r2, #10
 8001fea:	2108      	movs	r1, #8
 8001fec:	200a      	movs	r0, #10
 8001fee:	f7ff fe7b 	bl	8001ce8 <ssd1306_Line>

	ssd1306_Line(12, 6, 12, 9, White);
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2309      	movs	r3, #9
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	2106      	movs	r1, #6
 8001ffc:	200c      	movs	r0, #12
 8001ffe:	f7ff fe73 	bl	8001ce8 <ssd1306_Line>
	ssd1306_Line(13, 6, 13, 9, White);
 8002002:	2301      	movs	r3, #1
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2309      	movs	r3, #9
 8002008:	220d      	movs	r2, #13
 800200a:	2106      	movs	r1, #6
 800200c:	200d      	movs	r0, #13
 800200e:	f7ff fe6b 	bl	8001ce8 <ssd1306_Line>

	ssd1306_Line(15, 4, 15, 9, White);
 8002012:	2301      	movs	r3, #1
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2309      	movs	r3, #9
 8002018:	220f      	movs	r2, #15
 800201a:	2104      	movs	r1, #4
 800201c:	200f      	movs	r0, #15
 800201e:	f7ff fe63 	bl	8001ce8 <ssd1306_Line>
	ssd1306_Line(16, 4, 16, 9, White);
 8002022:	2301      	movs	r3, #1
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2309      	movs	r3, #9
 8002028:	2210      	movs	r2, #16
 800202a:	2104      	movs	r1, #4
 800202c:	2010      	movs	r0, #16
 800202e:	f7ff fe5b 	bl	8001ce8 <ssd1306_Line>

	ssd1306_Line(18, 2, 18, 9, White);
 8002032:	2301      	movs	r3, #1
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2309      	movs	r3, #9
 8002038:	2212      	movs	r2, #18
 800203a:	2102      	movs	r1, #2
 800203c:	2012      	movs	r0, #18
 800203e:	f7ff fe53 	bl	8001ce8 <ssd1306_Line>
	ssd1306_Line(19, 2, 19, 9, White);
 8002042:	2301      	movs	r3, #1
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2309      	movs	r3, #9
 8002048:	2213      	movs	r2, #19
 800204a:	2102      	movs	r1, #2
 800204c:	2013      	movs	r0, #19
 800204e:	f7ff fe4b 	bl	8001ce8 <ssd1306_Line>
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <Grados>:

	ssd1306_Line(2, 9, 19, 0, White);
}

void Grados(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
	uint32_t i, j, b = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]

	for(i = 0; i < 10; i++)  // Itera sobre 10 filas
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e043      	b.n	80020f0 <Grados+0x98>
	{
	    b = degreesSymbol[i];
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <Grados+0xb8>)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	607b      	str	r3, [r7, #4]
	    for(j = 0; j < 7; j++)  // Itera sobre 7 columnas
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	e035      	b.n	80020e4 <Grados+0x8c>
	    {
	        if((b >> (6 - j)) & 0x01)  // Ajusta la máscara a 6
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f1c3 0306 	rsb	r3, r3, #6
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d014      	beq.n	80020b6 <Grados+0x5e>
	        {
	            ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), White);
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <Grados+0xbc>)
 800208e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002092:	b29a      	uxth	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4413      	add	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	b218      	sxth	r0, r3
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <Grados+0xbc>)
 80020a0:	885b      	ldrh	r3, [r3, #2]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2201      	movs	r2, #1
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7ff fcf6 	bl	8001aa0 <ssd1306_DrawPixel>
 80020b4:	e013      	b.n	80020de <Grados+0x86>
	        }
	        else
	        {
	            ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), Black);
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <Grados+0xbc>)
 80020b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b218      	sxth	r0, r3
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <Grados+0xbc>)
 80020ca:	885b      	ldrh	r3, [r3, #2]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2200      	movs	r2, #0
 80020d8:	4619      	mov	r1, r3
 80020da:	f7ff fce1 	bl	8001aa0 <ssd1306_DrawPixel>
	    for(j = 0; j < 7; j++)  // Itera sobre 7 columnas
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d9c6      	bls.n	8002078 <Grados+0x20>
	for(i = 0; i < 10; i++)  // Itera sobre 10 filas
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b09      	cmp	r3, #9
 80020f4:	d9b8      	bls.n	8002068 <Grados+0x10>
	        }
	    }
	}

	SSD1306.CurrentX += 7;
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <Grados+0xbc>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3307      	adds	r3, #7
 8002100:	b29b      	uxth	r3, r3
 8002102:	b21a      	sxth	r2, r3
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <Grados+0xbc>)
 8002106:	801a      	strh	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	080170d8 	.word	0x080170d8
 8002114:	2000072c 	.word	0x2000072c

08002118 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7fe f8ad 	bl	8000280 <strlen>
 8002126:	4603      	mov	r3, r0
 8002128:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e007      	b.n	8002140 <bufclr+0x28>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3301      	adds	r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	429a      	cmp	r2, r3
 8002146:	dbf3      	blt.n	8002130 <bufclr+0x18>
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b096      	sub	sp, #88	; 0x58
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800215e:	f000 f939 	bl	80023d4 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8002162:	4823      	ldr	r0, [pc, #140]	; (80021f0 <ESP_Init+0x9c>)
 8002164:	f000 fa02 	bl	800256c <Uart_sendstring>
	HAL_Delay(1000);
 8002168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800216c:	f003 f854 	bl	8005218 <HAL_Delay>

	Uart_flush();
 8002170:	f000 f978 	bl	8002464 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8002174:	481f      	ldr	r0, [pc, #124]	; (80021f4 <ESP_Init+0xa0>)
 8002176:	f000 f9f9 	bl	800256c <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 800217a:	bf00      	nop
 800217c:	481e      	ldr	r0, [pc, #120]	; (80021f8 <ESP_Init+0xa4>)
 800217e:	f000 fa25 	bl	80025cc <Wait_for>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f9      	beq.n	800217c <ESP_Init+0x28>

	Uart_flush();
 8002188:	f000 f96c 	bl	8002464 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 800218c:	481b      	ldr	r0, [pc, #108]	; (80021fc <ESP_Init+0xa8>)
 800218e:	f000 f9ed 	bl	800256c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8002192:	bf00      	nop
 8002194:	4818      	ldr	r0, [pc, #96]	; (80021f8 <ESP_Init+0xa4>)
 8002196:	f000 fa19 	bl	80025cc <Wait_for>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f9      	beq.n	8002194 <ESP_Init+0x40>

	Uart_flush();
 80021a0:	f000 f960 	bl	8002464 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80021a4:	f107 0008 	add.w	r0, r7, #8
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4914      	ldr	r1, [pc, #80]	; (8002200 <ESP_Init+0xac>)
 80021ae:	f012 fc5b 	bl	8014a68 <siprintf>
	Uart_sendstring(data);
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f9d8 	bl	800256c <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 80021bc:	bf00      	nop
 80021be:	4811      	ldr	r0, [pc, #68]	; (8002204 <ESP_Init+0xb0>)
 80021c0:	f000 fa04 	bl	80025cc <Wait_for>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f9      	beq.n	80021be <ESP_Init+0x6a>

	Uart_flush();
 80021ca:	f000 f94b 	bl	8002464 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 80021ce:	480e      	ldr	r0, [pc, #56]	; (8002208 <ESP_Init+0xb4>)
 80021d0:	f000 f9cc 	bl	800256c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80021d4:	bf00      	nop
 80021d6:	4808      	ldr	r0, [pc, #32]	; (80021f8 <ESP_Init+0xa4>)
 80021d8:	f000 f9f8 	bl	80025cc <Wait_for>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f9      	beq.n	80021d6 <ESP_Init+0x82>

	Uart_flush();
 80021e2:	f000 f93f 	bl	8002464 <Uart_flush>

}
 80021e6:	bf00      	nop
 80021e8:	3758      	adds	r7, #88	; 0x58
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	08016edc 	.word	0x08016edc
 80021f4:	08016ee8 	.word	0x08016ee8
 80021f8:	08016ef0 	.word	0x08016ef0
 80021fc:	08016ef8 	.word	0x08016ef8
 8002200:	08016f08 	.word	0x08016f08
 8002204:	08016f20 	.word	0x08016f20
 8002208:	08016f2c 	.word	0x08016f2c

0800220c <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, float value[])
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 8002212:	af02      	add	r7, sp, #8
 8002214:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002218:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800221c:	6018      	str	r0, [r3, #0]
 800221e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002222:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8002226:	6019      	str	r1, [r3, #0]
 8002228:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800222c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8002230:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8002232:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	3304      	adds	r3, #4
 8002240:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f012 fc8b 	bl	8014b62 <memset>
	char local_buf2[30] = {0};
 800224c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002250:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	3304      	adds	r3, #4
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	611a      	str	r2, [r3, #16]
 8002266:	615a      	str	r2, [r3, #20]
 8002268:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 800226a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800226e:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	3304      	adds	r3, #4
 8002278:	22c4      	movs	r2, #196	; 0xc4
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f012 fc70 	bl	8014b62 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8002282:	484b      	ldr	r0, [pc, #300]	; (80023b0 <ESP_Send_Multi+0x1a4>)
 8002284:	f000 f972 	bl	800256c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8002288:	bf00      	nop
 800228a:	484a      	ldr	r0, [pc, #296]	; (80023b4 <ESP_Send_Multi+0x1a8>)
 800228c:	f000 f99e 	bl	80025cc <Wait_for>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f9      	beq.n	800228a <ESP_Send_Multi+0x7e>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 8002296:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800229a:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800229e:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4944      	ldr	r1, [pc, #272]	; (80023b8 <ESP_Send_Multi+0x1ac>)
 80022a6:	f012 fbdf 	bl	8014a68 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80022b0:	e026      	b.n	8002300 <ESP_Send_Multi+0xf4>
	{
		sprintf(field_buf, "&field%d=%f",i+1, value[i]);
 80022b2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80022b6:	1c5c      	adds	r4, r3, #1
 80022b8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80022c2:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f943 	bl	8000558 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	f107 0014 	add.w	r0, r7, #20
 80022da:	e9cd 2300 	strd	r2, r3, [sp]
 80022de:	4622      	mov	r2, r4
 80022e0:	4936      	ldr	r1, [pc, #216]	; (80023bc <ESP_Send_Multi+0x1b0>)
 80022e2:	f012 fbc1 	bl	8014a68 <siprintf>
		strcat (local_buf, field_buf);
 80022e6:	f107 0214 	add.w	r2, r7, #20
 80022ea:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f012 fc3e 	bl	8014b72 <strcat>
	for (int i=0; i<numberoffileds; i++)
 80022f6:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80022fa:	3301      	adds	r3, #1
 80022fc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8002300:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002304:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8002308:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	dbcf      	blt.n	80022b2 <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 8002312:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002316:	4618      	mov	r0, r3
 8002318:	f7fd ffb2 	bl	8000280 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002324:	4413      	add	r3, r2
 8002326:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <ESP_Send_Multi+0x1b4>)
 8002328:	8811      	ldrh	r1, [r2, #0]
 800232a:	7892      	ldrb	r2, [r2, #2]
 800232c:	8019      	strh	r1, [r3, #0]
 800232e:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 8002330:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002334:	4618      	mov	r0, r3
 8002336:	f7fd ffa3 	bl	8000280 <strlen>
 800233a:	4603      	mov	r3, r0
 800233c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8002340:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002344:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 8002348:	491e      	ldr	r1, [pc, #120]	; (80023c4 <ESP_Send_Multi+0x1b8>)
 800234a:	4618      	mov	r0, r3
 800234c:	f012 fb8c 	bl	8014a68 <siprintf>
	Uart_sendstring(local_buf2);
 8002350:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f909 	bl	800256c <Uart_sendstring>
	while (!(Wait_for(">")));
 800235a:	bf00      	nop
 800235c:	481a      	ldr	r0, [pc, #104]	; (80023c8 <ESP_Send_Multi+0x1bc>)
 800235e:	f000 f935 	bl	80025cc <Wait_for>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f9      	beq.n	800235c <ESP_Send_Multi+0x150>

	Uart_sendstring (local_buf);
 8002368:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f8fd 	bl	800256c <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8002372:	bf00      	nop
 8002374:	4815      	ldr	r0, [pc, #84]	; (80023cc <ESP_Send_Multi+0x1c0>)
 8002376:	f000 f929 	bl	80025cc <Wait_for>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f9      	beq.n	8002374 <ESP_Send_Multi+0x168>

	while (!(Wait_for("CLOSED")));
 8002380:	bf00      	nop
 8002382:	4813      	ldr	r0, [pc, #76]	; (80023d0 <ESP_Send_Multi+0x1c4>)
 8002384:	f000 f922 	bl	80025cc <Wait_for>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f9      	beq.n	8002382 <ESP_Send_Multi+0x176>

	bufclr(local_buf);
 800238e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fec0 	bl	8002118 <bufclr>
	bufclr(local_buf2);
 8002398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff febb 	bl	8002118 <bufclr>

	Ringbuf_init();
 80023a2:	f000 f817 	bl	80023d4 <Ringbuf_init>

}
 80023a6:	bf00      	nop
 80023a8:	f507 773f 	add.w	r7, r7, #764	; 0x2fc
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}
 80023b0:	08016f3c 	.word	0x08016f3c
 80023b4:	08016ef0 	.word	0x08016ef0
 80023b8:	08016fb4 	.word	0x08016fb4
 80023bc:	08016fcc 	.word	0x08016fcc
 80023c0:	08016fd8 	.word	0x08016fd8
 80023c4:	08016f8c 	.word	0x08016f8c
 80023c8:	08016f9c 	.word	0x08016f9c
 80023cc:	08016fa0 	.word	0x08016fa0
 80023d0:	08016fac 	.word	0x08016fac

080023d4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <Ringbuf_init+0x3c>)
 80023da:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <Ringbuf_init+0x40>)
 80023dc:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <Ringbuf_init+0x44>)
 80023e0:	4a0e      	ldr	r2, [pc, #56]	; (800241c <Ringbuf_init+0x48>)
 80023e2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <Ringbuf_init+0x4c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <Ringbuf_init+0x4c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <Ringbuf_init+0x4c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <Ringbuf_init+0x4c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0220 	orr.w	r2, r2, #32
 8002402:	60da      	str	r2, [r3, #12]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	200007c4 	.word	0x200007c4
 8002414:	20000734 	.word	0x20000734
 8002418:	200007c8 	.word	0x200007c8
 800241c:	2000077c 	.word	0x2000077c
 8002420:	20000de4 	.word	0x20000de4

08002424 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	3301      	adds	r3, #1
 8002436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800243a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	429a      	cmp	r2, r3
 8002444:	d007      	beq.n	8002456 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	79f9      	ldrb	r1, [r7, #7]
 800244e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <Uart_flush>:

void Uart_flush (void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <Uart_flush+0x1c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <Uart_flush+0x1c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	200007c4 	.word	0x200007c4

08002484 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <Uart_read+0x4c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <Uart_read+0x4c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	429a      	cmp	r2, r3
 8002498:	d102      	bne.n	80024a0 <Uart_read+0x1c>
  {
    return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e010      	b.n	80024c2 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <Uart_read+0x4c>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <Uart_read+0x4c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <Uart_read+0x4c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <Uart_read+0x4c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80024c0:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	200007c4 	.word	0x200007c4

080024d4 <Uart_write>:

void Uart_write(int c)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db21      	blt.n	8002526 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <Uart_write+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ee:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80024f0:	bf00      	nop
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <Uart_write+0x60>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d0f9      	beq.n	80024f2 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <Uart_write+0x60>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <Uart_write+0x60>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	b2c9      	uxtb	r1, r1
 800250c:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <Uart_write+0x60>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <Uart_write+0x64>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <Uart_write+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002524:	60da      	str	r2, [r3, #12]
	}
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200007c8 	.word	0x200007c8
 8002538:	20000de4 	.word	0x20000de4

0800253c <IsDataAvailable>:

int IsDataAvailable(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <IsDataAvailable+0x2c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <IsDataAvailable+0x2c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	b29b      	uxth	r3, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	3340      	adds	r3, #64	; 0x40
 8002556:	b29b      	uxth	r3, r3
 8002558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	200007c4 	.word	0x200007c4

0800256c <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8002574:	e006      	b.n	8002584 <Uart_sendstring+0x18>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ffa8 	bl	80024d4 <Uart_write>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f4      	bne.n	8002576 <Uart_sendstring+0xa>
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <Uart_peek+0x30>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <Uart_peek+0x30>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d102      	bne.n	80025b2 <Uart_peek+0x1a>
  {
    return -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
 80025b0:	e005      	b.n	80025be <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <Uart_peek+0x30>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <Uart_peek+0x30>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	200007c4 	.word	0x200007c4

080025cc <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fd fe51 	bl	8000280 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80025e2:	bf00      	nop
 80025e4:	f7ff ffaa 	bl	800253c <IsDataAvailable>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0fa      	beq.n	80025e4 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 80025ee:	f7ff ffd3 	bl	8002598 <Uart_peek>
 80025f2:	4601      	mov	r1, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4299      	cmp	r1, r3
 80025fe:	d01a      	beq.n	8002636 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <Wait_for+0xa4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <Wait_for+0xa4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8002612:	e7e6      	b.n	80025e2 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3301      	adds	r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800261a:	f7ff ff33 	bl	8002484 <Uart_read>
		if (so_far == len) return 1;
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	d101      	bne.n	800262a <Wait_for+0x5e>
 8002626:	2301      	movs	r3, #1
 8002628:	e01d      	b.n	8002666 <Wait_for+0x9a>
		while (!IsDataAvailable());
 800262a:	bf00      	nop
 800262c:	f7ff ff86 	bl	800253c <IsDataAvailable>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0fa      	beq.n	800262c <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8002636:	f7ff ffaf 	bl	8002598 <Uart_peek>
 800263a:	4601      	mov	r1, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4299      	cmp	r1, r3
 8002646:	d0e5      	beq.n	8002614 <Wait_for+0x48>
	}

	if (so_far != len)
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	d002      	beq.n	8002656 <Wait_for+0x8a>
	{
		so_far = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
		goto again;
 8002654:	e7c5      	b.n	80025e2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	d101      	bne.n	8002662 <Wait_for+0x96>
 800265e:	2301      	movs	r3, #1
 8002660:	e001      	b.n	8002666 <Wait_for+0x9a>
	else return -1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200007c4 	.word	0x200007c4

08002674 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d013      	beq.n	80026be <Uart_isr+0x4a>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00e      	beq.n	80026be <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <Uart_isr+0xac>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff feb4 	bl	8002424 <store_char>
        return;
 80026bc:	e02c      	b.n	8002718 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d027      	beq.n	8002718 <Uart_isr+0xa4>
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d022      	beq.n	8002718 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <Uart_isr+0xb0>)
 80026d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <Uart_isr+0xb0>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	429a      	cmp	r2, r3
 80026dc:	d108      	bne.n	80026f0 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ec:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80026ee:	e012      	b.n	8002716 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <Uart_isr+0xb0>)
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <Uart_isr+0xb0>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <Uart_isr+0xb0>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	3301      	adds	r3, #1
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <Uart_isr+0xb0>)
 8002706:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	7bba      	ldrb	r2, [r7, #14]
 8002714:	605a      	str	r2, [r3, #4]
    	return;
 8002716:	bf00      	nop
    }
}
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200007c4 	.word	0x200007c4
 8002724:	2000077c 	.word	0x2000077c

08002728 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <BH1750_Init+0x34>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8002736:	f000 f813 	bl	8002760 <BH1750_Reset>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8002740:	2045      	movs	r0, #69	; 0x45
 8002742:	f000 f859 	bl	80027f8 <BH1750_SetMtreg>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <BH1750_Init+0x28>
			return BH1750_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	e000      	b.n	8002752 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8002750:	2301      	movs	r3, #1
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200007cc 	.word	0x200007cc

08002760 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8002766:	2307      	movs	r3, #7
 8002768:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <BH1750_Reset+0x30>)
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	1dfa      	adds	r2, r7, #7
 8002770:	230a      	movs	r3, #10
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2301      	movs	r3, #1
 8002776:	2146      	movs	r1, #70	; 0x46
 8002778:	f004 f95c 	bl	8006a34 <HAL_I2C_Master_Transmit>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <BH1750_Reset+0x26>
	//if(HAL_OK == HAL_I2C_Master_Transmit_DMA(bh1750_i2c, BH1750_ADDRESS, &tmp, 1))
		return BH1750_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200007cc 	.word	0x200007cc

08002794 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_MODE Mode)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af02      	add	r7, sp, #8
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <BH1750_SetMode+0x22>
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <BH1750_SetMode+0x22>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e018      	b.n	80027e8 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <BH1750_SetMode+0x30>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e011      	b.n	80027e8 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <BH1750_SetMode+0x5c>)
 80027c8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <BH1750_SetMode+0x60>)
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	1dfa      	adds	r2, r7, #7
 80027d0:	230a      	movs	r3, #10
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	2146      	movs	r1, #70	; 0x46
 80027d8:	f004 f92c 	bl	8006a34 <HAL_I2C_Master_Transmit>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <BH1750_SetMode+0x52>
		return BH1750_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200007d0 	.word	0x200007d0
 80027f4:	200007cc 	.word	0x200007cc

080027f8 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b1e      	cmp	r3, #30
 8002806:	d902      	bls.n	800280e <BH1750_SetMtreg+0x16>
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d101      	bne.n	8002812 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e037      	b.n	8002882 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <BH1750_SetMtreg+0x94>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002822:	b2db      	uxtb	r3, r3
 8002824:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	b25b      	sxtb	r3, r3
 8002830:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002834:	b25b      	sxtb	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <BH1750_SetMtreg+0x98>)
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	f107 020c 	add.w	r2, r7, #12
 8002842:	230a      	movs	r3, #10
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2301      	movs	r3, #1
 8002848:	2146      	movs	r1, #70	; 0x46
 800284a:	f004 f8f3 	bl	8006a34 <HAL_I2C_Master_Transmit>
 800284e:	4603      	mov	r3, r0
 8002850:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e012      	b.n	8002882 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <BH1750_SetMtreg+0x98>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	230a      	movs	r3, #10
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2301      	movs	r3, #1
 800286c:	2146      	movs	r1, #70	; 0x46
 800286e:	f004 f8e1 	bl	8006a34 <HAL_I2C_Master_Transmit>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200007d1 	.word	0x200007d1
 8002890:	200007cc 	.word	0x200007cc

08002894 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	//if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
	if(HAL_OK == HAL_I2C_Master_Receive_DMA(bh1750_i2c, BH1750_ADDRESS, tmp, 2))
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <BH1750_ReadLight+0x9c>)
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	f107 0208 	add.w	r2, r7, #8
 80028a4:	2302      	movs	r3, #2
 80028a6:	2146      	movs	r1, #70	; 0x46
 80028a8:	f004 f9c2 	bl	8006c30 <HAL_I2C_Master_Receive_DMA>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d138      	bne.n	8002924 <BH1750_ReadLight+0x90>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80028b2:	7a3b      	ldrb	r3, [r7, #8]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	7a7a      	ldrb	r2, [r7, #9]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c2:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <BH1750_ReadLight+0xa0>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b45      	cmp	r3, #69	; 0x45
 80028cc:	d00f      	beq.n	80028ee <BH1750_ReadLight+0x5a>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80028ce:	4b19      	ldr	r3, [pc, #100]	; (8002934 <BH1750_ReadLight+0xa0>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028da:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002938 <BH1750_ReadLight+0xa4>
 80028de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <BH1750_ReadLight+0xa8>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b21      	cmp	r3, #33	; 0x21
 80028f4:	d003      	beq.n	80028fe <BH1750_ReadLight+0x6a>
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <BH1750_ReadLight+0xa8>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b11      	cmp	r3, #17
 80028fc:	d107      	bne.n	800290e <BH1750_ReadLight+0x7a>
		{
			result /= 2.0;
 80028fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002902:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800290a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800290e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002912:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002940 <BH1750_ReadLight+0xac>
 8002916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <BH1750_ReadLight+0x92>
	}
	return BH1750_ERROR;
 8002924:	2301      	movs	r3, #1
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200007cc 	.word	0x200007cc
 8002934:	200007d1 	.word	0x200007d1
 8002938:	428a0000 	.word	0x428a0000
 800293c:	200007d0 	.word	0x200007d0
 8002940:	3f99999a 	.word	0x3f99999a

08002944 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	2319      	movs	r3, #25
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	463b      	mov	r3, r7
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	2288      	movs	r2, #136	; 0x88
 800295c:	21ec      	movs	r1, #236	; 0xec
 800295e:	483a      	ldr	r0, [pc, #232]	; (8002a48 <TrimRead+0x104>)
 8002960:	f004 fb90 	bl	8007084 <HAL_I2C_Mem_Read>

	//	// Read NVM from 0xE1 to 0xE7
	//	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	b21a      	sxth	r2, r3
 800296a:	783b      	ldrb	r3, [r7, #0]
 800296c:	b21b      	sxth	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b21b      	sxth	r3, r3
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <TrimRead+0x108>)
 8002976:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21a      	sxth	r2, r3
 800297e:	78bb      	ldrb	r3, [r7, #2]
 8002980:	b21b      	sxth	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	b21a      	sxth	r2, r3
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <TrimRead+0x10c>)
 8002988:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800298a:	797b      	ldrb	r3, [r7, #5]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	b21a      	sxth	r2, r3
 8002990:	793b      	ldrb	r3, [r7, #4]
 8002992:	b21b      	sxth	r3, r3
 8002994:	4313      	orrs	r3, r2
 8002996:	b21a      	sxth	r2, r3
 8002998:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <TrimRead+0x110>)
 800299a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	797b      	ldrb	r3, [r7, #5]
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <TrimRead+0x114>)
 80029ae:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80029b0:	7a7b      	ldrb	r3, [r7, #9]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	79bb      	ldrb	r3, [r7, #6]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b21a      	sxth	r2, r3
 80029be:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <TrimRead+0x118>)
 80029c0:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	b21a      	sxth	r2, r3
 80029c8:	7abb      	ldrb	r3, [r7, #10]
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <TrimRead+0x11c>)
 80029d2:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80029d4:	7b7b      	ldrb	r3, [r7, #13]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b21a      	sxth	r2, r3
 80029da:	7b3b      	ldrb	r3, [r7, #12]
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <TrimRead+0x120>)
 80029e4:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b21a      	sxth	r2, r3
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <TrimRead+0x124>)
 80029f6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80029f8:	7c7b      	ldrb	r3, [r7, #17]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	b21a      	sxth	r2, r3
 80029fe:	7c3b      	ldrb	r3, [r7, #16]
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <TrimRead+0x128>)
 8002a08:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	b21a      	sxth	r2, r3
 8002a10:	7cbb      	ldrb	r3, [r7, #18]
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <TrimRead+0x12c>)
 8002a1a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8002a1c:	7d7b      	ldrb	r3, [r7, #21]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	b21a      	sxth	r2, r3
 8002a22:	7d3b      	ldrb	r3, [r7, #20]
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	4313      	orrs	r3, r2
 8002a28:	b21a      	sxth	r2, r3
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <TrimRead+0x130>)
 8002a2c:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	b21a      	sxth	r2, r3
 8002a34:	7dbb      	ldrb	r3, [r7, #22]
 8002a36:	b21b      	sxth	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <TrimRead+0x134>)
 8002a3e:	801a      	strh	r2, [r3, #0]
	//	dig_H2 = (trimdata[26]<<8) | trimdata[25];
	//	dig_H3 = (trimdata[27]);
	//	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
	//	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
	//	dig_H6 = (trimdata[31]);
}
 8002a40:	bf00      	nop
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000bd8 	.word	0x20000bd8
 8002a4c:	200007e8 	.word	0x200007e8
 8002a50:	200007f0 	.word	0x200007f0
 8002a54:	200007f2 	.word	0x200007f2
 8002a58:	200007ea 	.word	0x200007ea
 8002a5c:	200007f4 	.word	0x200007f4
 8002a60:	200007f6 	.word	0x200007f6
 8002a64:	200007f8 	.word	0x200007f8
 8002a68:	200007fa 	.word	0x200007fa
 8002a6c:	200007fc 	.word	0x200007fc
 8002a70:	200007fe 	.word	0x200007fe
 8002a74:	20000800 	.word	0x20000800
 8002a78:	20000802 	.word	0x20000802

08002a7c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af04      	add	r7, sp, #16
 8002a82:	4604      	mov	r4, r0
 8002a84:	4608      	mov	r0, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71bb      	strb	r3, [r7, #6]
 8002a92:	460b      	mov	r3, r1
 8002a94:	717b      	strb	r3, [r7, #5]
 8002a96:	4613      	mov	r3, r2
 8002a98:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8002a9a:	f7ff ff53 	bl	8002944 <TrimRead>


	uint8_t datatowrite = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8002aa6:	23b6      	movs	r3, #182	; 0xb6
 8002aa8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	f107 030f 	add.w	r3, r7, #15
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2301      	movs	r3, #1
 8002abc:	22e0      	movs	r2, #224	; 0xe0
 8002abe:	21ec      	movs	r1, #236	; 0xec
 8002ac0:	4841      	ldr	r0, [pc, #260]	; (8002bc8 <BME280_Config+0x14c>)
 8002ac2:	f004 f9e5 	bl	8006e90 <HAL_I2C_Mem_Write>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <BME280_Config+0x56>
	{
		return -1;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad0:	e075      	b.n	8002bbe <BME280_Config+0x142>
	}

	HAL_Delay (100);
 8002ad2:	2064      	movs	r0, #100	; 0x64
 8002ad4:	f002 fba0 	bl	8005218 <HAL_Delay>
		return -1;
	}
	*/ //BMP280 no sensa humedad

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8002ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002adc:	015b      	lsls	r3, r3, #5
 8002ade:	b25a      	sxtb	r2, r3
 8002ae0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af4:	9302      	str	r3, [sp, #8]
 8002af6:	2301      	movs	r3, #1
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	f107 030f 	add.w	r3, r7, #15
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2301      	movs	r3, #1
 8002b02:	22f5      	movs	r2, #245	; 0xf5
 8002b04:	21ec      	movs	r1, #236	; 0xec
 8002b06:	4830      	ldr	r0, [pc, #192]	; (8002bc8 <BME280_Config+0x14c>)
 8002b08:	f004 f9c2 	bl	8006e90 <HAL_I2C_Mem_Write>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <BME280_Config+0x9c>
	{
		return -1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	e052      	b.n	8002bbe <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8002b18:	2064      	movs	r0, #100	; 0x64
 8002b1a:	f002 fb7d 	bl	8005218 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8002b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	2301      	movs	r3, #1
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	f107 030e 	add.w	r3, r7, #14
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	22f5      	movs	r2, #245	; 0xf5
 8002b32:	21ec      	movs	r1, #236	; 0xec
 8002b34:	4824      	ldr	r0, [pc, #144]	; (8002bc8 <BME280_Config+0x14c>)
 8002b36:	f004 faa5 	bl	8007084 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8002b3a:	7bba      	ldrb	r2, [r7, #14]
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d002      	beq.n	8002b48 <BME280_Config+0xcc>
	{
		return -1;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	e03a      	b.n	8002bbe <BME280_Config+0x142>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	015b      	lsls	r3, r3, #5
 8002b4c:	b25a      	sxtb	r2, r3
 8002b4e:	79bb      	ldrb	r3, [r7, #6]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	b25b      	sxtb	r3, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b25a      	sxtb	r2, r3
 8002b58:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8002b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b68:	9302      	str	r3, [sp, #8]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	f107 030f 	add.w	r3, r7, #15
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2301      	movs	r3, #1
 8002b76:	22f4      	movs	r2, #244	; 0xf4
 8002b78:	21ec      	movs	r1, #236	; 0xec
 8002b7a:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <BME280_Config+0x14c>)
 8002b7c:	f004 f988 	bl	8006e90 <HAL_I2C_Mem_Write>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BME280_Config+0x110>
	{
		return -1;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	e018      	b.n	8002bbe <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8002b8c:	2064      	movs	r0, #100	; 0x64
 8002b8e:	f002 fb43 	bl	8005218 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8002b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	f107 030e 	add.w	r3, r7, #14
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	22f4      	movs	r2, #244	; 0xf4
 8002ba6:	21ec      	movs	r1, #236	; 0xec
 8002ba8:	4807      	ldr	r0, [pc, #28]	; (8002bc8 <BME280_Config+0x14c>)
 8002baa:	f004 fa6b 	bl	8007084 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8002bae:	7bba      	ldrb	r2, [r7, #14]
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d002      	beq.n	8002bbc <BME280_Config+0x140>
	{
		return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	e000      	b.n	8002bbe <BME280_Config+0x142>
	}

	return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd90      	pop	{r4, r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000bd8 	.word	0x20000bd8

08002bcc <BMEReadRaw>:


int BMEReadRaw(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af02      	add	r7, sp, #8
	 * Si trato de leer el chip ID de alguna forma no bloqueante (IT, DMA, ...) no lee bien
	 * despues los datos, no se porque. Entonces hardcodeo que estoy comunicandome bien con el
	 * chip para poder levantar los datos crudos y anda bien.
	 */

	chipID = 0x58;
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <BMEReadRaw+0x38>)
 8002bd4:	2258      	movs	r2, #88	; 0x58
 8002bd6:	701a      	strb	r2, [r3, #0]
	if (chipID == 0x58) // original era 0x60 pero en BMP280 es 0x58
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <BMEReadRaw+0x38>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b58      	cmp	r3, #88	; 0x58
 8002bde:	d10b      	bne.n	8002bf8 <BMEReadRaw+0x2c>
	{
		// Read the Registers 0xF7 to 0xFE
		//HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
		//MemRxCallback_Function= READ_RAW_DATA;
		HAL_I2C_Mem_Read_IT(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8);
 8002be0:	2308      	movs	r3, #8
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <BMEReadRaw+0x3c>)
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2301      	movs	r3, #1
 8002bea:	22f7      	movs	r2, #247	; 0xf7
 8002bec:	21ec      	movs	r1, #236	; 0xec
 8002bee:	4807      	ldr	r0, [pc, #28]	; (8002c0c <BMEReadRaw+0x40>)
 8002bf0:	f004 fc6e 	bl	80074d0 <HAL_I2C_Mem_Read_IT>
		 *//*
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
		hRaw = (RawData[6]<<8)|(RawData[7]);
*/
		return 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e001      	b.n	8002bfc <BMEReadRaw+0x30>
	}

	else return -1;
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200007d2 	.word	0x200007d2
 8002c08:	200007e0 	.word	0x200007e0
 8002c0c:	20000bd8 	.word	0x20000bd8

08002c10 <BMP280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
//BMP280_S32_t t_fine;
BMP280_S32_t BMP280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	10da      	asrs	r2, r3, #3
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <BMP280_compensate_T_int32+0x74>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <BMP280_compensate_T_int32+0x78>)
 8002c26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	12db      	asrs	r3, r3, #11
 8002c30:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	111b      	asrs	r3, r3, #4
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <BMP280_compensate_T_int32+0x74>)
 8002c38:	8812      	ldrh	r2, [r2, #0]
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	1112      	asrs	r2, r2, #4
 8002c40:	4910      	ldr	r1, [pc, #64]	; (8002c84 <BMP280_compensate_T_int32+0x74>)
 8002c42:	8809      	ldrh	r1, [r1, #0]
 8002c44:	1a52      	subs	r2, r2, r1
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	131b      	asrs	r3, r3, #12
 8002c4c:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <BMP280_compensate_T_int32+0x7c>)
 8002c4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	139b      	asrs	r3, r3, #14
 8002c58:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <BMP280_compensate_T_int32+0x80>)
 8002c62:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <BMP280_compensate_T_int32+0x80>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3380      	adds	r3, #128	; 0x80
 8002c70:	121b      	asrs	r3, r3, #8
 8002c72:	60fb      	str	r3, [r7, #12]
	return T;
 8002c74:	68fb      	ldr	r3, [r7, #12]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	200007e8 	.word	0x200007e8
 8002c88:	200007f0 	.word	0x200007f0
 8002c8c:	200007f2 	.word	0x200007f2
 8002c90:	2000080c 	.word	0x2000080c

08002c94 <BMP280_compensate_P_int64>:
}

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t BMP280_compensate_P_int64(BMP280_S32_t adc_P)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b0ca      	sub	sp, #296	; 0x128
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 8002ca0:	4baf      	ldr	r3, [pc, #700]	; (8002f60 <BMP280_compensate_P_int64+0x2cc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	17da      	asrs	r2, r3, #31
 8002ca6:	461c      	mov	r4, r3
 8002ca8:	4615      	mov	r5, r2
 8002caa:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8002cae:	f145 3bff 	adc.w	fp, r5, #4294967295
 8002cb2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 8002cb6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002cba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cbe:	fb03 f102 	mul.w	r1, r3, r2
 8002cc2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002cc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	18ca      	adds	r2, r1, r3
 8002cd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cd4:	fba3 8903 	umull	r8, r9, r3, r3
 8002cd8:	eb02 0309 	add.w	r3, r2, r9
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4ba1      	ldr	r3, [pc, #644]	; (8002f64 <BMP280_compensate_P_int64+0x2d0>)
 8002ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	17da      	asrs	r2, r3, #31
 8002ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cf0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	fb03 f209 	mul.w	r2, r3, r9
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	fb08 f303 	mul.w	r3, r8, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	4602      	mov	r2, r0
 8002d04:	fba8 1202 	umull	r1, r2, r8, r2
 8002d08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d0c:	460a      	mov	r2, r1
 8002d0e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d16:	4413      	add	r3, r2
 8002d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d1c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8002d20:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8002d24:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 8002d28:	4b8f      	ldr	r3, [pc, #572]	; (8002f68 <BMP280_compensate_P_int64+0x2d4>)
 8002d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	17da      	asrs	r2, r3, #31
 8002d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d36:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002d3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d3e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8002d42:	462a      	mov	r2, r5
 8002d44:	fb02 f203 	mul.w	r2, r2, r3
 8002d48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	441a      	add	r2, r3
 8002d54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d58:	4621      	mov	r1, r4
 8002d5a:	fba3 1301 	umull	r1, r3, r3, r1
 8002d5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d62:	460b      	mov	r3, r1
 8002d64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8002d7e:	462b      	mov	r3, r5
 8002d80:	0459      	lsls	r1, r3, #17
 8002d82:	4623      	mov	r3, r4
 8002d84:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002d88:	4623      	mov	r3, r4
 8002d8a:	0458      	lsls	r0, r3, #17
 8002d8c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002d90:	1814      	adds	r4, r2, r0
 8002d92:	643c      	str	r4, [r7, #64]	; 0x40
 8002d94:	414b      	adcs	r3, r1
 8002d96:	647b      	str	r3, [r7, #68]	; 0x44
 8002d98:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d9c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 8002da0:	4b72      	ldr	r3, [pc, #456]	; (8002f6c <BMP280_compensate_P_int64+0x2d8>)
 8002da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	17da      	asrs	r2, r3, #31
 8002daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dae:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dbe:	00d9      	lsls	r1, r3, #3
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002dc6:	1814      	adds	r4, r2, r0
 8002dc8:	63bc      	str	r4, [r7, #56]	; 0x38
 8002dca:	414b      	adcs	r3, r1
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002dd2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 8002dd6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002dda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002dde:	fb03 f102 	mul.w	r1, r3, r2
 8002de2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002de6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	18ca      	adds	r2, r1, r3
 8002df0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002df4:	fba3 1303 	umull	r1, r3, r3, r3
 8002df8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e06:	18d3      	adds	r3, r2, r3
 8002e08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002e0c:	4b58      	ldr	r3, [pc, #352]	; (8002f70 <BMP280_compensate_P_int64+0x2dc>)
 8002e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e12:	b21b      	sxth	r3, r3
 8002e14:	17da      	asrs	r2, r3, #31
 8002e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e1e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8002e22:	462b      	mov	r3, r5
 8002e24:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e28:	4642      	mov	r2, r8
 8002e2a:	fb02 f203 	mul.w	r2, r2, r3
 8002e2e:	464b      	mov	r3, r9
 8002e30:	4621      	mov	r1, r4
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	fba2 1201 	umull	r1, r2, r2, r1
 8002e40:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002e44:	460a      	mov	r2, r1
 8002e46:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8002e4a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002e4e:	4413      	add	r3, r2
 8002e50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8002e60:	4623      	mov	r3, r4
 8002e62:	0a18      	lsrs	r0, r3, #8
 8002e64:	462b      	mov	r3, r5
 8002e66:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002e6a:	462b      	mov	r3, r5
 8002e6c:	1219      	asrs	r1, r3, #8
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <BMP280_compensate_P_int64+0x2e0>)
 8002e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e74:	b21b      	sxth	r3, r3
 8002e76:	17da      	asrs	r2, r3, #31
 8002e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e7c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e84:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8002e88:	464a      	mov	r2, r9
 8002e8a:	fb02 f203 	mul.w	r2, r2, r3
 8002e8e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e92:	4644      	mov	r4, r8
 8002e94:	fb04 f303 	mul.w	r3, r4, r3
 8002e98:	441a      	add	r2, r3
 8002e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e9e:	4644      	mov	r4, r8
 8002ea0:	fba3 4304 	umull	r4, r3, r3, r4
 8002ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ea8:	4623      	mov	r3, r4
 8002eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002eae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002eb2:	18d3      	adds	r3, r2, r3
 8002eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002ec4:	464c      	mov	r4, r9
 8002ec6:	0323      	lsls	r3, r4, #12
 8002ec8:	4644      	mov	r4, r8
 8002eca:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002ece:	4644      	mov	r4, r8
 8002ed0:	0322      	lsls	r2, r4, #12
 8002ed2:	1884      	adds	r4, r0, r2
 8002ed4:	633c      	str	r4, [r7, #48]	; 0x30
 8002ed6:	eb41 0303 	adc.w	r3, r1, r3
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
 8002edc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002ee0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8002ee4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002ee8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002eec:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002ef0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <BMP280_compensate_P_int64+0x2e4>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f04:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f08:	462b      	mov	r3, r5
 8002f0a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f0e:	4642      	mov	r2, r8
 8002f10:	fb02 f203 	mul.w	r2, r2, r3
 8002f14:	464b      	mov	r3, r9
 8002f16:	4621      	mov	r1, r4
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4622      	mov	r2, r4
 8002f20:	4641      	mov	r1, r8
 8002f22:	fba2 1201 	umull	r1, r2, r2, r1
 8002f26:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002f30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f34:	4413      	add	r3, r2
 8002f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002f46:	4629      	mov	r1, r5
 8002f48:	104a      	asrs	r2, r1, #1
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	17cb      	asrs	r3, r1, #31
 8002f4e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 8002f52:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002f56:	4313      	orrs	r3, r2
 8002f58:	d110      	bne.n	8002f7c <BMP280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e154      	b.n	8003208 <BMP280_compensate_P_int64+0x574>
 8002f5e:	bf00      	nop
 8002f60:	2000080c 	.word	0x2000080c
 8002f64:	200007fc 	.word	0x200007fc
 8002f68:	200007fa 	.word	0x200007fa
 8002f6c:	200007f8 	.word	0x200007f8
 8002f70:	200007f6 	.word	0x200007f6
 8002f74:	200007f4 	.word	0x200007f4
 8002f78:	200007ea 	.word	0x200007ea

	p = 1048576-adc_P;
 8002f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f80:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002f84:	17da      	asrs	r2, r3, #31
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f8a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002f8e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8002f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f96:	105b      	asrs	r3, r3, #1
 8002f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fa0:	07db      	lsls	r3, r3, #31
 8002fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fa6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002faa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002fae:	4621      	mov	r1, r4
 8002fb0:	1a89      	subs	r1, r1, r2
 8002fb2:	67b9      	str	r1, [r7, #120]	; 0x78
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	eb61 0303 	sbc.w	r3, r1, r3
 8002fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fbc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	1891      	adds	r1, r2, r2
 8002fc6:	6239      	str	r1, [r7, #32]
 8002fc8:	415b      	adcs	r3, r3
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	1851      	adds	r1, r2, r1
 8002fd4:	61b9      	str	r1, [r7, #24]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	414b      	adcs	r3, r1
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002fe8:	4649      	mov	r1, r9
 8002fea:	018b      	lsls	r3, r1, #6
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	018a      	lsls	r2, r1, #6
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	1889      	adds	r1, r1, r2
 8002ffa:	6139      	str	r1, [r7, #16]
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	eb43 0101 	adc.w	r1, r3, r1
 8003002:	6179      	str	r1, [r7, #20]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003010:	4649      	mov	r1, r9
 8003012:	008b      	lsls	r3, r1, #2
 8003014:	4641      	mov	r1, r8
 8003016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301a:	4641      	mov	r1, r8
 800301c:	008a      	lsls	r2, r1, #2
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	4603      	mov	r3, r0
 8003024:	4622      	mov	r2, r4
 8003026:	189b      	adds	r3, r3, r2
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	460b      	mov	r3, r1
 800302c:	462a      	mov	r2, r5
 800302e:	eb42 0303 	adc.w	r3, r2, r3
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003040:	4649      	mov	r1, r9
 8003042:	008b      	lsls	r3, r1, #2
 8003044:	4641      	mov	r1, r8
 8003046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800304a:	4641      	mov	r1, r8
 800304c:	008a      	lsls	r2, r1, #2
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	4603      	mov	r3, r0
 8003054:	4622      	mov	r2, r4
 8003056:	189b      	adds	r3, r3, r2
 8003058:	673b      	str	r3, [r7, #112]	; 0x70
 800305a:	462b      	mov	r3, r5
 800305c:	460a      	mov	r2, r1
 800305e:	eb42 0303 	adc.w	r3, r2, r3
 8003062:	677b      	str	r3, [r7, #116]	; 0x74
 8003064:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003068:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800306c:	f7fd fdf4 	bl	8000c58 <__aeabi_ldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8003078:	4b66      	ldr	r3, [pc, #408]	; (8003214 <BMP280_compensate_P_int64+0x580>)
 800307a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307e:	b21b      	sxth	r3, r3
 8003080:	17da      	asrs	r2, r3, #31
 8003082:	66bb      	str	r3, [r7, #104]	; 0x68
 8003084:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003086:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800308a:	f04f 0000 	mov.w	r0, #0
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	0b50      	lsrs	r0, r2, #13
 8003094:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003098:	1359      	asrs	r1, r3, #13
 800309a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800309e:	462b      	mov	r3, r5
 80030a0:	fb00 f203 	mul.w	r2, r0, r3
 80030a4:	4623      	mov	r3, r4
 80030a6:	fb03 f301 	mul.w	r3, r3, r1
 80030aa:	4413      	add	r3, r2
 80030ac:	4622      	mov	r2, r4
 80030ae:	fba2 1200 	umull	r1, r2, r2, r0
 80030b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030b6:	460a      	mov	r2, r1
 80030b8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80030bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80030c0:	4413      	add	r3, r2
 80030c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80030c6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	0b50      	lsrs	r0, r2, #13
 80030d4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80030d8:	1359      	asrs	r1, r3, #13
 80030da:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80030de:	462b      	mov	r3, r5
 80030e0:	fb00 f203 	mul.w	r2, r0, r3
 80030e4:	4623      	mov	r3, r4
 80030e6:	fb03 f301 	mul.w	r3, r3, r1
 80030ea:	4413      	add	r3, r2
 80030ec:	4622      	mov	r2, r4
 80030ee:	fba2 1200 	umull	r1, r2, r2, r0
 80030f2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030f6:	460a      	mov	r2, r1
 80030f8:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80030fc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003100:	4413      	add	r3, r2
 8003102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003112:	4621      	mov	r1, r4
 8003114:	0e4a      	lsrs	r2, r1, #25
 8003116:	4629      	mov	r1, r5
 8003118:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800311c:	4629      	mov	r1, r5
 800311e:	164b      	asrs	r3, r1, #25
 8003120:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 8003124:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <BMP280_compensate_P_int64+0x584>)
 8003126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312a:	b21b      	sxth	r3, r3
 800312c:	17da      	asrs	r2, r3, #31
 800312e:	663b      	str	r3, [r7, #96]	; 0x60
 8003130:	667a      	str	r2, [r7, #100]	; 0x64
 8003132:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003136:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800313a:	462a      	mov	r2, r5
 800313c:	fb02 f203 	mul.w	r2, r2, r3
 8003140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003144:	4621      	mov	r1, r4
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003150:	4621      	mov	r1, r4
 8003152:	fba2 1201 	umull	r1, r2, r2, r1
 8003156:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800315a:	460a      	mov	r2, r1
 800315c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8003160:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003164:	4413      	add	r3, r2
 8003166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8003176:	4621      	mov	r1, r4
 8003178:	0cca      	lsrs	r2, r1, #19
 800317a:	4629      	mov	r1, r5
 800317c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003180:	4629      	mov	r1, r5
 8003182:	14cb      	asrs	r3, r1, #19
 8003184:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 8003188:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800318c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003190:	1884      	adds	r4, r0, r2
 8003192:	65bc      	str	r4, [r7, #88]	; 0x58
 8003194:	eb41 0303 	adc.w	r3, r1, r3
 8003198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800319a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800319e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80031a2:	4621      	mov	r1, r4
 80031a4:	1889      	adds	r1, r1, r2
 80031a6:	6539      	str	r1, [r7, #80]	; 0x50
 80031a8:	4629      	mov	r1, r5
 80031aa:	eb43 0101 	adc.w	r1, r3, r1
 80031ae:	6579      	str	r1, [r7, #84]	; 0x54
 80031b0:	f04f 0000 	mov.w	r0, #0
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80031bc:	4623      	mov	r3, r4
 80031be:	0a18      	lsrs	r0, r3, #8
 80031c0:	462b      	mov	r3, r5
 80031c2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80031c6:	462b      	mov	r3, r5
 80031c8:	1219      	asrs	r1, r3, #8
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <BMP280_compensate_P_int64+0x588>)
 80031cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	17da      	asrs	r2, r3, #31
 80031d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80031e4:	464c      	mov	r4, r9
 80031e6:	0123      	lsls	r3, r4, #4
 80031e8:	4644      	mov	r4, r8
 80031ea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80031ee:	4644      	mov	r4, r8
 80031f0:	0122      	lsls	r2, r4, #4
 80031f2:	1884      	adds	r4, r0, r2
 80031f4:	603c      	str	r4, [r7, #0]
 80031f6:	eb41 0303 	adc.w	r3, r1, r3
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003200:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110

	return (BMP280_U32_t)p;
 8003204:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003208:	4618      	mov	r0, r3
 800320a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800320e:	46bd      	mov	sp, r7
 8003210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003214:	20000802 	.word	0x20000802
 8003218:	20000800 	.word	0x20000800
 800321c:	200007fe 	.word	0x200007fe

08003220 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8003228:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <bme280_compensate_H_int32+0xbc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8003230:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	039a      	lsls	r2, r3, #14
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <bme280_compensate_H_int32+0xc0>)
 8003238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800323c:	051b      	lsls	r3, r3, #20
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <bme280_compensate_H_int32+0xc4>)
 8003242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003246:	4619      	mov	r1, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8003250:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003254:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8003256:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <bme280_compensate_H_int32+0xc8>)
 8003258:	f9b2 2000 	ldrsh.w	r2, [r2]
 800325c:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8003264:	1292      	asrs	r2, r2, #10
 8003266:	4921      	ldr	r1, [pc, #132]	; (80032ec <bme280_compensate_H_int32+0xcc>)
 8003268:	8809      	ldrh	r1, [r1, #0]
 800326a:	4608      	mov	r0, r1
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	fb00 f101 	mul.w	r1, r0, r1
 8003272:	12c9      	asrs	r1, r1, #11
 8003274:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8003278:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 800327c:	1292      	asrs	r2, r2, #10
 800327e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003282:	491b      	ldr	r1, [pc, #108]	; (80032f0 <bme280_compensate_H_int32+0xd0>)
 8003284:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003288:	fb01 f202 	mul.w	r2, r1, r2
 800328c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8003290:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	13db      	asrs	r3, r3, #15
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	13d2      	asrs	r2, r2, #15
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 80032a6:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <bme280_compensate_H_int32+0xd4>)
 80032a8:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 80032ae:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80032bc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80032c4:	bfa8      	it	ge
 80032c6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80032ca:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	131b      	asrs	r3, r3, #12
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	2000080c 	.word	0x2000080c
 80032e0:	20000806 	.word	0x20000806
 80032e4:	20000808 	.word	0x20000808
 80032e8:	2000080a 	.word	0x2000080a
 80032ec:	200007ee 	.word	0x200007ee
 80032f0:	20000804 	.word	0x20000804
 80032f4:	200007ec 	.word	0x200007ec

080032f8 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80032fc:	f7ff fc66 	bl	8002bcc <BMEReadRaw>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d163      	bne.n	80033ce <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) TemperatureBMP = 0; // value in case temp measurement was disabled
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <BME280_Measure+0xf4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800330e:	d104      	bne.n	800331a <BME280_Measure+0x22>
 8003310:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <BME280_Measure+0xf8>)
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	e016      	b.n	8003348 <BME280_Measure+0x50>
		  else
		  {
			  //Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
			  TemperatureBMP = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 800331a:	4b34      	ldr	r3, [pc, #208]	; (80033ec <BME280_Measure+0xf4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fc76 	bl	8002c10 <BMP280_compensate_T_int32>
 8003324:	4603      	mov	r3, r0
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f904 	bl	8000534 <__aeabi_i2d>
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <BME280_Measure+0xfc>)
 8003332:	f7fd fa93 	bl	800085c <__aeabi_ddiv>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f7fd fc3b 	bl	8000bb8 <__aeabi_d2f>
 8003342:	4603      	mov	r3, r0
 8003344:	4a2a      	ldr	r2, [pc, #168]	; (80033f0 <BME280_Measure+0xf8>)
 8003346:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) PressureBMP = 0; // value in case temp measurement was disabled
 8003348:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <BME280_Measure+0x100>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003350:	d104      	bne.n	800335c <BME280_Measure+0x64>
 8003352:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <BME280_Measure+0x104>)
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e016      	b.n	800338a <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  //Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
			  PressureBMP = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 800335c:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <BME280_Measure+0x100>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fc97 	bl	8002c94 <BMP280_compensate_P_int64>
 8003366:	4603      	mov	r3, r0
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f8d3 	bl	8000514 <__aeabi_ui2d>
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <BME280_Measure+0x108>)
 8003374:	f7fd fa72 	bl	800085c <__aeabi_ddiv>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4610      	mov	r0, r2
 800337e:	4619      	mov	r1, r3
 8003380:	f7fd fc1a 	bl	8000bb8 <__aeabi_d2f>
 8003384:	4603      	mov	r3, r0
 8003386:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <BME280_Measure+0x104>)
 8003388:	6013      	str	r3, [r2, #0]
			  //Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) HumidityBMP = 0; // value in case temp measurement was disabled
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <BME280_Measure+0x10c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003392:	d104      	bne.n	800339e <BME280_Measure+0xa6>
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <BME280_Measure+0x110>)
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		TemperatureBMP = PressureBMP = HumidityBMP = 0;
	}
}
 800339c:	e023      	b.n	80033e6 <BME280_Measure+0xee>
			  HumidityBMP = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <BME280_Measure+0x10c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff3c 	bl	8003220 <bme280_compensate_H_int32>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f8b2 	bl	8000514 <__aeabi_ui2d>
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <BME280_Measure+0x114>)
 80033b6:	f7fd fa51 	bl	800085c <__aeabi_ddiv>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f7fd fbf9 	bl	8000bb8 <__aeabi_d2f>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <BME280_Measure+0x110>)
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	e00b      	b.n	80033e6 <BME280_Measure+0xee>
		TemperatureBMP = PressureBMP = HumidityBMP = 0;
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <BME280_Measure+0x110>)
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <BME280_Measure+0x110>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <BME280_Measure+0x104>)
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <BME280_Measure+0x104>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a03      	ldr	r2, [pc, #12]	; (80033f0 <BME280_Measure+0xf8>)
 80033e4:	6013      	str	r3, [r2, #0]
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200007d4 	.word	0x200007d4
 80033f0:	200012b4 	.word	0x200012b4
 80033f4:	40590000 	.word	0x40590000
 80033f8:	200007d8 	.word	0x200007d8
 80033fc:	200012b8 	.word	0x200012b8
 8003400:	40700000 	.word	0x40700000
 8003404:	200007dc 	.word	0x200007dc
 8003408:	200012bc 	.word	0x200012bc
 800340c:	40900000 	.word	0x40900000

08003410 <CNY70_FlancosUp>:
	rpmCNY70= flancosLeidosCNY70; //Guardo el valor de las rpm en el ultimo minuto
	flancosLeidosCNY70= 0; //Reinicio el contador de flancos
}

void CNY70_FlancosUp(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
	flancosLeidosCNY70++; //Cuento cada revolucion del sensor
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <CNY70_FlancosUp+0x18>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	4a03      	ldr	r2, [pc, #12]	; (8003428 <CNY70_FlancosUp+0x18>)
 800341c:	6013      	str	r3, [r2, #0]
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	20000810 	.word	0x20000810
 800342c:	00000000 	.word	0x00000000

08003430 <CNY70_MedicionVelocidad>:

float CNY70_MedicionVelocidad(uint32_t rpm)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	return ( PI * DIAMETRO_EJE * rpm ) * 3.6/60; //Velocidad en m/s
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fd f86b 	bl	8000514 <__aeabi_ui2d>
 800343e:	a313      	add	r3, pc, #76	; (adr r3, 800348c <CNY70_MedicionVelocidad+0x5c>)
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f7fd f8e0 	bl	8000608 <__aeabi_dmul>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	a310      	add	r3, pc, #64	; (adr r3, 8003494 <CNY70_MedicionVelocidad+0x64>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f7fd f8d7 	bl	8000608 <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <CNY70_MedicionVelocidad+0x58>)
 8003468:	f7fd f9f8 	bl	800085c <__aeabi_ddiv>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	f7fd fba0 	bl	8000bb8 <__aeabi_d2f>
 8003478:	4603      	mov	r3, r0
 800347a:	ee07 3a90 	vmov	s15, r3
}
 800347e:	eeb0 0a67 	vmov.f32	s0, s15
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	404e0000 	.word	0x404e0000
 800348c:	74bc6a80 	.word	0x74bc6a80
 8003490:	3fd41893 	.word	0x3fd41893
 8003494:	cccccccd 	.word	0xcccccccd
 8003498:	400ccccc 	.word	0x400ccccc

0800349c <Set_Pin_Output>:
//----------------------------------------------------------------------//
//---------- Funciones -------------------------------------------------//
//----------------------------------------------------------------------//

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a8:	f107 030c 	add.w	r3, r7, #12
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034bc:	2301      	movs	r3, #1
 80034be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f002 ffb8 	bl	8006440 <HAL_GPIO_Init>
}
 80034d0:	bf00      	nop
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034fc:	2301      	movs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f002 ff9a 	bl	8006440 <HAL_GPIO_Init>
}
 800350c:	bf00      	nop
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_IC_CaptureCallback>:
//-------------------------------------------//
// Intento de implementacion no bloqueante
//-------------------------------------------//

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	//Sensor de viento
	CNY70_FlancosUp();
 800351c:	f7ff ff78 	bl	8003410 <CNY70_FlancosUp>

	//DHT22
	if (enableCapture && iindex <= 82)
 8003520:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d050      	beq.n	80035ca <HAL_TIM_IC_CaptureCallback+0xb6>
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b52      	cmp	r3, #82	; 0x52
 800352e:	d84c      	bhi.n	80035ca <HAL_TIM_IC_CaptureCallback+0xb6>
	{
		capture = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1); // canal y handler de timer.
 8003530:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	b2da      	uxtb	r2, r3
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800353a:	701a      	strb	r2, [r3, #0]

		if (firstCapture == 0)
 800353c:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <HAL_TIM_IC_CaptureCallback+0x3a>
			firstCapture = capture;
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800354a:	701a      	strb	r2, [r3, #0]
				iindex++;
			else
				iindex = 0;
		}
	}
}
 800354c:	e03d      	b.n	80035ca <HAL_TIM_IC_CaptureCallback+0xb6>
			secondCapture = capture;
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003554:	701a      	strb	r2, [r3, #0]
			if(secondCapture > firstCapture)
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d908      	bls.n	8003574 <HAL_TIM_IC_CaptureCallback+0x60>
				pulseTime = secondCapture - firstCapture;
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e00d      	b.n	8003590 <HAL_TIM_IC_CaptureCallback+0x7c>
				pulseTime = __HAL_TIM_GET_AUTORELOAD(&htim3) + secondCapture - firstCapture;
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	b2da      	uxtb	r2, r3
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4413      	add	r3, r2
 8003582:	b2da      	uxtb	r2, r3
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	b2da      	uxtb	r2, r3
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <HAL_TIM_IC_CaptureCallback+0xd8>)
 800358e:	701a      	strb	r2, [r3, #0]
			firstCapture = secondCapture;
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003596:	701a      	strb	r2, [r3, #0]
			timeArray[iindex] = pulseTime;
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_TIM_IC_CaptureCallback+0xd8>)
 80035a0:	7819      	ldrb	r1, [r3, #0]
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80035a4:	5499      	strb	r1, [r3, r2]
			if(timeArray[0] > 70 && timeArray[0] < 90)
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b46      	cmp	r3, #70	; 0x46
 80035ac:	d90a      	bls.n	80035c4 <HAL_TIM_IC_CaptureCallback+0xb0>
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b59      	cmp	r3, #89	; 0x59
 80035b4:	d806      	bhi.n	80035c4 <HAL_TIM_IC_CaptureCallback+0xb0>
				iindex++;
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80035c0:	701a      	strb	r2, [r3, #0]
}
 80035c2:	e002      	b.n	80035ca <HAL_TIM_IC_CaptureCallback+0xb6>
				iindex = 0;
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	2000081d 	.word	0x2000081d
 80035d8:	20000818 	.word	0x20000818
 80035dc:	20000d54 	.word	0x20000d54
 80035e0:	20000819 	.word	0x20000819
 80035e4:	2000081a 	.word	0x2000081a
 80035e8:	2000081b 	.word	0x2000081b
 80035ec:	2000081c 	.word	0x2000081c
 80035f0:	20000820 	.word	0x20000820

080035f4 <DHT22_Recieve>:

void DHT22_Recieve(float *Humidity)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	static uint8_t j = 0;

	if(timeArray[0] > 70 && timeArray[0] < 90)
 80035fc:	4b96      	ldr	r3, [pc, #600]	; (8003858 <DHT22_Recieve+0x264>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b46      	cmp	r3, #70	; 0x46
 8003602:	f240 80bd 	bls.w	8003780 <DHT22_Recieve+0x18c>
 8003606:	4b94      	ldr	r3, [pc, #592]	; (8003858 <DHT22_Recieve+0x264>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b59      	cmp	r3, #89	; 0x59
 800360c:	f200 80b8 	bhi.w	8003780 <DHT22_Recieve+0x18c>
	{
		if(timeArray[1] > 70 && timeArray[1] < 90)
 8003610:	4b91      	ldr	r3, [pc, #580]	; (8003858 <DHT22_Recieve+0x264>)
 8003612:	785b      	ldrb	r3, [r3, #1]
 8003614:	2b46      	cmp	r3, #70	; 0x46
 8003616:	f240 80b3 	bls.w	8003780 <DHT22_Recieve+0x18c>
 800361a:	4b8f      	ldr	r3, [pc, #572]	; (8003858 <DHT22_Recieve+0x264>)
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	2b59      	cmp	r3, #89	; 0x59
 8003620:	f200 80ae 	bhi.w	8003780 <DHT22_Recieve+0x18c>
		{
			for(uint8_t i = 2; i <= 17; i += 2)
 8003624:	2302      	movs	r3, #2
 8003626:	73fb      	strb	r3, [r7, #15]
 8003628:	e04d      	b.n	80036c6 <DHT22_Recieve+0xd2>
			{
				if(timeArray[i] > 40 && timeArray[i] < 60)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	4a8a      	ldr	r2, [pc, #552]	; (8003858 <DHT22_Recieve+0x264>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	2b28      	cmp	r3, #40	; 0x28
 8003632:	d93f      	bls.n	80036b4 <DHT22_Recieve+0xc0>
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	4a88      	ldr	r2, [pc, #544]	; (8003858 <DHT22_Recieve+0x264>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
 800363a:	2b3b      	cmp	r3, #59	; 0x3b
 800363c:	d83a      	bhi.n	80036b4 <DHT22_Recieve+0xc0>
				{
					if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	3301      	adds	r3, #1
 8003642:	4a85      	ldr	r2, [pc, #532]	; (8003858 <DHT22_Recieve+0x264>)
 8003644:	5cd3      	ldrb	r3, [r2, r3]
 8003646:	2b19      	cmp	r3, #25
 8003648:	d918      	bls.n	800367c <DHT22_Recieve+0x88>
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	3301      	adds	r3, #1
 800364e:	4a82      	ldr	r2, [pc, #520]	; (8003858 <DHT22_Recieve+0x264>)
 8003650:	5cd3      	ldrb	r3, [r2, r3]
 8003652:	2b1c      	cmp	r3, #28
 8003654:	d812      	bhi.n	800367c <DHT22_Recieve+0x88>
					{
						Rh_byte1 &= ~(1<<(7 - j));   // write 0
 8003656:	4b81      	ldr	r3, [pc, #516]	; (800385c <DHT22_Recieve+0x268>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2201      	movs	r2, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	b25b      	sxtb	r3, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	b25a      	sxtb	r2, r3
 800366a:	4b7d      	ldr	r3, [pc, #500]	; (8003860 <DHT22_Recieve+0x26c>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b25b      	sxtb	r3, r3
 8003670:	4013      	ands	r3, r2
 8003672:	b25b      	sxtb	r3, r3
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4b7a      	ldr	r3, [pc, #488]	; (8003860 <DHT22_Recieve+0x26c>)
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e01b      	b.n	80036b4 <DHT22_Recieve+0xc0>
					}
					else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	3301      	adds	r3, #1
 8003680:	4a75      	ldr	r2, [pc, #468]	; (8003858 <DHT22_Recieve+0x264>)
 8003682:	5cd3      	ldrb	r3, [r2, r3]
 8003684:	2b3c      	cmp	r3, #60	; 0x3c
 8003686:	d915      	bls.n	80036b4 <DHT22_Recieve+0xc0>
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	3301      	adds	r3, #1
 800368c:	4a72      	ldr	r2, [pc, #456]	; (8003858 <DHT22_Recieve+0x264>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	2b4f      	cmp	r3, #79	; 0x4f
 8003692:	d80f      	bhi.n	80036b4 <DHT22_Recieve+0xc0>
					{
						Rh_byte1 |= (1<<(7 - j));
 8003694:	4b71      	ldr	r3, [pc, #452]	; (800385c <DHT22_Recieve+0x268>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	f1c3 0307 	rsb	r3, r3, #7
 800369c:	2201      	movs	r2, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	b25a      	sxtb	r2, r3
 80036a4:	4b6e      	ldr	r3, [pc, #440]	; (8003860 <DHT22_Recieve+0x26c>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	4b6b      	ldr	r3, [pc, #428]	; (8003860 <DHT22_Recieve+0x26c>)
 80036b2:	701a      	strb	r2, [r3, #0]
					}
				}

				j++;
 80036b4:	4b69      	ldr	r3, [pc, #420]	; (800385c <DHT22_Recieve+0x268>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	4b67      	ldr	r3, [pc, #412]	; (800385c <DHT22_Recieve+0x268>)
 80036be:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 2; i <= 17; i += 2)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	3302      	adds	r3, #2
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b11      	cmp	r3, #17
 80036ca:	d9ae      	bls.n	800362a <DHT22_Recieve+0x36>
			}

			j = 0;
 80036cc:	4b63      	ldr	r3, [pc, #396]	; (800385c <DHT22_Recieve+0x268>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 18; i <= 33; i += 2)
 80036d2:	2312      	movs	r3, #18
 80036d4:	73bb      	strb	r3, [r7, #14]
 80036d6:	e04d      	b.n	8003774 <DHT22_Recieve+0x180>
			{
				if(timeArray[i] > 40 && timeArray[i] < 60)
 80036d8:	7bbb      	ldrb	r3, [r7, #14]
 80036da:	4a5f      	ldr	r2, [pc, #380]	; (8003858 <DHT22_Recieve+0x264>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
 80036de:	2b28      	cmp	r3, #40	; 0x28
 80036e0:	d93f      	bls.n	8003762 <DHT22_Recieve+0x16e>
 80036e2:	7bbb      	ldrb	r3, [r7, #14]
 80036e4:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <DHT22_Recieve+0x264>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	2b3b      	cmp	r3, #59	; 0x3b
 80036ea:	d83a      	bhi.n	8003762 <DHT22_Recieve+0x16e>
				{
					if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 80036ec:	7bbb      	ldrb	r3, [r7, #14]
 80036ee:	3301      	adds	r3, #1
 80036f0:	4a59      	ldr	r2, [pc, #356]	; (8003858 <DHT22_Recieve+0x264>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	2b19      	cmp	r3, #25
 80036f6:	d918      	bls.n	800372a <DHT22_Recieve+0x136>
 80036f8:	7bbb      	ldrb	r3, [r7, #14]
 80036fa:	3301      	adds	r3, #1
 80036fc:	4a56      	ldr	r2, [pc, #344]	; (8003858 <DHT22_Recieve+0x264>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	2b1c      	cmp	r3, #28
 8003702:	d812      	bhi.n	800372a <DHT22_Recieve+0x136>
					{
						Rh_byte2 &= ~(1<<(7 - j));   // write 0
 8003704:	4b55      	ldr	r3, [pc, #340]	; (800385c <DHT22_Recieve+0x268>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f1c3 0307 	rsb	r3, r3, #7
 800370c:	2201      	movs	r2, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	b25b      	sxtb	r3, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	b25a      	sxtb	r2, r3
 8003718:	4b52      	ldr	r3, [pc, #328]	; (8003864 <DHT22_Recieve+0x270>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	b25b      	sxtb	r3, r3
 800371e:	4013      	ands	r3, r2
 8003720:	b25b      	sxtb	r3, r3
 8003722:	b2da      	uxtb	r2, r3
 8003724:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <DHT22_Recieve+0x270>)
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e01b      	b.n	8003762 <DHT22_Recieve+0x16e>
					}
					else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 800372a:	7bbb      	ldrb	r3, [r7, #14]
 800372c:	3301      	adds	r3, #1
 800372e:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <DHT22_Recieve+0x264>)
 8003730:	5cd3      	ldrb	r3, [r2, r3]
 8003732:	2b3c      	cmp	r3, #60	; 0x3c
 8003734:	d915      	bls.n	8003762 <DHT22_Recieve+0x16e>
 8003736:	7bbb      	ldrb	r3, [r7, #14]
 8003738:	3301      	adds	r3, #1
 800373a:	4a47      	ldr	r2, [pc, #284]	; (8003858 <DHT22_Recieve+0x264>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	2b4f      	cmp	r3, #79	; 0x4f
 8003740:	d80f      	bhi.n	8003762 <DHT22_Recieve+0x16e>
					{
						Rh_byte2 |= (1<<(7 - j));
 8003742:	4b46      	ldr	r3, [pc, #280]	; (800385c <DHT22_Recieve+0x268>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	f1c3 0307 	rsb	r3, r3, #7
 800374a:	2201      	movs	r2, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	b25a      	sxtb	r2, r3
 8003752:	4b44      	ldr	r3, [pc, #272]	; (8003864 <DHT22_Recieve+0x270>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b25b      	sxtb	r3, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	b25b      	sxtb	r3, r3
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <DHT22_Recieve+0x270>)
 8003760:	701a      	strb	r2, [r3, #0]
					}
				}

				j++;
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <DHT22_Recieve+0x268>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <DHT22_Recieve+0x268>)
 800376c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 18; i <= 33; i += 2)
 800376e:	7bbb      	ldrb	r3, [r7, #14]
 8003770:	3302      	adds	r3, #2
 8003772:	73bb      	strb	r3, [r7, #14]
 8003774:	7bbb      	ldrb	r3, [r7, #14]
 8003776:	2b21      	cmp	r3, #33	; 0x21
 8003778:	d9ae      	bls.n	80036d8 <DHT22_Recieve+0xe4>
			}

			j = 0;
 800377a:	4b38      	ldr	r3, [pc, #224]	; (800385c <DHT22_Recieve+0x268>)
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]

		}
	}

	if((timeArray[0] > 70 && timeArray[0] < 90) || (timeArray[1] < 70 && timeArray[1] > 90))
 8003780:	4b35      	ldr	r3, [pc, #212]	; (8003858 <DHT22_Recieve+0x264>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b46      	cmp	r3, #70	; 0x46
 8003786:	d903      	bls.n	8003790 <DHT22_Recieve+0x19c>
 8003788:	4b33      	ldr	r3, [pc, #204]	; (8003858 <DHT22_Recieve+0x264>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b59      	cmp	r3, #89	; 0x59
 800378e:	d909      	bls.n	80037a4 <DHT22_Recieve+0x1b0>
 8003790:	4b31      	ldr	r3, [pc, #196]	; (8003858 <DHT22_Recieve+0x264>)
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	2b45      	cmp	r3, #69	; 0x45
 8003796:	f200 80bb 	bhi.w	8003910 <DHT22_Recieve+0x31c>
 800379a:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <DHT22_Recieve+0x264>)
 800379c:	785b      	ldrb	r3, [r3, #1]
 800379e:	2b5a      	cmp	r3, #90	; 0x5a
 80037a0:	f240 80b6 	bls.w	8003910 <DHT22_Recieve+0x31c>
	{
		for(uint8_t i = 1; i <= 16; i += 2)
 80037a4:	2301      	movs	r3, #1
 80037a6:	737b      	strb	r3, [r7, #13]
 80037a8:	e04d      	b.n	8003846 <DHT22_Recieve+0x252>
		{
			if(timeArray[i] > 40 && timeArray[i] < 60)
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <DHT22_Recieve+0x264>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	2b28      	cmp	r3, #40	; 0x28
 80037b2:	d93f      	bls.n	8003834 <DHT22_Recieve+0x240>
 80037b4:	7b7b      	ldrb	r3, [r7, #13]
 80037b6:	4a28      	ldr	r2, [pc, #160]	; (8003858 <DHT22_Recieve+0x264>)
 80037b8:	5cd3      	ldrb	r3, [r2, r3]
 80037ba:	2b3b      	cmp	r3, #59	; 0x3b
 80037bc:	d83a      	bhi.n	8003834 <DHT22_Recieve+0x240>
			{
				if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 80037be:	7b7b      	ldrb	r3, [r7, #13]
 80037c0:	3301      	adds	r3, #1
 80037c2:	4a25      	ldr	r2, [pc, #148]	; (8003858 <DHT22_Recieve+0x264>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	2b19      	cmp	r3, #25
 80037c8:	d918      	bls.n	80037fc <DHT22_Recieve+0x208>
 80037ca:	7b7b      	ldrb	r3, [r7, #13]
 80037cc:	3301      	adds	r3, #1
 80037ce:	4a22      	ldr	r2, [pc, #136]	; (8003858 <DHT22_Recieve+0x264>)
 80037d0:	5cd3      	ldrb	r3, [r2, r3]
 80037d2:	2b1c      	cmp	r3, #28
 80037d4:	d812      	bhi.n	80037fc <DHT22_Recieve+0x208>
				{
					Rh_byte1 &= ~(1<<(7 - j));   // write 0
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <DHT22_Recieve+0x268>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	f1c3 0307 	rsb	r3, r3, #7
 80037de:	2201      	movs	r2, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	b25a      	sxtb	r2, r3
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <DHT22_Recieve+0x26c>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b25b      	sxtb	r3, r3
 80037f0:	4013      	ands	r3, r2
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <DHT22_Recieve+0x26c>)
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e01b      	b.n	8003834 <DHT22_Recieve+0x240>
				}
				else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 80037fc:	7b7b      	ldrb	r3, [r7, #13]
 80037fe:	3301      	adds	r3, #1
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <DHT22_Recieve+0x264>)
 8003802:	5cd3      	ldrb	r3, [r2, r3]
 8003804:	2b3c      	cmp	r3, #60	; 0x3c
 8003806:	d915      	bls.n	8003834 <DHT22_Recieve+0x240>
 8003808:	7b7b      	ldrb	r3, [r7, #13]
 800380a:	3301      	adds	r3, #1
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <DHT22_Recieve+0x264>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	2b4f      	cmp	r3, #79	; 0x4f
 8003812:	d80f      	bhi.n	8003834 <DHT22_Recieve+0x240>
				{
					Rh_byte1 |= (1<<(7 - j));
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <DHT22_Recieve+0x268>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f1c3 0307 	rsb	r3, r3, #7
 800381c:	2201      	movs	r2, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	b25a      	sxtb	r2, r3
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <DHT22_Recieve+0x26c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b25b      	sxtb	r3, r3
 800382a:	4313      	orrs	r3, r2
 800382c:	b25b      	sxtb	r3, r3
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <DHT22_Recieve+0x26c>)
 8003832:	701a      	strb	r2, [r3, #0]
				}
			}

			j++;
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <DHT22_Recieve+0x268>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <DHT22_Recieve+0x268>)
 800383e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 1; i <= 16; i += 2)
 8003840:	7b7b      	ldrb	r3, [r7, #13]
 8003842:	3302      	adds	r3, #2
 8003844:	737b      	strb	r3, [r7, #13]
 8003846:	7b7b      	ldrb	r3, [r7, #13]
 8003848:	2b10      	cmp	r3, #16
 800384a:	d9ae      	bls.n	80037aa <DHT22_Recieve+0x1b6>
		}

		j = 0;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <DHT22_Recieve+0x268>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 17; i <= 32; i += 2)
 8003852:	2311      	movs	r3, #17
 8003854:	733b      	strb	r3, [r7, #12]
 8003856:	e055      	b.n	8003904 <DHT22_Recieve+0x310>
 8003858:	20000820 	.word	0x20000820
 800385c:	2000088c 	.word	0x2000088c
 8003860:	20000888 	.word	0x20000888
 8003864:	20000889 	.word	0x20000889
		{
			if(timeArray[i] > 40 && timeArray[i] < 60)
 8003868:	7b3b      	ldrb	r3, [r7, #12]
 800386a:	4a3b      	ldr	r2, [pc, #236]	; (8003958 <DHT22_Recieve+0x364>)
 800386c:	5cd3      	ldrb	r3, [r2, r3]
 800386e:	2b28      	cmp	r3, #40	; 0x28
 8003870:	d93f      	bls.n	80038f2 <DHT22_Recieve+0x2fe>
 8003872:	7b3b      	ldrb	r3, [r7, #12]
 8003874:	4a38      	ldr	r2, [pc, #224]	; (8003958 <DHT22_Recieve+0x364>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	2b3b      	cmp	r3, #59	; 0x3b
 800387a:	d83a      	bhi.n	80038f2 <DHT22_Recieve+0x2fe>
			{
				if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 800387c:	7b3b      	ldrb	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	4a35      	ldr	r2, [pc, #212]	; (8003958 <DHT22_Recieve+0x364>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	2b19      	cmp	r3, #25
 8003886:	d918      	bls.n	80038ba <DHT22_Recieve+0x2c6>
 8003888:	7b3b      	ldrb	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	4a32      	ldr	r2, [pc, #200]	; (8003958 <DHT22_Recieve+0x364>)
 800388e:	5cd3      	ldrb	r3, [r2, r3]
 8003890:	2b1c      	cmp	r3, #28
 8003892:	d812      	bhi.n	80038ba <DHT22_Recieve+0x2c6>
				{
					Rh_byte2 &= ~(1<<(7 - j));   // write 0
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <DHT22_Recieve+0x368>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	f1c3 0307 	rsb	r3, r3, #7
 800389c:	2201      	movs	r2, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	b25b      	sxtb	r3, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	b25a      	sxtb	r2, r3
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <DHT22_Recieve+0x36c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	4013      	ands	r3, r2
 80038b0:	b25b      	sxtb	r3, r3
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <DHT22_Recieve+0x36c>)
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e01b      	b.n	80038f2 <DHT22_Recieve+0x2fe>
				}
				else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 80038ba:	7b3b      	ldrb	r3, [r7, #12]
 80038bc:	3301      	adds	r3, #1
 80038be:	4a26      	ldr	r2, [pc, #152]	; (8003958 <DHT22_Recieve+0x364>)
 80038c0:	5cd3      	ldrb	r3, [r2, r3]
 80038c2:	2b3c      	cmp	r3, #60	; 0x3c
 80038c4:	d915      	bls.n	80038f2 <DHT22_Recieve+0x2fe>
 80038c6:	7b3b      	ldrb	r3, [r7, #12]
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a23      	ldr	r2, [pc, #140]	; (8003958 <DHT22_Recieve+0x364>)
 80038cc:	5cd3      	ldrb	r3, [r2, r3]
 80038ce:	2b4f      	cmp	r3, #79	; 0x4f
 80038d0:	d80f      	bhi.n	80038f2 <DHT22_Recieve+0x2fe>
				{
					Rh_byte2 |= (1<<(7 - j));
 80038d2:	4b22      	ldr	r3, [pc, #136]	; (800395c <DHT22_Recieve+0x368>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2201      	movs	r2, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	b25a      	sxtb	r2, r3
 80038e2:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <DHT22_Recieve+0x36c>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <DHT22_Recieve+0x36c>)
 80038f0:	701a      	strb	r2, [r3, #0]
				}
			}

			j++;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <DHT22_Recieve+0x368>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b18      	ldr	r3, [pc, #96]	; (800395c <DHT22_Recieve+0x368>)
 80038fc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 17; i <= 32; i += 2)
 80038fe:	7b3b      	ldrb	r3, [r7, #12]
 8003900:	3302      	adds	r3, #2
 8003902:	733b      	strb	r3, [r7, #12]
 8003904:	7b3b      	ldrb	r3, [r7, #12]
 8003906:	2b20      	cmp	r3, #32
 8003908:	d9ae      	bls.n	8003868 <DHT22_Recieve+0x274>
		}

		j = 0;
 800390a:	4b14      	ldr	r3, [pc, #80]	; (800395c <DHT22_Recieve+0x368>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
	}

	RH = ((Rh_byte1<<8)|Rh_byte2);
 8003910:	4b14      	ldr	r3, [pc, #80]	; (8003964 <DHT22_Recieve+0x370>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	b21a      	sxth	r2, r3
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <DHT22_Recieve+0x36c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b21b      	sxth	r3, r3
 800391e:	4313      	orrs	r3, r2
 8003920:	b21b      	sxth	r3, r3
 8003922:	b29a      	uxth	r2, r3
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <DHT22_Recieve+0x374>)
 8003926:	801a      	strh	r2, [r3, #0]
	*Humidity = (float) (RH/10.0);
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <DHT22_Recieve+0x374>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fe01 	bl	8000534 <__aeabi_i2d>
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <DHT22_Recieve+0x378>)
 8003938:	f7fc ff90 	bl	800085c <__aeabi_ddiv>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f7fd f938 	bl	8000bb8 <__aeabi_d2f>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000820 	.word	0x20000820
 800395c:	2000088c 	.word	0x2000088c
 8003960:	20000889 	.word	0x20000889
 8003964:	20000888 	.word	0x20000888
 8003968:	2000088a 	.word	0x2000088a
 800396c:	40240000 	.word	0x40240000

08003970 <DHT22_Read_Humidity>:

void DHT22_Read_Humidity (float *Humidity)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	if(iindex > 80)
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <DHT22_Read_Humidity+0x58>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b50      	cmp	r3, #80	; 0x50
 800397e:	d914      	bls.n	80039aa <DHT22_Read_Humidity+0x3a>
	{
		DHT22_Recieve(Humidity);				// Funcion para procesar los datos obtenidos provenientes de la callback
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff fe37 	bl	80035f4 <DHT22_Recieve>

		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8003986:	2100      	movs	r1, #0
 8003988:	4810      	ldr	r0, [pc, #64]	; (80039cc <DHT22_Read_Humidity+0x5c>)
 800398a:	f008 fdb5 	bl	800c4f8 <HAL_TIM_IC_Stop_IT>

		enableCapture = 0;
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <DHT22_Read_Humidity+0x60>)
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]

		iindex = 0;
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <DHT22_Read_Humidity+0x58>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]

		memset(timeArray,0x00,100);
 800399a:	2264      	movs	r2, #100	; 0x64
 800399c:	2100      	movs	r1, #0
 800399e:	480d      	ldr	r0, [pc, #52]	; (80039d4 <DHT22_Read_Humidity+0x64>)
 80039a0:	f011 f8df 	bl	8014b62 <memset>

		start = 0;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <DHT22_Read_Humidity+0x68>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
	}

	vTaskDelay(2000);
 80039aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80039ae:	f00e fc5b 	bl	8012268 <vTaskDelay>

	Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	4809      	ldr	r0, [pc, #36]	; (80039dc <DHT22_Read_Humidity+0x6c>)
 80039b6:	f7ff fd71 	bl	800349c <Set_Pin_Output>

	HAL_TIM_Base_Start_IT(&htim4);
 80039ba:	4809      	ldr	r0, [pc, #36]	; (80039e0 <DHT22_Read_Humidity+0x70>)
 80039bc:	f008 fb98 	bl	800c0f0 <HAL_TIM_Base_Start_IT>

}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000818 	.word	0x20000818
 80039cc:	20000d54 	.word	0x20000d54
 80039d0:	2000081d 	.word	0x2000081d
 80039d4:	20000820 	.word	0x20000820
 80039d8:	20000884 	.word	0x20000884
 80039dc:	40020000 	.word	0x40020000
 80039e0:	20000d9c 	.word	0x20000d9c
 80039e4:	00000000 	.word	0x00000000

080039e8 <LM35_Read_Temperature>:
 *  Created on: Sep 28, 2023
 *      Author: axu_n
 */

float LM35_Read_Temperature(unsigned int Temp_ADC)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	return ((330.0 * Temp_ADC)/4095);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fc fd8f 	bl	8000514 <__aeabi_ui2d>
 80039f6:	a30e      	add	r3, pc, #56	; (adr r3, 8003a30 <LM35_Read_Temperature+0x48>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f7fc fe04 	bl	8000608 <__aeabi_dmul>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	a30b      	add	r3, pc, #44	; (adr r3, 8003a38 <LM35_Read_Temperature+0x50>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f7fc ff25 	bl	800085c <__aeabi_ddiv>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f7fd f8cd 	bl	8000bb8 <__aeabi_d2f>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	ee07 3a90 	vmov	s15, r3
}
 8003a24:	eeb0 0a67 	vmov.f32	s0, s15
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	00000000 	.word	0x00000000
 8003a34:	4074a000 	.word	0x4074a000
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	40affe00 	.word	0x40affe00

08003a40 <MQ135_NivelContaminacion>:

	GasesDetectados[0]= SCA_CO2 * pow(Rs_R0, EXP_CO2); //Concentracion CO2
}

uint32_t MQ135_NivelContaminacion(uint32_t cuentas)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	return cuentas * 100/4095;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2264      	movs	r2, #100	; 0x64
 8003a4c:	fb03 f202 	mul.w	r2, r3, r2
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <MQ135_NivelContaminacion+0x2c>)
 8003a52:	fba3 1302 	umull	r1, r3, r3, r2
 8003a56:	1ad2      	subs	r2, r2, r3
 8003a58:	0852      	lsrs	r2, r2, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	0adb      	lsrs	r3, r3, #11
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	00100101 	.word	0x00100101

08003a70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <vApplicationGetIdleTaskMemory+0x30>)
 8003a86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000890 	.word	0x20000890
 8003aa0:	20000930 	.word	0x20000930

08003aa4 <HAL_I2C_MemRxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <HAL_I2C_MemRxCpltCallback+0x64>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d123      	bne.n	8003afc <HAL_I2C_MemRxCpltCallback+0x58>
	{
		/* Calculate the Raw data for the parameters
		* Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		*/
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_I2C_MemRxCpltCallback+0x68>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	031a      	lsls	r2, r3, #12
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_I2C_MemRxCpltCallback+0x68>)
 8003abc:	785b      	ldrb	r3, [r3, #1]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <HAL_I2C_MemRxCpltCallback+0x68>)
 8003ac4:	7892      	ldrb	r2, [r2, #2]
 8003ac6:	0912      	lsrs	r2, r2, #4
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	4313      	orrs	r3, r2
 8003acc:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8003ace:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_I2C_MemRxCpltCallback+0x68>)
 8003ad2:	78db      	ldrb	r3, [r3, #3]
 8003ad4:	031a      	lsls	r2, r3, #12
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_I2C_MemRxCpltCallback+0x68>)
 8003ad8:	791b      	ldrb	r3, [r3, #4]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	4313      	orrs	r3, r2
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <HAL_I2C_MemRxCpltCallback+0x68>)
 8003ae0:	7952      	ldrb	r2, [r2, #5]
 8003ae2:	0912      	lsrs	r2, r2, #4
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_I2C_MemRxCpltCallback+0x70>)
 8003aea:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_I2C_MemRxCpltCallback+0x68>)
 8003aee:	799b      	ldrb	r3, [r3, #6]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <HAL_I2C_MemRxCpltCallback+0x68>)
 8003af4:	79d2      	ldrb	r2, [r2, #7]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <HAL_I2C_MemRxCpltCallback+0x74>)
 8003afa:	6013      	str	r3, [r2, #0]
	}
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20000bd8 	.word	0x20000bd8
 8003b0c:	200007e0 	.word	0x200007e0
 8003b10:	200007d8 	.word	0x200007d8
 8003b14:	200007d4 	.word	0x200007d4
 8003b18:	200007dc 	.word	0x200007dc

08003b1c <Set_Time>:
{
	CNY70_FlancosUp();
}*/

void Set_Time(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
	/** Initialize RTC and set the Time and Date
	*/

	RTC_TimeTypeDef sTime = {0};
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8003b30:	2300      	movs	r3, #0
 8003b32:	603b      	str	r3, [r7, #0]

	sTime.Hours = 0x0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4812      	ldr	r0, [pc, #72]	; (8003b98 <Set_Time+0x7c>)
 8003b50:	f007 fe9a 	bl	800b888 <HAL_RTC_SetTime>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <Set_Time+0x42>
	{
		Error_Handler();
 8003b5a:	f000 fe91 	bl	8004880 <Error_Handler>
	}

	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8003b62:	2301      	movs	r3, #1
 8003b64:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003b6e:	463b      	mov	r3, r7
 8003b70:	2201      	movs	r2, #1
 8003b72:	4619      	mov	r1, r3
 8003b74:	4808      	ldr	r0, [pc, #32]	; (8003b98 <Set_Time+0x7c>)
 8003b76:	f007 ff7f 	bl	800ba78 <HAL_RTC_SetDate>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <Set_Time+0x68>
	{
		Error_Handler();
 8003b80:	f000 fe7e 	bl	8004880 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8003b84:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4803      	ldr	r0, [pc, #12]	; (8003b98 <Set_Time+0x7c>)
 8003b8c:	f008 fa2e 	bl	800bfec <HAL_RTCEx_BKUPWrite>
}
 8003b90:	bf00      	nop
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000cec 	.word	0x20000cec

08003b9c <Set_Alarm>:

void Set_Alarm (void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0

	RTC_AlarmTypeDef sAlarm = {0};
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	2228      	movs	r2, #40	; 0x28
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f010 ffda 	bl	8014b62 <memset>

	/** Enable the Alarm A
	*/
	sAlarm.AlarmTime.Hours = 0x0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8003bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003bde:	463b      	mov	r3, r7
 8003be0:	2201      	movs	r2, #1
 8003be2:	4619      	mov	r1, r3
 8003be4:	4805      	ldr	r0, [pc, #20]	; (8003bfc <Set_Alarm+0x60>)
 8003be6:	f008 f81a 	bl	800bc1e <HAL_RTC_SetAlarm>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <Set_Alarm+0x58>
	{
		Error_Handler();
 8003bf0:	f000 fe46 	bl	8004880 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */
}
 8003bf4:	bf00      	nop
 8003bf6:	3728      	adds	r7, #40	; 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000cec 	.word	0x20000cec

08003c00 <Task_Data_Display>:
    }
    ssd1306_UpdateScreen();
}

void Task_Data_Display (void *pvParameters)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	//vTaskPrioritySet(Task_ReadSensors, tskIDLE_PRIORITY + 2);

	ssd1306_Init();
 8003c08:	f7fd fe90 	bl	800192c <ssd1306_Init>

	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1))
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	480f      	ldr	r0, [pc, #60]	; (8003c4c <Task_Data_Display+0x4c>)
 8003c10:	f008 fa06 	bl	800c020 <HAL_RTCEx_BKUPRead>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <Task_Data_Display+0x1e>
	{
	  Set_Time();
 8003c1a:	f7ff ff7f 	bl	8003b1c <Set_Time>
	}

	Set_Alarm();
 8003c1e:	f7ff ffbd 	bl	8003b9c <Set_Alarm>

	for (int i = 0; i < 128 * 64 / 8; ++i) {
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e007      	b.n	8003c38 <Task_Data_Display+0x38>
		 screenBuffer[i] = 0xFF;
 8003c28:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <Task_Data_Display+0x50>)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	22ff      	movs	r2, #255	; 0xff
 8003c30:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 128 * 64 / 8; ++i) {
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	dbf3      	blt.n	8003c28 <Task_Data_Display+0x28>
	}

	HAL_TIM_Base_Start_IT(&htim2);
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <Task_Data_Display+0x54>)
 8003c42:	f008 fa55 	bl	800c0f0 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		Mostrar_Datos();
 8003c46:	f7fd fe09 	bl	800185c <Mostrar_Datos>
 8003c4a:	e7fc      	b.n	8003c46 <Task_Data_Display+0x46>
 8003c4c:	20000cec 	.word	0x20000cec
 8003c50:	20000e70 	.word	0x20000e70
 8003c54:	20000d0c 	.word	0x20000d0c

08003c58 <Task_ReadSensors>:
	}
}

void Task_ReadSensors(void *pvParam)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8003c60:	4825      	ldr	r0, [pc, #148]	; (8003cf8 <Task_ReadSensors+0xa0>)
 8003c62:	f008 fa45 	bl	800c0f0 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, AnalogSensors, 2);
 8003c66:	2202      	movs	r2, #2
 8003c68:	4924      	ldr	r1, [pc, #144]	; (8003cfc <Task_ReadSensors+0xa4>)
 8003c6a:	4825      	ldr	r0, [pc, #148]	; (8003d00 <Task_ReadSensors+0xa8>)
 8003c6c:	f001 fb3c 	bl	80052e8 <HAL_ADC_Start_DMA>
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
	//HAL_TIM_Base_Start_IT(&htim3);

	while(1)
	{
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8003c70:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <Task_ReadSensors+0xac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f04f 31ff 	mov.w	r1, #4294967295
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f00d ff3d 	bl	8011af8 <xQueueSemaphoreTake>

		stateCNY70= HAL_GPIO_ReadPin(CNY70_GPIO_Port, CNY70_Pin);
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4821      	ldr	r0, [pc, #132]	; (8003d08 <Task_ReadSensors+0xb0>)
 8003c82:	f002 fd61 	bl	8006748 <HAL_GPIO_ReadPin>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <Task_ReadSensors+0xb4>)
 8003c8c:	701a      	strb	r2, [r3, #0]

		MedicionesEstacion.Temperature = LM35_Read_Temperature(AnalogSensors[0]);
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <Task_ReadSensors+0xa4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fea8 	bl	80039e8 <LM35_Read_Temperature>
 8003c98:	eef0 7a40 	vmov.f32	s15, s0
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <Task_ReadSensors+0xb8>)
 8003c9e:	edc3 7a00 	vstr	s15, [r3]
		DHT22_Read_Humidity(&MedicionesEstacion.Humidity);
 8003ca2:	481c      	ldr	r0, [pc, #112]	; (8003d14 <Task_ReadSensors+0xbc>)
 8003ca4:	f7ff fe64 	bl	8003970 <DHT22_Read_Humidity>
		BME280_Measure();
 8003ca8:	f7ff fb26 	bl	80032f8 <BME280_Measure>
		MedicionesEstacion.Pressure = PressureBMP;
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <Task_ReadSensors+0xc0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <Task_ReadSensors+0xb8>)
 8003cb2:	6053      	str	r3, [r2, #4]
		MedicionesEstacion.WindSpeed= CNY70_MedicionVelocidad(rpmCNY70);
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <Task_ReadSensors+0xc4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fbb9 	bl	8003430 <CNY70_MedicionVelocidad>
 8003cbe:	eef0 7a40 	vmov.f32	s15, s0
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <Task_ReadSensors+0xb8>)
 8003cc4:	edc3 7a05 	vstr	s15, [r3, #20]
		BH1750_ReadLight(&MedicionesEstacion.Light);
 8003cc8:	4815      	ldr	r0, [pc, #84]	; (8003d20 <Task_ReadSensors+0xc8>)
 8003cca:	f7fe fde3 	bl	8002894 <BH1750_ReadLight>
		MedicionesEstacion.AirQuality= MQ135_NivelContaminacion(AnalogSensors[1]);
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <Task_ReadSensors+0xa4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff feb4 	bl	8003a40 <MQ135_NivelContaminacion>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <Task_ReadSensors+0xb8>)
 8003cdc:	6113      	str	r3, [r2, #16]

		xSemaphoreGive(SEM_Mediciones);
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <Task_ReadSensors+0xac>)
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f00d fe08 	bl	80118fc <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8003cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cf0:	f00e faba 	bl	8012268 <vTaskDelay>
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8003cf4:	e7bc      	b.n	8003c70 <Task_ReadSensors+0x18>
 8003cf6:	bf00      	nop
 8003cf8:	20000d9c 	.word	0x20000d9c
 8003cfc:	200012a8 	.word	0x200012a8
 8003d00:	20000b30 	.word	0x20000b30
 8003d04:	20001274 	.word	0x20001274
 8003d08:	40020800 	.word	0x40020800
 8003d0c:	200012b0 	.word	0x200012b0
 8003d10:	20001278 	.word	0x20001278
 8003d14:	20001280 	.word	0x20001280
 8003d18:	200012b8 	.word	0x200012b8
 8003d1c:	20000814 	.word	0x20000814
 8003d20:	20001284 	.word	0x20001284

08003d24 <Task_SendDataToThingspeak>:
	}
}

void Task_SendDataToThingspeak(void *pvParam)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	//Esta tarea debe ejecutarse cada 15segs como maximo
	vTaskDelay(pdMS_TO_TICKS(5000)); //Evito que entre primero esta tarea
 8003d2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003d30:	f00e fa9a 	bl	8012268 <vTaskDelay>

	while(1)
	{
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8003d34:	4b69      	ldr	r3, [pc, #420]	; (8003edc <Task_SendDataToThingspeak+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f04f 31ff 	mov.w	r1, #4294967295
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f00d fedb 	bl	8011af8 <xQueueSemaphoreTake>
		dataToSend[0]= round(MedicionesEstacion.Temperature * 100)/100;
 8003d42:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <Task_SendDataToThingspeak+0x1bc>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003ee4 <Task_SendDataToThingspeak+0x1c0>
 8003d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d50:	ee17 0a90 	vmov	r0, s15
 8003d54:	f7fc fc00 	bl	8000558 <__aeabi_f2d>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	ec43 2b10 	vmov	d0, r2, r3
 8003d60:	f013 f842 	bl	8016de8 <round>
 8003d64:	ec51 0b10 	vmov	r0, r1, d0
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ee8 <Task_SendDataToThingspeak+0x1c4>)
 8003d6e:	f7fc fd75 	bl	800085c <__aeabi_ddiv>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f7fc ff1d 	bl	8000bb8 <__aeabi_d2f>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4a5a      	ldr	r2, [pc, #360]	; (8003eec <Task_SendDataToThingspeak+0x1c8>)
 8003d82:	6013      	str	r3, [r2, #0]
		dataToSend[1]= round(MedicionesEstacion.Humidity * 100)/100;
 8003d84:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <Task_SendDataToThingspeak+0x1bc>)
 8003d86:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d8a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003ee4 <Task_SendDataToThingspeak+0x1c0>
 8003d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d92:	ee17 0a90 	vmov	r0, s15
 8003d96:	f7fc fbdf 	bl	8000558 <__aeabi_f2d>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	ec43 2b10 	vmov	d0, r2, r3
 8003da2:	f013 f821 	bl	8016de8 <round>
 8003da6:	ec51 0b10 	vmov	r0, r1, d0
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	4b4e      	ldr	r3, [pc, #312]	; (8003ee8 <Task_SendDataToThingspeak+0x1c4>)
 8003db0:	f7fc fd54 	bl	800085c <__aeabi_ddiv>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f7fc fefc 	bl	8000bb8 <__aeabi_d2f>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4a4a      	ldr	r2, [pc, #296]	; (8003eec <Task_SendDataToThingspeak+0x1c8>)
 8003dc4:	6053      	str	r3, [r2, #4]
		dataToSend[2]= round(MedicionesEstacion.Pressure * 100)/100;
 8003dc6:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <Task_SendDataToThingspeak+0x1bc>)
 8003dc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dcc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003ee4 <Task_SendDataToThingspeak+0x1c0>
 8003dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd4:	ee17 0a90 	vmov	r0, s15
 8003dd8:	f7fc fbbe 	bl	8000558 <__aeabi_f2d>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	ec43 2b10 	vmov	d0, r2, r3
 8003de4:	f013 f800 	bl	8016de8 <round>
 8003de8:	ec51 0b10 	vmov	r0, r1, d0
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	4b3d      	ldr	r3, [pc, #244]	; (8003ee8 <Task_SendDataToThingspeak+0x1c4>)
 8003df2:	f7fc fd33 	bl	800085c <__aeabi_ddiv>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7fc fedb 	bl	8000bb8 <__aeabi_d2f>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4a39      	ldr	r2, [pc, #228]	; (8003eec <Task_SendDataToThingspeak+0x1c8>)
 8003e06:	6093      	str	r3, [r2, #8]
		dataToSend[3]= round(MedicionesEstacion.WindSpeed * 100)/100;
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <Task_SendDataToThingspeak+0x1bc>)
 8003e0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e0e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003ee4 <Task_SendDataToThingspeak+0x1c0>
 8003e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e16:	ee17 0a90 	vmov	r0, s15
 8003e1a:	f7fc fb9d 	bl	8000558 <__aeabi_f2d>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	ec43 2b10 	vmov	d0, r2, r3
 8003e26:	f012 ffdf 	bl	8016de8 <round>
 8003e2a:	ec51 0b10 	vmov	r0, r1, d0
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <Task_SendDataToThingspeak+0x1c4>)
 8003e34:	f7fc fd12 	bl	800085c <__aeabi_ddiv>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f7fc feba 	bl	8000bb8 <__aeabi_d2f>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4a29      	ldr	r2, [pc, #164]	; (8003eec <Task_SendDataToThingspeak+0x1c8>)
 8003e48:	60d3      	str	r3, [r2, #12]
		dataToSend[4]= round(MedicionesEstacion.Light * 100)/100;
 8003e4a:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <Task_SendDataToThingspeak+0x1bc>)
 8003e4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e50:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003ee4 <Task_SendDataToThingspeak+0x1c0>
 8003e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e58:	ee17 0a90 	vmov	r0, s15
 8003e5c:	f7fc fb7c 	bl	8000558 <__aeabi_f2d>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	ec43 2b10 	vmov	d0, r2, r3
 8003e68:	f012 ffbe 	bl	8016de8 <round>
 8003e6c:	ec51 0b10 	vmov	r0, r1, d0
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <Task_SendDataToThingspeak+0x1c4>)
 8003e76:	f7fc fcf1 	bl	800085c <__aeabi_ddiv>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fc fe99 	bl	8000bb8 <__aeabi_d2f>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <Task_SendDataToThingspeak+0x1c8>)
 8003e8a:	6113      	str	r3, [r2, #16]
		dataToSend[5]= round(MedicionesEstacion.AirQuality * 100)/100;
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <Task_SendDataToThingspeak+0x1bc>)
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2264      	movs	r2, #100	; 0x64
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc fb3c 	bl	8000514 <__aeabi_ui2d>
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <Task_SendDataToThingspeak+0x1c4>)
 8003ea2:	f7fc fcdb 	bl	800085c <__aeabi_ddiv>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	f7fc fe83 	bl	8000bb8 <__aeabi_d2f>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <Task_SendDataToThingspeak+0x1c8>)
 8003eb6:	6153      	str	r3, [r2, #20]

		xSemaphoreGive(SEM_Mediciones);
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <Task_SendDataToThingspeak+0x1b8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	f00d fd1b 	bl	80118fc <xQueueGenericSend>
		ESP_Send_Multi("GZ88XIL7XS30EM51", CANT_PARAMETROS, dataToSend);
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <Task_SendDataToThingspeak+0x1c8>)
 8003ec8:	2106      	movs	r1, #6
 8003eca:	4809      	ldr	r0, [pc, #36]	; (8003ef0 <Task_SendDataToThingspeak+0x1cc>)
 8003ecc:	f7fe f99e 	bl	800220c <ESP_Send_Multi>

		vTaskDelay(pdMS_TO_TICKS(THINGSPEAK_DELAY));
 8003ed0:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003ed4:	f00e f9c8 	bl	8012268 <vTaskDelay>
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8003ed8:	e72c      	b.n	8003d34 <Task_SendDataToThingspeak+0x10>
 8003eda:	bf00      	nop
 8003edc:	20001274 	.word	0x20001274
 8003ee0:	20001278 	.word	0x20001278
 8003ee4:	42c80000 	.word	0x42c80000
 8003ee8:	40590000 	.word	0x40590000
 8003eec:	20001290 	.word	0x20001290
 8003ef0:	08016fdc 	.word	0x08016fdc

08003ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ef4:	b5b0      	push	{r4, r5, r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003efa:	f001 f94b 	bl	8005194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003efe:	f000 f88d 	bl	800401c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f02:	f000 fbab 	bl	800465c <MX_GPIO_Init>
  MX_DMA_Init();
 8003f06:	f000 fb6b 	bl	80045e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003f0a:	f000 fb3f 	bl	800458c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003f0e:	f000 f951 	bl	80041b4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003f12:	f000 fa09 	bl	8004328 <MX_TIM2_Init>
  MX_RTC_Init();
 8003f16:	f000 f97b 	bl	8004210 <MX_RTC_Init>
  MX_TIM3_Init();
 8003f1a:	f000 fa51 	bl	80043c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003f1e:	f000 f8e9 	bl	80040f4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8003f22:	f000 fabd 	bl	80044a0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003f26:	f000 fb07 	bl	8004538 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Inicializacion BH1750
  BH1750_Init(&hi2c1);
 8003f2a:	4830      	ldr	r0, [pc, #192]	; (8003fec <main+0xf8>)
 8003f2c:	f7fe fbfc 	bl	8002728 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE);
 8003f30:	2010      	movs	r0, #16
 8003f32:	f7fe fc2f 	bl	8002794 <BH1750_SetMode>

  //Inicializacion BMP280
  BME280_Config(OSRS_1, OSRS_4, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8003f36:	2304      	movs	r3, #4
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2303      	movs	r3, #3
 8003f40:	2201      	movs	r2, #1
 8003f42:	2103      	movs	r1, #3
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7fe fd99 	bl	8002a7c <BME280_Config>


  //Inicializacion ESP01
  ESP_Init(MY_NETWORK, MY_PASSWORD);
 8003f4a:	4929      	ldr	r1, [pc, #164]	; (8003ff0 <main+0xfc>)
 8003f4c:	4829      	ldr	r0, [pc, #164]	; (8003ff4 <main+0x100>)
 8003f4e:	f7fe f901 	bl	8002154 <ESP_Init>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  SEM_Mediciones= xSemaphoreCreateBinary();
 8003f52:	2203      	movs	r2, #3
 8003f54:	2100      	movs	r1, #0
 8003f56:	2001      	movs	r0, #1
 8003f58:	f00d fc76 	bl	8011848 <xQueueGenericCreate>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <main+0x104>)
 8003f60:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(SEM_Mediciones, 0);
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <main+0x104>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f00d fdc5 	bl	8011af8 <xQueueSemaphoreTake>
  xSemaphoreGive(SEM_Mediciones);
 8003f6e:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <main+0x104>)
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	2200      	movs	r2, #0
 8003f76:	2100      	movs	r1, #0
 8003f78:	f00d fcc0 	bl	80118fc <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <main+0x108>)
 8003f7e:	1d3c      	adds	r4, r7, #4
 8003f80:	461d      	mov	r5, r3
 8003f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f00d fadb 	bl	801154e <osThreadCreate>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4a19      	ldr	r2, [pc, #100]	; (8004000 <main+0x10c>)
 8003f9c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  xTaskCreate(Task_Data_Display, "Data_Display", configMINIMAL_STACK_SIZE * 4, NULL, tskIDLE_PRIORITY + 1, NULL);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	4915      	ldr	r1, [pc, #84]	; (8004004 <main+0x110>)
 8003fae:	4816      	ldr	r0, [pc, #88]	; (8004008 <main+0x114>)
 8003fb0:	f00e f80d 	bl	8011fce <xTaskCreate>
  xTaskCreate(Task_ReadSensors, "ReadSensors", configMINIMAL_STACK_SIZE * 2, NULL, tskIDLE_PRIORITY + 1, NULL);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	2301      	movs	r3, #1
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc2:	4912      	ldr	r1, [pc, #72]	; (800400c <main+0x118>)
 8003fc4:	4812      	ldr	r0, [pc, #72]	; (8004010 <main+0x11c>)
 8003fc6:	f00e f802 	bl	8011fce <xTaskCreate>
  xTaskCreate(Task_SendDataToThingspeak, "SendDataToThingspeak", configMINIMAL_STACK_SIZE * 5, NULL, tskIDLE_PRIORITY + 2, NULL);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	2302      	movs	r3, #2
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <main+0x120>)
 8003fda:	480f      	ldr	r0, [pc, #60]	; (8004018 <main+0x124>)
 8003fdc:	f00d fff7 	bl	8011fce <xTaskCreate>

  vTaskStartScheduler();
 8003fe0:	f00e f976 	bl	80122d0 <vTaskStartScheduler>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003fe4:	f00d faac 	bl	8011540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003fe8:	e7fe      	b.n	8003fe8 <main+0xf4>
 8003fea:	bf00      	nop
 8003fec:	20000bd8 	.word	0x20000bd8
 8003ff0:	08016ff0 	.word	0x08016ff0
 8003ff4:	08016ffc 	.word	0x08016ffc
 8003ff8:	20001274 	.word	0x20001274
 8003ffc:	08017054 	.word	0x08017054
 8004000:	20000e6c 	.word	0x20000e6c
 8004004:	08017014 	.word	0x08017014
 8004008:	08003c01 	.word	0x08003c01
 800400c:	08017024 	.word	0x08017024
 8004010:	08003c59 	.word	0x08003c59
 8004014:	08017030 	.word	0x08017030
 8004018:	08003d25 	.word	0x08003d25

0800401c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b094      	sub	sp, #80	; 0x50
 8004020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004022:	f107 0320 	add.w	r3, r7, #32
 8004026:	2230      	movs	r2, #48	; 0x30
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f010 fd99 	bl	8014b62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	4b29      	ldr	r3, [pc, #164]	; (80040ec <SystemClock_Config+0xd0>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <SystemClock_Config+0xd0>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	6413      	str	r3, [r2, #64]	; 0x40
 8004050:	4b26      	ldr	r3, [pc, #152]	; (80040ec <SystemClock_Config+0xd0>)
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800405c:	2300      	movs	r3, #0
 800405e:	607b      	str	r3, [r7, #4]
 8004060:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <SystemClock_Config+0xd4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004068:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <SystemClock_Config+0xd4>)
 800406a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <SystemClock_Config+0xd4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800407c:	2309      	movs	r3, #9
 800407e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004080:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004086:	2301      	movs	r3, #1
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800408a:	2302      	movs	r3, #2
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800408e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004094:	2304      	movs	r3, #4
 8004096:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004098:	23a8      	movs	r3, #168	; 0xa8
 800409a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800409c:	2304      	movs	r3, #4
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80040a0:	2307      	movs	r3, #7
 80040a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040a4:	f107 0320 	add.w	r3, r7, #32
 80040a8:	4618      	mov	r0, r3
 80040aa:	f006 fdbf 	bl	800ac2c <HAL_RCC_OscConfig>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80040b4:	f000 fbe4 	bl	8004880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040b8:	230f      	movs	r3, #15
 80040ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040bc:	2302      	movs	r3, #2
 80040be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040ce:	f107 030c 	add.w	r3, r7, #12
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f007 f821 	bl	800b11c <HAL_RCC_ClockConfig>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80040e0:	f000 fbce 	bl	8004880 <Error_Handler>
  }
}
 80040e4:	bf00      	nop
 80040e6:	3750      	adds	r7, #80	; 0x50
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40007000 	.word	0x40007000

080040f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040fa:	463b      	mov	r3, r7
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004106:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004108:	4a28      	ldr	r2, [pc, #160]	; (80041ac <MX_ADC1_Init+0xb8>)
 800410a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800410c:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <MX_ADC1_Init+0xb4>)
 800410e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004112:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004114:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800411a:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <MX_ADC1_Init+0xb4>)
 800411c:	2201      	movs	r2, #1
 800411e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004120:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004122:	2201      	movs	r2, #1
 8004124:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004130:	2200      	movs	r2, #0
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004134:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <MX_ADC1_Init+0xbc>)
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <MX_ADC1_Init+0xb4>)
 800413c:	2200      	movs	r2, #0
 800413e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004142:	2202      	movs	r2, #2
 8004144:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004154:	4814      	ldr	r0, [pc, #80]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004156:	f001 f883 	bl	8005260 <HAL_ADC_Init>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004160:	f000 fb8e 	bl	8004880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004164:	2300      	movs	r3, #0
 8004166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004168:	2301      	movs	r3, #1
 800416a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800416c:	2307      	movs	r3, #7
 800416e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004170:	463b      	mov	r3, r7
 8004172:	4619      	mov	r1, r3
 8004174:	480c      	ldr	r0, [pc, #48]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004176:	f001 f9c5 	bl	8005504 <HAL_ADC_ConfigChannel>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004180:	f000 fb7e 	bl	8004880 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004184:	2301      	movs	r3, #1
 8004186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004188:	2302      	movs	r3, #2
 800418a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800418c:	463b      	mov	r3, r7
 800418e:	4619      	mov	r1, r3
 8004190:	4805      	ldr	r0, [pc, #20]	; (80041a8 <MX_ADC1_Init+0xb4>)
 8004192:	f001 f9b7 	bl	8005504 <HAL_ADC_ConfigChannel>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800419c:	f000 fb70 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20000b30 	.word	0x20000b30
 80041ac:	40012000 	.word	0x40012000
 80041b0:	0f000001 	.word	0x0f000001

080041b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <MX_I2C1_Init+0x50>)
 80041ba:	4a13      	ldr	r2, [pc, #76]	; (8004208 <MX_I2C1_Init+0x54>)
 80041bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <MX_I2C1_Init+0x50>)
 80041c0:	4a12      	ldr	r2, [pc, #72]	; (800420c <MX_I2C1_Init+0x58>)
 80041c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <MX_I2C1_Init+0x50>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <MX_I2C1_Init+0x50>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <MX_I2C1_Init+0x50>)
 80041d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <MX_I2C1_Init+0x50>)
 80041da:	2200      	movs	r2, #0
 80041dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <MX_I2C1_Init+0x50>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <MX_I2C1_Init+0x50>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <MX_I2C1_Init+0x50>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041f0:	4804      	ldr	r0, [pc, #16]	; (8004204 <MX_I2C1_Init+0x50>)
 80041f2:	f002 fadb 	bl	80067ac <HAL_I2C_Init>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80041fc:	f000 fb40 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000bd8 	.word	0x20000bd8
 8004208:	40005400 	.word	0x40005400
 800420c:	00061a80 	.word	0x00061a80

08004210 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b090      	sub	sp, #64	; 0x40
 8004214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	609a      	str	r2, [r3, #8]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004226:	2300      	movs	r3, #0
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800422a:	463b      	mov	r3, r7
 800422c:	2228      	movs	r2, #40	; 0x28
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f010 fc96 	bl	8014b62 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004236:	4b3a      	ldr	r3, [pc, #232]	; (8004320 <MX_RTC_Init+0x110>)
 8004238:	4a3a      	ldr	r2, [pc, #232]	; (8004324 <MX_RTC_Init+0x114>)
 800423a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800423c:	4b38      	ldr	r3, [pc, #224]	; (8004320 <MX_RTC_Init+0x110>)
 800423e:	2200      	movs	r2, #0
 8004240:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004242:	4b37      	ldr	r3, [pc, #220]	; (8004320 <MX_RTC_Init+0x110>)
 8004244:	227f      	movs	r2, #127	; 0x7f
 8004246:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <MX_RTC_Init+0x110>)
 800424a:	22ff      	movs	r2, #255	; 0xff
 800424c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800424e:	4b34      	ldr	r3, [pc, #208]	; (8004320 <MX_RTC_Init+0x110>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004254:	4b32      	ldr	r3, [pc, #200]	; (8004320 <MX_RTC_Init+0x110>)
 8004256:	2200      	movs	r2, #0
 8004258:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800425a:	4b31      	ldr	r3, [pc, #196]	; (8004320 <MX_RTC_Init+0x110>)
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004260:	482f      	ldr	r0, [pc, #188]	; (8004320 <MX_RTC_Init+0x110>)
 8004262:	f007 fa9b 	bl	800b79c <HAL_RTC_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800426c:	f000 fb08 	bl	8004880 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004270:	2300      	movs	r3, #0
 8004272:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800427c:	2300      	movs	r3, #0
 800427e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004282:	2300      	movs	r3, #0
 8004284:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004286:	2300      	movs	r3, #0
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800428a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800428e:	2201      	movs	r2, #1
 8004290:	4619      	mov	r1, r3
 8004292:	4823      	ldr	r0, [pc, #140]	; (8004320 <MX_RTC_Init+0x110>)
 8004294:	f007 faf8 	bl	800b888 <HAL_RTC_SetTime>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800429e:	f000 faef 	bl	8004880 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80042ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042be:	2201      	movs	r2, #1
 80042c0:	4619      	mov	r1, r3
 80042c2:	4817      	ldr	r0, [pc, #92]	; (8004320 <MX_RTC_Init+0x110>)
 80042c4:	f007 fbd8 	bl	800ba78 <HAL_RTC_SetDate>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80042ce:	f000 fad7 	bl	8004880 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80042da:	2300      	movs	r3, #0
 80042dc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80042fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004302:	463b      	mov	r3, r7
 8004304:	2201      	movs	r2, #1
 8004306:	4619      	mov	r1, r3
 8004308:	4805      	ldr	r0, [pc, #20]	; (8004320 <MX_RTC_Init+0x110>)
 800430a:	f007 fc88 	bl	800bc1e <HAL_RTC_SetAlarm>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8004314:	f000 fab4 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004318:	bf00      	nop
 800431a:	3740      	adds	r7, #64	; 0x40
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000cec 	.word	0x20000cec
 8004324:	40002800 	.word	0x40002800

08004328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800433c:	463b      	mov	r3, r7
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <MX_TIM2_Init+0x94>)
 8004346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800434a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <MX_TIM2_Init+0x94>)
 800434e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8004352:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <MX_TIM2_Init+0x94>)
 8004356:	2200      	movs	r2, #0
 8004358:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 800435a:	4b18      	ldr	r3, [pc, #96]	; (80043bc <MX_TIM2_Init+0x94>)
 800435c:	2202      	movs	r2, #2
 800435e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004360:	4b16      	ldr	r3, [pc, #88]	; (80043bc <MX_TIM2_Init+0x94>)
 8004362:	2200      	movs	r2, #0
 8004364:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <MX_TIM2_Init+0x94>)
 8004368:	2280      	movs	r2, #128	; 0x80
 800436a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800436c:	4813      	ldr	r0, [pc, #76]	; (80043bc <MX_TIM2_Init+0x94>)
 800436e:	f007 fe6f 	bl	800c050 <HAL_TIM_Base_Init>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004378:	f000 fa82 	bl	8004880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800437c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004382:	f107 0308 	add.w	r3, r7, #8
 8004386:	4619      	mov	r1, r3
 8004388:	480c      	ldr	r0, [pc, #48]	; (80043bc <MX_TIM2_Init+0x94>)
 800438a:	f008 fb07 	bl	800c99c <HAL_TIM_ConfigClockSource>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004394:	f000 fa74 	bl	8004880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004398:	2300      	movs	r3, #0
 800439a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800439c:	2300      	movs	r3, #0
 800439e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043a0:	463b      	mov	r3, r7
 80043a2:	4619      	mov	r1, r3
 80043a4:	4805      	ldr	r0, [pc, #20]	; (80043bc <MX_TIM2_Init+0x94>)
 80043a6:	f008 fe3d 	bl	800d024 <HAL_TIMEx_MasterConfigSynchronization>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80043b0:	f000 fa66 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80043b4:	bf00      	nop
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000d0c 	.word	0x20000d0c

080043c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043c6:	f107 0318 	add.w	r3, r7, #24
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d4:	f107 0310 	add.w	r3, r7, #16
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80043de:	463b      	mov	r3, r7
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043ea:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <MX_TIM3_Init+0xd8>)
 80043ec:	4a2b      	ldr	r2, [pc, #172]	; (800449c <MX_TIM3_Init+0xdc>)
 80043ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80043f0:	4b29      	ldr	r3, [pc, #164]	; (8004498 <MX_TIM3_Init+0xd8>)
 80043f2:	2253      	movs	r2, #83	; 0x53
 80043f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f6:	4b28      	ldr	r3, [pc, #160]	; (8004498 <MX_TIM3_Init+0xd8>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80043fc:	4b26      	ldr	r3, [pc, #152]	; (8004498 <MX_TIM3_Init+0xd8>)
 80043fe:	22c8      	movs	r2, #200	; 0xc8
 8004400:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004402:	4b25      	ldr	r3, [pc, #148]	; (8004498 <MX_TIM3_Init+0xd8>)
 8004404:	2200      	movs	r2, #0
 8004406:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <MX_TIM3_Init+0xd8>)
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800440e:	4822      	ldr	r0, [pc, #136]	; (8004498 <MX_TIM3_Init+0xd8>)
 8004410:	f007 fe1e 	bl	800c050 <HAL_TIM_Base_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 800441a:	f000 fa31 	bl	8004880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800441e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004422:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004424:	f107 0318 	add.w	r3, r7, #24
 8004428:	4619      	mov	r1, r3
 800442a:	481b      	ldr	r0, [pc, #108]	; (8004498 <MX_TIM3_Init+0xd8>)
 800442c:	f008 fab6 	bl	800c99c <HAL_TIM_ConfigClockSource>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8004436:	f000 fa23 	bl	8004880 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800443a:	4817      	ldr	r0, [pc, #92]	; (8004498 <MX_TIM3_Init+0xd8>)
 800443c:	f007 fee9 	bl	800c212 <HAL_TIM_IC_Init>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004446:	f000 fa1b 	bl	8004880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004452:	f107 0310 	add.w	r3, r7, #16
 8004456:	4619      	mov	r1, r3
 8004458:	480f      	ldr	r0, [pc, #60]	; (8004498 <MX_TIM3_Init+0xd8>)
 800445a:	f008 fde3 	bl	800d024 <HAL_TIMEx_MasterConfigSynchronization>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8004464:	f000 fa0c 	bl	8004880 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004468:	230a      	movs	r3, #10
 800446a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800446c:	2301      	movs	r3, #1
 800446e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004470:	2300      	movs	r3, #0
 8004472:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8004474:	230f      	movs	r3, #15
 8004476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004478:	463b      	mov	r3, r7
 800447a:	2200      	movs	r2, #0
 800447c:	4619      	mov	r1, r3
 800447e:	4806      	ldr	r0, [pc, #24]	; (8004498 <MX_TIM3_Init+0xd8>)
 8004480:	f008 f9f0 	bl	800c864 <HAL_TIM_IC_ConfigChannel>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800448a:	f000 f9f9 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800448e:	bf00      	nop
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000d54 	.word	0x20000d54
 800449c:	40000400 	.word	0x40000400

080044a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b4:	463b      	mov	r3, r7
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <MX_TIM4_Init+0x90>)
 80044be:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <MX_TIM4_Init+0x94>)
 80044c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <MX_TIM4_Init+0x90>)
 80044c4:	2253      	movs	r2, #83	; 0x53
 80044c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <MX_TIM4_Init+0x90>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 80044ce:	4b18      	ldr	r3, [pc, #96]	; (8004530 <MX_TIM4_Init+0x90>)
 80044d0:	2214      	movs	r2, #20
 80044d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d4:	4b16      	ldr	r3, [pc, #88]	; (8004530 <MX_TIM4_Init+0x90>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <MX_TIM4_Init+0x90>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044e0:	4813      	ldr	r0, [pc, #76]	; (8004530 <MX_TIM4_Init+0x90>)
 80044e2:	f007 fdb5 	bl	800c050 <HAL_TIM_Base_Init>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80044ec:	f000 f9c8 	bl	8004880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	4619      	mov	r1, r3
 80044fc:	480c      	ldr	r0, [pc, #48]	; (8004530 <MX_TIM4_Init+0x90>)
 80044fe:	f008 fa4d 	bl	800c99c <HAL_TIM_ConfigClockSource>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8004508:	f000 f9ba 	bl	8004880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800450c:	2300      	movs	r3, #0
 800450e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004510:	2300      	movs	r3, #0
 8004512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004514:	463b      	mov	r3, r7
 8004516:	4619      	mov	r1, r3
 8004518:	4805      	ldr	r0, [pc, #20]	; (8004530 <MX_TIM4_Init+0x90>)
 800451a:	f008 fd83 	bl	800d024 <HAL_TIMEx_MasterConfigSynchronization>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8004524:	f000 f9ac 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000d9c 	.word	0x20000d9c
 8004534:	40000800 	.word	0x40000800

08004538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <MX_USART1_UART_Init+0x50>)
 8004540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 8004544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 800454c:	2200      	movs	r2, #0
 800454e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 8004552:	2200      	movs	r2, #0
 8004554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 8004558:	2200      	movs	r2, #0
 800455a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 800455e:	220c      	movs	r2, #12
 8004560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004562:	4b08      	ldr	r3, [pc, #32]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 8004564:	2200      	movs	r2, #0
 8004566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 800456a:	2200      	movs	r2, #0
 800456c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800456e:	4805      	ldr	r0, [pc, #20]	; (8004584 <MX_USART1_UART_Init+0x4c>)
 8004570:	f008 fdda 	bl	800d128 <HAL_UART_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800457a:	f000 f981 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000de4 	.word	0x20000de4
 8004588:	40011000 	.word	0x40011000

0800458c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004590:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <MX_USART2_UART_Init+0x50>)
 8004594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 8004598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800459c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800459e:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 80045b2:	220c      	movs	r2, #12
 80045b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045c2:	4805      	ldr	r0, [pc, #20]	; (80045d8 <MX_USART2_UART_Init+0x4c>)
 80045c4:	f008 fdb0 	bl	800d128 <HAL_UART_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045ce:	f000 f957 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000e28 	.word	0x20000e28
 80045dc:	40004400 	.word	0x40004400

080045e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <MX_DMA_Init+0x78>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <MX_DMA_Init+0x78>)
 80045f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045f4:	6313      	str	r3, [r2, #48]	; 0x30
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <MX_DMA_Init+0x78>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <MX_DMA_Init+0x78>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a13      	ldr	r2, [pc, #76]	; (8004658 <MX_DMA_Init+0x78>)
 800460c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <MX_DMA_Init+0x78>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800461e:	2200      	movs	r2, #0
 8004620:	2105      	movs	r1, #5
 8004622:	200b      	movs	r0, #11
 8004624:	f001 fac6 	bl	8005bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004628:	200b      	movs	r0, #11
 800462a:	f001 fadf 	bl	8005bec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800462e:	2200      	movs	r2, #0
 8004630:	2105      	movs	r1, #5
 8004632:	2011      	movs	r0, #17
 8004634:	f001 fabe 	bl	8005bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004638:	2011      	movs	r0, #17
 800463a:	f001 fad7 	bl	8005bec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800463e:	2200      	movs	r2, #0
 8004640:	2105      	movs	r1, #5
 8004642:	2038      	movs	r0, #56	; 0x38
 8004644:	f001 fab6 	bl	8005bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004648:	2038      	movs	r0, #56	; 0x38
 800464a:	f001 facf 	bl	8005bec <HAL_NVIC_EnableIRQ>

}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800

0800465c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	609a      	str	r2, [r3, #8]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	4b33      	ldr	r3, [pc, #204]	; (8004744 <MX_GPIO_Init+0xe8>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a32      	ldr	r2, [pc, #200]	; (8004744 <MX_GPIO_Init+0xe8>)
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	4b30      	ldr	r3, [pc, #192]	; (8004744 <MX_GPIO_Init+0xe8>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <MX_GPIO_Init+0xe8>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <MX_GPIO_Init+0xe8>)
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b29      	ldr	r3, [pc, #164]	; (8004744 <MX_GPIO_Init+0xe8>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	4b25      	ldr	r3, [pc, #148]	; (8004744 <MX_GPIO_Init+0xe8>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	4a24      	ldr	r2, [pc, #144]	; (8004744 <MX_GPIO_Init+0xe8>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ba:	4b22      	ldr	r3, [pc, #136]	; (8004744 <MX_GPIO_Init+0xe8>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <MX_GPIO_Init+0xe8>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <MX_GPIO_Init+0xe8>)
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	6313      	str	r3, [r2, #48]	; 0x30
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <MX_GPIO_Init+0xe8>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|DHT22_Pin, GPIO_PIN_RESET);
 80046e2:	2200      	movs	r2, #0
 80046e4:	21a0      	movs	r1, #160	; 0xa0
 80046e6:	4818      	ldr	r0, [pc, #96]	; (8004748 <MX_GPIO_Init+0xec>)
 80046e8:	f002 f846 	bl	8006778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80046ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80046f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	4619      	mov	r1, r3
 8004702:	4812      	ldr	r0, [pc, #72]	; (800474c <MX_GPIO_Init+0xf0>)
 8004704:	f001 fe9c 	bl	8006440 <HAL_GPIO_Init>

  /*Configure GPIO pin : CNY70_Pin */
  GPIO_InitStruct.Pin = CNY70_Pin;
 8004708:	2301      	movs	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004710:	2302      	movs	r3, #2
 8004712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CNY70_GPIO_Port, &GPIO_InitStruct);
 8004714:	f107 0314 	add.w	r3, r7, #20
 8004718:	4619      	mov	r1, r3
 800471a:	480c      	ldr	r0, [pc, #48]	; (800474c <MX_GPIO_Init+0xf0>)
 800471c:	f001 fe90 	bl	8006440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 DHT22_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|DHT22_Pin;
 8004720:	23a0      	movs	r3, #160	; 0xa0
 8004722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004724:	2301      	movs	r3, #1
 8004726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472c:	2300      	movs	r3, #0
 800472e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004730:	f107 0314 	add.w	r3, r7, #20
 8004734:	4619      	mov	r1, r3
 8004736:	4804      	ldr	r0, [pc, #16]	; (8004748 <MX_GPIO_Init+0xec>)
 8004738:	f001 fe82 	bl	8006440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800473c:	bf00      	nop
 800473e:	3728      	adds	r7, #40	; 0x28
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40023800 	.word	0x40023800
 8004748:	40020000 	.word	0x40020000
 800474c:	40020800 	.word	0x40020800

08004750 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004758:	f00e ffe8 	bl	801372c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800475c:	2001      	movs	r0, #1
 800475e:	f00c ff42 	bl	80115e6 <osDelay>
 8004762:	e7fb      	b.n	800475c <StartDefaultTask+0xc>

08004764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a36      	ldr	r2, [pc, #216]	; (800484c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004776:	f000 fd2f 	bl	80051d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004782:	d11c      	bne.n	80047be <HAL_TIM_PeriodElapsedCallback+0x5a>
  {
	static uint8_t Scroll = 20;

	Scroll--;
 8004784:	4b32      	ldr	r3, [pc, #200]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	3b01      	subs	r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800478e:	701a      	strb	r2, [r3, #0]
	if(!Scroll)
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		Flag_Scroll = 1;
 8004798:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
		Scroll = 1;
 800479e:	4b2c      	ldr	r3, [pc, #176]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
	}

	Datos--;
 80047a4:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80047ae:	801a      	strh	r2, [r3, #0]
	if(!Datos)
 80047b0:	4b29      	ldr	r3, [pc, #164]	; (8004858 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		Flag_Datos = 1;
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
	}
  }

  static uint32_t contador_20us = 0, contador_2000us = 0;

  	if(htim->Instance == TIM4)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a27      	ldr	r2, [pc, #156]	; (8004860 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d13d      	bne.n	8004844 <HAL_TIM_PeriodElapsedCallback+0xe0>
  	{
  		if(start == 1)
 80047c8:	4b26      	ldr	r3, [pc, #152]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d104      	bne.n	80047da <HAL_TIM_PeriodElapsedCallback+0x76>
  		{
  			contador_20us++;
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3301      	adds	r3, #1
 80047d6:	4a24      	ldr	r2, [pc, #144]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80047d8:	6013      	str	r3, [r2, #0]
  		}

  		if(contador_20us >= 1)
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d013      	beq.n	800480a <HAL_TIM_PeriodElapsedCallback+0xa6>
  		{
  			Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin);
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	4821      	ldr	r0, [pc, #132]	; (800486c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80047e6:	f7fe fe77 	bl	80034d8 <Set_Pin_Input>
  			contador_20us = 0;
 80047ea:	4b1f      	ldr	r3, [pc, #124]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

  			start = 0;
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]

  			enableCapture = 1;
 80047f6:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
  			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80047fc:	2100      	movs	r1, #0
 80047fe:	481d      	ldr	r0, [pc, #116]	; (8004874 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004800:	f007 fd60 	bl	800c2c4 <HAL_TIM_IC_Start_IT>
  			HAL_TIM_Base_Stop_IT(&htim4);
 8004804:	481c      	ldr	r0, [pc, #112]	; (8004878 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004806:	f007 fcd5 	bl	800c1b4 <HAL_TIM_Base_Stop_IT>
  		}

  		if(!start)
 800480a:	4b16      	ldr	r3, [pc, #88]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_TIM_PeriodElapsedCallback+0xc2>
  		{
  			//Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);
  			HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 0);   // pull the pin low
 8004812:	2200      	movs	r2, #0
 8004814:	2180      	movs	r1, #128	; 0x80
 8004816:	4815      	ldr	r0, [pc, #84]	; (800486c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004818:	f001 ffae 	bl	8006778 <HAL_GPIO_WritePin>
  			contador_2000us++;
 800481c:	4b17      	ldr	r3, [pc, #92]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3301      	adds	r3, #1
 8004822:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004824:	6013      	str	r3, [r2, #0]
  		}

  		if(contador_2000us >= 100)
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b63      	cmp	r3, #99	; 0x63
 800482c:	d90a      	bls.n	8004844 <HAL_TIM_PeriodElapsedCallback+0xe0>
  		{
  			HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 1);   // pull the pin high
 800482e:	2201      	movs	r2, #1
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	480e      	ldr	r0, [pc, #56]	; (800486c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004834:	f001 ffa0 	bl	8006778 <HAL_GPIO_WritePin>

  			contador_2000us = 0;
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

  			start = 1;
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]
  		}
  	}

  /* USER CODE END Callback 1 */
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40010000 	.word	0x40010000
 8004850:	20000012 	.word	0x20000012
 8004854:	20001270 	.word	0x20001270
 8004858:	20000010 	.word	0x20000010
 800485c:	20001271 	.word	0x20001271
 8004860:	40000800 	.word	0x40000800
 8004864:	20000884 	.word	0x20000884
 8004868:	200012c0 	.word	0x200012c0
 800486c:	40020000 	.word	0x40020000
 8004870:	2000081d 	.word	0x2000081d
 8004874:	20000d54 	.word	0x20000d54
 8004878:	20000d9c 	.word	0x20000d9c
 800487c:	200012c4 	.word	0x200012c4

08004880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004884:	b672      	cpsid	i
}
 8004886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004888:	e7fe      	b.n	8004888 <Error_Handler+0x8>
	...

0800488c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_MspInit+0x54>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	4a11      	ldr	r2, [pc, #68]	; (80048e0 <HAL_MspInit+0x54>)
 800489c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a0:	6453      	str	r3, [r2, #68]	; 0x44
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_MspInit+0x54>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_MspInit+0x54>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_MspInit+0x54>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6413      	str	r3, [r2, #64]	; 0x40
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_MspInit+0x54>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048ca:	2200      	movs	r2, #0
 80048cc:	210f      	movs	r1, #15
 80048ce:	f06f 0001 	mvn.w	r0, #1
 80048d2:	f001 f96f 	bl	8005bb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800

080048e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <HAL_ADC_MspInit+0xdc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d157      	bne.n	80049b6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	4b2e      	ldr	r3, [pc, #184]	; (80049c4 <HAL_ADC_MspInit+0xe0>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	4a2d      	ldr	r2, [pc, #180]	; (80049c4 <HAL_ADC_MspInit+0xe0>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004914:	6453      	str	r3, [r2, #68]	; 0x44
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_ADC_MspInit+0xe0>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_ADC_MspInit+0xe0>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <HAL_ADC_MspInit+0xe0>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_ADC_MspInit+0xe0>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800493e:	2303      	movs	r3, #3
 8004940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004942:	2303      	movs	r3, #3
 8004944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494a:	f107 0314 	add.w	r3, r7, #20
 800494e:	4619      	mov	r1, r3
 8004950:	481d      	ldr	r0, [pc, #116]	; (80049c8 <HAL_ADC_MspInit+0xe4>)
 8004952:	f001 fd75 	bl	8006440 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 8004958:	4a1d      	ldr	r2, [pc, #116]	; (80049d0 <HAL_ADC_MspInit+0xec>)
 800495a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 800495e:	2200      	movs	r2, #0
 8004960:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004962:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 8004970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004974:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 8004978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800497c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 8004980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004984:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004986:	4b11      	ldr	r3, [pc, #68]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 8004988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800498c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 8004990:	2200      	movs	r2, #0
 8004992:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 8004996:	2200      	movs	r2, #0
 8004998:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800499a:	480c      	ldr	r0, [pc, #48]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 800499c:	f001 f934 	bl	8005c08 <HAL_DMA_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80049a6:	f7ff ff6b 	bl	8004880 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
 80049b0:	4a06      	ldr	r2, [pc, #24]	; (80049cc <HAL_ADC_MspInit+0xe8>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80049b6:	bf00      	nop
 80049b8:	3728      	adds	r7, #40	; 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40012000 	.word	0x40012000
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	20000b78 	.word	0x20000b78
 80049d0:	40026410 	.word	0x40026410

080049d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	; 0x28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a4c      	ldr	r2, [pc, #304]	; (8004b24 <HAL_I2C_MspInit+0x150>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f040 8091 	bne.w	8004b1a <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	4b4a      	ldr	r3, [pc, #296]	; (8004b28 <HAL_I2C_MspInit+0x154>)
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	4a49      	ldr	r2, [pc, #292]	; (8004b28 <HAL_I2C_MspInit+0x154>)
 8004a02:	f043 0302 	orr.w	r3, r3, #2
 8004a06:	6313      	str	r3, [r2, #48]	; 0x30
 8004a08:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_I2C_MspInit+0x154>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a1a:	2312      	movs	r3, #18
 8004a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a22:	2303      	movs	r3, #3
 8004a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a26:	2304      	movs	r3, #4
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	4619      	mov	r1, r3
 8004a30:	483e      	ldr	r0, [pc, #248]	; (8004b2c <HAL_I2C_MspInit+0x158>)
 8004a32:	f001 fd05 	bl	8006440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_I2C_MspInit+0x154>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	4a3a      	ldr	r2, [pc, #232]	; (8004b28 <HAL_I2C_MspInit+0x154>)
 8004a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a44:	6413      	str	r3, [r2, #64]	; 0x40
 8004a46:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <HAL_I2C_MspInit+0x154>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a54:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <HAL_I2C_MspInit+0x160>)
 8004a56:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004a58:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a60:	4b33      	ldr	r3, [pc, #204]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a66:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a72:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a74:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a7a:	4b2d      	ldr	r3, [pc, #180]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004a80:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a86:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a8c:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004a92:	4827      	ldr	r0, [pc, #156]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004a94:	f001 f8b8 	bl	8005c08 <HAL_DMA_Init>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8004a9e:	f7ff feef 	bl	8004880 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8004aa8:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <HAL_I2C_MspInit+0x15c>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004aae:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_I2C_MspInit+0x168>)
 8004ab2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004ab4:	4b20      	ldr	r3, [pc, #128]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004ab6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004abc:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ac2:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ace:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ae8:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004aee:	4812      	ldr	r0, [pc, #72]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004af0:	f001 f88a 	bl	8005c08 <HAL_DMA_Init>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8004afa:	f7ff fec1 	bl	8004880 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a0d      	ldr	r2, [pc, #52]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004b02:	635a      	str	r2, [r3, #52]	; 0x34
 8004b04:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <HAL_I2C_MspInit+0x164>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2105      	movs	r1, #5
 8004b0e:	201f      	movs	r0, #31
 8004b10:	f001 f850 	bl	8005bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004b14:	201f      	movs	r0, #31
 8004b16:	f001 f869 	bl	8005bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b1a:	bf00      	nop
 8004b1c:	3728      	adds	r7, #40	; 0x28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40005400 	.word	0x40005400
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40020400 	.word	0x40020400
 8004b30:	20000c2c 	.word	0x20000c2c
 8004b34:	40026010 	.word	0x40026010
 8004b38:	20000c8c 	.word	0x20000c8c
 8004b3c:	400260a0 	.word	0x400260a0

08004b40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b48:	f107 030c 	add.w	r3, r7, #12
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <HAL_RTC_MspInit+0x50>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b62:	2302      	movs	r3, #2
 8004b64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b6c:	f107 030c 	add.w	r3, r7, #12
 8004b70:	4618      	mov	r0, r3
 8004b72:	f006 fd25 	bl	800b5c0 <HAL_RCCEx_PeriphCLKConfig>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004b7c:	f7ff fe80 	bl	8004880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <HAL_RTC_MspInit+0x54>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004b86:	bf00      	nop
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40002800 	.word	0x40002800
 8004b94:	42470e3c 	.word	0x42470e3c

08004b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08c      	sub	sp, #48	; 0x30
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba0:	f107 031c 	add.w	r3, r7, #28
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb8:	d116      	bne.n	8004be8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a36      	ldr	r2, [pc, #216]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bca:	4b34      	ldr	r3, [pc, #208]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2105      	movs	r1, #5
 8004bda:	201c      	movs	r0, #28
 8004bdc:	f000 ffea 	bl	8005bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004be0:	201c      	movs	r0, #28
 8004be2:	f001 f803 	bl	8005bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004be6:	e054      	b.n	8004c92 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2c      	ldr	r2, [pc, #176]	; (8004ca0 <HAL_TIM_Base_MspInit+0x108>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d134      	bne.n	8004c5c <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004bfc:	f043 0302 	orr.w	r3, r3, #2
 8004c00:	6413      	str	r3, [r2, #64]	; 0x40
 8004c02:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	4a21      	ldr	r2, [pc, #132]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c2a:	2340      	movs	r3, #64	; 0x40
 8004c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3e:	f107 031c 	add.w	r3, r7, #28
 8004c42:	4619      	mov	r1, r3
 8004c44:	4817      	ldr	r0, [pc, #92]	; (8004ca4 <HAL_TIM_Base_MspInit+0x10c>)
 8004c46:	f001 fbfb 	bl	8006440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2105      	movs	r1, #5
 8004c4e:	201d      	movs	r0, #29
 8004c50:	f000 ffb0 	bl	8005bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c54:	201d      	movs	r0, #29
 8004c56:	f000 ffc9 	bl	8005bec <HAL_NVIC_EnableIRQ>
}
 8004c5a:	e01a      	b.n	8004c92 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <HAL_TIM_Base_MspInit+0x110>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d115      	bne.n	8004c92 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	6413      	str	r3, [r2, #64]	; 0x40
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_TIM_Base_MspInit+0x104>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2105      	movs	r1, #5
 8004c86:	201e      	movs	r0, #30
 8004c88:	f000 ff94 	bl	8005bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004c8c:	201e      	movs	r0, #30
 8004c8e:	f000 ffad 	bl	8005bec <HAL_NVIC_EnableIRQ>
}
 8004c92:	bf00      	nop
 8004c94:	3730      	adds	r7, #48	; 0x30
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	40000800 	.word	0x40000800

08004cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08c      	sub	sp, #48	; 0x30
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb4:	f107 031c 	add.w	r3, r7, #28
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a36      	ldr	r2, [pc, #216]	; (8004da4 <HAL_UART_MspInit+0xf8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d135      	bne.n	8004d3a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	4a34      	ldr	r2, [pc, #208]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004cd8:	f043 0310 	orr.w	r3, r3, #16
 8004cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cde:	4b32      	ldr	r3, [pc, #200]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cfa:	4b2b      	ldr	r3, [pc, #172]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d14:	2303      	movs	r3, #3
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d18:	2307      	movs	r3, #7
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1c:	f107 031c 	add.w	r3, r7, #28
 8004d20:	4619      	mov	r1, r3
 8004d22:	4822      	ldr	r0, [pc, #136]	; (8004dac <HAL_UART_MspInit+0x100>)
 8004d24:	f001 fb8c 	bl	8006440 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2105      	movs	r1, #5
 8004d2c:	2025      	movs	r0, #37	; 0x25
 8004d2e:	f000 ff41 	bl	8005bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d32:	2025      	movs	r0, #37	; 0x25
 8004d34:	f000 ff5a 	bl	8005bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d38:	e030      	b.n	8004d9c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <HAL_UART_MspInit+0x104>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d12b      	bne.n	8004d9c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d52:	6413      	str	r3, [r2, #64]	; 0x40
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_UART_MspInit+0xfc>)
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d7c:	230c      	movs	r3, #12
 8004d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d80:	2302      	movs	r3, #2
 8004d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d8c:	2307      	movs	r3, #7
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	4619      	mov	r1, r3
 8004d96:	4805      	ldr	r0, [pc, #20]	; (8004dac <HAL_UART_MspInit+0x100>)
 8004d98:	f001 fb52 	bl	8006440 <HAL_GPIO_Init>
}
 8004d9c:	bf00      	nop
 8004d9e:	3730      	adds	r7, #48	; 0x30
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40011000 	.word	0x40011000
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40020000 	.word	0x40020000
 8004db0:	40004400 	.word	0x40004400

08004db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08c      	sub	sp, #48	; 0x30
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <HAL_InitTick+0xd0>)
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	4a2d      	ldr	r2, [pc, #180]	; (8004e84 <HAL_InitTick+0xd0>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <HAL_InitTick+0xd0>)
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004de0:	f107 020c 	add.w	r2, r7, #12
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f006 fbb6 	bl	800b55c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004df0:	f006 fba0 	bl	800b534 <HAL_RCC_GetPCLK2Freq>
 8004df4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <HAL_InitTick+0xd4>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	0c9b      	lsrs	r3, r3, #18
 8004e00:	3b01      	subs	r3, #1
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004e04:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <HAL_InitTick+0xd8>)
 8004e06:	4a22      	ldr	r2, [pc, #136]	; (8004e90 <HAL_InitTick+0xdc>)
 8004e08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_InitTick+0xd8>)
 8004e0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004e12:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <HAL_InitTick+0xd8>)
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004e18:	4b1c      	ldr	r3, [pc, #112]	; (8004e8c <HAL_InitTick+0xd8>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_InitTick+0xd8>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_InitTick+0xd8>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004e2a:	4818      	ldr	r0, [pc, #96]	; (8004e8c <HAL_InitTick+0xd8>)
 8004e2c:	f007 f910 	bl	800c050 <HAL_TIM_Base_Init>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d11b      	bne.n	8004e76 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004e3e:	4813      	ldr	r0, [pc, #76]	; (8004e8c <HAL_InitTick+0xd8>)
 8004e40:	f007 f956 	bl	800c0f0 <HAL_TIM_Base_Start_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d111      	bne.n	8004e76 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e52:	2019      	movs	r0, #25
 8004e54:	f000 feca 	bl	8005bec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d808      	bhi.n	8004e70 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	2019      	movs	r0, #25
 8004e64:	f000 fea6 	bl	8005bb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e68:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <HAL_InitTick+0xe0>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e002      	b.n	8004e76 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3730      	adds	r7, #48	; 0x30
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40023800 	.word	0x40023800
 8004e88:	431bde83 	.word	0x431bde83
 8004e8c:	200012c8 	.word	0x200012c8
 8004e90:	40010000 	.word	0x40010000
 8004e94:	20000018 	.word	0x20000018

08004e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e9c:	e7fe      	b.n	8004e9c <NMI_Handler+0x4>

08004e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ea2:	e7fe      	b.n	8004ea2 <HardFault_Handler+0x4>

08004ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ea8:	e7fe      	b.n	8004ea8 <MemManage_Handler+0x4>

08004eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004eae:	e7fe      	b.n	8004eae <BusFault_Handler+0x4>

08004eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004eb4:	e7fe      	b.n	8004eb4 <UsageFault_Handler+0x4>

08004eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004ec8:	4802      	ldr	r0, [pc, #8]	; (8004ed4 <DMA1_Stream0_IRQHandler+0x10>)
 8004eca:	f001 f835 	bl	8005f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000c2c 	.word	0x20000c2c

08004ed8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <DMA1_Stream6_IRQHandler+0x10>)
 8004ede:	f001 f82b 	bl	8005f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000c8c 	.word	0x20000c8c

08004eec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ef0:	4802      	ldr	r0, [pc, #8]	; (8004efc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004ef2:	f007 fbaf 	bl	800c654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	200012c8 	.word	0x200012c8

08004f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <TIM2_IRQHandler+0x10>)
 8004f06:	f007 fba5 	bl	800c654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000d0c 	.word	0x20000d0c

08004f14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f18:	4802      	ldr	r0, [pc, #8]	; (8004f24 <TIM3_IRQHandler+0x10>)
 8004f1a:	f007 fb9b 	bl	800c654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000d54 	.word	0x20000d54

08004f28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004f2c:	4802      	ldr	r0, [pc, #8]	; (8004f38 <TIM4_IRQHandler+0x10>)
 8004f2e:	f007 fb91 	bl	800c654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000d9c 	.word	0x20000d9c

08004f3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004f40:	4802      	ldr	r0, [pc, #8]	; (8004f4c <I2C1_EV_IRQHandler+0x10>)
 8004f42:	f002 fb83 	bl	800764c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000bd8 	.word	0x20000bd8

08004f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 8004f54:	4803      	ldr	r0, [pc, #12]	; (8004f64 <USART1_IRQHandler+0x14>)
 8004f56:	f7fd fb8d 	bl	8002674 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f5a:	4802      	ldr	r0, [pc, #8]	; (8004f64 <USART1_IRQHandler+0x14>)
 8004f5c:	f008 f932 	bl	800d1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000de4 	.word	0x20000de4

08004f68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f6c:	4802      	ldr	r0, [pc, #8]	; (8004f78 <DMA2_Stream0_IRQHandler+0x10>)
 8004f6e:	f000 ffe3 	bl	8005f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000b78 	.word	0x20000b78

08004f7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f80:	4802      	ldr	r0, [pc, #8]	; (8004f8c <OTG_FS_IRQHandler+0x10>)
 8004f82:	f004 fd3d 	bl	8009a00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	2000558c 	.word	0x2000558c

08004f90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return 1;
 8004f94:	2301      	movs	r3, #1
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <_kill>:

int _kill(int pid, int sig)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004faa:	f00f fe91 	bl	8014cd0 <__errno>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2216      	movs	r2, #22
 8004fb2:	601a      	str	r2, [r3, #0]
  return -1;
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <_exit>:

void _exit (int status)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ffe7 	bl	8004fa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fd2:	e7fe      	b.n	8004fd2 <_exit+0x12>

08004fd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e00a      	b.n	8004ffc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fe6:	f3af 8000 	nop.w
 8004fea:	4601      	mov	r1, r0
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	60ba      	str	r2, [r7, #8]
 8004ff2:	b2ca      	uxtb	r2, r1
 8004ff4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	dbf0      	blt.n	8004fe6 <_read+0x12>
  }

  return len;
 8005004:	687b      	ldr	r3, [r7, #4]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e009      	b.n	8005034 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	60ba      	str	r2, [r7, #8]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3301      	adds	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	dbf1      	blt.n	8005020 <_write+0x12>
  }
  return len;
 800503c:	687b      	ldr	r3, [r7, #4]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <_close>:

int _close(int file)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800504e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800506e:	605a      	str	r2, [r3, #4]
  return 0;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <_isatty>:

int _isatty(int file)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005086:	2301      	movs	r3, #1
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050b8:	4a14      	ldr	r2, [pc, #80]	; (800510c <_sbrk+0x5c>)
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <_sbrk+0x60>)
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050c4:	4b13      	ldr	r3, [pc, #76]	; (8005114 <_sbrk+0x64>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <_sbrk+0x64>)
 80050ce:	4a12      	ldr	r2, [pc, #72]	; (8005118 <_sbrk+0x68>)
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050d2:	4b10      	ldr	r3, [pc, #64]	; (8005114 <_sbrk+0x64>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d207      	bcs.n	80050f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050e0:	f00f fdf6 	bl	8014cd0 <__errno>
 80050e4:	4603      	mov	r3, r0
 80050e6:	220c      	movs	r2, #12
 80050e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
 80050ee:	e009      	b.n	8005104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050f0:	4b08      	ldr	r3, [pc, #32]	; (8005114 <_sbrk+0x64>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <_sbrk+0x64>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	4a05      	ldr	r2, [pc, #20]	; (8005114 <_sbrk+0x64>)
 8005100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005102:	68fb      	ldr	r3, [r7, #12]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20018000 	.word	0x20018000
 8005110:	00000400 	.word	0x00000400
 8005114:	20001310 	.word	0x20001310
 8005118:	20005c00 	.word	0x20005c00

0800511c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <SystemInit+0x20>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	4a05      	ldr	r2, [pc, #20]	; (800513c <SystemInit+0x20>)
 8005128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800512c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	e000ed00 	.word	0xe000ed00

08005140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005144:	480d      	ldr	r0, [pc, #52]	; (800517c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005146:	490e      	ldr	r1, [pc, #56]	; (8005180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005148:	4a0e      	ldr	r2, [pc, #56]	; (8005184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800514a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800514c:	e002      	b.n	8005154 <LoopCopyDataInit>

0800514e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800514e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005152:	3304      	adds	r3, #4

08005154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005158:	d3f9      	bcc.n	800514e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800515a:	4a0b      	ldr	r2, [pc, #44]	; (8005188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800515c:	4c0b      	ldr	r4, [pc, #44]	; (800518c <LoopFillZerobss+0x26>)
  movs r3, #0
 800515e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005160:	e001      	b.n	8005166 <LoopFillZerobss>

08005162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005164:	3204      	adds	r2, #4

08005166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005168:	d3fb      	bcc.n	8005162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800516a:	f7ff ffd7 	bl	800511c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800516e:	f00f fdb5 	bl	8014cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005172:	f7fe febf 	bl	8003ef4 <main>
  bx  lr    
 8005176:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005178:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800517c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005180:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8005184:	08017bf4 	.word	0x08017bf4
  ldr r2, =_sbss
 8005188:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 800518c:	20005c00 	.word	0x20005c00

08005190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005190:	e7fe      	b.n	8005190 <ADC_IRQHandler>
	...

08005194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005198:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <HAL_Init+0x40>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a0d      	ldr	r2, [pc, #52]	; (80051d4 <HAL_Init+0x40>)
 800519e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <HAL_Init+0x40>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <HAL_Init+0x40>)
 80051aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051b0:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <HAL_Init+0x40>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <HAL_Init+0x40>)
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051bc:	2003      	movs	r0, #3
 80051be:	f000 fcee 	bl	8005b9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051c2:	200f      	movs	r0, #15
 80051c4:	f7ff fdf6 	bl	8004db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051c8:	f7ff fb60 	bl	800488c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40023c00 	.word	0x40023c00

080051d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_IncTick+0x20>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_IncTick+0x24>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4413      	add	r3, r2
 80051e8:	4a04      	ldr	r2, [pc, #16]	; (80051fc <HAL_IncTick+0x24>)
 80051ea:	6013      	str	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	2000001c 	.word	0x2000001c
 80051fc:	20001314 	.word	0x20001314

08005200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return uwTick;
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <HAL_GetTick+0x14>)
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20001314 	.word	0x20001314

08005218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005220:	f7ff ffee 	bl	8005200 <HAL_GetTick>
 8005224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d005      	beq.n	800523e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_Delay+0x44>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800523e:	bf00      	nop
 8005240:	f7ff ffde 	bl	8005200 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	429a      	cmp	r2, r3
 800524e:	d8f7      	bhi.n	8005240 <HAL_Delay+0x28>
  {
  }
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000001c 	.word	0x2000001c

08005260 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e033      	b.n	80052de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fb30 	bl	80048e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d118      	bne.n	80052d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052a6:	f023 0302 	bic.w	r3, r3, #2
 80052aa:	f043 0202 	orr.w	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa48 	bl	8005748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	f043 0201 	orr.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
 80052ce:	e001      	b.n	80052d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_ADC_Start_DMA+0x1e>
 8005302:	2302      	movs	r3, #2
 8005304:	e0ce      	b.n	80054a4 <HAL_ADC_Start_DMA+0x1bc>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d018      	beq.n	800534e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800532c:	4b5f      	ldr	r3, [pc, #380]	; (80054ac <HAL_ADC_Start_DMA+0x1c4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a5f      	ldr	r2, [pc, #380]	; (80054b0 <HAL_ADC_Start_DMA+0x1c8>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	0c9a      	lsrs	r2, r3, #18
 8005338:	4613      	mov	r3, r2
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	4413      	add	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005340:	e002      	b.n	8005348 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3b01      	subs	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f9      	bne.n	8005342 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535c:	d107      	bne.n	800536e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800536c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	f040 8086 	bne.w	800548a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053bc:	d106      	bne.n	80053cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	f023 0206 	bic.w	r2, r3, #6
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44
 80053ca:	e002      	b.n	80053d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053da:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <HAL_ADC_Start_DMA+0x1cc>)
 80053dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	4a35      	ldr	r2, [pc, #212]	; (80054b8 <HAL_ADC_Start_DMA+0x1d0>)
 80053e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	4a34      	ldr	r2, [pc, #208]	; (80054bc <HAL_ADC_Start_DMA+0x1d4>)
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	4a33      	ldr	r2, [pc, #204]	; (80054c0 <HAL_ADC_Start_DMA+0x1d8>)
 80053f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80053fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800540e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	334c      	adds	r3, #76	; 0x4c
 800542a:	4619      	mov	r1, r3
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f000 fc98 	bl	8005d64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10f      	bne.n	8005460 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d129      	bne.n	80054a2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	e020      	b.n	80054a2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <HAL_ADC_Start_DMA+0x1dc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d11b      	bne.n	80054a2 <HAL_ADC_Start_DMA+0x1ba>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d114      	bne.n	80054a2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	e00b      	b.n	80054a2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0210 	orr.w	r2, r3, #16
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000014 	.word	0x20000014
 80054b0:	431bde83 	.word	0x431bde83
 80054b4:	40012300 	.word	0x40012300
 80054b8:	08005941 	.word	0x08005941
 80054bc:	080059fb 	.word	0x080059fb
 80054c0:	08005a17 	.word	0x08005a17
 80054c4:	40012000 	.word	0x40012000

080054c8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e105      	b.n	800572c <HAL_ADC_ConfigChannel+0x228>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b09      	cmp	r3, #9
 800552e:	d925      	bls.n	800557c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68d9      	ldr	r1, [r3, #12]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	3b1e      	subs	r3, #30
 8005546:	2207      	movs	r2, #7
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	43da      	mvns	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	400a      	ands	r2, r1
 8005554:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68d9      	ldr	r1, [r3, #12]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	4618      	mov	r0, r3
 8005568:	4603      	mov	r3, r0
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4403      	add	r3, r0
 800556e:	3b1e      	subs	r3, #30
 8005570:	409a      	lsls	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	e022      	b.n	80055c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6919      	ldr	r1, [r3, #16]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	4613      	mov	r3, r2
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	4413      	add	r3, r2
 8005590:	2207      	movs	r2, #7
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43da      	mvns	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	400a      	ands	r2, r1
 800559e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6919      	ldr	r1, [r3, #16]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4618      	mov	r0, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4403      	add	r3, r0
 80055b8:	409a      	lsls	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d824      	bhi.n	8005614 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	3b05      	subs	r3, #5
 80055dc:	221f      	movs	r2, #31
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43da      	mvns	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	400a      	ands	r2, r1
 80055ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4618      	mov	r0, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	3b05      	subs	r3, #5
 8005606:	fa00 f203 	lsl.w	r2, r0, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	635a      	str	r2, [r3, #52]	; 0x34
 8005612:	e04c      	b.n	80056ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b0c      	cmp	r3, #12
 800561a:	d824      	bhi.n	8005666 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	3b23      	subs	r3, #35	; 0x23
 800562e:	221f      	movs	r2, #31
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43da      	mvns	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	400a      	ands	r2, r1
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	4618      	mov	r0, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	3b23      	subs	r3, #35	; 0x23
 8005658:	fa00 f203 	lsl.w	r2, r0, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
 8005664:	e023      	b.n	80056ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	3b41      	subs	r3, #65	; 0x41
 8005678:	221f      	movs	r2, #31
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43da      	mvns	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	400a      	ands	r2, r1
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	4618      	mov	r0, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	3b41      	subs	r3, #65	; 0x41
 80056a2:	fa00 f203 	lsl.w	r2, r0, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056ae:	4b22      	ldr	r3, [pc, #136]	; (8005738 <HAL_ADC_ConfigChannel+0x234>)
 80056b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_ADC_ConfigChannel+0x238>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d109      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x1cc>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b12      	cmp	r3, #18
 80056c2:	d105      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a19      	ldr	r2, [pc, #100]	; (800573c <HAL_ADC_ConfigChannel+0x238>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d123      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x21e>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d003      	beq.n	80056ea <HAL_ADC_ConfigChannel+0x1e6>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b11      	cmp	r3, #17
 80056e8:	d11b      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d111      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <HAL_ADC_ConfigChannel+0x23c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <HAL_ADC_ConfigChannel+0x240>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	0c9a      	lsrs	r2, r3, #18
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005714:	e002      	b.n	800571c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	3b01      	subs	r3, #1
 800571a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f9      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	40012300 	.word	0x40012300
 800573c:	40012000 	.word	0x40012000
 8005740:	20000014 	.word	0x20000014
 8005744:	431bde83 	.word	0x431bde83

08005748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005750:	4b79      	ldr	r3, [pc, #484]	; (8005938 <ADC_Init+0x1f0>)
 8005752:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	431a      	orrs	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800577c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	021a      	lsls	r2, r3, #8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80057a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6899      	ldr	r1, [r3, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	4a58      	ldr	r2, [pc, #352]	; (800593c <ADC_Init+0x1f4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d022      	beq.n	8005826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6899      	ldr	r1, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6899      	ldr	r1, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	e00f      	b.n	8005846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005844:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0202 	bic.w	r2, r2, #2
 8005854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6899      	ldr	r1, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7e1b      	ldrb	r3, [r3, #24]
 8005860:	005a      	lsls	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005882:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	3b01      	subs	r3, #1
 80058a0:	035a      	lsls	r2, r3, #13
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	e007      	b.n	80058bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	051a      	lsls	r2, r3, #20
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6899      	ldr	r1, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058fe:	025a      	lsls	r2, r3, #9
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6899      	ldr	r1, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	029a      	lsls	r2, r3, #10
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40012300 	.word	0x40012300
 800593c:	0f000001 	.word	0x0f000001

08005940 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005956:	2b00      	cmp	r3, #0
 8005958:	d13c      	bne.n	80059d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d12b      	bne.n	80059cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005978:	2b00      	cmp	r3, #0
 800597a:	d127      	bne.n	80059cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005994:	2b00      	cmp	r3, #0
 8005996:	d119      	bne.n	80059cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0220 	bic.w	r2, r2, #32
 80059a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff fd7b 	bl	80054c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80059d2:	e00e      	b.n	80059f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff fd85 	bl	80054f0 <HAL_ADC_ErrorCallback>
}
 80059e6:	e004      	b.n	80059f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff fd67 	bl	80054dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2240      	movs	r2, #64	; 0x40
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f043 0204 	orr.w	r2, r3, #4
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff fd5a 	bl	80054f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <__NVIC_SetPriorityGrouping+0x44>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a60:	4013      	ands	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a76:	4a04      	ldr	r2, [pc, #16]	; (8005a88 <__NVIC_SetPriorityGrouping+0x44>)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	60d3      	str	r3, [r2, #12]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f003 0307 	and.w	r3, r3, #7
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000ed00 	.word	0xe000ed00

08005aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	db0b      	blt.n	8005ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	f003 021f 	and.w	r2, r3, #31
 8005ac0:	4907      	ldr	r1, [pc, #28]	; (8005ae0 <__NVIC_EnableIRQ+0x38>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	2001      	movs	r0, #1
 8005aca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000e100 	.word	0xe000e100

08005ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	6039      	str	r1, [r7, #0]
 8005aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	db0a      	blt.n	8005b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	490c      	ldr	r1, [pc, #48]	; (8005b30 <__NVIC_SetPriority+0x4c>)
 8005afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b02:	0112      	lsls	r2, r2, #4
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	440b      	add	r3, r1
 8005b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b0c:	e00a      	b.n	8005b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	4908      	ldr	r1, [pc, #32]	; (8005b34 <__NVIC_SetPriority+0x50>)
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	3b04      	subs	r3, #4
 8005b1c:	0112      	lsls	r2, r2, #4
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	440b      	add	r3, r1
 8005b22:	761a      	strb	r2, [r3, #24]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	e000e100 	.word	0xe000e100
 8005b34:	e000ed00 	.word	0xe000ed00

08005b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	; 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f1c3 0307 	rsb	r3, r3, #7
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	bf28      	it	cs
 8005b56:	2304      	movcs	r3, #4
 8005b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2b06      	cmp	r3, #6
 8005b60:	d902      	bls.n	8005b68 <NVIC_EncodePriority+0x30>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3b03      	subs	r3, #3
 8005b66:	e000      	b.n	8005b6a <NVIC_EncodePriority+0x32>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43da      	mvns	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b80:	f04f 31ff 	mov.w	r1, #4294967295
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	43d9      	mvns	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b90:	4313      	orrs	r3, r2
         );
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ff4c 	bl	8005a44 <__NVIC_SetPriorityGrouping>
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bc6:	f7ff ff61 	bl	8005a8c <__NVIC_GetPriorityGrouping>
 8005bca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	6978      	ldr	r0, [r7, #20]
 8005bd2:	f7ff ffb1 	bl	8005b38 <NVIC_EncodePriority>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff ff80 	bl	8005ae4 <__NVIC_SetPriority>
}
 8005be4:	bf00      	nop
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ff54 	bl	8005aa8 <__NVIC_EnableIRQ>
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c14:	f7ff faf4 	bl	8005200 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e099      	b.n	8005d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c44:	e00f      	b.n	8005c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c46:	f7ff fadb 	bl	8005200 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	d908      	bls.n	8005c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e078      	b.n	8005d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e8      	bne.n	8005c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <HAL_DMA_Init+0x158>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d107      	bne.n	8005cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0307 	bic.w	r3, r3, #7
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d117      	bne.n	8005d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00e      	beq.n	8005d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fb1b 	bl	8006348 <DMA_CheckFifoParam>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2240      	movs	r2, #64	; 0x40
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d26:	2301      	movs	r3, #1
 8005d28:	e016      	b.n	8005d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fad2 	bl	80062dc <DMA_CalcBaseAndBitshift>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	223f      	movs	r2, #63	; 0x3f
 8005d42:	409a      	lsls	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	f010803f 	.word	0xf010803f

08005d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_DMA_Start_IT+0x26>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e040      	b.n	8005e0c <HAL_DMA_Start_IT+0xa8>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d12f      	bne.n	8005dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fa64 	bl	8006280 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	223f      	movs	r2, #63	; 0x3f
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0216 	orr.w	r2, r2, #22
 8005dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0208 	orr.w	r2, r2, #8
 8005dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e005      	b.n	8005e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e06:	2302      	movs	r3, #2
 8005e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e22:	f7ff f9ed 	bl	8005200 <HAL_GetTick>
 8005e26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d008      	beq.n	8005e46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e052      	b.n	8005eec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0216 	bic.w	r2, r2, #22
 8005e54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <HAL_DMA_Abort+0x62>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0208 	bic.w	r2, r2, #8
 8005e84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e96:	e013      	b.n	8005ec0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e98:	f7ff f9b2 	bl	8005200 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d90c      	bls.n	8005ec0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2203      	movs	r2, #3
 8005eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e015      	b.n	8005eec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e4      	bne.n	8005e98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed2:	223f      	movs	r2, #63	; 0x3f
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d004      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2280      	movs	r2, #128	; 0x80
 8005f0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e00c      	b.n	8005f2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2205      	movs	r2, #5
 8005f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f44:	4b8e      	ldr	r3, [pc, #568]	; (8006180 <HAL_DMA_IRQHandler+0x248>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a8e      	ldr	r2, [pc, #568]	; (8006184 <HAL_DMA_IRQHandler+0x24c>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	0a9b      	lsrs	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f62:	2208      	movs	r2, #8
 8005f64:	409a      	lsls	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01a      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d013      	beq.n	8005fa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0204 	bic.w	r2, r2, #4
 8005f8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f90:	2208      	movs	r2, #8
 8005f92:	409a      	lsls	r2, r3
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9c:	f043 0201 	orr.w	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa8:	2201      	movs	r2, #1
 8005faa:	409a      	lsls	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d012      	beq.n	8005fda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	409a      	lsls	r2, r3
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	f043 0202 	orr.w	r2, r3, #2
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fde:	2204      	movs	r2, #4
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d012      	beq.n	8006010 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00b      	beq.n	8006010 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	409a      	lsls	r2, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	f043 0204 	orr.w	r2, r3, #4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006014:	2210      	movs	r2, #16
 8006016:	409a      	lsls	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d043      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d03c      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006032:	2210      	movs	r2, #16
 8006034:	409a      	lsls	r2, r3
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d018      	beq.n	800607a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d108      	bne.n	8006068 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d024      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
 8006066:	e01f      	b.n	80060a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01b      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
 8006078:	e016      	b.n	80060a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d107      	bne.n	8006098 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0208 	bic.w	r2, r2, #8
 8006096:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ac:	2220      	movs	r2, #32
 80060ae:	409a      	lsls	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 808f 	beq.w	80061d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8087 	beq.w	80061d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ce:	2220      	movs	r2, #32
 80060d0:	409a      	lsls	r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b05      	cmp	r3, #5
 80060e0:	d136      	bne.n	8006150 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0216 	bic.w	r2, r2, #22
 80060f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006100:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <HAL_DMA_IRQHandler+0x1da>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0208 	bic.w	r2, r2, #8
 8006120:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	223f      	movs	r2, #63	; 0x3f
 8006128:	409a      	lsls	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006142:	2b00      	cmp	r3, #0
 8006144:	d07e      	beq.n	8006244 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	4798      	blx	r3
        }
        return;
 800614e:	e079      	b.n	8006244 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01d      	beq.n	800619a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10d      	bne.n	8006188 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	2b00      	cmp	r3, #0
 8006172:	d031      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
 800617c:	e02c      	b.n	80061d8 <HAL_DMA_IRQHandler+0x2a0>
 800617e:	bf00      	nop
 8006180:	20000014 	.word	0x20000014
 8006184:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d023      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
 8006198:	e01e      	b.n	80061d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10f      	bne.n	80061c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0210 	bic.w	r2, r2, #16
 80061b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d032      	beq.n	8006246 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d022      	beq.n	8006232 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2205      	movs	r2, #5
 80061f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	3301      	adds	r3, #1
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	429a      	cmp	r2, r3
 800620e:	d307      	bcc.n	8006220 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f2      	bne.n	8006204 <HAL_DMA_IRQHandler+0x2cc>
 800621e:	e000      	b.n	8006222 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006220:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	4798      	blx	r3
 8006242:	e000      	b.n	8006246 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006244:	bf00      	nop
    }
  }
}
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800625a:	b2db      	uxtb	r3, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800629c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d108      	bne.n	80062c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062be:	e007      	b.n	80062d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	60da      	str	r2, [r3, #12]
}
 80062d0:	bf00      	nop
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	3b10      	subs	r3, #16
 80062ec:	4a14      	ldr	r2, [pc, #80]	; (8006340 <DMA_CalcBaseAndBitshift+0x64>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	091b      	lsrs	r3, r3, #4
 80062f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062f6:	4a13      	ldr	r2, [pc, #76]	; (8006344 <DMA_CalcBaseAndBitshift+0x68>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b03      	cmp	r3, #3
 8006308:	d909      	bls.n	800631e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	1d1a      	adds	r2, r3, #4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	659a      	str	r2, [r3, #88]	; 0x58
 800631c:	e007      	b.n	800632e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006326:	f023 0303 	bic.w	r3, r3, #3
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	aaaaaaab 	.word	0xaaaaaaab
 8006344:	08017868 	.word	0x08017868

08006348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11f      	bne.n	80063a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d856      	bhi.n	8006416 <DMA_CheckFifoParam+0xce>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <DMA_CheckFifoParam+0x28>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006381 	.word	0x08006381
 8006374:	08006393 	.word	0x08006393
 8006378:	08006381 	.word	0x08006381
 800637c:	08006417 	.word	0x08006417
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d046      	beq.n	800641a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006390:	e043      	b.n	800641a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800639a:	d140      	bne.n	800641e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063a0:	e03d      	b.n	800641e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063aa:	d121      	bne.n	80063f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d837      	bhi.n	8006422 <DMA_CheckFifoParam+0xda>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <DMA_CheckFifoParam+0x70>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063c9 	.word	0x080063c9
 80063bc:	080063cf 	.word	0x080063cf
 80063c0:	080063c9 	.word	0x080063c9
 80063c4:	080063e1 	.word	0x080063e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
      break;
 80063cc:	e030      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d025      	beq.n	8006426 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063de:	e022      	b.n	8006426 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063e8:	d11f      	bne.n	800642a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063ee:	e01c      	b.n	800642a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d903      	bls.n	80063fe <DMA_CheckFifoParam+0xb6>
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d003      	beq.n	8006404 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063fc:	e018      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
      break;
 8006402:	e015      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00e      	beq.n	800642e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
      break;
 8006414:	e00b      	b.n	800642e <DMA_CheckFifoParam+0xe6>
      break;
 8006416:	bf00      	nop
 8006418:	e00a      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
      break;
 800641a:	bf00      	nop
 800641c:	e008      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
      break;
 800641e:	bf00      	nop
 8006420:	e006      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
      break;
 8006422:	bf00      	nop
 8006424:	e004      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
      break;
 8006426:	bf00      	nop
 8006428:	e002      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
      break;   
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <DMA_CheckFifoParam+0xe8>
      break;
 800642e:	bf00      	nop
    }
  } 
  
  return status; 
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop

08006440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006440:	b480      	push	{r7}
 8006442:	b089      	sub	sp, #36	; 0x24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800644e:	2300      	movs	r3, #0
 8006450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	e159      	b.n	8006710 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800645c:	2201      	movs	r2, #1
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4013      	ands	r3, r2
 800646e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	429a      	cmp	r2, r3
 8006476:	f040 8148 	bne.w	800670a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	2b01      	cmp	r3, #1
 8006484:	d005      	beq.n	8006492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800648e:	2b02      	cmp	r3, #2
 8006490:	d130      	bne.n	80064f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	2203      	movs	r2, #3
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43db      	mvns	r3, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4013      	ands	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064c8:	2201      	movs	r2, #1
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	43db      	mvns	r3, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4013      	ands	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	f003 0201 	and.w	r2, r3, #1
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d017      	beq.n	8006530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	2203      	movs	r2, #3
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	43db      	mvns	r3, r3
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	4013      	ands	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4313      	orrs	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d123      	bne.n	8006584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	08da      	lsrs	r2, r3, #3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3208      	adds	r2, #8
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	220f      	movs	r2, #15
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4013      	ands	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	4313      	orrs	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	08da      	lsrs	r2, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3208      	adds	r2, #8
 800657e:	69b9      	ldr	r1, [r7, #24]
 8006580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	2203      	movs	r2, #3
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4013      	ands	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f003 0203 	and.w	r2, r3, #3
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80a2 	beq.w	800670a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	4b57      	ldr	r3, [pc, #348]	; (8006728 <HAL_GPIO_Init+0x2e8>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	4a56      	ldr	r2, [pc, #344]	; (8006728 <HAL_GPIO_Init+0x2e8>)
 80065d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065d4:	6453      	str	r3, [r2, #68]	; 0x44
 80065d6:	4b54      	ldr	r3, [pc, #336]	; (8006728 <HAL_GPIO_Init+0x2e8>)
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065e2:	4a52      	ldr	r2, [pc, #328]	; (800672c <HAL_GPIO_Init+0x2ec>)
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	089b      	lsrs	r3, r3, #2
 80065e8:	3302      	adds	r3, #2
 80065ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	220f      	movs	r2, #15
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a49      	ldr	r2, [pc, #292]	; (8006730 <HAL_GPIO_Init+0x2f0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d019      	beq.n	8006642 <HAL_GPIO_Init+0x202>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a48      	ldr	r2, [pc, #288]	; (8006734 <HAL_GPIO_Init+0x2f4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <HAL_GPIO_Init+0x1fe>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a47      	ldr	r2, [pc, #284]	; (8006738 <HAL_GPIO_Init+0x2f8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00d      	beq.n	800663a <HAL_GPIO_Init+0x1fa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a46      	ldr	r2, [pc, #280]	; (800673c <HAL_GPIO_Init+0x2fc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <HAL_GPIO_Init+0x1f6>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a45      	ldr	r2, [pc, #276]	; (8006740 <HAL_GPIO_Init+0x300>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d101      	bne.n	8006632 <HAL_GPIO_Init+0x1f2>
 800662e:	2304      	movs	r3, #4
 8006630:	e008      	b.n	8006644 <HAL_GPIO_Init+0x204>
 8006632:	2307      	movs	r3, #7
 8006634:	e006      	b.n	8006644 <HAL_GPIO_Init+0x204>
 8006636:	2303      	movs	r3, #3
 8006638:	e004      	b.n	8006644 <HAL_GPIO_Init+0x204>
 800663a:	2302      	movs	r3, #2
 800663c:	e002      	b.n	8006644 <HAL_GPIO_Init+0x204>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <HAL_GPIO_Init+0x204>
 8006642:	2300      	movs	r3, #0
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	f002 0203 	and.w	r2, r2, #3
 800664a:	0092      	lsls	r2, r2, #2
 800664c:	4093      	lsls	r3, r2
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	4313      	orrs	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006654:	4935      	ldr	r1, [pc, #212]	; (800672c <HAL_GPIO_Init+0x2ec>)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	089b      	lsrs	r3, r3, #2
 800665a:	3302      	adds	r3, #2
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006662:	4b38      	ldr	r3, [pc, #224]	; (8006744 <HAL_GPIO_Init+0x304>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	43db      	mvns	r3, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4013      	ands	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006686:	4a2f      	ldr	r2, [pc, #188]	; (8006744 <HAL_GPIO_Init+0x304>)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800668c:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <HAL_GPIO_Init+0x304>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	43db      	mvns	r3, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4013      	ands	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066b0:	4a24      	ldr	r2, [pc, #144]	; (8006744 <HAL_GPIO_Init+0x304>)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066b6:	4b23      	ldr	r3, [pc, #140]	; (8006744 <HAL_GPIO_Init+0x304>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	43db      	mvns	r3, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <HAL_GPIO_Init+0x304>)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066e0:	4b18      	ldr	r3, [pc, #96]	; (8006744 <HAL_GPIO_Init+0x304>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006704:	4a0f      	ldr	r2, [pc, #60]	; (8006744 <HAL_GPIO_Init+0x304>)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	3301      	adds	r3, #1
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	f67f aea2 	bls.w	800645c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	3724      	adds	r7, #36	; 0x24
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40023800 	.word	0x40023800
 800672c:	40013800 	.word	0x40013800
 8006730:	40020000 	.word	0x40020000
 8006734:	40020400 	.word	0x40020400
 8006738:	40020800 	.word	0x40020800
 800673c:	40020c00 	.word	0x40020c00
 8006740:	40021000 	.word	0x40021000
 8006744:	40013c00 	.word	0x40013c00

08006748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	887b      	ldrh	r3, [r7, #2]
 800675a:	4013      	ands	r3, r2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]
 8006764:	e001      	b.n	800676a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
 8006784:	4613      	mov	r3, r2
 8006786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006788:	787b      	ldrb	r3, [r7, #1]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800678e:	887a      	ldrh	r2, [r7, #2]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006794:	e003      	b.n	800679e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006796:	887b      	ldrh	r3, [r7, #2]
 8006798:	041a      	lsls	r2, r3, #16
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	619a      	str	r2, [r3, #24]
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e12b      	b.n	8006a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fe f8fe 	bl	80049d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2224      	movs	r2, #36	; 0x24
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0201 	bic.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800680e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006810:	f004 fe7c 	bl	800b50c <HAL_RCC_GetPCLK1Freq>
 8006814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4a81      	ldr	r2, [pc, #516]	; (8006a20 <HAL_I2C_Init+0x274>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d807      	bhi.n	8006830 <HAL_I2C_Init+0x84>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a80      	ldr	r2, [pc, #512]	; (8006a24 <HAL_I2C_Init+0x278>)
 8006824:	4293      	cmp	r3, r2
 8006826:	bf94      	ite	ls
 8006828:	2301      	movls	r3, #1
 800682a:	2300      	movhi	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	e006      	b.n	800683e <HAL_I2C_Init+0x92>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a7d      	ldr	r2, [pc, #500]	; (8006a28 <HAL_I2C_Init+0x27c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	bf94      	ite	ls
 8006838:	2301      	movls	r3, #1
 800683a:	2300      	movhi	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e0e7      	b.n	8006a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a78      	ldr	r2, [pc, #480]	; (8006a2c <HAL_I2C_Init+0x280>)
 800684a:	fba2 2303 	umull	r2, r3, r2, r3
 800684e:	0c9b      	lsrs	r3, r3, #18
 8006850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4a6a      	ldr	r2, [pc, #424]	; (8006a20 <HAL_I2C_Init+0x274>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d802      	bhi.n	8006880 <HAL_I2C_Init+0xd4>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	3301      	adds	r3, #1
 800687e:	e009      	b.n	8006894 <HAL_I2C_Init+0xe8>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	4a69      	ldr	r2, [pc, #420]	; (8006a30 <HAL_I2C_Init+0x284>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	099b      	lsrs	r3, r3, #6
 8006892:	3301      	adds	r3, #1
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	430b      	orrs	r3, r1
 800689a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	495c      	ldr	r1, [pc, #368]	; (8006a20 <HAL_I2C_Init+0x274>)
 80068b0:	428b      	cmp	r3, r1
 80068b2:	d819      	bhi.n	80068e8 <HAL_I2C_Init+0x13c>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	1e59      	subs	r1, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	fbb1 f3f3 	udiv	r3, r1, r3
 80068c2:	1c59      	adds	r1, r3, #1
 80068c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068c8:	400b      	ands	r3, r1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <HAL_I2C_Init+0x138>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1e59      	subs	r1, r3, #1
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80068dc:	3301      	adds	r3, #1
 80068de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e2:	e051      	b.n	8006988 <HAL_I2C_Init+0x1dc>
 80068e4:	2304      	movs	r3, #4
 80068e6:	e04f      	b.n	8006988 <HAL_I2C_Init+0x1dc>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d111      	bne.n	8006914 <HAL_I2C_Init+0x168>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	1e58      	subs	r0, r3, #1
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6859      	ldr	r1, [r3, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	440b      	add	r3, r1
 80068fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006902:	3301      	adds	r3, #1
 8006904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006908:	2b00      	cmp	r3, #0
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	e012      	b.n	800693a <HAL_I2C_Init+0x18e>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	1e58      	subs	r0, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6859      	ldr	r1, [r3, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	0099      	lsls	r1, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	fbb0 f3f3 	udiv	r3, r0, r3
 800692a:	3301      	adds	r3, #1
 800692c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006930:	2b00      	cmp	r3, #0
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_I2C_Init+0x196>
 800693e:	2301      	movs	r3, #1
 8006940:	e022      	b.n	8006988 <HAL_I2C_Init+0x1dc>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10e      	bne.n	8006968 <HAL_I2C_Init+0x1bc>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	1e58      	subs	r0, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	440b      	add	r3, r1
 8006958:	fbb0 f3f3 	udiv	r3, r0, r3
 800695c:	3301      	adds	r3, #1
 800695e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006966:	e00f      	b.n	8006988 <HAL_I2C_Init+0x1dc>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1e58      	subs	r0, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6859      	ldr	r1, [r3, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	0099      	lsls	r1, r3, #2
 8006978:	440b      	add	r3, r1
 800697a:	fbb0 f3f3 	udiv	r3, r0, r3
 800697e:	3301      	adds	r3, #1
 8006980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	6809      	ldr	r1, [r1, #0]
 800698c:	4313      	orrs	r3, r2
 800698e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6911      	ldr	r1, [r2, #16]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	68d2      	ldr	r2, [r2, #12]
 80069c2:	4311      	orrs	r1, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	430b      	orrs	r3, r1
 80069ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695a      	ldr	r2, [r3, #20]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	000186a0 	.word	0x000186a0
 8006a24:	001e847f 	.word	0x001e847f
 8006a28:	003d08ff 	.word	0x003d08ff
 8006a2c:	431bde83 	.word	0x431bde83
 8006a30:	10624dd3 	.word	0x10624dd3

08006a34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	607a      	str	r2, [r7, #4]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	460b      	mov	r3, r1
 8006a42:	817b      	strh	r3, [r7, #10]
 8006a44:	4613      	mov	r3, r2
 8006a46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a48:	f7fe fbda 	bl	8005200 <HAL_GetTick>
 8006a4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	f040 80e0 	bne.w	8006c1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	2319      	movs	r3, #25
 8006a62:	2201      	movs	r2, #1
 8006a64:	4970      	ldr	r1, [pc, #448]	; (8006c28 <HAL_I2C_Master_Transmit+0x1f4>)
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f002 fc50 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
 8006a74:	e0d3      	b.n	8006c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_I2C_Master_Transmit+0x50>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e0cc      	b.n	8006c1e <HAL_I2C_Master_Transmit+0x1ea>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d007      	beq.n	8006aaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ab8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2221      	movs	r2, #33	; 0x21
 8006abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2210      	movs	r2, #16
 8006ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	893a      	ldrh	r2, [r7, #8]
 8006ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a50      	ldr	r2, [pc, #320]	; (8006c2c <HAL_I2C_Master_Transmit+0x1f8>)
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006aec:	8979      	ldrh	r1, [r7, #10]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6a3a      	ldr	r2, [r7, #32]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f002 f850 	bl	8008b98 <I2C_MasterRequestWrite>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e08d      	b.n	8006c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b02:	2300      	movs	r3, #0
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	613b      	str	r3, [r7, #16]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b18:	e066      	b.n	8006be8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	6a39      	ldr	r1, [r7, #32]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f002 fcca 	bl	80094b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d107      	bne.n	8006b42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e06b      	b.n	8006c1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d11b      	bne.n	8006bbc <HAL_I2C_Master_Transmit+0x188>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d017      	beq.n	8006bbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	6a39      	ldr	r1, [r7, #32]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f002 fcba 	bl	800953a <I2C_WaitOnBTFFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00d      	beq.n	8006be8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d107      	bne.n	8006be4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e01a      	b.n	8006c1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d194      	bne.n	8006b1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e000      	b.n	8006c1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	00100002 	.word	0x00100002
 8006c2c:	ffff0000 	.word	0xffff0000

08006c30 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	817b      	strh	r3, [r7, #10]
 8006c40:	4613      	mov	r3, r2
 8006c42:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	f040 810d 	bne.w	8006e70 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c56:	4b89      	ldr	r3, [pc, #548]	; (8006e7c <HAL_I2C_Master_Receive_DMA+0x24c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	08db      	lsrs	r3, r3, #3
 8006c5c:	4a88      	ldr	r2, [pc, #544]	; (8006e80 <HAL_I2C_Master_Receive_DMA+0x250>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	0a1a      	lsrs	r2, r3, #8
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009a      	lsls	r2, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d116      	bne.n	8006caa <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e0e3      	b.n	8006e72 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d0db      	beq.n	8006c70 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_I2C_Master_Receive_DMA+0x96>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e0d5      	b.n	8006e72 <HAL_I2C_Master_Receive_DMA+0x242>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d007      	beq.n	8006cec <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2222      	movs	r2, #34	; 0x22
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2210      	movs	r2, #16
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	893a      	ldrh	r2, [r7, #8]
 8006d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a56      	ldr	r2, [pc, #344]	; (8006e84 <HAL_I2C_Master_Receive_DMA+0x254>)
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006d2e:	897a      	ldrh	r2, [r7, #10]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d07b      	beq.n	8006e34 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d02a      	beq.n	8006d9a <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	4a4f      	ldr	r2, [pc, #316]	; (8006e88 <HAL_I2C_Master_Receive_DMA+0x258>)
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	4a4e      	ldr	r2, [pc, #312]	; (8006e8c <HAL_I2C_Master_Receive_DMA+0x25c>)
 8006d52:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	2200      	movs	r2, #0
 8006d5a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	2200      	movs	r2, #0
 8006d62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	2200      	movs	r2, #0
 8006d6a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	2200      	movs	r2, #0
 8006d72:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3310      	adds	r3, #16
 8006d7e:	4619      	mov	r1, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	461a      	mov	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8a:	f7fe ffeb 	bl	8005d64 <HAL_DMA_Start_IT>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d139      	bne.n	8006e0c <HAL_I2C_Master_Receive_DMA+0x1dc>
 8006d98:	e013      	b.n	8006dc2 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e057      	b.n	8006e72 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dd0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de0:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006df8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	e02f      	b.n	8006e6c <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	f043 0210 	orr.w	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e01e      	b.n	8006e72 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e4a:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e5a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e6a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8006e70:	2302      	movs	r3, #2
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000014 	.word	0x20000014
 8006e80:	14f8b589 	.word	0x14f8b589
 8006e84:	ffff0000 	.word	0xffff0000
 8006e88:	08008f99 	.word	0x08008f99
 8006e8c:	08009143 	.word	0x08009143

08006e90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	4608      	mov	r0, r1
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	817b      	strh	r3, [r7, #10]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	813b      	strh	r3, [r7, #8]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006eaa:	f7fe f9a9 	bl	8005200 <HAL_GetTick>
 8006eae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	f040 80d9 	bne.w	8007070 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	2319      	movs	r3, #25
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	496d      	ldr	r1, [pc, #436]	; (800707c <HAL_I2C_Mem_Write+0x1ec>)
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f002 fa1f 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e0cc      	b.n	8007072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_I2C_Mem_Write+0x56>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e0c5      	b.n	8007072 <HAL_I2C_Mem_Write+0x1e2>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d007      	beq.n	8006f0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2221      	movs	r2, #33	; 0x21
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2240      	movs	r2, #64	; 0x40
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a3a      	ldr	r2, [r7, #32]
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a4d      	ldr	r2, [pc, #308]	; (8007080 <HAL_I2C_Mem_Write+0x1f0>)
 8006f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f4e:	88f8      	ldrh	r0, [r7, #6]
 8006f50:	893a      	ldrh	r2, [r7, #8]
 8006f52:	8979      	ldrh	r1, [r7, #10]
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f001 fe9c 	bl	8008c9c <I2C_RequestMemoryWrite>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d052      	beq.n	8007010 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e081      	b.n	8007072 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f002 faa0 	bl	80094b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d107      	bne.n	8006f96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e06b      	b.n	8007072 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d11b      	bne.n	8007010 <HAL_I2C_Mem_Write+0x180>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d017      	beq.n	8007010 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	781a      	ldrb	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1aa      	bne.n	8006f6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f002 fa8c 	bl	800953a <I2C_WaitOnBTFFlagUntilTimeout>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00d      	beq.n	8007044 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	2b04      	cmp	r3, #4
 800702e:	d107      	bne.n	8007040 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800703e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e016      	b.n	8007072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	e000      	b.n	8007072 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007070:	2302      	movs	r3, #2
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	00100002 	.word	0x00100002
 8007080:	ffff0000 	.word	0xffff0000

08007084 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	4608      	mov	r0, r1
 800708e:	4611      	mov	r1, r2
 8007090:	461a      	mov	r2, r3
 8007092:	4603      	mov	r3, r0
 8007094:	817b      	strh	r3, [r7, #10]
 8007096:	460b      	mov	r3, r1
 8007098:	813b      	strh	r3, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800709e:	f7fe f8af 	bl	8005200 <HAL_GetTick>
 80070a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	f040 8208 	bne.w	80074c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	2319      	movs	r3, #25
 80070b8:	2201      	movs	r2, #1
 80070ba:	497b      	ldr	r1, [pc, #492]	; (80072a8 <HAL_I2C_Mem_Read+0x224>)
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f002 f925 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070c8:	2302      	movs	r3, #2
 80070ca:	e1fb      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_I2C_Mem_Read+0x56>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e1f4      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d007      	beq.n	8007100 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0201 	orr.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800710e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2222      	movs	r2, #34	; 0x22
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2240      	movs	r2, #64	; 0x40
 800711c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4a5b      	ldr	r2, [pc, #364]	; (80072ac <HAL_I2C_Mem_Read+0x228>)
 8007140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007142:	88f8      	ldrh	r0, [r7, #6]
 8007144:	893a      	ldrh	r2, [r7, #8]
 8007146:	8979      	ldrh	r1, [r7, #10]
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4603      	mov	r3, r0
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f001 fe38 	bl	8008dc8 <I2C_RequestMemoryRead>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e1b0      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007166:	2b00      	cmp	r3, #0
 8007168:	d113      	bne.n	8007192 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800716a:	2300      	movs	r3, #0
 800716c:	623b      	str	r3, [r7, #32]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	623b      	str	r3, [r7, #32]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	623b      	str	r3, [r7, #32]
 800717e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	e184      	b.n	800749c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007196:	2b01      	cmp	r3, #1
 8007198:	d11b      	bne.n	80071d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	e164      	b.n	800749c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d11b      	bne.n	8007212 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071fa:	2300      	movs	r3, #0
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	e144      	b.n	800749c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007228:	e138      	b.n	800749c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800722e:	2b03      	cmp	r3, #3
 8007230:	f200 80f1 	bhi.w	8007416 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007238:	2b01      	cmp	r3, #1
 800723a:	d123      	bne.n	8007284 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800723c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f002 f9ed 	bl	8009620 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e139      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007282:	e10b      	b.n	800749c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007288:	2b02      	cmp	r3, #2
 800728a:	d14e      	bne.n	800732a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	2200      	movs	r2, #0
 8007294:	4906      	ldr	r1, [pc, #24]	; (80072b0 <HAL_I2C_Mem_Read+0x22c>)
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f002 f838 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e10e      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
 80072a6:	bf00      	nop
 80072a8:	00100002 	.word	0x00100002
 80072ac:	ffff0000 	.word	0xffff0000
 80072b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007328:	e0b8      	b.n	800749c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	2200      	movs	r2, #0
 8007332:	4966      	ldr	r1, [pc, #408]	; (80074cc <HAL_I2C_Mem_Read+0x448>)
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f001 ffe9 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0bf      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	2200      	movs	r2, #0
 800738e:	494f      	ldr	r1, [pc, #316]	; (80074cc <HAL_I2C_Mem_Read+0x448>)
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f001 ffbb 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e091      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691a      	ldr	r2, [r3, #16]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	b29a      	uxth	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007414:	e042      	b.n	800749c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f002 f900 	bl	8009620 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e04c      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007446:	3b01      	subs	r3, #1
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b04      	cmp	r3, #4
 8007468:	d118      	bne.n	800749c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f47f aec2 	bne.w	800722a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	e000      	b.n	80074c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80074c2:	2302      	movs	r3, #2
  }
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3728      	adds	r7, #40	; 0x28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	00010004 	.word	0x00010004

080074d0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	4608      	mov	r0, r1
 80074da:	4611      	mov	r1, r2
 80074dc:	461a      	mov	r2, r3
 80074de:	4603      	mov	r3, r0
 80074e0:	817b      	strh	r3, [r7, #10]
 80074e2:	460b      	mov	r3, r1
 80074e4:	813b      	strh	r3, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	f040 809a 	bne.w	8007630 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80074fc:	4b50      	ldr	r3, [pc, #320]	; (8007640 <HAL_I2C_Mem_Read_IT+0x170>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	08db      	lsrs	r3, r3, #3
 8007502:	4a50      	ldr	r2, [pc, #320]	; (8007644 <HAL_I2C_Mem_Read_IT+0x174>)
 8007504:	fba2 2303 	umull	r2, r3, r2, r3
 8007508:	0a1a      	lsrs	r2, r3, #8
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009a      	lsls	r2, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	3b01      	subs	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d116      	bne.n	8007550 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	f043 0220 	orr.w	r2, r3, #32
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e070      	b.n	8007632 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b02      	cmp	r3, #2
 800755c:	d0db      	beq.n	8007516 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_I2C_Mem_Read_IT+0x9c>
 8007568:	2302      	movs	r3, #2
 800756a:	e062      	b.n	8007632 <HAL_I2C_Mem_Read_IT+0x162>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b01      	cmp	r3, #1
 8007580:	d007      	beq.n	8007592 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0201 	orr.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075a0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2222      	movs	r2, #34	; 0x22
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2240      	movs	r2, #64	; 0x40
 80075ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a3a      	ldr	r2, [r7, #32]
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <HAL_I2C_Mem_Read_IT+0x178>)
 80075d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80075d4:	897a      	ldrh	r2, [r7, #10]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80075da:	893a      	ldrh	r2, [r7, #8]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80075e0:	88fa      	ldrh	r2, [r7, #6]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075fa:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800760a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800762a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	e000      	b.n	8007632 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8007630:	2302      	movs	r3, #2
  }
}
 8007632:	4618      	mov	r0, r3
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	20000014 	.word	0x20000014
 8007644:	14f8b589 	.word	0x14f8b589
 8007648:	ffff0000 	.word	0xffff0000

0800764c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800766c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007674:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b10      	cmp	r3, #16
 800767a:	d003      	beq.n	8007684 <HAL_I2C_EV_IRQHandler+0x38>
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	f040 80b1 	bne.w	80077e6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10d      	bne.n	80076ba <HAL_I2C_EV_IRQHandler+0x6e>
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076a4:	d003      	beq.n	80076ae <HAL_I2C_EV_IRQHandler+0x62>
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076ac:	d101      	bne.n	80076b2 <HAL_I2C_EV_IRQHandler+0x66>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <HAL_I2C_EV_IRQHandler+0x68>
 80076b2:	2300      	movs	r3, #0
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	f000 8114 	beq.w	80078e2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <HAL_I2C_EV_IRQHandler+0x90>
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f002 f82b 	bl	800972a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fcb5 	bl	8008044 <I2C_Master_SB>
 80076da:	e083      	b.n	80077e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d008      	beq.n	80076f8 <HAL_I2C_EV_IRQHandler+0xac>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fd2d 	bl	8008150 <I2C_Master_ADD10>
 80076f6:	e075      	b.n	80077e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d008      	beq.n	8007714 <HAL_I2C_EV_IRQHandler+0xc8>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fd49 	bl	80081a4 <I2C_Master_ADDR>
 8007712:	e067      	b.n	80077e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b00      	cmp	r3, #0
 800771c:	d036      	beq.n	800778c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772c:	f000 80db 	beq.w	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00d      	beq.n	8007756 <HAL_I2C_EV_IRQHandler+0x10a>
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_I2C_EV_IRQHandler+0x10a>
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f92d 	bl	80079ae <I2C_MasterTransmit_TXE>
 8007754:	e046      	b.n	80077e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 80c2 	beq.w	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80bc 	beq.w	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b21      	cmp	r3, #33	; 0x21
 8007772:	d103      	bne.n	800777c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f9b6 	bl	8007ae6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800777a:	e0b4      	b.n	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	f040 80b1 	bne.w	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fa24 	bl	8007bd2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800778a:	e0ac      	b.n	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779a:	f000 80a4 	beq.w	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <HAL_I2C_EV_IRQHandler+0x178>
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d008      	beq.n	80077c4 <HAL_I2C_EV_IRQHandler+0x178>
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fa9c 	bl	8007cfa <I2C_MasterReceive_RXNE>
 80077c2:	e00f      	b.n	80077e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 808b 	beq.w	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 8085 	beq.w	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb47 	bl	8007e70 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077e2:	e080      	b.n	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
 80077e4:	e07f      	b.n	80078e6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	61fb      	str	r3, [r7, #28]
 80077f6:	e007      	b.n	8007808 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <HAL_I2C_EV_IRQHandler+0x1ea>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00c      	beq.n	8007836 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800782c:	69b9      	ldr	r1, [r7, #24]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 ff07 	bl	8008642 <I2C_Slave_ADDR>
 8007834:	e05a      	b.n	80078ec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f003 0310 	and.w	r3, r3, #16
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <HAL_I2C_EV_IRQHandler+0x206>
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 ff42 	bl	80086d4 <I2C_Slave_STOPF>
 8007850:	e04c      	b.n	80078ec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b21      	cmp	r3, #33	; 0x21
 8007856:	d002      	beq.n	800785e <HAL_I2C_EV_IRQHandler+0x212>
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b29      	cmp	r3, #41	; 0x29
 800785c:	d120      	bne.n	80078a0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00d      	beq.n	8007884 <HAL_I2C_EV_IRQHandler+0x238>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800786e:	2b00      	cmp	r3, #0
 8007870:	d008      	beq.n	8007884 <HAL_I2C_EV_IRQHandler+0x238>
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d103      	bne.n	8007884 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fe22 	bl	80084c6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007882:	e032      	b.n	80078ea <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d02d      	beq.n	80078ea <HAL_I2C_EV_IRQHandler+0x29e>
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007894:	2b00      	cmp	r3, #0
 8007896:	d028      	beq.n	80078ea <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fe51 	bl	8008540 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800789e:	e024      	b.n	80078ea <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00d      	beq.n	80078c6 <HAL_I2C_EV_IRQHandler+0x27a>
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <HAL_I2C_EV_IRQHandler+0x27a>
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fe5f 	bl	8008582 <I2C_SlaveReceive_RXNE>
 80078c4:	e012      	b.n	80078ec <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00d      	beq.n	80078ec <HAL_I2C_EV_IRQHandler+0x2a0>
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d008      	beq.n	80078ec <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fe8f 	bl	80085fe <I2C_SlaveReceive_BTF>
 80078e0:	e004      	b.n	80078ec <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80078e2:	bf00      	nop
 80078e4:	e002      	b.n	80078ec <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078e6:	bf00      	nop
 80078e8:	e000      	b.n	80078ec <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
 800794e:	4613      	mov	r3, r2
 8007950:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079c4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d150      	bne.n	8007a76 <I2C_MasterTransmit_TXE+0xc8>
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b21      	cmp	r3, #33	; 0x21
 80079d8:	d14d      	bne.n	8007a76 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d01d      	beq.n	8007a1c <I2C_MasterTransmit_TXE+0x6e>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d01a      	beq.n	8007a1c <I2C_MasterTransmit_TXE+0x6e>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079ec:	d016      	beq.n	8007a1c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079fc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2211      	movs	r2, #17
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff ff6c 	bl	80078f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a1a:	e060      	b.n	8007ade <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a2a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b40      	cmp	r3, #64	; 0x40
 8007a54:	d107      	bne.n	8007a66 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff ff87 	bl	8007972 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a64:	e03b      	b.n	8007ade <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7ff ff3f 	bl	80078f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a74:	e033      	b.n	8007ade <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b21      	cmp	r3, #33	; 0x21
 8007a7a:	d005      	beq.n	8007a88 <I2C_MasterTransmit_TXE+0xda>
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b40      	cmp	r3, #64	; 0x40
 8007a80:	d12d      	bne.n	8007ade <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	2b22      	cmp	r3, #34	; 0x22
 8007a86:	d12a      	bne.n	8007ade <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d108      	bne.n	8007aa4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007aa2:	e01c      	b.n	8007ade <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b40      	cmp	r3, #64	; 0x40
 8007aae:	d103      	bne.n	8007ab8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f88e 	bl	8007bd2 <I2C_MemoryTransmit_TXE_BTF>
}
 8007ab6:	e012      	b.n	8007ade <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007adc:	e7ff      	b.n	8007ade <I2C_MasterTransmit_TXE+0x130>
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b21      	cmp	r3, #33	; 0x21
 8007afe:	d164      	bne.n	8007bca <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d012      	beq.n	8007b30 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	781a      	ldrb	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007b2e:	e04c      	b.n	8007bca <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b08      	cmp	r3, #8
 8007b34:	d01d      	beq.n	8007b72 <I2C_MasterTransmit_BTF+0x8c>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d01a      	beq.n	8007b72 <I2C_MasterTransmit_BTF+0x8c>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b42:	d016      	beq.n	8007b72 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b52:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2211      	movs	r2, #17
 8007b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff fec1 	bl	80078f2 <HAL_I2C_MasterTxCpltCallback>
}
 8007b70:	e02b      	b.n	8007bca <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b80:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b90:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b40      	cmp	r3, #64	; 0x40
 8007baa:	d107      	bne.n	8007bbc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fedc 	bl	8007972 <HAL_I2C_MemTxCpltCallback>
}
 8007bba:	e006      	b.n	8007bca <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff fe94 	bl	80078f2 <HAL_I2C_MasterTxCpltCallback>
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d11d      	bne.n	8007c26 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d10b      	bne.n	8007c0a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c02:	1c9a      	adds	r2, r3, #2
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007c08:	e073      	b.n	8007cf2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	121b      	asrs	r3, r3, #8
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007c24:	e065      	b.n	8007cf2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d10b      	bne.n	8007c46 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007c44:	e055      	b.n	8007cf2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d151      	bne.n	8007cf2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b22      	cmp	r3, #34	; 0x22
 8007c52:	d10d      	bne.n	8007c70 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c62:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007c6e:	e040      	b.n	8007cf2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d015      	beq.n	8007ca6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b21      	cmp	r3, #33	; 0x21
 8007c7e:	d112      	bne.n	8007ca6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007ca4:	e025      	b.n	8007cf2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d120      	bne.n	8007cf2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	2b21      	cmp	r3, #33	; 0x21
 8007cb4:	d11d      	bne.n	8007cf2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cc4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cd4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff fe40 	bl	8007972 <HAL_I2C_MemTxCpltCallback>
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b22      	cmp	r3, #34	; 0x22
 8007d0c:	f040 80ac 	bne.w	8007e68 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d921      	bls.n	8007d62 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	f040 808c 	bne.w	8007e68 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d5e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007d60:	e082      	b.n	8007e68 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d075      	beq.n	8007e56 <I2C_MasterReceive_RXNE+0x15c>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d002      	beq.n	8007d76 <I2C_MasterReceive_RXNE+0x7c>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d16f      	bne.n	8007e56 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fc20 	bl	80095bc <I2C_WaitOnSTOPRequestThroughIT>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d142      	bne.n	8007e08 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d90:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007da0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691a      	ldr	r2, [r3, #16]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b40      	cmp	r3, #64	; 0x40
 8007dda:	d10a      	bne.n	8007df2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fb fe5a 	bl	8003aa4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007df0:	e03a      	b.n	8007e68 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2212      	movs	r2, #18
 8007dfe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff fd80 	bl	8007906 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e06:	e02f      	b.n	8007e68 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	b2d2      	uxtb	r2, r2
 8007e24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fd99 	bl	8007986 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e54:	e008      	b.n	8007e68 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e64:	605a      	str	r2, [r3, #4]
}
 8007e66:	e7ff      	b.n	8007e68 <I2C_MasterReceive_RXNE+0x16e>
 8007e68:	bf00      	nop
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d11b      	bne.n	8007ec0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e96:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007ebe:	e0bd      	b.n	800803c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d129      	bne.n	8007f1e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d00a      	beq.n	8007ef6 <I2C_MasterReceive_BTF+0x86>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d007      	beq.n	8007ef6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	b2d2      	uxtb	r2, r2
 8007f02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f1c:	e08e      	b.n	800803c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d176      	bne.n	8008016 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d002      	beq.n	8007f34 <I2C_MasterReceive_BTF+0xc4>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b10      	cmp	r3, #16
 8007f32:	d108      	bne.n	8007f46 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	e019      	b.n	8007f7a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d002      	beq.n	8007f52 <I2C_MasterReceive_BTF+0xe2>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d108      	bne.n	8007f64 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e00a      	b.n	8007f7a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d007      	beq.n	8007f7a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f78:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691a      	ldr	r2, [r3, #16]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007fd4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b40      	cmp	r3, #64	; 0x40
 8007fe8:	d10a      	bne.n	8008000 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7fb fd53 	bl	8003aa4 <HAL_I2C_MemRxCpltCallback>
}
 8007ffe:	e01d      	b.n	800803c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2212      	movs	r2, #18
 800800c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fc79 	bl	8007906 <HAL_I2C_MasterRxCpltCallback>
}
 8008014:	e012      	b.n	800803c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008032:	b29b      	uxth	r3, r3
 8008034:	3b01      	subs	r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b40      	cmp	r3, #64	; 0x40
 8008056:	d117      	bne.n	8008088 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805c:	2b00      	cmp	r3, #0
 800805e:	d109      	bne.n	8008074 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	b2db      	uxtb	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008070:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008072:	e067      	b.n	8008144 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f043 0301 	orr.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	611a      	str	r2, [r3, #16]
}
 8008086:	e05d      	b.n	8008144 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008090:	d133      	bne.n	80080fa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b21      	cmp	r3, #33	; 0x21
 800809c:	d109      	bne.n	80080b2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080ae:	611a      	str	r2, [r3, #16]
 80080b0:	e008      	b.n	80080c4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f043 0301 	orr.w	r3, r3, #1
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d004      	beq.n	80080d6 <I2C_Master_SB+0x92>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d108      	bne.n	80080e8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d032      	beq.n	8008144 <I2C_Master_SB+0x100>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02d      	beq.n	8008144 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080f6:	605a      	str	r2, [r3, #4]
}
 80080f8:	e024      	b.n	8008144 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10e      	bne.n	8008120 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008106:	b29b      	uxth	r3, r3
 8008108:	11db      	asrs	r3, r3, #7
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0306 	and.w	r3, r3, #6
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f063 030f 	orn	r3, r3, #15
 8008116:	b2da      	uxtb	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	611a      	str	r2, [r3, #16]
}
 800811e:	e011      	b.n	8008144 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008124:	2b01      	cmp	r3, #1
 8008126:	d10d      	bne.n	8008144 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812c:	b29b      	uxth	r3, r3
 800812e:	11db      	asrs	r3, r3, #7
 8008130:	b2db      	uxtb	r3, r3
 8008132:	f003 0306 	and.w	r3, r3, #6
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f063 030e 	orn	r3, r3, #14
 800813c:	b2da      	uxtb	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	611a      	str	r2, [r3, #16]
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815c:	b2da      	uxtb	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <I2C_Master_ADD10+0x26>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d108      	bne.n	8008188 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00c      	beq.n	8008198 <I2C_Master_ADD10+0x48>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008196:	605a      	str	r2, [r3, #4]
  }
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b091      	sub	sp, #68	; 0x44
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b22      	cmp	r3, #34	; 0x22
 80081cc:	f040 8169 	bne.w	80084a2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10f      	bne.n	80081f8 <I2C_Master_ADDR+0x54>
 80081d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081dc:	2b40      	cmp	r3, #64	; 0x40
 80081de:	d10b      	bne.n	80081f8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081e0:	2300      	movs	r3, #0
 80081e2:	633b      	str	r3, [r7, #48]	; 0x30
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	633b      	str	r3, [r7, #48]	; 0x30
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	633b      	str	r3, [r7, #48]	; 0x30
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	e160      	b.n	80084ba <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d11d      	bne.n	800823c <I2C_Master_ADDR+0x98>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008208:	d118      	bne.n	800823c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800820a:	2300      	movs	r3, #0
 800820c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800822e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	651a      	str	r2, [r3, #80]	; 0x50
 800823a:	e13e      	b.n	80084ba <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008240:	b29b      	uxth	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d113      	bne.n	800826e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008246:	2300      	movs	r3, #0
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	62bb      	str	r3, [r7, #40]	; 0x28
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e115      	b.n	800849a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008272:	b29b      	uxth	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	f040 808a 	bne.w	800838e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008280:	d137      	bne.n	80082f2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008290:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800829c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a0:	d113      	bne.n	80082ca <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	e0e7      	b.n	800849a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ca:	2300      	movs	r3, #0
 80082cc:	623b      	str	r3, [r7, #32]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	623b      	str	r3, [r7, #32]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	623b      	str	r3, [r7, #32]
 80082de:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e0d3      	b.n	800849a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d02e      	beq.n	8008356 <I2C_Master_ADDR+0x1b2>
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d02b      	beq.n	8008356 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	2b12      	cmp	r3, #18
 8008302:	d102      	bne.n	800830a <I2C_Master_ADDR+0x166>
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	2b01      	cmp	r3, #1
 8008308:	d125      	bne.n	8008356 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	2b04      	cmp	r3, #4
 800830e:	d00e      	beq.n	800832e <I2C_Master_ADDR+0x18a>
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	2b02      	cmp	r3, #2
 8008314:	d00b      	beq.n	800832e <I2C_Master_ADDR+0x18a>
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2b10      	cmp	r3, #16
 800831a:	d008      	beq.n	800832e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	e007      	b.n	800833e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800833c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	61fb      	str	r3, [r7, #28]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	e0a1      	b.n	800849a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008364:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008366:	2300      	movs	r3, #0
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	61bb      	str	r3, [r7, #24]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	61bb      	str	r3, [r7, #24]
 800837a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	e085      	b.n	800849a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008392:	b29b      	uxth	r3, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d14d      	bne.n	8008434 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	2b04      	cmp	r3, #4
 800839c:	d016      	beq.n	80083cc <I2C_Master_ADDR+0x228>
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d013      	beq.n	80083cc <I2C_Master_ADDR+0x228>
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	2b10      	cmp	r3, #16
 80083a8:	d010      	beq.n	80083cc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	e007      	b.n	80083dc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083da:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ea:	d117      	bne.n	800841c <I2C_Master_ADDR+0x278>
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083f2:	d00b      	beq.n	800840c <I2C_Master_ADDR+0x268>
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d008      	beq.n	800840c <I2C_Master_ADDR+0x268>
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d005      	beq.n	800840c <I2C_Master_ADDR+0x268>
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	2b10      	cmp	r3, #16
 8008404:	d002      	beq.n	800840c <I2C_Master_ADDR+0x268>
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2b20      	cmp	r3, #32
 800840a:	d107      	bne.n	800841c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800841a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	e032      	b.n	800849a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008442:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008452:	d117      	bne.n	8008484 <I2C_Master_ADDR+0x2e0>
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800845a:	d00b      	beq.n	8008474 <I2C_Master_ADDR+0x2d0>
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	2b01      	cmp	r3, #1
 8008460:	d008      	beq.n	8008474 <I2C_Master_ADDR+0x2d0>
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	2b08      	cmp	r3, #8
 8008466:	d005      	beq.n	8008474 <I2C_Master_ADDR+0x2d0>
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	2b10      	cmp	r3, #16
 800846c:	d002      	beq.n	8008474 <I2C_Master_ADDR+0x2d0>
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	2b20      	cmp	r3, #32
 8008472:	d107      	bne.n	8008484 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008482:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008484:	2300      	movs	r3, #0
 8008486:	613b      	str	r3, [r7, #16]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80084a0:	e00b      	b.n	80084ba <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	68fb      	ldr	r3, [r7, #12]
}
 80084b8:	e7ff      	b.n	80084ba <I2C_Master_ADDR+0x316>
 80084ba:	bf00      	nop
 80084bc:	3744      	adds	r7, #68	; 0x44
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084da:	b29b      	uxth	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d02b      	beq.n	8008538 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	781a      	ldrb	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008508:	b29b      	uxth	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d114      	bne.n	8008538 <I2C_SlaveTransmit_TXE+0x72>
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b29      	cmp	r3, #41	; 0x29
 8008512:	d111      	bne.n	8008538 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008522:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2221      	movs	r2, #33	; 0x21
 8008528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2228      	movs	r2, #40	; 0x28
 800852e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff f9f1 	bl	800791a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008538:	bf00      	nop
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d011      	beq.n	8008576 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	781a      	ldrb	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008590:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008596:	b29b      	uxth	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d02c      	beq.n	80085f6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691a      	ldr	r2, [r3, #16]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	b2d2      	uxtb	r2, r2
 80085a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d114      	bne.n	80085f6 <I2C_SlaveReceive_RXNE+0x74>
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	2b2a      	cmp	r3, #42	; 0x2a
 80085d0:	d111      	bne.n	80085f6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2222      	movs	r2, #34	; 0x22
 80085e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2228      	movs	r2, #40	; 0x28
 80085ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7ff f99c 	bl	800792e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860a:	b29b      	uxth	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d012      	beq.n	8008636 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	691a      	ldr	r2, [r3, #16]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	b2d2      	uxtb	r2, r2
 800861c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800865c:	2b28      	cmp	r3, #40	; 0x28
 800865e:	d125      	bne.n	80086ac <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800866e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800867a:	2301      	movs	r3, #1
 800867c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	81bb      	strh	r3, [r7, #12]
 800868e:	e002      	b.n	8008696 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800869e:	89ba      	ldrh	r2, [r7, #12]
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff f94c 	bl	8007942 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80086aa:	e00e      	b.n	80086ca <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ac:	2300      	movs	r3, #0
 80086ae:	60bb      	str	r3, [r7, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	60bb      	str	r3, [r7, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	60bb      	str	r3, [r7, #8]
 80086c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80086f4:	2300      	movs	r3, #0
 80086f6:	60bb      	str	r3, [r7, #8]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	60bb      	str	r3, [r7, #8]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008720:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800872c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008730:	d172      	bne.n	8008818 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b22      	cmp	r3, #34	; 0x22
 8008736:	d002      	beq.n	800873e <I2C_Slave_STOPF+0x6a>
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	2b2a      	cmp	r3, #42	; 0x2a
 800873c:	d135      	bne.n	80087aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	b29a      	uxth	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d005      	beq.n	8008762 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f043 0204 	orr.w	r2, r3, #4
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008770:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	4618      	mov	r0, r3
 8008778:	f7fd fd68 	bl	800624c <HAL_DMA_GetState>
 800877c:	4603      	mov	r3, r0
 800877e:	2b01      	cmp	r3, #1
 8008780:	d049      	beq.n	8008816 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	4a69      	ldr	r2, [pc, #420]	; (800892c <I2C_Slave_STOPF+0x258>)
 8008788:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	4618      	mov	r0, r3
 8008790:	f7fd fbb0 	bl	8005ef4 <HAL_DMA_Abort_IT>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d03d      	beq.n	8008816 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087a8:	e035      	b.n	8008816 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	f043 0204 	orr.w	r2, r3, #4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fd fd32 	bl	800624c <HAL_DMA_GetState>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d014      	beq.n	8008818 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	4a4e      	ldr	r2, [pc, #312]	; (800892c <I2C_Slave_STOPF+0x258>)
 80087f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fd fb7a 	bl	8005ef4 <HAL_DMA_Abort_IT>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d008      	beq.n	8008818 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	e000      	b.n	8008818 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008816:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800881c:	b29b      	uxth	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d03e      	beq.n	80088a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b04      	cmp	r3, #4
 800882e:	d112      	bne.n	8008856 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691a      	ldr	r2, [r3, #16]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	b29a      	uxth	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008860:	2b40      	cmp	r3, #64	; 0x40
 8008862:	d112      	bne.n	800888a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691a      	ldr	r2, [r3, #16]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	b2d2      	uxtb	r2, r2
 8008870:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008880:	b29b      	uxth	r3, r3
 8008882:	3b01      	subs	r3, #1
 8008884:	b29a      	uxth	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	f043 0204 	orr.w	r2, r3, #4
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f843 	bl	8008934 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80088ae:	e039      	b.n	8008924 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	2b2a      	cmp	r3, #42	; 0x2a
 80088b4:	d109      	bne.n	80088ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2228      	movs	r2, #40	; 0x28
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff f832 	bl	800792e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b28      	cmp	r3, #40	; 0x28
 80088d4:	d111      	bne.n	80088fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a15      	ldr	r2, [pc, #84]	; (8008930 <I2C_Slave_STOPF+0x25c>)
 80088da:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff f833 	bl	800795e <HAL_I2C_ListenCpltCallback>
}
 80088f8:	e014      	b.n	8008924 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	2b22      	cmp	r3, #34	; 0x22
 8008900:	d002      	beq.n	8008908 <I2C_Slave_STOPF+0x234>
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	2b22      	cmp	r3, #34	; 0x22
 8008906:	d10d      	bne.n	8008924 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff f805 	bl	800792e <HAL_I2C_SlaveRxCpltCallback>
}
 8008924:	bf00      	nop
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	080091bd 	.word	0x080091bd
 8008930:	ffff0000 	.word	0xffff0000

08008934 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008942:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800894a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	2b10      	cmp	r3, #16
 8008950:	d002      	beq.n	8008958 <I2C_ITError+0x24>
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	2b40      	cmp	r3, #64	; 0x40
 8008956:	d10a      	bne.n	800896e <I2C_ITError+0x3a>
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b22      	cmp	r3, #34	; 0x22
 800895c:	d107      	bne.n	800896e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800896c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008974:	2b28      	cmp	r3, #40	; 0x28
 8008976:	d107      	bne.n	8008988 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2228      	movs	r2, #40	; 0x28
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008986:	e015      	b.n	80089b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008996:	d00a      	beq.n	80089ae <I2C_ITError+0x7a>
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	2b60      	cmp	r3, #96	; 0x60
 800899c:	d007      	beq.n	80089ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089c2:	d162      	bne.n	8008a8a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d020      	beq.n	8008a24 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	4a6a      	ldr	r2, [pc, #424]	; (8008b90 <I2C_ITError+0x25c>)
 80089e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fd fa80 	bl	8005ef4 <HAL_DMA_Abort_IT>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8089 	beq.w	8008b0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0201 	bic.w	r2, r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4798      	blx	r3
 8008a22:	e074      	b.n	8008b0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	4a59      	ldr	r2, [pc, #356]	; (8008b90 <I2C_ITError+0x25c>)
 8008a2a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fd fa5f 	bl	8005ef4 <HAL_DMA_Abort_IT>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d068      	beq.n	8008b0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d10b      	bne.n	8008a62 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	b2d2      	uxtb	r2, r2
 8008a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0201 	bic.w	r2, r2, #1
 8008a70:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
 8008a88:	e041      	b.n	8008b0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b60      	cmp	r3, #96	; 0x60
 8008a94:	d125      	bne.n	8008ae2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	d10b      	bne.n	8008aca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	691a      	ldr	r2, [r3, #16]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0201 	bic.w	r2, r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fe ff5d 	bl	800799a <HAL_I2C_AbortCpltCallback>
 8008ae0:	e015      	b.n	8008b0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b40      	cmp	r3, #64	; 0x40
 8008aee:	d10b      	bne.n	8008b08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	691a      	ldr	r2, [r3, #16]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	b2d2      	uxtb	r2, r2
 8008afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7fe ff3c 	bl	8007986 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10e      	bne.n	8008b3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d109      	bne.n	8008b3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d113      	bne.n	8008b88 <I2C_ITError+0x254>
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	2b28      	cmp	r3, #40	; 0x28
 8008b64:	d110      	bne.n	8008b88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a0a      	ldr	r2, [pc, #40]	; (8008b94 <I2C_ITError+0x260>)
 8008b6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7fe feeb 	bl	800795e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b88:	bf00      	nop
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	080091bd 	.word	0x080091bd
 8008b94:	ffff0000 	.word	0xffff0000

08008b98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d006      	beq.n	8008bc2 <I2C_MasterRequestWrite+0x2a>
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d003      	beq.n	8008bc2 <I2C_MasterRequestWrite+0x2a>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008bc0:	d108      	bne.n	8008bd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e00b      	b.n	8008bec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd8:	2b12      	cmp	r3, #18
 8008bda:	d107      	bne.n	8008bec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fb87 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00d      	beq.n	8008c20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c12:	d103      	bne.n	8008c1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e035      	b.n	8008c8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c28:	d108      	bne.n	8008c3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c2a:	897b      	ldrh	r3, [r7, #10]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	461a      	mov	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c38:	611a      	str	r2, [r3, #16]
 8008c3a:	e01b      	b.n	8008c74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008c3c:	897b      	ldrh	r3, [r7, #10]
 8008c3e:	11db      	asrs	r3, r3, #7
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 0306 	and.w	r3, r3, #6
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f063 030f 	orn	r3, r3, #15
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	490e      	ldr	r1, [pc, #56]	; (8008c94 <I2C_MasterRequestWrite+0xfc>)
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fbad 	bl	80093ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e010      	b.n	8008c8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008c6a:	897b      	ldrh	r3, [r7, #10]
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4907      	ldr	r1, [pc, #28]	; (8008c98 <I2C_MasterRequestWrite+0x100>)
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 fb9d 	bl	80093ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	00010008 	.word	0x00010008
 8008c98:	00010002 	.word	0x00010002

08008c9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	817b      	strh	r3, [r7, #10]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	813b      	strh	r3, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fb1a 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00d      	beq.n	8008cfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cec:	d103      	bne.n	8008cf6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e05f      	b.n	8008dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008cfa:	897b      	ldrh	r3, [r7, #10]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	6a3a      	ldr	r2, [r7, #32]
 8008d0e:	492d      	ldr	r1, [pc, #180]	; (8008dc4 <I2C_RequestMemoryWrite+0x128>)
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fb52 	bl	80093ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e04c      	b.n	8008dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	617b      	str	r3, [r7, #20]
 8008d34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d38:	6a39      	ldr	r1, [r7, #32]
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fbbc 	bl	80094b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00d      	beq.n	8008d62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4a:	2b04      	cmp	r3, #4
 8008d4c:	d107      	bne.n	8008d5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e02b      	b.n	8008dba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d105      	bne.n	8008d74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d68:	893b      	ldrh	r3, [r7, #8]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	611a      	str	r2, [r3, #16]
 8008d72:	e021      	b.n	8008db8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d74:	893b      	ldrh	r3, [r7, #8]
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d84:	6a39      	ldr	r1, [r7, #32]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fb96 	bl	80094b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00d      	beq.n	8008dae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d107      	bne.n	8008daa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008da8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e005      	b.n	8008dba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008dae:	893b      	ldrh	r3, [r7, #8]
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	00010002 	.word	0x00010002

08008dc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	817b      	strh	r3, [r7, #10]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	813b      	strh	r3, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008df0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fa7c 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00d      	beq.n	8008e36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e28:	d103      	bne.n	8008e32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e0aa      	b.n	8008f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e36:	897b      	ldrh	r3, [r7, #10]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	6a3a      	ldr	r2, [r7, #32]
 8008e4a:	4952      	ldr	r1, [pc, #328]	; (8008f94 <I2C_RequestMemoryRead+0x1cc>)
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 fab4 	bl	80093ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e097      	b.n	8008f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e74:	6a39      	ldr	r1, [r7, #32]
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 fb1e 	bl	80094b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00d      	beq.n	8008e9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d107      	bne.n	8008e9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e076      	b.n	8008f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e9e:	88fb      	ldrh	r3, [r7, #6]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d105      	bne.n	8008eb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ea4:	893b      	ldrh	r3, [r7, #8]
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	611a      	str	r2, [r3, #16]
 8008eae:	e021      	b.n	8008ef4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008eb0:	893b      	ldrh	r3, [r7, #8]
 8008eb2:	0a1b      	lsrs	r3, r3, #8
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec0:	6a39      	ldr	r1, [r7, #32]
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 faf8 	bl	80094b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00d      	beq.n	8008eea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d107      	bne.n	8008ee6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ee4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e050      	b.n	8008f8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008eea:	893b      	ldrh	r3, [r7, #8]
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef6:	6a39      	ldr	r1, [r7, #32]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 fadd 	bl	80094b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00d      	beq.n	8008f20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d107      	bne.n	8008f1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e035      	b.n	8008f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 f9e5 	bl	800930c <I2C_WaitOnFlagUntilTimeout>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00d      	beq.n	8008f64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f56:	d103      	bne.n	8008f60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e013      	b.n	8008f8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008f64:	897b      	ldrh	r3, [r7, #10]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	f043 0301 	orr.w	r3, r3, #1
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	6a3a      	ldr	r2, [r7, #32]
 8008f78:	4906      	ldr	r1, [pc, #24]	; (8008f94 <I2C_RequestMemoryRead+0x1cc>)
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fa1d 	bl	80093ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	00010002 	.word	0x00010002

08008f98 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fac:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fb4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008fca:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	2200      	movs	r2, #0
 8008fda:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	2200      	movs	r2, #0
 8008fea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008fec:	7cfb      	ldrb	r3, [r7, #19]
 8008fee:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008ff2:	2b21      	cmp	r3, #33	; 0x21
 8008ff4:	d007      	beq.n	8009006 <I2C_DMAXferCplt+0x6e>
 8008ff6:	7cfb      	ldrb	r3, [r7, #19]
 8008ff8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008ffc:	2b22      	cmp	r3, #34	; 0x22
 8008ffe:	d131      	bne.n	8009064 <I2C_DMAXferCplt+0xcc>
 8009000:	7cbb      	ldrb	r3, [r7, #18]
 8009002:	2b20      	cmp	r3, #32
 8009004:	d12e      	bne.n	8009064 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009014:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2200      	movs	r2, #0
 800901a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800901c:	7cfb      	ldrb	r3, [r7, #19]
 800901e:	2b29      	cmp	r3, #41	; 0x29
 8009020:	d10a      	bne.n	8009038 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2221      	movs	r2, #33	; 0x21
 8009026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2228      	movs	r2, #40	; 0x28
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009030:	6978      	ldr	r0, [r7, #20]
 8009032:	f7fe fc72 	bl	800791a <HAL_I2C_SlaveTxCpltCallback>
 8009036:	e00c      	b.n	8009052 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009038:	7cfb      	ldrb	r3, [r7, #19]
 800903a:	2b2a      	cmp	r3, #42	; 0x2a
 800903c:	d109      	bne.n	8009052 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2222      	movs	r2, #34	; 0x22
 8009042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2228      	movs	r2, #40	; 0x28
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800904c:	6978      	ldr	r0, [r7, #20]
 800904e:	f7fe fc6e 	bl	800792e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009060:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009062:	e06a      	b.n	800913a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d064      	beq.n	800913a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009074:	b29b      	uxth	r3, r3
 8009076:	2b01      	cmp	r3, #1
 8009078:	d107      	bne.n	800908a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009088:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009098:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090a0:	d009      	beq.n	80090b6 <I2C_DMAXferCplt+0x11e>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d006      	beq.n	80090b6 <I2C_DMAXferCplt+0x11e>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80090ae:	d002      	beq.n	80090b6 <I2C_DMAXferCplt+0x11e>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	d107      	bne.n	80090c6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80090d4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090e4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2200      	movs	r2, #0
 80090ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80090f4:	6978      	ldr	r0, [r7, #20]
 80090f6:	f7fe fc46 	bl	8007986 <HAL_I2C_ErrorCallback>
}
 80090fa:	e01e      	b.n	800913a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2220      	movs	r2, #32
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	d10a      	bne.n	8009126 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2200      	movs	r2, #0
 800911c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800911e:	6978      	ldr	r0, [r7, #20]
 8009120:	f7fa fcc0 	bl	8003aa4 <HAL_I2C_MemRxCpltCallback>
}
 8009124:	e009      	b.n	800913a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2212      	movs	r2, #18
 8009132:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009134:	6978      	ldr	r0, [r7, #20]
 8009136:	f7fe fbe6 	bl	8007906 <HAL_I2C_MasterRxCpltCallback>
}
 800913a:	bf00      	nop
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009154:	2b00      	cmp	r3, #0
 8009156:	d003      	beq.n	8009160 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915c:	2200      	movs	r2, #0
 800915e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	2200      	movs	r2, #0
 800916e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7fd f879 	bl	8006268 <HAL_DMA_GetError>
 8009176:	4603      	mov	r3, r0
 8009178:	2b02      	cmp	r3, #2
 800917a:	d01b      	beq.n	80091b4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800918a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2220      	movs	r2, #32
 8009196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	f043 0210 	orr.w	r2, r3, #16
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7fe fbe9 	bl	8007986 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80091b4:	bf00      	nop
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80091d6:	4b4b      	ldr	r3, [pc, #300]	; (8009304 <I2C_DMAAbort+0x148>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	08db      	lsrs	r3, r3, #3
 80091dc:	4a4a      	ldr	r2, [pc, #296]	; (8009308 <I2C_DMAAbort+0x14c>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	0a1a      	lsrs	r2, r3, #8
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	00da      	lsls	r2, r3, #3
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d106      	bne.n	8009204 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	f043 0220 	orr.w	r2, r3, #32
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009202:	e00a      	b.n	800921a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3b01      	subs	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009218:	d0ea      	beq.n	80091f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009226:	2200      	movs	r2, #0
 8009228:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	2200      	movs	r2, #0
 8009238:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009248:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2200      	movs	r2, #0
 800924e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925c:	2200      	movs	r2, #0
 800925e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	2200      	movs	r2, #0
 800926e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0201 	bic.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b60      	cmp	r3, #96	; 0x60
 800928a:	d10e      	bne.n	80092aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2220      	movs	r2, #32
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2200      	movs	r2, #0
 80092a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80092a2:	6978      	ldr	r0, [r7, #20]
 80092a4:	f7fe fb79 	bl	800799a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092a8:	e027      	b.n	80092fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80092aa:	7cfb      	ldrb	r3, [r7, #19]
 80092ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80092b0:	2b28      	cmp	r3, #40	; 0x28
 80092b2:	d117      	bne.n	80092e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2200      	movs	r2, #0
 80092d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2228      	movs	r2, #40	; 0x28
 80092de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80092e2:	e007      	b.n	80092f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80092f4:	6978      	ldr	r0, [r7, #20]
 80092f6:	f7fe fb46 	bl	8007986 <HAL_I2C_ErrorCallback>
}
 80092fa:	bf00      	nop
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000014 	.word	0x20000014
 8009308:	14f8b589 	.word	0x14f8b589

0800930c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	4613      	mov	r3, r2
 800931a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800931c:	e025      	b.n	800936a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009324:	d021      	beq.n	800936a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009326:	f7fb ff6b 	bl	8005200 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	429a      	cmp	r2, r3
 8009334:	d302      	bcc.n	800933c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d116      	bne.n	800936a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2220      	movs	r2, #32
 8009346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	f043 0220 	orr.w	r2, r3, #32
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e023      	b.n	80093b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	0c1b      	lsrs	r3, r3, #16
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	d10d      	bne.n	8009390 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	43da      	mvns	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4013      	ands	r3, r2
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	bf0c      	ite	eq
 8009386:	2301      	moveq	r3, #1
 8009388:	2300      	movne	r3, #0
 800938a:	b2db      	uxtb	r3, r3
 800938c:	461a      	mov	r2, r3
 800938e:	e00c      	b.n	80093aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	43da      	mvns	r2, r3
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4013      	ands	r3, r2
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	bf0c      	ite	eq
 80093a2:	2301      	moveq	r3, #1
 80093a4:	2300      	movne	r3, #0
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	461a      	mov	r2, r3
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d0b6      	beq.n	800931e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093c8:	e051      	b.n	800946e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d8:	d123      	bne.n	8009422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80093f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	f043 0204 	orr.w	r2, r3, #4
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e046      	b.n	80094b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d021      	beq.n	800946e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800942a:	f7fb fee9 	bl	8005200 <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	429a      	cmp	r2, r3
 8009438:	d302      	bcc.n	8009440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d116      	bne.n	800946e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2220      	movs	r2, #32
 800944a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	f043 0220 	orr.w	r2, r3, #32
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e020      	b.n	80094b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	0c1b      	lsrs	r3, r3, #16
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b01      	cmp	r3, #1
 8009476:	d10c      	bne.n	8009492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	43da      	mvns	r2, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4013      	ands	r3, r2
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	bf14      	ite	ne
 800948a:	2301      	movne	r3, #1
 800948c:	2300      	moveq	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	e00b      	b.n	80094aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	43da      	mvns	r2, r3
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	4013      	ands	r3, r2
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	bf14      	ite	ne
 80094a4:	2301      	movne	r3, #1
 80094a6:	2300      	moveq	r3, #0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d18d      	bne.n	80093ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094c4:	e02d      	b.n	8009522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 f900 	bl	80096cc <I2C_IsAcknowledgeFailed>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e02d      	b.n	8009532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d021      	beq.n	8009522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094de:	f7fb fe8f 	bl	8005200 <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d302      	bcc.n	80094f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d116      	bne.n	8009522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	f043 0220 	orr.w	r2, r3, #32
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e007      	b.n	8009532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952c:	2b80      	cmp	r3, #128	; 0x80
 800952e:	d1ca      	bne.n	80094c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009546:	e02d      	b.n	80095a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f8bf 	bl	80096cc <I2C_IsAcknowledgeFailed>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e02d      	b.n	80095b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955e:	d021      	beq.n	80095a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009560:	f7fb fe4e 	bl	8005200 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	429a      	cmp	r2, r3
 800956e:	d302      	bcc.n	8009576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d116      	bne.n	80095a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	f043 0220 	orr.w	r2, r3, #32
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e007      	b.n	80095b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d1ca      	bne.n	8009548 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80095c8:	4b13      	ldr	r3, [pc, #76]	; (8009618 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	08db      	lsrs	r3, r3, #3
 80095ce:	4a13      	ldr	r2, [pc, #76]	; (800961c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80095d0:	fba2 2303 	umull	r2, r3, r2, r3
 80095d4:	0a1a      	lsrs	r2, r3, #8
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d107      	bne.n	80095fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	f043 0220 	orr.w	r2, r3, #32
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e008      	b.n	800960c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009608:	d0e9      	beq.n	80095de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	20000014 	.word	0x20000014
 800961c:	14f8b589 	.word	0x14f8b589

08009620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800962c:	e042      	b.n	80096b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	f003 0310 	and.w	r3, r3, #16
 8009638:	2b10      	cmp	r3, #16
 800963a:	d119      	bne.n	8009670 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f06f 0210 	mvn.w	r2, #16
 8009644:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2220      	movs	r2, #32
 8009650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e029      	b.n	80096c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009670:	f7fb fdc6 	bl	8005200 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d116      	bne.n	80096b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	f043 0220 	orr.w	r2, r3, #32
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e007      	b.n	80096c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096be:	2b40      	cmp	r3, #64	; 0x40
 80096c0:	d1b5      	bne.n	800962e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e2:	d11b      	bne.n	800971c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2220      	movs	r2, #32
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	f043 0204 	orr.w	r2, r3, #4
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e000      	b.n	800971e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009736:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800973a:	d103      	bne.n	8009744 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009742:	e007      	b.n	8009754 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800974c:	d102      	bne.n	8009754 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2208      	movs	r2, #8
 8009752:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009762:	b08f      	sub	sp, #60	; 0x3c
 8009764:	af0a      	add	r7, sp, #40	; 0x28
 8009766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e10f      	b.n	8009992 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f00a f941 	bl	8013a14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2203      	movs	r2, #3
 8009796:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f004 fce2 	bl	800e17a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	687e      	ldr	r6, [r7, #4]
 80097be:	466d      	mov	r5, sp
 80097c0:	f106 0410 	add.w	r4, r6, #16
 80097c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80097d4:	1d33      	adds	r3, r6, #4
 80097d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097d8:	6838      	ldr	r0, [r7, #0]
 80097da:	f004 fbb9 	bl	800df50 <USB_CoreInit>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e0d0      	b.n	8009992 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f004 fcd0 	bl	800e19c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
 8009800:	e04a      	b.n	8009898 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009802:	7bfa      	ldrb	r2, [r7, #15]
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	333d      	adds	r3, #61	; 0x3d
 8009812:	2201      	movs	r2, #1
 8009814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009816:	7bfa      	ldrb	r2, [r7, #15]
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	333c      	adds	r3, #60	; 0x3c
 8009826:	7bfa      	ldrb	r2, [r7, #15]
 8009828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800982a:	7bfa      	ldrb	r2, [r7, #15]
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	b298      	uxth	r0, r3
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	4613      	mov	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	440b      	add	r3, r1
 800983c:	3344      	adds	r3, #68	; 0x44
 800983e:	4602      	mov	r2, r0
 8009840:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009842:	7bfa      	ldrb	r2, [r7, #15]
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	4613      	mov	r3, r2
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	4413      	add	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	440b      	add	r3, r1
 8009850:	3340      	adds	r3, #64	; 0x40
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009856:	7bfa      	ldrb	r2, [r7, #15]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	440b      	add	r3, r1
 8009864:	3348      	adds	r3, #72	; 0x48
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800986a:	7bfa      	ldrb	r2, [r7, #15]
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	4613      	mov	r3, r2
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	440b      	add	r3, r1
 8009878:	334c      	adds	r3, #76	; 0x4c
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800987e:	7bfa      	ldrb	r2, [r7, #15]
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	4613      	mov	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	440b      	add	r3, r1
 800988c:	3354      	adds	r3, #84	; 0x54
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	3301      	adds	r3, #1
 8009896:	73fb      	strb	r3, [r7, #15]
 8009898:	7bfa      	ldrb	r2, [r7, #15]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d3af      	bcc.n	8009802 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
 80098a6:	e044      	b.n	8009932 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80098a8:	7bfa      	ldrb	r2, [r7, #15]
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4613      	mov	r3, r2
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80098ba:	2200      	movs	r2, #0
 80098bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80098be:	7bfa      	ldrb	r2, [r7, #15]
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	4613      	mov	r3, r2
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	440b      	add	r3, r1
 80098cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80098d0:	7bfa      	ldrb	r2, [r7, #15]
 80098d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80098d4:	7bfa      	ldrb	r2, [r7, #15]
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	4613      	mov	r3, r2
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80098ea:	7bfa      	ldrb	r2, [r7, #15]
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009900:	7bfa      	ldrb	r2, [r7, #15]
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009916:	7bfa      	ldrb	r2, [r7, #15]
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	4613      	mov	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	4413      	add	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	440b      	add	r3, r1
 8009924:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009928:	2200      	movs	r2, #0
 800992a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	3301      	adds	r3, #1
 8009930:	73fb      	strb	r3, [r7, #15]
 8009932:	7bfa      	ldrb	r2, [r7, #15]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	d3b5      	bcc.n	80098a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	603b      	str	r3, [r7, #0]
 8009942:	687e      	ldr	r6, [r7, #4]
 8009944:	466d      	mov	r5, sp
 8009946:	f106 0410 	add.w	r4, r6, #16
 800994a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800994c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800994e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009952:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009956:	e885 0003 	stmia.w	r5, {r0, r1}
 800995a:	1d33      	adds	r3, r6, #4
 800995c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800995e:	6838      	ldr	r0, [r7, #0]
 8009960:	f004 fc68 	bl	800e234 <USB_DevInit>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d005      	beq.n	8009976 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2202      	movs	r2, #2
 800996e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e00d      	b.n	8009992 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f005 fdb7 	bl	800f4fe <USB_DevDisconnect>

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800999a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d101      	bne.n	80099b6 <HAL_PCD_Start+0x1c>
 80099b2:	2302      	movs	r3, #2
 80099b4:	e020      	b.n	80099f8 <HAL_PCD_Start+0x5e>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d109      	bne.n	80099da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d005      	beq.n	80099da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4618      	mov	r0, r3
 80099e0:	f004 fbba 	bl	800e158 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f005 fd67 	bl	800f4bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b08d      	sub	sp, #52	; 0x34
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f005 fe25 	bl	800f666 <USB_GetMode>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f040 848a 	bne.w	800a338 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f005 fd89 	bl	800f540 <USB_ReadInterrupts>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8480 	beq.w	800a336 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	0a1b      	lsrs	r3, r3, #8
 8009a40:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f005 fd76 	bl	800f540 <USB_ReadInterrupts>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f003 0302 	and.w	r3, r3, #2
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d107      	bne.n	8009a6e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	695a      	ldr	r2, [r3, #20]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f002 0202 	and.w	r2, r2, #2
 8009a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f005 fd64 	bl	800f540 <USB_ReadInterrupts>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	2b10      	cmp	r3, #16
 8009a80:	d161      	bne.n	8009b46 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699a      	ldr	r2, [r3, #24]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0210 	bic.w	r2, r2, #16
 8009a90:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	f003 020f 	and.w	r2, r3, #15
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	4413      	add	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	3304      	adds	r3, #4
 8009ab0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	0c5b      	lsrs	r3, r3, #17
 8009ab6:	f003 030f 	and.w	r3, r3, #15
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d124      	bne.n	8009b08 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d035      	beq.n	8009b36 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	091b      	lsrs	r3, r3, #4
 8009ad2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	461a      	mov	r2, r3
 8009adc:	6a38      	ldr	r0, [r7, #32]
 8009ade:	f005 fb9b 	bl	800f218 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	691a      	ldr	r2, [r3, #16]
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	091b      	lsrs	r3, r3, #4
 8009aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009aee:	441a      	add	r2, r3
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	6a1a      	ldr	r2, [r3, #32]
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	091b      	lsrs	r3, r3, #4
 8009afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b00:	441a      	add	r2, r3
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	621a      	str	r2, [r3, #32]
 8009b06:	e016      	b.n	8009b36 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	0c5b      	lsrs	r3, r3, #17
 8009b0c:	f003 030f 	and.w	r3, r3, #15
 8009b10:	2b06      	cmp	r3, #6
 8009b12:	d110      	bne.n	8009b36 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6a38      	ldr	r0, [r7, #32]
 8009b20:	f005 fb7a 	bl	800f218 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	6a1a      	ldr	r2, [r3, #32]
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	091b      	lsrs	r3, r3, #4
 8009b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b30:	441a      	add	r2, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	699a      	ldr	r2, [r3, #24]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f042 0210 	orr.w	r2, r2, #16
 8009b44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f005 fcf8 	bl	800f540 <USB_ReadInterrupts>
 8009b50:	4603      	mov	r3, r0
 8009b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b5a:	f040 80a7 	bne.w	8009cac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f005 fcfd 	bl	800f566 <USB_ReadDevAllOutEpInterrupt>
 8009b6c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009b6e:	e099      	b.n	8009ca4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 808e 	beq.w	8009c98 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b82:	b2d2      	uxtb	r2, r2
 8009b84:	4611      	mov	r1, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f005 fd21 	bl	800f5ce <USB_ReadDevOutEPInterrupt>
 8009b8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00c      	beq.n	8009bb2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 feab 	bl	800a908 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00c      	beq.n	8009bd6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc8:	461a      	mov	r2, r3
 8009bca:	2308      	movs	r3, #8
 8009bcc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 ff81 	bl	800aad8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f003 0310 	and.w	r3, r3, #16
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d008      	beq.n	8009bf2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bec:	461a      	mov	r2, r3
 8009bee:	2310      	movs	r3, #16
 8009bf0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f003 0302 	and.w	r3, r3, #2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d030      	beq.n	8009c5e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c04:	2b80      	cmp	r3, #128	; 0x80
 8009c06:	d109      	bne.n	8009c1c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	69fa      	ldr	r2, [r7, #28]
 8009c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c1a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1e:	4613      	mov	r3, r2
 8009c20:	00db      	lsls	r3, r3, #3
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	3304      	adds	r3, #4
 8009c30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	78db      	ldrb	r3, [r3, #3]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d108      	bne.n	8009c4c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f009 ffea 	bl	8013c20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c58:	461a      	mov	r2, r3
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d008      	beq.n	8009c7a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c74:	461a      	mov	r2, r3
 8009c76:	2320      	movs	r3, #32
 8009c78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d009      	beq.n	8009c98 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c90:	461a      	mov	r2, r3
 8009c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c96:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	085b      	lsrs	r3, r3, #1
 8009ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f47f af62 	bne.w	8009b70 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f005 fc45 	bl	800f540 <USB_ReadInterrupts>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cc0:	f040 80db 	bne.w	8009e7a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f005 fc66 	bl	800f59a <USB_ReadDevAllInEpInterrupt>
 8009cce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009cd4:	e0cd      	b.n	8009e72 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 80c2 	beq.w	8009e66 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce8:	b2d2      	uxtb	r2, r2
 8009cea:	4611      	mov	r1, r2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f005 fc8c 	bl	800f60a <USB_ReadDevInEPInterrupt>
 8009cf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d057      	beq.n	8009dae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	f003 030f 	and.w	r3, r3, #15
 8009d04:	2201      	movs	r2, #1
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	43db      	mvns	r3, r3
 8009d18:	69f9      	ldr	r1, [r7, #28]
 8009d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d1e:	4013      	ands	r3, r2
 8009d20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2e:	461a      	mov	r2, r3
 8009d30:	2301      	movs	r3, #1
 8009d32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d132      	bne.n	8009da2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d40:	4613      	mov	r3, r2
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	334c      	adds	r3, #76	; 0x4c
 8009d4c:	6819      	ldr	r1, [r3, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d52:	4613      	mov	r3, r2
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	4413      	add	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4403      	add	r3, r0
 8009d5c:	3348      	adds	r3, #72	; 0x48
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4419      	add	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d66:	4613      	mov	r3, r2
 8009d68:	00db      	lsls	r3, r3, #3
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4403      	add	r3, r0
 8009d70:	334c      	adds	r3, #76	; 0x4c
 8009d72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d113      	bne.n	8009da2 <HAL_PCD_IRQHandler+0x3a2>
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7e:	4613      	mov	r3, r2
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	3354      	adds	r3, #84	; 0x54
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d108      	bne.n	8009da2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	f005 fc93 	bl	800f6c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f009 feb4 	bl	8013b16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d008      	beq.n	8009dca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	2308      	movs	r3, #8
 8009dc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f003 0310 	and.w	r3, r3, #16
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d008      	beq.n	8009de6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de0:	461a      	mov	r2, r3
 8009de2:	2310      	movs	r3, #16
 8009de4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d008      	beq.n	8009e02 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	2340      	movs	r3, #64	; 0x40
 8009e00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f003 0302 	and.w	r3, r3, #2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d023      	beq.n	8009e54 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e0e:	6a38      	ldr	r0, [r7, #32]
 8009e10:	f004 fb74 	bl	800e4fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e16:	4613      	mov	r3, r2
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	3338      	adds	r3, #56	; 0x38
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	4413      	add	r3, r2
 8009e24:	3304      	adds	r3, #4
 8009e26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	78db      	ldrb	r3, [r3, #3]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d108      	bne.n	8009e42 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2200      	movs	r2, #0
 8009e34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f009 ff01 	bl	8013c44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4e:	461a      	mov	r2, r3
 8009e50:	2302      	movs	r3, #2
 8009e52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fcc3 	bl	800a7ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	3301      	adds	r3, #1
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f47f af2e 	bne.w	8009cd6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f005 fb5e 	bl	800f540 <USB_ReadInterrupts>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e8e:	d122      	bne.n	8009ed6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e9e:	f023 0301 	bic.w	r3, r3, #1
 8009ea2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d108      	bne.n	8009ec0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 feab 	bl	800ac14 <HAL_PCDEx_LPM_Callback>
 8009ebe:	e002      	b.n	8009ec6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f009 fe9f 	bl	8013c04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	695a      	ldr	r2, [r3, #20]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f005 fb30 	bl	800f540 <USB_ReadInterrupts>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eea:	d112      	bne.n	8009f12 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d102      	bne.n	8009f02 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f009 fe5b 	bl	8013bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	695a      	ldr	r2, [r3, #20]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009f10:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f005 fb12 	bl	800f540 <USB_ReadInterrupts>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f26:	f040 80b7 	bne.w	800a098 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	69fa      	ldr	r2, [r7, #28]
 8009f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f38:	f023 0301 	bic.w	r3, r3, #1
 8009f3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2110      	movs	r1, #16
 8009f44:	4618      	mov	r0, r3
 8009f46:	f004 fad9 	bl	800e4fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f4e:	e046      	b.n	8009fde <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f74:	0151      	lsls	r1, r2, #5
 8009f76:	69fa      	ldr	r2, [r7, #28]
 8009f78:	440a      	add	r2, r1
 8009f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f90:	461a      	mov	r2, r3
 8009f92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f96:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fa8:	0151      	lsls	r1, r2, #5
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	440a      	add	r2, r1
 8009fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fc8:	0151      	lsls	r1, r2, #5
 8009fca:	69fa      	ldr	r2, [r7, #28]
 8009fcc:	440a      	add	r2, r1
 8009fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fda:	3301      	adds	r3, #1
 8009fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d3b3      	bcc.n	8009f50 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fee:	69db      	ldr	r3, [r3, #28]
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009ffa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a000:	2b00      	cmp	r3, #0
 800a002:	d016      	beq.n	800a032 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a00e:	69fa      	ldr	r2, [r7, #28]
 800a010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a014:	f043 030b 	orr.w	r3, r3, #11
 800a018:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a024:	69fa      	ldr	r2, [r7, #28]
 800a026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a02a:	f043 030b 	orr.w	r3, r3, #11
 800a02e:	6453      	str	r3, [r2, #68]	; 0x44
 800a030:	e015      	b.n	800a05e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a040:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a044:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a048:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	69fa      	ldr	r2, [r7, #28]
 800a054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a058:	f043 030b 	orr.w	r3, r3, #11
 800a05c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a06c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a070:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6818      	ldr	r0, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a082:	461a      	mov	r2, r3
 800a084:	f005 fb20 	bl	800f6c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	695a      	ldr	r2, [r3, #20]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f005 fa4f 	bl	800f540 <USB_ReadInterrupts>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ac:	d124      	bne.n	800a0f8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f005 fae5 	bl	800f682 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f004 fa9a 	bl	800e5f6 <USB_GetDevSpeed>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681c      	ldr	r4, [r3, #0]
 800a0ce:	f001 fa11 	bl	800b4f4 <HAL_RCC_GetHCLKFreq>
 800a0d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	461a      	mov	r2, r3
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f003 ff99 	bl	800e014 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f009 fd3f 	bl	8013b66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	695a      	ldr	r2, [r3, #20]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a0f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f005 fa1f 	bl	800f540 <USB_ReadInterrupts>
 800a102:	4603      	mov	r3, r0
 800a104:	f003 0308 	and.w	r3, r3, #8
 800a108:	2b08      	cmp	r3, #8
 800a10a:	d10a      	bne.n	800a122 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f009 fd1c 	bl	8013b4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695a      	ldr	r2, [r3, #20]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f002 0208 	and.w	r2, r2, #8
 800a120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4618      	mov	r0, r3
 800a128:	f005 fa0a 	bl	800f540 <USB_ReadInterrupts>
 800a12c:	4603      	mov	r3, r0
 800a12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a132:	2b80      	cmp	r3, #128	; 0x80
 800a134:	d122      	bne.n	800a17c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a142:	2301      	movs	r3, #1
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
 800a146:	e014      	b.n	800a172 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14c:	4613      	mov	r3, r2
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	4413      	add	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	440b      	add	r3, r1
 800a156:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d105      	bne.n	800a16c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	b2db      	uxtb	r3, r3
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fb0f 	bl	800a78a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	3301      	adds	r3, #1
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a178:	429a      	cmp	r2, r3
 800a17a:	d3e5      	bcc.n	800a148 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4618      	mov	r0, r3
 800a182:	f005 f9dd 	bl	800f540 <USB_ReadInterrupts>
 800a186:	4603      	mov	r3, r0
 800a188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a18c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a190:	d13b      	bne.n	800a20a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a192:	2301      	movs	r3, #1
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
 800a196:	e02b      	b.n	800a1f0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	3340      	adds	r3, #64	; 0x40
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d115      	bne.n	800a1ea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a1be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	da12      	bge.n	800a1ea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	440b      	add	r3, r1
 800a1d2:	333f      	adds	r3, #63	; 0x3f
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fad0 	bl	800a78a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d3ce      	bcc.n	800a198 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	695a      	ldr	r2, [r3, #20]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f005 f996 	bl	800f540 <USB_ReadInterrupts>
 800a214:	4603      	mov	r3, r0
 800a216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a21a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a21e:	d155      	bne.n	800a2cc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a220:	2301      	movs	r3, #1
 800a222:	627b      	str	r3, [r7, #36]	; 0x24
 800a224:	e045      	b.n	800a2b2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23a:	4613      	mov	r3, r2
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	440b      	add	r3, r1
 800a244:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d12e      	bne.n	800a2ac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a24e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a250:	2b00      	cmp	r3, #0
 800a252:	da2b      	bge.n	800a2ac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a260:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a264:	429a      	cmp	r2, r3
 800a266:	d121      	bne.n	800a2ac <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a26c:	4613      	mov	r3, r2
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	440b      	add	r3, r1
 800a276:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a27a:	2201      	movs	r2, #1
 800a27c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2a8:	6053      	str	r3, [r2, #4]
            break;
 800a2aa:	e007      	b.n	800a2bc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d3b4      	bcc.n	800a226 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	695a      	ldr	r2, [r3, #20]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a2ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f005 f935 	bl	800f540 <USB_ReadInterrupts>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2e0:	d10a      	bne.n	800a2f8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f009 fcc0 	bl	8013c68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	695a      	ldr	r2, [r3, #20]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a2f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f005 f91f 	bl	800f540 <USB_ReadInterrupts>
 800a302:	4603      	mov	r3, r0
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d115      	bne.n	800a338 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	f003 0304 	and.w	r3, r3, #4
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f009 fcb0 	bl	8013c84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6859      	ldr	r1, [r3, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	430a      	orrs	r2, r1
 800a332:	605a      	str	r2, [r3, #4]
 800a334:	e000      	b.n	800a338 <HAL_PCD_IRQHandler+0x938>
      return;
 800a336:	bf00      	nop
    }
  }
}
 800a338:	3734      	adds	r7, #52	; 0x34
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd90      	pop	{r4, r7, pc}

0800a33e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b082      	sub	sp, #8
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	460b      	mov	r3, r1
 800a348:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_PCD_SetAddress+0x1a>
 800a354:	2302      	movs	r3, #2
 800a356:	e013      	b.n	800a380 <HAL_PCD_SetAddress+0x42>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	78fa      	ldrb	r2, [r7, #3]
 800a364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	78fa      	ldrb	r2, [r7, #3]
 800a36e:	4611      	mov	r1, r2
 800a370:	4618      	mov	r0, r3
 800a372:	f005 f87d 	bl	800f470 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	4608      	mov	r0, r1
 800a392:	4611      	mov	r1, r2
 800a394:	461a      	mov	r2, r3
 800a396:	4603      	mov	r3, r0
 800a398:	70fb      	strb	r3, [r7, #3]
 800a39a:	460b      	mov	r3, r1
 800a39c:	803b      	strh	r3, [r7, #0]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da0f      	bge.n	800a3ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	f003 020f 	and.w	r2, r3, #15
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	4413      	add	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	3338      	adds	r3, #56	; 0x38
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	705a      	strb	r2, [r3, #1]
 800a3cc:	e00f      	b.n	800a3ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3ce:	78fb      	ldrb	r3, [r7, #3]
 800a3d0:	f003 020f 	and.w	r2, r3, #15
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a3ee:	78fb      	ldrb	r3, [r7, #3]
 800a3f0:	f003 030f 	and.w	r3, r3, #15
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a3fa:	883a      	ldrh	r2, [r7, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	78ba      	ldrb	r2, [r7, #2]
 800a404:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d004      	beq.n	800a418 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	b29a      	uxth	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a418:	78bb      	ldrb	r3, [r7, #2]
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d102      	bne.n	800a424 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_PCD_EP_Open+0xaa>
 800a42e:	2302      	movs	r3, #2
 800a430:	e00e      	b.n	800a450 <HAL_PCD_EP_Open+0xc8>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68f9      	ldr	r1, [r7, #12]
 800a440:	4618      	mov	r0, r3
 800a442:	f004 f8fd 	bl	800e640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a44e:	7afb      	ldrb	r3, [r7, #11]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	da0f      	bge.n	800a48c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	f003 020f 	and.w	r2, r3, #15
 800a472:	4613      	mov	r3, r2
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	4413      	add	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	3338      	adds	r3, #56	; 0x38
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	4413      	add	r3, r2
 800a480:	3304      	adds	r3, #4
 800a482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	705a      	strb	r2, [r3, #1]
 800a48a:	e00f      	b.n	800a4ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	f003 020f 	and.w	r2, r3, #15
 800a492:	4613      	mov	r3, r2
 800a494:	00db      	lsls	r3, r3, #3
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	f003 030f 	and.w	r3, r3, #15
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d101      	bne.n	800a4c6 <HAL_PCD_EP_Close+0x6e>
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	e00e      	b.n	800a4e4 <HAL_PCD_EP_Close+0x8c>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68f9      	ldr	r1, [r7, #12]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f004 f93b 	bl	800e750 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	f003 020f 	and.w	r2, r3, #15
 800a502:	4613      	mov	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4413      	add	r3, r2
 800a512:	3304      	adds	r3, #4
 800a514:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2200      	movs	r2, #0
 800a526:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2200      	movs	r2, #0
 800a52c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a52e:	7afb      	ldrb	r3, [r7, #11]
 800a530:	f003 030f 	and.w	r3, r3, #15
 800a534:	b2da      	uxtb	r2, r3
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d102      	bne.n	800a548 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a548:	7afb      	ldrb	r3, [r7, #11]
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d109      	bne.n	800a566 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	6979      	ldr	r1, [r7, #20]
 800a560:	f004 fc1a 	bl	800ed98 <USB_EP0StartXfer>
 800a564:	e008      	b.n	800a578 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	461a      	mov	r2, r3
 800a572:	6979      	ldr	r1, [r7, #20]
 800a574:	f004 f9c8 	bl	800e908 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b086      	sub	sp, #24
 800a586:	af00      	add	r7, sp, #0
 800a588:	60f8      	str	r0, [r7, #12]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	460b      	mov	r3, r1
 800a590:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a592:	7afb      	ldrb	r3, [r7, #11]
 800a594:	f003 020f 	and.w	r2, r3, #15
 800a598:	4613      	mov	r3, r2
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	4413      	add	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	3338      	adds	r3, #56	; 0x38
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5c2:	7afb      	ldrb	r3, [r7, #11]
 800a5c4:	f003 030f 	and.w	r3, r3, #15
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d102      	bne.n	800a5dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d109      	bne.n	800a5fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	6979      	ldr	r1, [r7, #20]
 800a5f4:	f004 fbd0 	bl	800ed98 <USB_EP0StartXfer>
 800a5f8:	e008      	b.n	800a60c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6818      	ldr	r0, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	6979      	ldr	r1, [r7, #20]
 800a608:	f004 f97e 	bl	800e908 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	460b      	mov	r3, r1
 800a620:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	f003 020f 	and.w	r2, r3, #15
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d901      	bls.n	800a634 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e050      	b.n	800a6d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	da0f      	bge.n	800a65c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	f003 020f 	and.w	r2, r3, #15
 800a642:	4613      	mov	r3, r2
 800a644:	00db      	lsls	r3, r3, #3
 800a646:	4413      	add	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	3338      	adds	r3, #56	; 0x38
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	4413      	add	r3, r2
 800a650:	3304      	adds	r3, #4
 800a652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2201      	movs	r2, #1
 800a658:	705a      	strb	r2, [r3, #1]
 800a65a:	e00d      	b.n	800a678 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a65c:	78fa      	ldrb	r2, [r7, #3]
 800a65e:	4613      	mov	r3, r2
 800a660:	00db      	lsls	r3, r3, #3
 800a662:	4413      	add	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	4413      	add	r3, r2
 800a66e:	3304      	adds	r3, #4
 800a670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2201      	movs	r2, #1
 800a67c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	f003 030f 	and.w	r3, r3, #15
 800a684:	b2da      	uxtb	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a690:	2b01      	cmp	r3, #1
 800a692:	d101      	bne.n	800a698 <HAL_PCD_EP_SetStall+0x82>
 800a694:	2302      	movs	r3, #2
 800a696:	e01e      	b.n	800a6d6 <HAL_PCD_EP_SetStall+0xc0>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68f9      	ldr	r1, [r7, #12]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f004 fe0e 	bl	800f2c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	f003 030f 	and.w	r3, r3, #15
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10a      	bne.n	800a6cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	b2d9      	uxtb	r1, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f004 fffe 	bl	800f6c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	f003 020f 	and.w	r2, r3, #15
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d901      	bls.n	800a6fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e042      	b.n	800a782 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a6fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a700:	2b00      	cmp	r3, #0
 800a702:	da0f      	bge.n	800a724 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	f003 020f 	and.w	r2, r3, #15
 800a70a:	4613      	mov	r3, r2
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	4413      	add	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	3338      	adds	r3, #56	; 0x38
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	4413      	add	r3, r2
 800a718:	3304      	adds	r3, #4
 800a71a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2201      	movs	r2, #1
 800a720:	705a      	strb	r2, [r3, #1]
 800a722:	e00f      	b.n	800a744 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	f003 020f 	and.w	r2, r3, #15
 800a72a:	4613      	mov	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	4413      	add	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	4413      	add	r3, r2
 800a73a:	3304      	adds	r3, #4
 800a73c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a74a:	78fb      	ldrb	r3, [r7, #3]
 800a74c:	f003 030f 	and.w	r3, r3, #15
 800a750:	b2da      	uxtb	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d101      	bne.n	800a764 <HAL_PCD_EP_ClrStall+0x86>
 800a760:	2302      	movs	r3, #2
 800a762:	e00e      	b.n	800a782 <HAL_PCD_EP_ClrStall+0xa4>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68f9      	ldr	r1, [r7, #12]
 800a772:	4618      	mov	r0, r3
 800a774:	f004 fe16 	bl	800f3a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	da0c      	bge.n	800a7b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a79e:	78fb      	ldrb	r3, [r7, #3]
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	4413      	add	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	3338      	adds	r3, #56	; 0x38
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	e00c      	b.n	800a7d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7b8:	78fb      	ldrb	r3, [r7, #3]
 800a7ba:	f003 020f 	and.w	r2, r3, #15
 800a7be:	4613      	mov	r3, r2
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	4413      	add	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68f9      	ldr	r1, [r7, #12]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f004 fc35 	bl	800f048 <USB_EPStopXfer>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08a      	sub	sp, #40	; 0x28
 800a7f0:	af02      	add	r7, sp, #8
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	4613      	mov	r3, r2
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	4413      	add	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	3338      	adds	r3, #56	; 0x38
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	4413      	add	r3, r2
 800a810:	3304      	adds	r3, #4
 800a812:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6a1a      	ldr	r2, [r3, #32]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d901      	bls.n	800a824 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	e06c      	b.n	800a8fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	699a      	ldr	r2, [r3, #24]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6a1b      	ldr	r3, [r3, #32]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	69fa      	ldr	r2, [r7, #28]
 800a836:	429a      	cmp	r2, r3
 800a838:	d902      	bls.n	800a840 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	3303      	adds	r3, #3
 800a844:	089b      	lsrs	r3, r3, #2
 800a846:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a848:	e02b      	b.n	800a8a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	699a      	ldr	r2, [r3, #24]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d902      	bls.n	800a866 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	3303      	adds	r3, #3
 800a86a:	089b      	lsrs	r3, r3, #2
 800a86c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6919      	ldr	r1, [r3, #16]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	b2da      	uxtb	r2, r3
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	4603      	mov	r3, r0
 800a884:	6978      	ldr	r0, [r7, #20]
 800a886:	f004 fc89 	bl	800f19c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	691a      	ldr	r2, [r3, #16]
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	441a      	add	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	441a      	add	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	015a      	lsls	r2, r3, #5
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d809      	bhi.n	800a8cc <PCD_WriteEmptyTxFifo+0xe0>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a1a      	ldr	r2, [r3, #32]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d203      	bcs.n	800a8cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1be      	bne.n	800a84a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	699a      	ldr	r2, [r3, #24]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6a1b      	ldr	r3, [r3, #32]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d811      	bhi.n	800a8fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	f003 030f 	and.w	r3, r3, #15
 800a8de:	2201      	movs	r2, #1
 800a8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	43db      	mvns	r3, r3
 800a8f2:	6939      	ldr	r1, [r7, #16]
 800a8f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3720      	adds	r7, #32
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	333c      	adds	r3, #60	; 0x3c
 800a920:	3304      	adds	r3, #4
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	015a      	lsls	r2, r3, #5
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	4413      	add	r3, r2
 800a92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d17b      	bne.n	800aa36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f003 0308 	and.w	r3, r3, #8
 800a944:	2b00      	cmp	r3, #0
 800a946:	d015      	beq.n	800a974 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	4a61      	ldr	r2, [pc, #388]	; (800aad0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	f240 80b9 	bls.w	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 80b3 	beq.w	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96a:	461a      	mov	r2, r3
 800a96c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a970:	6093      	str	r3, [r2, #8]
 800a972:	e0a7      	b.n	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d009      	beq.n	800a992 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98a:	461a      	mov	r2, r3
 800a98c:	2320      	movs	r3, #32
 800a98e:	6093      	str	r3, [r2, #8]
 800a990:	e098      	b.n	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f040 8093 	bne.w	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	4a4b      	ldr	r2, [pc, #300]	; (800aad0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d90f      	bls.n	800a9c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00a      	beq.n	800a9c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9c2:	6093      	str	r3, [r2, #8]
 800a9c4:	e07e      	b.n	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	4413      	add	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	3304      	adds	r3, #4
 800a9da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	69da      	ldr	r2, [r3, #28]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	0159      	lsls	r1, r3, #5
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	440b      	add	r3, r1
 800a9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f2:	1ad2      	subs	r2, r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d114      	bne.n	800aa28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d109      	bne.n	800aa1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aa10:	461a      	mov	r2, r3
 800aa12:	2101      	movs	r1, #1
 800aa14:	f004 fe58 	bl	800f6c8 <USB_EP0_OutStart>
 800aa18:	e006      	b.n	800aa28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	691a      	ldr	r2, [r3, #16]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	441a      	add	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f009 f856 	bl	8013ae0 <HAL_PCD_DataOutStageCallback>
 800aa34:	e046      	b.n	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	4a26      	ldr	r2, [pc, #152]	; (800aad4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d124      	bne.n	800aa88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00a      	beq.n	800aa5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa54:	461a      	mov	r2, r3
 800aa56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa5a:	6093      	str	r3, [r2, #8]
 800aa5c:	e032      	b.n	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f003 0320 	and.w	r3, r3, #32
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d008      	beq.n	800aa7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa74:	461a      	mov	r2, r3
 800aa76:	2320      	movs	r3, #32
 800aa78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f009 f82d 	bl	8013ae0 <HAL_PCD_DataOutStageCallback>
 800aa86:	e01d      	b.n	800aac4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d114      	bne.n	800aab8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800aa8e:	6879      	ldr	r1, [r7, #4]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	4613      	mov	r3, r2
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d108      	bne.n	800aab8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6818      	ldr	r0, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aab0:	461a      	mov	r2, r3
 800aab2:	2100      	movs	r1, #0
 800aab4:	f004 fe08 	bl	800f6c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f009 f80e 	bl	8013ae0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3720      	adds	r7, #32
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	4f54300a 	.word	0x4f54300a
 800aad4:	4f54310a 	.word	0x4f54310a

0800aad8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	333c      	adds	r3, #60	; 0x3c
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4a15      	ldr	r2, [pc, #84]	; (800ab60 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d90e      	bls.n	800ab2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d009      	beq.n	800ab2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab24:	461a      	mov	r2, r3
 800ab26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f008 ffc5 	bl	8013abc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4a0a      	ldr	r2, [pc, #40]	; (800ab60 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d90c      	bls.n	800ab54 <PCD_EP_OutSetupPacket_int+0x7c>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d108      	bne.n	800ab54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	2101      	movs	r1, #1
 800ab50:	f004 fdba 	bl	800f6c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	4f54300a 	.word	0x4f54300a

0800ab64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
 800ab70:	4613      	mov	r3, r2
 800ab72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d107      	bne.n	800ab92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ab82:	883b      	ldrh	r3, [r7, #0]
 800ab84:	0419      	lsls	r1, r3, #16
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	629a      	str	r2, [r3, #40]	; 0x28
 800ab90:	e028      	b.n	800abe4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab98:	0c1b      	lsrs	r3, r3, #16
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aba0:	2300      	movs	r3, #0
 800aba2:	73fb      	strb	r3, [r7, #15]
 800aba4:	e00d      	b.n	800abc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
 800abac:	3340      	adds	r3, #64	; 0x40
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	0c1b      	lsrs	r3, r3, #16
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	4413      	add	r3, r2
 800abba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	3301      	adds	r3, #1
 800abc0:	73fb      	strb	r3, [r7, #15]
 800abc2:	7bfa      	ldrb	r2, [r7, #15]
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	429a      	cmp	r2, r3
 800abca:	d3ec      	bcc.n	800aba6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800abcc:	883b      	ldrh	r3, [r7, #0]
 800abce:	0418      	lsls	r0, r3, #16
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6819      	ldr	r1, [r3, #0]
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	4302      	orrs	r2, r0
 800abdc:	3340      	adds	r3, #64	; 0x40
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	440b      	add	r3, r1
 800abe2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800abf2:	b480      	push	{r7}
 800abf4:	b083      	sub	sp, #12
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	460b      	mov	r3, r1
 800abfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	887a      	ldrh	r2, [r7, #2]
 800ac04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e267      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d075      	beq.n	800ad36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac4a:	4b88      	ldr	r3, [pc, #544]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f003 030c 	and.w	r3, r3, #12
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	d00c      	beq.n	800ac70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac56:	4b85      	ldr	r3, [pc, #532]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac5e:	2b08      	cmp	r3, #8
 800ac60:	d112      	bne.n	800ac88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac62:	4b82      	ldr	r3, [pc, #520]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac6e:	d10b      	bne.n	800ac88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac70:	4b7e      	ldr	r3, [pc, #504]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d05b      	beq.n	800ad34 <HAL_RCC_OscConfig+0x108>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d157      	bne.n	800ad34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e242      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac90:	d106      	bne.n	800aca0 <HAL_RCC_OscConfig+0x74>
 800ac92:	4b76      	ldr	r3, [pc, #472]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a75      	ldr	r2, [pc, #468]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ac98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	e01d      	b.n	800acdc <HAL_RCC_OscConfig+0xb0>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aca8:	d10c      	bne.n	800acc4 <HAL_RCC_OscConfig+0x98>
 800acaa:	4b70      	ldr	r3, [pc, #448]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a6f      	ldr	r2, [pc, #444]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800acb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acb4:	6013      	str	r3, [r2, #0]
 800acb6:	4b6d      	ldr	r3, [pc, #436]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a6c      	ldr	r2, [pc, #432]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800acbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	e00b      	b.n	800acdc <HAL_RCC_OscConfig+0xb0>
 800acc4:	4b69      	ldr	r3, [pc, #420]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a68      	ldr	r2, [pc, #416]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800acca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	4b66      	ldr	r3, [pc, #408]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a65      	ldr	r2, [pc, #404]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800acd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d013      	beq.n	800ad0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ace4:	f7fa fa8c 	bl	8005200 <HAL_GetTick>
 800ace8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acea:	e008      	b.n	800acfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800acec:	f7fa fa88 	bl	8005200 <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	2b64      	cmp	r3, #100	; 0x64
 800acf8:	d901      	bls.n	800acfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e207      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acfe:	4b5b      	ldr	r3, [pc, #364]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0f0      	beq.n	800acec <HAL_RCC_OscConfig+0xc0>
 800ad0a:	e014      	b.n	800ad36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad0c:	f7fa fa78 	bl	8005200 <HAL_GetTick>
 800ad10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad12:	e008      	b.n	800ad26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad14:	f7fa fa74 	bl	8005200 <HAL_GetTick>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	2b64      	cmp	r3, #100	; 0x64
 800ad20:	d901      	bls.n	800ad26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e1f3      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad26:	4b51      	ldr	r3, [pc, #324]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1f0      	bne.n	800ad14 <HAL_RCC_OscConfig+0xe8>
 800ad32:	e000      	b.n	800ad36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0302 	and.w	r3, r3, #2
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d063      	beq.n	800ae0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad42:	4b4a      	ldr	r3, [pc, #296]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	f003 030c 	and.w	r3, r3, #12
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00b      	beq.n	800ad66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad4e:	4b47      	ldr	r3, [pc, #284]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad56:	2b08      	cmp	r3, #8
 800ad58:	d11c      	bne.n	800ad94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad5a:	4b44      	ldr	r3, [pc, #272]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d116      	bne.n	800ad94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad66:	4b41      	ldr	r3, [pc, #260]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d005      	beq.n	800ad7e <HAL_RCC_OscConfig+0x152>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d001      	beq.n	800ad7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e1c7      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad7e:	4b3b      	ldr	r3, [pc, #236]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4937      	ldr	r1, [pc, #220]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad92:	e03a      	b.n	800ae0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d020      	beq.n	800adde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad9c:	4b34      	ldr	r3, [pc, #208]	; (800ae70 <HAL_RCC_OscConfig+0x244>)
 800ad9e:	2201      	movs	r2, #1
 800ada0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada2:	f7fa fa2d 	bl	8005200 <HAL_GetTick>
 800ada6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ada8:	e008      	b.n	800adbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adaa:	f7fa fa29 	bl	8005200 <HAL_GetTick>
 800adae:	4602      	mov	r2, r0
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d901      	bls.n	800adbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e1a8      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adbc:	4b2b      	ldr	r3, [pc, #172]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d0f0      	beq.n	800adaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adc8:	4b28      	ldr	r3, [pc, #160]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	4925      	ldr	r1, [pc, #148]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800add8:	4313      	orrs	r3, r2
 800adda:	600b      	str	r3, [r1, #0]
 800addc:	e015      	b.n	800ae0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adde:	4b24      	ldr	r3, [pc, #144]	; (800ae70 <HAL_RCC_OscConfig+0x244>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade4:	f7fa fa0c 	bl	8005200 <HAL_GetTick>
 800ade8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adea:	e008      	b.n	800adfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adec:	f7fa fa08 	bl	8005200 <HAL_GetTick>
 800adf0:	4602      	mov	r2, r0
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d901      	bls.n	800adfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e187      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adfe:	4b1b      	ldr	r3, [pc, #108]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0302 	and.w	r3, r3, #2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1f0      	bne.n	800adec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 0308 	and.w	r3, r3, #8
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d036      	beq.n	800ae84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d016      	beq.n	800ae4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae1e:	4b15      	ldr	r3, [pc, #84]	; (800ae74 <HAL_RCC_OscConfig+0x248>)
 800ae20:	2201      	movs	r2, #1
 800ae22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae24:	f7fa f9ec 	bl	8005200 <HAL_GetTick>
 800ae28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae2a:	e008      	b.n	800ae3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae2c:	f7fa f9e8 	bl	8005200 <HAL_GetTick>
 800ae30:	4602      	mov	r2, r0
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d901      	bls.n	800ae3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e167      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae3e:	4b0b      	ldr	r3, [pc, #44]	; (800ae6c <HAL_RCC_OscConfig+0x240>)
 800ae40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0f0      	beq.n	800ae2c <HAL_RCC_OscConfig+0x200>
 800ae4a:	e01b      	b.n	800ae84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae4c:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <HAL_RCC_OscConfig+0x248>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae52:	f7fa f9d5 	bl	8005200 <HAL_GetTick>
 800ae56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae58:	e00e      	b.n	800ae78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae5a:	f7fa f9d1 	bl	8005200 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d907      	bls.n	800ae78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e150      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
 800ae6c:	40023800 	.word	0x40023800
 800ae70:	42470000 	.word	0x42470000
 800ae74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae78:	4b88      	ldr	r3, [pc, #544]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800ae7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae7c:	f003 0302 	and.w	r3, r3, #2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1ea      	bne.n	800ae5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0304 	and.w	r3, r3, #4
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 8097 	beq.w	800afc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae92:	2300      	movs	r3, #0
 800ae94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae96:	4b81      	ldr	r3, [pc, #516]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10f      	bne.n	800aec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aea2:	2300      	movs	r3, #0
 800aea4:	60bb      	str	r3, [r7, #8]
 800aea6:	4b7d      	ldr	r3, [pc, #500]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800aea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeaa:	4a7c      	ldr	r2, [pc, #496]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800aeac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeb0:	6413      	str	r3, [r2, #64]	; 0x40
 800aeb2:	4b7a      	ldr	r3, [pc, #488]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeba:	60bb      	str	r3, [r7, #8]
 800aebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aebe:	2301      	movs	r3, #1
 800aec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aec2:	4b77      	ldr	r3, [pc, #476]	; (800b0a0 <HAL_RCC_OscConfig+0x474>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d118      	bne.n	800af00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aece:	4b74      	ldr	r3, [pc, #464]	; (800b0a0 <HAL_RCC_OscConfig+0x474>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a73      	ldr	r2, [pc, #460]	; (800b0a0 <HAL_RCC_OscConfig+0x474>)
 800aed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aeda:	f7fa f991 	bl	8005200 <HAL_GetTick>
 800aede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aee0:	e008      	b.n	800aef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aee2:	f7fa f98d 	bl	8005200 <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d901      	bls.n	800aef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e10c      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aef4:	4b6a      	ldr	r3, [pc, #424]	; (800b0a0 <HAL_RCC_OscConfig+0x474>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0f0      	beq.n	800aee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d106      	bne.n	800af16 <HAL_RCC_OscConfig+0x2ea>
 800af08:	4b64      	ldr	r3, [pc, #400]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0c:	4a63      	ldr	r2, [pc, #396]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af0e:	f043 0301 	orr.w	r3, r3, #1
 800af12:	6713      	str	r3, [r2, #112]	; 0x70
 800af14:	e01c      	b.n	800af50 <HAL_RCC_OscConfig+0x324>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	2b05      	cmp	r3, #5
 800af1c:	d10c      	bne.n	800af38 <HAL_RCC_OscConfig+0x30c>
 800af1e:	4b5f      	ldr	r3, [pc, #380]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af22:	4a5e      	ldr	r2, [pc, #376]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af24:	f043 0304 	orr.w	r3, r3, #4
 800af28:	6713      	str	r3, [r2, #112]	; 0x70
 800af2a:	4b5c      	ldr	r3, [pc, #368]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2e:	4a5b      	ldr	r2, [pc, #364]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af30:	f043 0301 	orr.w	r3, r3, #1
 800af34:	6713      	str	r3, [r2, #112]	; 0x70
 800af36:	e00b      	b.n	800af50 <HAL_RCC_OscConfig+0x324>
 800af38:	4b58      	ldr	r3, [pc, #352]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af3c:	4a57      	ldr	r2, [pc, #348]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af3e:	f023 0301 	bic.w	r3, r3, #1
 800af42:	6713      	str	r3, [r2, #112]	; 0x70
 800af44:	4b55      	ldr	r3, [pc, #340]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af48:	4a54      	ldr	r2, [pc, #336]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af4a:	f023 0304 	bic.w	r3, r3, #4
 800af4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d015      	beq.n	800af84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af58:	f7fa f952 	bl	8005200 <HAL_GetTick>
 800af5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af5e:	e00a      	b.n	800af76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af60:	f7fa f94e 	bl	8005200 <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af6e:	4293      	cmp	r3, r2
 800af70:	d901      	bls.n	800af76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	e0cb      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af76:	4b49      	ldr	r3, [pc, #292]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800af78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0ee      	beq.n	800af60 <HAL_RCC_OscConfig+0x334>
 800af82:	e014      	b.n	800afae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af84:	f7fa f93c 	bl	8005200 <HAL_GetTick>
 800af88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af8a:	e00a      	b.n	800afa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af8c:	f7fa f938 	bl	8005200 <HAL_GetTick>
 800af90:	4602      	mov	r2, r0
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	f241 3288 	movw	r2, #5000	; 0x1388
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d901      	bls.n	800afa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e0b5      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afa2:	4b3e      	ldr	r3, [pc, #248]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800afa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa6:	f003 0302 	and.w	r3, r3, #2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1ee      	bne.n	800af8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800afae:	7dfb      	ldrb	r3, [r7, #23]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d105      	bne.n	800afc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afb4:	4b39      	ldr	r3, [pc, #228]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800afb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb8:	4a38      	ldr	r2, [pc, #224]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800afba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 80a1 	beq.w	800b10c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800afca:	4b34      	ldr	r3, [pc, #208]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f003 030c 	and.w	r3, r3, #12
 800afd2:	2b08      	cmp	r3, #8
 800afd4:	d05c      	beq.n	800b090 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d141      	bne.n	800b062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afde:	4b31      	ldr	r3, [pc, #196]	; (800b0a4 <HAL_RCC_OscConfig+0x478>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afe4:	f7fa f90c 	bl	8005200 <HAL_GetTick>
 800afe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afea:	e008      	b.n	800affe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afec:	f7fa f908 	bl	8005200 <HAL_GetTick>
 800aff0:	4602      	mov	r2, r0
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d901      	bls.n	800affe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e087      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800affe:	4b27      	ldr	r3, [pc, #156]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1f0      	bne.n	800afec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	69da      	ldr	r2, [r3, #28]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	431a      	orrs	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	019b      	lsls	r3, r3, #6
 800b01a:	431a      	orrs	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b020:	085b      	lsrs	r3, r3, #1
 800b022:	3b01      	subs	r3, #1
 800b024:	041b      	lsls	r3, r3, #16
 800b026:	431a      	orrs	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02c:	061b      	lsls	r3, r3, #24
 800b02e:	491b      	ldr	r1, [pc, #108]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800b030:	4313      	orrs	r3, r2
 800b032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b034:	4b1b      	ldr	r3, [pc, #108]	; (800b0a4 <HAL_RCC_OscConfig+0x478>)
 800b036:	2201      	movs	r2, #1
 800b038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b03a:	f7fa f8e1 	bl	8005200 <HAL_GetTick>
 800b03e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b040:	e008      	b.n	800b054 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b042:	f7fa f8dd 	bl	8005200 <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d901      	bls.n	800b054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e05c      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b054:	4b11      	ldr	r3, [pc, #68]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0f0      	beq.n	800b042 <HAL_RCC_OscConfig+0x416>
 800b060:	e054      	b.n	800b10c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b062:	4b10      	ldr	r3, [pc, #64]	; (800b0a4 <HAL_RCC_OscConfig+0x478>)
 800b064:	2200      	movs	r2, #0
 800b066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b068:	f7fa f8ca 	bl	8005200 <HAL_GetTick>
 800b06c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b06e:	e008      	b.n	800b082 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b070:	f7fa f8c6 	bl	8005200 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d901      	bls.n	800b082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e045      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b082:	4b06      	ldr	r3, [pc, #24]	; (800b09c <HAL_RCC_OscConfig+0x470>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1f0      	bne.n	800b070 <HAL_RCC_OscConfig+0x444>
 800b08e:	e03d      	b.n	800b10c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d107      	bne.n	800b0a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e038      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
 800b09c:	40023800 	.word	0x40023800
 800b0a0:	40007000 	.word	0x40007000
 800b0a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b0a8:	4b1b      	ldr	r3, [pc, #108]	; (800b118 <HAL_RCC_OscConfig+0x4ec>)
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d028      	beq.n	800b108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d121      	bne.n	800b108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d11a      	bne.n	800b108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b0d8:	4013      	ands	r3, r2
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b0de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d111      	bne.n	800b108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d107      	bne.n	800b108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b104:	429a      	cmp	r2, r3
 800b106:	d001      	beq.n	800b10c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e000      	b.n	800b10e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	40023800 	.word	0x40023800

0800b11c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e0cc      	b.n	800b2ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b130:	4b68      	ldr	r3, [pc, #416]	; (800b2d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0307 	and.w	r3, r3, #7
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d90c      	bls.n	800b158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b13e:	4b65      	ldr	r3, [pc, #404]	; (800b2d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b146:	4b63      	ldr	r3, [pc, #396]	; (800b2d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0307 	and.w	r3, r3, #7
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d001      	beq.n	800b158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	e0b8      	b.n	800b2ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0302 	and.w	r3, r3, #2
 800b160:	2b00      	cmp	r3, #0
 800b162:	d020      	beq.n	800b1a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b170:	4b59      	ldr	r3, [pc, #356]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	4a58      	ldr	r2, [pc, #352]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b17a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0308 	and.w	r3, r3, #8
 800b184:	2b00      	cmp	r3, #0
 800b186:	d005      	beq.n	800b194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b188:	4b53      	ldr	r3, [pc, #332]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	4a52      	ldr	r2, [pc, #328]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b18e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b194:	4b50      	ldr	r3, [pc, #320]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	494d      	ldr	r1, [pc, #308]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d044      	beq.n	800b23c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d107      	bne.n	800b1ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1ba:	4b47      	ldr	r3, [pc, #284]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d119      	bne.n	800b1fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e07f      	b.n	800b2ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d003      	beq.n	800b1da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	d107      	bne.n	800b1ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1da:	4b3f      	ldr	r3, [pc, #252]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d109      	bne.n	800b1fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e06f      	b.n	800b2ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1ea:	4b3b      	ldr	r3, [pc, #236]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0302 	and.w	r3, r3, #2
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e067      	b.n	800b2ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b1fa:	4b37      	ldr	r3, [pc, #220]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f023 0203 	bic.w	r2, r3, #3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	4934      	ldr	r1, [pc, #208]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b20c:	f7f9 fff8 	bl	8005200 <HAL_GetTick>
 800b210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b212:	e00a      	b.n	800b22a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b214:	f7f9 fff4 	bl	8005200 <HAL_GetTick>
 800b218:	4602      	mov	r2, r0
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b222:	4293      	cmp	r3, r2
 800b224:	d901      	bls.n	800b22a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b226:	2303      	movs	r3, #3
 800b228:	e04f      	b.n	800b2ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b22a:	4b2b      	ldr	r3, [pc, #172]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f003 020c 	and.w	r2, r3, #12
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	429a      	cmp	r2, r3
 800b23a:	d1eb      	bne.n	800b214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b23c:	4b25      	ldr	r3, [pc, #148]	; (800b2d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0307 	and.w	r3, r3, #7
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	d20c      	bcs.n	800b264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b24a:	4b22      	ldr	r3, [pc, #136]	; (800b2d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	b2d2      	uxtb	r2, r2
 800b250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b252:	4b20      	ldr	r3, [pc, #128]	; (800b2d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0307 	and.w	r3, r3, #7
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d001      	beq.n	800b264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e032      	b.n	800b2ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 0304 	and.w	r3, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d008      	beq.n	800b282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b270:	4b19      	ldr	r3, [pc, #100]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	4916      	ldr	r1, [pc, #88]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b28e:	4b12      	ldr	r3, [pc, #72]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	490e      	ldr	r1, [pc, #56]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b2a2:	f000 f821 	bl	800b2e8 <HAL_RCC_GetSysClockFreq>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	4b0b      	ldr	r3, [pc, #44]	; (800b2d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	091b      	lsrs	r3, r3, #4
 800b2ae:	f003 030f 	and.w	r3, r3, #15
 800b2b2:	490a      	ldr	r1, [pc, #40]	; (800b2dc <HAL_RCC_ClockConfig+0x1c0>)
 800b2b4:	5ccb      	ldrb	r3, [r1, r3]
 800b2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ba:	4a09      	ldr	r2, [pc, #36]	; (800b2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800b2bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b2be:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <HAL_RCC_ClockConfig+0x1c8>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7f9 fd76 	bl	8004db4 <HAL_InitTick>

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	40023c00 	.word	0x40023c00
 800b2d8:	40023800 	.word	0x40023800
 800b2dc:	08017850 	.word	0x08017850
 800b2e0:	20000014 	.word	0x20000014
 800b2e4:	20000018 	.word	0x20000018

0800b2e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2ec:	b094      	sub	sp, #80	; 0x50
 800b2ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	647b      	str	r3, [r7, #68]	; 0x44
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b300:	4b79      	ldr	r3, [pc, #484]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f003 030c 	and.w	r3, r3, #12
 800b308:	2b08      	cmp	r3, #8
 800b30a:	d00d      	beq.n	800b328 <HAL_RCC_GetSysClockFreq+0x40>
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	f200 80e1 	bhi.w	800b4d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <HAL_RCC_GetSysClockFreq+0x34>
 800b316:	2b04      	cmp	r3, #4
 800b318:	d003      	beq.n	800b322 <HAL_RCC_GetSysClockFreq+0x3a>
 800b31a:	e0db      	b.n	800b4d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b31c:	4b73      	ldr	r3, [pc, #460]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x204>)
 800b31e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b320:	e0db      	b.n	800b4da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b322:	4b73      	ldr	r3, [pc, #460]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x208>)
 800b324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b326:	e0d8      	b.n	800b4da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b328:	4b6f      	ldr	r3, [pc, #444]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b330:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b332:	4b6d      	ldr	r3, [pc, #436]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d063      	beq.n	800b406 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b33e:	4b6a      	ldr	r3, [pc, #424]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	099b      	lsrs	r3, r3, #6
 800b344:	2200      	movs	r2, #0
 800b346:	63bb      	str	r3, [r7, #56]	; 0x38
 800b348:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b350:	633b      	str	r3, [r7, #48]	; 0x30
 800b352:	2300      	movs	r3, #0
 800b354:	637b      	str	r3, [r7, #52]	; 0x34
 800b356:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b35a:	4622      	mov	r2, r4
 800b35c:	462b      	mov	r3, r5
 800b35e:	f04f 0000 	mov.w	r0, #0
 800b362:	f04f 0100 	mov.w	r1, #0
 800b366:	0159      	lsls	r1, r3, #5
 800b368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b36c:	0150      	lsls	r0, r2, #5
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4621      	mov	r1, r4
 800b374:	1a51      	subs	r1, r2, r1
 800b376:	6139      	str	r1, [r7, #16]
 800b378:	4629      	mov	r1, r5
 800b37a:	eb63 0301 	sbc.w	r3, r3, r1
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	f04f 0200 	mov.w	r2, #0
 800b384:	f04f 0300 	mov.w	r3, #0
 800b388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b38c:	4659      	mov	r1, fp
 800b38e:	018b      	lsls	r3, r1, #6
 800b390:	4651      	mov	r1, sl
 800b392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b396:	4651      	mov	r1, sl
 800b398:	018a      	lsls	r2, r1, #6
 800b39a:	4651      	mov	r1, sl
 800b39c:	ebb2 0801 	subs.w	r8, r2, r1
 800b3a0:	4659      	mov	r1, fp
 800b3a2:	eb63 0901 	sbc.w	r9, r3, r1
 800b3a6:	f04f 0200 	mov.w	r2, #0
 800b3aa:	f04f 0300 	mov.w	r3, #0
 800b3ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3ba:	4690      	mov	r8, r2
 800b3bc:	4699      	mov	r9, r3
 800b3be:	4623      	mov	r3, r4
 800b3c0:	eb18 0303 	adds.w	r3, r8, r3
 800b3c4:	60bb      	str	r3, [r7, #8]
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	eb49 0303 	adc.w	r3, r9, r3
 800b3cc:	60fb      	str	r3, [r7, #12]
 800b3ce:	f04f 0200 	mov.w	r2, #0
 800b3d2:	f04f 0300 	mov.w	r3, #0
 800b3d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b3da:	4629      	mov	r1, r5
 800b3dc:	024b      	lsls	r3, r1, #9
 800b3de:	4621      	mov	r1, r4
 800b3e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	024a      	lsls	r2, r1, #9
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3f8:	f7f5 fc7e 	bl	8000cf8 <__aeabi_uldivmod>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4613      	mov	r3, r2
 800b402:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b404:	e058      	b.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b406:	4b38      	ldr	r3, [pc, #224]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	099b      	lsrs	r3, r3, #6
 800b40c:	2200      	movs	r2, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	4611      	mov	r1, r2
 800b412:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b416:	623b      	str	r3, [r7, #32]
 800b418:	2300      	movs	r3, #0
 800b41a:	627b      	str	r3, [r7, #36]	; 0x24
 800b41c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b420:	4642      	mov	r2, r8
 800b422:	464b      	mov	r3, r9
 800b424:	f04f 0000 	mov.w	r0, #0
 800b428:	f04f 0100 	mov.w	r1, #0
 800b42c:	0159      	lsls	r1, r3, #5
 800b42e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b432:	0150      	lsls	r0, r2, #5
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	4641      	mov	r1, r8
 800b43a:	ebb2 0a01 	subs.w	sl, r2, r1
 800b43e:	4649      	mov	r1, r9
 800b440:	eb63 0b01 	sbc.w	fp, r3, r1
 800b444:	f04f 0200 	mov.w	r2, #0
 800b448:	f04f 0300 	mov.w	r3, #0
 800b44c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b450:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b454:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b458:	ebb2 040a 	subs.w	r4, r2, sl
 800b45c:	eb63 050b 	sbc.w	r5, r3, fp
 800b460:	f04f 0200 	mov.w	r2, #0
 800b464:	f04f 0300 	mov.w	r3, #0
 800b468:	00eb      	lsls	r3, r5, #3
 800b46a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b46e:	00e2      	lsls	r2, r4, #3
 800b470:	4614      	mov	r4, r2
 800b472:	461d      	mov	r5, r3
 800b474:	4643      	mov	r3, r8
 800b476:	18e3      	adds	r3, r4, r3
 800b478:	603b      	str	r3, [r7, #0]
 800b47a:	464b      	mov	r3, r9
 800b47c:	eb45 0303 	adc.w	r3, r5, r3
 800b480:	607b      	str	r3, [r7, #4]
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	f04f 0300 	mov.w	r3, #0
 800b48a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b48e:	4629      	mov	r1, r5
 800b490:	028b      	lsls	r3, r1, #10
 800b492:	4621      	mov	r1, r4
 800b494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b498:	4621      	mov	r1, r4
 800b49a:	028a      	lsls	r2, r1, #10
 800b49c:	4610      	mov	r0, r2
 800b49e:	4619      	mov	r1, r3
 800b4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	61bb      	str	r3, [r7, #24]
 800b4a6:	61fa      	str	r2, [r7, #28]
 800b4a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4ac:	f7f5 fc24 	bl	8000cf8 <__aeabi_uldivmod>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b4b8:	4b0b      	ldr	r3, [pc, #44]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	0c1b      	lsrs	r3, r3, #16
 800b4be:	f003 0303 	and.w	r3, r3, #3
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	005b      	lsls	r3, r3, #1
 800b4c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b4c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b4d2:	e002      	b.n	800b4da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4d4:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x204>)
 800b4d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b4d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3750      	adds	r7, #80	; 0x50
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4e6:	bf00      	nop
 800b4e8:	40023800 	.word	0x40023800
 800b4ec:	00f42400 	.word	0x00f42400
 800b4f0:	007a1200 	.word	0x007a1200

0800b4f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4f8:	4b03      	ldr	r3, [pc, #12]	; (800b508 <HAL_RCC_GetHCLKFreq+0x14>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20000014 	.word	0x20000014

0800b50c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b510:	f7ff fff0 	bl	800b4f4 <HAL_RCC_GetHCLKFreq>
 800b514:	4602      	mov	r2, r0
 800b516:	4b05      	ldr	r3, [pc, #20]	; (800b52c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	0a9b      	lsrs	r3, r3, #10
 800b51c:	f003 0307 	and.w	r3, r3, #7
 800b520:	4903      	ldr	r1, [pc, #12]	; (800b530 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b522:	5ccb      	ldrb	r3, [r1, r3]
 800b524:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b528:	4618      	mov	r0, r3
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	40023800 	.word	0x40023800
 800b530:	08017860 	.word	0x08017860

0800b534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b538:	f7ff ffdc 	bl	800b4f4 <HAL_RCC_GetHCLKFreq>
 800b53c:	4602      	mov	r2, r0
 800b53e:	4b05      	ldr	r3, [pc, #20]	; (800b554 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	0b5b      	lsrs	r3, r3, #13
 800b544:	f003 0307 	and.w	r3, r3, #7
 800b548:	4903      	ldr	r1, [pc, #12]	; (800b558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b54a:	5ccb      	ldrb	r3, [r1, r3]
 800b54c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b550:	4618      	mov	r0, r3
 800b552:	bd80      	pop	{r7, pc}
 800b554:	40023800 	.word	0x40023800
 800b558:	08017860 	.word	0x08017860

0800b55c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	220f      	movs	r2, #15
 800b56a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b56c:	4b12      	ldr	r3, [pc, #72]	; (800b5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	f003 0203 	and.w	r2, r3, #3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b578:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b584:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b590:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	08db      	lsrs	r3, r3, #3
 800b596:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b59e:	4b07      	ldr	r3, [pc, #28]	; (800b5bc <HAL_RCC_GetClockConfig+0x60>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f003 0207 	and.w	r2, r3, #7
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	601a      	str	r2, [r3, #0]
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	40023800 	.word	0x40023800
 800b5bc:	40023c00 	.word	0x40023c00

0800b5c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d105      	bne.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d035      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b5e8:	4b67      	ldr	r3, [pc, #412]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b5ee:	f7f9 fe07 	bl	8005200 <HAL_GetTick>
 800b5f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b5f4:	e008      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b5f6:	f7f9 fe03 	bl	8005200 <HAL_GetTick>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	2b02      	cmp	r3, #2
 800b602:	d901      	bls.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b604:	2303      	movs	r3, #3
 800b606:	e0ba      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b608:	4b60      	ldr	r3, [pc, #384]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1f0      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	019a      	lsls	r2, r3, #6
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	071b      	lsls	r3, r3, #28
 800b620:	495a      	ldr	r1, [pc, #360]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b622:	4313      	orrs	r3, r2
 800b624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b628:	4b57      	ldr	r3, [pc, #348]	; (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b62a:	2201      	movs	r2, #1
 800b62c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b62e:	f7f9 fde7 	bl	8005200 <HAL_GetTick>
 800b632:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b634:	e008      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b636:	f7f9 fde3 	bl	8005200 <HAL_GetTick>
 800b63a:	4602      	mov	r2, r0
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	2b02      	cmp	r3, #2
 800b642:	d901      	bls.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e09a      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b648:	4b50      	ldr	r3, [pc, #320]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d0f0      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 8083 	beq.w	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	4b49      	ldr	r3, [pc, #292]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	4a48      	ldr	r2, [pc, #288]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b66c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b670:	6413      	str	r3, [r2, #64]	; 0x40
 800b672:	4b46      	ldr	r3, [pc, #280]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b67e:	4b44      	ldr	r3, [pc, #272]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a43      	ldr	r2, [pc, #268]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b688:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b68a:	f7f9 fdb9 	bl	8005200 <HAL_GetTick>
 800b68e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b690:	e008      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b692:	f7f9 fdb5 	bl	8005200 <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d901      	bls.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e06c      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b6a4:	4b3a      	ldr	r3, [pc, #232]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d0f0      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b6b0:	4b36      	ldr	r3, [pc, #216]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d02f      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d028      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b6ce:	4b2f      	ldr	r3, [pc, #188]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b6d8:	4b2e      	ldr	r3, [pc, #184]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b6de:	4b2d      	ldr	r3, [pc, #180]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b6e4:	4a29      	ldr	r2, [pc, #164]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b6ea:	4b28      	ldr	r3, [pc, #160]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d114      	bne.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b6f6:	f7f9 fd83 	bl	8005200 <HAL_GetTick>
 800b6fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6fc:	e00a      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6fe:	f7f9 fd7f 	bl	8005200 <HAL_GetTick>
 800b702:	4602      	mov	r2, r0
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	f241 3288 	movw	r2, #5000	; 0x1388
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d901      	bls.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	e034      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b714:	4b1d      	ldr	r3, [pc, #116]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d0ee      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b72c:	d10d      	bne.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b72e:	4b17      	ldr	r3, [pc, #92]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b73e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b742:	4912      	ldr	r1, [pc, #72]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b744:	4313      	orrs	r3, r2
 800b746:	608b      	str	r3, [r1, #8]
 800b748:	e005      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b74a:	4b10      	ldr	r3, [pc, #64]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	4a0f      	ldr	r2, [pc, #60]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b750:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b754:	6093      	str	r3, [r2, #8]
 800b756:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b762:	490a      	ldr	r1, [pc, #40]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b764:	4313      	orrs	r3, r2
 800b766:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0308 	and.w	r3, r3, #8
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	7c1a      	ldrb	r2, [r3, #16]
 800b778:	4b07      	ldr	r3, [pc, #28]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b77a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	42470068 	.word	0x42470068
 800b78c:	40023800 	.word	0x40023800
 800b790:	40007000 	.word	0x40007000
 800b794:	42470e40 	.word	0x42470e40
 800b798:	424711e0 	.word	0x424711e0

0800b79c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e066      	b.n	800b880 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7f5b      	ldrb	r3, [r3, #29]
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d105      	bne.n	800b7c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7f9 f9bc 	bl	8004b40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	22ca      	movs	r2, #202	; 0xca
 800b7d4:	625a      	str	r2, [r3, #36]	; 0x24
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2253      	movs	r2, #83	; 0x53
 800b7dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fb6f 	bl	800bec2 <RTC_EnterInitMode>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d12c      	bne.n	800b848 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6812      	ldr	r2, [r2, #0]
 800b7f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b800:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6899      	ldr	r1, [r3, #8]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	431a      	orrs	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	431a      	orrs	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	430a      	orrs	r2, r1
 800b81e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	68d2      	ldr	r2, [r2, #12]
 800b828:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6919      	ldr	r1, [r3, #16]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	041a      	lsls	r2, r3, #16
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	430a      	orrs	r2, r1
 800b83c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fb76 	bl	800bf30 <RTC_ExitInitMode>
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d113      	bne.n	800b876 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b85c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	699a      	ldr	r2, [r3, #24]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	430a      	orrs	r2, r1
 800b86e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	22ff      	movs	r2, #255	; 0xff
 800b87c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	7f1b      	ldrb	r3, [r3, #28]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d101      	bne.n	800b8a4 <HAL_RTC_SetTime+0x1c>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	e087      	b.n	800b9b4 <HAL_RTC_SetTime+0x12c>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d126      	bne.n	800b904 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d102      	bne.n	800b8ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 fb53 	bl	800bf7a <RTC_ByteToBcd2>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	785b      	ldrb	r3, [r3, #1]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 fb4c 	bl	800bf7a <RTC_ByteToBcd2>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b8e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	789b      	ldrb	r3, [r3, #2]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 fb44 	bl	800bf7a <RTC_ByteToBcd2>
 800b8f2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b8f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	78db      	ldrb	r3, [r3, #3]
 800b8fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b8fe:	4313      	orrs	r3, r2
 800b900:	617b      	str	r3, [r7, #20]
 800b902:	e018      	b.n	800b936 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d102      	bne.n	800b918 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2200      	movs	r2, #0
 800b916:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	785b      	ldrb	r3, [r3, #1]
 800b922:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b924:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b92a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	78db      	ldrb	r3, [r3, #3]
 800b930:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b932:	4313      	orrs	r3, r2
 800b934:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	22ca      	movs	r2, #202	; 0xca
 800b93c:	625a      	str	r2, [r3, #36]	; 0x24
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2253      	movs	r2, #83	; 0x53
 800b944:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 fabb 	bl	800bec2 <RTC_EnterInitMode>
 800b94c:	4603      	mov	r3, r0
 800b94e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b950:	7cfb      	ldrb	r3, [r7, #19]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d120      	bne.n	800b998 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b960:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b964:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b974:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6899      	ldr	r1, [r3, #8]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	68da      	ldr	r2, [r3, #12]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	431a      	orrs	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f000 face 	bl	800bf30 <RTC_ExitInitMode>
 800b994:	4603      	mov	r3, r0
 800b996:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b998:	7cfb      	ldrb	r3, [r7, #19]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d102      	bne.n	800b9a4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	22ff      	movs	r2, #255	; 0xff
 800b9aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	771a      	strb	r2, [r3, #28]

  return status;
 800b9b2:	7cfb      	ldrb	r3, [r7, #19]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	371c      	adds	r7, #28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd90      	pop	{r4, r7, pc}

0800b9bc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b9ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b9f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	0c1b      	lsrs	r3, r3, #16
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	0d9b      	lsrs	r3, r3, #22
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d11a      	bne.n	800ba6e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 fab9 	bl	800bfb4 <RTC_Bcd2ToByte>
 800ba42:	4603      	mov	r3, r0
 800ba44:	461a      	mov	r2, r3
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 fab0 	bl	800bfb4 <RTC_Bcd2ToByte>
 800ba54:	4603      	mov	r3, r0
 800ba56:	461a      	mov	r2, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	789b      	ldrb	r3, [r3, #2]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f000 faa7 	bl	800bfb4 <RTC_Bcd2ToByte>
 800ba66:	4603      	mov	r3, r0
 800ba68:	461a      	mov	r2, r3
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ba78:	b590      	push	{r4, r7, lr}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	7f1b      	ldrb	r3, [r3, #28]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d101      	bne.n	800ba94 <HAL_RTC_SetDate+0x1c>
 800ba90:	2302      	movs	r3, #2
 800ba92:	e071      	b.n	800bb78 <HAL_RTC_SetDate+0x100>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2201      	movs	r2, #1
 800ba98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10e      	bne.n	800bac4 <HAL_RTC_SetDate+0x4c>
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	785b      	ldrb	r3, [r3, #1]
 800baaa:	f003 0310 	and.w	r3, r3, #16
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d008      	beq.n	800bac4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	785b      	ldrb	r3, [r3, #1]
 800bab6:	f023 0310 	bic.w	r3, r3, #16
 800baba:	b2db      	uxtb	r3, r3
 800babc:	330a      	adds	r3, #10
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d11c      	bne.n	800bb04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	78db      	ldrb	r3, [r3, #3]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fa53 	bl	800bf7a <RTC_ByteToBcd2>
 800bad4:	4603      	mov	r3, r0
 800bad6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	785b      	ldrb	r3, [r3, #1]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fa4c 	bl	800bf7a <RTC_ByteToBcd2>
 800bae2:	4603      	mov	r3, r0
 800bae4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bae6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	789b      	ldrb	r3, [r3, #2]
 800baec:	4618      	mov	r0, r3
 800baee:	f000 fa44 	bl	800bf7a <RTC_ByteToBcd2>
 800baf2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800baf4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bafe:	4313      	orrs	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	e00e      	b.n	800bb22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	78db      	ldrb	r3, [r3, #3]
 800bb08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	785b      	ldrb	r3, [r3, #1]
 800bb0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bb10:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bb16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	22ca      	movs	r2, #202	; 0xca
 800bb28:	625a      	str	r2, [r3, #36]	; 0x24
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2253      	movs	r2, #83	; 0x53
 800bb30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 f9c5 	bl	800bec2 <RTC_EnterInitMode>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bb3c:	7cfb      	ldrb	r3, [r7, #19]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10c      	bne.n	800bb5c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bb4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb50:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f000 f9ec 	bl	800bf30 <RTC_ExitInitMode>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bb5c:	7cfb      	ldrb	r3, [r7, #19]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d102      	bne.n	800bb68 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2201      	movs	r2, #1
 800bb66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	22ff      	movs	r2, #255	; 0xff
 800bb6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	771a      	strb	r2, [r3, #28]

  return status;
 800bb76:	7cfb      	ldrb	r3, [r7, #19]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	371c      	adds	r7, #28
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd90      	pop	{r4, r7, pc}

0800bb80 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bb9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	0c1b      	lsrs	r3, r3, #16
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	0a1b      	lsrs	r3, r3, #8
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	f003 031f 	and.w	r3, r3, #31
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	0b5b      	lsrs	r3, r3, #13
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	f003 0307 	and.w	r3, r3, #7
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d11a      	bne.n	800bc14 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	78db      	ldrb	r3, [r3, #3]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 f9e6 	bl	800bfb4 <RTC_Bcd2ToByte>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	461a      	mov	r2, r3
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	785b      	ldrb	r3, [r3, #1]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 f9dd 	bl	800bfb4 <RTC_Bcd2ToByte>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	789b      	ldrb	r3, [r3, #2]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f9d4 	bl	800bfb4 <RTC_Bcd2ToByte>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	461a      	mov	r2, r3
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3718      	adds	r7, #24
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800bc1e:	b590      	push	{r4, r7, lr}
 800bc20:	b089      	sub	sp, #36	; 0x24
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	60f8      	str	r0, [r7, #12]
 800bc26:	60b9      	str	r1, [r7, #8]
 800bc28:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	7f1b      	ldrb	r3, [r3, #28]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d101      	bne.n	800bc42 <HAL_RTC_SetAlarm+0x24>
 800bc3e:	2302      	movs	r3, #2
 800bc40:	e113      	b.n	800be6a <HAL_RTC_SetAlarm+0x24c>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2201      	movs	r2, #1
 800bc46:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d137      	bne.n	800bcc4 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d102      	bne.n	800bc68 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2200      	movs	r2, #0
 800bc66:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 f984 	bl	800bf7a <RTC_ByteToBcd2>
 800bc72:	4603      	mov	r3, r0
 800bc74:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	785b      	ldrb	r3, [r3, #1]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 f97d 	bl	800bf7a <RTC_ByteToBcd2>
 800bc80:	4603      	mov	r3, r0
 800bc82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bc84:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	789b      	ldrb	r3, [r3, #2]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f975 	bl	800bf7a <RTC_ByteToBcd2>
 800bc90:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bc92:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	78db      	ldrb	r3, [r3, #3]
 800bc9a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bc9c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f000 f967 	bl	800bf7a <RTC_ByteToBcd2>
 800bcac:	4603      	mov	r3, r0
 800bcae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800bcb0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bcb8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	61fb      	str	r3, [r7, #28]
 800bcc2:	e023      	b.n	800bd0c <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d102      	bne.n	800bcd8 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	785b      	ldrb	r3, [r3, #1]
 800bce2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bce4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bcea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	78db      	ldrb	r3, [r3, #3]
 800bcf0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bcf2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bcfa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800bcfc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bd02:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bd14:	4313      	orrs	r3, r2
 800bd16:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	22ca      	movs	r2, #202	; 0xca
 800bd1e:	625a      	str	r2, [r3, #36]	; 0x24
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2253      	movs	r2, #83	; 0x53
 800bd26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd30:	d148      	bne.n	800bdc4 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	689a      	ldr	r2, [r3, #8]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd40:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689a      	ldr	r2, [r3, #8]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bd50:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800bd62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bd64:	f7f9 fa4c 	bl	8005200 <HAL_GetTick>
 800bd68:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bd6a:	e013      	b.n	800bd94 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd6c:	f7f9 fa48 	bl	8005200 <HAL_GetTick>
 800bd70:	4602      	mov	r2, r0
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd7a:	d90b      	bls.n	800bd94 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	22ff      	movs	r2, #255	; 0xff
 800bd82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2203      	movs	r2, #3
 800bd88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bd90:	2303      	movs	r3, #3
 800bd92:	e06a      	b.n	800be6a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0e4      	beq.n	800bd6c <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	69fa      	ldr	r2, [r7, #28]
 800bda8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdc0:	609a      	str	r2, [r3, #8]
 800bdc2:	e047      	b.n	800be54 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	689a      	ldr	r2, [r3, #8]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bdd2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bde2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f462 7220 	orn	r2, r2, #640	; 0x280
 800bdf4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bdf6:	f7f9 fa03 	bl	8005200 <HAL_GetTick>
 800bdfa:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bdfc:	e013      	b.n	800be26 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bdfe:	f7f9 f9ff 	bl	8005200 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be0c:	d90b      	bls.n	800be26 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	22ff      	movs	r2, #255	; 0xff
 800be14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2203      	movs	r2, #3
 800be1a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e021      	b.n	800be6a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0e4      	beq.n	800bdfe <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	69fa      	ldr	r2, [r7, #28]
 800be3a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	697a      	ldr	r2, [r7, #20]
 800be42:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be52:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	22ff      	movs	r2, #255	; 0xff
 800be5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2201      	movs	r2, #1
 800be60:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3724      	adds	r7, #36	; 0x24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd90      	pop	{r4, r7, pc}

0800be72 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b084      	sub	sp, #16
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800be7a:	2300      	movs	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68da      	ldr	r2, [r3, #12]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800be8c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be8e:	f7f9 f9b7 	bl	8005200 <HAL_GetTick>
 800be92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800be94:	e009      	b.n	800beaa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800be96:	f7f9 f9b3 	bl	8005200 <HAL_GetTick>
 800be9a:	4602      	mov	r2, r0
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bea4:	d901      	bls.n	800beaa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bea6:	2303      	movs	r3, #3
 800bea8:	e007      	b.n	800beba <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f003 0320 	and.w	r3, r3, #32
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d0ee      	beq.n	800be96 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800beca:	2300      	movs	r3, #0
 800becc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d122      	bne.n	800bf26 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68da      	ldr	r2, [r3, #12]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800beee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bef0:	f7f9 f986 	bl	8005200 <HAL_GetTick>
 800bef4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bef6:	e00c      	b.n	800bf12 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bef8:	f7f9 f982 	bl	8005200 <HAL_GetTick>
 800befc:	4602      	mov	r2, r0
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf06:	d904      	bls.n	800bf12 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2204      	movs	r2, #4
 800bf0c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <RTC_EnterInitMode+0x64>
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d1e8      	bne.n	800bef8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68da      	ldr	r2, [r3, #12]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf4a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10a      	bne.n	800bf70 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff ff89 	bl	800be72 <HAL_RTC_WaitForSynchro>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d004      	beq.n	800bf70 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2204      	movs	r2, #4
 800bf6a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	b085      	sub	sp, #20
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	4603      	mov	r3, r0
 800bf82:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800bf84:	2300      	movs	r3, #0
 800bf86:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800bf88:	e005      	b.n	800bf96 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	3b0a      	subs	r3, #10
 800bf94:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	2b09      	cmp	r3, #9
 800bf9a:	d8f6      	bhi.n	800bf8a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	011b      	lsls	r3, r3, #4
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	b2db      	uxtb	r3, r3
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	4603      	mov	r3, r0
 800bfbc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	091b      	lsrs	r3, r3, #4
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	461a      	mov	r2, r3
 800bfca:	0092      	lsls	r2, r2, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800bfd2:	79fb      	ldrb	r3, [r7, #7]
 800bfd4:	f003 030f 	and.w	r3, r3, #15
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
 800bfdc:	4413      	add	r3, r2
 800bfde:	b2db      	uxtb	r3, r3
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b087      	sub	sp, #28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800bff8:	2300      	movs	r3, #0
 800bffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	3350      	adds	r3, #80	; 0x50
 800c002:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	697a      	ldr	r2, [r7, #20]
 800c00a:	4413      	add	r3, r2
 800c00c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	601a      	str	r2, [r3, #0]
}
 800c014:	bf00      	nop
 800c016:	371c      	adds	r7, #28
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3350      	adds	r3, #80	; 0x50
 800c034:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	4413      	add	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e041      	b.n	800c0e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d106      	bne.n	800c07c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7f8 fd8e 	bl	8004b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3304      	adds	r3, #4
 800c08c:	4619      	mov	r1, r3
 800c08e:	4610      	mov	r0, r2
 800c090:	f000 fd6a 	bl	800cb68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b01      	cmp	r3, #1
 800c102:	d001      	beq.n	800c108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e044      	b.n	800c192 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2202      	movs	r2, #2
 800c10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68da      	ldr	r2, [r3, #12]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f042 0201 	orr.w	r2, r2, #1
 800c11e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a1e      	ldr	r2, [pc, #120]	; (800c1a0 <HAL_TIM_Base_Start_IT+0xb0>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d018      	beq.n	800c15c <HAL_TIM_Base_Start_IT+0x6c>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c132:	d013      	beq.n	800c15c <HAL_TIM_Base_Start_IT+0x6c>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a1a      	ldr	r2, [pc, #104]	; (800c1a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d00e      	beq.n	800c15c <HAL_TIM_Base_Start_IT+0x6c>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a19      	ldr	r2, [pc, #100]	; (800c1a8 <HAL_TIM_Base_Start_IT+0xb8>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d009      	beq.n	800c15c <HAL_TIM_Base_Start_IT+0x6c>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a17      	ldr	r2, [pc, #92]	; (800c1ac <HAL_TIM_Base_Start_IT+0xbc>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d004      	beq.n	800c15c <HAL_TIM_Base_Start_IT+0x6c>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a16      	ldr	r2, [pc, #88]	; (800c1b0 <HAL_TIM_Base_Start_IT+0xc0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d111      	bne.n	800c180 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	f003 0307 	and.w	r3, r3, #7
 800c166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b06      	cmp	r3, #6
 800c16c:	d010      	beq.n	800c190 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f042 0201 	orr.w	r2, r2, #1
 800c17c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c17e:	e007      	b.n	800c190 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f042 0201 	orr.w	r2, r2, #1
 800c18e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	40010000 	.word	0x40010000
 800c1a4:	40000400 	.word	0x40000400
 800c1a8:	40000800 	.word	0x40000800
 800c1ac:	40000c00 	.word	0x40000c00
 800c1b0:	40014000 	.word	0x40014000

0800c1b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 0201 	bic.w	r2, r2, #1
 800c1ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6a1a      	ldr	r2, [r3, #32]
 800c1d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10f      	bne.n	800c1fc <HAL_TIM_Base_Stop_IT+0x48>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6a1a      	ldr	r2, [r3, #32]
 800c1e2:	f240 4344 	movw	r3, #1092	; 0x444
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d107      	bne.n	800c1fc <HAL_TIM_Base_Stop_IT+0x48>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f022 0201 	bic.w	r2, r2, #1
 800c1fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b082      	sub	sp, #8
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e041      	b.n	800c2a8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d106      	bne.n	800c23e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f839 	bl	800c2b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2202      	movs	r2, #2
 800c242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3304      	adds	r3, #4
 800c24e:	4619      	mov	r1, r3
 800c250:	4610      	mov	r0, r2
 800c252:	f000 fc89 	bl	800cb68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2201      	movs	r2, #1
 800c25a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d104      	bne.n	800c2e2 <HAL_TIM_IC_Start_IT+0x1e>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	e013      	b.n	800c30a <HAL_TIM_IC_Start_IT+0x46>
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2b04      	cmp	r3, #4
 800c2e6:	d104      	bne.n	800c2f2 <HAL_TIM_IC_Start_IT+0x2e>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	e00b      	b.n	800c30a <HAL_TIM_IC_Start_IT+0x46>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b08      	cmp	r3, #8
 800c2f6:	d104      	bne.n	800c302 <HAL_TIM_IC_Start_IT+0x3e>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	e003      	b.n	800c30a <HAL_TIM_IC_Start_IT+0x46>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d104      	bne.n	800c31c <HAL_TIM_IC_Start_IT+0x58>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	e013      	b.n	800c344 <HAL_TIM_IC_Start_IT+0x80>
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2b04      	cmp	r3, #4
 800c320:	d104      	bne.n	800c32c <HAL_TIM_IC_Start_IT+0x68>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	e00b      	b.n	800c344 <HAL_TIM_IC_Start_IT+0x80>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b08      	cmp	r3, #8
 800c330:	d104      	bne.n	800c33c <HAL_TIM_IC_Start_IT+0x78>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	e003      	b.n	800c344 <HAL_TIM_IC_Start_IT+0x80>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c342:	b2db      	uxtb	r3, r3
 800c344:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d102      	bne.n	800c352 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c34c:	7b7b      	ldrb	r3, [r7, #13]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d001      	beq.n	800c356 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e0c2      	b.n	800c4dc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d104      	bne.n	800c366 <HAL_TIM_IC_Start_IT+0xa2>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c364:	e013      	b.n	800c38e <HAL_TIM_IC_Start_IT+0xca>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b04      	cmp	r3, #4
 800c36a:	d104      	bne.n	800c376 <HAL_TIM_IC_Start_IT+0xb2>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c374:	e00b      	b.n	800c38e <HAL_TIM_IC_Start_IT+0xca>
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b08      	cmp	r3, #8
 800c37a:	d104      	bne.n	800c386 <HAL_TIM_IC_Start_IT+0xc2>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2202      	movs	r2, #2
 800c380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c384:	e003      	b.n	800c38e <HAL_TIM_IC_Start_IT+0xca>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2202      	movs	r2, #2
 800c38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d104      	bne.n	800c39e <HAL_TIM_IC_Start_IT+0xda>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c39c:	e013      	b.n	800c3c6 <HAL_TIM_IC_Start_IT+0x102>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b04      	cmp	r3, #4
 800c3a2:	d104      	bne.n	800c3ae <HAL_TIM_IC_Start_IT+0xea>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3ac:	e00b      	b.n	800c3c6 <HAL_TIM_IC_Start_IT+0x102>
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	2b08      	cmp	r3, #8
 800c3b2:	d104      	bne.n	800c3be <HAL_TIM_IC_Start_IT+0xfa>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3bc:	e003      	b.n	800c3c6 <HAL_TIM_IC_Start_IT+0x102>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b0c      	cmp	r3, #12
 800c3ca:	d841      	bhi.n	800c450 <HAL_TIM_IC_Start_IT+0x18c>
 800c3cc:	a201      	add	r2, pc, #4	; (adr r2, 800c3d4 <HAL_TIM_IC_Start_IT+0x110>)
 800c3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d2:	bf00      	nop
 800c3d4:	0800c409 	.word	0x0800c409
 800c3d8:	0800c451 	.word	0x0800c451
 800c3dc:	0800c451 	.word	0x0800c451
 800c3e0:	0800c451 	.word	0x0800c451
 800c3e4:	0800c41b 	.word	0x0800c41b
 800c3e8:	0800c451 	.word	0x0800c451
 800c3ec:	0800c451 	.word	0x0800c451
 800c3f0:	0800c451 	.word	0x0800c451
 800c3f4:	0800c42d 	.word	0x0800c42d
 800c3f8:	0800c451 	.word	0x0800c451
 800c3fc:	0800c451 	.word	0x0800c451
 800c400:	0800c451 	.word	0x0800c451
 800c404:	0800c43f 	.word	0x0800c43f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68da      	ldr	r2, [r3, #12]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f042 0202 	orr.w	r2, r2, #2
 800c416:	60da      	str	r2, [r3, #12]
      break;
 800c418:	e01d      	b.n	800c456 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f042 0204 	orr.w	r2, r2, #4
 800c428:	60da      	str	r2, [r3, #12]
      break;
 800c42a:	e014      	b.n	800c456 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68da      	ldr	r2, [r3, #12]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f042 0208 	orr.w	r2, r2, #8
 800c43a:	60da      	str	r2, [r3, #12]
      break;
 800c43c:	e00b      	b.n	800c456 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68da      	ldr	r2, [r3, #12]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f042 0210 	orr.w	r2, r2, #16
 800c44c:	60da      	str	r2, [r3, #12]
      break;
 800c44e:	e002      	b.n	800c456 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	73fb      	strb	r3, [r7, #15]
      break;
 800c454:	bf00      	nop
  }

  if (status == HAL_OK)
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d13e      	bne.n	800c4da <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2201      	movs	r2, #1
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fdb7 	bl	800cfd8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a1d      	ldr	r2, [pc, #116]	; (800c4e4 <HAL_TIM_IC_Start_IT+0x220>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d018      	beq.n	800c4a6 <HAL_TIM_IC_Start_IT+0x1e2>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c47c:	d013      	beq.n	800c4a6 <HAL_TIM_IC_Start_IT+0x1e2>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a19      	ldr	r2, [pc, #100]	; (800c4e8 <HAL_TIM_IC_Start_IT+0x224>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d00e      	beq.n	800c4a6 <HAL_TIM_IC_Start_IT+0x1e2>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a17      	ldr	r2, [pc, #92]	; (800c4ec <HAL_TIM_IC_Start_IT+0x228>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d009      	beq.n	800c4a6 <HAL_TIM_IC_Start_IT+0x1e2>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a16      	ldr	r2, [pc, #88]	; (800c4f0 <HAL_TIM_IC_Start_IT+0x22c>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d004      	beq.n	800c4a6 <HAL_TIM_IC_Start_IT+0x1e2>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a14      	ldr	r2, [pc, #80]	; (800c4f4 <HAL_TIM_IC_Start_IT+0x230>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d111      	bne.n	800c4ca <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f003 0307 	and.w	r3, r3, #7
 800c4b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b06      	cmp	r3, #6
 800c4b6:	d010      	beq.n	800c4da <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f042 0201 	orr.w	r2, r2, #1
 800c4c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4c8:	e007      	b.n	800c4da <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f042 0201 	orr.w	r2, r2, #1
 800c4d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	40010000 	.word	0x40010000
 800c4e8:	40000400 	.word	0x40000400
 800c4ec:	40000800 	.word	0x40000800
 800c4f0:	40000c00 	.word	0x40000c00
 800c4f4:	40014000 	.word	0x40014000

0800c4f8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b0c      	cmp	r3, #12
 800c50a:	d841      	bhi.n	800c590 <HAL_TIM_IC_Stop_IT+0x98>
 800c50c:	a201      	add	r2, pc, #4	; (adr r2, 800c514 <HAL_TIM_IC_Stop_IT+0x1c>)
 800c50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c512:	bf00      	nop
 800c514:	0800c549 	.word	0x0800c549
 800c518:	0800c591 	.word	0x0800c591
 800c51c:	0800c591 	.word	0x0800c591
 800c520:	0800c591 	.word	0x0800c591
 800c524:	0800c55b 	.word	0x0800c55b
 800c528:	0800c591 	.word	0x0800c591
 800c52c:	0800c591 	.word	0x0800c591
 800c530:	0800c591 	.word	0x0800c591
 800c534:	0800c56d 	.word	0x0800c56d
 800c538:	0800c591 	.word	0x0800c591
 800c53c:	0800c591 	.word	0x0800c591
 800c540:	0800c591 	.word	0x0800c591
 800c544:	0800c57f 	.word	0x0800c57f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68da      	ldr	r2, [r3, #12]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0202 	bic.w	r2, r2, #2
 800c556:	60da      	str	r2, [r3, #12]
      break;
 800c558:	e01d      	b.n	800c596 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68da      	ldr	r2, [r3, #12]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f022 0204 	bic.w	r2, r2, #4
 800c568:	60da      	str	r2, [r3, #12]
      break;
 800c56a:	e014      	b.n	800c596 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68da      	ldr	r2, [r3, #12]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0208 	bic.w	r2, r2, #8
 800c57a:	60da      	str	r2, [r3, #12]
      break;
 800c57c:	e00b      	b.n	800c596 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68da      	ldr	r2, [r3, #12]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f022 0210 	bic.w	r2, r2, #16
 800c58c:	60da      	str	r2, [r3, #12]
      break;
 800c58e:	e002      	b.n	800c596 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	73fb      	strb	r3, [r7, #15]
      break;
 800c594:	bf00      	nop
  }

  if (status == HAL_OK)
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d156      	bne.n	800c64a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	6839      	ldr	r1, [r7, #0]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f000 fd17 	bl	800cfd8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6a1a      	ldr	r2, [r3, #32]
 800c5b0:	f241 1311 	movw	r3, #4369	; 0x1111
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10f      	bne.n	800c5da <HAL_TIM_IC_Stop_IT+0xe2>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6a1a      	ldr	r2, [r3, #32]
 800c5c0:	f240 4344 	movw	r3, #1092	; 0x444
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d107      	bne.n	800c5da <HAL_TIM_IC_Stop_IT+0xe2>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f022 0201 	bic.w	r2, r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d104      	bne.n	800c5ea <HAL_TIM_IC_Stop_IT+0xf2>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5e8:	e013      	b.n	800c612 <HAL_TIM_IC_Stop_IT+0x11a>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b04      	cmp	r3, #4
 800c5ee:	d104      	bne.n	800c5fa <HAL_TIM_IC_Stop_IT+0x102>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5f8:	e00b      	b.n	800c612 <HAL_TIM_IC_Stop_IT+0x11a>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2b08      	cmp	r3, #8
 800c5fe:	d104      	bne.n	800c60a <HAL_TIM_IC_Stop_IT+0x112>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c608:	e003      	b.n	800c612 <HAL_TIM_IC_Stop_IT+0x11a>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d104      	bne.n	800c622 <HAL_TIM_IC_Stop_IT+0x12a>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c620:	e013      	b.n	800c64a <HAL_TIM_IC_Stop_IT+0x152>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b04      	cmp	r3, #4
 800c626:	d104      	bne.n	800c632 <HAL_TIM_IC_Stop_IT+0x13a>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c630:	e00b      	b.n	800c64a <HAL_TIM_IC_Stop_IT+0x152>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b08      	cmp	r3, #8
 800c636:	d104      	bne.n	800c642 <HAL_TIM_IC_Stop_IT+0x14a>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c640:	e003      	b.n	800c64a <HAL_TIM_IC_Stop_IT+0x152>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2201      	movs	r2, #1
 800c646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	f003 0302 	and.w	r3, r3, #2
 800c666:	2b02      	cmp	r3, #2
 800c668:	d122      	bne.n	800c6b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f003 0302 	and.w	r3, r3, #2
 800c674:	2b02      	cmp	r3, #2
 800c676:	d11b      	bne.n	800c6b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f06f 0202 	mvn.w	r2, #2
 800c680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2201      	movs	r2, #1
 800c686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	f003 0303 	and.w	r3, r3, #3
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7f6 ff3c 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 800c69c:	e005      	b.n	800c6aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fa43 	bl	800cb2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fa4a 	bl	800cb3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	f003 0304 	and.w	r3, r3, #4
 800c6ba:	2b04      	cmp	r3, #4
 800c6bc:	d122      	bne.n	800c704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	f003 0304 	and.w	r3, r3, #4
 800c6c8:	2b04      	cmp	r3, #4
 800c6ca:	d11b      	bne.n	800c704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f06f 0204 	mvn.w	r2, #4
 800c6d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2202      	movs	r2, #2
 800c6da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7f6 ff12 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 800c6f0:	e005      	b.n	800c6fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fa19 	bl	800cb2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fa20 	bl	800cb3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f003 0308 	and.w	r3, r3, #8
 800c70e:	2b08      	cmp	r3, #8
 800c710:	d122      	bne.n	800c758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f003 0308 	and.w	r3, r3, #8
 800c71c:	2b08      	cmp	r3, #8
 800c71e:	d11b      	bne.n	800c758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f06f 0208 	mvn.w	r2, #8
 800c728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2204      	movs	r2, #4
 800c72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	f003 0303 	and.w	r3, r3, #3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7f6 fee8 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 800c744:	e005      	b.n	800c752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f9ef 	bl	800cb2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f9f6 	bl	800cb3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f003 0310 	and.w	r3, r3, #16
 800c762:	2b10      	cmp	r3, #16
 800c764:	d122      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0310 	and.w	r3, r3, #16
 800c770:	2b10      	cmp	r3, #16
 800c772:	d11b      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f06f 0210 	mvn.w	r2, #16
 800c77c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2208      	movs	r2, #8
 800c782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7f6 febe 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 800c798:	e005      	b.n	800c7a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f9c5 	bl	800cb2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f9cc 	bl	800cb3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d10e      	bne.n	800c7d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d107      	bne.n	800c7d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f06f 0201 	mvn.w	r2, #1
 800c7d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7f7 ffc6 	bl	8004764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e2:	2b80      	cmp	r3, #128	; 0x80
 800c7e4:	d10e      	bne.n	800c804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f0:	2b80      	cmp	r3, #128	; 0x80
 800c7f2:	d107      	bne.n	800c804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c7fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fc88 	bl	800d114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c80e:	2b40      	cmp	r3, #64	; 0x40
 800c810:	d10e      	bne.n	800c830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81c:	2b40      	cmp	r3, #64	; 0x40
 800c81e:	d107      	bne.n	800c830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f991 	bl	800cb52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	f003 0320 	and.w	r3, r3, #32
 800c83a:	2b20      	cmp	r3, #32
 800c83c:	d10e      	bne.n	800c85c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	f003 0320 	and.w	r3, r3, #32
 800c848:	2b20      	cmp	r3, #32
 800c84a:	d107      	bne.n	800c85c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f06f 0220 	mvn.w	r2, #32
 800c854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fc52 	bl	800d100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d101      	bne.n	800c882 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c87e:	2302      	movs	r3, #2
 800c880:	e088      	b.n	800c994 <HAL_TIM_IC_ConfigChannel+0x130>
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d11b      	bne.n	800c8c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6818      	ldr	r0, [r3, #0]
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	6819      	ldr	r1, [r3, #0]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	f000 f9e2 	bl	800cc68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	699a      	ldr	r2, [r3, #24]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f022 020c 	bic.w	r2, r2, #12
 800c8b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6999      	ldr	r1, [r3, #24]
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	689a      	ldr	r2, [r3, #8]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	619a      	str	r2, [r3, #24]
 800c8c6:	e060      	b.n	800c98a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	d11c      	bne.n	800c908 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6818      	ldr	r0, [r3, #0]
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	6819      	ldr	r1, [r3, #0]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	f000 fa5a 	bl	800cd96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	699a      	ldr	r2, [r3, #24]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c8f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6999      	ldr	r1, [r3, #24]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	021a      	lsls	r2, r3, #8
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	430a      	orrs	r2, r1
 800c904:	619a      	str	r2, [r3, #24]
 800c906:	e040      	b.n	800c98a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b08      	cmp	r3, #8
 800c90c:	d11b      	bne.n	800c946 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	6819      	ldr	r1, [r3, #0]
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f000 faa7 	bl	800ce70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	69da      	ldr	r2, [r3, #28]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f022 020c 	bic.w	r2, r2, #12
 800c930:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	69d9      	ldr	r1, [r3, #28]
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	689a      	ldr	r2, [r3, #8]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	430a      	orrs	r2, r1
 800c942:	61da      	str	r2, [r3, #28]
 800c944:	e021      	b.n	800c98a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b0c      	cmp	r3, #12
 800c94a:	d11c      	bne.n	800c986 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6818      	ldr	r0, [r3, #0]
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	f000 fac4 	bl	800cee8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	69da      	ldr	r2, [r3, #28]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c96e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	69d9      	ldr	r1, [r3, #28]
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	021a      	lsls	r2, r3, #8
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	430a      	orrs	r2, r1
 800c982:	61da      	str	r2, [r3, #28]
 800c984:	e001      	b.n	800c98a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c992:	7dfb      	ldrb	r3, [r7, #23]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d101      	bne.n	800c9b8 <HAL_TIM_ConfigClockSource+0x1c>
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	e0b4      	b.n	800cb22 <HAL_TIM_ConfigClockSource+0x186>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c9d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9f0:	d03e      	beq.n	800ca70 <HAL_TIM_ConfigClockSource+0xd4>
 800c9f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9f6:	f200 8087 	bhi.w	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
 800c9fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9fe:	f000 8086 	beq.w	800cb0e <HAL_TIM_ConfigClockSource+0x172>
 800ca02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca06:	d87f      	bhi.n	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
 800ca08:	2b70      	cmp	r3, #112	; 0x70
 800ca0a:	d01a      	beq.n	800ca42 <HAL_TIM_ConfigClockSource+0xa6>
 800ca0c:	2b70      	cmp	r3, #112	; 0x70
 800ca0e:	d87b      	bhi.n	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
 800ca10:	2b60      	cmp	r3, #96	; 0x60
 800ca12:	d050      	beq.n	800cab6 <HAL_TIM_ConfigClockSource+0x11a>
 800ca14:	2b60      	cmp	r3, #96	; 0x60
 800ca16:	d877      	bhi.n	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
 800ca18:	2b50      	cmp	r3, #80	; 0x50
 800ca1a:	d03c      	beq.n	800ca96 <HAL_TIM_ConfigClockSource+0xfa>
 800ca1c:	2b50      	cmp	r3, #80	; 0x50
 800ca1e:	d873      	bhi.n	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
 800ca20:	2b40      	cmp	r3, #64	; 0x40
 800ca22:	d058      	beq.n	800cad6 <HAL_TIM_ConfigClockSource+0x13a>
 800ca24:	2b40      	cmp	r3, #64	; 0x40
 800ca26:	d86f      	bhi.n	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
 800ca28:	2b30      	cmp	r3, #48	; 0x30
 800ca2a:	d064      	beq.n	800caf6 <HAL_TIM_ConfigClockSource+0x15a>
 800ca2c:	2b30      	cmp	r3, #48	; 0x30
 800ca2e:	d86b      	bhi.n	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
 800ca30:	2b20      	cmp	r3, #32
 800ca32:	d060      	beq.n	800caf6 <HAL_TIM_ConfigClockSource+0x15a>
 800ca34:	2b20      	cmp	r3, #32
 800ca36:	d867      	bhi.n	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d05c      	beq.n	800caf6 <HAL_TIM_ConfigClockSource+0x15a>
 800ca3c:	2b10      	cmp	r3, #16
 800ca3e:	d05a      	beq.n	800caf6 <HAL_TIM_ConfigClockSource+0x15a>
 800ca40:	e062      	b.n	800cb08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6818      	ldr	r0, [r3, #0]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	6899      	ldr	r1, [r3, #8]
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	685a      	ldr	r2, [r3, #4]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	f000 faa1 	bl	800cf98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	609a      	str	r2, [r3, #8]
      break;
 800ca6e:	e04f      	b.n	800cb10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6818      	ldr	r0, [r3, #0]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	6899      	ldr	r1, [r3, #8]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	f000 fa8a 	bl	800cf98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	689a      	ldr	r2, [r3, #8]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca92:	609a      	str	r2, [r3, #8]
      break;
 800ca94:	e03c      	b.n	800cb10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6818      	ldr	r0, [r3, #0]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	6859      	ldr	r1, [r3, #4]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	461a      	mov	r2, r3
 800caa4:	f000 f948 	bl	800cd38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2150      	movs	r1, #80	; 0x50
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fa57 	bl	800cf62 <TIM_ITRx_SetConfig>
      break;
 800cab4:	e02c      	b.n	800cb10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	6859      	ldr	r1, [r3, #4]
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	461a      	mov	r2, r3
 800cac4:	f000 f9a4 	bl	800ce10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2160      	movs	r1, #96	; 0x60
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 fa47 	bl	800cf62 <TIM_ITRx_SetConfig>
      break;
 800cad4:	e01c      	b.n	800cb10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6818      	ldr	r0, [r3, #0]
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	6859      	ldr	r1, [r3, #4]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	461a      	mov	r2, r3
 800cae4:	f000 f928 	bl	800cd38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2140      	movs	r1, #64	; 0x40
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fa37 	bl	800cf62 <TIM_ITRx_SetConfig>
      break;
 800caf4:	e00c      	b.n	800cb10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4619      	mov	r1, r3
 800cb00:	4610      	mov	r0, r2
 800cb02:	f000 fa2e 	bl	800cf62 <TIM_ITRx_SetConfig>
      break;
 800cb06:	e003      	b.n	800cb10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb0c:	e000      	b.n	800cb10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cb0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb32:	bf00      	nop
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b083      	sub	sp, #12
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb46:	bf00      	nop
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b083      	sub	sp, #12
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb5a:	bf00      	nop
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
	...

0800cb68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a34      	ldr	r2, [pc, #208]	; (800cc4c <TIM_Base_SetConfig+0xe4>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d00f      	beq.n	800cba0 <TIM_Base_SetConfig+0x38>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb86:	d00b      	beq.n	800cba0 <TIM_Base_SetConfig+0x38>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a31      	ldr	r2, [pc, #196]	; (800cc50 <TIM_Base_SetConfig+0xe8>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d007      	beq.n	800cba0 <TIM_Base_SetConfig+0x38>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a30      	ldr	r2, [pc, #192]	; (800cc54 <TIM_Base_SetConfig+0xec>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d003      	beq.n	800cba0 <TIM_Base_SetConfig+0x38>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a2f      	ldr	r2, [pc, #188]	; (800cc58 <TIM_Base_SetConfig+0xf0>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d108      	bne.n	800cbb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a25      	ldr	r2, [pc, #148]	; (800cc4c <TIM_Base_SetConfig+0xe4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d01b      	beq.n	800cbf2 <TIM_Base_SetConfig+0x8a>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbc0:	d017      	beq.n	800cbf2 <TIM_Base_SetConfig+0x8a>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a22      	ldr	r2, [pc, #136]	; (800cc50 <TIM_Base_SetConfig+0xe8>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d013      	beq.n	800cbf2 <TIM_Base_SetConfig+0x8a>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a21      	ldr	r2, [pc, #132]	; (800cc54 <TIM_Base_SetConfig+0xec>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d00f      	beq.n	800cbf2 <TIM_Base_SetConfig+0x8a>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a20      	ldr	r2, [pc, #128]	; (800cc58 <TIM_Base_SetConfig+0xf0>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d00b      	beq.n	800cbf2 <TIM_Base_SetConfig+0x8a>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a1f      	ldr	r2, [pc, #124]	; (800cc5c <TIM_Base_SetConfig+0xf4>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d007      	beq.n	800cbf2 <TIM_Base_SetConfig+0x8a>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a1e      	ldr	r2, [pc, #120]	; (800cc60 <TIM_Base_SetConfig+0xf8>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d003      	beq.n	800cbf2 <TIM_Base_SetConfig+0x8a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <TIM_Base_SetConfig+0xfc>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d108      	bne.n	800cc04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	689a      	ldr	r2, [r3, #8]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a08      	ldr	r2, [pc, #32]	; (800cc4c <TIM_Base_SetConfig+0xe4>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d103      	bne.n	800cc38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	691a      	ldr	r2, [r3, #16]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	615a      	str	r2, [r3, #20]
}
 800cc3e:	bf00      	nop
 800cc40:	3714      	adds	r7, #20
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	40010000 	.word	0x40010000
 800cc50:	40000400 	.word	0x40000400
 800cc54:	40000800 	.word	0x40000800
 800cc58:	40000c00 	.word	0x40000c00
 800cc5c:	40014000 	.word	0x40014000
 800cc60:	40014400 	.word	0x40014400
 800cc64:	40014800 	.word	0x40014800

0800cc68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b087      	sub	sp, #28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	f023 0201 	bic.w	r2, r3, #1
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	699b      	ldr	r3, [r3, #24]
 800cc86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6a1b      	ldr	r3, [r3, #32]
 800cc8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4a24      	ldr	r2, [pc, #144]	; (800cd24 <TIM_TI1_SetConfig+0xbc>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d013      	beq.n	800ccbe <TIM_TI1_SetConfig+0x56>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9c:	d00f      	beq.n	800ccbe <TIM_TI1_SetConfig+0x56>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	4a21      	ldr	r2, [pc, #132]	; (800cd28 <TIM_TI1_SetConfig+0xc0>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d00b      	beq.n	800ccbe <TIM_TI1_SetConfig+0x56>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4a20      	ldr	r2, [pc, #128]	; (800cd2c <TIM_TI1_SetConfig+0xc4>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d007      	beq.n	800ccbe <TIM_TI1_SetConfig+0x56>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4a1f      	ldr	r2, [pc, #124]	; (800cd30 <TIM_TI1_SetConfig+0xc8>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d003      	beq.n	800ccbe <TIM_TI1_SetConfig+0x56>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	4a1e      	ldr	r2, [pc, #120]	; (800cd34 <TIM_TI1_SetConfig+0xcc>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d101      	bne.n	800ccc2 <TIM_TI1_SetConfig+0x5a>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e000      	b.n	800ccc4 <TIM_TI1_SetConfig+0x5c>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d008      	beq.n	800ccda <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f023 0303 	bic.w	r3, r3, #3
 800ccce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	617b      	str	r3, [r7, #20]
 800ccd8:	e003      	b.n	800cce2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f043 0301 	orr.w	r3, r3, #1
 800cce0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	011b      	lsls	r3, r3, #4
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f023 030a 	bic.w	r3, r3, #10
 800ccfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	f003 030a 	and.w	r3, r3, #10
 800cd04:	693a      	ldr	r2, [r7, #16]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	697a      	ldr	r2, [r7, #20]
 800cd0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	693a      	ldr	r2, [r7, #16]
 800cd14:	621a      	str	r2, [r3, #32]
}
 800cd16:	bf00      	nop
 800cd18:	371c      	adds	r7, #28
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	40010000 	.word	0x40010000
 800cd28:	40000400 	.word	0x40000400
 800cd2c:	40000800 	.word	0x40000800
 800cd30:	40000c00 	.word	0x40000c00
 800cd34:	40014000 	.word	0x40014000

0800cd38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6a1b      	ldr	r3, [r3, #32]
 800cd48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	f023 0201 	bic.w	r2, r3, #1
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	011b      	lsls	r3, r3, #4
 800cd68:	693a      	ldr	r2, [r7, #16]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f023 030a 	bic.w	r3, r3, #10
 800cd74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	693a      	ldr	r2, [r7, #16]
 800cd82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	621a      	str	r2, [r3, #32]
}
 800cd8a:	bf00      	nop
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b087      	sub	sp, #28
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	607a      	str	r2, [r7, #4]
 800cda2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6a1b      	ldr	r3, [r3, #32]
 800cda8:	f023 0210 	bic.w	r2, r3, #16
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	021b      	lsls	r3, r3, #8
 800cdc8:	697a      	ldr	r2, [r7, #20]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cdd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	031b      	lsls	r3, r3, #12
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	697a      	ldr	r2, [r7, #20]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cde8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	621a      	str	r2, [r3, #32]
}
 800ce04:	bf00      	nop
 800ce06:	371c      	adds	r7, #28
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6a1b      	ldr	r3, [r3, #32]
 800ce20:	f023 0210 	bic.w	r2, r3, #16
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	699b      	ldr	r3, [r3, #24]
 800ce2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6a1b      	ldr	r3, [r3, #32]
 800ce32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	031b      	lsls	r3, r3, #12
 800ce40:	697a      	ldr	r2, [r7, #20]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	011b      	lsls	r3, r3, #4
 800ce52:	693a      	ldr	r2, [r7, #16]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	621a      	str	r2, [r3, #32]
}
 800ce64:	bf00      	nop
 800ce66:	371c      	adds	r7, #28
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b087      	sub	sp, #28
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	69db      	ldr	r3, [r3, #28]
 800ce8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6a1b      	ldr	r3, [r3, #32]
 800ce94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f023 0303 	bic.w	r3, r3, #3
 800ce9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ceac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	011b      	lsls	r3, r3, #4
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800cec0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	021b      	lsls	r3, r3, #8
 800cec6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	4313      	orrs	r3, r2
 800cece:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	621a      	str	r2, [r3, #32]
}
 800cedc:	bf00      	nop
 800cede:	371c      	adds	r7, #28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
 800cef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	69db      	ldr	r3, [r3, #28]
 800cf06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6a1b      	ldr	r3, [r3, #32]
 800cf0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	021b      	lsls	r3, r3, #8
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	031b      	lsls	r3, r3, #12
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800cf3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	031b      	lsls	r3, r3, #12
 800cf40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800cf44:	693a      	ldr	r2, [r7, #16]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	621a      	str	r2, [r3, #32]
}
 800cf56:	bf00      	nop
 800cf58:	371c      	adds	r7, #28
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b085      	sub	sp, #20
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf7a:	683a      	ldr	r2, [r7, #0]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	f043 0307 	orr.w	r3, r3, #7
 800cf84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	609a      	str	r2, [r3, #8]
}
 800cf8c:	bf00      	nop
 800cf8e:	3714      	adds	r7, #20
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	021a      	lsls	r2, r3, #8
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	431a      	orrs	r2, r3
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	697a      	ldr	r2, [r7, #20]
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	609a      	str	r2, [r3, #8]
}
 800cfcc:	bf00      	nop
 800cfce:	371c      	adds	r7, #28
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b087      	sub	sp, #28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	f003 031f 	and.w	r3, r3, #31
 800cfea:	2201      	movs	r2, #1
 800cfec:	fa02 f303 	lsl.w	r3, r2, r3
 800cff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6a1a      	ldr	r2, [r3, #32]
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	43db      	mvns	r3, r3
 800cffa:	401a      	ands	r2, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6a1a      	ldr	r2, [r3, #32]
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	f003 031f 	and.w	r3, r3, #31
 800d00a:	6879      	ldr	r1, [r7, #4]
 800d00c:	fa01 f303 	lsl.w	r3, r1, r3
 800d010:	431a      	orrs	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	621a      	str	r2, [r3, #32]
}
 800d016:	bf00      	nop
 800d018:	371c      	adds	r7, #28
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
	...

0800d024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d034:	2b01      	cmp	r3, #1
 800d036:	d101      	bne.n	800d03c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d038:	2302      	movs	r3, #2
 800d03a:	e050      	b.n	800d0de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2202      	movs	r2, #2
 800d048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a1c      	ldr	r2, [pc, #112]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d018      	beq.n	800d0b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d088:	d013      	beq.n	800d0b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a18      	ldr	r2, [pc, #96]	; (800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d00e      	beq.n	800d0b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a16      	ldr	r2, [pc, #88]	; (800d0f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d009      	beq.n	800d0b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a15      	ldr	r2, [pc, #84]	; (800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d004      	beq.n	800d0b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a13      	ldr	r2, [pc, #76]	; (800d0fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d10c      	bne.n	800d0cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	40010000 	.word	0x40010000
 800d0f0:	40000400 	.word	0x40000400
 800d0f4:	40000800 	.word	0x40000800
 800d0f8:	40000c00 	.word	0x40000c00
 800d0fc:	40014000 	.word	0x40014000

0800d100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d101      	bne.n	800d13a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e03f      	b.n	800d1ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	d106      	bne.n	800d154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7f7 fdac 	bl	8004cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2224      	movs	r2, #36	; 0x24
 800d158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68da      	ldr	r2, [r3, #12]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d16a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 fc7b 	bl	800da68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	691a      	ldr	r2, [r3, #16]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	695a      	ldr	r2, [r3, #20]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68da      	ldr	r2, [r3, #12]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2220      	movs	r2, #32
 800d1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
	...

0800d1c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b0ba      	sub	sp, #232	; 0xe8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	695b      	ldr	r3, [r3, #20]
 800d1e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1fa:	f003 030f 	and.w	r3, r3, #15
 800d1fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10f      	bne.n	800d22a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d20e:	f003 0320 	and.w	r3, r3, #32
 800d212:	2b00      	cmp	r3, #0
 800d214:	d009      	beq.n	800d22a <HAL_UART_IRQHandler+0x66>
 800d216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d21a:	f003 0320 	and.w	r3, r3, #32
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d003      	beq.n	800d22a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 fb65 	bl	800d8f2 <UART_Receive_IT>
      return;
 800d228:	e256      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d22a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 80de 	beq.w	800d3f0 <HAL_UART_IRQHandler+0x22c>
 800d234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d238:	f003 0301 	and.w	r3, r3, #1
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d244:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 80d1 	beq.w	800d3f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00b      	beq.n	800d272 <HAL_UART_IRQHandler+0xae>
 800d25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d262:	2b00      	cmp	r3, #0
 800d264:	d005      	beq.n	800d272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	f043 0201 	orr.w	r2, r3, #1
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d276:	f003 0304 	and.w	r3, r3, #4
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00b      	beq.n	800d296 <HAL_UART_IRQHandler+0xd2>
 800d27e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	d005      	beq.n	800d296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28e:	f043 0202 	orr.w	r2, r3, #2
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d29a:	f003 0302 	and.w	r3, r3, #2
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00b      	beq.n	800d2ba <HAL_UART_IRQHandler+0xf6>
 800d2a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2a6:	f003 0301 	and.w	r3, r3, #1
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d005      	beq.n	800d2ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b2:	f043 0204 	orr.w	r2, r3, #4
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2be:	f003 0308 	and.w	r3, r3, #8
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d011      	beq.n	800d2ea <HAL_UART_IRQHandler+0x126>
 800d2c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2ca:	f003 0320 	and.w	r3, r3, #32
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d105      	bne.n	800d2de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d2d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d005      	beq.n	800d2ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e2:	f043 0208 	orr.w	r2, r3, #8
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 81ed 	beq.w	800d6ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2f8:	f003 0320 	and.w	r3, r3, #32
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d008      	beq.n	800d312 <HAL_UART_IRQHandler+0x14e>
 800d300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d304:	f003 0320 	and.w	r3, r3, #32
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 faf0 	bl	800d8f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d31c:	2b40      	cmp	r3, #64	; 0x40
 800d31e:	bf0c      	ite	eq
 800d320:	2301      	moveq	r3, #1
 800d322:	2300      	movne	r3, #0
 800d324:	b2db      	uxtb	r3, r3
 800d326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32e:	f003 0308 	and.w	r3, r3, #8
 800d332:	2b00      	cmp	r3, #0
 800d334:	d103      	bne.n	800d33e <HAL_UART_IRQHandler+0x17a>
 800d336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d04f      	beq.n	800d3de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f9f8 	bl	800d734 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d34e:	2b40      	cmp	r3, #64	; 0x40
 800d350:	d141      	bne.n	800d3d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3314      	adds	r3, #20
 800d358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d35c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d360:	e853 3f00 	ldrex	r3, [r3]
 800d364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d36c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3314      	adds	r3, #20
 800d37a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d37e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d38a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d38e:	e841 2300 	strex	r3, r2, [r1]
 800d392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1d9      	bne.n	800d352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d013      	beq.n	800d3ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3aa:	4a7d      	ldr	r2, [pc, #500]	; (800d5a0 <HAL_UART_IRQHandler+0x3dc>)
 800d3ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7f8 fd9e 	bl	8005ef4 <HAL_DMA_Abort_IT>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d016      	beq.n	800d3ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3cc:	e00e      	b.n	800d3ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f99a 	bl	800d708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3d4:	e00a      	b.n	800d3ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f996 	bl	800d708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3dc:	e006      	b.n	800d3ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f992 	bl	800d708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d3ea:	e170      	b.n	800d6ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3ec:	bf00      	nop
    return;
 800d3ee:	e16e      	b.n	800d6ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	f040 814a 	bne.w	800d68e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3fe:	f003 0310 	and.w	r3, r3, #16
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 8143 	beq.w	800d68e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d40c:	f003 0310 	and.w	r3, r3, #16
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 813c 	beq.w	800d68e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d416:	2300      	movs	r3, #0
 800d418:	60bb      	str	r3, [r7, #8]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	60bb      	str	r3, [r7, #8]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	60bb      	str	r3, [r7, #8]
 800d42a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	695b      	ldr	r3, [r3, #20]
 800d432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d436:	2b40      	cmp	r3, #64	; 0x40
 800d438:	f040 80b4 	bne.w	800d5a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 8140 	beq.w	800d6d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d45a:	429a      	cmp	r2, r3
 800d45c:	f080 8139 	bcs.w	800d6d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d466:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46c:	69db      	ldr	r3, [r3, #28]
 800d46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d472:	f000 8088 	beq.w	800d586 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	330c      	adds	r3, #12
 800d47c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d484:	e853 3f00 	ldrex	r3, [r3]
 800d488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d48c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	330c      	adds	r3, #12
 800d49e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d4a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d4a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d4ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d4b2:	e841 2300 	strex	r3, r2, [r1]
 800d4b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d4ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1d9      	bne.n	800d476 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3314      	adds	r3, #20
 800d4c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4cc:	e853 3f00 	ldrex	r3, [r3]
 800d4d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d4d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4d4:	f023 0301 	bic.w	r3, r3, #1
 800d4d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3314      	adds	r3, #20
 800d4e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d4e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d4ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d4ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d4f2:	e841 2300 	strex	r3, r2, [r1]
 800d4f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d4f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1e1      	bne.n	800d4c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	3314      	adds	r3, #20
 800d504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d508:	e853 3f00 	ldrex	r3, [r3]
 800d50c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d50e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3314      	adds	r3, #20
 800d51e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d522:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d524:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d526:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d52a:	e841 2300 	strex	r3, r2, [r1]
 800d52e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1e3      	bne.n	800d4fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2220      	movs	r2, #32
 800d53a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	330c      	adds	r3, #12
 800d54a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d54e:	e853 3f00 	ldrex	r3, [r3]
 800d552:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d556:	f023 0310 	bic.w	r3, r3, #16
 800d55a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	330c      	adds	r3, #12
 800d564:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d568:	65ba      	str	r2, [r7, #88]	; 0x58
 800d56a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d56c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d570:	e841 2300 	strex	r3, r2, [r1]
 800d574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1e3      	bne.n	800d544 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d580:	4618      	mov	r0, r3
 800d582:	f7f8 fc47 	bl	8005e14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d58e:	b29b      	uxth	r3, r3
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	b29b      	uxth	r3, r3
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f8c0 	bl	800d71c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d59c:	e099      	b.n	800d6d2 <HAL_UART_IRQHandler+0x50e>
 800d59e:	bf00      	nop
 800d5a0:	0800d7fb 	.word	0x0800d7fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f000 808b 	beq.w	800d6d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d5c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f000 8086 	beq.w	800d6d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	330c      	adds	r3, #12
 800d5d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d4:	e853 3f00 	ldrex	r3, [r3]
 800d5d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	330c      	adds	r3, #12
 800d5ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d5ee:	647a      	str	r2, [r7, #68]	; 0x44
 800d5f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5f6:	e841 2300 	strex	r3, r2, [r1]
 800d5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1e3      	bne.n	800d5ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3314      	adds	r3, #20
 800d608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	e853 3f00 	ldrex	r3, [r3]
 800d610:	623b      	str	r3, [r7, #32]
   return(result);
 800d612:	6a3b      	ldr	r3, [r7, #32]
 800d614:	f023 0301 	bic.w	r3, r3, #1
 800d618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3314      	adds	r3, #20
 800d622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d626:	633a      	str	r2, [r7, #48]	; 0x30
 800d628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d62e:	e841 2300 	strex	r3, r2, [r1]
 800d632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1e3      	bne.n	800d602 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2220      	movs	r2, #32
 800d63e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	330c      	adds	r3, #12
 800d64e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	e853 3f00 	ldrex	r3, [r3]
 800d656:	60fb      	str	r3, [r7, #12]
   return(result);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f023 0310 	bic.w	r3, r3, #16
 800d65e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	330c      	adds	r3, #12
 800d668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d66c:	61fa      	str	r2, [r7, #28]
 800d66e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	69b9      	ldr	r1, [r7, #24]
 800d672:	69fa      	ldr	r2, [r7, #28]
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	617b      	str	r3, [r7, #20]
   return(result);
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e3      	bne.n	800d648 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f848 	bl	800d71c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d68c:	e023      	b.n	800d6d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d696:	2b00      	cmp	r3, #0
 800d698:	d009      	beq.n	800d6ae <HAL_UART_IRQHandler+0x4ea>
 800d69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d003      	beq.n	800d6ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f8bb 	bl	800d822 <UART_Transmit_IT>
    return;
 800d6ac:	e014      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00e      	beq.n	800d6d8 <HAL_UART_IRQHandler+0x514>
 800d6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d008      	beq.n	800d6d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f8fb 	bl	800d8c2 <UART_EndTransmit_IT>
    return;
 800d6cc:	e004      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
    return;
 800d6ce:	bf00      	nop
 800d6d0:	e002      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
      return;
 800d6d2:	bf00      	nop
 800d6d4:	e000      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
      return;
 800d6d6:	bf00      	nop
  }
}
 800d6d8:	37e8      	adds	r7, #232	; 0xe8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop

0800d6e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d6e8:	bf00      	nop
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d710:	bf00      	nop
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d728:	bf00      	nop
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d734:	b480      	push	{r7}
 800d736:	b095      	sub	sp, #84	; 0x54
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	330c      	adds	r3, #12
 800d742:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d746:	e853 3f00 	ldrex	r3, [r3]
 800d74a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d752:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	330c      	adds	r3, #12
 800d75a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d75c:	643a      	str	r2, [r7, #64]	; 0x40
 800d75e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d760:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d764:	e841 2300 	strex	r3, r2, [r1]
 800d768:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1e5      	bne.n	800d73c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	3314      	adds	r3, #20
 800d776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	e853 3f00 	ldrex	r3, [r3]
 800d77e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	f023 0301 	bic.w	r3, r3, #1
 800d786:	64bb      	str	r3, [r7, #72]	; 0x48
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3314      	adds	r3, #20
 800d78e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d790:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d798:	e841 2300 	strex	r3, r2, [r1]
 800d79c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1e5      	bne.n	800d770 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d119      	bne.n	800d7e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	330c      	adds	r3, #12
 800d7b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	e853 3f00 	ldrex	r3, [r3]
 800d7ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f023 0310 	bic.w	r3, r3, #16
 800d7c2:	647b      	str	r3, [r7, #68]	; 0x44
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	330c      	adds	r3, #12
 800d7ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7cc:	61ba      	str	r2, [r7, #24]
 800d7ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d0:	6979      	ldr	r1, [r7, #20]
 800d7d2:	69ba      	ldr	r2, [r7, #24]
 800d7d4:	e841 2300 	strex	r3, r2, [r1]
 800d7d8:	613b      	str	r3, [r7, #16]
   return(result);
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d1e5      	bne.n	800d7ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2220      	movs	r2, #32
 800d7e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d7ee:	bf00      	nop
 800d7f0:	3754      	adds	r7, #84	; 0x54
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b084      	sub	sp, #16
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d806:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2200      	movs	r2, #0
 800d812:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f7ff ff77 	bl	800d708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d81a:	bf00      	nop
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d822:	b480      	push	{r7}
 800d824:	b085      	sub	sp, #20
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d830:	b2db      	uxtb	r3, r3
 800d832:	2b21      	cmp	r3, #33	; 0x21
 800d834:	d13e      	bne.n	800d8b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d83e:	d114      	bne.n	800d86a <UART_Transmit_IT+0x48>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d110      	bne.n	800d86a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a1b      	ldr	r3, [r3, #32]
 800d84c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	881b      	ldrh	r3, [r3, #0]
 800d852:	461a      	mov	r2, r3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d85c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	1c9a      	adds	r2, r3, #2
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	621a      	str	r2, [r3, #32]
 800d868:	e008      	b.n	800d87c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	1c59      	adds	r1, r3, #1
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	6211      	str	r1, [r2, #32]
 800d874:	781a      	ldrb	r2, [r3, #0]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d880:	b29b      	uxth	r3, r3
 800d882:	3b01      	subs	r3, #1
 800d884:	b29b      	uxth	r3, r3
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	4619      	mov	r1, r3
 800d88a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10f      	bne.n	800d8b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68da      	ldr	r2, [r3, #12]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d89e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68da      	ldr	r2, [r3, #12]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	e000      	b.n	800d8b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d8b4:	2302      	movs	r3, #2
  }
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68da      	ldr	r2, [r3, #12]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2220      	movs	r2, #32
 800d8de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff fefc 	bl	800d6e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b08c      	sub	sp, #48	; 0x30
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d900:	b2db      	uxtb	r3, r3
 800d902:	2b22      	cmp	r3, #34	; 0x22
 800d904:	f040 80ab 	bne.w	800da5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d910:	d117      	bne.n	800d942 <UART_Receive_IT+0x50>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d113      	bne.n	800d942 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d91a:	2300      	movs	r3, #0
 800d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d922:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d930:	b29a      	uxth	r2, r3
 800d932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d934:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d93a:	1c9a      	adds	r2, r3, #2
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	629a      	str	r2, [r3, #40]	; 0x28
 800d940:	e026      	b.n	800d990 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d946:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d948:	2300      	movs	r3, #0
 800d94a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d954:	d007      	beq.n	800d966 <UART_Receive_IT+0x74>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10a      	bne.n	800d974 <UART_Receive_IT+0x82>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d106      	bne.n	800d974 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d970:	701a      	strb	r2, [r3, #0]
 800d972:	e008      	b.n	800d986 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d980:	b2da      	uxtb	r2, r3
 800d982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d984:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d994:	b29b      	uxth	r3, r3
 800d996:	3b01      	subs	r3, #1
 800d998:	b29b      	uxth	r3, r3
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	4619      	mov	r1, r3
 800d99e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d15a      	bne.n	800da5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	68da      	ldr	r2, [r3, #12]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f022 0220 	bic.w	r2, r2, #32
 800d9b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d9c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	695a      	ldr	r2, [r3, #20]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f022 0201 	bic.w	r2, r2, #1
 800d9d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2220      	movs	r2, #32
 800d9d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d135      	bne.n	800da50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	330c      	adds	r3, #12
 800d9f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	e853 3f00 	ldrex	r3, [r3]
 800d9f8:	613b      	str	r3, [r7, #16]
   return(result);
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	f023 0310 	bic.w	r3, r3, #16
 800da00:	627b      	str	r3, [r7, #36]	; 0x24
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	330c      	adds	r3, #12
 800da08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da0a:	623a      	str	r2, [r7, #32]
 800da0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0e:	69f9      	ldr	r1, [r7, #28]
 800da10:	6a3a      	ldr	r2, [r7, #32]
 800da12:	e841 2300 	strex	r3, r2, [r1]
 800da16:	61bb      	str	r3, [r7, #24]
   return(result);
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d1e5      	bne.n	800d9ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f003 0310 	and.w	r3, r3, #16
 800da28:	2b10      	cmp	r3, #16
 800da2a:	d10a      	bne.n	800da42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	60fb      	str	r3, [r7, #12]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800da46:	4619      	mov	r1, r3
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff fe67 	bl	800d71c <HAL_UARTEx_RxEventCallback>
 800da4e:	e002      	b.n	800da56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff fe4f 	bl	800d6f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	e002      	b.n	800da60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	e000      	b.n	800da60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800da5e:	2302      	movs	r3, #2
  }
}
 800da60:	4618      	mov	r0, r3
 800da62:	3730      	adds	r7, #48	; 0x30
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da6c:	b0c0      	sub	sp, #256	; 0x100
 800da6e:	af00      	add	r7, sp, #0
 800da70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	691b      	ldr	r3, [r3, #16]
 800da7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800da80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da84:	68d9      	ldr	r1, [r3, #12]
 800da86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	ea40 0301 	orr.w	r3, r0, r1
 800da90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800da92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da96:	689a      	ldr	r2, [r3, #8]
 800da98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	431a      	orrs	r2, r3
 800daa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daa4:	695b      	ldr	r3, [r3, #20]
 800daa6:	431a      	orrs	r2, r3
 800daa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daac:	69db      	ldr	r3, [r3, #28]
 800daae:	4313      	orrs	r3, r2
 800dab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dac0:	f021 010c 	bic.w	r1, r1, #12
 800dac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dace:	430b      	orrs	r3, r1
 800dad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dae2:	6999      	ldr	r1, [r3, #24]
 800dae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	ea40 0301 	orr.w	r3, r0, r1
 800daee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800daf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	4b8f      	ldr	r3, [pc, #572]	; (800dd34 <UART_SetConfig+0x2cc>)
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d005      	beq.n	800db08 <UART_SetConfig+0xa0>
 800dafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	4b8d      	ldr	r3, [pc, #564]	; (800dd38 <UART_SetConfig+0x2d0>)
 800db04:	429a      	cmp	r2, r3
 800db06:	d104      	bne.n	800db12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800db08:	f7fd fd14 	bl	800b534 <HAL_RCC_GetPCLK2Freq>
 800db0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800db10:	e003      	b.n	800db1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800db12:	f7fd fcfb 	bl	800b50c <HAL_RCC_GetPCLK1Freq>
 800db16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db1e:	69db      	ldr	r3, [r3, #28]
 800db20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db24:	f040 810c 	bne.w	800dd40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800db28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db2c:	2200      	movs	r2, #0
 800db2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800db32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800db36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800db3a:	4622      	mov	r2, r4
 800db3c:	462b      	mov	r3, r5
 800db3e:	1891      	adds	r1, r2, r2
 800db40:	65b9      	str	r1, [r7, #88]	; 0x58
 800db42:	415b      	adcs	r3, r3
 800db44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800db4a:	4621      	mov	r1, r4
 800db4c:	eb12 0801 	adds.w	r8, r2, r1
 800db50:	4629      	mov	r1, r5
 800db52:	eb43 0901 	adc.w	r9, r3, r1
 800db56:	f04f 0200 	mov.w	r2, #0
 800db5a:	f04f 0300 	mov.w	r3, #0
 800db5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800db62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800db66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800db6a:	4690      	mov	r8, r2
 800db6c:	4699      	mov	r9, r3
 800db6e:	4623      	mov	r3, r4
 800db70:	eb18 0303 	adds.w	r3, r8, r3
 800db74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800db78:	462b      	mov	r3, r5
 800db7a:	eb49 0303 	adc.w	r3, r9, r3
 800db7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800db82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800db8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800db92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800db96:	460b      	mov	r3, r1
 800db98:	18db      	adds	r3, r3, r3
 800db9a:	653b      	str	r3, [r7, #80]	; 0x50
 800db9c:	4613      	mov	r3, r2
 800db9e:	eb42 0303 	adc.w	r3, r2, r3
 800dba2:	657b      	str	r3, [r7, #84]	; 0x54
 800dba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800dbac:	f7f3 f8a4 	bl	8000cf8 <__aeabi_uldivmod>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4b61      	ldr	r3, [pc, #388]	; (800dd3c <UART_SetConfig+0x2d4>)
 800dbb6:	fba3 2302 	umull	r2, r3, r3, r2
 800dbba:	095b      	lsrs	r3, r3, #5
 800dbbc:	011c      	lsls	r4, r3, #4
 800dbbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dbc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800dbcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800dbd0:	4642      	mov	r2, r8
 800dbd2:	464b      	mov	r3, r9
 800dbd4:	1891      	adds	r1, r2, r2
 800dbd6:	64b9      	str	r1, [r7, #72]	; 0x48
 800dbd8:	415b      	adcs	r3, r3
 800dbda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dbe0:	4641      	mov	r1, r8
 800dbe2:	eb12 0a01 	adds.w	sl, r2, r1
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	eb43 0b01 	adc.w	fp, r3, r1
 800dbec:	f04f 0200 	mov.w	r2, #0
 800dbf0:	f04f 0300 	mov.w	r3, #0
 800dbf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dbf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dbfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc00:	4692      	mov	sl, r2
 800dc02:	469b      	mov	fp, r3
 800dc04:	4643      	mov	r3, r8
 800dc06:	eb1a 0303 	adds.w	r3, sl, r3
 800dc0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc0e:	464b      	mov	r3, r9
 800dc10:	eb4b 0303 	adc.w	r3, fp, r3
 800dc14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dc18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dc24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dc28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	18db      	adds	r3, r3, r3
 800dc30:	643b      	str	r3, [r7, #64]	; 0x40
 800dc32:	4613      	mov	r3, r2
 800dc34:	eb42 0303 	adc.w	r3, r2, r3
 800dc38:	647b      	str	r3, [r7, #68]	; 0x44
 800dc3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dc3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800dc42:	f7f3 f859 	bl	8000cf8 <__aeabi_uldivmod>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	4611      	mov	r1, r2
 800dc4c:	4b3b      	ldr	r3, [pc, #236]	; (800dd3c <UART_SetConfig+0x2d4>)
 800dc4e:	fba3 2301 	umull	r2, r3, r3, r1
 800dc52:	095b      	lsrs	r3, r3, #5
 800dc54:	2264      	movs	r2, #100	; 0x64
 800dc56:	fb02 f303 	mul.w	r3, r2, r3
 800dc5a:	1acb      	subs	r3, r1, r3
 800dc5c:	00db      	lsls	r3, r3, #3
 800dc5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800dc62:	4b36      	ldr	r3, [pc, #216]	; (800dd3c <UART_SetConfig+0x2d4>)
 800dc64:	fba3 2302 	umull	r2, r3, r3, r2
 800dc68:	095b      	lsrs	r3, r3, #5
 800dc6a:	005b      	lsls	r3, r3, #1
 800dc6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dc70:	441c      	add	r4, r3
 800dc72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc76:	2200      	movs	r2, #0
 800dc78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dc80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800dc84:	4642      	mov	r2, r8
 800dc86:	464b      	mov	r3, r9
 800dc88:	1891      	adds	r1, r2, r2
 800dc8a:	63b9      	str	r1, [r7, #56]	; 0x38
 800dc8c:	415b      	adcs	r3, r3
 800dc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dc94:	4641      	mov	r1, r8
 800dc96:	1851      	adds	r1, r2, r1
 800dc98:	6339      	str	r1, [r7, #48]	; 0x30
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	414b      	adcs	r3, r1
 800dc9e:	637b      	str	r3, [r7, #52]	; 0x34
 800dca0:	f04f 0200 	mov.w	r2, #0
 800dca4:	f04f 0300 	mov.w	r3, #0
 800dca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800dcac:	4659      	mov	r1, fp
 800dcae:	00cb      	lsls	r3, r1, #3
 800dcb0:	4651      	mov	r1, sl
 800dcb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dcb6:	4651      	mov	r1, sl
 800dcb8:	00ca      	lsls	r2, r1, #3
 800dcba:	4610      	mov	r0, r2
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	4642      	mov	r2, r8
 800dcc2:	189b      	adds	r3, r3, r2
 800dcc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dcc8:	464b      	mov	r3, r9
 800dcca:	460a      	mov	r2, r1
 800dccc:	eb42 0303 	adc.w	r3, r2, r3
 800dcd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dcd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dce0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dce8:	460b      	mov	r3, r1
 800dcea:	18db      	adds	r3, r3, r3
 800dcec:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcee:	4613      	mov	r3, r2
 800dcf0:	eb42 0303 	adc.w	r3, r2, r3
 800dcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dcfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800dcfe:	f7f2 fffb 	bl	8000cf8 <__aeabi_uldivmod>
 800dd02:	4602      	mov	r2, r0
 800dd04:	460b      	mov	r3, r1
 800dd06:	4b0d      	ldr	r3, [pc, #52]	; (800dd3c <UART_SetConfig+0x2d4>)
 800dd08:	fba3 1302 	umull	r1, r3, r3, r2
 800dd0c:	095b      	lsrs	r3, r3, #5
 800dd0e:	2164      	movs	r1, #100	; 0x64
 800dd10:	fb01 f303 	mul.w	r3, r1, r3
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	00db      	lsls	r3, r3, #3
 800dd18:	3332      	adds	r3, #50	; 0x32
 800dd1a:	4a08      	ldr	r2, [pc, #32]	; (800dd3c <UART_SetConfig+0x2d4>)
 800dd1c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd20:	095b      	lsrs	r3, r3, #5
 800dd22:	f003 0207 	and.w	r2, r3, #7
 800dd26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4422      	add	r2, r4
 800dd2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dd30:	e106      	b.n	800df40 <UART_SetConfig+0x4d8>
 800dd32:	bf00      	nop
 800dd34:	40011000 	.word	0x40011000
 800dd38:	40011400 	.word	0x40011400
 800dd3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dd40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd44:	2200      	movs	r2, #0
 800dd46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dd4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dd4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dd52:	4642      	mov	r2, r8
 800dd54:	464b      	mov	r3, r9
 800dd56:	1891      	adds	r1, r2, r2
 800dd58:	6239      	str	r1, [r7, #32]
 800dd5a:	415b      	adcs	r3, r3
 800dd5c:	627b      	str	r3, [r7, #36]	; 0x24
 800dd5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dd62:	4641      	mov	r1, r8
 800dd64:	1854      	adds	r4, r2, r1
 800dd66:	4649      	mov	r1, r9
 800dd68:	eb43 0501 	adc.w	r5, r3, r1
 800dd6c:	f04f 0200 	mov.w	r2, #0
 800dd70:	f04f 0300 	mov.w	r3, #0
 800dd74:	00eb      	lsls	r3, r5, #3
 800dd76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dd7a:	00e2      	lsls	r2, r4, #3
 800dd7c:	4614      	mov	r4, r2
 800dd7e:	461d      	mov	r5, r3
 800dd80:	4643      	mov	r3, r8
 800dd82:	18e3      	adds	r3, r4, r3
 800dd84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dd88:	464b      	mov	r3, r9
 800dd8a:	eb45 0303 	adc.w	r3, r5, r3
 800dd8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dd92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dd9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dda2:	f04f 0200 	mov.w	r2, #0
 800dda6:	f04f 0300 	mov.w	r3, #0
 800ddaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ddae:	4629      	mov	r1, r5
 800ddb0:	008b      	lsls	r3, r1, #2
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ddb8:	4621      	mov	r1, r4
 800ddba:	008a      	lsls	r2, r1, #2
 800ddbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ddc0:	f7f2 ff9a 	bl	8000cf8 <__aeabi_uldivmod>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	4b60      	ldr	r3, [pc, #384]	; (800df4c <UART_SetConfig+0x4e4>)
 800ddca:	fba3 2302 	umull	r2, r3, r3, r2
 800ddce:	095b      	lsrs	r3, r3, #5
 800ddd0:	011c      	lsls	r4, r3, #4
 800ddd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dde0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800dde4:	4642      	mov	r2, r8
 800dde6:	464b      	mov	r3, r9
 800dde8:	1891      	adds	r1, r2, r2
 800ddea:	61b9      	str	r1, [r7, #24]
 800ddec:	415b      	adcs	r3, r3
 800ddee:	61fb      	str	r3, [r7, #28]
 800ddf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ddf4:	4641      	mov	r1, r8
 800ddf6:	1851      	adds	r1, r2, r1
 800ddf8:	6139      	str	r1, [r7, #16]
 800ddfa:	4649      	mov	r1, r9
 800ddfc:	414b      	adcs	r3, r1
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	f04f 0200 	mov.w	r2, #0
 800de04:	f04f 0300 	mov.w	r3, #0
 800de08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800de0c:	4659      	mov	r1, fp
 800de0e:	00cb      	lsls	r3, r1, #3
 800de10:	4651      	mov	r1, sl
 800de12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800de16:	4651      	mov	r1, sl
 800de18:	00ca      	lsls	r2, r1, #3
 800de1a:	4610      	mov	r0, r2
 800de1c:	4619      	mov	r1, r3
 800de1e:	4603      	mov	r3, r0
 800de20:	4642      	mov	r2, r8
 800de22:	189b      	adds	r3, r3, r2
 800de24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de28:	464b      	mov	r3, r9
 800de2a:	460a      	mov	r2, r1
 800de2c:	eb42 0303 	adc.w	r3, r2, r3
 800de30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	67bb      	str	r3, [r7, #120]	; 0x78
 800de3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800de40:	f04f 0200 	mov.w	r2, #0
 800de44:	f04f 0300 	mov.w	r3, #0
 800de48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800de4c:	4649      	mov	r1, r9
 800de4e:	008b      	lsls	r3, r1, #2
 800de50:	4641      	mov	r1, r8
 800de52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800de56:	4641      	mov	r1, r8
 800de58:	008a      	lsls	r2, r1, #2
 800de5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800de5e:	f7f2 ff4b 	bl	8000cf8 <__aeabi_uldivmod>
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	4611      	mov	r1, r2
 800de68:	4b38      	ldr	r3, [pc, #224]	; (800df4c <UART_SetConfig+0x4e4>)
 800de6a:	fba3 2301 	umull	r2, r3, r3, r1
 800de6e:	095b      	lsrs	r3, r3, #5
 800de70:	2264      	movs	r2, #100	; 0x64
 800de72:	fb02 f303 	mul.w	r3, r2, r3
 800de76:	1acb      	subs	r3, r1, r3
 800de78:	011b      	lsls	r3, r3, #4
 800de7a:	3332      	adds	r3, #50	; 0x32
 800de7c:	4a33      	ldr	r2, [pc, #204]	; (800df4c <UART_SetConfig+0x4e4>)
 800de7e:	fba2 2303 	umull	r2, r3, r2, r3
 800de82:	095b      	lsrs	r3, r3, #5
 800de84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de88:	441c      	add	r4, r3
 800de8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de8e:	2200      	movs	r2, #0
 800de90:	673b      	str	r3, [r7, #112]	; 0x70
 800de92:	677a      	str	r2, [r7, #116]	; 0x74
 800de94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800de98:	4642      	mov	r2, r8
 800de9a:	464b      	mov	r3, r9
 800de9c:	1891      	adds	r1, r2, r2
 800de9e:	60b9      	str	r1, [r7, #8]
 800dea0:	415b      	adcs	r3, r3
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dea8:	4641      	mov	r1, r8
 800deaa:	1851      	adds	r1, r2, r1
 800deac:	6039      	str	r1, [r7, #0]
 800deae:	4649      	mov	r1, r9
 800deb0:	414b      	adcs	r3, r1
 800deb2:	607b      	str	r3, [r7, #4]
 800deb4:	f04f 0200 	mov.w	r2, #0
 800deb8:	f04f 0300 	mov.w	r3, #0
 800debc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dec0:	4659      	mov	r1, fp
 800dec2:	00cb      	lsls	r3, r1, #3
 800dec4:	4651      	mov	r1, sl
 800dec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800deca:	4651      	mov	r1, sl
 800decc:	00ca      	lsls	r2, r1, #3
 800dece:	4610      	mov	r0, r2
 800ded0:	4619      	mov	r1, r3
 800ded2:	4603      	mov	r3, r0
 800ded4:	4642      	mov	r2, r8
 800ded6:	189b      	adds	r3, r3, r2
 800ded8:	66bb      	str	r3, [r7, #104]	; 0x68
 800deda:	464b      	mov	r3, r9
 800dedc:	460a      	mov	r2, r1
 800dede:	eb42 0303 	adc.w	r3, r2, r3
 800dee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	663b      	str	r3, [r7, #96]	; 0x60
 800deee:	667a      	str	r2, [r7, #100]	; 0x64
 800def0:	f04f 0200 	mov.w	r2, #0
 800def4:	f04f 0300 	mov.w	r3, #0
 800def8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800defc:	4649      	mov	r1, r9
 800defe:	008b      	lsls	r3, r1, #2
 800df00:	4641      	mov	r1, r8
 800df02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800df06:	4641      	mov	r1, r8
 800df08:	008a      	lsls	r2, r1, #2
 800df0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800df0e:	f7f2 fef3 	bl	8000cf8 <__aeabi_uldivmod>
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	4b0d      	ldr	r3, [pc, #52]	; (800df4c <UART_SetConfig+0x4e4>)
 800df18:	fba3 1302 	umull	r1, r3, r3, r2
 800df1c:	095b      	lsrs	r3, r3, #5
 800df1e:	2164      	movs	r1, #100	; 0x64
 800df20:	fb01 f303 	mul.w	r3, r1, r3
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	011b      	lsls	r3, r3, #4
 800df28:	3332      	adds	r3, #50	; 0x32
 800df2a:	4a08      	ldr	r2, [pc, #32]	; (800df4c <UART_SetConfig+0x4e4>)
 800df2c:	fba2 2303 	umull	r2, r3, r2, r3
 800df30:	095b      	lsrs	r3, r3, #5
 800df32:	f003 020f 	and.w	r2, r3, #15
 800df36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4422      	add	r2, r4
 800df3e:	609a      	str	r2, [r3, #8]
}
 800df40:	bf00      	nop
 800df42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800df46:	46bd      	mov	sp, r7
 800df48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df4c:	51eb851f 	.word	0x51eb851f

0800df50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800df50:	b084      	sub	sp, #16
 800df52:	b580      	push	{r7, lr}
 800df54:	b084      	sub	sp, #16
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	f107 001c 	add.w	r0, r7, #28
 800df5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	2b01      	cmp	r3, #1
 800df66:	d122      	bne.n	800dfae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800df7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800df90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df92:	2b01      	cmp	r3, #1
 800df94:	d105      	bne.n	800dfa2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f001 fbee 	bl	800f784 <USB_CoreReset>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	73fb      	strb	r3, [r7, #15]
 800dfac:	e01a      	b.n	800dfe4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f001 fbe2 	bl	800f784 <USB_CoreReset>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dfc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	639a      	str	r2, [r3, #56]	; 0x38
 800dfd6:	e005      	b.n	800dfe4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d10b      	bne.n	800e002 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	f043 0206 	orr.w	r2, r3, #6
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	f043 0220 	orr.w	r2, r3, #32
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e002:	7bfb      	ldrb	r3, [r7, #15]
}
 800e004:	4618      	mov	r0, r3
 800e006:	3710      	adds	r7, #16
 800e008:	46bd      	mov	sp, r7
 800e00a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e00e:	b004      	add	sp, #16
 800e010:	4770      	bx	lr
	...

0800e014 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	4613      	mov	r3, r2
 800e020:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	2b02      	cmp	r3, #2
 800e026:	d165      	bne.n	800e0f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	4a41      	ldr	r2, [pc, #260]	; (800e130 <USB_SetTurnaroundTime+0x11c>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d906      	bls.n	800e03e <USB_SetTurnaroundTime+0x2a>
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	4a40      	ldr	r2, [pc, #256]	; (800e134 <USB_SetTurnaroundTime+0x120>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d202      	bcs.n	800e03e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e038:	230f      	movs	r3, #15
 800e03a:	617b      	str	r3, [r7, #20]
 800e03c:	e062      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	4a3c      	ldr	r2, [pc, #240]	; (800e134 <USB_SetTurnaroundTime+0x120>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d306      	bcc.n	800e054 <USB_SetTurnaroundTime+0x40>
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	4a3b      	ldr	r2, [pc, #236]	; (800e138 <USB_SetTurnaroundTime+0x124>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d202      	bcs.n	800e054 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e04e:	230e      	movs	r3, #14
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	e057      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	4a38      	ldr	r2, [pc, #224]	; (800e138 <USB_SetTurnaroundTime+0x124>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d306      	bcc.n	800e06a <USB_SetTurnaroundTime+0x56>
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	4a37      	ldr	r2, [pc, #220]	; (800e13c <USB_SetTurnaroundTime+0x128>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d202      	bcs.n	800e06a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e064:	230d      	movs	r3, #13
 800e066:	617b      	str	r3, [r7, #20]
 800e068:	e04c      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	4a33      	ldr	r2, [pc, #204]	; (800e13c <USB_SetTurnaroundTime+0x128>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d306      	bcc.n	800e080 <USB_SetTurnaroundTime+0x6c>
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	4a32      	ldr	r2, [pc, #200]	; (800e140 <USB_SetTurnaroundTime+0x12c>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d802      	bhi.n	800e080 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e07a:	230c      	movs	r3, #12
 800e07c:	617b      	str	r3, [r7, #20]
 800e07e:	e041      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	4a2f      	ldr	r2, [pc, #188]	; (800e140 <USB_SetTurnaroundTime+0x12c>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d906      	bls.n	800e096 <USB_SetTurnaroundTime+0x82>
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	4a2e      	ldr	r2, [pc, #184]	; (800e144 <USB_SetTurnaroundTime+0x130>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d802      	bhi.n	800e096 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e090:	230b      	movs	r3, #11
 800e092:	617b      	str	r3, [r7, #20]
 800e094:	e036      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	4a2a      	ldr	r2, [pc, #168]	; (800e144 <USB_SetTurnaroundTime+0x130>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d906      	bls.n	800e0ac <USB_SetTurnaroundTime+0x98>
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	4a29      	ldr	r2, [pc, #164]	; (800e148 <USB_SetTurnaroundTime+0x134>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d802      	bhi.n	800e0ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e0a6:	230a      	movs	r3, #10
 800e0a8:	617b      	str	r3, [r7, #20]
 800e0aa:	e02b      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	4a26      	ldr	r2, [pc, #152]	; (800e148 <USB_SetTurnaroundTime+0x134>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d906      	bls.n	800e0c2 <USB_SetTurnaroundTime+0xae>
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	4a25      	ldr	r2, [pc, #148]	; (800e14c <USB_SetTurnaroundTime+0x138>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d202      	bcs.n	800e0c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e0bc:	2309      	movs	r3, #9
 800e0be:	617b      	str	r3, [r7, #20]
 800e0c0:	e020      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	4a21      	ldr	r2, [pc, #132]	; (800e14c <USB_SetTurnaroundTime+0x138>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d306      	bcc.n	800e0d8 <USB_SetTurnaroundTime+0xc4>
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	4a20      	ldr	r2, [pc, #128]	; (800e150 <USB_SetTurnaroundTime+0x13c>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d802      	bhi.n	800e0d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e0d2:	2308      	movs	r3, #8
 800e0d4:	617b      	str	r3, [r7, #20]
 800e0d6:	e015      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	4a1d      	ldr	r2, [pc, #116]	; (800e150 <USB_SetTurnaroundTime+0x13c>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d906      	bls.n	800e0ee <USB_SetTurnaroundTime+0xda>
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	4a1c      	ldr	r2, [pc, #112]	; (800e154 <USB_SetTurnaroundTime+0x140>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d202      	bcs.n	800e0ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e0e8:	2307      	movs	r3, #7
 800e0ea:	617b      	str	r3, [r7, #20]
 800e0ec:	e00a      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e0ee:	2306      	movs	r3, #6
 800e0f0:	617b      	str	r3, [r7, #20]
 800e0f2:	e007      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d102      	bne.n	800e100 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e0fa:	2309      	movs	r3, #9
 800e0fc:	617b      	str	r3, [r7, #20]
 800e0fe:	e001      	b.n	800e104 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e100:	2309      	movs	r3, #9
 800e102:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	68da      	ldr	r2, [r3, #12]
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	029b      	lsls	r3, r3, #10
 800e118:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e11c:	431a      	orrs	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	371c      	adds	r7, #28
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	00d8acbf 	.word	0x00d8acbf
 800e134:	00e4e1c0 	.word	0x00e4e1c0
 800e138:	00f42400 	.word	0x00f42400
 800e13c:	01067380 	.word	0x01067380
 800e140:	011a499f 	.word	0x011a499f
 800e144:	01312cff 	.word	0x01312cff
 800e148:	014ca43f 	.word	0x014ca43f
 800e14c:	016e3600 	.word	0x016e3600
 800e150:	01a6ab1f 	.word	0x01a6ab1f
 800e154:	01e84800 	.word	0x01e84800

0800e158 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f043 0201 	orr.w	r2, r3, #1
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e17a:	b480      	push	{r7}
 800e17c:	b083      	sub	sp, #12
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	f023 0201 	bic.w	r2, r3, #1
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e1b8:	78fb      	ldrb	r3, [r7, #3]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d115      	bne.n	800e1ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e1ca:	2001      	movs	r0, #1
 800e1cc:	f7f7 f824 	bl	8005218 <HAL_Delay>
      ms++;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f001 fa45 	bl	800f666 <USB_GetMode>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d01e      	beq.n	800e220 <USB_SetCurrentMode+0x84>
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2b31      	cmp	r3, #49	; 0x31
 800e1e6:	d9f0      	bls.n	800e1ca <USB_SetCurrentMode+0x2e>
 800e1e8:	e01a      	b.n	800e220 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e1ea:	78fb      	ldrb	r3, [r7, #3]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d115      	bne.n	800e21c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e1fc:	2001      	movs	r0, #1
 800e1fe:	f7f7 f80b 	bl	8005218 <HAL_Delay>
      ms++;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	3301      	adds	r3, #1
 800e206:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f001 fa2c 	bl	800f666 <USB_GetMode>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d005      	beq.n	800e220 <USB_SetCurrentMode+0x84>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2b31      	cmp	r3, #49	; 0x31
 800e218:	d9f0      	bls.n	800e1fc <USB_SetCurrentMode+0x60>
 800e21a:	e001      	b.n	800e220 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e21c:	2301      	movs	r3, #1
 800e21e:	e005      	b.n	800e22c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2b32      	cmp	r3, #50	; 0x32
 800e224:	d101      	bne.n	800e22a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	e000      	b.n	800e22c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e234:	b084      	sub	sp, #16
 800e236:	b580      	push	{r7, lr}
 800e238:	b086      	sub	sp, #24
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e246:	2300      	movs	r3, #0
 800e248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e24e:	2300      	movs	r3, #0
 800e250:	613b      	str	r3, [r7, #16]
 800e252:	e009      	b.n	800e268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	3340      	adds	r3, #64	; 0x40
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4413      	add	r3, r2
 800e25e:	2200      	movs	r2, #0
 800e260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	3301      	adds	r3, #1
 800e266:	613b      	str	r3, [r7, #16]
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	2b0e      	cmp	r3, #14
 800e26c:	d9f2      	bls.n	800e254 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e270:	2b00      	cmp	r3, #0
 800e272:	d11c      	bne.n	800e2ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e282:	f043 0302 	orr.w	r3, r3, #2
 800e286:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e298:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	639a      	str	r2, [r3, #56]	; 0x38
 800e2ac:	e00b      	b.n	800e2c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2d8:	4619      	mov	r1, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	680b      	ldr	r3, [r1, #0]
 800e2e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d10c      	bne.n	800e306 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d104      	bne.n	800e2fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 f965 	bl	800e5c4 <USB_SetDevSpeed>
 800e2fa:	e008      	b.n	800e30e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 f960 	bl	800e5c4 <USB_SetDevSpeed>
 800e304:	e003      	b.n	800e30e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e306:	2103      	movs	r1, #3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f95b 	bl	800e5c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e30e:	2110      	movs	r1, #16
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 f8f3 	bl	800e4fc <USB_FlushTxFifo>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800e31c:	2301      	movs	r3, #1
 800e31e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 f91f 	bl	800e564 <USB_FlushRxFifo>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d001      	beq.n	800e330 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e336:	461a      	mov	r2, r3
 800e338:	2300      	movs	r3, #0
 800e33a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e342:	461a      	mov	r2, r3
 800e344:	2300      	movs	r3, #0
 800e346:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e34e:	461a      	mov	r2, r3
 800e350:	2300      	movs	r3, #0
 800e352:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e354:	2300      	movs	r3, #0
 800e356:	613b      	str	r3, [r7, #16]
 800e358:	e043      	b.n	800e3e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	015a      	lsls	r2, r3, #5
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	4413      	add	r3, r2
 800e362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e36c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e370:	d118      	bne.n	800e3a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10a      	bne.n	800e38e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e384:	461a      	mov	r2, r3
 800e386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e38a:	6013      	str	r3, [r2, #0]
 800e38c:	e013      	b.n	800e3b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	015a      	lsls	r2, r3, #5
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	4413      	add	r3, r2
 800e396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e39a:	461a      	mov	r2, r3
 800e39c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e3a0:	6013      	str	r3, [r2, #0]
 800e3a2:	e008      	b.n	800e3b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	015a      	lsls	r2, r3, #5
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	015a      	lsls	r2, r3, #5
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	015a      	lsls	r2, r3, #5
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e3da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	613b      	str	r3, [r7, #16]
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	693a      	ldr	r2, [r7, #16]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d3b7      	bcc.n	800e35a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	613b      	str	r3, [r7, #16]
 800e3ee:	e043      	b.n	800e478 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	015a      	lsls	r2, r3, #5
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e406:	d118      	bne.n	800e43a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10a      	bne.n	800e424 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	4413      	add	r3, r2
 800e416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e41a:	461a      	mov	r2, r3
 800e41c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e420:	6013      	str	r3, [r2, #0]
 800e422:	e013      	b.n	800e44c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	015a      	lsls	r2, r3, #5
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	4413      	add	r3, r2
 800e42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e430:	461a      	mov	r2, r3
 800e432:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e436:	6013      	str	r3, [r2, #0]
 800e438:	e008      	b.n	800e44c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	015a      	lsls	r2, r3, #5
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	4413      	add	r3, r2
 800e442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e446:	461a      	mov	r2, r3
 800e448:	2300      	movs	r3, #0
 800e44a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	015a      	lsls	r2, r3, #5
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	4413      	add	r3, r2
 800e454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e458:	461a      	mov	r2, r3
 800e45a:	2300      	movs	r3, #0
 800e45c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	015a      	lsls	r2, r3, #5
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	4413      	add	r3, r2
 800e466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e46a:	461a      	mov	r2, r3
 800e46c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e470:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	3301      	adds	r3, #1
 800e476:	613b      	str	r3, [r7, #16]
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	693a      	ldr	r2, [r7, #16]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d3b7      	bcc.n	800e3f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e486:	691b      	ldr	r3, [r3, #16]
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e48e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e492:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e4a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d105      	bne.n	800e4b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	f043 0210 	orr.w	r2, r3, #16
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	699a      	ldr	r2, [r3, #24]
 800e4b8:	4b0f      	ldr	r3, [pc, #60]	; (800e4f8 <USB_DevInit+0x2c4>)
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d005      	beq.n	800e4d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	699b      	ldr	r3, [r3, #24]
 800e4ca:	f043 0208 	orr.w	r2, r3, #8
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d107      	bne.n	800e4e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	699b      	ldr	r3, [r3, #24]
 800e4dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4e0:	f043 0304 	orr.w	r3, r3, #4
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3718      	adds	r7, #24
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e4f4:	b004      	add	sp, #16
 800e4f6:	4770      	bx	lr
 800e4f8:	803c3800 	.word	0x803c3800

0800e4fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3301      	adds	r3, #1
 800e50e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4a13      	ldr	r2, [pc, #76]	; (800e560 <USB_FlushTxFifo+0x64>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d901      	bls.n	800e51c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e518:	2303      	movs	r3, #3
 800e51a:	e01b      	b.n	800e554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	2b00      	cmp	r3, #0
 800e522:	daf2      	bge.n	800e50a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	019b      	lsls	r3, r3, #6
 800e52c:	f043 0220 	orr.w	r2, r3, #32
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3301      	adds	r3, #1
 800e538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	4a08      	ldr	r2, [pc, #32]	; (800e560 <USB_FlushTxFifo+0x64>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d901      	bls.n	800e546 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e542:	2303      	movs	r3, #3
 800e544:	e006      	b.n	800e554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	f003 0320 	and.w	r3, r3, #32
 800e54e:	2b20      	cmp	r3, #32
 800e550:	d0f0      	beq.n	800e534 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	00030d40 	.word	0x00030d40

0800e564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e56c:	2300      	movs	r3, #0
 800e56e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	3301      	adds	r3, #1
 800e574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	4a11      	ldr	r2, [pc, #68]	; (800e5c0 <USB_FlushRxFifo+0x5c>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d901      	bls.n	800e582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e57e:	2303      	movs	r3, #3
 800e580:	e018      	b.n	800e5b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	2b00      	cmp	r3, #0
 800e588:	daf2      	bge.n	800e570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e58a:	2300      	movs	r3, #0
 800e58c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2210      	movs	r2, #16
 800e592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	3301      	adds	r3, #1
 800e598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	4a08      	ldr	r2, [pc, #32]	; (800e5c0 <USB_FlushRxFifo+0x5c>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d901      	bls.n	800e5a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e5a2:	2303      	movs	r3, #3
 800e5a4:	e006      	b.n	800e5b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	f003 0310 	and.w	r3, r3, #16
 800e5ae:	2b10      	cmp	r3, #16
 800e5b0:	d0f0      	beq.n	800e594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr
 800e5c0:	00030d40 	.word	0x00030d40

0800e5c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	78fb      	ldrb	r3, [r7, #3]
 800e5de:	68f9      	ldr	r1, [r7, #12]
 800e5e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3714      	adds	r7, #20
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e5f6:	b480      	push	{r7}
 800e5f8:	b087      	sub	sp, #28
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f003 0306 	and.w	r3, r3, #6
 800e60e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d102      	bne.n	800e61c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e616:	2300      	movs	r3, #0
 800e618:	75fb      	strb	r3, [r7, #23]
 800e61a:	e00a      	b.n	800e632 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2b02      	cmp	r3, #2
 800e620:	d002      	beq.n	800e628 <USB_GetDevSpeed+0x32>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2b06      	cmp	r3, #6
 800e626:	d102      	bne.n	800e62e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e628:	2302      	movs	r3, #2
 800e62a:	75fb      	strb	r3, [r7, #23]
 800e62c:	e001      	b.n	800e632 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e62e:	230f      	movs	r3, #15
 800e630:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e632:	7dfb      	ldrb	r3, [r7, #23]
}
 800e634:	4618      	mov	r0, r3
 800e636:	371c      	adds	r7, #28
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	785b      	ldrb	r3, [r3, #1]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d13a      	bne.n	800e6d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e662:	69da      	ldr	r2, [r3, #28]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	f003 030f 	and.w	r3, r3, #15
 800e66c:	2101      	movs	r1, #1
 800e66e:	fa01 f303 	lsl.w	r3, r1, r3
 800e672:	b29b      	uxth	r3, r3
 800e674:	68f9      	ldr	r1, [r7, #12]
 800e676:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e67a:	4313      	orrs	r3, r2
 800e67c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	015a      	lsls	r2, r3, #5
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	4413      	add	r3, r2
 800e686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e690:	2b00      	cmp	r3, #0
 800e692:	d155      	bne.n	800e740 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	015a      	lsls	r2, r3, #5
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	4413      	add	r3, r2
 800e69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	791b      	ldrb	r3, [r3, #4]
 800e6ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e6b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	059b      	lsls	r3, r3, #22
 800e6b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	0151      	lsls	r1, r2, #5
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	440a      	add	r2, r1
 800e6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6ce:	6013      	str	r3, [r2, #0]
 800e6d0:	e036      	b.n	800e740 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d8:	69da      	ldr	r2, [r3, #28]
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	f003 030f 	and.w	r3, r3, #15
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e8:	041b      	lsls	r3, r3, #16
 800e6ea:	68f9      	ldr	r1, [r7, #12]
 800e6ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	015a      	lsls	r2, r3, #5
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e706:	2b00      	cmp	r3, #0
 800e708:	d11a      	bne.n	800e740 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	015a      	lsls	r2, r3, #5
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	4413      	add	r3, r2
 800e712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	791b      	ldrb	r3, [r3, #4]
 800e724:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e726:	430b      	orrs	r3, r1
 800e728:	4313      	orrs	r3, r2
 800e72a:	68ba      	ldr	r2, [r7, #8]
 800e72c:	0151      	lsls	r1, r2, #5
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	440a      	add	r2, r1
 800e732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e73a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e73e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
	...

0800e750 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	785b      	ldrb	r3, [r3, #1]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d161      	bne.n	800e830 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	015a      	lsls	r2, r3, #5
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	4413      	add	r3, r2
 800e774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e77e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e782:	d11f      	bne.n	800e7c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	015a      	lsls	r2, r3, #5
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	4413      	add	r3, r2
 800e78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	0151      	lsls	r1, r2, #5
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	440a      	add	r2, r1
 800e79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e79e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e7a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	015a      	lsls	r2, r3, #5
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	0151      	lsls	r1, r2, #5
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	440a      	add	r2, r1
 800e7ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e7c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	f003 030f 	and.w	r3, r3, #15
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	43db      	mvns	r3, r3
 800e7de:	68f9      	ldr	r1, [r7, #12]
 800e7e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7e4:	4013      	ands	r3, r2
 800e7e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ee:	69da      	ldr	r2, [r3, #28]
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	f003 030f 	and.w	r3, r3, #15
 800e7f8:	2101      	movs	r1, #1
 800e7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	43db      	mvns	r3, r3
 800e802:	68f9      	ldr	r1, [r7, #12]
 800e804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e808:	4013      	ands	r3, r2
 800e80a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	015a      	lsls	r2, r3, #5
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	4413      	add	r3, r2
 800e814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	0159      	lsls	r1, r3, #5
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	440b      	add	r3, r1
 800e822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e826:	4619      	mov	r1, r3
 800e828:	4b35      	ldr	r3, [pc, #212]	; (800e900 <USB_DeactivateEndpoint+0x1b0>)
 800e82a:	4013      	ands	r3, r2
 800e82c:	600b      	str	r3, [r1, #0]
 800e82e:	e060      	b.n	800e8f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	015a      	lsls	r2, r3, #5
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	4413      	add	r3, r2
 800e838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e846:	d11f      	bne.n	800e888 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	015a      	lsls	r2, r3, #5
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4413      	add	r3, r2
 800e850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	0151      	lsls	r1, r2, #5
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	440a      	add	r2, r1
 800e85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e866:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	015a      	lsls	r2, r3, #5
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	4413      	add	r3, r2
 800e870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	0151      	lsls	r1, r2, #5
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	440a      	add	r2, r1
 800e87e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e88e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	f003 030f 	and.w	r3, r3, #15
 800e898:	2101      	movs	r1, #1
 800e89a:	fa01 f303 	lsl.w	r3, r1, r3
 800e89e:	041b      	lsls	r3, r3, #16
 800e8a0:	43db      	mvns	r3, r3
 800e8a2:	68f9      	ldr	r1, [r7, #12]
 800e8a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8b2:	69da      	ldr	r2, [r3, #28]
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 030f 	and.w	r3, r3, #15
 800e8bc:	2101      	movs	r1, #1
 800e8be:	fa01 f303 	lsl.w	r3, r1, r3
 800e8c2:	041b      	lsls	r3, r3, #16
 800e8c4:	43db      	mvns	r3, r3
 800e8c6:	68f9      	ldr	r1, [r7, #12]
 800e8c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8cc:	4013      	ands	r3, r2
 800e8ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	015a      	lsls	r2, r3, #5
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	0159      	lsls	r1, r3, #5
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	440b      	add	r3, r1
 800e8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	4b05      	ldr	r3, [pc, #20]	; (800e904 <USB_DeactivateEndpoint+0x1b4>)
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	ec337800 	.word	0xec337800
 800e904:	eff37800 	.word	0xeff37800

0800e908 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b08a      	sub	sp, #40	; 0x28
 800e90c:	af02      	add	r7, sp, #8
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	4613      	mov	r3, r2
 800e914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	785b      	ldrb	r3, [r3, #1]
 800e924:	2b01      	cmp	r3, #1
 800e926:	f040 815c 	bne.w	800ebe2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d132      	bne.n	800e998 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	015a      	lsls	r2, r3, #5
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	4413      	add	r3, r2
 800e93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	69ba      	ldr	r2, [r7, #24]
 800e942:	0151      	lsls	r1, r2, #5
 800e944:	69fa      	ldr	r2, [r7, #28]
 800e946:	440a      	add	r2, r1
 800e948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e94c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e950:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	015a      	lsls	r2, r3, #5
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	4413      	add	r3, r2
 800e95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e962:	691b      	ldr	r3, [r3, #16]
 800e964:	69ba      	ldr	r2, [r7, #24]
 800e966:	0151      	lsls	r1, r2, #5
 800e968:	69fa      	ldr	r2, [r7, #28]
 800e96a:	440a      	add	r2, r1
 800e96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	015a      	lsls	r2, r3, #5
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	4413      	add	r3, r2
 800e97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e982:	691b      	ldr	r3, [r3, #16]
 800e984:	69ba      	ldr	r2, [r7, #24]
 800e986:	0151      	lsls	r1, r2, #5
 800e988:	69fa      	ldr	r2, [r7, #28]
 800e98a:	440a      	add	r2, r1
 800e98c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e990:	0cdb      	lsrs	r3, r3, #19
 800e992:	04db      	lsls	r3, r3, #19
 800e994:	6113      	str	r3, [r2, #16]
 800e996:	e074      	b.n	800ea82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	015a      	lsls	r2, r3, #5
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	4413      	add	r3, r2
 800e9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	69ba      	ldr	r2, [r7, #24]
 800e9a8:	0151      	lsls	r1, r2, #5
 800e9aa:	69fa      	ldr	r2, [r7, #28]
 800e9ac:	440a      	add	r2, r1
 800e9ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9b2:	0cdb      	lsrs	r3, r3, #19
 800e9b4:	04db      	lsls	r3, r3, #19
 800e9b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	015a      	lsls	r2, r3, #5
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	4413      	add	r3, r2
 800e9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9c4:	691b      	ldr	r3, [r3, #16]
 800e9c6:	69ba      	ldr	r2, [r7, #24]
 800e9c8:	0151      	lsls	r1, r2, #5
 800e9ca:	69fa      	ldr	r2, [r7, #28]
 800e9cc:	440a      	add	r2, r1
 800e9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e9d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e9da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	015a      	lsls	r2, r3, #5
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	6999      	ldr	r1, [r3, #24]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	440b      	add	r3, r1
 800e9f4:	1e59      	subs	r1, r3, #1
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800e9fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ea00:	4b9d      	ldr	r3, [pc, #628]	; (800ec78 <USB_EPStartXfer+0x370>)
 800ea02:	400b      	ands	r3, r1
 800ea04:	69b9      	ldr	r1, [r7, #24]
 800ea06:	0148      	lsls	r0, r1, #5
 800ea08:	69f9      	ldr	r1, [r7, #28]
 800ea0a:	4401      	add	r1, r0
 800ea0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ea10:	4313      	orrs	r3, r2
 800ea12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	015a      	lsls	r2, r3, #5
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea20:	691a      	ldr	r2, [r3, #16]
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	699b      	ldr	r3, [r3, #24]
 800ea26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea2a:	69b9      	ldr	r1, [r7, #24]
 800ea2c:	0148      	lsls	r0, r1, #5
 800ea2e:	69f9      	ldr	r1, [r7, #28]
 800ea30:	4401      	add	r1, r0
 800ea32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ea36:	4313      	orrs	r3, r2
 800ea38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	791b      	ldrb	r3, [r3, #4]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d11f      	bne.n	800ea82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	69ba      	ldr	r2, [r7, #24]
 800ea52:	0151      	lsls	r1, r2, #5
 800ea54:	69fa      	ldr	r2, [r7, #28]
 800ea56:	440a      	add	r2, r1
 800ea58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ea60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	015a      	lsls	r2, r3, #5
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	4413      	add	r3, r2
 800ea6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	69ba      	ldr	r2, [r7, #24]
 800ea72:	0151      	lsls	r1, r2, #5
 800ea74:	69fa      	ldr	r2, [r7, #28]
 800ea76:	440a      	add	r2, r1
 800ea78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ea80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ea82:	79fb      	ldrb	r3, [r7, #7]
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d14b      	bne.n	800eb20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	695b      	ldr	r3, [r3, #20]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d009      	beq.n	800eaa4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	015a      	lsls	r2, r3, #5
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	4413      	add	r3, r2
 800ea98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	695b      	ldr	r3, [r3, #20]
 800eaa2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	791b      	ldrb	r3, [r3, #4]
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d128      	bne.n	800eafe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d110      	bne.n	800eade <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	015a      	lsls	r2, r3, #5
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	4413      	add	r3, r2
 800eac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	69ba      	ldr	r2, [r7, #24]
 800eacc:	0151      	lsls	r1, r2, #5
 800eace:	69fa      	ldr	r2, [r7, #28]
 800ead0:	440a      	add	r2, r1
 800ead2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ead6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eada:	6013      	str	r3, [r2, #0]
 800eadc:	e00f      	b.n	800eafe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eade:	69bb      	ldr	r3, [r7, #24]
 800eae0:	015a      	lsls	r2, r3, #5
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	4413      	add	r3, r2
 800eae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	69ba      	ldr	r2, [r7, #24]
 800eaee:	0151      	lsls	r1, r2, #5
 800eaf0:	69fa      	ldr	r2, [r7, #28]
 800eaf2:	440a      	add	r2, r1
 800eaf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eaf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eafc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	015a      	lsls	r2, r3, #5
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	4413      	add	r3, r2
 800eb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	69ba      	ldr	r2, [r7, #24]
 800eb0e:	0151      	lsls	r1, r2, #5
 800eb10:	69fa      	ldr	r2, [r7, #28]
 800eb12:	440a      	add	r2, r1
 800eb14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb1c:	6013      	str	r3, [r2, #0]
 800eb1e:	e133      	b.n	800ed88 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	015a      	lsls	r2, r3, #5
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	4413      	add	r3, r2
 800eb28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	69ba      	ldr	r2, [r7, #24]
 800eb30:	0151      	lsls	r1, r2, #5
 800eb32:	69fa      	ldr	r2, [r7, #28]
 800eb34:	440a      	add	r2, r1
 800eb36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	791b      	ldrb	r3, [r3, #4]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d015      	beq.n	800eb74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f000 811b 	beq.w	800ed88 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	f003 030f 	and.w	r3, r3, #15
 800eb62:	2101      	movs	r1, #1
 800eb64:	fa01 f303 	lsl.w	r3, r1, r3
 800eb68:	69f9      	ldr	r1, [r7, #28]
 800eb6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	634b      	str	r3, [r1, #52]	; 0x34
 800eb72:	e109      	b.n	800ed88 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d110      	bne.n	800eba6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eb84:	69bb      	ldr	r3, [r7, #24]
 800eb86:	015a      	lsls	r2, r3, #5
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	69ba      	ldr	r2, [r7, #24]
 800eb94:	0151      	lsls	r1, r2, #5
 800eb96:	69fa      	ldr	r2, [r7, #28]
 800eb98:	440a      	add	r2, r1
 800eb9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eba2:	6013      	str	r3, [r2, #0]
 800eba4:	e00f      	b.n	800ebc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	015a      	lsls	r2, r3, #5
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	4413      	add	r3, r2
 800ebae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	69ba      	ldr	r2, [r7, #24]
 800ebb6:	0151      	lsls	r1, r2, #5
 800ebb8:	69fa      	ldr	r2, [r7, #28]
 800ebba:	440a      	add	r2, r1
 800ebbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	6919      	ldr	r1, [r3, #16]
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	781a      	ldrb	r2, [r3, #0]
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	b298      	uxth	r0, r3
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	4603      	mov	r3, r0
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f000 fade 	bl	800f19c <USB_WritePacket>
 800ebe0:	e0d2      	b.n	800ed88 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	015a      	lsls	r2, r3, #5
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	4413      	add	r3, r2
 800ebea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebee:	691b      	ldr	r3, [r3, #16]
 800ebf0:	69ba      	ldr	r2, [r7, #24]
 800ebf2:	0151      	lsls	r1, r2, #5
 800ebf4:	69fa      	ldr	r2, [r7, #28]
 800ebf6:	440a      	add	r2, r1
 800ebf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebfc:	0cdb      	lsrs	r3, r3, #19
 800ebfe:	04db      	lsls	r3, r3, #19
 800ec00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	015a      	lsls	r2, r3, #5
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	4413      	add	r3, r2
 800ec0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	69ba      	ldr	r2, [r7, #24]
 800ec12:	0151      	lsls	r1, r2, #5
 800ec14:	69fa      	ldr	r2, [r7, #28]
 800ec16:	440a      	add	r2, r1
 800ec18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	699b      	ldr	r3, [r3, #24]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d126      	bne.n	800ec7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	015a      	lsls	r2, r3, #5
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	4413      	add	r3, r2
 800ec36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec3a:	691a      	ldr	r2, [r3, #16]
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec44:	69b9      	ldr	r1, [r7, #24]
 800ec46:	0148      	lsls	r0, r1, #5
 800ec48:	69f9      	ldr	r1, [r7, #28]
 800ec4a:	4401      	add	r1, r0
 800ec4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ec50:	4313      	orrs	r3, r2
 800ec52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	015a      	lsls	r2, r3, #5
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	69ba      	ldr	r2, [r7, #24]
 800ec64:	0151      	lsls	r1, r2, #5
 800ec66:	69fa      	ldr	r2, [r7, #28]
 800ec68:	440a      	add	r2, r1
 800ec6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec72:	6113      	str	r3, [r2, #16]
 800ec74:	e03a      	b.n	800ecec <USB_EPStartXfer+0x3e4>
 800ec76:	bf00      	nop
 800ec78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	699a      	ldr	r2, [r3, #24]
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	4413      	add	r3, r2
 800ec86:	1e5a      	subs	r2, r3, #1
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	8afa      	ldrh	r2, [r7, #22]
 800ec98:	fb03 f202 	mul.w	r2, r3, r2
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	015a      	lsls	r2, r3, #5
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	4413      	add	r3, r2
 800eca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecac:	691a      	ldr	r2, [r3, #16]
 800ecae:	8afb      	ldrh	r3, [r7, #22]
 800ecb0:	04d9      	lsls	r1, r3, #19
 800ecb2:	4b38      	ldr	r3, [pc, #224]	; (800ed94 <USB_EPStartXfer+0x48c>)
 800ecb4:	400b      	ands	r3, r1
 800ecb6:	69b9      	ldr	r1, [r7, #24]
 800ecb8:	0148      	lsls	r0, r1, #5
 800ecba:	69f9      	ldr	r1, [r7, #28]
 800ecbc:	4401      	add	r1, r0
 800ecbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	015a      	lsls	r2, r3, #5
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	4413      	add	r3, r2
 800ecce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecd2:	691a      	ldr	r2, [r3, #16]
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	69db      	ldr	r3, [r3, #28]
 800ecd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecdc:	69b9      	ldr	r1, [r7, #24]
 800ecde:	0148      	lsls	r0, r1, #5
 800ece0:	69f9      	ldr	r1, [r7, #28]
 800ece2:	4401      	add	r1, r0
 800ece4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ece8:	4313      	orrs	r3, r2
 800ecea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d10d      	bne.n	800ed0e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	691b      	ldr	r3, [r3, #16]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d009      	beq.n	800ed0e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	6919      	ldr	r1, [r3, #16]
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	015a      	lsls	r2, r3, #5
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	4413      	add	r3, r2
 800ed06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed0a:	460a      	mov	r2, r1
 800ed0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	791b      	ldrb	r3, [r3, #4]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d128      	bne.n	800ed68 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d110      	bne.n	800ed48 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	015a      	lsls	r2, r3, #5
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	69ba      	ldr	r2, [r7, #24]
 800ed36:	0151      	lsls	r1, r2, #5
 800ed38:	69fa      	ldr	r2, [r7, #28]
 800ed3a:	440a      	add	r2, r1
 800ed3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed44:	6013      	str	r3, [r2, #0]
 800ed46:	e00f      	b.n	800ed68 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	015a      	lsls	r2, r3, #5
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	4413      	add	r3, r2
 800ed50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	0151      	lsls	r1, r2, #5
 800ed5a:	69fa      	ldr	r2, [r7, #28]
 800ed5c:	440a      	add	r2, r1
 800ed5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	015a      	lsls	r2, r3, #5
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	4413      	add	r3, r2
 800ed70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	0151      	lsls	r1, r2, #5
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	440a      	add	r2, r1
 800ed7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed88:	2300      	movs	r3, #0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3720      	adds	r7, #32
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	1ff80000 	.word	0x1ff80000

0800ed98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b087      	sub	sp, #28
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	4613      	mov	r3, r2
 800eda4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	785b      	ldrb	r3, [r3, #1]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	f040 80ce 	bne.w	800ef56 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	699b      	ldr	r3, [r3, #24]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d132      	bne.n	800ee28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	015a      	lsls	r2, r3, #5
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	4413      	add	r3, r2
 800edca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	693a      	ldr	r2, [r7, #16]
 800edd2:	0151      	lsls	r1, r2, #5
 800edd4:	697a      	ldr	r2, [r7, #20]
 800edd6:	440a      	add	r2, r1
 800edd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ede0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ede4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	015a      	lsls	r2, r3, #5
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	4413      	add	r3, r2
 800edee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edf2:	691b      	ldr	r3, [r3, #16]
 800edf4:	693a      	ldr	r2, [r7, #16]
 800edf6:	0151      	lsls	r1, r2, #5
 800edf8:	697a      	ldr	r2, [r7, #20]
 800edfa:	440a      	add	r2, r1
 800edfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	015a      	lsls	r2, r3, #5
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	0151      	lsls	r1, r2, #5
 800ee18:	697a      	ldr	r2, [r7, #20]
 800ee1a:	440a      	add	r2, r1
 800ee1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee20:	0cdb      	lsrs	r3, r3, #19
 800ee22:	04db      	lsls	r3, r3, #19
 800ee24:	6113      	str	r3, [r2, #16]
 800ee26:	e04e      	b.n	800eec6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	015a      	lsls	r2, r3, #5
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	4413      	add	r3, r2
 800ee30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	0151      	lsls	r1, r2, #5
 800ee3a:	697a      	ldr	r2, [r7, #20]
 800ee3c:	440a      	add	r2, r1
 800ee3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee42:	0cdb      	lsrs	r3, r3, #19
 800ee44:	04db      	lsls	r3, r3, #19
 800ee46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	015a      	lsls	r2, r3, #5
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	4413      	add	r3, r2
 800ee50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	0151      	lsls	r1, r2, #5
 800ee5a:	697a      	ldr	r2, [r7, #20]
 800ee5c:	440a      	add	r2, r1
 800ee5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	699a      	ldr	r2, [r3, #24]
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d903      	bls.n	800ee80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	68da      	ldr	r2, [r3, #12]
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	015a      	lsls	r2, r3, #5
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	4413      	add	r3, r2
 800ee88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	693a      	ldr	r2, [r7, #16]
 800ee90:	0151      	lsls	r1, r2, #5
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	440a      	add	r2, r1
 800ee96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	015a      	lsls	r2, r3, #5
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	4413      	add	r3, r2
 800eea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeac:	691a      	ldr	r2, [r3, #16]
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eeb6:	6939      	ldr	r1, [r7, #16]
 800eeb8:	0148      	lsls	r0, r1, #5
 800eeba:	6979      	ldr	r1, [r7, #20]
 800eebc:	4401      	add	r1, r0
 800eebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eec2:	4313      	orrs	r3, r2
 800eec4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800eec6:	79fb      	ldrb	r3, [r7, #7]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d11e      	bne.n	800ef0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	695b      	ldr	r3, [r3, #20]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d009      	beq.n	800eee8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	015a      	lsls	r2, r3, #5
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	4413      	add	r3, r2
 800eedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee0:	461a      	mov	r2, r3
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	695b      	ldr	r3, [r3, #20]
 800eee6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	015a      	lsls	r2, r3, #5
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	4413      	add	r3, r2
 800eef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	693a      	ldr	r2, [r7, #16]
 800eef8:	0151      	lsls	r1, r2, #5
 800eefa:	697a      	ldr	r2, [r7, #20]
 800eefc:	440a      	add	r2, r1
 800eefe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	e097      	b.n	800f03a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	015a      	lsls	r2, r3, #5
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	4413      	add	r3, r2
 800ef12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	0151      	lsls	r1, r2, #5
 800ef1c:	697a      	ldr	r2, [r7, #20]
 800ef1e:	440a      	add	r2, r1
 800ef20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	699b      	ldr	r3, [r3, #24]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	f000 8083 	beq.w	800f03a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	f003 030f 	and.w	r3, r3, #15
 800ef44:	2101      	movs	r1, #1
 800ef46:	fa01 f303 	lsl.w	r3, r1, r3
 800ef4a:	6979      	ldr	r1, [r7, #20]
 800ef4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef50:	4313      	orrs	r3, r2
 800ef52:	634b      	str	r3, [r1, #52]	; 0x34
 800ef54:	e071      	b.n	800f03a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	015a      	lsls	r2, r3, #5
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	0151      	lsls	r1, r2, #5
 800ef68:	697a      	ldr	r2, [r7, #20]
 800ef6a:	440a      	add	r2, r1
 800ef6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef70:	0cdb      	lsrs	r3, r3, #19
 800ef72:	04db      	lsls	r3, r3, #19
 800ef74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	015a      	lsls	r2, r3, #5
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	693a      	ldr	r2, [r7, #16]
 800ef86:	0151      	lsls	r1, r2, #5
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	440a      	add	r2, r1
 800ef8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ef94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ef98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d003      	beq.n	800efaa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	68da      	ldr	r2, [r3, #12]
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	68da      	ldr	r2, [r3, #12]
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	015a      	lsls	r2, r3, #5
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	4413      	add	r3, r2
 800efba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	693a      	ldr	r2, [r7, #16]
 800efc2:	0151      	lsls	r1, r2, #5
 800efc4:	697a      	ldr	r2, [r7, #20]
 800efc6:	440a      	add	r2, r1
 800efc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800efd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	015a      	lsls	r2, r3, #5
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	4413      	add	r3, r2
 800efda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efde:	691a      	ldr	r2, [r3, #16]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	69db      	ldr	r3, [r3, #28]
 800efe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800efe8:	6939      	ldr	r1, [r7, #16]
 800efea:	0148      	lsls	r0, r1, #5
 800efec:	6979      	ldr	r1, [r7, #20]
 800efee:	4401      	add	r1, r0
 800eff0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eff4:	4313      	orrs	r3, r2
 800eff6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800eff8:	79fb      	ldrb	r3, [r7, #7]
 800effa:	2b01      	cmp	r3, #1
 800effc:	d10d      	bne.n	800f01a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d009      	beq.n	800f01a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	6919      	ldr	r1, [r3, #16]
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	015a      	lsls	r2, r3, #5
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	4413      	add	r3, r2
 800f012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f016:	460a      	mov	r2, r1
 800f018:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	015a      	lsls	r2, r3, #5
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	4413      	add	r3, r2
 800f022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	693a      	ldr	r2, [r7, #16]
 800f02a:	0151      	lsls	r1, r2, #5
 800f02c:	697a      	ldr	r2, [r7, #20]
 800f02e:	440a      	add	r2, r1
 800f030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f038:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	371c      	adds	r7, #28
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f048:	b480      	push	{r7}
 800f04a:	b087      	sub	sp, #28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f052:	2300      	movs	r3, #0
 800f054:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f056:	2300      	movs	r3, #0
 800f058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	785b      	ldrb	r3, [r3, #1]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d14a      	bne.n	800f0fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f07a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f07e:	f040 8086 	bne.w	800f18e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	015a      	lsls	r2, r3, #5
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	4413      	add	r3, r2
 800f08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	7812      	ldrb	r2, [r2, #0]
 800f096:	0151      	lsls	r1, r2, #5
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	440a      	add	r2, r1
 800f09c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f0a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	015a      	lsls	r2, r3, #5
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	683a      	ldr	r2, [r7, #0]
 800f0b8:	7812      	ldrb	r2, [r2, #0]
 800f0ba:	0151      	lsls	r1, r2, #5
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	440a      	add	r2, r1
 800f0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d902      	bls.n	800f0e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800f0de:	e056      	b.n	800f18e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	015a      	lsls	r2, r3, #5
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0f8:	d0e7      	beq.n	800f0ca <USB_EPStopXfer+0x82>
 800f0fa:	e048      	b.n	800f18e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	015a      	lsls	r2, r3, #5
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	4413      	add	r3, r2
 800f106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f114:	d13b      	bne.n	800f18e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	015a      	lsls	r2, r3, #5
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	4413      	add	r3, r2
 800f120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	7812      	ldrb	r2, [r2, #0]
 800f12a:	0151      	lsls	r1, r2, #5
 800f12c:	693a      	ldr	r2, [r7, #16]
 800f12e:	440a      	add	r2, r1
 800f130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f134:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f138:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	015a      	lsls	r2, r3, #5
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	4413      	add	r3, r2
 800f144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	7812      	ldrb	r2, [r2, #0]
 800f14e:	0151      	lsls	r1, r2, #5
 800f150:	693a      	ldr	r2, [r7, #16]
 800f152:	440a      	add	r2, r1
 800f154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f15c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	3301      	adds	r3, #1
 800f162:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f242 7210 	movw	r2, #10000	; 0x2710
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d902      	bls.n	800f174 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f16e:	2301      	movs	r3, #1
 800f170:	75fb      	strb	r3, [r7, #23]
          break;
 800f172:	e00c      	b.n	800f18e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	015a      	lsls	r2, r3, #5
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	4413      	add	r3, r2
 800f17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f18c:	d0e7      	beq.n	800f15e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f190:	4618      	mov	r0, r3
 800f192:	371c      	adds	r7, #28
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b089      	sub	sp, #36	; 0x24
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	4611      	mov	r1, r2
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	71fb      	strb	r3, [r7, #7]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f1ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d123      	bne.n	800f20a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f1c2:	88bb      	ldrh	r3, [r7, #4]
 800f1c4:	3303      	adds	r3, #3
 800f1c6:	089b      	lsrs	r3, r3, #2
 800f1c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	61bb      	str	r3, [r7, #24]
 800f1ce:	e018      	b.n	800f202 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	031a      	lsls	r2, r3, #12
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1dc:	461a      	mov	r2, r3
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	3301      	adds	r3, #1
 800f200:	61bb      	str	r3, [r7, #24]
 800f202:	69ba      	ldr	r2, [r7, #24]
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	429a      	cmp	r2, r3
 800f208:	d3e2      	bcc.n	800f1d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3724      	adds	r7, #36	; 0x24
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f218:	b480      	push	{r7}
 800f21a:	b08b      	sub	sp, #44	; 0x2c
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	4613      	mov	r3, r2
 800f224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f22e:	88fb      	ldrh	r3, [r7, #6]
 800f230:	089b      	lsrs	r3, r3, #2
 800f232:	b29b      	uxth	r3, r3
 800f234:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f236:	88fb      	ldrh	r3, [r7, #6]
 800f238:	f003 0303 	and.w	r3, r3, #3
 800f23c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f23e:	2300      	movs	r3, #0
 800f240:	623b      	str	r3, [r7, #32]
 800f242:	e014      	b.n	800f26e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24e:	601a      	str	r2, [r3, #0]
    pDest++;
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	3301      	adds	r3, #1
 800f254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f258:	3301      	adds	r3, #1
 800f25a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25e:	3301      	adds	r3, #1
 800f260:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f264:	3301      	adds	r3, #1
 800f266:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	3301      	adds	r3, #1
 800f26c:	623b      	str	r3, [r7, #32]
 800f26e:	6a3a      	ldr	r2, [r7, #32]
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	429a      	cmp	r2, r3
 800f274:	d3e6      	bcc.n	800f244 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f276:	8bfb      	ldrh	r3, [r7, #30]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d01e      	beq.n	800f2ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f27c:	2300      	movs	r3, #0
 800f27e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f286:	461a      	mov	r2, r3
 800f288:	f107 0310 	add.w	r3, r7, #16
 800f28c:	6812      	ldr	r2, [r2, #0]
 800f28e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f290:	693a      	ldr	r2, [r7, #16]
 800f292:	6a3b      	ldr	r3, [r7, #32]
 800f294:	b2db      	uxtb	r3, r3
 800f296:	00db      	lsls	r3, r3, #3
 800f298:	fa22 f303 	lsr.w	r3, r2, r3
 800f29c:	b2da      	uxtb	r2, r3
 800f29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a0:	701a      	strb	r2, [r3, #0]
      i++;
 800f2a2:	6a3b      	ldr	r3, [r7, #32]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	623b      	str	r3, [r7, #32]
      pDest++;
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f2ae:	8bfb      	ldrh	r3, [r7, #30]
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f2b4:	8bfb      	ldrh	r3, [r7, #30]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1ea      	bne.n	800f290 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	372c      	adds	r7, #44	; 0x2c
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	785b      	ldrb	r3, [r3, #1]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d12c      	bne.n	800f33e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	015a      	lsls	r2, r3, #5
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	db12      	blt.n	800f31c <USB_EPSetStall+0x54>
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00f      	beq.n	800f31c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	015a      	lsls	r2, r3, #5
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	4413      	add	r3, r2
 800f304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	68ba      	ldr	r2, [r7, #8]
 800f30c:	0151      	lsls	r1, r2, #5
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	440a      	add	r2, r1
 800f312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f31a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	015a      	lsls	r2, r3, #5
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4413      	add	r3, r2
 800f324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	0151      	lsls	r1, r2, #5
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	440a      	add	r2, r1
 800f332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	e02b      	b.n	800f396 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	015a      	lsls	r2, r3, #5
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	4413      	add	r3, r2
 800f346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	db12      	blt.n	800f376 <USB_EPSetStall+0xae>
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00f      	beq.n	800f376 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	015a      	lsls	r2, r3, #5
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	4413      	add	r3, r2
 800f35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68ba      	ldr	r2, [r7, #8]
 800f366:	0151      	lsls	r1, r2, #5
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	440a      	add	r2, r1
 800f36c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f374:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	015a      	lsls	r2, r3, #5
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	4413      	add	r3, r2
 800f37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68ba      	ldr	r2, [r7, #8]
 800f386:	0151      	lsls	r1, r2, #5
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	440a      	add	r2, r1
 800f38c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f394:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f396:	2300      	movs	r3, #0
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3714      	adds	r7, #20
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	785b      	ldrb	r3, [r3, #1]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d128      	bne.n	800f412 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	015a      	lsls	r2, r3, #5
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	0151      	lsls	r1, r2, #5
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	440a      	add	r2, r1
 800f3d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	791b      	ldrb	r3, [r3, #4]
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d003      	beq.n	800f3f0 <USB_EPClearStall+0x4c>
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	791b      	ldrb	r3, [r3, #4]
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d138      	bne.n	800f462 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	015a      	lsls	r2, r3, #5
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	0151      	lsls	r1, r2, #5
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	440a      	add	r2, r1
 800f406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f40a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f40e:	6013      	str	r3, [r2, #0]
 800f410:	e027      	b.n	800f462 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	015a      	lsls	r2, r3, #5
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	4413      	add	r3, r2
 800f41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	0151      	lsls	r1, r2, #5
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	440a      	add	r2, r1
 800f428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f42c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f430:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	791b      	ldrb	r3, [r3, #4]
 800f436:	2b03      	cmp	r3, #3
 800f438:	d003      	beq.n	800f442 <USB_EPClearStall+0x9e>
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	791b      	ldrb	r3, [r3, #4]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d10f      	bne.n	800f462 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	015a      	lsls	r2, r3, #5
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	4413      	add	r3, r2
 800f44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68ba      	ldr	r2, [r7, #8]
 800f452:	0151      	lsls	r1, r2, #5
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	440a      	add	r2, r1
 800f458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f460:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3714      	adds	r7, #20
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	460b      	mov	r3, r1
 800f47a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f48e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f492:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	78fb      	ldrb	r3, [r7, #3]
 800f49e:	011b      	lsls	r3, r3, #4
 800f4a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f4a4:	68f9      	ldr	r1, [r7, #12]
 800f4a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3714      	adds	r7, #20
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr

0800f4bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b085      	sub	sp, #20
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f4d6:	f023 0303 	bic.w	r3, r3, #3
 800f4da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4ea:	f023 0302 	bic.w	r3, r3, #2
 800f4ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr

0800f4fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f4fe:	b480      	push	{r7}
 800f500:	b085      	sub	sp, #20
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f518:	f023 0303 	bic.w	r3, r3, #3
 800f51c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f52c:	f043 0302 	orr.w	r3, r3, #2
 800f530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	695b      	ldr	r3, [r3, #20]
 800f54c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	699b      	ldr	r3, [r3, #24]
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	4013      	ands	r3, r2
 800f556:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f558:	68fb      	ldr	r3, [r7, #12]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr

0800f566 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f566:	b480      	push	{r7}
 800f568:	b085      	sub	sp, #20
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f578:	699b      	ldr	r3, [r3, #24]
 800f57a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f582:	69db      	ldr	r3, [r3, #28]
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	4013      	ands	r3, r2
 800f588:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	0c1b      	lsrs	r3, r3, #16
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3714      	adds	r7, #20
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f59a:	b480      	push	{r7}
 800f59c:	b085      	sub	sp, #20
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ac:	699b      	ldr	r3, [r3, #24]
 800f5ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5b6:	69db      	ldr	r3, [r3, #28]
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	b29b      	uxth	r3, r3
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3714      	adds	r7, #20
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f5ce:	b480      	push	{r7}
 800f5d0:	b085      	sub	sp, #20
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f5de:	78fb      	ldrb	r3, [r7, #3]
 800f5e0:	015a      	lsls	r2, r3, #5
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5f4:	695b      	ldr	r3, [r3, #20]
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	4013      	ands	r3, r2
 800f5fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f5fc:	68bb      	ldr	r3, [r7, #8]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3714      	adds	r7, #20
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f60a:	b480      	push	{r7}
 800f60c:	b087      	sub	sp, #28
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	460b      	mov	r3, r1
 800f614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f620:	691b      	ldr	r3, [r3, #16]
 800f622:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f62c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f62e:	78fb      	ldrb	r3, [r7, #3]
 800f630:	f003 030f 	and.w	r3, r3, #15
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	fa22 f303 	lsr.w	r3, r2, r3
 800f63a:	01db      	lsls	r3, r3, #7
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	4313      	orrs	r3, r2
 800f642:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f644:	78fb      	ldrb	r3, [r7, #3]
 800f646:	015a      	lsls	r2, r3, #5
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	4413      	add	r3, r2
 800f64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	693a      	ldr	r2, [r7, #16]
 800f654:	4013      	ands	r3, r2
 800f656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f658:	68bb      	ldr	r3, [r7, #8]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	371c      	adds	r7, #28
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f666:	b480      	push	{r7}
 800f668:	b083      	sub	sp, #12
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	f003 0301 	and.w	r3, r3, #1
}
 800f676:	4618      	mov	r0, r3
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f682:	b480      	push	{r7}
 800f684:	b085      	sub	sp, #20
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68fa      	ldr	r2, [r7, #12]
 800f698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f69c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f6a0:	f023 0307 	bic.w	r3, r3, #7
 800f6a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b087      	sub	sp, #28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	607a      	str	r2, [r7, #4]
 800f6d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	333c      	adds	r3, #60	; 0x3c
 800f6de:	3304      	adds	r3, #4
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	4a26      	ldr	r2, [pc, #152]	; (800f780 <USB_EP0_OutStart+0xb8>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d90a      	bls.n	800f702 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f6f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f6fc:	d101      	bne.n	800f702 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f6fe:	2300      	movs	r3, #0
 800f700:	e037      	b.n	800f772 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f708:	461a      	mov	r2, r3
 800f70a:	2300      	movs	r3, #0
 800f70c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f714:	691b      	ldr	r3, [r3, #16]
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f71c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f728:	691b      	ldr	r3, [r3, #16]
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f730:	f043 0318 	orr.w	r3, r3, #24
 800f734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f73c:	691b      	ldr	r3, [r3, #16]
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f744:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f748:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f74a:	7afb      	ldrb	r3, [r7, #11]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d10f      	bne.n	800f770 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f756:	461a      	mov	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	697a      	ldr	r2, [r7, #20]
 800f766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f76a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f76e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	371c      	adds	r7, #28
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr
 800f77e:	bf00      	nop
 800f780:	4f54300a 	.word	0x4f54300a

0800f784 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f784:	b480      	push	{r7}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f78c:	2300      	movs	r3, #0
 800f78e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	3301      	adds	r3, #1
 800f794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	4a13      	ldr	r2, [pc, #76]	; (800f7e8 <USB_CoreReset+0x64>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d901      	bls.n	800f7a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f79e:	2303      	movs	r3, #3
 800f7a0:	e01b      	b.n	800f7da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	691b      	ldr	r3, [r3, #16]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	daf2      	bge.n	800f790 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	f043 0201 	orr.w	r2, r3, #1
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	4a09      	ldr	r2, [pc, #36]	; (800f7e8 <USB_CoreReset+0x64>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d901      	bls.n	800f7cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	e006      	b.n	800f7da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	691b      	ldr	r3, [r3, #16]
 800f7d0:	f003 0301 	and.w	r3, r3, #1
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d0f0      	beq.n	800f7ba <USB_CoreReset+0x36>

  return HAL_OK;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3714      	adds	r7, #20
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	00030d40 	.word	0x00030d40

0800f7ec <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800f7f8:	2018      	movs	r0, #24
 800f7fa:	f004 fbc9 	bl	8013f90 <USBD_static_malloc>
 800f7fe:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d109      	bne.n	800f81a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	32b0      	adds	r2, #176	; 0xb0
 800f810:	2100      	movs	r1, #0
 800f812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f816:	2302      	movs	r3, #2
 800f818:	e08a      	b.n	800f930 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	32b0      	adds	r2, #176	; 0xb0
 800f824:	68f9      	ldr	r1, [r7, #12]
 800f826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	32b0      	adds	r2, #176	; 0xb0
 800f834:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	7c1b      	ldrb	r3, [r3, #16]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d11b      	bne.n	800f87e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800f846:	4b3c      	ldr	r3, [pc, #240]	; (800f938 <USBD_CUSTOM_HID_Init+0x14c>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	f003 020f 	and.w	r2, r3, #15
 800f84e:	6879      	ldr	r1, [r7, #4]
 800f850:	4613      	mov	r3, r2
 800f852:	009b      	lsls	r3, r3, #2
 800f854:	4413      	add	r3, r2
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	440b      	add	r3, r1
 800f85a:	3326      	adds	r3, #38	; 0x26
 800f85c:	2205      	movs	r2, #5
 800f85e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800f860:	4b36      	ldr	r3, [pc, #216]	; (800f93c <USBD_CUSTOM_HID_Init+0x150>)
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	f003 020f 	and.w	r2, r3, #15
 800f868:	6879      	ldr	r1, [r7, #4]
 800f86a:	4613      	mov	r3, r2
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	4413      	add	r3, r2
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	440b      	add	r3, r1
 800f874:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800f878:	2205      	movs	r2, #5
 800f87a:	801a      	strh	r2, [r3, #0]
 800f87c:	e01a      	b.n	800f8b4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800f87e:	4b2e      	ldr	r3, [pc, #184]	; (800f938 <USBD_CUSTOM_HID_Init+0x14c>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	f003 020f 	and.w	r2, r3, #15
 800f886:	6879      	ldr	r1, [r7, #4]
 800f888:	4613      	mov	r3, r2
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	4413      	add	r3, r2
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	440b      	add	r3, r1
 800f892:	3326      	adds	r3, #38	; 0x26
 800f894:	220a      	movs	r2, #10
 800f896:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800f898:	4b28      	ldr	r3, [pc, #160]	; (800f93c <USBD_CUSTOM_HID_Init+0x150>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	f003 020f 	and.w	r2, r3, #15
 800f8a0:	6879      	ldr	r1, [r7, #4]
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	440b      	add	r3, r1
 800f8ac:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800f8b0:	220a      	movs	r2, #10
 800f8b2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800f8b4:	4b20      	ldr	r3, [pc, #128]	; (800f938 <USBD_CUSTOM_HID_Init+0x14c>)
 800f8b6:	7819      	ldrb	r1, [r3, #0]
 800f8b8:	2340      	movs	r3, #64	; 0x40
 800f8ba:	2203      	movs	r2, #3
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f004 fa56 	bl	8013d6e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800f8c2:	4b1d      	ldr	r3, [pc, #116]	; (800f938 <USBD_CUSTOM_HID_Init+0x14c>)
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	f003 020f 	and.w	r2, r3, #15
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	4413      	add	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	440b      	add	r3, r1
 800f8d6:	3324      	adds	r3, #36	; 0x24
 800f8d8:	2201      	movs	r2, #1
 800f8da:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800f8dc:	4b17      	ldr	r3, [pc, #92]	; (800f93c <USBD_CUSTOM_HID_Init+0x150>)
 800f8de:	7819      	ldrb	r1, [r3, #0]
 800f8e0:	2340      	movs	r3, #64	; 0x40
 800f8e2:	2203      	movs	r2, #3
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f004 fa42 	bl	8013d6e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800f8ea:	4b14      	ldr	r3, [pc, #80]	; (800f93c <USBD_CUSTOM_HID_Init+0x150>)
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	f003 020f 	and.w	r2, r3, #15
 800f8f2:	6879      	ldr	r1, [r7, #4]
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4413      	add	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	440b      	add	r3, r1
 800f8fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f902:	2201      	movs	r2, #1
 800f904:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2200      	movs	r2, #0
 800f90a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	33b0      	adds	r3, #176	; 0xb0
 800f916:	009b      	lsls	r3, r3, #2
 800f918:	4413      	add	r3, r2
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800f920:	4b06      	ldr	r3, [pc, #24]	; (800f93c <USBD_CUSTOM_HID_Init+0x150>)
 800f922:	7819      	ldrb	r1, [r3, #0]
 800f924:	68fa      	ldr	r2, [r7, #12]
 800f926:	2302      	movs	r3, #2
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f004 fb0f 	bl	8013f4c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	2000009a 	.word	0x2000009a
 800f93c:	2000009b 	.word	0x2000009b

0800f940 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800f94c:	4b37      	ldr	r3, [pc, #220]	; (800fa2c <USBD_CUSTOM_HID_DeInit+0xec>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	4619      	mov	r1, r3
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f004 fa31 	bl	8013dba <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800f958:	4b34      	ldr	r3, [pc, #208]	; (800fa2c <USBD_CUSTOM_HID_DeInit+0xec>)
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	f003 020f 	and.w	r2, r3, #15
 800f960:	6879      	ldr	r1, [r7, #4]
 800f962:	4613      	mov	r3, r2
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4413      	add	r3, r2
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	440b      	add	r3, r1
 800f96c:	3324      	adds	r3, #36	; 0x24
 800f96e:	2200      	movs	r2, #0
 800f970:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800f972:	4b2e      	ldr	r3, [pc, #184]	; (800fa2c <USBD_CUSTOM_HID_DeInit+0xec>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	f003 020f 	and.w	r2, r3, #15
 800f97a:	6879      	ldr	r1, [r7, #4]
 800f97c:	4613      	mov	r3, r2
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	4413      	add	r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	440b      	add	r3, r1
 800f986:	3326      	adds	r3, #38	; 0x26
 800f988:	2200      	movs	r2, #0
 800f98a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800f98c:	4b28      	ldr	r3, [pc, #160]	; (800fa30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	4619      	mov	r1, r3
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f004 fa11 	bl	8013dba <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800f998:	4b25      	ldr	r3, [pc, #148]	; (800fa30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	f003 020f 	and.w	r2, r3, #15
 800f9a0:	6879      	ldr	r1, [r7, #4]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	009b      	lsls	r3, r3, #2
 800f9a6:	4413      	add	r3, r2
 800f9a8:	009b      	lsls	r3, r3, #2
 800f9aa:	440b      	add	r3, r1
 800f9ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800f9b4:	4b1e      	ldr	r3, [pc, #120]	; (800fa30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	f003 020f 	and.w	r2, r3, #15
 800f9bc:	6879      	ldr	r1, [r7, #4]
 800f9be:	4613      	mov	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	4413      	add	r3, r2
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	440b      	add	r3, r1
 800f9c8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	32b0      	adds	r2, #176	; 0xb0
 800f9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d01f      	beq.n	800fa22 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f9e8:	687a      	ldr	r2, [r7, #4]
 800f9ea:	33b0      	adds	r3, #176	; 0xb0
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	689b      	ldr	r3, [r3, #8]
 800f9f4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	32b0      	adds	r2, #176	; 0xb0
 800fa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f004 fad1 	bl	8013fac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	32b0      	adds	r2, #176	; 0xb0
 800fa14:	2100      	movs	r1, #0
 800fa16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fa22:	2300      	movs	r3, #0
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	2000009a 	.word	0x2000009a
 800fa30:	2000009b 	.word	0x2000009b

0800fa34 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b088      	sub	sp, #32
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	32b0      	adds	r2, #176	; 0xb0
 800fa48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa4c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800fa52:	2300      	movs	r3, #0
 800fa54:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800fa56:	2300      	movs	r3, #0
 800fa58:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d101      	bne.n	800fa68 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800fa64:	2303      	movs	r3, #3
 800fa66:	e0f8      	b.n	800fc5a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d056      	beq.n	800fb22 <USBD_CUSTOM_HID_Setup+0xee>
 800fa74:	2b20      	cmp	r3, #32
 800fa76:	f040 80e8 	bne.w	800fc4a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	785b      	ldrb	r3, [r3, #1]
 800fa7e:	3b02      	subs	r3, #2
 800fa80:	2b09      	cmp	r3, #9
 800fa82:	d846      	bhi.n	800fb12 <USBD_CUSTOM_HID_Setup+0xde>
 800fa84:	a201      	add	r2, pc, #4	; (adr r2, 800fa8c <USBD_CUSTOM_HID_Setup+0x58>)
 800fa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8a:	bf00      	nop
 800fa8c:	0800fae5 	.word	0x0800fae5
 800fa90:	0800fac3 	.word	0x0800fac3
 800fa94:	0800fb13 	.word	0x0800fb13
 800fa98:	0800fb13 	.word	0x0800fb13
 800fa9c:	0800fb13 	.word	0x0800fb13
 800faa0:	0800fb13 	.word	0x0800fb13
 800faa4:	0800fb13 	.word	0x0800fb13
 800faa8:	0800faf5 	.word	0x0800faf5
 800faac:	0800fad3 	.word	0x0800fad3
 800fab0:	0800fab5 	.word	0x0800fab5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	885b      	ldrh	r3, [r3, #2]
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	461a      	mov	r2, r3
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	605a      	str	r2, [r3, #4]
          break;
 800fac0:	e02e      	b.n	800fb20 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	3304      	adds	r3, #4
 800fac6:	2201      	movs	r2, #1
 800fac8:	4619      	mov	r1, r3
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f001 fca0 	bl	8011410 <USBD_CtlSendData>
          break;
 800fad0:	e026      	b.n	800fb20 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	885b      	ldrh	r3, [r3, #2]
 800fad6:	0a1b      	lsrs	r3, r3, #8
 800fad8:	b29b      	uxth	r3, r3
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	461a      	mov	r2, r3
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	609a      	str	r2, [r3, #8]
          break;
 800fae2:	e01d      	b.n	800fb20 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	3308      	adds	r3, #8
 800fae8:	2201      	movs	r2, #1
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f001 fc8f 	bl	8011410 <USBD_CtlSendData>
          break;
 800faf2:	e015      	b.n	800fb20 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	2201      	movs	r2, #1
 800faf8:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800fafa:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	88db      	ldrh	r3, [r3, #6]
 800fb00:	2b02      	cmp	r3, #2
 800fb02:	bf28      	it	cs
 800fb04:	2302      	movcs	r3, #2
 800fb06:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800fb08:	461a      	mov	r2, r3
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f001 fcac 	bl	8011468 <USBD_CtlPrepareRx>
          break;
 800fb10:	e006      	b.n	800fb20 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f001 fc0a 	bl	801132e <USBD_CtlError>
          ret = USBD_FAIL;
 800fb1a:	2303      	movs	r3, #3
 800fb1c:	75fb      	strb	r3, [r7, #23]
          break;
 800fb1e:	bf00      	nop
      }
      break;
 800fb20:	e09a      	b.n	800fc58 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	785b      	ldrb	r3, [r3, #1]
 800fb26:	2b0b      	cmp	r3, #11
 800fb28:	f200 8086 	bhi.w	800fc38 <USBD_CUSTOM_HID_Setup+0x204>
 800fb2c:	a201      	add	r2, pc, #4	; (adr r2, 800fb34 <USBD_CUSTOM_HID_Setup+0x100>)
 800fb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb32:	bf00      	nop
 800fb34:	0800fb65 	.word	0x0800fb65
 800fb38:	0800fc47 	.word	0x0800fc47
 800fb3c:	0800fc39 	.word	0x0800fc39
 800fb40:	0800fc39 	.word	0x0800fc39
 800fb44:	0800fc39 	.word	0x0800fc39
 800fb48:	0800fc39 	.word	0x0800fc39
 800fb4c:	0800fb8f 	.word	0x0800fb8f
 800fb50:	0800fc39 	.word	0x0800fc39
 800fb54:	0800fc39 	.word	0x0800fc39
 800fb58:	0800fc39 	.word	0x0800fc39
 800fb5c:	0800fbe7 	.word	0x0800fbe7
 800fb60:	0800fc11 	.word	0x0800fc11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	2b03      	cmp	r3, #3
 800fb6e:	d107      	bne.n	800fb80 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fb70:	f107 030e 	add.w	r3, r7, #14
 800fb74:	2202      	movs	r2, #2
 800fb76:	4619      	mov	r1, r3
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f001 fc49 	bl	8011410 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fb7e:	e063      	b.n	800fc48 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800fb80:	6839      	ldr	r1, [r7, #0]
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f001 fbd3 	bl	801132e <USBD_CtlError>
            ret = USBD_FAIL;
 800fb88:	2303      	movs	r3, #3
 800fb8a:	75fb      	strb	r3, [r7, #23]
          break;
 800fb8c:	e05c      	b.n	800fc48 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	885b      	ldrh	r3, [r3, #2]
 800fb92:	0a1b      	lsrs	r3, r3, #8
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	2b22      	cmp	r3, #34	; 0x22
 800fb98:	d110      	bne.n	800fbbc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	88db      	ldrh	r3, [r3, #6]
 800fb9e:	2b21      	cmp	r3, #33	; 0x21
 800fba0:	bf28      	it	cs
 800fba2:	2321      	movcs	r3, #33	; 0x21
 800fba4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	33b0      	adds	r3, #176	; 0xb0
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	4413      	add	r3, r2
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	61bb      	str	r3, [r7, #24]
 800fbba:	e00d      	b.n	800fbd8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	885b      	ldrh	r3, [r3, #2]
 800fbc0:	0a1b      	lsrs	r3, r3, #8
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	2b21      	cmp	r3, #33	; 0x21
 800fbc6:	d107      	bne.n	800fbd8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800fbc8:	4b26      	ldr	r3, [pc, #152]	; (800fc64 <USBD_CUSTOM_HID_Setup+0x230>)
 800fbca:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	88db      	ldrh	r3, [r3, #6]
 800fbd0:	2b09      	cmp	r3, #9
 800fbd2:	bf28      	it	cs
 800fbd4:	2309      	movcs	r3, #9
 800fbd6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800fbd8:	8bfb      	ldrh	r3, [r7, #30]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	69b9      	ldr	r1, [r7, #24]
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f001 fc16 	bl	8011410 <USBD_CtlSendData>
          break;
 800fbe4:	e030      	b.n	800fc48 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	d107      	bne.n	800fc02 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	330c      	adds	r3, #12
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f001 fc08 	bl	8011410 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fc00:	e022      	b.n	800fc48 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800fc02:	6839      	ldr	r1, [r7, #0]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f001 fb92 	bl	801132e <USBD_CtlError>
            ret = USBD_FAIL;
 800fc0a:	2303      	movs	r3, #3
 800fc0c:	75fb      	strb	r3, [r7, #23]
          break;
 800fc0e:	e01b      	b.n	800fc48 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	2b03      	cmp	r3, #3
 800fc1a:	d106      	bne.n	800fc2a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	885b      	ldrh	r3, [r3, #2]
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	461a      	mov	r2, r3
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fc28:	e00e      	b.n	800fc48 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800fc2a:	6839      	ldr	r1, [r7, #0]
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f001 fb7e 	bl	801132e <USBD_CtlError>
            ret = USBD_FAIL;
 800fc32:	2303      	movs	r3, #3
 800fc34:	75fb      	strb	r3, [r7, #23]
          break;
 800fc36:	e007      	b.n	800fc48 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f001 fb77 	bl	801132e <USBD_CtlError>
          ret = USBD_FAIL;
 800fc40:	2303      	movs	r3, #3
 800fc42:	75fb      	strb	r3, [r7, #23]
          break;
 800fc44:	e000      	b.n	800fc48 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800fc46:	bf00      	nop
      }
      break;
 800fc48:	e006      	b.n	800fc58 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800fc4a:	6839      	ldr	r1, [r7, #0]
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f001 fb6e 	bl	801132e <USBD_CtlError>
      ret = USBD_FAIL;
 800fc52:	2303      	movs	r3, #3
 800fc54:	75fb      	strb	r3, [r7, #23]
      break;
 800fc56:	bf00      	nop
  }
  return (uint8_t)ret;
 800fc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3720      	adds	r7, #32
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	20000084 	.word	0x20000084

0800fc68 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b086      	sub	sp, #24
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	4613      	mov	r3, r2
 800fc74:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	32b0      	adds	r2, #176	; 0xb0
 800fc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d101      	bne.n	800fc8c <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	e01f      	b.n	800fccc <USBD_CUSTOM_HID_SendReport+0x64>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	32b0      	adds	r2, #176	; 0xb0
 800fc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc9a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	2b03      	cmp	r3, #3
 800fca6:	d110      	bne.n	800fcca <USBD_CUSTOM_HID_SendReport+0x62>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	7d1b      	ldrb	r3, [r3, #20]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d10a      	bne.n	800fcc6 <USBD_CUSTOM_HID_SendReport+0x5e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800fcb6:	4b07      	ldr	r3, [pc, #28]	; (800fcd4 <USBD_CUSTOM_HID_SendReport+0x6c>)
 800fcb8:	7819      	ldrb	r1, [r3, #0]
 800fcba:	88fb      	ldrh	r3, [r7, #6]
 800fcbc:	68ba      	ldr	r2, [r7, #8]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f004 f923 	bl	8013f0a <USBD_LL_Transmit>
 800fcc4:	e001      	b.n	800fcca <USBD_CUSTOM_HID_SendReport+0x62>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	e000      	b.n	800fccc <USBD_CUSTOM_HID_SendReport+0x64>
    }
  }
  return (uint8_t)USBD_OK;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3718      	adds	r7, #24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	2000009a 	.word	0x2000009a

0800fcd8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800fce0:	2181      	movs	r1, #129	; 0x81
 800fce2:	4815      	ldr	r0, [pc, #84]	; (800fd38 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800fce4:	f000 fceb 	bl	80106be <USBD_GetEpDesc>
 800fce8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fcea:	2101      	movs	r1, #1
 800fcec:	4812      	ldr	r0, [pc, #72]	; (800fd38 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800fcee:	f000 fce6 	bl	80106be <USBD_GetEpDesc>
 800fcf2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d009      	beq.n	800fd0e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd02:	711a      	strb	r2, [r3, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	220a      	movs	r2, #10
 800fd0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d009      	beq.n	800fd28 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	2200      	movs	r2, #0
 800fd18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd1c:	711a      	strb	r2, [r3, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	220a      	movs	r2, #10
 800fd26:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2229      	movs	r2, #41	; 0x29
 800fd2c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fd2e:	4b02      	ldr	r3, [pc, #8]	; (800fd38 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3710      	adds	r7, #16
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	20000058 	.word	0x20000058

0800fd3c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800fd44:	2181      	movs	r1, #129	; 0x81
 800fd46:	4815      	ldr	r0, [pc, #84]	; (800fd9c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800fd48:	f000 fcb9 	bl	80106be <USBD_GetEpDesc>
 800fd4c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fd4e:	2101      	movs	r1, #1
 800fd50:	4812      	ldr	r0, [pc, #72]	; (800fd9c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800fd52:	f000 fcb4 	bl	80106be <USBD_GetEpDesc>
 800fd56:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d009      	beq.n	800fd72 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2200      	movs	r2, #0
 800fd62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd66:	711a      	strb	r2, [r3, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2205      	movs	r2, #5
 800fd70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d009      	beq.n	800fd8c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd80:	711a      	strb	r2, [r3, #4]
 800fd82:	2200      	movs	r2, #0
 800fd84:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	2205      	movs	r2, #5
 800fd8a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2229      	movs	r2, #41	; 0x29
 800fd90:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fd92:	4b02      	ldr	r3, [pc, #8]	; (800fd9c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	20000058 	.word	0x20000058

0800fda0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800fda8:	2181      	movs	r1, #129	; 0x81
 800fdaa:	4815      	ldr	r0, [pc, #84]	; (800fe00 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800fdac:	f000 fc87 	bl	80106be <USBD_GetEpDesc>
 800fdb0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fdb2:	2101      	movs	r1, #1
 800fdb4:	4812      	ldr	r0, [pc, #72]	; (800fe00 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800fdb6:	f000 fc82 	bl	80106be <USBD_GetEpDesc>
 800fdba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d009      	beq.n	800fdd6 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fdca:	711a      	strb	r2, [r3, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	220a      	movs	r2, #10
 800fdd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d009      	beq.n	800fdf0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2200      	movs	r2, #0
 800fde0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fde4:	711a      	strb	r2, [r3, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	220a      	movs	r2, #10
 800fdee:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2229      	movs	r2, #41	; 0x29
 800fdf4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fdf6:	4b02      	ldr	r3, [pc, #8]	; (800fe00 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3710      	adds	r7, #16
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	20000058 	.word	0x20000058

0800fe04 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	32b0      	adds	r2, #176	; 0xb0
 800fe1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	32b0      	adds	r2, #176	; 0xb0
 800fe46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d101      	bne.n	800fe52 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fe4e:	2303      	movs	r3, #3
 800fe50:	e014      	b.n	800fe7c <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	32b0      	adds	r2, #176	; 0xb0
 800fe5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe60:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                           //hhid->Report_buf[1]);
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	33b0      	adds	r3, #176	; 0xb0
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	4413      	add	r3, r2
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	4610      	mov	r0, r2
 800fe78:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fe7a:	2300      	movs	r3, #0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	32b0      	adds	r2, #176	; 0xb0
 800fe96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe9a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d101      	bne.n	800fea6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fea2:	2303      	movs	r3, #3
 800fea4:	e013      	b.n	800fece <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d10e      	bne.n	800fecc <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    /*((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                             hhid->Report_buf[1]);*/
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	33b0      	adds	r3, #176	; 0xb0
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	4413      	add	r3, r2
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	68fa      	ldr	r2, [r7, #12]
 800fec2:	4610      	mov	r0, r2
 800fec4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2200      	movs	r2, #0
 800feca:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800fecc:	2300      	movs	r3, #0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	220a      	movs	r2, #10
 800fee4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800fee6:	4b03      	ldr	r3, [pc, #12]	; (800fef4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800fee8:	4618      	mov	r0, r3
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr
 800fef4:	20000090 	.word	0x20000090

0800fef8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d101      	bne.n	800ff0c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ff08:	2303      	movs	r3, #3
 800ff0a:	e009      	b.n	800ff20 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	33b0      	adds	r3, #176	; 0xb0
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	4413      	add	r3, r2
 800ff1a:	683a      	ldr	r2, [r7, #0]
 800ff1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b086      	sub	sp, #24
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	4613      	mov	r3, r2
 800ff38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d101      	bne.n	800ff44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ff40:	2303      	movs	r3, #3
 800ff42:	e01f      	b.n	800ff84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2200      	movs	r2, #0
 800ff48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2200      	movs	r2, #0
 800ff58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d003      	beq.n	800ff6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	79fa      	ldrb	r2, [r7, #7]
 800ff76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f003 fe91 	bl	8013ca0 <USBD_LL_Init>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ff82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3718      	adds	r7, #24
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ff96:	2300      	movs	r3, #0
 800ff98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d101      	bne.n	800ffa4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ffa0:	2303      	movs	r3, #3
 800ffa2:	e025      	b.n	800fff0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	32ae      	adds	r2, #174	; 0xae
 800ffb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d00f      	beq.n	800ffe0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	32ae      	adds	r2, #174	; 0xae
 800ffca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd0:	f107 020e 	add.w	r2, r7, #14
 800ffd4:	4610      	mov	r0, r2
 800ffd6:	4798      	blx	r3
 800ffd8:	4602      	mov	r2, r0
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ffe6:	1c5a      	adds	r2, r3, #1
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3710      	adds	r7, #16
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f003 fe99 	bl	8013d38 <USBD_LL_Start>
 8010006:	4603      	mov	r3, r0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3708      	adds	r7, #8
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010018:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801001a:	4618      	mov	r0, r3
 801001c:	370c      	adds	r7, #12
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr

08010026 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010026:	b580      	push	{r7, lr}
 8010028:	b084      	sub	sp, #16
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
 801002e:	460b      	mov	r3, r1
 8010030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010032:	2300      	movs	r3, #0
 8010034:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801003c:	2b00      	cmp	r3, #0
 801003e:	d009      	beq.n	8010054 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	78fa      	ldrb	r2, [r7, #3]
 801004a:	4611      	mov	r1, r2
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	4798      	blx	r3
 8010050:	4603      	mov	r3, r0
 8010052:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010054:	7bfb      	ldrb	r3, [r7, #15]
}
 8010056:	4618      	mov	r0, r3
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801005e:	b580      	push	{r7, lr}
 8010060:	b084      	sub	sp, #16
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	460b      	mov	r3, r1
 8010068:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801006a:	2300      	movs	r3, #0
 801006c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	78fa      	ldrb	r2, [r7, #3]
 8010078:	4611      	mov	r1, r2
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	4798      	blx	r3
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d001      	beq.n	8010088 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010084:	2303      	movs	r3, #3
 8010086:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010088:	7bfb      	ldrb	r3, [r7, #15]
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f001 f908 	bl	80112ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2201      	movs	r2, #1
 80100ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80100b8:	461a      	mov	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80100c6:	f003 031f 	and.w	r3, r3, #31
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	d01a      	beq.n	8010104 <USBD_LL_SetupStage+0x72>
 80100ce:	2b02      	cmp	r3, #2
 80100d0:	d822      	bhi.n	8010118 <USBD_LL_SetupStage+0x86>
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d002      	beq.n	80100dc <USBD_LL_SetupStage+0x4a>
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	d00a      	beq.n	80100f0 <USBD_LL_SetupStage+0x5e>
 80100da:	e01d      	b.n	8010118 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80100e2:	4619      	mov	r1, r3
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 fb5f 	bl	80107a8 <USBD_StdDevReq>
 80100ea:	4603      	mov	r3, r0
 80100ec:	73fb      	strb	r3, [r7, #15]
      break;
 80100ee:	e020      	b.n	8010132 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80100f6:	4619      	mov	r1, r3
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 fbc7 	bl	801088c <USBD_StdItfReq>
 80100fe:	4603      	mov	r3, r0
 8010100:	73fb      	strb	r3, [r7, #15]
      break;
 8010102:	e016      	b.n	8010132 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801010a:	4619      	mov	r1, r3
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fc29 	bl	8010964 <USBD_StdEPReq>
 8010112:	4603      	mov	r3, r0
 8010114:	73fb      	strb	r3, [r7, #15]
      break;
 8010116:	e00c      	b.n	8010132 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801011e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010122:	b2db      	uxtb	r3, r3
 8010124:	4619      	mov	r1, r3
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f003 fe66 	bl	8013df8 <USBD_LL_StallEP>
 801012c:	4603      	mov	r3, r0
 801012e:	73fb      	strb	r3, [r7, #15]
      break;
 8010130:	bf00      	nop
  }

  return ret;
 8010132:	7bfb      	ldrb	r3, [r7, #15]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3710      	adds	r7, #16
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b086      	sub	sp, #24
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	460b      	mov	r3, r1
 8010146:	607a      	str	r2, [r7, #4]
 8010148:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801014a:	2300      	movs	r3, #0
 801014c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801014e:	7afb      	ldrb	r3, [r7, #11]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d16e      	bne.n	8010232 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801015a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010162:	2b03      	cmp	r3, #3
 8010164:	f040 8098 	bne.w	8010298 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	689a      	ldr	r2, [r3, #8]
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	429a      	cmp	r2, r3
 8010172:	d913      	bls.n	801019c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	689a      	ldr	r2, [r3, #8]
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	1ad2      	subs	r2, r2, r3
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	68da      	ldr	r2, [r3, #12]
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	689b      	ldr	r3, [r3, #8]
 801018a:	4293      	cmp	r3, r2
 801018c:	bf28      	it	cs
 801018e:	4613      	movcs	r3, r2
 8010190:	461a      	mov	r2, r3
 8010192:	6879      	ldr	r1, [r7, #4]
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f001 f984 	bl	80114a2 <USBD_CtlContinueRx>
 801019a:	e07d      	b.n	8010298 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80101a2:	f003 031f 	and.w	r3, r3, #31
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	d014      	beq.n	80101d4 <USBD_LL_DataOutStage+0x98>
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	d81d      	bhi.n	80101ea <USBD_LL_DataOutStage+0xae>
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d002      	beq.n	80101b8 <USBD_LL_DataOutStage+0x7c>
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d003      	beq.n	80101be <USBD_LL_DataOutStage+0x82>
 80101b6:	e018      	b.n	80101ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80101b8:	2300      	movs	r3, #0
 80101ba:	75bb      	strb	r3, [r7, #22]
            break;
 80101bc:	e018      	b.n	80101f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	4619      	mov	r1, r3
 80101c8:	68f8      	ldr	r0, [r7, #12]
 80101ca:	f000 fa5e 	bl	801068a <USBD_CoreFindIF>
 80101ce:	4603      	mov	r3, r0
 80101d0:	75bb      	strb	r3, [r7, #22]
            break;
 80101d2:	e00d      	b.n	80101f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	4619      	mov	r1, r3
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f000 fa60 	bl	80106a4 <USBD_CoreFindEP>
 80101e4:	4603      	mov	r3, r0
 80101e6:	75bb      	strb	r3, [r7, #22]
            break;
 80101e8:	e002      	b.n	80101f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80101ea:	2300      	movs	r3, #0
 80101ec:	75bb      	strb	r3, [r7, #22]
            break;
 80101ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80101f0:	7dbb      	ldrb	r3, [r7, #22]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d119      	bne.n	801022a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	2b03      	cmp	r3, #3
 8010200:	d113      	bne.n	801022a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010202:	7dba      	ldrb	r2, [r7, #22]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	32ae      	adds	r2, #174	; 0xae
 8010208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d00b      	beq.n	801022a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010212:	7dba      	ldrb	r2, [r7, #22]
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801021a:	7dba      	ldrb	r2, [r7, #22]
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	32ae      	adds	r2, #174	; 0xae
 8010220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010224:	691b      	ldr	r3, [r3, #16]
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f001 f94a 	bl	80114c4 <USBD_CtlSendStatus>
 8010230:	e032      	b.n	8010298 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010232:	7afb      	ldrb	r3, [r7, #11]
 8010234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010238:	b2db      	uxtb	r3, r3
 801023a:	4619      	mov	r1, r3
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 fa31 	bl	80106a4 <USBD_CoreFindEP>
 8010242:	4603      	mov	r3, r0
 8010244:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010246:	7dbb      	ldrb	r3, [r7, #22]
 8010248:	2bff      	cmp	r3, #255	; 0xff
 801024a:	d025      	beq.n	8010298 <USBD_LL_DataOutStage+0x15c>
 801024c:	7dbb      	ldrb	r3, [r7, #22]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d122      	bne.n	8010298 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b03      	cmp	r3, #3
 801025c:	d117      	bne.n	801028e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801025e:	7dba      	ldrb	r2, [r7, #22]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	32ae      	adds	r2, #174	; 0xae
 8010264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00f      	beq.n	801028e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801026e:	7dba      	ldrb	r2, [r7, #22]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010276:	7dba      	ldrb	r2, [r7, #22]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	32ae      	adds	r2, #174	; 0xae
 801027c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010280:	699b      	ldr	r3, [r3, #24]
 8010282:	7afa      	ldrb	r2, [r7, #11]
 8010284:	4611      	mov	r1, r2
 8010286:	68f8      	ldr	r0, [r7, #12]
 8010288:	4798      	blx	r3
 801028a:	4603      	mov	r3, r0
 801028c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801028e:	7dfb      	ldrb	r3, [r7, #23]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010294:	7dfb      	ldrb	r3, [r7, #23]
 8010296:	e000      	b.n	801029a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010298:	2300      	movs	r3, #0
}
 801029a:	4618      	mov	r0, r3
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b086      	sub	sp, #24
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	60f8      	str	r0, [r7, #12]
 80102aa:	460b      	mov	r3, r1
 80102ac:	607a      	str	r2, [r7, #4]
 80102ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80102b0:	7afb      	ldrb	r3, [r7, #11]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d16f      	bne.n	8010396 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	3314      	adds	r3, #20
 80102ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	d15a      	bne.n	801037c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	689a      	ldr	r2, [r3, #8]
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d914      	bls.n	80102fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	689a      	ldr	r2, [r3, #8]
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	1ad2      	subs	r2, r2, r3
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	461a      	mov	r2, r3
 80102e6:	6879      	ldr	r1, [r7, #4]
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	f001 f8ac 	bl	8011446 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102ee:	2300      	movs	r3, #0
 80102f0:	2200      	movs	r2, #0
 80102f2:	2100      	movs	r1, #0
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f003 fe29 	bl	8013f4c <USBD_LL_PrepareReceive>
 80102fa:	e03f      	b.n	801037c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	68da      	ldr	r2, [r3, #12]
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	689b      	ldr	r3, [r3, #8]
 8010304:	429a      	cmp	r2, r3
 8010306:	d11c      	bne.n	8010342 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	685a      	ldr	r2, [r3, #4]
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010310:	429a      	cmp	r2, r3
 8010312:	d316      	bcc.n	8010342 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	685a      	ldr	r2, [r3, #4]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801031e:	429a      	cmp	r2, r3
 8010320:	d20f      	bcs.n	8010342 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010322:	2200      	movs	r2, #0
 8010324:	2100      	movs	r1, #0
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f001 f88d 	bl	8011446 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2200      	movs	r2, #0
 8010330:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010334:	2300      	movs	r3, #0
 8010336:	2200      	movs	r2, #0
 8010338:	2100      	movs	r1, #0
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f003 fe06 	bl	8013f4c <USBD_LL_PrepareReceive>
 8010340:	e01c      	b.n	801037c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b03      	cmp	r3, #3
 801034c:	d10f      	bne.n	801036e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d009      	beq.n	801036e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2200      	movs	r2, #0
 801035e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801036e:	2180      	movs	r1, #128	; 0x80
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f003 fd41 	bl	8013df8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f001 f8b7 	bl	80114ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010382:	2b00      	cmp	r3, #0
 8010384:	d03a      	beq.n	80103fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f7ff fe42 	bl	8010010 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2200      	movs	r2, #0
 8010390:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010394:	e032      	b.n	80103fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010396:	7afb      	ldrb	r3, [r7, #11]
 8010398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801039c:	b2db      	uxtb	r3, r3
 801039e:	4619      	mov	r1, r3
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f000 f97f 	bl	80106a4 <USBD_CoreFindEP>
 80103a6:	4603      	mov	r3, r0
 80103a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80103aa:	7dfb      	ldrb	r3, [r7, #23]
 80103ac:	2bff      	cmp	r3, #255	; 0xff
 80103ae:	d025      	beq.n	80103fc <USBD_LL_DataInStage+0x15a>
 80103b0:	7dfb      	ldrb	r3, [r7, #23]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d122      	bne.n	80103fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b03      	cmp	r3, #3
 80103c0:	d11c      	bne.n	80103fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80103c2:	7dfa      	ldrb	r2, [r7, #23]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	32ae      	adds	r2, #174	; 0xae
 80103c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103cc:	695b      	ldr	r3, [r3, #20]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d014      	beq.n	80103fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80103d2:	7dfa      	ldrb	r2, [r7, #23]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80103da:	7dfa      	ldrb	r2, [r7, #23]
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	32ae      	adds	r2, #174	; 0xae
 80103e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103e4:	695b      	ldr	r3, [r3, #20]
 80103e6:	7afa      	ldrb	r2, [r7, #11]
 80103e8:	4611      	mov	r1, r2
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	4798      	blx	r3
 80103ee:	4603      	mov	r3, r0
 80103f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80103f2:	7dbb      	ldrb	r3, [r7, #22]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d001      	beq.n	80103fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80103f8:	7dbb      	ldrb	r3, [r7, #22]
 80103fa:	e000      	b.n	80103fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80103fc:	2300      	movs	r3, #0
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3718      	adds	r7, #24
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b084      	sub	sp, #16
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801040e:	2300      	movs	r3, #0
 8010410:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2201      	movs	r2, #1
 8010416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2200      	movs	r2, #0
 801042c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801043e:	2b00      	cmp	r3, #0
 8010440:	d014      	beq.n	801046c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00e      	beq.n	801046c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	6852      	ldr	r2, [r2, #4]
 801045a:	b2d2      	uxtb	r2, r2
 801045c:	4611      	mov	r1, r2
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	4798      	blx	r3
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d001      	beq.n	801046c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010468:	2303      	movs	r3, #3
 801046a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801046c:	2340      	movs	r3, #64	; 0x40
 801046e:	2200      	movs	r2, #0
 8010470:	2100      	movs	r1, #0
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f003 fc7b 	bl	8013d6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2240      	movs	r2, #64	; 0x40
 8010484:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010488:	2340      	movs	r3, #64	; 0x40
 801048a:	2200      	movs	r2, #0
 801048c:	2180      	movs	r1, #128	; 0x80
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f003 fc6d 	bl	8013d6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2201      	movs	r2, #1
 8010498:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2240      	movs	r2, #64	; 0x40
 801049e:	621a      	str	r2, [r3, #32]

  return ret;
 80104a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
 80104b2:	460b      	mov	r3, r1
 80104b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	78fa      	ldrb	r2, [r7, #3]
 80104ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	370c      	adds	r7, #12
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80104ca:	b480      	push	{r7}
 80104cc:	b083      	sub	sp, #12
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2204      	movs	r2, #4
 80104e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80104e8:	2300      	movs	r3, #0
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	370c      	adds	r7, #12
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80104f6:	b480      	push	{r7}
 80104f8:	b083      	sub	sp, #12
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010504:	b2db      	uxtb	r3, r3
 8010506:	2b04      	cmp	r3, #4
 8010508:	d106      	bne.n	8010518 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010510:	b2da      	uxtb	r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr

08010526 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010534:	b2db      	uxtb	r3, r3
 8010536:	2b03      	cmp	r3, #3
 8010538:	d110      	bne.n	801055c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010540:	2b00      	cmp	r3, #0
 8010542:	d00b      	beq.n	801055c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801054a:	69db      	ldr	r3, [r3, #28]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d005      	beq.n	801055c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010556:	69db      	ldr	r3, [r3, #28]
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801055c:	2300      	movs	r3, #0
}
 801055e:	4618      	mov	r0, r3
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b082      	sub	sp, #8
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
 801056e:	460b      	mov	r3, r1
 8010570:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	32ae      	adds	r2, #174	; 0xae
 801057c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d101      	bne.n	8010588 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010584:	2303      	movs	r3, #3
 8010586:	e01c      	b.n	80105c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801058e:	b2db      	uxtb	r3, r3
 8010590:	2b03      	cmp	r3, #3
 8010592:	d115      	bne.n	80105c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	32ae      	adds	r2, #174	; 0xae
 801059e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105a2:	6a1b      	ldr	r3, [r3, #32]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00b      	beq.n	80105c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	32ae      	adds	r2, #174	; 0xae
 80105b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105b6:	6a1b      	ldr	r3, [r3, #32]
 80105b8:	78fa      	ldrb	r2, [r7, #3]
 80105ba:	4611      	mov	r1, r2
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80105c0:	2300      	movs	r3, #0
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3708      	adds	r7, #8
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b082      	sub	sp, #8
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
 80105d2:	460b      	mov	r3, r1
 80105d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	32ae      	adds	r2, #174	; 0xae
 80105e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d101      	bne.n	80105ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80105e8:	2303      	movs	r3, #3
 80105ea:	e01c      	b.n	8010626 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b03      	cmp	r3, #3
 80105f6:	d115      	bne.n	8010624 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	32ae      	adds	r2, #174	; 0xae
 8010602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00b      	beq.n	8010624 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	32ae      	adds	r2, #174	; 0xae
 8010616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801061c:	78fa      	ldrb	r2, [r7, #3]
 801061e:	4611      	mov	r1, r2
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3708      	adds	r7, #8
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801062e:	b480      	push	{r7}
 8010630:	b083      	sub	sp, #12
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2201      	movs	r2, #1
 8010654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00e      	beq.n	8010680 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	687a      	ldr	r2, [r7, #4]
 801066c:	6852      	ldr	r2, [r2, #4]
 801066e:	b2d2      	uxtb	r2, r2
 8010670:	4611      	mov	r1, r2
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	4798      	blx	r3
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d001      	beq.n	8010680 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801067c:	2303      	movs	r3, #3
 801067e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010680:	7bfb      	ldrb	r3, [r7, #15]
}
 8010682:	4618      	mov	r0, r3
 8010684:	3710      	adds	r7, #16
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801068a:	b480      	push	{r7}
 801068c:	b083      	sub	sp, #12
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
 8010692:	460b      	mov	r3, r1
 8010694:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010696:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010698:	4618      	mov	r0, r3
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	460b      	mov	r3, r1
 80106ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80106b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	370c      	adds	r7, #12
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr

080106be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80106be:	b580      	push	{r7, lr}
 80106c0:	b086      	sub	sp, #24
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
 80106c6:	460b      	mov	r3, r1
 80106c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80106d2:	2300      	movs	r3, #0
 80106d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	885b      	ldrh	r3, [r3, #2]
 80106da:	b29a      	uxth	r2, r3
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d920      	bls.n	8010728 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80106ee:	e013      	b.n	8010718 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80106f0:	f107 030a 	add.w	r3, r7, #10
 80106f4:	4619      	mov	r1, r3
 80106f6:	6978      	ldr	r0, [r7, #20]
 80106f8:	f000 f81b 	bl	8010732 <USBD_GetNextDesc>
 80106fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	785b      	ldrb	r3, [r3, #1]
 8010702:	2b05      	cmp	r3, #5
 8010704:	d108      	bne.n	8010718 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	789b      	ldrb	r3, [r3, #2]
 801070e:	78fa      	ldrb	r2, [r7, #3]
 8010710:	429a      	cmp	r2, r3
 8010712:	d008      	beq.n	8010726 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010714:	2300      	movs	r3, #0
 8010716:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	885b      	ldrh	r3, [r3, #2]
 801071c:	b29a      	uxth	r2, r3
 801071e:	897b      	ldrh	r3, [r7, #10]
 8010720:	429a      	cmp	r2, r3
 8010722:	d8e5      	bhi.n	80106f0 <USBD_GetEpDesc+0x32>
 8010724:	e000      	b.n	8010728 <USBD_GetEpDesc+0x6a>
          break;
 8010726:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010728:	693b      	ldr	r3, [r7, #16]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3718      	adds	r7, #24
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010732:	b480      	push	{r7}
 8010734:	b085      	sub	sp, #20
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
 801073a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	881a      	ldrh	r2, [r3, #0]
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	b29b      	uxth	r3, r3
 801074a:	4413      	add	r3, r2
 801074c:	b29a      	uxth	r2, r3
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	461a      	mov	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4413      	add	r3, r2
 801075c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801075e:	68fb      	ldr	r3, [r7, #12]
}
 8010760:	4618      	mov	r0, r3
 8010762:	3714      	adds	r7, #20
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801076c:	b480      	push	{r7}
 801076e:	b087      	sub	sp, #28
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	3301      	adds	r3, #1
 8010782:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801078a:	8a3b      	ldrh	r3, [r7, #16]
 801078c:	021b      	lsls	r3, r3, #8
 801078e:	b21a      	sxth	r2, r3
 8010790:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010794:	4313      	orrs	r3, r2
 8010796:	b21b      	sxth	r3, r3
 8010798:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801079a:	89fb      	ldrh	r3, [r7, #14]
}
 801079c:	4618      	mov	r0, r3
 801079e:	371c      	adds	r7, #28
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80107be:	2b40      	cmp	r3, #64	; 0x40
 80107c0:	d005      	beq.n	80107ce <USBD_StdDevReq+0x26>
 80107c2:	2b40      	cmp	r3, #64	; 0x40
 80107c4:	d857      	bhi.n	8010876 <USBD_StdDevReq+0xce>
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00f      	beq.n	80107ea <USBD_StdDevReq+0x42>
 80107ca:	2b20      	cmp	r3, #32
 80107cc:	d153      	bne.n	8010876 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	32ae      	adds	r2, #174	; 0xae
 80107d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	4798      	blx	r3
 80107e4:	4603      	mov	r3, r0
 80107e6:	73fb      	strb	r3, [r7, #15]
      break;
 80107e8:	e04a      	b.n	8010880 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	785b      	ldrb	r3, [r3, #1]
 80107ee:	2b09      	cmp	r3, #9
 80107f0:	d83b      	bhi.n	801086a <USBD_StdDevReq+0xc2>
 80107f2:	a201      	add	r2, pc, #4	; (adr r2, 80107f8 <USBD_StdDevReq+0x50>)
 80107f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f8:	0801084d 	.word	0x0801084d
 80107fc:	08010861 	.word	0x08010861
 8010800:	0801086b 	.word	0x0801086b
 8010804:	08010857 	.word	0x08010857
 8010808:	0801086b 	.word	0x0801086b
 801080c:	0801082b 	.word	0x0801082b
 8010810:	08010821 	.word	0x08010821
 8010814:	0801086b 	.word	0x0801086b
 8010818:	08010843 	.word	0x08010843
 801081c:	08010835 	.word	0x08010835
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010820:	6839      	ldr	r1, [r7, #0]
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fa3c 	bl	8010ca0 <USBD_GetDescriptor>
          break;
 8010828:	e024      	b.n	8010874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801082a:	6839      	ldr	r1, [r7, #0]
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 fba1 	bl	8010f74 <USBD_SetAddress>
          break;
 8010832:	e01f      	b.n	8010874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fbe0 	bl	8010ffc <USBD_SetConfig>
 801083c:	4603      	mov	r3, r0
 801083e:	73fb      	strb	r3, [r7, #15]
          break;
 8010840:	e018      	b.n	8010874 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f000 fc83 	bl	8011150 <USBD_GetConfig>
          break;
 801084a:	e013      	b.n	8010874 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801084c:	6839      	ldr	r1, [r7, #0]
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 fcb4 	bl	80111bc <USBD_GetStatus>
          break;
 8010854:	e00e      	b.n	8010874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 fce3 	bl	8011224 <USBD_SetFeature>
          break;
 801085e:	e009      	b.n	8010874 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010860:	6839      	ldr	r1, [r7, #0]
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 fd07 	bl	8011276 <USBD_ClrFeature>
          break;
 8010868:	e004      	b.n	8010874 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 fd5e 	bl	801132e <USBD_CtlError>
          break;
 8010872:	bf00      	nop
      }
      break;
 8010874:	e004      	b.n	8010880 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010876:	6839      	ldr	r1, [r7, #0]
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f000 fd58 	bl	801132e <USBD_CtlError>
      break;
 801087e:	bf00      	nop
  }

  return ret;
 8010880:	7bfb      	ldrb	r3, [r7, #15]
}
 8010882:	4618      	mov	r0, r3
 8010884:	3710      	adds	r7, #16
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop

0801088c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010896:	2300      	movs	r3, #0
 8010898:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80108a2:	2b40      	cmp	r3, #64	; 0x40
 80108a4:	d005      	beq.n	80108b2 <USBD_StdItfReq+0x26>
 80108a6:	2b40      	cmp	r3, #64	; 0x40
 80108a8:	d852      	bhi.n	8010950 <USBD_StdItfReq+0xc4>
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <USBD_StdItfReq+0x26>
 80108ae:	2b20      	cmp	r3, #32
 80108b0:	d14e      	bne.n	8010950 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108b8:	b2db      	uxtb	r3, r3
 80108ba:	3b01      	subs	r3, #1
 80108bc:	2b02      	cmp	r3, #2
 80108be:	d840      	bhi.n	8010942 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	889b      	ldrh	r3, [r3, #4]
 80108c4:	b2db      	uxtb	r3, r3
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d836      	bhi.n	8010938 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	889b      	ldrh	r3, [r3, #4]
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff fed9 	bl	801068a <USBD_CoreFindIF>
 80108d8:	4603      	mov	r3, r0
 80108da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108dc:	7bbb      	ldrb	r3, [r7, #14]
 80108de:	2bff      	cmp	r3, #255	; 0xff
 80108e0:	d01d      	beq.n	801091e <USBD_StdItfReq+0x92>
 80108e2:	7bbb      	ldrb	r3, [r7, #14]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d11a      	bne.n	801091e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80108e8:	7bba      	ldrb	r2, [r7, #14]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	32ae      	adds	r2, #174	; 0xae
 80108ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00f      	beq.n	8010918 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80108f8:	7bba      	ldrb	r2, [r7, #14]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010900:	7bba      	ldrb	r2, [r7, #14]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	32ae      	adds	r2, #174	; 0xae
 8010906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	4798      	blx	r3
 8010912:	4603      	mov	r3, r0
 8010914:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010916:	e004      	b.n	8010922 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010918:	2303      	movs	r3, #3
 801091a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801091c:	e001      	b.n	8010922 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801091e:	2303      	movs	r3, #3
 8010920:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	88db      	ldrh	r3, [r3, #6]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d110      	bne.n	801094c <USBD_StdItfReq+0xc0>
 801092a:	7bfb      	ldrb	r3, [r7, #15]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10d      	bne.n	801094c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 fdc7 	bl	80114c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010936:	e009      	b.n	801094c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010938:	6839      	ldr	r1, [r7, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 fcf7 	bl	801132e <USBD_CtlError>
          break;
 8010940:	e004      	b.n	801094c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010942:	6839      	ldr	r1, [r7, #0]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 fcf2 	bl	801132e <USBD_CtlError>
          break;
 801094a:	e000      	b.n	801094e <USBD_StdItfReq+0xc2>
          break;
 801094c:	bf00      	nop
      }
      break;
 801094e:	e004      	b.n	801095a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010950:	6839      	ldr	r1, [r7, #0]
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 fceb 	bl	801132e <USBD_CtlError>
      break;
 8010958:	bf00      	nop
  }

  return ret;
 801095a:	7bfb      	ldrb	r3, [r7, #15]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3710      	adds	r7, #16
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801096e:	2300      	movs	r3, #0
 8010970:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	889b      	ldrh	r3, [r3, #4]
 8010976:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010980:	2b40      	cmp	r3, #64	; 0x40
 8010982:	d007      	beq.n	8010994 <USBD_StdEPReq+0x30>
 8010984:	2b40      	cmp	r3, #64	; 0x40
 8010986:	f200 817f 	bhi.w	8010c88 <USBD_StdEPReq+0x324>
 801098a:	2b00      	cmp	r3, #0
 801098c:	d02a      	beq.n	80109e4 <USBD_StdEPReq+0x80>
 801098e:	2b20      	cmp	r3, #32
 8010990:	f040 817a 	bne.w	8010c88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010994:	7bbb      	ldrb	r3, [r7, #14]
 8010996:	4619      	mov	r1, r3
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff fe83 	bl	80106a4 <USBD_CoreFindEP>
 801099e:	4603      	mov	r3, r0
 80109a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80109a2:	7b7b      	ldrb	r3, [r7, #13]
 80109a4:	2bff      	cmp	r3, #255	; 0xff
 80109a6:	f000 8174 	beq.w	8010c92 <USBD_StdEPReq+0x32e>
 80109aa:	7b7b      	ldrb	r3, [r7, #13]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	f040 8170 	bne.w	8010c92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80109b2:	7b7a      	ldrb	r2, [r7, #13]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80109ba:	7b7a      	ldrb	r2, [r7, #13]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	32ae      	adds	r2, #174	; 0xae
 80109c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109c4:	689b      	ldr	r3, [r3, #8]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f000 8163 	beq.w	8010c92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80109cc:	7b7a      	ldrb	r2, [r7, #13]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	32ae      	adds	r2, #174	; 0xae
 80109d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	6839      	ldr	r1, [r7, #0]
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	4798      	blx	r3
 80109de:	4603      	mov	r3, r0
 80109e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80109e2:	e156      	b.n	8010c92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	785b      	ldrb	r3, [r3, #1]
 80109e8:	2b03      	cmp	r3, #3
 80109ea:	d008      	beq.n	80109fe <USBD_StdEPReq+0x9a>
 80109ec:	2b03      	cmp	r3, #3
 80109ee:	f300 8145 	bgt.w	8010c7c <USBD_StdEPReq+0x318>
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	f000 809b 	beq.w	8010b2e <USBD_StdEPReq+0x1ca>
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d03c      	beq.n	8010a76 <USBD_StdEPReq+0x112>
 80109fc:	e13e      	b.n	8010c7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	2b02      	cmp	r3, #2
 8010a08:	d002      	beq.n	8010a10 <USBD_StdEPReq+0xac>
 8010a0a:	2b03      	cmp	r3, #3
 8010a0c:	d016      	beq.n	8010a3c <USBD_StdEPReq+0xd8>
 8010a0e:	e02c      	b.n	8010a6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a10:	7bbb      	ldrb	r3, [r7, #14]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00d      	beq.n	8010a32 <USBD_StdEPReq+0xce>
 8010a16:	7bbb      	ldrb	r3, [r7, #14]
 8010a18:	2b80      	cmp	r3, #128	; 0x80
 8010a1a:	d00a      	beq.n	8010a32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a1c:	7bbb      	ldrb	r3, [r7, #14]
 8010a1e:	4619      	mov	r1, r3
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f003 f9e9 	bl	8013df8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a26:	2180      	movs	r1, #128	; 0x80
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f003 f9e5 	bl	8013df8 <USBD_LL_StallEP>
 8010a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a30:	e020      	b.n	8010a74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010a32:	6839      	ldr	r1, [r7, #0]
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 fc7a 	bl	801132e <USBD_CtlError>
              break;
 8010a3a:	e01b      	b.n	8010a74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	885b      	ldrh	r3, [r3, #2]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d10e      	bne.n	8010a62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010a44:	7bbb      	ldrb	r3, [r7, #14]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d00b      	beq.n	8010a62 <USBD_StdEPReq+0xfe>
 8010a4a:	7bbb      	ldrb	r3, [r7, #14]
 8010a4c:	2b80      	cmp	r3, #128	; 0x80
 8010a4e:	d008      	beq.n	8010a62 <USBD_StdEPReq+0xfe>
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	88db      	ldrh	r3, [r3, #6]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d104      	bne.n	8010a62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a58:	7bbb      	ldrb	r3, [r7, #14]
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f003 f9cb 	bl	8013df8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fd2e 	bl	80114c4 <USBD_CtlSendStatus>

              break;
 8010a68:	e004      	b.n	8010a74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010a6a:	6839      	ldr	r1, [r7, #0]
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 fc5e 	bl	801132e <USBD_CtlError>
              break;
 8010a72:	bf00      	nop
          }
          break;
 8010a74:	e107      	b.n	8010c86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	d002      	beq.n	8010a88 <USBD_StdEPReq+0x124>
 8010a82:	2b03      	cmp	r3, #3
 8010a84:	d016      	beq.n	8010ab4 <USBD_StdEPReq+0x150>
 8010a86:	e04b      	b.n	8010b20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a88:	7bbb      	ldrb	r3, [r7, #14]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00d      	beq.n	8010aaa <USBD_StdEPReq+0x146>
 8010a8e:	7bbb      	ldrb	r3, [r7, #14]
 8010a90:	2b80      	cmp	r3, #128	; 0x80
 8010a92:	d00a      	beq.n	8010aaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a94:	7bbb      	ldrb	r3, [r7, #14]
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f003 f9ad 	bl	8013df8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a9e:	2180      	movs	r1, #128	; 0x80
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f003 f9a9 	bl	8013df8 <USBD_LL_StallEP>
 8010aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010aa8:	e040      	b.n	8010b2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010aaa:	6839      	ldr	r1, [r7, #0]
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 fc3e 	bl	801132e <USBD_CtlError>
              break;
 8010ab2:	e03b      	b.n	8010b2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	885b      	ldrh	r3, [r3, #2]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d136      	bne.n	8010b2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010abc:	7bbb      	ldrb	r3, [r7, #14]
 8010abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d004      	beq.n	8010ad0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010ac6:	7bbb      	ldrb	r3, [r7, #14]
 8010ac8:	4619      	mov	r1, r3
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f003 f9b3 	bl	8013e36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f000 fcf7 	bl	80114c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010ad6:	7bbb      	ldrb	r3, [r7, #14]
 8010ad8:	4619      	mov	r1, r3
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f7ff fde2 	bl	80106a4 <USBD_CoreFindEP>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ae4:	7b7b      	ldrb	r3, [r7, #13]
 8010ae6:	2bff      	cmp	r3, #255	; 0xff
 8010ae8:	d01f      	beq.n	8010b2a <USBD_StdEPReq+0x1c6>
 8010aea:	7b7b      	ldrb	r3, [r7, #13]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d11c      	bne.n	8010b2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010af0:	7b7a      	ldrb	r2, [r7, #13]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010af8:	7b7a      	ldrb	r2, [r7, #13]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	32ae      	adds	r2, #174	; 0xae
 8010afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d010      	beq.n	8010b2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010b08:	7b7a      	ldrb	r2, [r7, #13]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	32ae      	adds	r2, #174	; 0xae
 8010b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	6839      	ldr	r1, [r7, #0]
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	4798      	blx	r3
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010b1e:	e004      	b.n	8010b2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010b20:	6839      	ldr	r1, [r7, #0]
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fc03 	bl	801132e <USBD_CtlError>
              break;
 8010b28:	e000      	b.n	8010b2c <USBD_StdEPReq+0x1c8>
              break;
 8010b2a:	bf00      	nop
          }
          break;
 8010b2c:	e0ab      	b.n	8010c86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	2b02      	cmp	r3, #2
 8010b38:	d002      	beq.n	8010b40 <USBD_StdEPReq+0x1dc>
 8010b3a:	2b03      	cmp	r3, #3
 8010b3c:	d032      	beq.n	8010ba4 <USBD_StdEPReq+0x240>
 8010b3e:	e097      	b.n	8010c70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b40:	7bbb      	ldrb	r3, [r7, #14]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d007      	beq.n	8010b56 <USBD_StdEPReq+0x1f2>
 8010b46:	7bbb      	ldrb	r3, [r7, #14]
 8010b48:	2b80      	cmp	r3, #128	; 0x80
 8010b4a:	d004      	beq.n	8010b56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fbed 	bl	801132e <USBD_CtlError>
                break;
 8010b54:	e091      	b.n	8010c7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	da0b      	bge.n	8010b76 <USBD_StdEPReq+0x212>
 8010b5e:	7bbb      	ldrb	r3, [r7, #14]
 8010b60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b64:	4613      	mov	r3, r2
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	3310      	adds	r3, #16
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	4413      	add	r3, r2
 8010b72:	3304      	adds	r3, #4
 8010b74:	e00b      	b.n	8010b8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b76:	7bbb      	ldrb	r3, [r7, #14]
 8010b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	4413      	add	r3, r2
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	3304      	adds	r3, #4
 8010b8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	2200      	movs	r2, #0
 8010b94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	2202      	movs	r2, #2
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f000 fc37 	bl	8011410 <USBD_CtlSendData>
              break;
 8010ba2:	e06a      	b.n	8010c7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	da11      	bge.n	8010bd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010bac:	7bbb      	ldrb	r3, [r7, #14]
 8010bae:	f003 020f 	and.w	r2, r3, #15
 8010bb2:	6879      	ldr	r1, [r7, #4]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	4413      	add	r3, r2
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	440b      	add	r3, r1
 8010bbe:	3324      	adds	r3, #36	; 0x24
 8010bc0:	881b      	ldrh	r3, [r3, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d117      	bne.n	8010bf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010bc6:	6839      	ldr	r1, [r7, #0]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 fbb0 	bl	801132e <USBD_CtlError>
                  break;
 8010bce:	e054      	b.n	8010c7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010bd0:	7bbb      	ldrb	r3, [r7, #14]
 8010bd2:	f003 020f 	and.w	r2, r3, #15
 8010bd6:	6879      	ldr	r1, [r7, #4]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	4413      	add	r3, r2
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	440b      	add	r3, r1
 8010be2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d104      	bne.n	8010bf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010bec:	6839      	ldr	r1, [r7, #0]
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 fb9d 	bl	801132e <USBD_CtlError>
                  break;
 8010bf4:	e041      	b.n	8010c7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	da0b      	bge.n	8010c16 <USBD_StdEPReq+0x2b2>
 8010bfe:	7bbb      	ldrb	r3, [r7, #14]
 8010c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c04:	4613      	mov	r3, r2
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4413      	add	r3, r2
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	3310      	adds	r3, #16
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	4413      	add	r3, r2
 8010c12:	3304      	adds	r3, #4
 8010c14:	e00b      	b.n	8010c2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010c16:	7bbb      	ldrb	r3, [r7, #14]
 8010c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	4413      	add	r3, r2
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010c30:	7bbb      	ldrb	r3, [r7, #14]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d002      	beq.n	8010c3c <USBD_StdEPReq+0x2d8>
 8010c36:	7bbb      	ldrb	r3, [r7, #14]
 8010c38:	2b80      	cmp	r3, #128	; 0x80
 8010c3a:	d103      	bne.n	8010c44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	601a      	str	r2, [r3, #0]
 8010c42:	e00e      	b.n	8010c62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010c44:	7bbb      	ldrb	r3, [r7, #14]
 8010c46:	4619      	mov	r1, r3
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f003 f913 	bl	8013e74 <USBD_LL_IsStallEP>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d003      	beq.n	8010c5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	2201      	movs	r2, #1
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	e002      	b.n	8010c62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	2202      	movs	r2, #2
 8010c66:	4619      	mov	r1, r3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f000 fbd1 	bl	8011410 <USBD_CtlSendData>
              break;
 8010c6e:	e004      	b.n	8010c7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010c70:	6839      	ldr	r1, [r7, #0]
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 fb5b 	bl	801132e <USBD_CtlError>
              break;
 8010c78:	bf00      	nop
          }
          break;
 8010c7a:	e004      	b.n	8010c86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010c7c:	6839      	ldr	r1, [r7, #0]
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 fb55 	bl	801132e <USBD_CtlError>
          break;
 8010c84:	bf00      	nop
      }
      break;
 8010c86:	e005      	b.n	8010c94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010c88:	6839      	ldr	r1, [r7, #0]
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 fb4f 	bl	801132e <USBD_CtlError>
      break;
 8010c90:	e000      	b.n	8010c94 <USBD_StdEPReq+0x330>
      break;
 8010c92:	bf00      	nop
  }

  return ret;
 8010c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
	...

08010ca0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010caa:	2300      	movs	r3, #0
 8010cac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	885b      	ldrh	r3, [r3, #2]
 8010cba:	0a1b      	lsrs	r3, r3, #8
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	3b01      	subs	r3, #1
 8010cc0:	2b06      	cmp	r3, #6
 8010cc2:	f200 8128 	bhi.w	8010f16 <USBD_GetDescriptor+0x276>
 8010cc6:	a201      	add	r2, pc, #4	; (adr r2, 8010ccc <USBD_GetDescriptor+0x2c>)
 8010cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ccc:	08010ce9 	.word	0x08010ce9
 8010cd0:	08010d01 	.word	0x08010d01
 8010cd4:	08010d41 	.word	0x08010d41
 8010cd8:	08010f17 	.word	0x08010f17
 8010cdc:	08010f17 	.word	0x08010f17
 8010ce0:	08010eb7 	.word	0x08010eb7
 8010ce4:	08010ee3 	.word	0x08010ee3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	7c12      	ldrb	r2, [r2, #16]
 8010cf4:	f107 0108 	add.w	r1, r7, #8
 8010cf8:	4610      	mov	r0, r2
 8010cfa:	4798      	blx	r3
 8010cfc:	60f8      	str	r0, [r7, #12]
      break;
 8010cfe:	e112      	b.n	8010f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	7c1b      	ldrb	r3, [r3, #16]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10d      	bne.n	8010d24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d10:	f107 0208 	add.w	r2, r7, #8
 8010d14:	4610      	mov	r0, r2
 8010d16:	4798      	blx	r3
 8010d18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	2202      	movs	r2, #2
 8010d20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010d22:	e100      	b.n	8010f26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2c:	f107 0208 	add.w	r2, r7, #8
 8010d30:	4610      	mov	r0, r2
 8010d32:	4798      	blx	r3
 8010d34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	2202      	movs	r2, #2
 8010d3c:	701a      	strb	r2, [r3, #0]
      break;
 8010d3e:	e0f2      	b.n	8010f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	885b      	ldrh	r3, [r3, #2]
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	2b05      	cmp	r3, #5
 8010d48:	f200 80ac 	bhi.w	8010ea4 <USBD_GetDescriptor+0x204>
 8010d4c:	a201      	add	r2, pc, #4	; (adr r2, 8010d54 <USBD_GetDescriptor+0xb4>)
 8010d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d52:	bf00      	nop
 8010d54:	08010d6d 	.word	0x08010d6d
 8010d58:	08010da1 	.word	0x08010da1
 8010d5c:	08010dd5 	.word	0x08010dd5
 8010d60:	08010e09 	.word	0x08010e09
 8010d64:	08010e3d 	.word	0x08010e3d
 8010d68:	08010e71 	.word	0x08010e71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d00b      	beq.n	8010d90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	7c12      	ldrb	r2, [r2, #16]
 8010d84:	f107 0108 	add.w	r1, r7, #8
 8010d88:	4610      	mov	r0, r2
 8010d8a:	4798      	blx	r3
 8010d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d8e:	e091      	b.n	8010eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010d90:	6839      	ldr	r1, [r7, #0]
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 facb 	bl	801132e <USBD_CtlError>
            err++;
 8010d98:	7afb      	ldrb	r3, [r7, #11]
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8010d9e:	e089      	b.n	8010eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d00b      	beq.n	8010dc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010db2:	689b      	ldr	r3, [r3, #8]
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	7c12      	ldrb	r2, [r2, #16]
 8010db8:	f107 0108 	add.w	r1, r7, #8
 8010dbc:	4610      	mov	r0, r2
 8010dbe:	4798      	blx	r3
 8010dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010dc2:	e077      	b.n	8010eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010dc4:	6839      	ldr	r1, [r7, #0]
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 fab1 	bl	801132e <USBD_CtlError>
            err++;
 8010dcc:	7afb      	ldrb	r3, [r7, #11]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8010dd2:	e06f      	b.n	8010eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00b      	beq.n	8010df8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010de6:	68db      	ldr	r3, [r3, #12]
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	7c12      	ldrb	r2, [r2, #16]
 8010dec:	f107 0108 	add.w	r1, r7, #8
 8010df0:	4610      	mov	r0, r2
 8010df2:	4798      	blx	r3
 8010df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010df6:	e05d      	b.n	8010eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010df8:	6839      	ldr	r1, [r7, #0]
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 fa97 	bl	801132e <USBD_CtlError>
            err++;
 8010e00:	7afb      	ldrb	r3, [r7, #11]
 8010e02:	3301      	adds	r3, #1
 8010e04:	72fb      	strb	r3, [r7, #11]
          break;
 8010e06:	e055      	b.n	8010eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00b      	beq.n	8010e2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e1a:	691b      	ldr	r3, [r3, #16]
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	7c12      	ldrb	r2, [r2, #16]
 8010e20:	f107 0108 	add.w	r1, r7, #8
 8010e24:	4610      	mov	r0, r2
 8010e26:	4798      	blx	r3
 8010e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e2a:	e043      	b.n	8010eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010e2c:	6839      	ldr	r1, [r7, #0]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 fa7d 	bl	801132e <USBD_CtlError>
            err++;
 8010e34:	7afb      	ldrb	r3, [r7, #11]
 8010e36:	3301      	adds	r3, #1
 8010e38:	72fb      	strb	r3, [r7, #11]
          break;
 8010e3a:	e03b      	b.n	8010eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e42:	695b      	ldr	r3, [r3, #20]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d00b      	beq.n	8010e60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e4e:	695b      	ldr	r3, [r3, #20]
 8010e50:	687a      	ldr	r2, [r7, #4]
 8010e52:	7c12      	ldrb	r2, [r2, #16]
 8010e54:	f107 0108 	add.w	r1, r7, #8
 8010e58:	4610      	mov	r0, r2
 8010e5a:	4798      	blx	r3
 8010e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e5e:	e029      	b.n	8010eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010e60:	6839      	ldr	r1, [r7, #0]
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f000 fa63 	bl	801132e <USBD_CtlError>
            err++;
 8010e68:	7afb      	ldrb	r3, [r7, #11]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8010e6e:	e021      	b.n	8010eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e76:	699b      	ldr	r3, [r3, #24]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00b      	beq.n	8010e94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e82:	699b      	ldr	r3, [r3, #24]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	7c12      	ldrb	r2, [r2, #16]
 8010e88:	f107 0108 	add.w	r1, r7, #8
 8010e8c:	4610      	mov	r0, r2
 8010e8e:	4798      	blx	r3
 8010e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e92:	e00f      	b.n	8010eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f000 fa49 	bl	801132e <USBD_CtlError>
            err++;
 8010e9c:	7afb      	ldrb	r3, [r7, #11]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8010ea2:	e007      	b.n	8010eb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010ea4:	6839      	ldr	r1, [r7, #0]
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f000 fa41 	bl	801132e <USBD_CtlError>
          err++;
 8010eac:	7afb      	ldrb	r3, [r7, #11]
 8010eae:	3301      	adds	r3, #1
 8010eb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010eb2:	bf00      	nop
      }
      break;
 8010eb4:	e037      	b.n	8010f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	7c1b      	ldrb	r3, [r3, #16]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d109      	bne.n	8010ed2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ec6:	f107 0208 	add.w	r2, r7, #8
 8010eca:	4610      	mov	r0, r2
 8010ecc:	4798      	blx	r3
 8010ece:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ed0:	e029      	b.n	8010f26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010ed2:	6839      	ldr	r1, [r7, #0]
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f000 fa2a 	bl	801132e <USBD_CtlError>
        err++;
 8010eda:	7afb      	ldrb	r3, [r7, #11]
 8010edc:	3301      	adds	r3, #1
 8010ede:	72fb      	strb	r3, [r7, #11]
      break;
 8010ee0:	e021      	b.n	8010f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	7c1b      	ldrb	r3, [r3, #16]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d10d      	bne.n	8010f06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ef2:	f107 0208 	add.w	r2, r7, #8
 8010ef6:	4610      	mov	r0, r2
 8010ef8:	4798      	blx	r3
 8010efa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	3301      	adds	r3, #1
 8010f00:	2207      	movs	r2, #7
 8010f02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f04:	e00f      	b.n	8010f26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010f06:	6839      	ldr	r1, [r7, #0]
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f000 fa10 	bl	801132e <USBD_CtlError>
        err++;
 8010f0e:	7afb      	ldrb	r3, [r7, #11]
 8010f10:	3301      	adds	r3, #1
 8010f12:	72fb      	strb	r3, [r7, #11]
      break;
 8010f14:	e007      	b.n	8010f26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010f16:	6839      	ldr	r1, [r7, #0]
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 fa08 	bl	801132e <USBD_CtlError>
      err++;
 8010f1e:	7afb      	ldrb	r3, [r7, #11]
 8010f20:	3301      	adds	r3, #1
 8010f22:	72fb      	strb	r3, [r7, #11]
      break;
 8010f24:	bf00      	nop
  }

  if (err != 0U)
 8010f26:	7afb      	ldrb	r3, [r7, #11]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d11e      	bne.n	8010f6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	88db      	ldrh	r3, [r3, #6]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d016      	beq.n	8010f62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010f34:	893b      	ldrh	r3, [r7, #8]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d00e      	beq.n	8010f58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	88da      	ldrh	r2, [r3, #6]
 8010f3e:	893b      	ldrh	r3, [r7, #8]
 8010f40:	4293      	cmp	r3, r2
 8010f42:	bf28      	it	cs
 8010f44:	4613      	movcs	r3, r2
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010f4a:	893b      	ldrh	r3, [r7, #8]
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	68f9      	ldr	r1, [r7, #12]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 fa5d 	bl	8011410 <USBD_CtlSendData>
 8010f56:	e009      	b.n	8010f6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010f58:	6839      	ldr	r1, [r7, #0]
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 f9e7 	bl	801132e <USBD_CtlError>
 8010f60:	e004      	b.n	8010f6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f000 faae 	bl	80114c4 <USBD_CtlSendStatus>
 8010f68:	e000      	b.n	8010f6c <USBD_GetDescriptor+0x2cc>
    return;
 8010f6a:	bf00      	nop
  }
}
 8010f6c:	3710      	adds	r7, #16
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop

08010f74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	889b      	ldrh	r3, [r3, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d131      	bne.n	8010fea <USBD_SetAddress+0x76>
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	88db      	ldrh	r3, [r3, #6]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d12d      	bne.n	8010fea <USBD_SetAddress+0x76>
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	885b      	ldrh	r3, [r3, #2]
 8010f92:	2b7f      	cmp	r3, #127	; 0x7f
 8010f94:	d829      	bhi.n	8010fea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	885b      	ldrh	r3, [r3, #2]
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fa8:	b2db      	uxtb	r3, r3
 8010faa:	2b03      	cmp	r3, #3
 8010fac:	d104      	bne.n	8010fb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010fae:	6839      	ldr	r1, [r7, #0]
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f000 f9bc 	bl	801132e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fb6:	e01d      	b.n	8010ff4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	7bfa      	ldrb	r2, [r7, #15]
 8010fbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f002 ff81 	bl	8013ecc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 fa7a 	bl	80114c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010fd0:	7bfb      	ldrb	r3, [r7, #15]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d004      	beq.n	8010fe0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2202      	movs	r2, #2
 8010fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fde:	e009      	b.n	8010ff4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fe8:	e004      	b.n	8010ff4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010fea:	6839      	ldr	r1, [r7, #0]
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 f99e 	bl	801132e <USBD_CtlError>
  }
}
 8010ff2:	bf00      	nop
 8010ff4:	bf00      	nop
 8010ff6:	3710      	adds	r7, #16
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011006:	2300      	movs	r3, #0
 8011008:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	885b      	ldrh	r3, [r3, #2]
 801100e:	b2da      	uxtb	r2, r3
 8011010:	4b4e      	ldr	r3, [pc, #312]	; (801114c <USBD_SetConfig+0x150>)
 8011012:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011014:	4b4d      	ldr	r3, [pc, #308]	; (801114c <USBD_SetConfig+0x150>)
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	2b01      	cmp	r3, #1
 801101a:	d905      	bls.n	8011028 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801101c:	6839      	ldr	r1, [r7, #0]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 f985 	bl	801132e <USBD_CtlError>
    return USBD_FAIL;
 8011024:	2303      	movs	r3, #3
 8011026:	e08c      	b.n	8011142 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801102e:	b2db      	uxtb	r3, r3
 8011030:	2b02      	cmp	r3, #2
 8011032:	d002      	beq.n	801103a <USBD_SetConfig+0x3e>
 8011034:	2b03      	cmp	r3, #3
 8011036:	d029      	beq.n	801108c <USBD_SetConfig+0x90>
 8011038:	e075      	b.n	8011126 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801103a:	4b44      	ldr	r3, [pc, #272]	; (801114c <USBD_SetConfig+0x150>)
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d020      	beq.n	8011084 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011042:	4b42      	ldr	r3, [pc, #264]	; (801114c <USBD_SetConfig+0x150>)
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	461a      	mov	r2, r3
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801104c:	4b3f      	ldr	r3, [pc, #252]	; (801114c <USBD_SetConfig+0x150>)
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	4619      	mov	r1, r3
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7fe ffe7 	bl	8010026 <USBD_SetClassConfig>
 8011058:	4603      	mov	r3, r0
 801105a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801105c:	7bfb      	ldrb	r3, [r7, #15]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d008      	beq.n	8011074 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f962 	bl	801132e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2202      	movs	r2, #2
 801106e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011072:	e065      	b.n	8011140 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 fa25 	bl	80114c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2203      	movs	r2, #3
 801107e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011082:	e05d      	b.n	8011140 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 fa1d 	bl	80114c4 <USBD_CtlSendStatus>
      break;
 801108a:	e059      	b.n	8011140 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801108c:	4b2f      	ldr	r3, [pc, #188]	; (801114c <USBD_SetConfig+0x150>)
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d112      	bne.n	80110ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2202      	movs	r2, #2
 8011098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801109c:	4b2b      	ldr	r3, [pc, #172]	; (801114c <USBD_SetConfig+0x150>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	461a      	mov	r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80110a6:	4b29      	ldr	r3, [pc, #164]	; (801114c <USBD_SetConfig+0x150>)
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	4619      	mov	r1, r3
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f7fe ffd6 	bl	801005e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fa06 	bl	80114c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80110b8:	e042      	b.n	8011140 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80110ba:	4b24      	ldr	r3, [pc, #144]	; (801114c <USBD_SetConfig+0x150>)
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	461a      	mov	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d02a      	beq.n	801111e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	4619      	mov	r1, r3
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f7fe ffc4 	bl	801005e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80110d6:	4b1d      	ldr	r3, [pc, #116]	; (801114c <USBD_SetConfig+0x150>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	461a      	mov	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80110e0:	4b1a      	ldr	r3, [pc, #104]	; (801114c <USBD_SetConfig+0x150>)
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	4619      	mov	r1, r3
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7fe ff9d 	bl	8010026 <USBD_SetClassConfig>
 80110ec:	4603      	mov	r3, r0
 80110ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80110f0:	7bfb      	ldrb	r3, [r7, #15]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d00f      	beq.n	8011116 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80110f6:	6839      	ldr	r1, [r7, #0]
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f918 	bl	801132e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	b2db      	uxtb	r3, r3
 8011104:	4619      	mov	r1, r3
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7fe ffa9 	bl	801005e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2202      	movs	r2, #2
 8011110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011114:	e014      	b.n	8011140 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f000 f9d4 	bl	80114c4 <USBD_CtlSendStatus>
      break;
 801111c:	e010      	b.n	8011140 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 f9d0 	bl	80114c4 <USBD_CtlSendStatus>
      break;
 8011124:	e00c      	b.n	8011140 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 f900 	bl	801132e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801112e:	4b07      	ldr	r3, [pc, #28]	; (801114c <USBD_SetConfig+0x150>)
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	4619      	mov	r1, r3
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f7fe ff92 	bl	801005e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801113a:	2303      	movs	r3, #3
 801113c:	73fb      	strb	r3, [r7, #15]
      break;
 801113e:	bf00      	nop
  }

  return ret;
 8011140:	7bfb      	ldrb	r3, [r7, #15]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	20001318 	.word	0x20001318

08011150 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	88db      	ldrh	r3, [r3, #6]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d004      	beq.n	801116c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011162:	6839      	ldr	r1, [r7, #0]
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 f8e2 	bl	801132e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801116a:	e023      	b.n	80111b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011172:	b2db      	uxtb	r3, r3
 8011174:	2b02      	cmp	r3, #2
 8011176:	dc02      	bgt.n	801117e <USBD_GetConfig+0x2e>
 8011178:	2b00      	cmp	r3, #0
 801117a:	dc03      	bgt.n	8011184 <USBD_GetConfig+0x34>
 801117c:	e015      	b.n	80111aa <USBD_GetConfig+0x5a>
 801117e:	2b03      	cmp	r3, #3
 8011180:	d00b      	beq.n	801119a <USBD_GetConfig+0x4a>
 8011182:	e012      	b.n	80111aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2200      	movs	r2, #0
 8011188:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	3308      	adds	r3, #8
 801118e:	2201      	movs	r2, #1
 8011190:	4619      	mov	r1, r3
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 f93c 	bl	8011410 <USBD_CtlSendData>
        break;
 8011198:	e00c      	b.n	80111b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	3304      	adds	r3, #4
 801119e:	2201      	movs	r2, #1
 80111a0:	4619      	mov	r1, r3
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f000 f934 	bl	8011410 <USBD_CtlSendData>
        break;
 80111a8:	e004      	b.n	80111b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80111aa:	6839      	ldr	r1, [r7, #0]
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 f8be 	bl	801132e <USBD_CtlError>
        break;
 80111b2:	bf00      	nop
}
 80111b4:	bf00      	nop
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	3b01      	subs	r3, #1
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	d81e      	bhi.n	8011212 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	88db      	ldrh	r3, [r3, #6]
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d004      	beq.n	80111e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80111dc:	6839      	ldr	r1, [r7, #0]
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 f8a5 	bl	801132e <USBD_CtlError>
        break;
 80111e4:	e01a      	b.n	801121c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2201      	movs	r2, #1
 80111ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d005      	beq.n	8011202 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	68db      	ldr	r3, [r3, #12]
 80111fa:	f043 0202 	orr.w	r2, r3, #2
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	330c      	adds	r3, #12
 8011206:	2202      	movs	r2, #2
 8011208:	4619      	mov	r1, r3
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 f900 	bl	8011410 <USBD_CtlSendData>
      break;
 8011210:	e004      	b.n	801121c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011212:	6839      	ldr	r1, [r7, #0]
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 f88a 	bl	801132e <USBD_CtlError>
      break;
 801121a:	bf00      	nop
  }
}
 801121c:	bf00      	nop
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	885b      	ldrh	r3, [r3, #2]
 8011232:	2b01      	cmp	r3, #1
 8011234:	d107      	bne.n	8011246 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2201      	movs	r2, #1
 801123a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 f940 	bl	80114c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011244:	e013      	b.n	801126e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	885b      	ldrh	r3, [r3, #2]
 801124a:	2b02      	cmp	r3, #2
 801124c:	d10b      	bne.n	8011266 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	889b      	ldrh	r3, [r3, #4]
 8011252:	0a1b      	lsrs	r3, r3, #8
 8011254:	b29b      	uxth	r3, r3
 8011256:	b2da      	uxtb	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 f930 	bl	80114c4 <USBD_CtlSendStatus>
}
 8011264:	e003      	b.n	801126e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011266:	6839      	ldr	r1, [r7, #0]
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f000 f860 	bl	801132e <USBD_CtlError>
}
 801126e:	bf00      	nop
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}

08011276 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011276:	b580      	push	{r7, lr}
 8011278:	b082      	sub	sp, #8
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011286:	b2db      	uxtb	r3, r3
 8011288:	3b01      	subs	r3, #1
 801128a:	2b02      	cmp	r3, #2
 801128c:	d80b      	bhi.n	80112a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	885b      	ldrh	r3, [r3, #2]
 8011292:	2b01      	cmp	r3, #1
 8011294:	d10c      	bne.n	80112b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2200      	movs	r2, #0
 801129a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 f910 	bl	80114c4 <USBD_CtlSendStatus>
      }
      break;
 80112a4:	e004      	b.n	80112b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80112a6:	6839      	ldr	r1, [r7, #0]
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f000 f840 	bl	801132e <USBD_CtlError>
      break;
 80112ae:	e000      	b.n	80112b2 <USBD_ClrFeature+0x3c>
      break;
 80112b0:	bf00      	nop
  }
}
 80112b2:	bf00      	nop
 80112b4:	3708      	adds	r7, #8
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b084      	sub	sp, #16
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
 80112c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	781a      	ldrb	r2, [r3, #0]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	3301      	adds	r3, #1
 80112d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	781a      	ldrb	r2, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	3301      	adds	r3, #1
 80112e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80112e4:	68f8      	ldr	r0, [r7, #12]
 80112e6:	f7ff fa41 	bl	801076c <SWAPBYTE>
 80112ea:	4603      	mov	r3, r0
 80112ec:	461a      	mov	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	3301      	adds	r3, #1
 80112f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	3301      	adds	r3, #1
 80112fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f7ff fa34 	bl	801076c <SWAPBYTE>
 8011304:	4603      	mov	r3, r0
 8011306:	461a      	mov	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	3301      	adds	r3, #1
 8011310:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	3301      	adds	r3, #1
 8011316:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011318:	68f8      	ldr	r0, [r7, #12]
 801131a:	f7ff fa27 	bl	801076c <SWAPBYTE>
 801131e:	4603      	mov	r3, r0
 8011320:	461a      	mov	r2, r3
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	80da      	strh	r2, [r3, #6]
}
 8011326:	bf00      	nop
 8011328:	3710      	adds	r7, #16
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801132e:	b580      	push	{r7, lr}
 8011330:	b082      	sub	sp, #8
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
 8011336:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011338:	2180      	movs	r1, #128	; 0x80
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f002 fd5c 	bl	8013df8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011340:	2100      	movs	r1, #0
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f002 fd58 	bl	8013df8 <USBD_LL_StallEP>
}
 8011348:	bf00      	nop
 801134a:	3708      	adds	r7, #8
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801135c:	2300      	movs	r3, #0
 801135e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d036      	beq.n	80113d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801136a:	6938      	ldr	r0, [r7, #16]
 801136c:	f000 f836 	bl	80113dc <USBD_GetLen>
 8011370:	4603      	mov	r3, r0
 8011372:	3301      	adds	r3, #1
 8011374:	b29b      	uxth	r3, r3
 8011376:	005b      	lsls	r3, r3, #1
 8011378:	b29a      	uxth	r2, r3
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801137e:	7dfb      	ldrb	r3, [r7, #23]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	4413      	add	r3, r2
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	7812      	ldrb	r2, [r2, #0]
 8011388:	701a      	strb	r2, [r3, #0]
  idx++;
 801138a:	7dfb      	ldrb	r3, [r7, #23]
 801138c:	3301      	adds	r3, #1
 801138e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011390:	7dfb      	ldrb	r3, [r7, #23]
 8011392:	68ba      	ldr	r2, [r7, #8]
 8011394:	4413      	add	r3, r2
 8011396:	2203      	movs	r2, #3
 8011398:	701a      	strb	r2, [r3, #0]
  idx++;
 801139a:	7dfb      	ldrb	r3, [r7, #23]
 801139c:	3301      	adds	r3, #1
 801139e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80113a0:	e013      	b.n	80113ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80113a2:	7dfb      	ldrb	r3, [r7, #23]
 80113a4:	68ba      	ldr	r2, [r7, #8]
 80113a6:	4413      	add	r3, r2
 80113a8:	693a      	ldr	r2, [r7, #16]
 80113aa:	7812      	ldrb	r2, [r2, #0]
 80113ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	3301      	adds	r3, #1
 80113b2:	613b      	str	r3, [r7, #16]
    idx++;
 80113b4:	7dfb      	ldrb	r3, [r7, #23]
 80113b6:	3301      	adds	r3, #1
 80113b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80113ba:	7dfb      	ldrb	r3, [r7, #23]
 80113bc:	68ba      	ldr	r2, [r7, #8]
 80113be:	4413      	add	r3, r2
 80113c0:	2200      	movs	r2, #0
 80113c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80113c4:	7dfb      	ldrb	r3, [r7, #23]
 80113c6:	3301      	adds	r3, #1
 80113c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d1e7      	bne.n	80113a2 <USBD_GetString+0x52>
 80113d2:	e000      	b.n	80113d6 <USBD_GetString+0x86>
    return;
 80113d4:	bf00      	nop
  }
}
 80113d6:	3718      	adds	r7, #24
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80113dc:	b480      	push	{r7}
 80113de:	b085      	sub	sp, #20
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80113e4:	2300      	movs	r3, #0
 80113e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80113ec:	e005      	b.n	80113fa <USBD_GetLen+0x1e>
  {
    len++;
 80113ee:	7bfb      	ldrb	r3, [r7, #15]
 80113f0:	3301      	adds	r3, #1
 80113f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	3301      	adds	r3, #1
 80113f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1f5      	bne.n	80113ee <USBD_GetLen+0x12>
  }

  return len;
 8011402:	7bfb      	ldrb	r3, [r7, #15]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3714      	adds	r7, #20
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr

08011410 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	60b9      	str	r1, [r7, #8]
 801141a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2202      	movs	r2, #2
 8011420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	687a      	ldr	r2, [r7, #4]
 801142e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	68ba      	ldr	r2, [r7, #8]
 8011434:	2100      	movs	r1, #0
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f002 fd67 	bl	8013f0a <USBD_LL_Transmit>

  return USBD_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b084      	sub	sp, #16
 801144a:	af00      	add	r7, sp, #0
 801144c:	60f8      	str	r0, [r7, #12]
 801144e:	60b9      	str	r1, [r7, #8]
 8011450:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68ba      	ldr	r2, [r7, #8]
 8011456:	2100      	movs	r1, #0
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f002 fd56 	bl	8013f0a <USBD_LL_Transmit>

  return USBD_OK;
 801145e:	2300      	movs	r3, #0
}
 8011460:	4618      	mov	r0, r3
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2203      	movs	r2, #3
 8011478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	68ba      	ldr	r2, [r7, #8]
 8011490:	2100      	movs	r1, #0
 8011492:	68f8      	ldr	r0, [r7, #12]
 8011494:	f002 fd5a 	bl	8013f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011498:	2300      	movs	r3, #0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3710      	adds	r7, #16
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b084      	sub	sp, #16
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	60f8      	str	r0, [r7, #12]
 80114aa:	60b9      	str	r1, [r7, #8]
 80114ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	68ba      	ldr	r2, [r7, #8]
 80114b2:	2100      	movs	r1, #0
 80114b4:	68f8      	ldr	r0, [r7, #12]
 80114b6:	f002 fd49 	bl	8013f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80114ba:	2300      	movs	r3, #0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3710      	adds	r7, #16
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2204      	movs	r2, #4
 80114d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80114d4:	2300      	movs	r3, #0
 80114d6:	2200      	movs	r2, #0
 80114d8:	2100      	movs	r1, #0
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f002 fd15 	bl	8013f0a <USBD_LL_Transmit>

  return USBD_OK;
 80114e0:	2300      	movs	r3, #0
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3708      	adds	r7, #8
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80114ea:	b580      	push	{r7, lr}
 80114ec:	b082      	sub	sp, #8
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2205      	movs	r2, #5
 80114f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114fa:	2300      	movs	r3, #0
 80114fc:	2200      	movs	r2, #0
 80114fe:	2100      	movs	r1, #0
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f002 fd23 	bl	8013f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011510:	b480      	push	{r7}
 8011512:	b085      	sub	sp, #20
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801151a:	2300      	movs	r3, #0
 801151c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801151e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011522:	2b84      	cmp	r3, #132	; 0x84
 8011524:	d005      	beq.n	8011532 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011526:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	4413      	add	r3, r2
 801152e:	3303      	adds	r3, #3
 8011530:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011532:	68fb      	ldr	r3, [r7, #12]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3714      	adds	r7, #20
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011544:	f000 fec4 	bl	80122d0 <vTaskStartScheduler>
  
  return osOK;
 8011548:	2300      	movs	r3, #0
}
 801154a:	4618      	mov	r0, r3
 801154c:	bd80      	pop	{r7, pc}

0801154e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801154e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011550:	b089      	sub	sp, #36	; 0x24
 8011552:	af04      	add	r7, sp, #16
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	695b      	ldr	r3, [r3, #20]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d020      	beq.n	80115a2 <osThreadCreate+0x54>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	699b      	ldr	r3, [r3, #24]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d01c      	beq.n	80115a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	685c      	ldr	r4, [r3, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	691e      	ldr	r6, [r3, #16]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801157a:	4618      	mov	r0, r3
 801157c:	f7ff ffc8 	bl	8011510 <makeFreeRtosPriority>
 8011580:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	695b      	ldr	r3, [r3, #20]
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801158a:	9202      	str	r2, [sp, #8]
 801158c:	9301      	str	r3, [sp, #4]
 801158e:	9100      	str	r1, [sp, #0]
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	4632      	mov	r2, r6
 8011594:	4629      	mov	r1, r5
 8011596:	4620      	mov	r0, r4
 8011598:	f000 fcbc 	bl	8011f14 <xTaskCreateStatic>
 801159c:	4603      	mov	r3, r0
 801159e:	60fb      	str	r3, [r7, #12]
 80115a0:	e01c      	b.n	80115dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	685c      	ldr	r4, [r3, #4]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7ff ffaa 	bl	8011510 <makeFreeRtosPriority>
 80115bc:	4602      	mov	r2, r0
 80115be:	f107 030c 	add.w	r3, r7, #12
 80115c2:	9301      	str	r3, [sp, #4]
 80115c4:	9200      	str	r2, [sp, #0]
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	4632      	mov	r2, r6
 80115ca:	4629      	mov	r1, r5
 80115cc:	4620      	mov	r0, r4
 80115ce:	f000 fcfe 	bl	8011fce <xTaskCreate>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d001      	beq.n	80115dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80115d8:	2300      	movs	r3, #0
 80115da:	e000      	b.n	80115de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80115dc:	68fb      	ldr	r3, [r7, #12]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3714      	adds	r7, #20
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80115e6:	b580      	push	{r7, lr}
 80115e8:	b084      	sub	sp, #16
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d001      	beq.n	80115fc <osDelay+0x16>
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	e000      	b.n	80115fe <osDelay+0x18>
 80115fc:	2301      	movs	r3, #1
 80115fe:	4618      	mov	r0, r3
 8011600:	f000 fe32 	bl	8012268 <vTaskDelay>
  
  return osOK;
 8011604:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011606:	4618      	mov	r0, r3
 8011608:	3710      	adds	r7, #16
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}

0801160e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801160e:	b480      	push	{r7}
 8011610:	b083      	sub	sp, #12
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f103 0208 	add.w	r2, r3, #8
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f04f 32ff 	mov.w	r2, #4294967295
 8011626:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f103 0208 	add.w	r2, r3, #8
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f103 0208 	add.w	r2, r3, #8
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2200      	movs	r2, #0
 8011640:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011642:	bf00      	nop
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr

0801164e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801164e:	b480      	push	{r7}
 8011650:	b083      	sub	sp, #12
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2200      	movs	r2, #0
 801165a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801165c:	bf00      	nop
 801165e:	370c      	adds	r7, #12
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011668:	b480      	push	{r7}
 801166a:	b085      	sub	sp, #20
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	689a      	ldr	r2, [r3, #8]
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	683a      	ldr	r2, [r7, #0]
 801168c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	683a      	ldr	r2, [r7, #0]
 8011692:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	1c5a      	adds	r2, r3, #1
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	601a      	str	r2, [r3, #0]
}
 80116a4:	bf00      	nop
 80116a6:	3714      	adds	r7, #20
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr

080116b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116b0:	b480      	push	{r7}
 80116b2:	b085      	sub	sp, #20
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c6:	d103      	bne.n	80116d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	60fb      	str	r3, [r7, #12]
 80116ce:	e00c      	b.n	80116ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	3308      	adds	r3, #8
 80116d4:	60fb      	str	r3, [r7, #12]
 80116d6:	e002      	b.n	80116de <vListInsert+0x2e>
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	60fb      	str	r3, [r7, #12]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d2f6      	bcs.n	80116d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	685a      	ldr	r2, [r3, #4]
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	683a      	ldr	r2, [r7, #0]
 80116f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	683a      	ldr	r2, [r7, #0]
 8011704:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	1c5a      	adds	r2, r3, #1
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	601a      	str	r2, [r3, #0]
}
 8011716:	bf00      	nop
 8011718:	3714      	adds	r7, #20
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011722:	b480      	push	{r7}
 8011724:	b085      	sub	sp, #20
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	687a      	ldr	r2, [r7, #4]
 8011736:	6892      	ldr	r2, [r2, #8]
 8011738:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	6852      	ldr	r2, [r2, #4]
 8011742:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	687a      	ldr	r2, [r7, #4]
 801174a:	429a      	cmp	r2, r3
 801174c:	d103      	bne.n	8011756 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	689a      	ldr	r2, [r3, #8]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2200      	movs	r2, #0
 801175a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	1e5a      	subs	r2, r3, #1
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
}
 801176a:	4618      	mov	r0, r3
 801176c:	3714      	adds	r7, #20
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr
	...

08011778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d10a      	bne.n	80117a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801178c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011790:	f383 8811 	msr	BASEPRI, r3
 8011794:	f3bf 8f6f 	isb	sy
 8011798:	f3bf 8f4f 	dsb	sy
 801179c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801179e:	bf00      	nop
 80117a0:	e7fe      	b.n	80117a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80117a2:	f001 fcf7 	bl	8013194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681a      	ldr	r2, [r3, #0]
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117ae:	68f9      	ldr	r1, [r7, #12]
 80117b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80117b2:	fb01 f303 	mul.w	r3, r1, r3
 80117b6:	441a      	add	r2, r3
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2200      	movs	r2, #0
 80117c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117d2:	3b01      	subs	r3, #1
 80117d4:	68f9      	ldr	r1, [r7, #12]
 80117d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80117d8:	fb01 f303 	mul.w	r3, r1, r3
 80117dc:	441a      	add	r2, r3
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	22ff      	movs	r2, #255	; 0xff
 80117e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	22ff      	movs	r2, #255	; 0xff
 80117ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d114      	bne.n	8011822 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	691b      	ldr	r3, [r3, #16]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d01a      	beq.n	8011836 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	3310      	adds	r3, #16
 8011804:	4618      	mov	r0, r3
 8011806:	f000 ffb5 	bl	8012774 <xTaskRemoveFromEventList>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d012      	beq.n	8011836 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011810:	4b0c      	ldr	r3, [pc, #48]	; (8011844 <xQueueGenericReset+0xcc>)
 8011812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011816:	601a      	str	r2, [r3, #0]
 8011818:	f3bf 8f4f 	dsb	sy
 801181c:	f3bf 8f6f 	isb	sy
 8011820:	e009      	b.n	8011836 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	3310      	adds	r3, #16
 8011826:	4618      	mov	r0, r3
 8011828:	f7ff fef1 	bl	801160e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	3324      	adds	r3, #36	; 0x24
 8011830:	4618      	mov	r0, r3
 8011832:	f7ff feec 	bl	801160e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011836:	f001 fcdd 	bl	80131f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801183a:	2301      	movs	r3, #1
}
 801183c:	4618      	mov	r0, r3
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	e000ed04 	.word	0xe000ed04

08011848 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011848:	b580      	push	{r7, lr}
 801184a:	b08a      	sub	sp, #40	; 0x28
 801184c:	af02      	add	r7, sp, #8
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	4613      	mov	r3, r2
 8011854:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d10a      	bne.n	8011872 <xQueueGenericCreate+0x2a>
	__asm volatile
 801185c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011860:	f383 8811 	msr	BASEPRI, r3
 8011864:	f3bf 8f6f 	isb	sy
 8011868:	f3bf 8f4f 	dsb	sy
 801186c:	613b      	str	r3, [r7, #16]
}
 801186e:	bf00      	nop
 8011870:	e7fe      	b.n	8011870 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	fb02 f303 	mul.w	r3, r2, r3
 801187a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	3348      	adds	r3, #72	; 0x48
 8011880:	4618      	mov	r0, r3
 8011882:	f001 fd69 	bl	8013358 <pvPortMalloc>
 8011886:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d011      	beq.n	80118b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801188e:	69bb      	ldr	r3, [r7, #24]
 8011890:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	3348      	adds	r3, #72	; 0x48
 8011896:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	2200      	movs	r2, #0
 801189c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80118a0:	79fa      	ldrb	r2, [r7, #7]
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	9300      	str	r3, [sp, #0]
 80118a6:	4613      	mov	r3, r2
 80118a8:	697a      	ldr	r2, [r7, #20]
 80118aa:	68b9      	ldr	r1, [r7, #8]
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f000 f805 	bl	80118bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80118b2:	69bb      	ldr	r3, [r7, #24]
	}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3720      	adds	r7, #32
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]
 80118c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d103      	bne.n	80118d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80118d0:	69bb      	ldr	r3, [r7, #24]
 80118d2:	69ba      	ldr	r2, [r7, #24]
 80118d4:	601a      	str	r2, [r3, #0]
 80118d6:	e002      	b.n	80118de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80118de:	69bb      	ldr	r3, [r7, #24]
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	68ba      	ldr	r2, [r7, #8]
 80118e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80118ea:	2101      	movs	r1, #1
 80118ec:	69b8      	ldr	r0, [r7, #24]
 80118ee:	f7ff ff43 	bl	8011778 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80118f2:	bf00      	nop
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
	...

080118fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b08e      	sub	sp, #56	; 0x38
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
 8011908:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801190a:	2300      	movs	r3, #0
 801190c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10a      	bne.n	801192e <xQueueGenericSend+0x32>
	__asm volatile
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801192a:	bf00      	nop
 801192c:	e7fe      	b.n	801192c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d103      	bne.n	801193c <xQueueGenericSend+0x40>
 8011934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011938:	2b00      	cmp	r3, #0
 801193a:	d101      	bne.n	8011940 <xQueueGenericSend+0x44>
 801193c:	2301      	movs	r3, #1
 801193e:	e000      	b.n	8011942 <xQueueGenericSend+0x46>
 8011940:	2300      	movs	r3, #0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d10a      	bne.n	801195c <xQueueGenericSend+0x60>
	__asm volatile
 8011946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801194a:	f383 8811 	msr	BASEPRI, r3
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011958:	bf00      	nop
 801195a:	e7fe      	b.n	801195a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	2b02      	cmp	r3, #2
 8011960:	d103      	bne.n	801196a <xQueueGenericSend+0x6e>
 8011962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011966:	2b01      	cmp	r3, #1
 8011968:	d101      	bne.n	801196e <xQueueGenericSend+0x72>
 801196a:	2301      	movs	r3, #1
 801196c:	e000      	b.n	8011970 <xQueueGenericSend+0x74>
 801196e:	2300      	movs	r3, #0
 8011970:	2b00      	cmp	r3, #0
 8011972:	d10a      	bne.n	801198a <xQueueGenericSend+0x8e>
	__asm volatile
 8011974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011978:	f383 8811 	msr	BASEPRI, r3
 801197c:	f3bf 8f6f 	isb	sy
 8011980:	f3bf 8f4f 	dsb	sy
 8011984:	623b      	str	r3, [r7, #32]
}
 8011986:	bf00      	nop
 8011988:	e7fe      	b.n	8011988 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801198a:	f001 f8b3 	bl	8012af4 <xTaskGetSchedulerState>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d102      	bne.n	801199a <xQueueGenericSend+0x9e>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d101      	bne.n	801199e <xQueueGenericSend+0xa2>
 801199a:	2301      	movs	r3, #1
 801199c:	e000      	b.n	80119a0 <xQueueGenericSend+0xa4>
 801199e:	2300      	movs	r3, #0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d10a      	bne.n	80119ba <xQueueGenericSend+0xbe>
	__asm volatile
 80119a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a8:	f383 8811 	msr	BASEPRI, r3
 80119ac:	f3bf 8f6f 	isb	sy
 80119b0:	f3bf 8f4f 	dsb	sy
 80119b4:	61fb      	str	r3, [r7, #28]
}
 80119b6:	bf00      	nop
 80119b8:	e7fe      	b.n	80119b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119ba:	f001 fbeb 	bl	8013194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80119be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d302      	bcc.n	80119d0 <xQueueGenericSend+0xd4>
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d129      	bne.n	8011a24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80119d0:	683a      	ldr	r2, [r7, #0]
 80119d2:	68b9      	ldr	r1, [r7, #8]
 80119d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119d6:	f000 f9b3 	bl	8011d40 <prvCopyDataToQueue>
 80119da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d010      	beq.n	8011a06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e6:	3324      	adds	r3, #36	; 0x24
 80119e8:	4618      	mov	r0, r3
 80119ea:	f000 fec3 	bl	8012774 <xTaskRemoveFromEventList>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d013      	beq.n	8011a1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80119f4:	4b3f      	ldr	r3, [pc, #252]	; (8011af4 <xQueueGenericSend+0x1f8>)
 80119f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119fa:	601a      	str	r2, [r3, #0]
 80119fc:	f3bf 8f4f 	dsb	sy
 8011a00:	f3bf 8f6f 	isb	sy
 8011a04:	e00a      	b.n	8011a1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d007      	beq.n	8011a1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011a0c:	4b39      	ldr	r3, [pc, #228]	; (8011af4 <xQueueGenericSend+0x1f8>)
 8011a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a12:	601a      	str	r2, [r3, #0]
 8011a14:	f3bf 8f4f 	dsb	sy
 8011a18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011a1c:	f001 fbea 	bl	80131f4 <vPortExitCritical>
				return pdPASS;
 8011a20:	2301      	movs	r3, #1
 8011a22:	e063      	b.n	8011aec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d103      	bne.n	8011a32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a2a:	f001 fbe3 	bl	80131f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	e05c      	b.n	8011aec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d106      	bne.n	8011a46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a38:	f107 0314 	add.w	r3, r7, #20
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f000 fefb 	bl	8012838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a42:	2301      	movs	r3, #1
 8011a44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a46:	f001 fbd5 	bl	80131f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a4a:	f000 fcab 	bl	80123a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a4e:	f001 fba1 	bl	8013194 <vPortEnterCritical>
 8011a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a58:	b25b      	sxtb	r3, r3
 8011a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a5e:	d103      	bne.n	8011a68 <xQueueGenericSend+0x16c>
 8011a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a62:	2200      	movs	r2, #0
 8011a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a6e:	b25b      	sxtb	r3, r3
 8011a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a74:	d103      	bne.n	8011a7e <xQueueGenericSend+0x182>
 8011a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a7e:	f001 fbb9 	bl	80131f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a82:	1d3a      	adds	r2, r7, #4
 8011a84:	f107 0314 	add.w	r3, r7, #20
 8011a88:	4611      	mov	r1, r2
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 feea 	bl	8012864 <xTaskCheckForTimeOut>
 8011a90:	4603      	mov	r3, r0
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d124      	bne.n	8011ae0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a98:	f000 fa24 	bl	8011ee4 <prvIsQueueFull>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d018      	beq.n	8011ad4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa4:	3310      	adds	r3, #16
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f000 fe3e 	bl	801272c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ab2:	f000 f9af 	bl	8011e14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ab6:	f000 fc83 	bl	80123c0 <xTaskResumeAll>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f47f af7c 	bne.w	80119ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011ac2:	4b0c      	ldr	r3, [pc, #48]	; (8011af4 <xQueueGenericSend+0x1f8>)
 8011ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	f3bf 8f4f 	dsb	sy
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	e772      	b.n	80119ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ad6:	f000 f99d 	bl	8011e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ada:	f000 fc71 	bl	80123c0 <xTaskResumeAll>
 8011ade:	e76c      	b.n	80119ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ae2:	f000 f997 	bl	8011e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ae6:	f000 fc6b 	bl	80123c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011aea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3738      	adds	r7, #56	; 0x38
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	e000ed04 	.word	0xe000ed04

08011af8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b08e      	sub	sp, #56	; 0x38
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011b02:	2300      	movs	r3, #0
 8011b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d10a      	bne.n	8011b2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	623b      	str	r3, [r7, #32]
}
 8011b26:	bf00      	nop
 8011b28:	e7fe      	b.n	8011b28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00a      	beq.n	8011b48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b36:	f383 8811 	msr	BASEPRI, r3
 8011b3a:	f3bf 8f6f 	isb	sy
 8011b3e:	f3bf 8f4f 	dsb	sy
 8011b42:	61fb      	str	r3, [r7, #28]
}
 8011b44:	bf00      	nop
 8011b46:	e7fe      	b.n	8011b46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b48:	f000 ffd4 	bl	8012af4 <xTaskGetSchedulerState>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d102      	bne.n	8011b58 <xQueueSemaphoreTake+0x60>
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d101      	bne.n	8011b5c <xQueueSemaphoreTake+0x64>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	e000      	b.n	8011b5e <xQueueSemaphoreTake+0x66>
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d10a      	bne.n	8011b78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b66:	f383 8811 	msr	BASEPRI, r3
 8011b6a:	f3bf 8f6f 	isb	sy
 8011b6e:	f3bf 8f4f 	dsb	sy
 8011b72:	61bb      	str	r3, [r7, #24]
}
 8011b74:	bf00      	nop
 8011b76:	e7fe      	b.n	8011b76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b78:	f001 fb0c 	bl	8013194 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d024      	beq.n	8011bd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8a:	1e5a      	subs	r2, r3, #1
 8011b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d104      	bne.n	8011ba2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011b98:	f001 f954 	bl	8012e44 <pvTaskIncrementMutexHeldCount>
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba4:	691b      	ldr	r3, [r3, #16]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00f      	beq.n	8011bca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bac:	3310      	adds	r3, #16
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f000 fde0 	bl	8012774 <xTaskRemoveFromEventList>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d007      	beq.n	8011bca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011bba:	4b54      	ldr	r3, [pc, #336]	; (8011d0c <xQueueSemaphoreTake+0x214>)
 8011bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bc0:	601a      	str	r2, [r3, #0]
 8011bc2:	f3bf 8f4f 	dsb	sy
 8011bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011bca:	f001 fb13 	bl	80131f4 <vPortExitCritical>
				return pdPASS;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	e097      	b.n	8011d02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d111      	bne.n	8011bfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d00a      	beq.n	8011bf4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be2:	f383 8811 	msr	BASEPRI, r3
 8011be6:	f3bf 8f6f 	isb	sy
 8011bea:	f3bf 8f4f 	dsb	sy
 8011bee:	617b      	str	r3, [r7, #20]
}
 8011bf0:	bf00      	nop
 8011bf2:	e7fe      	b.n	8011bf2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011bf4:	f001 fafe 	bl	80131f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e082      	b.n	8011d02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d106      	bne.n	8011c10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c02:	f107 030c 	add.w	r3, r7, #12
 8011c06:	4618      	mov	r0, r3
 8011c08:	f000 fe16 	bl	8012838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c10:	f001 faf0 	bl	80131f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c14:	f000 fbc6 	bl	80123a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c18:	f001 fabc 	bl	8013194 <vPortEnterCritical>
 8011c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c22:	b25b      	sxtb	r3, r3
 8011c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c28:	d103      	bne.n	8011c32 <xQueueSemaphoreTake+0x13a>
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c38:	b25b      	sxtb	r3, r3
 8011c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c3e:	d103      	bne.n	8011c48 <xQueueSemaphoreTake+0x150>
 8011c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c42:	2200      	movs	r2, #0
 8011c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c48:	f001 fad4 	bl	80131f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c4c:	463a      	mov	r2, r7
 8011c4e:	f107 030c 	add.w	r3, r7, #12
 8011c52:	4611      	mov	r1, r2
 8011c54:	4618      	mov	r0, r3
 8011c56:	f000 fe05 	bl	8012864 <xTaskCheckForTimeOut>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d132      	bne.n	8011cc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c62:	f000 f929 	bl	8011eb8 <prvIsQueueEmpty>
 8011c66:	4603      	mov	r3, r0
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d026      	beq.n	8011cba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d109      	bne.n	8011c88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011c74:	f001 fa8e 	bl	8013194 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f000 ff57 	bl	8012b30 <xTaskPriorityInherit>
 8011c82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011c84:	f001 fab6 	bl	80131f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8a:	3324      	adds	r3, #36	; 0x24
 8011c8c:	683a      	ldr	r2, [r7, #0]
 8011c8e:	4611      	mov	r1, r2
 8011c90:	4618      	mov	r0, r3
 8011c92:	f000 fd4b 	bl	801272c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c98:	f000 f8bc 	bl	8011e14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011c9c:	f000 fb90 	bl	80123c0 <xTaskResumeAll>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f47f af68 	bne.w	8011b78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011ca8:	4b18      	ldr	r3, [pc, #96]	; (8011d0c <xQueueSemaphoreTake+0x214>)
 8011caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cae:	601a      	str	r2, [r3, #0]
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	f3bf 8f6f 	isb	sy
 8011cb8:	e75e      	b.n	8011b78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cbc:	f000 f8aa 	bl	8011e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011cc0:	f000 fb7e 	bl	80123c0 <xTaskResumeAll>
 8011cc4:	e758      	b.n	8011b78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cc8:	f000 f8a4 	bl	8011e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ccc:	f000 fb78 	bl	80123c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cd2:	f000 f8f1 	bl	8011eb8 <prvIsQueueEmpty>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	f43f af4d 	beq.w	8011b78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d00d      	beq.n	8011d00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011ce4:	f001 fa56 	bl	8013194 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cea:	f000 f811 	bl	8011d10 <prvGetDisinheritPriorityAfterTimeout>
 8011cee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf2:	689b      	ldr	r3, [r3, #8]
 8011cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f001 f816 	bl	8012d28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011cfc:	f001 fa7a 	bl	80131f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3738      	adds	r7, #56	; 0x38
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	e000ed04 	.word	0xe000ed04

08011d10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011d10:	b480      	push	{r7}
 8011d12:	b085      	sub	sp, #20
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d006      	beq.n	8011d2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f1c3 0307 	rsb	r3, r3, #7
 8011d2a:	60fb      	str	r3, [r7, #12]
 8011d2c:	e001      	b.n	8011d32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011d32:	68fb      	ldr	r3, [r7, #12]
	}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3714      	adds	r7, #20
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr

08011d40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b086      	sub	sp, #24
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d10d      	bne.n	8011d7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d14d      	bne.n	8011e02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	689b      	ldr	r3, [r3, #8]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f000 ff56 	bl	8012c1c <xTaskPriorityDisinherit>
 8011d70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2200      	movs	r2, #0
 8011d76:	609a      	str	r2, [r3, #8]
 8011d78:	e043      	b.n	8011e02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d119      	bne.n	8011db4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	6858      	ldr	r0, [r3, #4]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d88:	461a      	mov	r2, r3
 8011d8a:	68b9      	ldr	r1, [r7, #8]
 8011d8c:	f002 ffcd 	bl	8014d2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	685a      	ldr	r2, [r3, #4]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d98:	441a      	add	r2, r3
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	685a      	ldr	r2, [r3, #4]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d32b      	bcc.n	8011e02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	605a      	str	r2, [r3, #4]
 8011db2:	e026      	b.n	8011e02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	68d8      	ldr	r0, [r3, #12]
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	68b9      	ldr	r1, [r7, #8]
 8011dc0:	f002 ffb3 	bl	8014d2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	68da      	ldr	r2, [r3, #12]
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dcc:	425b      	negs	r3, r3
 8011dce:	441a      	add	r2, r3
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	68da      	ldr	r2, [r3, #12]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d207      	bcs.n	8011df0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	689a      	ldr	r2, [r3, #8]
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011de8:	425b      	negs	r3, r3
 8011dea:	441a      	add	r2, r3
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b02      	cmp	r3, #2
 8011df4:	d105      	bne.n	8011e02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d002      	beq.n	8011e02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	3b01      	subs	r3, #1
 8011e00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	1c5a      	adds	r2, r3, #1
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011e0a:	697b      	ldr	r3, [r7, #20]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3718      	adds	r7, #24
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011e1c:	f001 f9ba 	bl	8013194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011e28:	e011      	b.n	8011e4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d012      	beq.n	8011e58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	3324      	adds	r3, #36	; 0x24
 8011e36:	4618      	mov	r0, r3
 8011e38:	f000 fc9c 	bl	8012774 <xTaskRemoveFromEventList>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d001      	beq.n	8011e46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011e42:	f000 fd71 	bl	8012928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011e46:	7bfb      	ldrb	r3, [r7, #15]
 8011e48:	3b01      	subs	r3, #1
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	dce9      	bgt.n	8011e2a <prvUnlockQueue+0x16>
 8011e56:	e000      	b.n	8011e5a <prvUnlockQueue+0x46>
					break;
 8011e58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	22ff      	movs	r2, #255	; 0xff
 8011e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011e62:	f001 f9c7 	bl	80131f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011e66:	f001 f995 	bl	8013194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011e72:	e011      	b.n	8011e98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d012      	beq.n	8011ea2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	3310      	adds	r3, #16
 8011e80:	4618      	mov	r0, r3
 8011e82:	f000 fc77 	bl	8012774 <xTaskRemoveFromEventList>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d001      	beq.n	8011e90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011e8c:	f000 fd4c 	bl	8012928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011e90:	7bbb      	ldrb	r3, [r7, #14]
 8011e92:	3b01      	subs	r3, #1
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	dce9      	bgt.n	8011e74 <prvUnlockQueue+0x60>
 8011ea0:	e000      	b.n	8011ea4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011ea2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	22ff      	movs	r2, #255	; 0xff
 8011ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011eac:	f001 f9a2 	bl	80131f4 <vPortExitCritical>
}
 8011eb0:	bf00      	nop
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011ec0:	f001 f968 	bl	8013194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d102      	bne.n	8011ed2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	60fb      	str	r3, [r7, #12]
 8011ed0:	e001      	b.n	8011ed6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011ed6:	f001 f98d 	bl	80131f4 <vPortExitCritical>

	return xReturn;
 8011eda:	68fb      	ldr	r3, [r7, #12]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3710      	adds	r7, #16
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}

08011ee4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011eec:	f001 f952 	bl	8013194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d102      	bne.n	8011f02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011efc:	2301      	movs	r3, #1
 8011efe:	60fb      	str	r3, [r7, #12]
 8011f00:	e001      	b.n	8011f06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011f02:	2300      	movs	r3, #0
 8011f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011f06:	f001 f975 	bl	80131f4 <vPortExitCritical>

	return xReturn;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3710      	adds	r7, #16
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b08e      	sub	sp, #56	; 0x38
 8011f18:	af04      	add	r7, sp, #16
 8011f1a:	60f8      	str	r0, [r7, #12]
 8011f1c:	60b9      	str	r1, [r7, #8]
 8011f1e:	607a      	str	r2, [r7, #4]
 8011f20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d10a      	bne.n	8011f3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f2c:	f383 8811 	msr	BASEPRI, r3
 8011f30:	f3bf 8f6f 	isb	sy
 8011f34:	f3bf 8f4f 	dsb	sy
 8011f38:	623b      	str	r3, [r7, #32]
}
 8011f3a:	bf00      	nop
 8011f3c:	e7fe      	b.n	8011f3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d10a      	bne.n	8011f5a <xTaskCreateStatic+0x46>
	__asm volatile
 8011f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f48:	f383 8811 	msr	BASEPRI, r3
 8011f4c:	f3bf 8f6f 	isb	sy
 8011f50:	f3bf 8f4f 	dsb	sy
 8011f54:	61fb      	str	r3, [r7, #28]
}
 8011f56:	bf00      	nop
 8011f58:	e7fe      	b.n	8011f58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011f5a:	23a0      	movs	r3, #160	; 0xa0
 8011f5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	2ba0      	cmp	r3, #160	; 0xa0
 8011f62:	d00a      	beq.n	8011f7a <xTaskCreateStatic+0x66>
	__asm volatile
 8011f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f68:	f383 8811 	msr	BASEPRI, r3
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	f3bf 8f4f 	dsb	sy
 8011f74:	61bb      	str	r3, [r7, #24]
}
 8011f76:	bf00      	nop
 8011f78:	e7fe      	b.n	8011f78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011f7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d01e      	beq.n	8011fc0 <xTaskCreateStatic+0xac>
 8011f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d01b      	beq.n	8011fc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f94:	2202      	movs	r2, #2
 8011f96:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	9303      	str	r3, [sp, #12]
 8011f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa0:	9302      	str	r3, [sp, #8]
 8011fa2:	f107 0314 	add.w	r3, r7, #20
 8011fa6:	9301      	str	r3, [sp, #4]
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011faa:	9300      	str	r3, [sp, #0]
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	68b9      	ldr	r1, [r7, #8]
 8011fb2:	68f8      	ldr	r0, [r7, #12]
 8011fb4:	f000 f850 	bl	8012058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fba:	f000 f8eb 	bl	8012194 <prvAddNewTaskToReadyList>
 8011fbe:	e001      	b.n	8011fc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011fc4:	697b      	ldr	r3, [r7, #20]
	}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3728      	adds	r7, #40	; 0x28
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b08c      	sub	sp, #48	; 0x30
 8011fd2:	af04      	add	r7, sp, #16
 8011fd4:	60f8      	str	r0, [r7, #12]
 8011fd6:	60b9      	str	r1, [r7, #8]
 8011fd8:	603b      	str	r3, [r7, #0]
 8011fda:	4613      	mov	r3, r2
 8011fdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011fde:	88fb      	ldrh	r3, [r7, #6]
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f001 f9b8 	bl	8013358 <pvPortMalloc>
 8011fe8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00e      	beq.n	801200e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011ff0:	20a0      	movs	r0, #160	; 0xa0
 8011ff2:	f001 f9b1 	bl	8013358 <pvPortMalloc>
 8011ff6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d003      	beq.n	8012006 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	697a      	ldr	r2, [r7, #20]
 8012002:	631a      	str	r2, [r3, #48]	; 0x30
 8012004:	e005      	b.n	8012012 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012006:	6978      	ldr	r0, [r7, #20]
 8012008:	f001 fa72 	bl	80134f0 <vPortFree>
 801200c:	e001      	b.n	8012012 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801200e:	2300      	movs	r3, #0
 8012010:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d017      	beq.n	8012048 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012018:	69fb      	ldr	r3, [r7, #28]
 801201a:	2200      	movs	r2, #0
 801201c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012020:	88fa      	ldrh	r2, [r7, #6]
 8012022:	2300      	movs	r3, #0
 8012024:	9303      	str	r3, [sp, #12]
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	9302      	str	r3, [sp, #8]
 801202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202c:	9301      	str	r3, [sp, #4]
 801202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012030:	9300      	str	r3, [sp, #0]
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	68b9      	ldr	r1, [r7, #8]
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f000 f80e 	bl	8012058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801203c:	69f8      	ldr	r0, [r7, #28]
 801203e:	f000 f8a9 	bl	8012194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012042:	2301      	movs	r3, #1
 8012044:	61bb      	str	r3, [r7, #24]
 8012046:	e002      	b.n	801204e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012048:	f04f 33ff 	mov.w	r3, #4294967295
 801204c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801204e:	69bb      	ldr	r3, [r7, #24]
	}
 8012050:	4618      	mov	r0, r3
 8012052:	3720      	adds	r7, #32
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b088      	sub	sp, #32
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
 8012064:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012070:	3b01      	subs	r3, #1
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	4413      	add	r3, r2
 8012076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	f023 0307 	bic.w	r3, r3, #7
 801207e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	f003 0307 	and.w	r3, r3, #7
 8012086:	2b00      	cmp	r3, #0
 8012088:	d00a      	beq.n	80120a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 801208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801208e:	f383 8811 	msr	BASEPRI, r3
 8012092:	f3bf 8f6f 	isb	sy
 8012096:	f3bf 8f4f 	dsb	sy
 801209a:	617b      	str	r3, [r7, #20]
}
 801209c:	bf00      	nop
 801209e:	e7fe      	b.n	801209e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d01f      	beq.n	80120e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80120a6:	2300      	movs	r3, #0
 80120a8:	61fb      	str	r3, [r7, #28]
 80120aa:	e012      	b.n	80120d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80120ac:	68ba      	ldr	r2, [r7, #8]
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	4413      	add	r3, r2
 80120b2:	7819      	ldrb	r1, [r3, #0]
 80120b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	4413      	add	r3, r2
 80120ba:	3334      	adds	r3, #52	; 0x34
 80120bc:	460a      	mov	r2, r1
 80120be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80120c0:	68ba      	ldr	r2, [r7, #8]
 80120c2:	69fb      	ldr	r3, [r7, #28]
 80120c4:	4413      	add	r3, r2
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d006      	beq.n	80120da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	3301      	adds	r3, #1
 80120d0:	61fb      	str	r3, [r7, #28]
 80120d2:	69fb      	ldr	r3, [r7, #28]
 80120d4:	2b0f      	cmp	r3, #15
 80120d6:	d9e9      	bls.n	80120ac <prvInitialiseNewTask+0x54>
 80120d8:	e000      	b.n	80120dc <prvInitialiseNewTask+0x84>
			{
				break;
 80120da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80120dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120de:	2200      	movs	r2, #0
 80120e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80120e4:	e003      	b.n	80120ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80120e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e8:	2200      	movs	r2, #0
 80120ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80120ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f0:	2b06      	cmp	r3, #6
 80120f2:	d901      	bls.n	80120f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80120f4:	2306      	movs	r3, #6
 80120f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80120f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80120fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012102:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012106:	2200      	movs	r2, #0
 8012108:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210c:	3304      	adds	r3, #4
 801210e:	4618      	mov	r0, r3
 8012110:	f7ff fa9d 	bl	801164e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012116:	3318      	adds	r3, #24
 8012118:	4618      	mov	r0, r3
 801211a:	f7ff fa98 	bl	801164e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012126:	f1c3 0207 	rsb	r2, r3, #7
 801212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012136:	2200      	movs	r2, #0
 8012138:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213e:	2200      	movs	r2, #0
 8012140:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012146:	334c      	adds	r3, #76	; 0x4c
 8012148:	224c      	movs	r2, #76	; 0x4c
 801214a:	2100      	movs	r1, #0
 801214c:	4618      	mov	r0, r3
 801214e:	f002 fd08 	bl	8014b62 <memset>
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	4a0c      	ldr	r2, [pc, #48]	; (8012188 <prvInitialiseNewTask+0x130>)
 8012156:	651a      	str	r2, [r3, #80]	; 0x50
 8012158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215a:	4a0c      	ldr	r2, [pc, #48]	; (801218c <prvInitialiseNewTask+0x134>)
 801215c:	655a      	str	r2, [r3, #84]	; 0x54
 801215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012160:	4a0b      	ldr	r2, [pc, #44]	; (8012190 <prvInitialiseNewTask+0x138>)
 8012162:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012164:	683a      	ldr	r2, [r7, #0]
 8012166:	68f9      	ldr	r1, [r7, #12]
 8012168:	69b8      	ldr	r0, [r7, #24]
 801216a:	f000 fee5 	bl	8012f38 <pxPortInitialiseStack>
 801216e:	4602      	mov	r2, r0
 8012170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012172:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012176:	2b00      	cmp	r3, #0
 8012178:	d002      	beq.n	8012180 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801217e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012180:	bf00      	nop
 8012182:	3720      	adds	r7, #32
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}
 8012188:	20005ab4 	.word	0x20005ab4
 801218c:	20005b1c 	.word	0x20005b1c
 8012190:	20005b84 	.word	0x20005b84

08012194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801219c:	f000 fffa 	bl	8013194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80121a0:	4b2a      	ldr	r3, [pc, #168]	; (801224c <prvAddNewTaskToReadyList+0xb8>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	3301      	adds	r3, #1
 80121a6:	4a29      	ldr	r2, [pc, #164]	; (801224c <prvAddNewTaskToReadyList+0xb8>)
 80121a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80121aa:	4b29      	ldr	r3, [pc, #164]	; (8012250 <prvAddNewTaskToReadyList+0xbc>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d109      	bne.n	80121c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80121b2:	4a27      	ldr	r2, [pc, #156]	; (8012250 <prvAddNewTaskToReadyList+0xbc>)
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80121b8:	4b24      	ldr	r3, [pc, #144]	; (801224c <prvAddNewTaskToReadyList+0xb8>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d110      	bne.n	80121e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80121c0:	f000 fbd6 	bl	8012970 <prvInitialiseTaskLists>
 80121c4:	e00d      	b.n	80121e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80121c6:	4b23      	ldr	r3, [pc, #140]	; (8012254 <prvAddNewTaskToReadyList+0xc0>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d109      	bne.n	80121e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80121ce:	4b20      	ldr	r3, [pc, #128]	; (8012250 <prvAddNewTaskToReadyList+0xbc>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d8:	429a      	cmp	r2, r3
 80121da:	d802      	bhi.n	80121e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80121dc:	4a1c      	ldr	r2, [pc, #112]	; (8012250 <prvAddNewTaskToReadyList+0xbc>)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80121e2:	4b1d      	ldr	r3, [pc, #116]	; (8012258 <prvAddNewTaskToReadyList+0xc4>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	3301      	adds	r3, #1
 80121e8:	4a1b      	ldr	r2, [pc, #108]	; (8012258 <prvAddNewTaskToReadyList+0xc4>)
 80121ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f0:	2201      	movs	r2, #1
 80121f2:	409a      	lsls	r2, r3
 80121f4:	4b19      	ldr	r3, [pc, #100]	; (801225c <prvAddNewTaskToReadyList+0xc8>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	4313      	orrs	r3, r2
 80121fa:	4a18      	ldr	r2, [pc, #96]	; (801225c <prvAddNewTaskToReadyList+0xc8>)
 80121fc:	6013      	str	r3, [r2, #0]
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012202:	4613      	mov	r3, r2
 8012204:	009b      	lsls	r3, r3, #2
 8012206:	4413      	add	r3, r2
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	4a15      	ldr	r2, [pc, #84]	; (8012260 <prvAddNewTaskToReadyList+0xcc>)
 801220c:	441a      	add	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	3304      	adds	r3, #4
 8012212:	4619      	mov	r1, r3
 8012214:	4610      	mov	r0, r2
 8012216:	f7ff fa27 	bl	8011668 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801221a:	f000 ffeb 	bl	80131f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801221e:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <prvAddNewTaskToReadyList+0xc0>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d00e      	beq.n	8012244 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012226:	4b0a      	ldr	r3, [pc, #40]	; (8012250 <prvAddNewTaskToReadyList+0xbc>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012230:	429a      	cmp	r2, r3
 8012232:	d207      	bcs.n	8012244 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012234:	4b0b      	ldr	r3, [pc, #44]	; (8012264 <prvAddNewTaskToReadyList+0xd0>)
 8012236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801223a:	601a      	str	r2, [r3, #0]
 801223c:	f3bf 8f4f 	dsb	sy
 8012240:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012244:	bf00      	nop
 8012246:	3708      	adds	r7, #8
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	2000141c 	.word	0x2000141c
 8012250:	2000131c 	.word	0x2000131c
 8012254:	20001428 	.word	0x20001428
 8012258:	20001438 	.word	0x20001438
 801225c:	20001424 	.word	0x20001424
 8012260:	20001320 	.word	0x20001320
 8012264:	e000ed04 	.word	0xe000ed04

08012268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012268:	b580      	push	{r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012270:	2300      	movs	r3, #0
 8012272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d017      	beq.n	80122aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801227a:	4b13      	ldr	r3, [pc, #76]	; (80122c8 <vTaskDelay+0x60>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00a      	beq.n	8012298 <vTaskDelay+0x30>
	__asm volatile
 8012282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012286:	f383 8811 	msr	BASEPRI, r3
 801228a:	f3bf 8f6f 	isb	sy
 801228e:	f3bf 8f4f 	dsb	sy
 8012292:	60bb      	str	r3, [r7, #8]
}
 8012294:	bf00      	nop
 8012296:	e7fe      	b.n	8012296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012298:	f000 f884 	bl	80123a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801229c:	2100      	movs	r1, #0
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f000 fde4 	bl	8012e6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80122a4:	f000 f88c 	bl	80123c0 <xTaskResumeAll>
 80122a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d107      	bne.n	80122c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80122b0:	4b06      	ldr	r3, [pc, #24]	; (80122cc <vTaskDelay+0x64>)
 80122b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122b6:	601a      	str	r2, [r3, #0]
 80122b8:	f3bf 8f4f 	dsb	sy
 80122bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80122c0:	bf00      	nop
 80122c2:	3710      	adds	r7, #16
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}
 80122c8:	20001444 	.word	0x20001444
 80122cc:	e000ed04 	.word	0xe000ed04

080122d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b08a      	sub	sp, #40	; 0x28
 80122d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80122d6:	2300      	movs	r3, #0
 80122d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80122da:	2300      	movs	r3, #0
 80122dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80122de:	463a      	mov	r2, r7
 80122e0:	1d39      	adds	r1, r7, #4
 80122e2:	f107 0308 	add.w	r3, r7, #8
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7f1 fbc2 	bl	8003a70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80122ec:	6839      	ldr	r1, [r7, #0]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	68ba      	ldr	r2, [r7, #8]
 80122f2:	9202      	str	r2, [sp, #8]
 80122f4:	9301      	str	r3, [sp, #4]
 80122f6:	2300      	movs	r3, #0
 80122f8:	9300      	str	r3, [sp, #0]
 80122fa:	2300      	movs	r3, #0
 80122fc:	460a      	mov	r2, r1
 80122fe:	4921      	ldr	r1, [pc, #132]	; (8012384 <vTaskStartScheduler+0xb4>)
 8012300:	4821      	ldr	r0, [pc, #132]	; (8012388 <vTaskStartScheduler+0xb8>)
 8012302:	f7ff fe07 	bl	8011f14 <xTaskCreateStatic>
 8012306:	4603      	mov	r3, r0
 8012308:	4a20      	ldr	r2, [pc, #128]	; (801238c <vTaskStartScheduler+0xbc>)
 801230a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801230c:	4b1f      	ldr	r3, [pc, #124]	; (801238c <vTaskStartScheduler+0xbc>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d002      	beq.n	801231a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012314:	2301      	movs	r3, #1
 8012316:	617b      	str	r3, [r7, #20]
 8012318:	e001      	b.n	801231e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801231a:	2300      	movs	r3, #0
 801231c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d11b      	bne.n	801235c <vTaskStartScheduler+0x8c>
	__asm volatile
 8012324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012328:	f383 8811 	msr	BASEPRI, r3
 801232c:	f3bf 8f6f 	isb	sy
 8012330:	f3bf 8f4f 	dsb	sy
 8012334:	613b      	str	r3, [r7, #16]
}
 8012336:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012338:	4b15      	ldr	r3, [pc, #84]	; (8012390 <vTaskStartScheduler+0xc0>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	334c      	adds	r3, #76	; 0x4c
 801233e:	4a15      	ldr	r2, [pc, #84]	; (8012394 <vTaskStartScheduler+0xc4>)
 8012340:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012342:	4b15      	ldr	r3, [pc, #84]	; (8012398 <vTaskStartScheduler+0xc8>)
 8012344:	f04f 32ff 	mov.w	r2, #4294967295
 8012348:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801234a:	4b14      	ldr	r3, [pc, #80]	; (801239c <vTaskStartScheduler+0xcc>)
 801234c:	2201      	movs	r2, #1
 801234e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012350:	4b13      	ldr	r3, [pc, #76]	; (80123a0 <vTaskStartScheduler+0xd0>)
 8012352:	2200      	movs	r2, #0
 8012354:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012356:	f000 fe7b 	bl	8013050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801235a:	e00e      	b.n	801237a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012362:	d10a      	bne.n	801237a <vTaskStartScheduler+0xaa>
	__asm volatile
 8012364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012368:	f383 8811 	msr	BASEPRI, r3
 801236c:	f3bf 8f6f 	isb	sy
 8012370:	f3bf 8f4f 	dsb	sy
 8012374:	60fb      	str	r3, [r7, #12]
}
 8012376:	bf00      	nop
 8012378:	e7fe      	b.n	8012378 <vTaskStartScheduler+0xa8>
}
 801237a:	bf00      	nop
 801237c:	3718      	adds	r7, #24
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	08017070 	.word	0x08017070
 8012388:	08012941 	.word	0x08012941
 801238c:	20001440 	.word	0x20001440
 8012390:	2000131c 	.word	0x2000131c
 8012394:	2000017c 	.word	0x2000017c
 8012398:	2000143c 	.word	0x2000143c
 801239c:	20001428 	.word	0x20001428
 80123a0:	20001420 	.word	0x20001420

080123a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80123a4:	b480      	push	{r7}
 80123a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80123a8:	4b04      	ldr	r3, [pc, #16]	; (80123bc <vTaskSuspendAll+0x18>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	3301      	adds	r3, #1
 80123ae:	4a03      	ldr	r2, [pc, #12]	; (80123bc <vTaskSuspendAll+0x18>)
 80123b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80123b2:	bf00      	nop
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr
 80123bc:	20001444 	.word	0x20001444

080123c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b084      	sub	sp, #16
 80123c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80123c6:	2300      	movs	r3, #0
 80123c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80123ca:	2300      	movs	r3, #0
 80123cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80123ce:	4b41      	ldr	r3, [pc, #260]	; (80124d4 <xTaskResumeAll+0x114>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d10a      	bne.n	80123ec <xTaskResumeAll+0x2c>
	__asm volatile
 80123d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123da:	f383 8811 	msr	BASEPRI, r3
 80123de:	f3bf 8f6f 	isb	sy
 80123e2:	f3bf 8f4f 	dsb	sy
 80123e6:	603b      	str	r3, [r7, #0]
}
 80123e8:	bf00      	nop
 80123ea:	e7fe      	b.n	80123ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80123ec:	f000 fed2 	bl	8013194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80123f0:	4b38      	ldr	r3, [pc, #224]	; (80124d4 <xTaskResumeAll+0x114>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	3b01      	subs	r3, #1
 80123f6:	4a37      	ldr	r2, [pc, #220]	; (80124d4 <xTaskResumeAll+0x114>)
 80123f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123fa:	4b36      	ldr	r3, [pc, #216]	; (80124d4 <xTaskResumeAll+0x114>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d161      	bne.n	80124c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012402:	4b35      	ldr	r3, [pc, #212]	; (80124d8 <xTaskResumeAll+0x118>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d05d      	beq.n	80124c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801240a:	e02e      	b.n	801246a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801240c:	4b33      	ldr	r3, [pc, #204]	; (80124dc <xTaskResumeAll+0x11c>)
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	3318      	adds	r3, #24
 8012418:	4618      	mov	r0, r3
 801241a:	f7ff f982 	bl	8011722 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	3304      	adds	r3, #4
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff f97d 	bl	8011722 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801242c:	2201      	movs	r2, #1
 801242e:	409a      	lsls	r2, r3
 8012430:	4b2b      	ldr	r3, [pc, #172]	; (80124e0 <xTaskResumeAll+0x120>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	4313      	orrs	r3, r2
 8012436:	4a2a      	ldr	r2, [pc, #168]	; (80124e0 <xTaskResumeAll+0x120>)
 8012438:	6013      	str	r3, [r2, #0]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801243e:	4613      	mov	r3, r2
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	4413      	add	r3, r2
 8012444:	009b      	lsls	r3, r3, #2
 8012446:	4a27      	ldr	r2, [pc, #156]	; (80124e4 <xTaskResumeAll+0x124>)
 8012448:	441a      	add	r2, r3
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	3304      	adds	r3, #4
 801244e:	4619      	mov	r1, r3
 8012450:	4610      	mov	r0, r2
 8012452:	f7ff f909 	bl	8011668 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801245a:	4b23      	ldr	r3, [pc, #140]	; (80124e8 <xTaskResumeAll+0x128>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012460:	429a      	cmp	r2, r3
 8012462:	d302      	bcc.n	801246a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012464:	4b21      	ldr	r3, [pc, #132]	; (80124ec <xTaskResumeAll+0x12c>)
 8012466:	2201      	movs	r2, #1
 8012468:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801246a:	4b1c      	ldr	r3, [pc, #112]	; (80124dc <xTaskResumeAll+0x11c>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d1cc      	bne.n	801240c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d001      	beq.n	801247c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012478:	f000 fb1c 	bl	8012ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801247c:	4b1c      	ldr	r3, [pc, #112]	; (80124f0 <xTaskResumeAll+0x130>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d010      	beq.n	80124aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012488:	f000 f836 	bl	80124f8 <xTaskIncrementTick>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d002      	beq.n	8012498 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012492:	4b16      	ldr	r3, [pc, #88]	; (80124ec <xTaskResumeAll+0x12c>)
 8012494:	2201      	movs	r2, #1
 8012496:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	3b01      	subs	r3, #1
 801249c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d1f1      	bne.n	8012488 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80124a4:	4b12      	ldr	r3, [pc, #72]	; (80124f0 <xTaskResumeAll+0x130>)
 80124a6:	2200      	movs	r2, #0
 80124a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80124aa:	4b10      	ldr	r3, [pc, #64]	; (80124ec <xTaskResumeAll+0x12c>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d009      	beq.n	80124c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80124b2:	2301      	movs	r3, #1
 80124b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80124b6:	4b0f      	ldr	r3, [pc, #60]	; (80124f4 <xTaskResumeAll+0x134>)
 80124b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124bc:	601a      	str	r2, [r3, #0]
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80124c6:	f000 fe95 	bl	80131f4 <vPortExitCritical>

	return xAlreadyYielded;
 80124ca:	68bb      	ldr	r3, [r7, #8]
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3710      	adds	r7, #16
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	20001444 	.word	0x20001444
 80124d8:	2000141c 	.word	0x2000141c
 80124dc:	200013dc 	.word	0x200013dc
 80124e0:	20001424 	.word	0x20001424
 80124e4:	20001320 	.word	0x20001320
 80124e8:	2000131c 	.word	0x2000131c
 80124ec:	20001430 	.word	0x20001430
 80124f0:	2000142c 	.word	0x2000142c
 80124f4:	e000ed04 	.word	0xe000ed04

080124f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b086      	sub	sp, #24
 80124fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80124fe:	2300      	movs	r3, #0
 8012500:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012502:	4b4e      	ldr	r3, [pc, #312]	; (801263c <xTaskIncrementTick+0x144>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	f040 808e 	bne.w	8012628 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801250c:	4b4c      	ldr	r3, [pc, #304]	; (8012640 <xTaskIncrementTick+0x148>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	3301      	adds	r3, #1
 8012512:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012514:	4a4a      	ldr	r2, [pc, #296]	; (8012640 <xTaskIncrementTick+0x148>)
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d120      	bne.n	8012562 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012520:	4b48      	ldr	r3, [pc, #288]	; (8012644 <xTaskIncrementTick+0x14c>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00a      	beq.n	8012540 <xTaskIncrementTick+0x48>
	__asm volatile
 801252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252e:	f383 8811 	msr	BASEPRI, r3
 8012532:	f3bf 8f6f 	isb	sy
 8012536:	f3bf 8f4f 	dsb	sy
 801253a:	603b      	str	r3, [r7, #0]
}
 801253c:	bf00      	nop
 801253e:	e7fe      	b.n	801253e <xTaskIncrementTick+0x46>
 8012540:	4b40      	ldr	r3, [pc, #256]	; (8012644 <xTaskIncrementTick+0x14c>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	60fb      	str	r3, [r7, #12]
 8012546:	4b40      	ldr	r3, [pc, #256]	; (8012648 <xTaskIncrementTick+0x150>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4a3e      	ldr	r2, [pc, #248]	; (8012644 <xTaskIncrementTick+0x14c>)
 801254c:	6013      	str	r3, [r2, #0]
 801254e:	4a3e      	ldr	r2, [pc, #248]	; (8012648 <xTaskIncrementTick+0x150>)
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	6013      	str	r3, [r2, #0]
 8012554:	4b3d      	ldr	r3, [pc, #244]	; (801264c <xTaskIncrementTick+0x154>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	3301      	adds	r3, #1
 801255a:	4a3c      	ldr	r2, [pc, #240]	; (801264c <xTaskIncrementTick+0x154>)
 801255c:	6013      	str	r3, [r2, #0]
 801255e:	f000 faa9 	bl	8012ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012562:	4b3b      	ldr	r3, [pc, #236]	; (8012650 <xTaskIncrementTick+0x158>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	693a      	ldr	r2, [r7, #16]
 8012568:	429a      	cmp	r2, r3
 801256a:	d348      	bcc.n	80125fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801256c:	4b35      	ldr	r3, [pc, #212]	; (8012644 <xTaskIncrementTick+0x14c>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d104      	bne.n	8012580 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012576:	4b36      	ldr	r3, [pc, #216]	; (8012650 <xTaskIncrementTick+0x158>)
 8012578:	f04f 32ff 	mov.w	r2, #4294967295
 801257c:	601a      	str	r2, [r3, #0]
					break;
 801257e:	e03e      	b.n	80125fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012580:	4b30      	ldr	r3, [pc, #192]	; (8012644 <xTaskIncrementTick+0x14c>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012590:	693a      	ldr	r2, [r7, #16]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	429a      	cmp	r2, r3
 8012596:	d203      	bcs.n	80125a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012598:	4a2d      	ldr	r2, [pc, #180]	; (8012650 <xTaskIncrementTick+0x158>)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801259e:	e02e      	b.n	80125fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	3304      	adds	r3, #4
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7ff f8bc 	bl	8011722 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d004      	beq.n	80125bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	3318      	adds	r3, #24
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7ff f8b3 	bl	8011722 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c0:	2201      	movs	r2, #1
 80125c2:	409a      	lsls	r2, r3
 80125c4:	4b23      	ldr	r3, [pc, #140]	; (8012654 <xTaskIncrementTick+0x15c>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	4313      	orrs	r3, r2
 80125ca:	4a22      	ldr	r2, [pc, #136]	; (8012654 <xTaskIncrementTick+0x15c>)
 80125cc:	6013      	str	r3, [r2, #0]
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125d2:	4613      	mov	r3, r2
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	4413      	add	r3, r2
 80125d8:	009b      	lsls	r3, r3, #2
 80125da:	4a1f      	ldr	r2, [pc, #124]	; (8012658 <xTaskIncrementTick+0x160>)
 80125dc:	441a      	add	r2, r3
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	3304      	adds	r3, #4
 80125e2:	4619      	mov	r1, r3
 80125e4:	4610      	mov	r0, r2
 80125e6:	f7ff f83f 	bl	8011668 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ee:	4b1b      	ldr	r3, [pc, #108]	; (801265c <xTaskIncrementTick+0x164>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d3b9      	bcc.n	801256c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80125f8:	2301      	movs	r3, #1
 80125fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80125fc:	e7b6      	b.n	801256c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80125fe:	4b17      	ldr	r3, [pc, #92]	; (801265c <xTaskIncrementTick+0x164>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012604:	4914      	ldr	r1, [pc, #80]	; (8012658 <xTaskIncrementTick+0x160>)
 8012606:	4613      	mov	r3, r2
 8012608:	009b      	lsls	r3, r3, #2
 801260a:	4413      	add	r3, r2
 801260c:	009b      	lsls	r3, r3, #2
 801260e:	440b      	add	r3, r1
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2b01      	cmp	r3, #1
 8012614:	d901      	bls.n	801261a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8012616:	2301      	movs	r3, #1
 8012618:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801261a:	4b11      	ldr	r3, [pc, #68]	; (8012660 <xTaskIncrementTick+0x168>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d007      	beq.n	8012632 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012622:	2301      	movs	r3, #1
 8012624:	617b      	str	r3, [r7, #20]
 8012626:	e004      	b.n	8012632 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012628:	4b0e      	ldr	r3, [pc, #56]	; (8012664 <xTaskIncrementTick+0x16c>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	3301      	adds	r3, #1
 801262e:	4a0d      	ldr	r2, [pc, #52]	; (8012664 <xTaskIncrementTick+0x16c>)
 8012630:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012632:	697b      	ldr	r3, [r7, #20]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3718      	adds	r7, #24
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	20001444 	.word	0x20001444
 8012640:	20001420 	.word	0x20001420
 8012644:	200013d4 	.word	0x200013d4
 8012648:	200013d8 	.word	0x200013d8
 801264c:	20001434 	.word	0x20001434
 8012650:	2000143c 	.word	0x2000143c
 8012654:	20001424 	.word	0x20001424
 8012658:	20001320 	.word	0x20001320
 801265c:	2000131c 	.word	0x2000131c
 8012660:	20001430 	.word	0x20001430
 8012664:	2000142c 	.word	0x2000142c

08012668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012668:	b480      	push	{r7}
 801266a:	b087      	sub	sp, #28
 801266c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801266e:	4b29      	ldr	r3, [pc, #164]	; (8012714 <vTaskSwitchContext+0xac>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d003      	beq.n	801267e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012676:	4b28      	ldr	r3, [pc, #160]	; (8012718 <vTaskSwitchContext+0xb0>)
 8012678:	2201      	movs	r2, #1
 801267a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801267c:	e044      	b.n	8012708 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801267e:	4b26      	ldr	r3, [pc, #152]	; (8012718 <vTaskSwitchContext+0xb0>)
 8012680:	2200      	movs	r2, #0
 8012682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012684:	4b25      	ldr	r3, [pc, #148]	; (801271c <vTaskSwitchContext+0xb4>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	fab3 f383 	clz	r3, r3
 8012690:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012692:	7afb      	ldrb	r3, [r7, #11]
 8012694:	f1c3 031f 	rsb	r3, r3, #31
 8012698:	617b      	str	r3, [r7, #20]
 801269a:	4921      	ldr	r1, [pc, #132]	; (8012720 <vTaskSwitchContext+0xb8>)
 801269c:	697a      	ldr	r2, [r7, #20]
 801269e:	4613      	mov	r3, r2
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	4413      	add	r3, r2
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	440b      	add	r3, r1
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d10a      	bne.n	80126c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80126ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b2:	f383 8811 	msr	BASEPRI, r3
 80126b6:	f3bf 8f6f 	isb	sy
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	607b      	str	r3, [r7, #4]
}
 80126c0:	bf00      	nop
 80126c2:	e7fe      	b.n	80126c2 <vTaskSwitchContext+0x5a>
 80126c4:	697a      	ldr	r2, [r7, #20]
 80126c6:	4613      	mov	r3, r2
 80126c8:	009b      	lsls	r3, r3, #2
 80126ca:	4413      	add	r3, r2
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	4a14      	ldr	r2, [pc, #80]	; (8012720 <vTaskSwitchContext+0xb8>)
 80126d0:	4413      	add	r3, r2
 80126d2:	613b      	str	r3, [r7, #16]
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	685a      	ldr	r2, [r3, #4]
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	605a      	str	r2, [r3, #4]
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	685a      	ldr	r2, [r3, #4]
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	3308      	adds	r3, #8
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d104      	bne.n	80126f4 <vTaskSwitchContext+0x8c>
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	685a      	ldr	r2, [r3, #4]
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	605a      	str	r2, [r3, #4]
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	4a0a      	ldr	r2, [pc, #40]	; (8012724 <vTaskSwitchContext+0xbc>)
 80126fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80126fe:	4b09      	ldr	r3, [pc, #36]	; (8012724 <vTaskSwitchContext+0xbc>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	334c      	adds	r3, #76	; 0x4c
 8012704:	4a08      	ldr	r2, [pc, #32]	; (8012728 <vTaskSwitchContext+0xc0>)
 8012706:	6013      	str	r3, [r2, #0]
}
 8012708:	bf00      	nop
 801270a:	371c      	adds	r7, #28
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr
 8012714:	20001444 	.word	0x20001444
 8012718:	20001430 	.word	0x20001430
 801271c:	20001424 	.word	0x20001424
 8012720:	20001320 	.word	0x20001320
 8012724:	2000131c 	.word	0x2000131c
 8012728:	2000017c 	.word	0x2000017c

0801272c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d10a      	bne.n	8012752 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012740:	f383 8811 	msr	BASEPRI, r3
 8012744:	f3bf 8f6f 	isb	sy
 8012748:	f3bf 8f4f 	dsb	sy
 801274c:	60fb      	str	r3, [r7, #12]
}
 801274e:	bf00      	nop
 8012750:	e7fe      	b.n	8012750 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012752:	4b07      	ldr	r3, [pc, #28]	; (8012770 <vTaskPlaceOnEventList+0x44>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	3318      	adds	r3, #24
 8012758:	4619      	mov	r1, r3
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7fe ffa8 	bl	80116b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012760:	2101      	movs	r1, #1
 8012762:	6838      	ldr	r0, [r7, #0]
 8012764:	f000 fb82 	bl	8012e6c <prvAddCurrentTaskToDelayedList>
}
 8012768:	bf00      	nop
 801276a:	3710      	adds	r7, #16
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	2000131c 	.word	0x2000131c

08012774 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b086      	sub	sp, #24
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	68db      	ldr	r3, [r3, #12]
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d10a      	bne.n	80127a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801278e:	f383 8811 	msr	BASEPRI, r3
 8012792:	f3bf 8f6f 	isb	sy
 8012796:	f3bf 8f4f 	dsb	sy
 801279a:	60fb      	str	r3, [r7, #12]
}
 801279c:	bf00      	nop
 801279e:	e7fe      	b.n	801279e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	3318      	adds	r3, #24
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7fe ffbc 	bl	8011722 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127aa:	4b1d      	ldr	r3, [pc, #116]	; (8012820 <xTaskRemoveFromEventList+0xac>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d11c      	bne.n	80127ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	3304      	adds	r3, #4
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7fe ffb3 	bl	8011722 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127c0:	2201      	movs	r2, #1
 80127c2:	409a      	lsls	r2, r3
 80127c4:	4b17      	ldr	r3, [pc, #92]	; (8012824 <xTaskRemoveFromEventList+0xb0>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4313      	orrs	r3, r2
 80127ca:	4a16      	ldr	r2, [pc, #88]	; (8012824 <xTaskRemoveFromEventList+0xb0>)
 80127cc:	6013      	str	r3, [r2, #0]
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127d2:	4613      	mov	r3, r2
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	4413      	add	r3, r2
 80127d8:	009b      	lsls	r3, r3, #2
 80127da:	4a13      	ldr	r2, [pc, #76]	; (8012828 <xTaskRemoveFromEventList+0xb4>)
 80127dc:	441a      	add	r2, r3
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	3304      	adds	r3, #4
 80127e2:	4619      	mov	r1, r3
 80127e4:	4610      	mov	r0, r2
 80127e6:	f7fe ff3f 	bl	8011668 <vListInsertEnd>
 80127ea:	e005      	b.n	80127f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	3318      	adds	r3, #24
 80127f0:	4619      	mov	r1, r3
 80127f2:	480e      	ldr	r0, [pc, #56]	; (801282c <xTaskRemoveFromEventList+0xb8>)
 80127f4:	f7fe ff38 	bl	8011668 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127fc:	4b0c      	ldr	r3, [pc, #48]	; (8012830 <xTaskRemoveFromEventList+0xbc>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012802:	429a      	cmp	r2, r3
 8012804:	d905      	bls.n	8012812 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012806:	2301      	movs	r3, #1
 8012808:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801280a:	4b0a      	ldr	r3, [pc, #40]	; (8012834 <xTaskRemoveFromEventList+0xc0>)
 801280c:	2201      	movs	r2, #1
 801280e:	601a      	str	r2, [r3, #0]
 8012810:	e001      	b.n	8012816 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012812:	2300      	movs	r3, #0
 8012814:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012816:	697b      	ldr	r3, [r7, #20]
}
 8012818:	4618      	mov	r0, r3
 801281a:	3718      	adds	r7, #24
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}
 8012820:	20001444 	.word	0x20001444
 8012824:	20001424 	.word	0x20001424
 8012828:	20001320 	.word	0x20001320
 801282c:	200013dc 	.word	0x200013dc
 8012830:	2000131c 	.word	0x2000131c
 8012834:	20001430 	.word	0x20001430

08012838 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012840:	4b06      	ldr	r3, [pc, #24]	; (801285c <vTaskInternalSetTimeOutState+0x24>)
 8012842:	681a      	ldr	r2, [r3, #0]
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012848:	4b05      	ldr	r3, [pc, #20]	; (8012860 <vTaskInternalSetTimeOutState+0x28>)
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	605a      	str	r2, [r3, #4]
}
 8012850:	bf00      	nop
 8012852:	370c      	adds	r7, #12
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr
 801285c:	20001434 	.word	0x20001434
 8012860:	20001420 	.word	0x20001420

08012864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b088      	sub	sp, #32
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d10a      	bne.n	801288a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012878:	f383 8811 	msr	BASEPRI, r3
 801287c:	f3bf 8f6f 	isb	sy
 8012880:	f3bf 8f4f 	dsb	sy
 8012884:	613b      	str	r3, [r7, #16]
}
 8012886:	bf00      	nop
 8012888:	e7fe      	b.n	8012888 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d10a      	bne.n	80128a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012894:	f383 8811 	msr	BASEPRI, r3
 8012898:	f3bf 8f6f 	isb	sy
 801289c:	f3bf 8f4f 	dsb	sy
 80128a0:	60fb      	str	r3, [r7, #12]
}
 80128a2:	bf00      	nop
 80128a4:	e7fe      	b.n	80128a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80128a6:	f000 fc75 	bl	8013194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80128aa:	4b1d      	ldr	r3, [pc, #116]	; (8012920 <xTaskCheckForTimeOut+0xbc>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	69ba      	ldr	r2, [r7, #24]
 80128b6:	1ad3      	subs	r3, r2, r3
 80128b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128c2:	d102      	bne.n	80128ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80128c4:	2300      	movs	r3, #0
 80128c6:	61fb      	str	r3, [r7, #28]
 80128c8:	e023      	b.n	8012912 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	4b15      	ldr	r3, [pc, #84]	; (8012924 <xTaskCheckForTimeOut+0xc0>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d007      	beq.n	80128e6 <xTaskCheckForTimeOut+0x82>
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	69ba      	ldr	r2, [r7, #24]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d302      	bcc.n	80128e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80128e0:	2301      	movs	r3, #1
 80128e2:	61fb      	str	r3, [r7, #28]
 80128e4:	e015      	b.n	8012912 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	697a      	ldr	r2, [r7, #20]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d20b      	bcs.n	8012908 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	1ad2      	subs	r2, r2, r3
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff ff9b 	bl	8012838 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012902:	2300      	movs	r3, #0
 8012904:	61fb      	str	r3, [r7, #28]
 8012906:	e004      	b.n	8012912 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2200      	movs	r2, #0
 801290c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801290e:	2301      	movs	r3, #1
 8012910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012912:	f000 fc6f 	bl	80131f4 <vPortExitCritical>

	return xReturn;
 8012916:	69fb      	ldr	r3, [r7, #28]
}
 8012918:	4618      	mov	r0, r3
 801291a:	3720      	adds	r7, #32
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	20001420 	.word	0x20001420
 8012924:	20001434 	.word	0x20001434

08012928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012928:	b480      	push	{r7}
 801292a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801292c:	4b03      	ldr	r3, [pc, #12]	; (801293c <vTaskMissedYield+0x14>)
 801292e:	2201      	movs	r2, #1
 8012930:	601a      	str	r2, [r3, #0]
}
 8012932:	bf00      	nop
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr
 801293c:	20001430 	.word	0x20001430

08012940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012948:	f000 f852 	bl	80129f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801294c:	4b06      	ldr	r3, [pc, #24]	; (8012968 <prvIdleTask+0x28>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d9f9      	bls.n	8012948 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012954:	4b05      	ldr	r3, [pc, #20]	; (801296c <prvIdleTask+0x2c>)
 8012956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801295a:	601a      	str	r2, [r3, #0]
 801295c:	f3bf 8f4f 	dsb	sy
 8012960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012964:	e7f0      	b.n	8012948 <prvIdleTask+0x8>
 8012966:	bf00      	nop
 8012968:	20001320 	.word	0x20001320
 801296c:	e000ed04 	.word	0xe000ed04

08012970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012976:	2300      	movs	r3, #0
 8012978:	607b      	str	r3, [r7, #4]
 801297a:	e00c      	b.n	8012996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801297c:	687a      	ldr	r2, [r7, #4]
 801297e:	4613      	mov	r3, r2
 8012980:	009b      	lsls	r3, r3, #2
 8012982:	4413      	add	r3, r2
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	4a12      	ldr	r2, [pc, #72]	; (80129d0 <prvInitialiseTaskLists+0x60>)
 8012988:	4413      	add	r3, r2
 801298a:	4618      	mov	r0, r3
 801298c:	f7fe fe3f 	bl	801160e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	3301      	adds	r3, #1
 8012994:	607b      	str	r3, [r7, #4]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b06      	cmp	r3, #6
 801299a:	d9ef      	bls.n	801297c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801299c:	480d      	ldr	r0, [pc, #52]	; (80129d4 <prvInitialiseTaskLists+0x64>)
 801299e:	f7fe fe36 	bl	801160e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80129a2:	480d      	ldr	r0, [pc, #52]	; (80129d8 <prvInitialiseTaskLists+0x68>)
 80129a4:	f7fe fe33 	bl	801160e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80129a8:	480c      	ldr	r0, [pc, #48]	; (80129dc <prvInitialiseTaskLists+0x6c>)
 80129aa:	f7fe fe30 	bl	801160e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80129ae:	480c      	ldr	r0, [pc, #48]	; (80129e0 <prvInitialiseTaskLists+0x70>)
 80129b0:	f7fe fe2d 	bl	801160e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80129b4:	480b      	ldr	r0, [pc, #44]	; (80129e4 <prvInitialiseTaskLists+0x74>)
 80129b6:	f7fe fe2a 	bl	801160e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80129ba:	4b0b      	ldr	r3, [pc, #44]	; (80129e8 <prvInitialiseTaskLists+0x78>)
 80129bc:	4a05      	ldr	r2, [pc, #20]	; (80129d4 <prvInitialiseTaskLists+0x64>)
 80129be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80129c0:	4b0a      	ldr	r3, [pc, #40]	; (80129ec <prvInitialiseTaskLists+0x7c>)
 80129c2:	4a05      	ldr	r2, [pc, #20]	; (80129d8 <prvInitialiseTaskLists+0x68>)
 80129c4:	601a      	str	r2, [r3, #0]
}
 80129c6:	bf00      	nop
 80129c8:	3708      	adds	r7, #8
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	20001320 	.word	0x20001320
 80129d4:	200013ac 	.word	0x200013ac
 80129d8:	200013c0 	.word	0x200013c0
 80129dc:	200013dc 	.word	0x200013dc
 80129e0:	200013f0 	.word	0x200013f0
 80129e4:	20001408 	.word	0x20001408
 80129e8:	200013d4 	.word	0x200013d4
 80129ec:	200013d8 	.word	0x200013d8

080129f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80129f6:	e019      	b.n	8012a2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80129f8:	f000 fbcc 	bl	8013194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129fc:	4b10      	ldr	r3, [pc, #64]	; (8012a40 <prvCheckTasksWaitingTermination+0x50>)
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	68db      	ldr	r3, [r3, #12]
 8012a02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	3304      	adds	r3, #4
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f7fe fe8a 	bl	8011722 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012a0e:	4b0d      	ldr	r3, [pc, #52]	; (8012a44 <prvCheckTasksWaitingTermination+0x54>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	3b01      	subs	r3, #1
 8012a14:	4a0b      	ldr	r2, [pc, #44]	; (8012a44 <prvCheckTasksWaitingTermination+0x54>)
 8012a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012a18:	4b0b      	ldr	r3, [pc, #44]	; (8012a48 <prvCheckTasksWaitingTermination+0x58>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	4a0a      	ldr	r2, [pc, #40]	; (8012a48 <prvCheckTasksWaitingTermination+0x58>)
 8012a20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012a22:	f000 fbe7 	bl	80131f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f000 f810 	bl	8012a4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a2c:	4b06      	ldr	r3, [pc, #24]	; (8012a48 <prvCheckTasksWaitingTermination+0x58>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d1e1      	bne.n	80129f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012a34:	bf00      	nop
 8012a36:	bf00      	nop
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	200013f0 	.word	0x200013f0
 8012a44:	2000141c 	.word	0x2000141c
 8012a48:	20001404 	.word	0x20001404

08012a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	334c      	adds	r3, #76	; 0x4c
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f002 f8ad 	bl	8014bb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d108      	bne.n	8012a7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f000 fd3f 	bl	80134f0 <vPortFree>
				vPortFree( pxTCB );
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f000 fd3c 	bl	80134f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012a78:	e018      	b.n	8012aac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d103      	bne.n	8012a8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f000 fd33 	bl	80134f0 <vPortFree>
	}
 8012a8a:	e00f      	b.n	8012aac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8012a92:	2b02      	cmp	r3, #2
 8012a94:	d00a      	beq.n	8012aac <prvDeleteTCB+0x60>
	__asm volatile
 8012a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9a:	f383 8811 	msr	BASEPRI, r3
 8012a9e:	f3bf 8f6f 	isb	sy
 8012aa2:	f3bf 8f4f 	dsb	sy
 8012aa6:	60fb      	str	r3, [r7, #12]
}
 8012aa8:	bf00      	nop
 8012aaa:	e7fe      	b.n	8012aaa <prvDeleteTCB+0x5e>
	}
 8012aac:	bf00      	nop
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012aba:	4b0c      	ldr	r3, [pc, #48]	; (8012aec <prvResetNextTaskUnblockTime+0x38>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d104      	bne.n	8012ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012ac4:	4b0a      	ldr	r3, [pc, #40]	; (8012af0 <prvResetNextTaskUnblockTime+0x3c>)
 8012ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8012aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012acc:	e008      	b.n	8012ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ace:	4b07      	ldr	r3, [pc, #28]	; (8012aec <prvResetNextTaskUnblockTime+0x38>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	68db      	ldr	r3, [r3, #12]
 8012ad4:	68db      	ldr	r3, [r3, #12]
 8012ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	4a04      	ldr	r2, [pc, #16]	; (8012af0 <prvResetNextTaskUnblockTime+0x3c>)
 8012ade:	6013      	str	r3, [r2, #0]
}
 8012ae0:	bf00      	nop
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr
 8012aec:	200013d4 	.word	0x200013d4
 8012af0:	2000143c 	.word	0x2000143c

08012af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012af4:	b480      	push	{r7}
 8012af6:	b083      	sub	sp, #12
 8012af8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012afa:	4b0b      	ldr	r3, [pc, #44]	; (8012b28 <xTaskGetSchedulerState+0x34>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d102      	bne.n	8012b08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012b02:	2301      	movs	r3, #1
 8012b04:	607b      	str	r3, [r7, #4]
 8012b06:	e008      	b.n	8012b1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b08:	4b08      	ldr	r3, [pc, #32]	; (8012b2c <xTaskGetSchedulerState+0x38>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d102      	bne.n	8012b16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012b10:	2302      	movs	r3, #2
 8012b12:	607b      	str	r3, [r7, #4]
 8012b14:	e001      	b.n	8012b1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012b16:	2300      	movs	r3, #0
 8012b18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012b1a:	687b      	ldr	r3, [r7, #4]
	}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	370c      	adds	r7, #12
 8012b20:	46bd      	mov	sp, r7
 8012b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b26:	4770      	bx	lr
 8012b28:	20001428 	.word	0x20001428
 8012b2c:	20001444 	.word	0x20001444

08012b30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b084      	sub	sp, #16
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d05e      	beq.n	8012c04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b4a:	4b31      	ldr	r3, [pc, #196]	; (8012c10 <xTaskPriorityInherit+0xe0>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d24e      	bcs.n	8012bf2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	699b      	ldr	r3, [r3, #24]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	db06      	blt.n	8012b6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b5c:	4b2c      	ldr	r3, [pc, #176]	; (8012c10 <xTaskPriorityInherit+0xe0>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b62:	f1c3 0207 	rsb	r2, r3, #7
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	6959      	ldr	r1, [r3, #20]
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b72:	4613      	mov	r3, r2
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	4413      	add	r3, r2
 8012b78:	009b      	lsls	r3, r3, #2
 8012b7a:	4a26      	ldr	r2, [pc, #152]	; (8012c14 <xTaskPriorityInherit+0xe4>)
 8012b7c:	4413      	add	r3, r2
 8012b7e:	4299      	cmp	r1, r3
 8012b80:	d12f      	bne.n	8012be2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	3304      	adds	r3, #4
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7fe fdcb 	bl	8011722 <uxListRemove>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d10a      	bne.n	8012ba8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b96:	2201      	movs	r2, #1
 8012b98:	fa02 f303 	lsl.w	r3, r2, r3
 8012b9c:	43da      	mvns	r2, r3
 8012b9e:	4b1e      	ldr	r3, [pc, #120]	; (8012c18 <xTaskPriorityInherit+0xe8>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	4013      	ands	r3, r2
 8012ba4:	4a1c      	ldr	r2, [pc, #112]	; (8012c18 <xTaskPriorityInherit+0xe8>)
 8012ba6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ba8:	4b19      	ldr	r3, [pc, #100]	; (8012c10 <xTaskPriorityInherit+0xe0>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	409a      	lsls	r2, r3
 8012bba:	4b17      	ldr	r3, [pc, #92]	; (8012c18 <xTaskPriorityInherit+0xe8>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4313      	orrs	r3, r2
 8012bc0:	4a15      	ldr	r2, [pc, #84]	; (8012c18 <xTaskPriorityInherit+0xe8>)
 8012bc2:	6013      	str	r3, [r2, #0]
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bc8:	4613      	mov	r3, r2
 8012bca:	009b      	lsls	r3, r3, #2
 8012bcc:	4413      	add	r3, r2
 8012bce:	009b      	lsls	r3, r3, #2
 8012bd0:	4a10      	ldr	r2, [pc, #64]	; (8012c14 <xTaskPriorityInherit+0xe4>)
 8012bd2:	441a      	add	r2, r3
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	4619      	mov	r1, r3
 8012bda:	4610      	mov	r0, r2
 8012bdc:	f7fe fd44 	bl	8011668 <vListInsertEnd>
 8012be0:	e004      	b.n	8012bec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012be2:	4b0b      	ldr	r3, [pc, #44]	; (8012c10 <xTaskPriorityInherit+0xe0>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012bec:	2301      	movs	r3, #1
 8012bee:	60fb      	str	r3, [r7, #12]
 8012bf0:	e008      	b.n	8012c04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012bf6:	4b06      	ldr	r3, [pc, #24]	; (8012c10 <xTaskPriorityInherit+0xe0>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d201      	bcs.n	8012c04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012c00:	2301      	movs	r3, #1
 8012c02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c04:	68fb      	ldr	r3, [r7, #12]
	}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3710      	adds	r7, #16
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	2000131c 	.word	0x2000131c
 8012c14:	20001320 	.word	0x20001320
 8012c18:	20001424 	.word	0x20001424

08012c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b086      	sub	sp, #24
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d06e      	beq.n	8012d10 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012c32:	4b3a      	ldr	r3, [pc, #232]	; (8012d1c <xTaskPriorityDisinherit+0x100>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	693a      	ldr	r2, [r7, #16]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d00a      	beq.n	8012c52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c40:	f383 8811 	msr	BASEPRI, r3
 8012c44:	f3bf 8f6f 	isb	sy
 8012c48:	f3bf 8f4f 	dsb	sy
 8012c4c:	60fb      	str	r3, [r7, #12]
}
 8012c4e:	bf00      	nop
 8012c50:	e7fe      	b.n	8012c50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d10a      	bne.n	8012c70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5e:	f383 8811 	msr	BASEPRI, r3
 8012c62:	f3bf 8f6f 	isb	sy
 8012c66:	f3bf 8f4f 	dsb	sy
 8012c6a:	60bb      	str	r3, [r7, #8]
}
 8012c6c:	bf00      	nop
 8012c6e:	e7fe      	b.n	8012c6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c74:	1e5a      	subs	r2, r3, #1
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c7e:	693b      	ldr	r3, [r7, #16]
 8012c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d044      	beq.n	8012d10 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d140      	bne.n	8012d10 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	3304      	adds	r3, #4
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fe fd45 	bl	8011722 <uxListRemove>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d115      	bne.n	8012cca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ca2:	491f      	ldr	r1, [pc, #124]	; (8012d20 <xTaskPriorityDisinherit+0x104>)
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	4413      	add	r3, r2
 8012caa:	009b      	lsls	r3, r3, #2
 8012cac:	440b      	add	r3, r1
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d10a      	bne.n	8012cca <xTaskPriorityDisinherit+0xae>
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cb8:	2201      	movs	r2, #1
 8012cba:	fa02 f303 	lsl.w	r3, r2, r3
 8012cbe:	43da      	mvns	r2, r3
 8012cc0:	4b18      	ldr	r3, [pc, #96]	; (8012d24 <xTaskPriorityDisinherit+0x108>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4013      	ands	r3, r2
 8012cc6:	4a17      	ldr	r2, [pc, #92]	; (8012d24 <xTaskPriorityDisinherit+0x108>)
 8012cc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cd6:	f1c3 0207 	rsb	r2, r3, #7
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	409a      	lsls	r2, r3
 8012ce6:	4b0f      	ldr	r3, [pc, #60]	; (8012d24 <xTaskPriorityDisinherit+0x108>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	4313      	orrs	r3, r2
 8012cec:	4a0d      	ldr	r2, [pc, #52]	; (8012d24 <xTaskPriorityDisinherit+0x108>)
 8012cee:	6013      	str	r3, [r2, #0]
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	009b      	lsls	r3, r3, #2
 8012cf8:	4413      	add	r3, r2
 8012cfa:	009b      	lsls	r3, r3, #2
 8012cfc:	4a08      	ldr	r2, [pc, #32]	; (8012d20 <xTaskPriorityDisinherit+0x104>)
 8012cfe:	441a      	add	r2, r3
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	3304      	adds	r3, #4
 8012d04:	4619      	mov	r1, r3
 8012d06:	4610      	mov	r0, r2
 8012d08:	f7fe fcae 	bl	8011668 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012d10:	697b      	ldr	r3, [r7, #20]
	}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3718      	adds	r7, #24
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	2000131c 	.word	0x2000131c
 8012d20:	20001320 	.word	0x20001320
 8012d24:	20001424 	.word	0x20001424

08012d28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b088      	sub	sp, #32
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012d36:	2301      	movs	r3, #1
 8012d38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d077      	beq.n	8012e30 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012d40:	69bb      	ldr	r3, [r7, #24]
 8012d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d10a      	bne.n	8012d5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d4c:	f383 8811 	msr	BASEPRI, r3
 8012d50:	f3bf 8f6f 	isb	sy
 8012d54:	f3bf 8f4f 	dsb	sy
 8012d58:	60fb      	str	r3, [r7, #12]
}
 8012d5a:	bf00      	nop
 8012d5c:	e7fe      	b.n	8012d5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d62:	683a      	ldr	r2, [r7, #0]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d902      	bls.n	8012d6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	61fb      	str	r3, [r7, #28]
 8012d6c:	e002      	b.n	8012d74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d78:	69fa      	ldr	r2, [r7, #28]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d058      	beq.n	8012e30 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012d7e:	69bb      	ldr	r3, [r7, #24]
 8012d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d82:	697a      	ldr	r2, [r7, #20]
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d153      	bne.n	8012e30 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012d88:	4b2b      	ldr	r3, [pc, #172]	; (8012e38 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	69ba      	ldr	r2, [r7, #24]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d10a      	bne.n	8012da8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d96:	f383 8811 	msr	BASEPRI, r3
 8012d9a:	f3bf 8f6f 	isb	sy
 8012d9e:	f3bf 8f4f 	dsb	sy
 8012da2:	60bb      	str	r3, [r7, #8]
}
 8012da4:	bf00      	nop
 8012da6:	e7fe      	b.n	8012da6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012dae:	69bb      	ldr	r3, [r7, #24]
 8012db0:	69fa      	ldr	r2, [r7, #28]
 8012db2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	699b      	ldr	r3, [r3, #24]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	db04      	blt.n	8012dc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dbc:	69fb      	ldr	r3, [r7, #28]
 8012dbe:	f1c3 0207 	rsb	r2, r3, #7
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	6959      	ldr	r1, [r3, #20]
 8012dca:	693a      	ldr	r2, [r7, #16]
 8012dcc:	4613      	mov	r3, r2
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	4413      	add	r3, r2
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	4a19      	ldr	r2, [pc, #100]	; (8012e3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8012dd6:	4413      	add	r3, r2
 8012dd8:	4299      	cmp	r1, r3
 8012dda:	d129      	bne.n	8012e30 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	3304      	adds	r3, #4
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fe fc9e 	bl	8011722 <uxListRemove>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d10a      	bne.n	8012e02 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012dec:	69bb      	ldr	r3, [r7, #24]
 8012dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012df0:	2201      	movs	r2, #1
 8012df2:	fa02 f303 	lsl.w	r3, r2, r3
 8012df6:	43da      	mvns	r2, r3
 8012df8:	4b11      	ldr	r3, [pc, #68]	; (8012e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	4a10      	ldr	r2, [pc, #64]	; (8012e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012e00:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e06:	2201      	movs	r2, #1
 8012e08:	409a      	lsls	r2, r3
 8012e0a:	4b0d      	ldr	r3, [pc, #52]	; (8012e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	4313      	orrs	r3, r2
 8012e10:	4a0b      	ldr	r2, [pc, #44]	; (8012e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012e12:	6013      	str	r3, [r2, #0]
 8012e14:	69bb      	ldr	r3, [r7, #24]
 8012e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e18:	4613      	mov	r3, r2
 8012e1a:	009b      	lsls	r3, r3, #2
 8012e1c:	4413      	add	r3, r2
 8012e1e:	009b      	lsls	r3, r3, #2
 8012e20:	4a06      	ldr	r2, [pc, #24]	; (8012e3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8012e22:	441a      	add	r2, r3
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	3304      	adds	r3, #4
 8012e28:	4619      	mov	r1, r3
 8012e2a:	4610      	mov	r0, r2
 8012e2c:	f7fe fc1c 	bl	8011668 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012e30:	bf00      	nop
 8012e32:	3720      	adds	r7, #32
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	2000131c 	.word	0x2000131c
 8012e3c:	20001320 	.word	0x20001320
 8012e40:	20001424 	.word	0x20001424

08012e44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012e44:	b480      	push	{r7}
 8012e46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012e48:	4b07      	ldr	r3, [pc, #28]	; (8012e68 <pvTaskIncrementMutexHeldCount+0x24>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d004      	beq.n	8012e5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012e50:	4b05      	ldr	r3, [pc, #20]	; (8012e68 <pvTaskIncrementMutexHeldCount+0x24>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012e56:	3201      	adds	r2, #1
 8012e58:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012e5a:	4b03      	ldr	r3, [pc, #12]	; (8012e68 <pvTaskIncrementMutexHeldCount+0x24>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
	}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr
 8012e68:	2000131c 	.word	0x2000131c

08012e6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012e76:	4b29      	ldr	r3, [pc, #164]	; (8012f1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e7c:	4b28      	ldr	r3, [pc, #160]	; (8012f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	3304      	adds	r3, #4
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fe fc4d 	bl	8011722 <uxListRemove>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d10b      	bne.n	8012ea6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012e8e:	4b24      	ldr	r3, [pc, #144]	; (8012f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e94:	2201      	movs	r2, #1
 8012e96:	fa02 f303 	lsl.w	r3, r2, r3
 8012e9a:	43da      	mvns	r2, r3
 8012e9c:	4b21      	ldr	r3, [pc, #132]	; (8012f24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	4013      	ands	r3, r2
 8012ea2:	4a20      	ldr	r2, [pc, #128]	; (8012f24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012ea4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eac:	d10a      	bne.n	8012ec4 <prvAddCurrentTaskToDelayedList+0x58>
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d007      	beq.n	8012ec4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012eb4:	4b1a      	ldr	r3, [pc, #104]	; (8012f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	3304      	adds	r3, #4
 8012eba:	4619      	mov	r1, r3
 8012ebc:	481a      	ldr	r0, [pc, #104]	; (8012f28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012ebe:	f7fe fbd3 	bl	8011668 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012ec2:	e026      	b.n	8012f12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012ec4:	68fa      	ldr	r2, [r7, #12]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4413      	add	r3, r2
 8012eca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012ecc:	4b14      	ldr	r3, [pc, #80]	; (8012f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	68ba      	ldr	r2, [r7, #8]
 8012ed2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012ed4:	68ba      	ldr	r2, [r7, #8]
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d209      	bcs.n	8012ef0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012edc:	4b13      	ldr	r3, [pc, #76]	; (8012f2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8012ede:	681a      	ldr	r2, [r3, #0]
 8012ee0:	4b0f      	ldr	r3, [pc, #60]	; (8012f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	3304      	adds	r3, #4
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4610      	mov	r0, r2
 8012eea:	f7fe fbe1 	bl	80116b0 <vListInsert>
}
 8012eee:	e010      	b.n	8012f12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ef0:	4b0f      	ldr	r3, [pc, #60]	; (8012f30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	4b0a      	ldr	r3, [pc, #40]	; (8012f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	3304      	adds	r3, #4
 8012efa:	4619      	mov	r1, r3
 8012efc:	4610      	mov	r0, r2
 8012efe:	f7fe fbd7 	bl	80116b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012f02:	4b0c      	ldr	r3, [pc, #48]	; (8012f34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d202      	bcs.n	8012f12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012f0c:	4a09      	ldr	r2, [pc, #36]	; (8012f34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	6013      	str	r3, [r2, #0]
}
 8012f12:	bf00      	nop
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	20001420 	.word	0x20001420
 8012f20:	2000131c 	.word	0x2000131c
 8012f24:	20001424 	.word	0x20001424
 8012f28:	20001408 	.word	0x20001408
 8012f2c:	200013d8 	.word	0x200013d8
 8012f30:	200013d4 	.word	0x200013d4
 8012f34:	2000143c 	.word	0x2000143c

08012f38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012f38:	b480      	push	{r7}
 8012f3a:	b085      	sub	sp, #20
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	3b04      	subs	r3, #4
 8012f48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	3b04      	subs	r3, #4
 8012f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	f023 0201 	bic.w	r2, r3, #1
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	3b04      	subs	r3, #4
 8012f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012f68:	4a0c      	ldr	r2, [pc, #48]	; (8012f9c <pxPortInitialiseStack+0x64>)
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	3b14      	subs	r3, #20
 8012f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	3b04      	subs	r3, #4
 8012f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f06f 0202 	mvn.w	r2, #2
 8012f86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	3b20      	subs	r3, #32
 8012f8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3714      	adds	r7, #20
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr
 8012f9c:	08012fa1 	.word	0x08012fa1

08012fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b085      	sub	sp, #20
 8012fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012faa:	4b12      	ldr	r3, [pc, #72]	; (8012ff4 <prvTaskExitError+0x54>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb2:	d00a      	beq.n	8012fca <prvTaskExitError+0x2a>
	__asm volatile
 8012fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb8:	f383 8811 	msr	BASEPRI, r3
 8012fbc:	f3bf 8f6f 	isb	sy
 8012fc0:	f3bf 8f4f 	dsb	sy
 8012fc4:	60fb      	str	r3, [r7, #12]
}
 8012fc6:	bf00      	nop
 8012fc8:	e7fe      	b.n	8012fc8 <prvTaskExitError+0x28>
	__asm volatile
 8012fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fce:	f383 8811 	msr	BASEPRI, r3
 8012fd2:	f3bf 8f6f 	isb	sy
 8012fd6:	f3bf 8f4f 	dsb	sy
 8012fda:	60bb      	str	r3, [r7, #8]
}
 8012fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012fde:	bf00      	nop
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d0fc      	beq.n	8012fe0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012fe6:	bf00      	nop
 8012fe8:	bf00      	nop
 8012fea:	3714      	adds	r7, #20
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr
 8012ff4:	2000009c 	.word	0x2000009c
	...

08013000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013000:	4b07      	ldr	r3, [pc, #28]	; (8013020 <pxCurrentTCBConst2>)
 8013002:	6819      	ldr	r1, [r3, #0]
 8013004:	6808      	ldr	r0, [r1, #0]
 8013006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300a:	f380 8809 	msr	PSP, r0
 801300e:	f3bf 8f6f 	isb	sy
 8013012:	f04f 0000 	mov.w	r0, #0
 8013016:	f380 8811 	msr	BASEPRI, r0
 801301a:	4770      	bx	lr
 801301c:	f3af 8000 	nop.w

08013020 <pxCurrentTCBConst2>:
 8013020:	2000131c 	.word	0x2000131c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013024:	bf00      	nop
 8013026:	bf00      	nop

08013028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013028:	4808      	ldr	r0, [pc, #32]	; (801304c <prvPortStartFirstTask+0x24>)
 801302a:	6800      	ldr	r0, [r0, #0]
 801302c:	6800      	ldr	r0, [r0, #0]
 801302e:	f380 8808 	msr	MSP, r0
 8013032:	f04f 0000 	mov.w	r0, #0
 8013036:	f380 8814 	msr	CONTROL, r0
 801303a:	b662      	cpsie	i
 801303c:	b661      	cpsie	f
 801303e:	f3bf 8f4f 	dsb	sy
 8013042:	f3bf 8f6f 	isb	sy
 8013046:	df00      	svc	0
 8013048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801304a:	bf00      	nop
 801304c:	e000ed08 	.word	0xe000ed08

08013050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013056:	4b46      	ldr	r3, [pc, #280]	; (8013170 <xPortStartScheduler+0x120>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	4a46      	ldr	r2, [pc, #280]	; (8013174 <xPortStartScheduler+0x124>)
 801305c:	4293      	cmp	r3, r2
 801305e:	d10a      	bne.n	8013076 <xPortStartScheduler+0x26>
	__asm volatile
 8013060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013064:	f383 8811 	msr	BASEPRI, r3
 8013068:	f3bf 8f6f 	isb	sy
 801306c:	f3bf 8f4f 	dsb	sy
 8013070:	613b      	str	r3, [r7, #16]
}
 8013072:	bf00      	nop
 8013074:	e7fe      	b.n	8013074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013076:	4b3e      	ldr	r3, [pc, #248]	; (8013170 <xPortStartScheduler+0x120>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	4a3f      	ldr	r2, [pc, #252]	; (8013178 <xPortStartScheduler+0x128>)
 801307c:	4293      	cmp	r3, r2
 801307e:	d10a      	bne.n	8013096 <xPortStartScheduler+0x46>
	__asm volatile
 8013080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013084:	f383 8811 	msr	BASEPRI, r3
 8013088:	f3bf 8f6f 	isb	sy
 801308c:	f3bf 8f4f 	dsb	sy
 8013090:	60fb      	str	r3, [r7, #12]
}
 8013092:	bf00      	nop
 8013094:	e7fe      	b.n	8013094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013096:	4b39      	ldr	r3, [pc, #228]	; (801317c <xPortStartScheduler+0x12c>)
 8013098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	b2db      	uxtb	r3, r3
 80130a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	22ff      	movs	r2, #255	; 0xff
 80130a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	b2db      	uxtb	r3, r3
 80130ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80130b0:	78fb      	ldrb	r3, [r7, #3]
 80130b2:	b2db      	uxtb	r3, r3
 80130b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80130b8:	b2da      	uxtb	r2, r3
 80130ba:	4b31      	ldr	r3, [pc, #196]	; (8013180 <xPortStartScheduler+0x130>)
 80130bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80130be:	4b31      	ldr	r3, [pc, #196]	; (8013184 <xPortStartScheduler+0x134>)
 80130c0:	2207      	movs	r2, #7
 80130c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80130c4:	e009      	b.n	80130da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80130c6:	4b2f      	ldr	r3, [pc, #188]	; (8013184 <xPortStartScheduler+0x134>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	3b01      	subs	r3, #1
 80130cc:	4a2d      	ldr	r2, [pc, #180]	; (8013184 <xPortStartScheduler+0x134>)
 80130ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80130d0:	78fb      	ldrb	r3, [r7, #3]
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	005b      	lsls	r3, r3, #1
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80130da:	78fb      	ldrb	r3, [r7, #3]
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130e2:	2b80      	cmp	r3, #128	; 0x80
 80130e4:	d0ef      	beq.n	80130c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80130e6:	4b27      	ldr	r3, [pc, #156]	; (8013184 <xPortStartScheduler+0x134>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f1c3 0307 	rsb	r3, r3, #7
 80130ee:	2b04      	cmp	r3, #4
 80130f0:	d00a      	beq.n	8013108 <xPortStartScheduler+0xb8>
	__asm volatile
 80130f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f6:	f383 8811 	msr	BASEPRI, r3
 80130fa:	f3bf 8f6f 	isb	sy
 80130fe:	f3bf 8f4f 	dsb	sy
 8013102:	60bb      	str	r3, [r7, #8]
}
 8013104:	bf00      	nop
 8013106:	e7fe      	b.n	8013106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013108:	4b1e      	ldr	r3, [pc, #120]	; (8013184 <xPortStartScheduler+0x134>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	021b      	lsls	r3, r3, #8
 801310e:	4a1d      	ldr	r2, [pc, #116]	; (8013184 <xPortStartScheduler+0x134>)
 8013110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013112:	4b1c      	ldr	r3, [pc, #112]	; (8013184 <xPortStartScheduler+0x134>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801311a:	4a1a      	ldr	r2, [pc, #104]	; (8013184 <xPortStartScheduler+0x134>)
 801311c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	b2da      	uxtb	r2, r3
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013126:	4b18      	ldr	r3, [pc, #96]	; (8013188 <xPortStartScheduler+0x138>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	4a17      	ldr	r2, [pc, #92]	; (8013188 <xPortStartScheduler+0x138>)
 801312c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013132:	4b15      	ldr	r3, [pc, #84]	; (8013188 <xPortStartScheduler+0x138>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	4a14      	ldr	r2, [pc, #80]	; (8013188 <xPortStartScheduler+0x138>)
 8013138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801313c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801313e:	f000 f8dd 	bl	80132fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013142:	4b12      	ldr	r3, [pc, #72]	; (801318c <xPortStartScheduler+0x13c>)
 8013144:	2200      	movs	r2, #0
 8013146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013148:	f000 f8fc 	bl	8013344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801314c:	4b10      	ldr	r3, [pc, #64]	; (8013190 <xPortStartScheduler+0x140>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	4a0f      	ldr	r2, [pc, #60]	; (8013190 <xPortStartScheduler+0x140>)
 8013152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013158:	f7ff ff66 	bl	8013028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801315c:	f7ff fa84 	bl	8012668 <vTaskSwitchContext>
	prvTaskExitError();
 8013160:	f7ff ff1e 	bl	8012fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013164:	2300      	movs	r3, #0
}
 8013166:	4618      	mov	r0, r3
 8013168:	3718      	adds	r7, #24
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	e000ed00 	.word	0xe000ed00
 8013174:	410fc271 	.word	0x410fc271
 8013178:	410fc270 	.word	0x410fc270
 801317c:	e000e400 	.word	0xe000e400
 8013180:	20001448 	.word	0x20001448
 8013184:	2000144c 	.word	0x2000144c
 8013188:	e000ed20 	.word	0xe000ed20
 801318c:	2000009c 	.word	0x2000009c
 8013190:	e000ef34 	.word	0xe000ef34

08013194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013194:	b480      	push	{r7}
 8013196:	b083      	sub	sp, #12
 8013198:	af00      	add	r7, sp, #0
	__asm volatile
 801319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319e:	f383 8811 	msr	BASEPRI, r3
 80131a2:	f3bf 8f6f 	isb	sy
 80131a6:	f3bf 8f4f 	dsb	sy
 80131aa:	607b      	str	r3, [r7, #4]
}
 80131ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80131ae:	4b0f      	ldr	r3, [pc, #60]	; (80131ec <vPortEnterCritical+0x58>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	3301      	adds	r3, #1
 80131b4:	4a0d      	ldr	r2, [pc, #52]	; (80131ec <vPortEnterCritical+0x58>)
 80131b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80131b8:	4b0c      	ldr	r3, [pc, #48]	; (80131ec <vPortEnterCritical+0x58>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2b01      	cmp	r3, #1
 80131be:	d10f      	bne.n	80131e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80131c0:	4b0b      	ldr	r3, [pc, #44]	; (80131f0 <vPortEnterCritical+0x5c>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	b2db      	uxtb	r3, r3
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d00a      	beq.n	80131e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80131ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ce:	f383 8811 	msr	BASEPRI, r3
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	f3bf 8f4f 	dsb	sy
 80131da:	603b      	str	r3, [r7, #0]
}
 80131dc:	bf00      	nop
 80131de:	e7fe      	b.n	80131de <vPortEnterCritical+0x4a>
	}
}
 80131e0:	bf00      	nop
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr
 80131ec:	2000009c 	.word	0x2000009c
 80131f0:	e000ed04 	.word	0xe000ed04

080131f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80131f4:	b480      	push	{r7}
 80131f6:	b083      	sub	sp, #12
 80131f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80131fa:	4b12      	ldr	r3, [pc, #72]	; (8013244 <vPortExitCritical+0x50>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d10a      	bne.n	8013218 <vPortExitCritical+0x24>
	__asm volatile
 8013202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013206:	f383 8811 	msr	BASEPRI, r3
 801320a:	f3bf 8f6f 	isb	sy
 801320e:	f3bf 8f4f 	dsb	sy
 8013212:	607b      	str	r3, [r7, #4]
}
 8013214:	bf00      	nop
 8013216:	e7fe      	b.n	8013216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013218:	4b0a      	ldr	r3, [pc, #40]	; (8013244 <vPortExitCritical+0x50>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	3b01      	subs	r3, #1
 801321e:	4a09      	ldr	r2, [pc, #36]	; (8013244 <vPortExitCritical+0x50>)
 8013220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013222:	4b08      	ldr	r3, [pc, #32]	; (8013244 <vPortExitCritical+0x50>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d105      	bne.n	8013236 <vPortExitCritical+0x42>
 801322a:	2300      	movs	r3, #0
 801322c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013236:	bf00      	nop
 8013238:	370c      	adds	r7, #12
 801323a:	46bd      	mov	sp, r7
 801323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013240:	4770      	bx	lr
 8013242:	bf00      	nop
 8013244:	2000009c 	.word	0x2000009c
	...

08013250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013250:	f3ef 8009 	mrs	r0, PSP
 8013254:	f3bf 8f6f 	isb	sy
 8013258:	4b15      	ldr	r3, [pc, #84]	; (80132b0 <pxCurrentTCBConst>)
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	f01e 0f10 	tst.w	lr, #16
 8013260:	bf08      	it	eq
 8013262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801326a:	6010      	str	r0, [r2, #0]
 801326c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013274:	f380 8811 	msr	BASEPRI, r0
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	f3bf 8f6f 	isb	sy
 8013280:	f7ff f9f2 	bl	8012668 <vTaskSwitchContext>
 8013284:	f04f 0000 	mov.w	r0, #0
 8013288:	f380 8811 	msr	BASEPRI, r0
 801328c:	bc09      	pop	{r0, r3}
 801328e:	6819      	ldr	r1, [r3, #0]
 8013290:	6808      	ldr	r0, [r1, #0]
 8013292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013296:	f01e 0f10 	tst.w	lr, #16
 801329a:	bf08      	it	eq
 801329c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80132a0:	f380 8809 	msr	PSP, r0
 80132a4:	f3bf 8f6f 	isb	sy
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	f3af 8000 	nop.w

080132b0 <pxCurrentTCBConst>:
 80132b0:	2000131c 	.word	0x2000131c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80132b4:	bf00      	nop
 80132b6:	bf00      	nop

080132b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
	__asm volatile
 80132be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132c2:	f383 8811 	msr	BASEPRI, r3
 80132c6:	f3bf 8f6f 	isb	sy
 80132ca:	f3bf 8f4f 	dsb	sy
 80132ce:	607b      	str	r3, [r7, #4]
}
 80132d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80132d2:	f7ff f911 	bl	80124f8 <xTaskIncrementTick>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d003      	beq.n	80132e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80132dc:	4b06      	ldr	r3, [pc, #24]	; (80132f8 <SysTick_Handler+0x40>)
 80132de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132e2:	601a      	str	r2, [r3, #0]
 80132e4:	2300      	movs	r3, #0
 80132e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	f383 8811 	msr	BASEPRI, r3
}
 80132ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80132f0:	bf00      	nop
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	e000ed04 	.word	0xe000ed04

080132fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80132fc:	b480      	push	{r7}
 80132fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013300:	4b0b      	ldr	r3, [pc, #44]	; (8013330 <vPortSetupTimerInterrupt+0x34>)
 8013302:	2200      	movs	r2, #0
 8013304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013306:	4b0b      	ldr	r3, [pc, #44]	; (8013334 <vPortSetupTimerInterrupt+0x38>)
 8013308:	2200      	movs	r2, #0
 801330a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801330c:	4b0a      	ldr	r3, [pc, #40]	; (8013338 <vPortSetupTimerInterrupt+0x3c>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4a0a      	ldr	r2, [pc, #40]	; (801333c <vPortSetupTimerInterrupt+0x40>)
 8013312:	fba2 2303 	umull	r2, r3, r2, r3
 8013316:	099b      	lsrs	r3, r3, #6
 8013318:	4a09      	ldr	r2, [pc, #36]	; (8013340 <vPortSetupTimerInterrupt+0x44>)
 801331a:	3b01      	subs	r3, #1
 801331c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801331e:	4b04      	ldr	r3, [pc, #16]	; (8013330 <vPortSetupTimerInterrupt+0x34>)
 8013320:	2207      	movs	r2, #7
 8013322:	601a      	str	r2, [r3, #0]
}
 8013324:	bf00      	nop
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr
 801332e:	bf00      	nop
 8013330:	e000e010 	.word	0xe000e010
 8013334:	e000e018 	.word	0xe000e018
 8013338:	20000014 	.word	0x20000014
 801333c:	10624dd3 	.word	0x10624dd3
 8013340:	e000e014 	.word	0xe000e014

08013344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013354 <vPortEnableVFP+0x10>
 8013348:	6801      	ldr	r1, [r0, #0]
 801334a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801334e:	6001      	str	r1, [r0, #0]
 8013350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013352:	bf00      	nop
 8013354:	e000ed88 	.word	0xe000ed88

08013358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b08a      	sub	sp, #40	; 0x28
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013360:	2300      	movs	r3, #0
 8013362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013364:	f7ff f81e 	bl	80123a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013368:	4b5b      	ldr	r3, [pc, #364]	; (80134d8 <pvPortMalloc+0x180>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d101      	bne.n	8013374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013370:	f000 f920 	bl	80135b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013374:	4b59      	ldr	r3, [pc, #356]	; (80134dc <pvPortMalloc+0x184>)
 8013376:	681a      	ldr	r2, [r3, #0]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	4013      	ands	r3, r2
 801337c:	2b00      	cmp	r3, #0
 801337e:	f040 8093 	bne.w	80134a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d01d      	beq.n	80133c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013388:	2208      	movs	r2, #8
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4413      	add	r3, r2
 801338e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f003 0307 	and.w	r3, r3, #7
 8013396:	2b00      	cmp	r3, #0
 8013398:	d014      	beq.n	80133c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	f023 0307 	bic.w	r3, r3, #7
 80133a0:	3308      	adds	r3, #8
 80133a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f003 0307 	and.w	r3, r3, #7
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d00a      	beq.n	80133c4 <pvPortMalloc+0x6c>
	__asm volatile
 80133ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b2:	f383 8811 	msr	BASEPRI, r3
 80133b6:	f3bf 8f6f 	isb	sy
 80133ba:	f3bf 8f4f 	dsb	sy
 80133be:	617b      	str	r3, [r7, #20]
}
 80133c0:	bf00      	nop
 80133c2:	e7fe      	b.n	80133c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d06e      	beq.n	80134a8 <pvPortMalloc+0x150>
 80133ca:	4b45      	ldr	r3, [pc, #276]	; (80134e0 <pvPortMalloc+0x188>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d869      	bhi.n	80134a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80133d4:	4b43      	ldr	r3, [pc, #268]	; (80134e4 <pvPortMalloc+0x18c>)
 80133d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80133d8:	4b42      	ldr	r3, [pc, #264]	; (80134e4 <pvPortMalloc+0x18c>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80133de:	e004      	b.n	80133ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80133e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80133e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80133ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ec:	685b      	ldr	r3, [r3, #4]
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d903      	bls.n	80133fc <pvPortMalloc+0xa4>
 80133f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d1f1      	bne.n	80133e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80133fc:	4b36      	ldr	r3, [pc, #216]	; (80134d8 <pvPortMalloc+0x180>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013402:	429a      	cmp	r2, r3
 8013404:	d050      	beq.n	80134a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013406:	6a3b      	ldr	r3, [r7, #32]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	2208      	movs	r2, #8
 801340c:	4413      	add	r3, r2
 801340e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	6a3b      	ldr	r3, [r7, #32]
 8013416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341a:	685a      	ldr	r2, [r3, #4]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	1ad2      	subs	r2, r2, r3
 8013420:	2308      	movs	r3, #8
 8013422:	005b      	lsls	r3, r3, #1
 8013424:	429a      	cmp	r2, r3
 8013426:	d91f      	bls.n	8013468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	4413      	add	r3, r2
 801342e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013430:	69bb      	ldr	r3, [r7, #24]
 8013432:	f003 0307 	and.w	r3, r3, #7
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00a      	beq.n	8013450 <pvPortMalloc+0xf8>
	__asm volatile
 801343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343e:	f383 8811 	msr	BASEPRI, r3
 8013442:	f3bf 8f6f 	isb	sy
 8013446:	f3bf 8f4f 	dsb	sy
 801344a:	613b      	str	r3, [r7, #16]
}
 801344c:	bf00      	nop
 801344e:	e7fe      	b.n	801344e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013452:	685a      	ldr	r2, [r3, #4]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	1ad2      	subs	r2, r2, r3
 8013458:	69bb      	ldr	r3, [r7, #24]
 801345a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013462:	69b8      	ldr	r0, [r7, #24]
 8013464:	f000 f908 	bl	8013678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013468:	4b1d      	ldr	r3, [pc, #116]	; (80134e0 <pvPortMalloc+0x188>)
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	4a1b      	ldr	r2, [pc, #108]	; (80134e0 <pvPortMalloc+0x188>)
 8013474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013476:	4b1a      	ldr	r3, [pc, #104]	; (80134e0 <pvPortMalloc+0x188>)
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	4b1b      	ldr	r3, [pc, #108]	; (80134e8 <pvPortMalloc+0x190>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	429a      	cmp	r2, r3
 8013480:	d203      	bcs.n	801348a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013482:	4b17      	ldr	r3, [pc, #92]	; (80134e0 <pvPortMalloc+0x188>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4a18      	ldr	r2, [pc, #96]	; (80134e8 <pvPortMalloc+0x190>)
 8013488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348c:	685a      	ldr	r2, [r3, #4]
 801348e:	4b13      	ldr	r3, [pc, #76]	; (80134dc <pvPortMalloc+0x184>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	431a      	orrs	r2, r3
 8013494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349a:	2200      	movs	r2, #0
 801349c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801349e:	4b13      	ldr	r3, [pc, #76]	; (80134ec <pvPortMalloc+0x194>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	3301      	adds	r3, #1
 80134a4:	4a11      	ldr	r2, [pc, #68]	; (80134ec <pvPortMalloc+0x194>)
 80134a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80134a8:	f7fe ff8a 	bl	80123c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	f003 0307 	and.w	r3, r3, #7
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d00a      	beq.n	80134cc <pvPortMalloc+0x174>
	__asm volatile
 80134b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ba:	f383 8811 	msr	BASEPRI, r3
 80134be:	f3bf 8f6f 	isb	sy
 80134c2:	f3bf 8f4f 	dsb	sy
 80134c6:	60fb      	str	r3, [r7, #12]
}
 80134c8:	bf00      	nop
 80134ca:	e7fe      	b.n	80134ca <pvPortMalloc+0x172>
	return pvReturn;
 80134cc:	69fb      	ldr	r3, [r7, #28]
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3728      	adds	r7, #40	; 0x28
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	20005058 	.word	0x20005058
 80134dc:	2000506c 	.word	0x2000506c
 80134e0:	2000505c 	.word	0x2000505c
 80134e4:	20005050 	.word	0x20005050
 80134e8:	20005060 	.word	0x20005060
 80134ec:	20005064 	.word	0x20005064

080134f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d04d      	beq.n	801359e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013502:	2308      	movs	r3, #8
 8013504:	425b      	negs	r3, r3
 8013506:	697a      	ldr	r2, [r7, #20]
 8013508:	4413      	add	r3, r2
 801350a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	685a      	ldr	r2, [r3, #4]
 8013514:	4b24      	ldr	r3, [pc, #144]	; (80135a8 <vPortFree+0xb8>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4013      	ands	r3, r2
 801351a:	2b00      	cmp	r3, #0
 801351c:	d10a      	bne.n	8013534 <vPortFree+0x44>
	__asm volatile
 801351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013522:	f383 8811 	msr	BASEPRI, r3
 8013526:	f3bf 8f6f 	isb	sy
 801352a:	f3bf 8f4f 	dsb	sy
 801352e:	60fb      	str	r3, [r7, #12]
}
 8013530:	bf00      	nop
 8013532:	e7fe      	b.n	8013532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00a      	beq.n	8013552 <vPortFree+0x62>
	__asm volatile
 801353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013540:	f383 8811 	msr	BASEPRI, r3
 8013544:	f3bf 8f6f 	isb	sy
 8013548:	f3bf 8f4f 	dsb	sy
 801354c:	60bb      	str	r3, [r7, #8]
}
 801354e:	bf00      	nop
 8013550:	e7fe      	b.n	8013550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	685a      	ldr	r2, [r3, #4]
 8013556:	4b14      	ldr	r3, [pc, #80]	; (80135a8 <vPortFree+0xb8>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	4013      	ands	r3, r2
 801355c:	2b00      	cmp	r3, #0
 801355e:	d01e      	beq.n	801359e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d11a      	bne.n	801359e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	685a      	ldr	r2, [r3, #4]
 801356c:	4b0e      	ldr	r3, [pc, #56]	; (80135a8 <vPortFree+0xb8>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	43db      	mvns	r3, r3
 8013572:	401a      	ands	r2, r3
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013578:	f7fe ff14 	bl	80123a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801357c:	693b      	ldr	r3, [r7, #16]
 801357e:	685a      	ldr	r2, [r3, #4]
 8013580:	4b0a      	ldr	r3, [pc, #40]	; (80135ac <vPortFree+0xbc>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	4413      	add	r3, r2
 8013586:	4a09      	ldr	r2, [pc, #36]	; (80135ac <vPortFree+0xbc>)
 8013588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801358a:	6938      	ldr	r0, [r7, #16]
 801358c:	f000 f874 	bl	8013678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013590:	4b07      	ldr	r3, [pc, #28]	; (80135b0 <vPortFree+0xc0>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	3301      	adds	r3, #1
 8013596:	4a06      	ldr	r2, [pc, #24]	; (80135b0 <vPortFree+0xc0>)
 8013598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801359a:	f7fe ff11 	bl	80123c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801359e:	bf00      	nop
 80135a0:	3718      	adds	r7, #24
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop
 80135a8:	2000506c 	.word	0x2000506c
 80135ac:	2000505c 	.word	0x2000505c
 80135b0:	20005068 	.word	0x20005068

080135b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80135b4:	b480      	push	{r7}
 80135b6:	b085      	sub	sp, #20
 80135b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80135ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80135be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80135c0:	4b27      	ldr	r3, [pc, #156]	; (8013660 <prvHeapInit+0xac>)
 80135c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f003 0307 	and.w	r3, r3, #7
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d00c      	beq.n	80135e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	3307      	adds	r3, #7
 80135d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f023 0307 	bic.w	r3, r3, #7
 80135da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80135dc:	68ba      	ldr	r2, [r7, #8]
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	4a1f      	ldr	r2, [pc, #124]	; (8013660 <prvHeapInit+0xac>)
 80135e4:	4413      	add	r3, r2
 80135e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80135ec:	4a1d      	ldr	r2, [pc, #116]	; (8013664 <prvHeapInit+0xb0>)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80135f2:	4b1c      	ldr	r3, [pc, #112]	; (8013664 <prvHeapInit+0xb0>)
 80135f4:	2200      	movs	r2, #0
 80135f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	68ba      	ldr	r2, [r7, #8]
 80135fc:	4413      	add	r3, r2
 80135fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013600:	2208      	movs	r2, #8
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	1a9b      	subs	r3, r3, r2
 8013606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f023 0307 	bic.w	r3, r3, #7
 801360e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	4a15      	ldr	r2, [pc, #84]	; (8013668 <prvHeapInit+0xb4>)
 8013614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013616:	4b14      	ldr	r3, [pc, #80]	; (8013668 <prvHeapInit+0xb4>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	2200      	movs	r2, #0
 801361c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801361e:	4b12      	ldr	r3, [pc, #72]	; (8013668 <prvHeapInit+0xb4>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	2200      	movs	r2, #0
 8013624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	68fa      	ldr	r2, [r7, #12]
 801362e:	1ad2      	subs	r2, r2, r3
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013634:	4b0c      	ldr	r3, [pc, #48]	; (8013668 <prvHeapInit+0xb4>)
 8013636:	681a      	ldr	r2, [r3, #0]
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	685b      	ldr	r3, [r3, #4]
 8013640:	4a0a      	ldr	r2, [pc, #40]	; (801366c <prvHeapInit+0xb8>)
 8013642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	4a09      	ldr	r2, [pc, #36]	; (8013670 <prvHeapInit+0xbc>)
 801364a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801364c:	4b09      	ldr	r3, [pc, #36]	; (8013674 <prvHeapInit+0xc0>)
 801364e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013652:	601a      	str	r2, [r3, #0]
}
 8013654:	bf00      	nop
 8013656:	3714      	adds	r7, #20
 8013658:	46bd      	mov	sp, r7
 801365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365e:	4770      	bx	lr
 8013660:	20001450 	.word	0x20001450
 8013664:	20005050 	.word	0x20005050
 8013668:	20005058 	.word	0x20005058
 801366c:	20005060 	.word	0x20005060
 8013670:	2000505c 	.word	0x2000505c
 8013674:	2000506c 	.word	0x2000506c

08013678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013678:	b480      	push	{r7}
 801367a:	b085      	sub	sp, #20
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013680:	4b28      	ldr	r3, [pc, #160]	; (8013724 <prvInsertBlockIntoFreeList+0xac>)
 8013682:	60fb      	str	r3, [r7, #12]
 8013684:	e002      	b.n	801368c <prvInsertBlockIntoFreeList+0x14>
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	60fb      	str	r3, [r7, #12]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	429a      	cmp	r2, r3
 8013694:	d8f7      	bhi.n	8013686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	68ba      	ldr	r2, [r7, #8]
 80136a0:	4413      	add	r3, r2
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d108      	bne.n	80136ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	685a      	ldr	r2, [r3, #4]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	441a      	add	r2, r3
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	68ba      	ldr	r2, [r7, #8]
 80136c4:	441a      	add	r2, r3
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d118      	bne.n	8013700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	4b15      	ldr	r3, [pc, #84]	; (8013728 <prvInsertBlockIntoFreeList+0xb0>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d00d      	beq.n	80136f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	685a      	ldr	r2, [r3, #4]
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	441a      	add	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	601a      	str	r2, [r3, #0]
 80136f4:	e008      	b.n	8013708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80136f6:	4b0c      	ldr	r3, [pc, #48]	; (8013728 <prvInsertBlockIntoFreeList+0xb0>)
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	601a      	str	r2, [r3, #0]
 80136fe:	e003      	b.n	8013708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	681a      	ldr	r2, [r3, #0]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013708:	68fa      	ldr	r2, [r7, #12]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	429a      	cmp	r2, r3
 801370e:	d002      	beq.n	8013716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013716:	bf00      	nop
 8013718:	3714      	adds	r7, #20
 801371a:	46bd      	mov	sp, r7
 801371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013720:	4770      	bx	lr
 8013722:	bf00      	nop
 8013724:	20005050 	.word	0x20005050
 8013728:	20005058 	.word	0x20005058

0801372c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013730:	2200      	movs	r2, #0
 8013732:	4912      	ldr	r1, [pc, #72]	; (801377c <MX_USB_DEVICE_Init+0x50>)
 8013734:	4812      	ldr	r0, [pc, #72]	; (8013780 <MX_USB_DEVICE_Init+0x54>)
 8013736:	f7fc fbf9 	bl	800ff2c <USBD_Init>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d001      	beq.n	8013744 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013740:	f7f1 f89e 	bl	8004880 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8013744:	490f      	ldr	r1, [pc, #60]	; (8013784 <MX_USB_DEVICE_Init+0x58>)
 8013746:	480e      	ldr	r0, [pc, #56]	; (8013780 <MX_USB_DEVICE_Init+0x54>)
 8013748:	f7fc fc20 	bl	800ff8c <USBD_RegisterClass>
 801374c:	4603      	mov	r3, r0
 801374e:	2b00      	cmp	r3, #0
 8013750:	d001      	beq.n	8013756 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013752:	f7f1 f895 	bl	8004880 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8013756:	490c      	ldr	r1, [pc, #48]	; (8013788 <MX_USB_DEVICE_Init+0x5c>)
 8013758:	4809      	ldr	r0, [pc, #36]	; (8013780 <MX_USB_DEVICE_Init+0x54>)
 801375a:	f7fc fbcd 	bl	800fef8 <USBD_CUSTOM_HID_RegisterInterface>
 801375e:	4603      	mov	r3, r0
 8013760:	2b00      	cmp	r3, #0
 8013762:	d001      	beq.n	8013768 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013764:	f7f1 f88c 	bl	8004880 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013768:	4805      	ldr	r0, [pc, #20]	; (8013780 <MX_USB_DEVICE_Init+0x54>)
 801376a:	f7fc fc45 	bl	800fff8 <USBD_Start>
 801376e:	4603      	mov	r3, r0
 8013770:	2b00      	cmp	r3, #0
 8013772:	d001      	beq.n	8013778 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013774:	f7f1 f884 	bl	8004880 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013778:	bf00      	nop
 801377a:	bd80      	pop	{r7, pc}
 801377c:	200000d4 	.word	0x200000d4
 8013780:	20005070 	.word	0x20005070
 8013784:	20000020 	.word	0x20000020
 8013788:	200000c4 	.word	0x200000c4

0801378c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 801378c:	b480      	push	{r7}
 801378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013790:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013792:	4618      	mov	r0, r3
 8013794:	46bd      	mov	sp, r7
 8013796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379a:	4770      	bx	lr

0801379c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 801379c:	b480      	push	{r7}
 801379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80137a0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS (uint8_t* state)
{
 80137ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
    return -1;
  }

  return (USBD_OK);*/

	memcpy(buffer,state,0x40);
 80137b4:	4a0d      	ldr	r2, [pc, #52]	; (80137ec <CUSTOM_HID_OutEvent_FS+0x40>)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	461c      	mov	r4, r3
 80137ba:	4616      	mov	r6, r2
 80137bc:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80137c0:	4635      	mov	r5, r6
 80137c2:	4623      	mov	r3, r4
 80137c4:	6818      	ldr	r0, [r3, #0]
 80137c6:	6859      	ldr	r1, [r3, #4]
 80137c8:	689a      	ldr	r2, [r3, #8]
 80137ca:	68db      	ldr	r3, [r3, #12]
 80137cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137ce:	3410      	adds	r4, #16
 80137d0:	3610      	adds	r6, #16
 80137d2:	4564      	cmp	r4, ip
 80137d4:	d1f4      	bne.n	80137c0 <CUSTOM_HID_OutEvent_FS+0x14>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,(uint8_t*)buffer,0x40);
 80137d6:	2240      	movs	r2, #64	; 0x40
 80137d8:	4904      	ldr	r1, [pc, #16]	; (80137ec <CUSTOM_HID_OutEvent_FS+0x40>)
 80137da:	4805      	ldr	r0, [pc, #20]	; (80137f0 <CUSTOM_HID_OutEvent_FS+0x44>)
 80137dc:	f7fc fa44 	bl	800fc68 <USBD_CUSTOM_HID_SendReport>
	return (0);
 80137e0:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	370c      	adds	r7, #12
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ea:	bf00      	nop
 80137ec:	2000534c 	.word	0x2000534c
 80137f0:	20005070 	.word	0x20005070

080137f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	4603      	mov	r3, r0
 80137fc:	6039      	str	r1, [r7, #0]
 80137fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	2212      	movs	r2, #18
 8013804:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013806:	4b03      	ldr	r3, [pc, #12]	; (8013814 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013808:	4618      	mov	r0, r3
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr
 8013814:	200000f0 	.word	0x200000f0

08013818 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013818:	b480      	push	{r7}
 801381a:	b083      	sub	sp, #12
 801381c:	af00      	add	r7, sp, #0
 801381e:	4603      	mov	r3, r0
 8013820:	6039      	str	r1, [r7, #0]
 8013822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	2204      	movs	r2, #4
 8013828:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801382a:	4b03      	ldr	r3, [pc, #12]	; (8013838 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801382c:	4618      	mov	r0, r3
 801382e:	370c      	adds	r7, #12
 8013830:	46bd      	mov	sp, r7
 8013832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013836:	4770      	bx	lr
 8013838:	20000104 	.word	0x20000104

0801383c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b082      	sub	sp, #8
 8013840:	af00      	add	r7, sp, #0
 8013842:	4603      	mov	r3, r0
 8013844:	6039      	str	r1, [r7, #0]
 8013846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013848:	79fb      	ldrb	r3, [r7, #7]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d105      	bne.n	801385a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801384e:	683a      	ldr	r2, [r7, #0]
 8013850:	4907      	ldr	r1, [pc, #28]	; (8013870 <USBD_FS_ProductStrDescriptor+0x34>)
 8013852:	4808      	ldr	r0, [pc, #32]	; (8013874 <USBD_FS_ProductStrDescriptor+0x38>)
 8013854:	f7fd fd7c 	bl	8011350 <USBD_GetString>
 8013858:	e004      	b.n	8013864 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801385a:	683a      	ldr	r2, [r7, #0]
 801385c:	4904      	ldr	r1, [pc, #16]	; (8013870 <USBD_FS_ProductStrDescriptor+0x34>)
 801385e:	4805      	ldr	r0, [pc, #20]	; (8013874 <USBD_FS_ProductStrDescriptor+0x38>)
 8013860:	f7fd fd76 	bl	8011350 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013864:	4b02      	ldr	r3, [pc, #8]	; (8013870 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013866:	4618      	mov	r0, r3
 8013868:	3708      	adds	r7, #8
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	2000538c 	.word	0x2000538c
 8013874:	08017078 	.word	0x08017078

08013878 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	4603      	mov	r3, r0
 8013880:	6039      	str	r1, [r7, #0]
 8013882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013884:	683a      	ldr	r2, [r7, #0]
 8013886:	4904      	ldr	r1, [pc, #16]	; (8013898 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013888:	4804      	ldr	r0, [pc, #16]	; (801389c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801388a:	f7fd fd61 	bl	8011350 <USBD_GetString>
  return USBD_StrDesc;
 801388e:	4b02      	ldr	r3, [pc, #8]	; (8013898 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013890:	4618      	mov	r0, r3
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	2000538c 	.word	0x2000538c
 801389c:	08017098 	.word	0x08017098

080138a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	4603      	mov	r3, r0
 80138a8:	6039      	str	r1, [r7, #0]
 80138aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	221a      	movs	r2, #26
 80138b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80138b2:	f000 f843 	bl	801393c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80138b6:	4b02      	ldr	r3, [pc, #8]	; (80138c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	20000108 	.word	0x20000108

080138c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	4603      	mov	r3, r0
 80138cc:	6039      	str	r1, [r7, #0]
 80138ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80138d0:	79fb      	ldrb	r3, [r7, #7]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d105      	bne.n	80138e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80138d6:	683a      	ldr	r2, [r7, #0]
 80138d8:	4907      	ldr	r1, [pc, #28]	; (80138f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80138da:	4808      	ldr	r0, [pc, #32]	; (80138fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80138dc:	f7fd fd38 	bl	8011350 <USBD_GetString>
 80138e0:	e004      	b.n	80138ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80138e2:	683a      	ldr	r2, [r7, #0]
 80138e4:	4904      	ldr	r1, [pc, #16]	; (80138f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80138e6:	4805      	ldr	r0, [pc, #20]	; (80138fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80138e8:	f7fd fd32 	bl	8011350 <USBD_GetString>
  }
  return USBD_StrDesc;
 80138ec:	4b02      	ldr	r3, [pc, #8]	; (80138f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3708      	adds	r7, #8
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	2000538c 	.word	0x2000538c
 80138fc:	080170ac 	.word	0x080170ac

08013900 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	4603      	mov	r3, r0
 8013908:	6039      	str	r1, [r7, #0]
 801390a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801390c:	79fb      	ldrb	r3, [r7, #7]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d105      	bne.n	801391e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	4907      	ldr	r1, [pc, #28]	; (8013934 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013916:	4808      	ldr	r0, [pc, #32]	; (8013938 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013918:	f7fd fd1a 	bl	8011350 <USBD_GetString>
 801391c:	e004      	b.n	8013928 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801391e:	683a      	ldr	r2, [r7, #0]
 8013920:	4904      	ldr	r1, [pc, #16]	; (8013934 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013922:	4805      	ldr	r0, [pc, #20]	; (8013938 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013924:	f7fd fd14 	bl	8011350 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013928:	4b02      	ldr	r3, [pc, #8]	; (8013934 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801392a:	4618      	mov	r0, r3
 801392c:	3708      	adds	r7, #8
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	2000538c 	.word	0x2000538c
 8013938:	080170c0 	.word	0x080170c0

0801393c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b084      	sub	sp, #16
 8013940:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013942:	4b0f      	ldr	r3, [pc, #60]	; (8013980 <Get_SerialNum+0x44>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013948:	4b0e      	ldr	r3, [pc, #56]	; (8013984 <Get_SerialNum+0x48>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801394e:	4b0e      	ldr	r3, [pc, #56]	; (8013988 <Get_SerialNum+0x4c>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4413      	add	r3, r2
 801395a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d009      	beq.n	8013976 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013962:	2208      	movs	r2, #8
 8013964:	4909      	ldr	r1, [pc, #36]	; (801398c <Get_SerialNum+0x50>)
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f000 f814 	bl	8013994 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801396c:	2204      	movs	r2, #4
 801396e:	4908      	ldr	r1, [pc, #32]	; (8013990 <Get_SerialNum+0x54>)
 8013970:	68b8      	ldr	r0, [r7, #8]
 8013972:	f000 f80f 	bl	8013994 <IntToUnicode>
  }
}
 8013976:	bf00      	nop
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	1fff7a10 	.word	0x1fff7a10
 8013984:	1fff7a14 	.word	0x1fff7a14
 8013988:	1fff7a18 	.word	0x1fff7a18
 801398c:	2000010a 	.word	0x2000010a
 8013990:	2000011a 	.word	0x2000011a

08013994 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013994:	b480      	push	{r7}
 8013996:	b087      	sub	sp, #28
 8013998:	af00      	add	r7, sp, #0
 801399a:	60f8      	str	r0, [r7, #12]
 801399c:	60b9      	str	r1, [r7, #8]
 801399e:	4613      	mov	r3, r2
 80139a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80139a2:	2300      	movs	r3, #0
 80139a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80139a6:	2300      	movs	r3, #0
 80139a8:	75fb      	strb	r3, [r7, #23]
 80139aa:	e027      	b.n	80139fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	0f1b      	lsrs	r3, r3, #28
 80139b0:	2b09      	cmp	r3, #9
 80139b2:	d80b      	bhi.n	80139cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	0f1b      	lsrs	r3, r3, #28
 80139b8:	b2da      	uxtb	r2, r3
 80139ba:	7dfb      	ldrb	r3, [r7, #23]
 80139bc:	005b      	lsls	r3, r3, #1
 80139be:	4619      	mov	r1, r3
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	440b      	add	r3, r1
 80139c4:	3230      	adds	r2, #48	; 0x30
 80139c6:	b2d2      	uxtb	r2, r2
 80139c8:	701a      	strb	r2, [r3, #0]
 80139ca:	e00a      	b.n	80139e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	0f1b      	lsrs	r3, r3, #28
 80139d0:	b2da      	uxtb	r2, r3
 80139d2:	7dfb      	ldrb	r3, [r7, #23]
 80139d4:	005b      	lsls	r3, r3, #1
 80139d6:	4619      	mov	r1, r3
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	440b      	add	r3, r1
 80139dc:	3237      	adds	r2, #55	; 0x37
 80139de:	b2d2      	uxtb	r2, r2
 80139e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	011b      	lsls	r3, r3, #4
 80139e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80139e8:	7dfb      	ldrb	r3, [r7, #23]
 80139ea:	005b      	lsls	r3, r3, #1
 80139ec:	3301      	adds	r3, #1
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	4413      	add	r3, r2
 80139f2:	2200      	movs	r2, #0
 80139f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80139f6:	7dfb      	ldrb	r3, [r7, #23]
 80139f8:	3301      	adds	r3, #1
 80139fa:	75fb      	strb	r3, [r7, #23]
 80139fc:	7dfa      	ldrb	r2, [r7, #23]
 80139fe:	79fb      	ldrb	r3, [r7, #7]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d3d3      	bcc.n	80139ac <IntToUnicode+0x18>
  }
}
 8013a04:	bf00      	nop
 8013a06:	bf00      	nop
 8013a08:	371c      	adds	r7, #28
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr
	...

08013a14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b08a      	sub	sp, #40	; 0x28
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013a1c:	f107 0314 	add.w	r3, r7, #20
 8013a20:	2200      	movs	r2, #0
 8013a22:	601a      	str	r2, [r3, #0]
 8013a24:	605a      	str	r2, [r3, #4]
 8013a26:	609a      	str	r2, [r3, #8]
 8013a28:	60da      	str	r2, [r3, #12]
 8013a2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013a34:	d13a      	bne.n	8013aac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a36:	2300      	movs	r3, #0
 8013a38:	613b      	str	r3, [r7, #16]
 8013a3a:	4b1e      	ldr	r3, [pc, #120]	; (8013ab4 <HAL_PCD_MspInit+0xa0>)
 8013a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a3e:	4a1d      	ldr	r2, [pc, #116]	; (8013ab4 <HAL_PCD_MspInit+0xa0>)
 8013a40:	f043 0301 	orr.w	r3, r3, #1
 8013a44:	6313      	str	r3, [r2, #48]	; 0x30
 8013a46:	4b1b      	ldr	r3, [pc, #108]	; (8013ab4 <HAL_PCD_MspInit+0xa0>)
 8013a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a4a:	f003 0301 	and.w	r3, r3, #1
 8013a4e:	613b      	str	r3, [r7, #16]
 8013a50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013a52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a58:	2302      	movs	r3, #2
 8013a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a60:	2303      	movs	r3, #3
 8013a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013a64:	230a      	movs	r3, #10
 8013a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a68:	f107 0314 	add.w	r3, r7, #20
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4812      	ldr	r0, [pc, #72]	; (8013ab8 <HAL_PCD_MspInit+0xa4>)
 8013a70:	f7f2 fce6 	bl	8006440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013a74:	4b0f      	ldr	r3, [pc, #60]	; (8013ab4 <HAL_PCD_MspInit+0xa0>)
 8013a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a78:	4a0e      	ldr	r2, [pc, #56]	; (8013ab4 <HAL_PCD_MspInit+0xa0>)
 8013a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a7e:	6353      	str	r3, [r2, #52]	; 0x34
 8013a80:	2300      	movs	r3, #0
 8013a82:	60fb      	str	r3, [r7, #12]
 8013a84:	4b0b      	ldr	r3, [pc, #44]	; (8013ab4 <HAL_PCD_MspInit+0xa0>)
 8013a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a88:	4a0a      	ldr	r2, [pc, #40]	; (8013ab4 <HAL_PCD_MspInit+0xa0>)
 8013a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8013a90:	4b08      	ldr	r3, [pc, #32]	; (8013ab4 <HAL_PCD_MspInit+0xa0>)
 8013a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013a98:	60fb      	str	r3, [r7, #12]
 8013a9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	2105      	movs	r1, #5
 8013aa0:	2043      	movs	r0, #67	; 0x43
 8013aa2:	f7f2 f887 	bl	8005bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013aa6:	2043      	movs	r0, #67	; 0x43
 8013aa8:	f7f2 f8a0 	bl	8005bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013aac:	bf00      	nop
 8013aae:	3728      	adds	r7, #40	; 0x28
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	40023800 	.word	0x40023800
 8013ab8:	40020000 	.word	0x40020000

08013abc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	4610      	mov	r0, r2
 8013ad4:	f7fc fadd 	bl	8010092 <USBD_LL_SetupStage>
}
 8013ad8:	bf00      	nop
 8013ada:	3708      	adds	r7, #8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}

08013ae0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	460b      	mov	r3, r1
 8013aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013af2:	78fa      	ldrb	r2, [r7, #3]
 8013af4:	6879      	ldr	r1, [r7, #4]
 8013af6:	4613      	mov	r3, r2
 8013af8:	00db      	lsls	r3, r3, #3
 8013afa:	4413      	add	r3, r2
 8013afc:	009b      	lsls	r3, r3, #2
 8013afe:	440b      	add	r3, r1
 8013b00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013b04:	681a      	ldr	r2, [r3, #0]
 8013b06:	78fb      	ldrb	r3, [r7, #3]
 8013b08:	4619      	mov	r1, r3
 8013b0a:	f7fc fb17 	bl	801013c <USBD_LL_DataOutStage>
}
 8013b0e:	bf00      	nop
 8013b10:	3708      	adds	r7, #8
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b082      	sub	sp, #8
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
 8013b1e:	460b      	mov	r3, r1
 8013b20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013b28:	78fa      	ldrb	r2, [r7, #3]
 8013b2a:	6879      	ldr	r1, [r7, #4]
 8013b2c:	4613      	mov	r3, r2
 8013b2e:	00db      	lsls	r3, r3, #3
 8013b30:	4413      	add	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	440b      	add	r3, r1
 8013b36:	334c      	adds	r3, #76	; 0x4c
 8013b38:	681a      	ldr	r2, [r3, #0]
 8013b3a:	78fb      	ldrb	r3, [r7, #3]
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	f7fc fbb0 	bl	80102a2 <USBD_LL_DataInStage>
}
 8013b42:	bf00      	nop
 8013b44:	3708      	adds	r7, #8
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b082      	sub	sp, #8
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7fc fce4 	bl	8010526 <USBD_LL_SOF>
}
 8013b5e:	bf00      	nop
 8013b60:	3708      	adds	r7, #8
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}

08013b66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b66:	b580      	push	{r7, lr}
 8013b68:	b084      	sub	sp, #16
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013b6e:	2301      	movs	r3, #1
 8013b70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d102      	bne.n	8013b80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	73fb      	strb	r3, [r7, #15]
 8013b7e:	e008      	b.n	8013b92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	2b02      	cmp	r3, #2
 8013b86:	d102      	bne.n	8013b8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	73fb      	strb	r3, [r7, #15]
 8013b8c:	e001      	b.n	8013b92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013b8e:	f7f0 fe77 	bl	8004880 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b98:	7bfa      	ldrb	r2, [r7, #15]
 8013b9a:	4611      	mov	r1, r2
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7fc fc84 	bl	80104aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fc fc2c 	bl	8010406 <USBD_LL_Reset>
}
 8013bae:	bf00      	nop
 8013bb0:	3710      	adds	r7, #16
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
	...

08013bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7fc fc7f 	bl	80104ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	6812      	ldr	r2, [r2, #0]
 8013bda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013bde:	f043 0301 	orr.w	r3, r3, #1
 8013be2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6a1b      	ldr	r3, [r3, #32]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d005      	beq.n	8013bf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013bec:	4b04      	ldr	r3, [pc, #16]	; (8013c00 <HAL_PCD_SuspendCallback+0x48>)
 8013bee:	691b      	ldr	r3, [r3, #16]
 8013bf0:	4a03      	ldr	r2, [pc, #12]	; (8013c00 <HAL_PCD_SuspendCallback+0x48>)
 8013bf2:	f043 0306 	orr.w	r3, r3, #6
 8013bf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013bf8:	bf00      	nop
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	e000ed00 	.word	0xe000ed00

08013c04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7fc fc6f 	bl	80104f6 <USBD_LL_Resume>
}
 8013c18:	bf00      	nop
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	460b      	mov	r3, r1
 8013c2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c32:	78fa      	ldrb	r2, [r7, #3]
 8013c34:	4611      	mov	r1, r2
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fc fcc7 	bl	80105ca <USBD_LL_IsoOUTIncomplete>
}
 8013c3c:	bf00      	nop
 8013c3e:	3708      	adds	r7, #8
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b082      	sub	sp, #8
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	460b      	mov	r3, r1
 8013c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c56:	78fa      	ldrb	r2, [r7, #3]
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fc fc83 	bl	8010566 <USBD_LL_IsoINIncomplete>
}
 8013c60:	bf00      	nop
 8013c62:	3708      	adds	r7, #8
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7fc fcd9 	bl	801062e <USBD_LL_DevConnected>
}
 8013c7c:	bf00      	nop
 8013c7e:	3708      	adds	r7, #8
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fc fcd6 	bl	8010644 <USBD_LL_DevDisconnected>
}
 8013c98:	bf00      	nop
 8013c9a:	3708      	adds	r7, #8
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d13c      	bne.n	8013d2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013cb0:	4a20      	ldr	r2, [pc, #128]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	4a1e      	ldr	r2, [pc, #120]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cbc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013cc0:	4b1c      	ldr	r3, [pc, #112]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013cc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013cc8:	4b1a      	ldr	r3, [pc, #104]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cca:	2204      	movs	r2, #4
 8013ccc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013cce:	4b19      	ldr	r3, [pc, #100]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cd0:	2202      	movs	r2, #2
 8013cd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013cd4:	4b17      	ldr	r3, [pc, #92]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013cda:	4b16      	ldr	r3, [pc, #88]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cdc:	2202      	movs	r2, #2
 8013cde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013ce0:	4b14      	ldr	r3, [pc, #80]	; (8013d34 <USBD_LL_Init+0x94>)
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013ce6:	4b13      	ldr	r3, [pc, #76]	; (8013d34 <USBD_LL_Init+0x94>)
 8013ce8:	2200      	movs	r2, #0
 8013cea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013cec:	4b11      	ldr	r3, [pc, #68]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cee:	2200      	movs	r2, #0
 8013cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013cf2:	4b10      	ldr	r3, [pc, #64]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013cf8:	4b0e      	ldr	r3, [pc, #56]	; (8013d34 <USBD_LL_Init+0x94>)
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013cfe:	480d      	ldr	r0, [pc, #52]	; (8013d34 <USBD_LL_Init+0x94>)
 8013d00:	f7f5 fd2e 	bl	8009760 <HAL_PCD_Init>
 8013d04:	4603      	mov	r3, r0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d001      	beq.n	8013d0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013d0a:	f7f0 fdb9 	bl	8004880 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013d0e:	2180      	movs	r1, #128	; 0x80
 8013d10:	4808      	ldr	r0, [pc, #32]	; (8013d34 <USBD_LL_Init+0x94>)
 8013d12:	f7f6 ff6e 	bl	800abf2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013d16:	2240      	movs	r2, #64	; 0x40
 8013d18:	2100      	movs	r1, #0
 8013d1a:	4806      	ldr	r0, [pc, #24]	; (8013d34 <USBD_LL_Init+0x94>)
 8013d1c:	f7f6 ff22 	bl	800ab64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013d20:	2280      	movs	r2, #128	; 0x80
 8013d22:	2101      	movs	r1, #1
 8013d24:	4803      	ldr	r0, [pc, #12]	; (8013d34 <USBD_LL_Init+0x94>)
 8013d26:	f7f6 ff1d 	bl	800ab64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013d2a:	2300      	movs	r3, #0
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	2000558c 	.word	0x2000558c

08013d38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b084      	sub	sp, #16
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d40:	2300      	movs	r3, #0
 8013d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d44:	2300      	movs	r3, #0
 8013d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7f5 fe23 	bl	800999a <HAL_PCD_Start>
 8013d54:	4603      	mov	r3, r0
 8013d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d58:	7bfb      	ldrb	r3, [r7, #15]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f000 f930 	bl	8013fc0 <USBD_Get_USB_Status>
 8013d60:	4603      	mov	r3, r0
 8013d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3710      	adds	r7, #16
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}

08013d6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013d6e:	b580      	push	{r7, lr}
 8013d70:	b084      	sub	sp, #16
 8013d72:	af00      	add	r7, sp, #0
 8013d74:	6078      	str	r0, [r7, #4]
 8013d76:	4608      	mov	r0, r1
 8013d78:	4611      	mov	r1, r2
 8013d7a:	461a      	mov	r2, r3
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	70fb      	strb	r3, [r7, #3]
 8013d80:	460b      	mov	r3, r1
 8013d82:	70bb      	strb	r3, [r7, #2]
 8013d84:	4613      	mov	r3, r2
 8013d86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013d96:	78bb      	ldrb	r3, [r7, #2]
 8013d98:	883a      	ldrh	r2, [r7, #0]
 8013d9a:	78f9      	ldrb	r1, [r7, #3]
 8013d9c:	f7f6 faf4 	bl	800a388 <HAL_PCD_EP_Open>
 8013da0:	4603      	mov	r3, r0
 8013da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013da4:	7bfb      	ldrb	r3, [r7, #15]
 8013da6:	4618      	mov	r0, r3
 8013da8:	f000 f90a 	bl	8013fc0 <USBD_Get_USB_Status>
 8013dac:	4603      	mov	r3, r0
 8013dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3710      	adds	r7, #16
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}

08013dba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dba:	b580      	push	{r7, lr}
 8013dbc:	b084      	sub	sp, #16
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
 8013dc2:	460b      	mov	r3, r1
 8013dc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013dd4:	78fa      	ldrb	r2, [r7, #3]
 8013dd6:	4611      	mov	r1, r2
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7f6 fb3d 	bl	800a458 <HAL_PCD_EP_Close>
 8013dde:	4603      	mov	r3, r0
 8013de0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013de2:	7bfb      	ldrb	r3, [r7, #15]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f000 f8eb 	bl	8013fc0 <USBD_Get_USB_Status>
 8013dea:	4603      	mov	r3, r0
 8013dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3710      	adds	r7, #16
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	460b      	mov	r3, r1
 8013e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e04:	2300      	movs	r3, #0
 8013e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e12:	78fa      	ldrb	r2, [r7, #3]
 8013e14:	4611      	mov	r1, r2
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7f6 fbfd 	bl	800a616 <HAL_PCD_EP_SetStall>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e20:	7bfb      	ldrb	r3, [r7, #15]
 8013e22:	4618      	mov	r0, r3
 8013e24:	f000 f8cc 	bl	8013fc0 <USBD_Get_USB_Status>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3710      	adds	r7, #16
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}

08013e36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e36:	b580      	push	{r7, lr}
 8013e38:	b084      	sub	sp, #16
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
 8013e3e:	460b      	mov	r3, r1
 8013e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e42:	2300      	movs	r3, #0
 8013e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e46:	2300      	movs	r3, #0
 8013e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e50:	78fa      	ldrb	r2, [r7, #3]
 8013e52:	4611      	mov	r1, r2
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7f6 fc42 	bl	800a6de <HAL_PCD_EP_ClrStall>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e5e:	7bfb      	ldrb	r3, [r7, #15]
 8013e60:	4618      	mov	r0, r3
 8013e62:	f000 f8ad 	bl	8013fc0 <USBD_Get_USB_Status>
 8013e66:	4603      	mov	r3, r0
 8013e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e74:	b480      	push	{r7}
 8013e76:	b085      	sub	sp, #20
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	da0b      	bge.n	8013ea8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013e90:	78fb      	ldrb	r3, [r7, #3]
 8013e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e96:	68f9      	ldr	r1, [r7, #12]
 8013e98:	4613      	mov	r3, r2
 8013e9a:	00db      	lsls	r3, r3, #3
 8013e9c:	4413      	add	r3, r2
 8013e9e:	009b      	lsls	r3, r3, #2
 8013ea0:	440b      	add	r3, r1
 8013ea2:	333e      	adds	r3, #62	; 0x3e
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	e00b      	b.n	8013ec0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013ea8:	78fb      	ldrb	r3, [r7, #3]
 8013eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013eae:	68f9      	ldr	r1, [r7, #12]
 8013eb0:	4613      	mov	r3, r2
 8013eb2:	00db      	lsls	r3, r3, #3
 8013eb4:	4413      	add	r3, r2
 8013eb6:	009b      	lsls	r3, r3, #2
 8013eb8:	440b      	add	r3, r1
 8013eba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013ebe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3714      	adds	r7, #20
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr

08013ecc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b084      	sub	sp, #16
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	460b      	mov	r3, r1
 8013ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013edc:	2300      	movs	r3, #0
 8013ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013ee6:	78fa      	ldrb	r2, [r7, #3]
 8013ee8:	4611      	mov	r1, r2
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7f6 fa27 	bl	800a33e <HAL_PCD_SetAddress>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ef4:	7bfb      	ldrb	r3, [r7, #15]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f000 f862 	bl	8013fc0 <USBD_Get_USB_Status>
 8013efc:	4603      	mov	r3, r0
 8013efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3710      	adds	r7, #16
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}

08013f0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013f0a:	b580      	push	{r7, lr}
 8013f0c:	b086      	sub	sp, #24
 8013f0e:	af00      	add	r7, sp, #0
 8013f10:	60f8      	str	r0, [r7, #12]
 8013f12:	607a      	str	r2, [r7, #4]
 8013f14:	603b      	str	r3, [r7, #0]
 8013f16:	460b      	mov	r3, r1
 8013f18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013f28:	7af9      	ldrb	r1, [r7, #11]
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	f7f6 fb28 	bl	800a582 <HAL_PCD_EP_Transmit>
 8013f32:	4603      	mov	r3, r0
 8013f34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f36:	7dfb      	ldrb	r3, [r7, #23]
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f000 f841 	bl	8013fc0 <USBD_Get_USB_Status>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f42:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	3718      	adds	r7, #24
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b086      	sub	sp, #24
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	60f8      	str	r0, [r7, #12]
 8013f54:	607a      	str	r2, [r7, #4]
 8013f56:	603b      	str	r3, [r7, #0]
 8013f58:	460b      	mov	r3, r1
 8013f5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f60:	2300      	movs	r3, #0
 8013f62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013f6a:	7af9      	ldrb	r1, [r7, #11]
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	f7f6 fabc 	bl	800a4ec <HAL_PCD_EP_Receive>
 8013f74:	4603      	mov	r3, r0
 8013f76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f78:	7dfb      	ldrb	r3, [r7, #23]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f000 f820 	bl	8013fc0 <USBD_Get_USB_Status>
 8013f80:	4603      	mov	r3, r0
 8013f82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f84:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3718      	adds	r7, #24
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
	...

08013f90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013f90:	b480      	push	{r7}
 8013f92:	b083      	sub	sp, #12
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8013f98:	4b03      	ldr	r3, [pc, #12]	; (8013fa8 <USBD_static_malloc+0x18>)
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	370c      	adds	r7, #12
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr
 8013fa6:	bf00      	nop
 8013fa8:	20005a98 	.word	0x20005a98

08013fac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013fac:	b480      	push	{r7}
 8013fae:	b083      	sub	sp, #12
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]

}
 8013fb4:	bf00      	nop
 8013fb6:	370c      	adds	r7, #12
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbe:	4770      	bx	lr

08013fc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	b085      	sub	sp, #20
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013fce:	79fb      	ldrb	r3, [r7, #7]
 8013fd0:	2b03      	cmp	r3, #3
 8013fd2:	d817      	bhi.n	8014004 <USBD_Get_USB_Status+0x44>
 8013fd4:	a201      	add	r2, pc, #4	; (adr r2, 8013fdc <USBD_Get_USB_Status+0x1c>)
 8013fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fda:	bf00      	nop
 8013fdc:	08013fed 	.word	0x08013fed
 8013fe0:	08013ff3 	.word	0x08013ff3
 8013fe4:	08013ff9 	.word	0x08013ff9
 8013fe8:	08013fff 	.word	0x08013fff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013fec:	2300      	movs	r3, #0
 8013fee:	73fb      	strb	r3, [r7, #15]
    break;
 8013ff0:	e00b      	b.n	801400a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013ff2:	2303      	movs	r3, #3
 8013ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8013ff6:	e008      	b.n	801400a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8013ffc:	e005      	b.n	801400a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013ffe:	2303      	movs	r3, #3
 8014000:	73fb      	strb	r3, [r7, #15]
    break;
 8014002:	e002      	b.n	801400a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014004:	2303      	movs	r3, #3
 8014006:	73fb      	strb	r3, [r7, #15]
    break;
 8014008:	bf00      	nop
  }
  return usb_status;
 801400a:	7bfb      	ldrb	r3, [r7, #15]
}
 801400c:	4618      	mov	r0, r3
 801400e:	3714      	adds	r7, #20
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr

08014018 <__cvt>:
 8014018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801401c:	ec55 4b10 	vmov	r4, r5, d0
 8014020:	2d00      	cmp	r5, #0
 8014022:	460e      	mov	r6, r1
 8014024:	4619      	mov	r1, r3
 8014026:	462b      	mov	r3, r5
 8014028:	bfbb      	ittet	lt
 801402a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801402e:	461d      	movlt	r5, r3
 8014030:	2300      	movge	r3, #0
 8014032:	232d      	movlt	r3, #45	; 0x2d
 8014034:	700b      	strb	r3, [r1, #0]
 8014036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014038:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801403c:	4691      	mov	r9, r2
 801403e:	f023 0820 	bic.w	r8, r3, #32
 8014042:	bfbc      	itt	lt
 8014044:	4622      	movlt	r2, r4
 8014046:	4614      	movlt	r4, r2
 8014048:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801404c:	d005      	beq.n	801405a <__cvt+0x42>
 801404e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014052:	d100      	bne.n	8014056 <__cvt+0x3e>
 8014054:	3601      	adds	r6, #1
 8014056:	2102      	movs	r1, #2
 8014058:	e000      	b.n	801405c <__cvt+0x44>
 801405a:	2103      	movs	r1, #3
 801405c:	ab03      	add	r3, sp, #12
 801405e:	9301      	str	r3, [sp, #4]
 8014060:	ab02      	add	r3, sp, #8
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	ec45 4b10 	vmov	d0, r4, r5
 8014068:	4653      	mov	r3, sl
 801406a:	4632      	mov	r2, r6
 801406c:	f000 fef4 	bl	8014e58 <_dtoa_r>
 8014070:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014074:	4607      	mov	r7, r0
 8014076:	d102      	bne.n	801407e <__cvt+0x66>
 8014078:	f019 0f01 	tst.w	r9, #1
 801407c:	d022      	beq.n	80140c4 <__cvt+0xac>
 801407e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014082:	eb07 0906 	add.w	r9, r7, r6
 8014086:	d110      	bne.n	80140aa <__cvt+0x92>
 8014088:	783b      	ldrb	r3, [r7, #0]
 801408a:	2b30      	cmp	r3, #48	; 0x30
 801408c:	d10a      	bne.n	80140a4 <__cvt+0x8c>
 801408e:	2200      	movs	r2, #0
 8014090:	2300      	movs	r3, #0
 8014092:	4620      	mov	r0, r4
 8014094:	4629      	mov	r1, r5
 8014096:	f7ec fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 801409a:	b918      	cbnz	r0, 80140a4 <__cvt+0x8c>
 801409c:	f1c6 0601 	rsb	r6, r6, #1
 80140a0:	f8ca 6000 	str.w	r6, [sl]
 80140a4:	f8da 3000 	ldr.w	r3, [sl]
 80140a8:	4499      	add	r9, r3
 80140aa:	2200      	movs	r2, #0
 80140ac:	2300      	movs	r3, #0
 80140ae:	4620      	mov	r0, r4
 80140b0:	4629      	mov	r1, r5
 80140b2:	f7ec fd11 	bl	8000ad8 <__aeabi_dcmpeq>
 80140b6:	b108      	cbz	r0, 80140bc <__cvt+0xa4>
 80140b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80140bc:	2230      	movs	r2, #48	; 0x30
 80140be:	9b03      	ldr	r3, [sp, #12]
 80140c0:	454b      	cmp	r3, r9
 80140c2:	d307      	bcc.n	80140d4 <__cvt+0xbc>
 80140c4:	9b03      	ldr	r3, [sp, #12]
 80140c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140c8:	1bdb      	subs	r3, r3, r7
 80140ca:	4638      	mov	r0, r7
 80140cc:	6013      	str	r3, [r2, #0]
 80140ce:	b004      	add	sp, #16
 80140d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140d4:	1c59      	adds	r1, r3, #1
 80140d6:	9103      	str	r1, [sp, #12]
 80140d8:	701a      	strb	r2, [r3, #0]
 80140da:	e7f0      	b.n	80140be <__cvt+0xa6>

080140dc <__exponent>:
 80140dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140de:	4603      	mov	r3, r0
 80140e0:	2900      	cmp	r1, #0
 80140e2:	bfb8      	it	lt
 80140e4:	4249      	neglt	r1, r1
 80140e6:	f803 2b02 	strb.w	r2, [r3], #2
 80140ea:	bfb4      	ite	lt
 80140ec:	222d      	movlt	r2, #45	; 0x2d
 80140ee:	222b      	movge	r2, #43	; 0x2b
 80140f0:	2909      	cmp	r1, #9
 80140f2:	7042      	strb	r2, [r0, #1]
 80140f4:	dd2a      	ble.n	801414c <__exponent+0x70>
 80140f6:	f10d 0207 	add.w	r2, sp, #7
 80140fa:	4617      	mov	r7, r2
 80140fc:	260a      	movs	r6, #10
 80140fe:	4694      	mov	ip, r2
 8014100:	fb91 f5f6 	sdiv	r5, r1, r6
 8014104:	fb06 1415 	mls	r4, r6, r5, r1
 8014108:	3430      	adds	r4, #48	; 0x30
 801410a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801410e:	460c      	mov	r4, r1
 8014110:	2c63      	cmp	r4, #99	; 0x63
 8014112:	f102 32ff 	add.w	r2, r2, #4294967295
 8014116:	4629      	mov	r1, r5
 8014118:	dcf1      	bgt.n	80140fe <__exponent+0x22>
 801411a:	3130      	adds	r1, #48	; 0x30
 801411c:	f1ac 0402 	sub.w	r4, ip, #2
 8014120:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014124:	1c41      	adds	r1, r0, #1
 8014126:	4622      	mov	r2, r4
 8014128:	42ba      	cmp	r2, r7
 801412a:	d30a      	bcc.n	8014142 <__exponent+0x66>
 801412c:	f10d 0209 	add.w	r2, sp, #9
 8014130:	eba2 020c 	sub.w	r2, r2, ip
 8014134:	42bc      	cmp	r4, r7
 8014136:	bf88      	it	hi
 8014138:	2200      	movhi	r2, #0
 801413a:	4413      	add	r3, r2
 801413c:	1a18      	subs	r0, r3, r0
 801413e:	b003      	add	sp, #12
 8014140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014142:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014146:	f801 5f01 	strb.w	r5, [r1, #1]!
 801414a:	e7ed      	b.n	8014128 <__exponent+0x4c>
 801414c:	2330      	movs	r3, #48	; 0x30
 801414e:	3130      	adds	r1, #48	; 0x30
 8014150:	7083      	strb	r3, [r0, #2]
 8014152:	70c1      	strb	r1, [r0, #3]
 8014154:	1d03      	adds	r3, r0, #4
 8014156:	e7f1      	b.n	801413c <__exponent+0x60>

08014158 <_printf_float>:
 8014158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415c:	ed2d 8b02 	vpush	{d8}
 8014160:	b08d      	sub	sp, #52	; 0x34
 8014162:	460c      	mov	r4, r1
 8014164:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014168:	4616      	mov	r6, r2
 801416a:	461f      	mov	r7, r3
 801416c:	4605      	mov	r5, r0
 801416e:	f000 fd0f 	bl	8014b90 <_localeconv_r>
 8014172:	f8d0 a000 	ldr.w	sl, [r0]
 8014176:	4650      	mov	r0, sl
 8014178:	f7ec f882 	bl	8000280 <strlen>
 801417c:	2300      	movs	r3, #0
 801417e:	930a      	str	r3, [sp, #40]	; 0x28
 8014180:	6823      	ldr	r3, [r4, #0]
 8014182:	9305      	str	r3, [sp, #20]
 8014184:	f8d8 3000 	ldr.w	r3, [r8]
 8014188:	f894 b018 	ldrb.w	fp, [r4, #24]
 801418c:	3307      	adds	r3, #7
 801418e:	f023 0307 	bic.w	r3, r3, #7
 8014192:	f103 0208 	add.w	r2, r3, #8
 8014196:	f8c8 2000 	str.w	r2, [r8]
 801419a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801419e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80141a2:	9307      	str	r3, [sp, #28]
 80141a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80141a8:	ee08 0a10 	vmov	s16, r0
 80141ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80141b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141b4:	4b9e      	ldr	r3, [pc, #632]	; (8014430 <_printf_float+0x2d8>)
 80141b6:	f04f 32ff 	mov.w	r2, #4294967295
 80141ba:	f7ec fcbf 	bl	8000b3c <__aeabi_dcmpun>
 80141be:	bb88      	cbnz	r0, 8014224 <_printf_float+0xcc>
 80141c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141c4:	4b9a      	ldr	r3, [pc, #616]	; (8014430 <_printf_float+0x2d8>)
 80141c6:	f04f 32ff 	mov.w	r2, #4294967295
 80141ca:	f7ec fc99 	bl	8000b00 <__aeabi_dcmple>
 80141ce:	bb48      	cbnz	r0, 8014224 <_printf_float+0xcc>
 80141d0:	2200      	movs	r2, #0
 80141d2:	2300      	movs	r3, #0
 80141d4:	4640      	mov	r0, r8
 80141d6:	4649      	mov	r1, r9
 80141d8:	f7ec fc88 	bl	8000aec <__aeabi_dcmplt>
 80141dc:	b110      	cbz	r0, 80141e4 <_printf_float+0x8c>
 80141de:	232d      	movs	r3, #45	; 0x2d
 80141e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141e4:	4a93      	ldr	r2, [pc, #588]	; (8014434 <_printf_float+0x2dc>)
 80141e6:	4b94      	ldr	r3, [pc, #592]	; (8014438 <_printf_float+0x2e0>)
 80141e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80141ec:	bf94      	ite	ls
 80141ee:	4690      	movls	r8, r2
 80141f0:	4698      	movhi	r8, r3
 80141f2:	2303      	movs	r3, #3
 80141f4:	6123      	str	r3, [r4, #16]
 80141f6:	9b05      	ldr	r3, [sp, #20]
 80141f8:	f023 0304 	bic.w	r3, r3, #4
 80141fc:	6023      	str	r3, [r4, #0]
 80141fe:	f04f 0900 	mov.w	r9, #0
 8014202:	9700      	str	r7, [sp, #0]
 8014204:	4633      	mov	r3, r6
 8014206:	aa0b      	add	r2, sp, #44	; 0x2c
 8014208:	4621      	mov	r1, r4
 801420a:	4628      	mov	r0, r5
 801420c:	f000 f9da 	bl	80145c4 <_printf_common>
 8014210:	3001      	adds	r0, #1
 8014212:	f040 8090 	bne.w	8014336 <_printf_float+0x1de>
 8014216:	f04f 30ff 	mov.w	r0, #4294967295
 801421a:	b00d      	add	sp, #52	; 0x34
 801421c:	ecbd 8b02 	vpop	{d8}
 8014220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014224:	4642      	mov	r2, r8
 8014226:	464b      	mov	r3, r9
 8014228:	4640      	mov	r0, r8
 801422a:	4649      	mov	r1, r9
 801422c:	f7ec fc86 	bl	8000b3c <__aeabi_dcmpun>
 8014230:	b140      	cbz	r0, 8014244 <_printf_float+0xec>
 8014232:	464b      	mov	r3, r9
 8014234:	2b00      	cmp	r3, #0
 8014236:	bfbc      	itt	lt
 8014238:	232d      	movlt	r3, #45	; 0x2d
 801423a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801423e:	4a7f      	ldr	r2, [pc, #508]	; (801443c <_printf_float+0x2e4>)
 8014240:	4b7f      	ldr	r3, [pc, #508]	; (8014440 <_printf_float+0x2e8>)
 8014242:	e7d1      	b.n	80141e8 <_printf_float+0x90>
 8014244:	6863      	ldr	r3, [r4, #4]
 8014246:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801424a:	9206      	str	r2, [sp, #24]
 801424c:	1c5a      	adds	r2, r3, #1
 801424e:	d13f      	bne.n	80142d0 <_printf_float+0x178>
 8014250:	2306      	movs	r3, #6
 8014252:	6063      	str	r3, [r4, #4]
 8014254:	9b05      	ldr	r3, [sp, #20]
 8014256:	6861      	ldr	r1, [r4, #4]
 8014258:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801425c:	2300      	movs	r3, #0
 801425e:	9303      	str	r3, [sp, #12]
 8014260:	ab0a      	add	r3, sp, #40	; 0x28
 8014262:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014266:	ab09      	add	r3, sp, #36	; 0x24
 8014268:	ec49 8b10 	vmov	d0, r8, r9
 801426c:	9300      	str	r3, [sp, #0]
 801426e:	6022      	str	r2, [r4, #0]
 8014270:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014274:	4628      	mov	r0, r5
 8014276:	f7ff fecf 	bl	8014018 <__cvt>
 801427a:	9b06      	ldr	r3, [sp, #24]
 801427c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801427e:	2b47      	cmp	r3, #71	; 0x47
 8014280:	4680      	mov	r8, r0
 8014282:	d108      	bne.n	8014296 <_printf_float+0x13e>
 8014284:	1cc8      	adds	r0, r1, #3
 8014286:	db02      	blt.n	801428e <_printf_float+0x136>
 8014288:	6863      	ldr	r3, [r4, #4]
 801428a:	4299      	cmp	r1, r3
 801428c:	dd41      	ble.n	8014312 <_printf_float+0x1ba>
 801428e:	f1ab 0302 	sub.w	r3, fp, #2
 8014292:	fa5f fb83 	uxtb.w	fp, r3
 8014296:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801429a:	d820      	bhi.n	80142de <_printf_float+0x186>
 801429c:	3901      	subs	r1, #1
 801429e:	465a      	mov	r2, fp
 80142a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80142a4:	9109      	str	r1, [sp, #36]	; 0x24
 80142a6:	f7ff ff19 	bl	80140dc <__exponent>
 80142aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142ac:	1813      	adds	r3, r2, r0
 80142ae:	2a01      	cmp	r2, #1
 80142b0:	4681      	mov	r9, r0
 80142b2:	6123      	str	r3, [r4, #16]
 80142b4:	dc02      	bgt.n	80142bc <_printf_float+0x164>
 80142b6:	6822      	ldr	r2, [r4, #0]
 80142b8:	07d2      	lsls	r2, r2, #31
 80142ba:	d501      	bpl.n	80142c0 <_printf_float+0x168>
 80142bc:	3301      	adds	r3, #1
 80142be:	6123      	str	r3, [r4, #16]
 80142c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d09c      	beq.n	8014202 <_printf_float+0xaa>
 80142c8:	232d      	movs	r3, #45	; 0x2d
 80142ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142ce:	e798      	b.n	8014202 <_printf_float+0xaa>
 80142d0:	9a06      	ldr	r2, [sp, #24]
 80142d2:	2a47      	cmp	r2, #71	; 0x47
 80142d4:	d1be      	bne.n	8014254 <_printf_float+0xfc>
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d1bc      	bne.n	8014254 <_printf_float+0xfc>
 80142da:	2301      	movs	r3, #1
 80142dc:	e7b9      	b.n	8014252 <_printf_float+0xfa>
 80142de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80142e2:	d118      	bne.n	8014316 <_printf_float+0x1be>
 80142e4:	2900      	cmp	r1, #0
 80142e6:	6863      	ldr	r3, [r4, #4]
 80142e8:	dd0b      	ble.n	8014302 <_printf_float+0x1aa>
 80142ea:	6121      	str	r1, [r4, #16]
 80142ec:	b913      	cbnz	r3, 80142f4 <_printf_float+0x19c>
 80142ee:	6822      	ldr	r2, [r4, #0]
 80142f0:	07d0      	lsls	r0, r2, #31
 80142f2:	d502      	bpl.n	80142fa <_printf_float+0x1a2>
 80142f4:	3301      	adds	r3, #1
 80142f6:	440b      	add	r3, r1
 80142f8:	6123      	str	r3, [r4, #16]
 80142fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80142fc:	f04f 0900 	mov.w	r9, #0
 8014300:	e7de      	b.n	80142c0 <_printf_float+0x168>
 8014302:	b913      	cbnz	r3, 801430a <_printf_float+0x1b2>
 8014304:	6822      	ldr	r2, [r4, #0]
 8014306:	07d2      	lsls	r2, r2, #31
 8014308:	d501      	bpl.n	801430e <_printf_float+0x1b6>
 801430a:	3302      	adds	r3, #2
 801430c:	e7f4      	b.n	80142f8 <_printf_float+0x1a0>
 801430e:	2301      	movs	r3, #1
 8014310:	e7f2      	b.n	80142f8 <_printf_float+0x1a0>
 8014312:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014318:	4299      	cmp	r1, r3
 801431a:	db05      	blt.n	8014328 <_printf_float+0x1d0>
 801431c:	6823      	ldr	r3, [r4, #0]
 801431e:	6121      	str	r1, [r4, #16]
 8014320:	07d8      	lsls	r0, r3, #31
 8014322:	d5ea      	bpl.n	80142fa <_printf_float+0x1a2>
 8014324:	1c4b      	adds	r3, r1, #1
 8014326:	e7e7      	b.n	80142f8 <_printf_float+0x1a0>
 8014328:	2900      	cmp	r1, #0
 801432a:	bfd4      	ite	le
 801432c:	f1c1 0202 	rsble	r2, r1, #2
 8014330:	2201      	movgt	r2, #1
 8014332:	4413      	add	r3, r2
 8014334:	e7e0      	b.n	80142f8 <_printf_float+0x1a0>
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	055a      	lsls	r2, r3, #21
 801433a:	d407      	bmi.n	801434c <_printf_float+0x1f4>
 801433c:	6923      	ldr	r3, [r4, #16]
 801433e:	4642      	mov	r2, r8
 8014340:	4631      	mov	r1, r6
 8014342:	4628      	mov	r0, r5
 8014344:	47b8      	blx	r7
 8014346:	3001      	adds	r0, #1
 8014348:	d12c      	bne.n	80143a4 <_printf_float+0x24c>
 801434a:	e764      	b.n	8014216 <_printf_float+0xbe>
 801434c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014350:	f240 80e0 	bls.w	8014514 <_printf_float+0x3bc>
 8014354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014358:	2200      	movs	r2, #0
 801435a:	2300      	movs	r3, #0
 801435c:	f7ec fbbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8014360:	2800      	cmp	r0, #0
 8014362:	d034      	beq.n	80143ce <_printf_float+0x276>
 8014364:	4a37      	ldr	r2, [pc, #220]	; (8014444 <_printf_float+0x2ec>)
 8014366:	2301      	movs	r3, #1
 8014368:	4631      	mov	r1, r6
 801436a:	4628      	mov	r0, r5
 801436c:	47b8      	blx	r7
 801436e:	3001      	adds	r0, #1
 8014370:	f43f af51 	beq.w	8014216 <_printf_float+0xbe>
 8014374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014378:	429a      	cmp	r2, r3
 801437a:	db02      	blt.n	8014382 <_printf_float+0x22a>
 801437c:	6823      	ldr	r3, [r4, #0]
 801437e:	07d8      	lsls	r0, r3, #31
 8014380:	d510      	bpl.n	80143a4 <_printf_float+0x24c>
 8014382:	ee18 3a10 	vmov	r3, s16
 8014386:	4652      	mov	r2, sl
 8014388:	4631      	mov	r1, r6
 801438a:	4628      	mov	r0, r5
 801438c:	47b8      	blx	r7
 801438e:	3001      	adds	r0, #1
 8014390:	f43f af41 	beq.w	8014216 <_printf_float+0xbe>
 8014394:	f04f 0800 	mov.w	r8, #0
 8014398:	f104 091a 	add.w	r9, r4, #26
 801439c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801439e:	3b01      	subs	r3, #1
 80143a0:	4543      	cmp	r3, r8
 80143a2:	dc09      	bgt.n	80143b8 <_printf_float+0x260>
 80143a4:	6823      	ldr	r3, [r4, #0]
 80143a6:	079b      	lsls	r3, r3, #30
 80143a8:	f100 8107 	bmi.w	80145ba <_printf_float+0x462>
 80143ac:	68e0      	ldr	r0, [r4, #12]
 80143ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143b0:	4298      	cmp	r0, r3
 80143b2:	bfb8      	it	lt
 80143b4:	4618      	movlt	r0, r3
 80143b6:	e730      	b.n	801421a <_printf_float+0xc2>
 80143b8:	2301      	movs	r3, #1
 80143ba:	464a      	mov	r2, r9
 80143bc:	4631      	mov	r1, r6
 80143be:	4628      	mov	r0, r5
 80143c0:	47b8      	blx	r7
 80143c2:	3001      	adds	r0, #1
 80143c4:	f43f af27 	beq.w	8014216 <_printf_float+0xbe>
 80143c8:	f108 0801 	add.w	r8, r8, #1
 80143cc:	e7e6      	b.n	801439c <_printf_float+0x244>
 80143ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	dc39      	bgt.n	8014448 <_printf_float+0x2f0>
 80143d4:	4a1b      	ldr	r2, [pc, #108]	; (8014444 <_printf_float+0x2ec>)
 80143d6:	2301      	movs	r3, #1
 80143d8:	4631      	mov	r1, r6
 80143da:	4628      	mov	r0, r5
 80143dc:	47b8      	blx	r7
 80143de:	3001      	adds	r0, #1
 80143e0:	f43f af19 	beq.w	8014216 <_printf_float+0xbe>
 80143e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80143e8:	4313      	orrs	r3, r2
 80143ea:	d102      	bne.n	80143f2 <_printf_float+0x29a>
 80143ec:	6823      	ldr	r3, [r4, #0]
 80143ee:	07d9      	lsls	r1, r3, #31
 80143f0:	d5d8      	bpl.n	80143a4 <_printf_float+0x24c>
 80143f2:	ee18 3a10 	vmov	r3, s16
 80143f6:	4652      	mov	r2, sl
 80143f8:	4631      	mov	r1, r6
 80143fa:	4628      	mov	r0, r5
 80143fc:	47b8      	blx	r7
 80143fe:	3001      	adds	r0, #1
 8014400:	f43f af09 	beq.w	8014216 <_printf_float+0xbe>
 8014404:	f04f 0900 	mov.w	r9, #0
 8014408:	f104 0a1a 	add.w	sl, r4, #26
 801440c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801440e:	425b      	negs	r3, r3
 8014410:	454b      	cmp	r3, r9
 8014412:	dc01      	bgt.n	8014418 <_printf_float+0x2c0>
 8014414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014416:	e792      	b.n	801433e <_printf_float+0x1e6>
 8014418:	2301      	movs	r3, #1
 801441a:	4652      	mov	r2, sl
 801441c:	4631      	mov	r1, r6
 801441e:	4628      	mov	r0, r5
 8014420:	47b8      	blx	r7
 8014422:	3001      	adds	r0, #1
 8014424:	f43f aef7 	beq.w	8014216 <_printf_float+0xbe>
 8014428:	f109 0901 	add.w	r9, r9, #1
 801442c:	e7ee      	b.n	801440c <_printf_float+0x2b4>
 801442e:	bf00      	nop
 8014430:	7fefffff 	.word	0x7fefffff
 8014434:	08017870 	.word	0x08017870
 8014438:	08017874 	.word	0x08017874
 801443c:	08017878 	.word	0x08017878
 8014440:	0801787c 	.word	0x0801787c
 8014444:	08017880 	.word	0x08017880
 8014448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801444a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801444c:	429a      	cmp	r2, r3
 801444e:	bfa8      	it	ge
 8014450:	461a      	movge	r2, r3
 8014452:	2a00      	cmp	r2, #0
 8014454:	4691      	mov	r9, r2
 8014456:	dc37      	bgt.n	80144c8 <_printf_float+0x370>
 8014458:	f04f 0b00 	mov.w	fp, #0
 801445c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014460:	f104 021a 	add.w	r2, r4, #26
 8014464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014466:	9305      	str	r3, [sp, #20]
 8014468:	eba3 0309 	sub.w	r3, r3, r9
 801446c:	455b      	cmp	r3, fp
 801446e:	dc33      	bgt.n	80144d8 <_printf_float+0x380>
 8014470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014474:	429a      	cmp	r2, r3
 8014476:	db3b      	blt.n	80144f0 <_printf_float+0x398>
 8014478:	6823      	ldr	r3, [r4, #0]
 801447a:	07da      	lsls	r2, r3, #31
 801447c:	d438      	bmi.n	80144f0 <_printf_float+0x398>
 801447e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014482:	eba2 0903 	sub.w	r9, r2, r3
 8014486:	9b05      	ldr	r3, [sp, #20]
 8014488:	1ad2      	subs	r2, r2, r3
 801448a:	4591      	cmp	r9, r2
 801448c:	bfa8      	it	ge
 801448e:	4691      	movge	r9, r2
 8014490:	f1b9 0f00 	cmp.w	r9, #0
 8014494:	dc35      	bgt.n	8014502 <_printf_float+0x3aa>
 8014496:	f04f 0800 	mov.w	r8, #0
 801449a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801449e:	f104 0a1a 	add.w	sl, r4, #26
 80144a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80144a6:	1a9b      	subs	r3, r3, r2
 80144a8:	eba3 0309 	sub.w	r3, r3, r9
 80144ac:	4543      	cmp	r3, r8
 80144ae:	f77f af79 	ble.w	80143a4 <_printf_float+0x24c>
 80144b2:	2301      	movs	r3, #1
 80144b4:	4652      	mov	r2, sl
 80144b6:	4631      	mov	r1, r6
 80144b8:	4628      	mov	r0, r5
 80144ba:	47b8      	blx	r7
 80144bc:	3001      	adds	r0, #1
 80144be:	f43f aeaa 	beq.w	8014216 <_printf_float+0xbe>
 80144c2:	f108 0801 	add.w	r8, r8, #1
 80144c6:	e7ec      	b.n	80144a2 <_printf_float+0x34a>
 80144c8:	4613      	mov	r3, r2
 80144ca:	4631      	mov	r1, r6
 80144cc:	4642      	mov	r2, r8
 80144ce:	4628      	mov	r0, r5
 80144d0:	47b8      	blx	r7
 80144d2:	3001      	adds	r0, #1
 80144d4:	d1c0      	bne.n	8014458 <_printf_float+0x300>
 80144d6:	e69e      	b.n	8014216 <_printf_float+0xbe>
 80144d8:	2301      	movs	r3, #1
 80144da:	4631      	mov	r1, r6
 80144dc:	4628      	mov	r0, r5
 80144de:	9205      	str	r2, [sp, #20]
 80144e0:	47b8      	blx	r7
 80144e2:	3001      	adds	r0, #1
 80144e4:	f43f ae97 	beq.w	8014216 <_printf_float+0xbe>
 80144e8:	9a05      	ldr	r2, [sp, #20]
 80144ea:	f10b 0b01 	add.w	fp, fp, #1
 80144ee:	e7b9      	b.n	8014464 <_printf_float+0x30c>
 80144f0:	ee18 3a10 	vmov	r3, s16
 80144f4:	4652      	mov	r2, sl
 80144f6:	4631      	mov	r1, r6
 80144f8:	4628      	mov	r0, r5
 80144fa:	47b8      	blx	r7
 80144fc:	3001      	adds	r0, #1
 80144fe:	d1be      	bne.n	801447e <_printf_float+0x326>
 8014500:	e689      	b.n	8014216 <_printf_float+0xbe>
 8014502:	9a05      	ldr	r2, [sp, #20]
 8014504:	464b      	mov	r3, r9
 8014506:	4442      	add	r2, r8
 8014508:	4631      	mov	r1, r6
 801450a:	4628      	mov	r0, r5
 801450c:	47b8      	blx	r7
 801450e:	3001      	adds	r0, #1
 8014510:	d1c1      	bne.n	8014496 <_printf_float+0x33e>
 8014512:	e680      	b.n	8014216 <_printf_float+0xbe>
 8014514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014516:	2a01      	cmp	r2, #1
 8014518:	dc01      	bgt.n	801451e <_printf_float+0x3c6>
 801451a:	07db      	lsls	r3, r3, #31
 801451c:	d53a      	bpl.n	8014594 <_printf_float+0x43c>
 801451e:	2301      	movs	r3, #1
 8014520:	4642      	mov	r2, r8
 8014522:	4631      	mov	r1, r6
 8014524:	4628      	mov	r0, r5
 8014526:	47b8      	blx	r7
 8014528:	3001      	adds	r0, #1
 801452a:	f43f ae74 	beq.w	8014216 <_printf_float+0xbe>
 801452e:	ee18 3a10 	vmov	r3, s16
 8014532:	4652      	mov	r2, sl
 8014534:	4631      	mov	r1, r6
 8014536:	4628      	mov	r0, r5
 8014538:	47b8      	blx	r7
 801453a:	3001      	adds	r0, #1
 801453c:	f43f ae6b 	beq.w	8014216 <_printf_float+0xbe>
 8014540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014544:	2200      	movs	r2, #0
 8014546:	2300      	movs	r3, #0
 8014548:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801454c:	f7ec fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 8014550:	b9d8      	cbnz	r0, 801458a <_printf_float+0x432>
 8014552:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014556:	f108 0201 	add.w	r2, r8, #1
 801455a:	4631      	mov	r1, r6
 801455c:	4628      	mov	r0, r5
 801455e:	47b8      	blx	r7
 8014560:	3001      	adds	r0, #1
 8014562:	d10e      	bne.n	8014582 <_printf_float+0x42a>
 8014564:	e657      	b.n	8014216 <_printf_float+0xbe>
 8014566:	2301      	movs	r3, #1
 8014568:	4652      	mov	r2, sl
 801456a:	4631      	mov	r1, r6
 801456c:	4628      	mov	r0, r5
 801456e:	47b8      	blx	r7
 8014570:	3001      	adds	r0, #1
 8014572:	f43f ae50 	beq.w	8014216 <_printf_float+0xbe>
 8014576:	f108 0801 	add.w	r8, r8, #1
 801457a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801457c:	3b01      	subs	r3, #1
 801457e:	4543      	cmp	r3, r8
 8014580:	dcf1      	bgt.n	8014566 <_printf_float+0x40e>
 8014582:	464b      	mov	r3, r9
 8014584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014588:	e6da      	b.n	8014340 <_printf_float+0x1e8>
 801458a:	f04f 0800 	mov.w	r8, #0
 801458e:	f104 0a1a 	add.w	sl, r4, #26
 8014592:	e7f2      	b.n	801457a <_printf_float+0x422>
 8014594:	2301      	movs	r3, #1
 8014596:	4642      	mov	r2, r8
 8014598:	e7df      	b.n	801455a <_printf_float+0x402>
 801459a:	2301      	movs	r3, #1
 801459c:	464a      	mov	r2, r9
 801459e:	4631      	mov	r1, r6
 80145a0:	4628      	mov	r0, r5
 80145a2:	47b8      	blx	r7
 80145a4:	3001      	adds	r0, #1
 80145a6:	f43f ae36 	beq.w	8014216 <_printf_float+0xbe>
 80145aa:	f108 0801 	add.w	r8, r8, #1
 80145ae:	68e3      	ldr	r3, [r4, #12]
 80145b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145b2:	1a5b      	subs	r3, r3, r1
 80145b4:	4543      	cmp	r3, r8
 80145b6:	dcf0      	bgt.n	801459a <_printf_float+0x442>
 80145b8:	e6f8      	b.n	80143ac <_printf_float+0x254>
 80145ba:	f04f 0800 	mov.w	r8, #0
 80145be:	f104 0919 	add.w	r9, r4, #25
 80145c2:	e7f4      	b.n	80145ae <_printf_float+0x456>

080145c4 <_printf_common>:
 80145c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145c8:	4616      	mov	r6, r2
 80145ca:	4699      	mov	r9, r3
 80145cc:	688a      	ldr	r2, [r1, #8]
 80145ce:	690b      	ldr	r3, [r1, #16]
 80145d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80145d4:	4293      	cmp	r3, r2
 80145d6:	bfb8      	it	lt
 80145d8:	4613      	movlt	r3, r2
 80145da:	6033      	str	r3, [r6, #0]
 80145dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80145e0:	4607      	mov	r7, r0
 80145e2:	460c      	mov	r4, r1
 80145e4:	b10a      	cbz	r2, 80145ea <_printf_common+0x26>
 80145e6:	3301      	adds	r3, #1
 80145e8:	6033      	str	r3, [r6, #0]
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	0699      	lsls	r1, r3, #26
 80145ee:	bf42      	ittt	mi
 80145f0:	6833      	ldrmi	r3, [r6, #0]
 80145f2:	3302      	addmi	r3, #2
 80145f4:	6033      	strmi	r3, [r6, #0]
 80145f6:	6825      	ldr	r5, [r4, #0]
 80145f8:	f015 0506 	ands.w	r5, r5, #6
 80145fc:	d106      	bne.n	801460c <_printf_common+0x48>
 80145fe:	f104 0a19 	add.w	sl, r4, #25
 8014602:	68e3      	ldr	r3, [r4, #12]
 8014604:	6832      	ldr	r2, [r6, #0]
 8014606:	1a9b      	subs	r3, r3, r2
 8014608:	42ab      	cmp	r3, r5
 801460a:	dc26      	bgt.n	801465a <_printf_common+0x96>
 801460c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014610:	1e13      	subs	r3, r2, #0
 8014612:	6822      	ldr	r2, [r4, #0]
 8014614:	bf18      	it	ne
 8014616:	2301      	movne	r3, #1
 8014618:	0692      	lsls	r2, r2, #26
 801461a:	d42b      	bmi.n	8014674 <_printf_common+0xb0>
 801461c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014620:	4649      	mov	r1, r9
 8014622:	4638      	mov	r0, r7
 8014624:	47c0      	blx	r8
 8014626:	3001      	adds	r0, #1
 8014628:	d01e      	beq.n	8014668 <_printf_common+0xa4>
 801462a:	6823      	ldr	r3, [r4, #0]
 801462c:	6922      	ldr	r2, [r4, #16]
 801462e:	f003 0306 	and.w	r3, r3, #6
 8014632:	2b04      	cmp	r3, #4
 8014634:	bf02      	ittt	eq
 8014636:	68e5      	ldreq	r5, [r4, #12]
 8014638:	6833      	ldreq	r3, [r6, #0]
 801463a:	1aed      	subeq	r5, r5, r3
 801463c:	68a3      	ldr	r3, [r4, #8]
 801463e:	bf0c      	ite	eq
 8014640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014644:	2500      	movne	r5, #0
 8014646:	4293      	cmp	r3, r2
 8014648:	bfc4      	itt	gt
 801464a:	1a9b      	subgt	r3, r3, r2
 801464c:	18ed      	addgt	r5, r5, r3
 801464e:	2600      	movs	r6, #0
 8014650:	341a      	adds	r4, #26
 8014652:	42b5      	cmp	r5, r6
 8014654:	d11a      	bne.n	801468c <_printf_common+0xc8>
 8014656:	2000      	movs	r0, #0
 8014658:	e008      	b.n	801466c <_printf_common+0xa8>
 801465a:	2301      	movs	r3, #1
 801465c:	4652      	mov	r2, sl
 801465e:	4649      	mov	r1, r9
 8014660:	4638      	mov	r0, r7
 8014662:	47c0      	blx	r8
 8014664:	3001      	adds	r0, #1
 8014666:	d103      	bne.n	8014670 <_printf_common+0xac>
 8014668:	f04f 30ff 	mov.w	r0, #4294967295
 801466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014670:	3501      	adds	r5, #1
 8014672:	e7c6      	b.n	8014602 <_printf_common+0x3e>
 8014674:	18e1      	adds	r1, r4, r3
 8014676:	1c5a      	adds	r2, r3, #1
 8014678:	2030      	movs	r0, #48	; 0x30
 801467a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801467e:	4422      	add	r2, r4
 8014680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014688:	3302      	adds	r3, #2
 801468a:	e7c7      	b.n	801461c <_printf_common+0x58>
 801468c:	2301      	movs	r3, #1
 801468e:	4622      	mov	r2, r4
 8014690:	4649      	mov	r1, r9
 8014692:	4638      	mov	r0, r7
 8014694:	47c0      	blx	r8
 8014696:	3001      	adds	r0, #1
 8014698:	d0e6      	beq.n	8014668 <_printf_common+0xa4>
 801469a:	3601      	adds	r6, #1
 801469c:	e7d9      	b.n	8014652 <_printf_common+0x8e>
	...

080146a0 <_printf_i>:
 80146a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146a4:	7e0f      	ldrb	r7, [r1, #24]
 80146a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80146a8:	2f78      	cmp	r7, #120	; 0x78
 80146aa:	4691      	mov	r9, r2
 80146ac:	4680      	mov	r8, r0
 80146ae:	460c      	mov	r4, r1
 80146b0:	469a      	mov	sl, r3
 80146b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80146b6:	d807      	bhi.n	80146c8 <_printf_i+0x28>
 80146b8:	2f62      	cmp	r7, #98	; 0x62
 80146ba:	d80a      	bhi.n	80146d2 <_printf_i+0x32>
 80146bc:	2f00      	cmp	r7, #0
 80146be:	f000 80d4 	beq.w	801486a <_printf_i+0x1ca>
 80146c2:	2f58      	cmp	r7, #88	; 0x58
 80146c4:	f000 80c0 	beq.w	8014848 <_printf_i+0x1a8>
 80146c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80146d0:	e03a      	b.n	8014748 <_printf_i+0xa8>
 80146d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80146d6:	2b15      	cmp	r3, #21
 80146d8:	d8f6      	bhi.n	80146c8 <_printf_i+0x28>
 80146da:	a101      	add	r1, pc, #4	; (adr r1, 80146e0 <_printf_i+0x40>)
 80146dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80146e0:	08014739 	.word	0x08014739
 80146e4:	0801474d 	.word	0x0801474d
 80146e8:	080146c9 	.word	0x080146c9
 80146ec:	080146c9 	.word	0x080146c9
 80146f0:	080146c9 	.word	0x080146c9
 80146f4:	080146c9 	.word	0x080146c9
 80146f8:	0801474d 	.word	0x0801474d
 80146fc:	080146c9 	.word	0x080146c9
 8014700:	080146c9 	.word	0x080146c9
 8014704:	080146c9 	.word	0x080146c9
 8014708:	080146c9 	.word	0x080146c9
 801470c:	08014851 	.word	0x08014851
 8014710:	08014779 	.word	0x08014779
 8014714:	0801480b 	.word	0x0801480b
 8014718:	080146c9 	.word	0x080146c9
 801471c:	080146c9 	.word	0x080146c9
 8014720:	08014873 	.word	0x08014873
 8014724:	080146c9 	.word	0x080146c9
 8014728:	08014779 	.word	0x08014779
 801472c:	080146c9 	.word	0x080146c9
 8014730:	080146c9 	.word	0x080146c9
 8014734:	08014813 	.word	0x08014813
 8014738:	682b      	ldr	r3, [r5, #0]
 801473a:	1d1a      	adds	r2, r3, #4
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	602a      	str	r2, [r5, #0]
 8014740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014748:	2301      	movs	r3, #1
 801474a:	e09f      	b.n	801488c <_printf_i+0x1ec>
 801474c:	6820      	ldr	r0, [r4, #0]
 801474e:	682b      	ldr	r3, [r5, #0]
 8014750:	0607      	lsls	r7, r0, #24
 8014752:	f103 0104 	add.w	r1, r3, #4
 8014756:	6029      	str	r1, [r5, #0]
 8014758:	d501      	bpl.n	801475e <_printf_i+0xbe>
 801475a:	681e      	ldr	r6, [r3, #0]
 801475c:	e003      	b.n	8014766 <_printf_i+0xc6>
 801475e:	0646      	lsls	r6, r0, #25
 8014760:	d5fb      	bpl.n	801475a <_printf_i+0xba>
 8014762:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014766:	2e00      	cmp	r6, #0
 8014768:	da03      	bge.n	8014772 <_printf_i+0xd2>
 801476a:	232d      	movs	r3, #45	; 0x2d
 801476c:	4276      	negs	r6, r6
 801476e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014772:	485a      	ldr	r0, [pc, #360]	; (80148dc <_printf_i+0x23c>)
 8014774:	230a      	movs	r3, #10
 8014776:	e012      	b.n	801479e <_printf_i+0xfe>
 8014778:	682b      	ldr	r3, [r5, #0]
 801477a:	6820      	ldr	r0, [r4, #0]
 801477c:	1d19      	adds	r1, r3, #4
 801477e:	6029      	str	r1, [r5, #0]
 8014780:	0605      	lsls	r5, r0, #24
 8014782:	d501      	bpl.n	8014788 <_printf_i+0xe8>
 8014784:	681e      	ldr	r6, [r3, #0]
 8014786:	e002      	b.n	801478e <_printf_i+0xee>
 8014788:	0641      	lsls	r1, r0, #25
 801478a:	d5fb      	bpl.n	8014784 <_printf_i+0xe4>
 801478c:	881e      	ldrh	r6, [r3, #0]
 801478e:	4853      	ldr	r0, [pc, #332]	; (80148dc <_printf_i+0x23c>)
 8014790:	2f6f      	cmp	r7, #111	; 0x6f
 8014792:	bf0c      	ite	eq
 8014794:	2308      	moveq	r3, #8
 8014796:	230a      	movne	r3, #10
 8014798:	2100      	movs	r1, #0
 801479a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801479e:	6865      	ldr	r5, [r4, #4]
 80147a0:	60a5      	str	r5, [r4, #8]
 80147a2:	2d00      	cmp	r5, #0
 80147a4:	bfa2      	ittt	ge
 80147a6:	6821      	ldrge	r1, [r4, #0]
 80147a8:	f021 0104 	bicge.w	r1, r1, #4
 80147ac:	6021      	strge	r1, [r4, #0]
 80147ae:	b90e      	cbnz	r6, 80147b4 <_printf_i+0x114>
 80147b0:	2d00      	cmp	r5, #0
 80147b2:	d04b      	beq.n	801484c <_printf_i+0x1ac>
 80147b4:	4615      	mov	r5, r2
 80147b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80147ba:	fb03 6711 	mls	r7, r3, r1, r6
 80147be:	5dc7      	ldrb	r7, [r0, r7]
 80147c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80147c4:	4637      	mov	r7, r6
 80147c6:	42bb      	cmp	r3, r7
 80147c8:	460e      	mov	r6, r1
 80147ca:	d9f4      	bls.n	80147b6 <_printf_i+0x116>
 80147cc:	2b08      	cmp	r3, #8
 80147ce:	d10b      	bne.n	80147e8 <_printf_i+0x148>
 80147d0:	6823      	ldr	r3, [r4, #0]
 80147d2:	07de      	lsls	r6, r3, #31
 80147d4:	d508      	bpl.n	80147e8 <_printf_i+0x148>
 80147d6:	6923      	ldr	r3, [r4, #16]
 80147d8:	6861      	ldr	r1, [r4, #4]
 80147da:	4299      	cmp	r1, r3
 80147dc:	bfde      	ittt	le
 80147de:	2330      	movle	r3, #48	; 0x30
 80147e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80147e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80147e8:	1b52      	subs	r2, r2, r5
 80147ea:	6122      	str	r2, [r4, #16]
 80147ec:	f8cd a000 	str.w	sl, [sp]
 80147f0:	464b      	mov	r3, r9
 80147f2:	aa03      	add	r2, sp, #12
 80147f4:	4621      	mov	r1, r4
 80147f6:	4640      	mov	r0, r8
 80147f8:	f7ff fee4 	bl	80145c4 <_printf_common>
 80147fc:	3001      	adds	r0, #1
 80147fe:	d14a      	bne.n	8014896 <_printf_i+0x1f6>
 8014800:	f04f 30ff 	mov.w	r0, #4294967295
 8014804:	b004      	add	sp, #16
 8014806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801480a:	6823      	ldr	r3, [r4, #0]
 801480c:	f043 0320 	orr.w	r3, r3, #32
 8014810:	6023      	str	r3, [r4, #0]
 8014812:	4833      	ldr	r0, [pc, #204]	; (80148e0 <_printf_i+0x240>)
 8014814:	2778      	movs	r7, #120	; 0x78
 8014816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801481a:	6823      	ldr	r3, [r4, #0]
 801481c:	6829      	ldr	r1, [r5, #0]
 801481e:	061f      	lsls	r7, r3, #24
 8014820:	f851 6b04 	ldr.w	r6, [r1], #4
 8014824:	d402      	bmi.n	801482c <_printf_i+0x18c>
 8014826:	065f      	lsls	r7, r3, #25
 8014828:	bf48      	it	mi
 801482a:	b2b6      	uxthmi	r6, r6
 801482c:	07df      	lsls	r7, r3, #31
 801482e:	bf48      	it	mi
 8014830:	f043 0320 	orrmi.w	r3, r3, #32
 8014834:	6029      	str	r1, [r5, #0]
 8014836:	bf48      	it	mi
 8014838:	6023      	strmi	r3, [r4, #0]
 801483a:	b91e      	cbnz	r6, 8014844 <_printf_i+0x1a4>
 801483c:	6823      	ldr	r3, [r4, #0]
 801483e:	f023 0320 	bic.w	r3, r3, #32
 8014842:	6023      	str	r3, [r4, #0]
 8014844:	2310      	movs	r3, #16
 8014846:	e7a7      	b.n	8014798 <_printf_i+0xf8>
 8014848:	4824      	ldr	r0, [pc, #144]	; (80148dc <_printf_i+0x23c>)
 801484a:	e7e4      	b.n	8014816 <_printf_i+0x176>
 801484c:	4615      	mov	r5, r2
 801484e:	e7bd      	b.n	80147cc <_printf_i+0x12c>
 8014850:	682b      	ldr	r3, [r5, #0]
 8014852:	6826      	ldr	r6, [r4, #0]
 8014854:	6961      	ldr	r1, [r4, #20]
 8014856:	1d18      	adds	r0, r3, #4
 8014858:	6028      	str	r0, [r5, #0]
 801485a:	0635      	lsls	r5, r6, #24
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	d501      	bpl.n	8014864 <_printf_i+0x1c4>
 8014860:	6019      	str	r1, [r3, #0]
 8014862:	e002      	b.n	801486a <_printf_i+0x1ca>
 8014864:	0670      	lsls	r0, r6, #25
 8014866:	d5fb      	bpl.n	8014860 <_printf_i+0x1c0>
 8014868:	8019      	strh	r1, [r3, #0]
 801486a:	2300      	movs	r3, #0
 801486c:	6123      	str	r3, [r4, #16]
 801486e:	4615      	mov	r5, r2
 8014870:	e7bc      	b.n	80147ec <_printf_i+0x14c>
 8014872:	682b      	ldr	r3, [r5, #0]
 8014874:	1d1a      	adds	r2, r3, #4
 8014876:	602a      	str	r2, [r5, #0]
 8014878:	681d      	ldr	r5, [r3, #0]
 801487a:	6862      	ldr	r2, [r4, #4]
 801487c:	2100      	movs	r1, #0
 801487e:	4628      	mov	r0, r5
 8014880:	f7eb fcae 	bl	80001e0 <memchr>
 8014884:	b108      	cbz	r0, 801488a <_printf_i+0x1ea>
 8014886:	1b40      	subs	r0, r0, r5
 8014888:	6060      	str	r0, [r4, #4]
 801488a:	6863      	ldr	r3, [r4, #4]
 801488c:	6123      	str	r3, [r4, #16]
 801488e:	2300      	movs	r3, #0
 8014890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014894:	e7aa      	b.n	80147ec <_printf_i+0x14c>
 8014896:	6923      	ldr	r3, [r4, #16]
 8014898:	462a      	mov	r2, r5
 801489a:	4649      	mov	r1, r9
 801489c:	4640      	mov	r0, r8
 801489e:	47d0      	blx	sl
 80148a0:	3001      	adds	r0, #1
 80148a2:	d0ad      	beq.n	8014800 <_printf_i+0x160>
 80148a4:	6823      	ldr	r3, [r4, #0]
 80148a6:	079b      	lsls	r3, r3, #30
 80148a8:	d413      	bmi.n	80148d2 <_printf_i+0x232>
 80148aa:	68e0      	ldr	r0, [r4, #12]
 80148ac:	9b03      	ldr	r3, [sp, #12]
 80148ae:	4298      	cmp	r0, r3
 80148b0:	bfb8      	it	lt
 80148b2:	4618      	movlt	r0, r3
 80148b4:	e7a6      	b.n	8014804 <_printf_i+0x164>
 80148b6:	2301      	movs	r3, #1
 80148b8:	4632      	mov	r2, r6
 80148ba:	4649      	mov	r1, r9
 80148bc:	4640      	mov	r0, r8
 80148be:	47d0      	blx	sl
 80148c0:	3001      	adds	r0, #1
 80148c2:	d09d      	beq.n	8014800 <_printf_i+0x160>
 80148c4:	3501      	adds	r5, #1
 80148c6:	68e3      	ldr	r3, [r4, #12]
 80148c8:	9903      	ldr	r1, [sp, #12]
 80148ca:	1a5b      	subs	r3, r3, r1
 80148cc:	42ab      	cmp	r3, r5
 80148ce:	dcf2      	bgt.n	80148b6 <_printf_i+0x216>
 80148d0:	e7eb      	b.n	80148aa <_printf_i+0x20a>
 80148d2:	2500      	movs	r5, #0
 80148d4:	f104 0619 	add.w	r6, r4, #25
 80148d8:	e7f5      	b.n	80148c6 <_printf_i+0x226>
 80148da:	bf00      	nop
 80148dc:	08017882 	.word	0x08017882
 80148e0:	08017893 	.word	0x08017893

080148e4 <std>:
 80148e4:	2300      	movs	r3, #0
 80148e6:	b510      	push	{r4, lr}
 80148e8:	4604      	mov	r4, r0
 80148ea:	e9c0 3300 	strd	r3, r3, [r0]
 80148ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148f2:	6083      	str	r3, [r0, #8]
 80148f4:	8181      	strh	r1, [r0, #12]
 80148f6:	6643      	str	r3, [r0, #100]	; 0x64
 80148f8:	81c2      	strh	r2, [r0, #14]
 80148fa:	6183      	str	r3, [r0, #24]
 80148fc:	4619      	mov	r1, r3
 80148fe:	2208      	movs	r2, #8
 8014900:	305c      	adds	r0, #92	; 0x5c
 8014902:	f000 f92e 	bl	8014b62 <memset>
 8014906:	4b0d      	ldr	r3, [pc, #52]	; (801493c <std+0x58>)
 8014908:	6263      	str	r3, [r4, #36]	; 0x24
 801490a:	4b0d      	ldr	r3, [pc, #52]	; (8014940 <std+0x5c>)
 801490c:	62a3      	str	r3, [r4, #40]	; 0x28
 801490e:	4b0d      	ldr	r3, [pc, #52]	; (8014944 <std+0x60>)
 8014910:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014912:	4b0d      	ldr	r3, [pc, #52]	; (8014948 <std+0x64>)
 8014914:	6323      	str	r3, [r4, #48]	; 0x30
 8014916:	4b0d      	ldr	r3, [pc, #52]	; (801494c <std+0x68>)
 8014918:	6224      	str	r4, [r4, #32]
 801491a:	429c      	cmp	r4, r3
 801491c:	d006      	beq.n	801492c <std+0x48>
 801491e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014922:	4294      	cmp	r4, r2
 8014924:	d002      	beq.n	801492c <std+0x48>
 8014926:	33d0      	adds	r3, #208	; 0xd0
 8014928:	429c      	cmp	r4, r3
 801492a:	d105      	bne.n	8014938 <std+0x54>
 801492c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014934:	f000 b9f6 	b.w	8014d24 <__retarget_lock_init_recursive>
 8014938:	bd10      	pop	{r4, pc}
 801493a:	bf00      	nop
 801493c:	08014aa9 	.word	0x08014aa9
 8014940:	08014acb 	.word	0x08014acb
 8014944:	08014b03 	.word	0x08014b03
 8014948:	08014b27 	.word	0x08014b27
 801494c:	20005ab4 	.word	0x20005ab4

08014950 <stdio_exit_handler>:
 8014950:	4a02      	ldr	r2, [pc, #8]	; (801495c <stdio_exit_handler+0xc>)
 8014952:	4903      	ldr	r1, [pc, #12]	; (8014960 <stdio_exit_handler+0x10>)
 8014954:	4803      	ldr	r0, [pc, #12]	; (8014964 <stdio_exit_handler+0x14>)
 8014956:	f000 b869 	b.w	8014a2c <_fwalk_sglue>
 801495a:	bf00      	nop
 801495c:	20000124 	.word	0x20000124
 8014960:	080166f1 	.word	0x080166f1
 8014964:	20000130 	.word	0x20000130

08014968 <cleanup_stdio>:
 8014968:	6841      	ldr	r1, [r0, #4]
 801496a:	4b0c      	ldr	r3, [pc, #48]	; (801499c <cleanup_stdio+0x34>)
 801496c:	4299      	cmp	r1, r3
 801496e:	b510      	push	{r4, lr}
 8014970:	4604      	mov	r4, r0
 8014972:	d001      	beq.n	8014978 <cleanup_stdio+0x10>
 8014974:	f001 febc 	bl	80166f0 <_fflush_r>
 8014978:	68a1      	ldr	r1, [r4, #8]
 801497a:	4b09      	ldr	r3, [pc, #36]	; (80149a0 <cleanup_stdio+0x38>)
 801497c:	4299      	cmp	r1, r3
 801497e:	d002      	beq.n	8014986 <cleanup_stdio+0x1e>
 8014980:	4620      	mov	r0, r4
 8014982:	f001 feb5 	bl	80166f0 <_fflush_r>
 8014986:	68e1      	ldr	r1, [r4, #12]
 8014988:	4b06      	ldr	r3, [pc, #24]	; (80149a4 <cleanup_stdio+0x3c>)
 801498a:	4299      	cmp	r1, r3
 801498c:	d004      	beq.n	8014998 <cleanup_stdio+0x30>
 801498e:	4620      	mov	r0, r4
 8014990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014994:	f001 beac 	b.w	80166f0 <_fflush_r>
 8014998:	bd10      	pop	{r4, pc}
 801499a:	bf00      	nop
 801499c:	20005ab4 	.word	0x20005ab4
 80149a0:	20005b1c 	.word	0x20005b1c
 80149a4:	20005b84 	.word	0x20005b84

080149a8 <global_stdio_init.part.0>:
 80149a8:	b510      	push	{r4, lr}
 80149aa:	4b0b      	ldr	r3, [pc, #44]	; (80149d8 <global_stdio_init.part.0+0x30>)
 80149ac:	4c0b      	ldr	r4, [pc, #44]	; (80149dc <global_stdio_init.part.0+0x34>)
 80149ae:	4a0c      	ldr	r2, [pc, #48]	; (80149e0 <global_stdio_init.part.0+0x38>)
 80149b0:	601a      	str	r2, [r3, #0]
 80149b2:	4620      	mov	r0, r4
 80149b4:	2200      	movs	r2, #0
 80149b6:	2104      	movs	r1, #4
 80149b8:	f7ff ff94 	bl	80148e4 <std>
 80149bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80149c0:	2201      	movs	r2, #1
 80149c2:	2109      	movs	r1, #9
 80149c4:	f7ff ff8e 	bl	80148e4 <std>
 80149c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80149cc:	2202      	movs	r2, #2
 80149ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149d2:	2112      	movs	r1, #18
 80149d4:	f7ff bf86 	b.w	80148e4 <std>
 80149d8:	20005bec 	.word	0x20005bec
 80149dc:	20005ab4 	.word	0x20005ab4
 80149e0:	08014951 	.word	0x08014951

080149e4 <__sfp_lock_acquire>:
 80149e4:	4801      	ldr	r0, [pc, #4]	; (80149ec <__sfp_lock_acquire+0x8>)
 80149e6:	f000 b99e 	b.w	8014d26 <__retarget_lock_acquire_recursive>
 80149ea:	bf00      	nop
 80149ec:	20005bf5 	.word	0x20005bf5

080149f0 <__sfp_lock_release>:
 80149f0:	4801      	ldr	r0, [pc, #4]	; (80149f8 <__sfp_lock_release+0x8>)
 80149f2:	f000 b999 	b.w	8014d28 <__retarget_lock_release_recursive>
 80149f6:	bf00      	nop
 80149f8:	20005bf5 	.word	0x20005bf5

080149fc <__sinit>:
 80149fc:	b510      	push	{r4, lr}
 80149fe:	4604      	mov	r4, r0
 8014a00:	f7ff fff0 	bl	80149e4 <__sfp_lock_acquire>
 8014a04:	6a23      	ldr	r3, [r4, #32]
 8014a06:	b11b      	cbz	r3, 8014a10 <__sinit+0x14>
 8014a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a0c:	f7ff bff0 	b.w	80149f0 <__sfp_lock_release>
 8014a10:	4b04      	ldr	r3, [pc, #16]	; (8014a24 <__sinit+0x28>)
 8014a12:	6223      	str	r3, [r4, #32]
 8014a14:	4b04      	ldr	r3, [pc, #16]	; (8014a28 <__sinit+0x2c>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d1f5      	bne.n	8014a08 <__sinit+0xc>
 8014a1c:	f7ff ffc4 	bl	80149a8 <global_stdio_init.part.0>
 8014a20:	e7f2      	b.n	8014a08 <__sinit+0xc>
 8014a22:	bf00      	nop
 8014a24:	08014969 	.word	0x08014969
 8014a28:	20005bec 	.word	0x20005bec

08014a2c <_fwalk_sglue>:
 8014a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a30:	4607      	mov	r7, r0
 8014a32:	4688      	mov	r8, r1
 8014a34:	4614      	mov	r4, r2
 8014a36:	2600      	movs	r6, #0
 8014a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8014a40:	d505      	bpl.n	8014a4e <_fwalk_sglue+0x22>
 8014a42:	6824      	ldr	r4, [r4, #0]
 8014a44:	2c00      	cmp	r4, #0
 8014a46:	d1f7      	bne.n	8014a38 <_fwalk_sglue+0xc>
 8014a48:	4630      	mov	r0, r6
 8014a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a4e:	89ab      	ldrh	r3, [r5, #12]
 8014a50:	2b01      	cmp	r3, #1
 8014a52:	d907      	bls.n	8014a64 <_fwalk_sglue+0x38>
 8014a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a58:	3301      	adds	r3, #1
 8014a5a:	d003      	beq.n	8014a64 <_fwalk_sglue+0x38>
 8014a5c:	4629      	mov	r1, r5
 8014a5e:	4638      	mov	r0, r7
 8014a60:	47c0      	blx	r8
 8014a62:	4306      	orrs	r6, r0
 8014a64:	3568      	adds	r5, #104	; 0x68
 8014a66:	e7e9      	b.n	8014a3c <_fwalk_sglue+0x10>

08014a68 <siprintf>:
 8014a68:	b40e      	push	{r1, r2, r3}
 8014a6a:	b500      	push	{lr}
 8014a6c:	b09c      	sub	sp, #112	; 0x70
 8014a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8014a70:	9002      	str	r0, [sp, #8]
 8014a72:	9006      	str	r0, [sp, #24]
 8014a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a78:	4809      	ldr	r0, [pc, #36]	; (8014aa0 <siprintf+0x38>)
 8014a7a:	9107      	str	r1, [sp, #28]
 8014a7c:	9104      	str	r1, [sp, #16]
 8014a7e:	4909      	ldr	r1, [pc, #36]	; (8014aa4 <siprintf+0x3c>)
 8014a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a84:	9105      	str	r1, [sp, #20]
 8014a86:	6800      	ldr	r0, [r0, #0]
 8014a88:	9301      	str	r3, [sp, #4]
 8014a8a:	a902      	add	r1, sp, #8
 8014a8c:	f001 fcac 	bl	80163e8 <_svfiprintf_r>
 8014a90:	9b02      	ldr	r3, [sp, #8]
 8014a92:	2200      	movs	r2, #0
 8014a94:	701a      	strb	r2, [r3, #0]
 8014a96:	b01c      	add	sp, #112	; 0x70
 8014a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a9c:	b003      	add	sp, #12
 8014a9e:	4770      	bx	lr
 8014aa0:	2000017c 	.word	0x2000017c
 8014aa4:	ffff0208 	.word	0xffff0208

08014aa8 <__sread>:
 8014aa8:	b510      	push	{r4, lr}
 8014aaa:	460c      	mov	r4, r1
 8014aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ab0:	f000 f8ea 	bl	8014c88 <_read_r>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	bfab      	itete	ge
 8014ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014aba:	89a3      	ldrhlt	r3, [r4, #12]
 8014abc:	181b      	addge	r3, r3, r0
 8014abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014ac2:	bfac      	ite	ge
 8014ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8014ac6:	81a3      	strhlt	r3, [r4, #12]
 8014ac8:	bd10      	pop	{r4, pc}

08014aca <__swrite>:
 8014aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ace:	461f      	mov	r7, r3
 8014ad0:	898b      	ldrh	r3, [r1, #12]
 8014ad2:	05db      	lsls	r3, r3, #23
 8014ad4:	4605      	mov	r5, r0
 8014ad6:	460c      	mov	r4, r1
 8014ad8:	4616      	mov	r6, r2
 8014ada:	d505      	bpl.n	8014ae8 <__swrite+0x1e>
 8014adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ae0:	2302      	movs	r3, #2
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f000 f8be 	bl	8014c64 <_lseek_r>
 8014ae8:	89a3      	ldrh	r3, [r4, #12]
 8014aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014af2:	81a3      	strh	r3, [r4, #12]
 8014af4:	4632      	mov	r2, r6
 8014af6:	463b      	mov	r3, r7
 8014af8:	4628      	mov	r0, r5
 8014afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014afe:	f000 b8d5 	b.w	8014cac <_write_r>

08014b02 <__sseek>:
 8014b02:	b510      	push	{r4, lr}
 8014b04:	460c      	mov	r4, r1
 8014b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b0a:	f000 f8ab 	bl	8014c64 <_lseek_r>
 8014b0e:	1c43      	adds	r3, r0, #1
 8014b10:	89a3      	ldrh	r3, [r4, #12]
 8014b12:	bf15      	itete	ne
 8014b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b1e:	81a3      	strheq	r3, [r4, #12]
 8014b20:	bf18      	it	ne
 8014b22:	81a3      	strhne	r3, [r4, #12]
 8014b24:	bd10      	pop	{r4, pc}

08014b26 <__sclose>:
 8014b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b2a:	f000 b835 	b.w	8014b98 <_close_r>

08014b2e <memmove>:
 8014b2e:	4288      	cmp	r0, r1
 8014b30:	b510      	push	{r4, lr}
 8014b32:	eb01 0402 	add.w	r4, r1, r2
 8014b36:	d902      	bls.n	8014b3e <memmove+0x10>
 8014b38:	4284      	cmp	r4, r0
 8014b3a:	4623      	mov	r3, r4
 8014b3c:	d807      	bhi.n	8014b4e <memmove+0x20>
 8014b3e:	1e43      	subs	r3, r0, #1
 8014b40:	42a1      	cmp	r1, r4
 8014b42:	d008      	beq.n	8014b56 <memmove+0x28>
 8014b44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b4c:	e7f8      	b.n	8014b40 <memmove+0x12>
 8014b4e:	4402      	add	r2, r0
 8014b50:	4601      	mov	r1, r0
 8014b52:	428a      	cmp	r2, r1
 8014b54:	d100      	bne.n	8014b58 <memmove+0x2a>
 8014b56:	bd10      	pop	{r4, pc}
 8014b58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b60:	e7f7      	b.n	8014b52 <memmove+0x24>

08014b62 <memset>:
 8014b62:	4402      	add	r2, r0
 8014b64:	4603      	mov	r3, r0
 8014b66:	4293      	cmp	r3, r2
 8014b68:	d100      	bne.n	8014b6c <memset+0xa>
 8014b6a:	4770      	bx	lr
 8014b6c:	f803 1b01 	strb.w	r1, [r3], #1
 8014b70:	e7f9      	b.n	8014b66 <memset+0x4>

08014b72 <strcat>:
 8014b72:	b510      	push	{r4, lr}
 8014b74:	4602      	mov	r2, r0
 8014b76:	7814      	ldrb	r4, [r2, #0]
 8014b78:	4613      	mov	r3, r2
 8014b7a:	3201      	adds	r2, #1
 8014b7c:	2c00      	cmp	r4, #0
 8014b7e:	d1fa      	bne.n	8014b76 <strcat+0x4>
 8014b80:	3b01      	subs	r3, #1
 8014b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b8a:	2a00      	cmp	r2, #0
 8014b8c:	d1f9      	bne.n	8014b82 <strcat+0x10>
 8014b8e:	bd10      	pop	{r4, pc}

08014b90 <_localeconv_r>:
 8014b90:	4800      	ldr	r0, [pc, #0]	; (8014b94 <_localeconv_r+0x4>)
 8014b92:	4770      	bx	lr
 8014b94:	20000270 	.word	0x20000270

08014b98 <_close_r>:
 8014b98:	b538      	push	{r3, r4, r5, lr}
 8014b9a:	4d06      	ldr	r5, [pc, #24]	; (8014bb4 <_close_r+0x1c>)
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	4608      	mov	r0, r1
 8014ba2:	602b      	str	r3, [r5, #0]
 8014ba4:	f7f0 fa4f 	bl	8005046 <_close>
 8014ba8:	1c43      	adds	r3, r0, #1
 8014baa:	d102      	bne.n	8014bb2 <_close_r+0x1a>
 8014bac:	682b      	ldr	r3, [r5, #0]
 8014bae:	b103      	cbz	r3, 8014bb2 <_close_r+0x1a>
 8014bb0:	6023      	str	r3, [r4, #0]
 8014bb2:	bd38      	pop	{r3, r4, r5, pc}
 8014bb4:	20005bf0 	.word	0x20005bf0

08014bb8 <_reclaim_reent>:
 8014bb8:	4b29      	ldr	r3, [pc, #164]	; (8014c60 <_reclaim_reent+0xa8>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	4283      	cmp	r3, r0
 8014bbe:	b570      	push	{r4, r5, r6, lr}
 8014bc0:	4604      	mov	r4, r0
 8014bc2:	d04b      	beq.n	8014c5c <_reclaim_reent+0xa4>
 8014bc4:	69c3      	ldr	r3, [r0, #28]
 8014bc6:	b143      	cbz	r3, 8014bda <_reclaim_reent+0x22>
 8014bc8:	68db      	ldr	r3, [r3, #12]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d144      	bne.n	8014c58 <_reclaim_reent+0xa0>
 8014bce:	69e3      	ldr	r3, [r4, #28]
 8014bd0:	6819      	ldr	r1, [r3, #0]
 8014bd2:	b111      	cbz	r1, 8014bda <_reclaim_reent+0x22>
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	f000 ff31 	bl	8015a3c <_free_r>
 8014bda:	6961      	ldr	r1, [r4, #20]
 8014bdc:	b111      	cbz	r1, 8014be4 <_reclaim_reent+0x2c>
 8014bde:	4620      	mov	r0, r4
 8014be0:	f000 ff2c 	bl	8015a3c <_free_r>
 8014be4:	69e1      	ldr	r1, [r4, #28]
 8014be6:	b111      	cbz	r1, 8014bee <_reclaim_reent+0x36>
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 ff27 	bl	8015a3c <_free_r>
 8014bee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014bf0:	b111      	cbz	r1, 8014bf8 <_reclaim_reent+0x40>
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f000 ff22 	bl	8015a3c <_free_r>
 8014bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bfa:	b111      	cbz	r1, 8014c02 <_reclaim_reent+0x4a>
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	f000 ff1d 	bl	8015a3c <_free_r>
 8014c02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014c04:	b111      	cbz	r1, 8014c0c <_reclaim_reent+0x54>
 8014c06:	4620      	mov	r0, r4
 8014c08:	f000 ff18 	bl	8015a3c <_free_r>
 8014c0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014c0e:	b111      	cbz	r1, 8014c16 <_reclaim_reent+0x5e>
 8014c10:	4620      	mov	r0, r4
 8014c12:	f000 ff13 	bl	8015a3c <_free_r>
 8014c16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014c18:	b111      	cbz	r1, 8014c20 <_reclaim_reent+0x68>
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f000 ff0e 	bl	8015a3c <_free_r>
 8014c20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014c22:	b111      	cbz	r1, 8014c2a <_reclaim_reent+0x72>
 8014c24:	4620      	mov	r0, r4
 8014c26:	f000 ff09 	bl	8015a3c <_free_r>
 8014c2a:	6a23      	ldr	r3, [r4, #32]
 8014c2c:	b1b3      	cbz	r3, 8014c5c <_reclaim_reent+0xa4>
 8014c2e:	4620      	mov	r0, r4
 8014c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c34:	4718      	bx	r3
 8014c36:	5949      	ldr	r1, [r1, r5]
 8014c38:	b941      	cbnz	r1, 8014c4c <_reclaim_reent+0x94>
 8014c3a:	3504      	adds	r5, #4
 8014c3c:	69e3      	ldr	r3, [r4, #28]
 8014c3e:	2d80      	cmp	r5, #128	; 0x80
 8014c40:	68d9      	ldr	r1, [r3, #12]
 8014c42:	d1f8      	bne.n	8014c36 <_reclaim_reent+0x7e>
 8014c44:	4620      	mov	r0, r4
 8014c46:	f000 fef9 	bl	8015a3c <_free_r>
 8014c4a:	e7c0      	b.n	8014bce <_reclaim_reent+0x16>
 8014c4c:	680e      	ldr	r6, [r1, #0]
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f000 fef4 	bl	8015a3c <_free_r>
 8014c54:	4631      	mov	r1, r6
 8014c56:	e7ef      	b.n	8014c38 <_reclaim_reent+0x80>
 8014c58:	2500      	movs	r5, #0
 8014c5a:	e7ef      	b.n	8014c3c <_reclaim_reent+0x84>
 8014c5c:	bd70      	pop	{r4, r5, r6, pc}
 8014c5e:	bf00      	nop
 8014c60:	2000017c 	.word	0x2000017c

08014c64 <_lseek_r>:
 8014c64:	b538      	push	{r3, r4, r5, lr}
 8014c66:	4d07      	ldr	r5, [pc, #28]	; (8014c84 <_lseek_r+0x20>)
 8014c68:	4604      	mov	r4, r0
 8014c6a:	4608      	mov	r0, r1
 8014c6c:	4611      	mov	r1, r2
 8014c6e:	2200      	movs	r2, #0
 8014c70:	602a      	str	r2, [r5, #0]
 8014c72:	461a      	mov	r2, r3
 8014c74:	f7f0 fa0e 	bl	8005094 <_lseek>
 8014c78:	1c43      	adds	r3, r0, #1
 8014c7a:	d102      	bne.n	8014c82 <_lseek_r+0x1e>
 8014c7c:	682b      	ldr	r3, [r5, #0]
 8014c7e:	b103      	cbz	r3, 8014c82 <_lseek_r+0x1e>
 8014c80:	6023      	str	r3, [r4, #0]
 8014c82:	bd38      	pop	{r3, r4, r5, pc}
 8014c84:	20005bf0 	.word	0x20005bf0

08014c88 <_read_r>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	4d07      	ldr	r5, [pc, #28]	; (8014ca8 <_read_r+0x20>)
 8014c8c:	4604      	mov	r4, r0
 8014c8e:	4608      	mov	r0, r1
 8014c90:	4611      	mov	r1, r2
 8014c92:	2200      	movs	r2, #0
 8014c94:	602a      	str	r2, [r5, #0]
 8014c96:	461a      	mov	r2, r3
 8014c98:	f7f0 f99c 	bl	8004fd4 <_read>
 8014c9c:	1c43      	adds	r3, r0, #1
 8014c9e:	d102      	bne.n	8014ca6 <_read_r+0x1e>
 8014ca0:	682b      	ldr	r3, [r5, #0]
 8014ca2:	b103      	cbz	r3, 8014ca6 <_read_r+0x1e>
 8014ca4:	6023      	str	r3, [r4, #0]
 8014ca6:	bd38      	pop	{r3, r4, r5, pc}
 8014ca8:	20005bf0 	.word	0x20005bf0

08014cac <_write_r>:
 8014cac:	b538      	push	{r3, r4, r5, lr}
 8014cae:	4d07      	ldr	r5, [pc, #28]	; (8014ccc <_write_r+0x20>)
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	4608      	mov	r0, r1
 8014cb4:	4611      	mov	r1, r2
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	602a      	str	r2, [r5, #0]
 8014cba:	461a      	mov	r2, r3
 8014cbc:	f7f0 f9a7 	bl	800500e <_write>
 8014cc0:	1c43      	adds	r3, r0, #1
 8014cc2:	d102      	bne.n	8014cca <_write_r+0x1e>
 8014cc4:	682b      	ldr	r3, [r5, #0]
 8014cc6:	b103      	cbz	r3, 8014cca <_write_r+0x1e>
 8014cc8:	6023      	str	r3, [r4, #0]
 8014cca:	bd38      	pop	{r3, r4, r5, pc}
 8014ccc:	20005bf0 	.word	0x20005bf0

08014cd0 <__errno>:
 8014cd0:	4b01      	ldr	r3, [pc, #4]	; (8014cd8 <__errno+0x8>)
 8014cd2:	6818      	ldr	r0, [r3, #0]
 8014cd4:	4770      	bx	lr
 8014cd6:	bf00      	nop
 8014cd8:	2000017c 	.word	0x2000017c

08014cdc <__libc_init_array>:
 8014cdc:	b570      	push	{r4, r5, r6, lr}
 8014cde:	4d0d      	ldr	r5, [pc, #52]	; (8014d14 <__libc_init_array+0x38>)
 8014ce0:	4c0d      	ldr	r4, [pc, #52]	; (8014d18 <__libc_init_array+0x3c>)
 8014ce2:	1b64      	subs	r4, r4, r5
 8014ce4:	10a4      	asrs	r4, r4, #2
 8014ce6:	2600      	movs	r6, #0
 8014ce8:	42a6      	cmp	r6, r4
 8014cea:	d109      	bne.n	8014d00 <__libc_init_array+0x24>
 8014cec:	4d0b      	ldr	r5, [pc, #44]	; (8014d1c <__libc_init_array+0x40>)
 8014cee:	4c0c      	ldr	r4, [pc, #48]	; (8014d20 <__libc_init_array+0x44>)
 8014cf0:	f002 f8c2 	bl	8016e78 <_init>
 8014cf4:	1b64      	subs	r4, r4, r5
 8014cf6:	10a4      	asrs	r4, r4, #2
 8014cf8:	2600      	movs	r6, #0
 8014cfa:	42a6      	cmp	r6, r4
 8014cfc:	d105      	bne.n	8014d0a <__libc_init_array+0x2e>
 8014cfe:	bd70      	pop	{r4, r5, r6, pc}
 8014d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d04:	4798      	blx	r3
 8014d06:	3601      	adds	r6, #1
 8014d08:	e7ee      	b.n	8014ce8 <__libc_init_array+0xc>
 8014d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d0e:	4798      	blx	r3
 8014d10:	3601      	adds	r6, #1
 8014d12:	e7f2      	b.n	8014cfa <__libc_init_array+0x1e>
 8014d14:	08017bec 	.word	0x08017bec
 8014d18:	08017bec 	.word	0x08017bec
 8014d1c:	08017bec 	.word	0x08017bec
 8014d20:	08017bf0 	.word	0x08017bf0

08014d24 <__retarget_lock_init_recursive>:
 8014d24:	4770      	bx	lr

08014d26 <__retarget_lock_acquire_recursive>:
 8014d26:	4770      	bx	lr

08014d28 <__retarget_lock_release_recursive>:
 8014d28:	4770      	bx	lr

08014d2a <memcpy>:
 8014d2a:	440a      	add	r2, r1
 8014d2c:	4291      	cmp	r1, r2
 8014d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d32:	d100      	bne.n	8014d36 <memcpy+0xc>
 8014d34:	4770      	bx	lr
 8014d36:	b510      	push	{r4, lr}
 8014d38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d40:	4291      	cmp	r1, r2
 8014d42:	d1f9      	bne.n	8014d38 <memcpy+0xe>
 8014d44:	bd10      	pop	{r4, pc}

08014d46 <quorem>:
 8014d46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4a:	6903      	ldr	r3, [r0, #16]
 8014d4c:	690c      	ldr	r4, [r1, #16]
 8014d4e:	42a3      	cmp	r3, r4
 8014d50:	4607      	mov	r7, r0
 8014d52:	db7e      	blt.n	8014e52 <quorem+0x10c>
 8014d54:	3c01      	subs	r4, #1
 8014d56:	f101 0814 	add.w	r8, r1, #20
 8014d5a:	f100 0514 	add.w	r5, r0, #20
 8014d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d62:	9301      	str	r3, [sp, #4]
 8014d64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014d74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d78:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d7c:	d331      	bcc.n	8014de2 <quorem+0x9c>
 8014d7e:	f04f 0e00 	mov.w	lr, #0
 8014d82:	4640      	mov	r0, r8
 8014d84:	46ac      	mov	ip, r5
 8014d86:	46f2      	mov	sl, lr
 8014d88:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d8c:	b293      	uxth	r3, r2
 8014d8e:	fb06 e303 	mla	r3, r6, r3, lr
 8014d92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014d96:	0c1a      	lsrs	r2, r3, #16
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	ebaa 0303 	sub.w	r3, sl, r3
 8014d9e:	f8dc a000 	ldr.w	sl, [ip]
 8014da2:	fa13 f38a 	uxtah	r3, r3, sl
 8014da6:	fb06 220e 	mla	r2, r6, lr, r2
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	9b00      	ldr	r3, [sp, #0]
 8014dae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014db2:	b292      	uxth	r2, r2
 8014db4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014dbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8014dc0:	4581      	cmp	r9, r0
 8014dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dc6:	f84c 3b04 	str.w	r3, [ip], #4
 8014dca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014dce:	d2db      	bcs.n	8014d88 <quorem+0x42>
 8014dd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8014dd4:	b92b      	cbnz	r3, 8014de2 <quorem+0x9c>
 8014dd6:	9b01      	ldr	r3, [sp, #4]
 8014dd8:	3b04      	subs	r3, #4
 8014dda:	429d      	cmp	r5, r3
 8014ddc:	461a      	mov	r2, r3
 8014dde:	d32c      	bcc.n	8014e3a <quorem+0xf4>
 8014de0:	613c      	str	r4, [r7, #16]
 8014de2:	4638      	mov	r0, r7
 8014de4:	f001 f9a6 	bl	8016134 <__mcmp>
 8014de8:	2800      	cmp	r0, #0
 8014dea:	db22      	blt.n	8014e32 <quorem+0xec>
 8014dec:	3601      	adds	r6, #1
 8014dee:	4629      	mov	r1, r5
 8014df0:	2000      	movs	r0, #0
 8014df2:	f858 2b04 	ldr.w	r2, [r8], #4
 8014df6:	f8d1 c000 	ldr.w	ip, [r1]
 8014dfa:	b293      	uxth	r3, r2
 8014dfc:	1ac3      	subs	r3, r0, r3
 8014dfe:	0c12      	lsrs	r2, r2, #16
 8014e00:	fa13 f38c 	uxtah	r3, r3, ip
 8014e04:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e0c:	b29b      	uxth	r3, r3
 8014e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e12:	45c1      	cmp	r9, r8
 8014e14:	f841 3b04 	str.w	r3, [r1], #4
 8014e18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e1c:	d2e9      	bcs.n	8014df2 <quorem+0xac>
 8014e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e26:	b922      	cbnz	r2, 8014e32 <quorem+0xec>
 8014e28:	3b04      	subs	r3, #4
 8014e2a:	429d      	cmp	r5, r3
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	d30a      	bcc.n	8014e46 <quorem+0x100>
 8014e30:	613c      	str	r4, [r7, #16]
 8014e32:	4630      	mov	r0, r6
 8014e34:	b003      	add	sp, #12
 8014e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e3a:	6812      	ldr	r2, [r2, #0]
 8014e3c:	3b04      	subs	r3, #4
 8014e3e:	2a00      	cmp	r2, #0
 8014e40:	d1ce      	bne.n	8014de0 <quorem+0x9a>
 8014e42:	3c01      	subs	r4, #1
 8014e44:	e7c9      	b.n	8014dda <quorem+0x94>
 8014e46:	6812      	ldr	r2, [r2, #0]
 8014e48:	3b04      	subs	r3, #4
 8014e4a:	2a00      	cmp	r2, #0
 8014e4c:	d1f0      	bne.n	8014e30 <quorem+0xea>
 8014e4e:	3c01      	subs	r4, #1
 8014e50:	e7eb      	b.n	8014e2a <quorem+0xe4>
 8014e52:	2000      	movs	r0, #0
 8014e54:	e7ee      	b.n	8014e34 <quorem+0xee>
	...

08014e58 <_dtoa_r>:
 8014e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e5c:	ed2d 8b04 	vpush	{d8-d9}
 8014e60:	69c5      	ldr	r5, [r0, #28]
 8014e62:	b093      	sub	sp, #76	; 0x4c
 8014e64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014e68:	ec57 6b10 	vmov	r6, r7, d0
 8014e6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014e70:	9107      	str	r1, [sp, #28]
 8014e72:	4604      	mov	r4, r0
 8014e74:	920a      	str	r2, [sp, #40]	; 0x28
 8014e76:	930d      	str	r3, [sp, #52]	; 0x34
 8014e78:	b975      	cbnz	r5, 8014e98 <_dtoa_r+0x40>
 8014e7a:	2010      	movs	r0, #16
 8014e7c:	f000 fe2a 	bl	8015ad4 <malloc>
 8014e80:	4602      	mov	r2, r0
 8014e82:	61e0      	str	r0, [r4, #28]
 8014e84:	b920      	cbnz	r0, 8014e90 <_dtoa_r+0x38>
 8014e86:	4bae      	ldr	r3, [pc, #696]	; (8015140 <_dtoa_r+0x2e8>)
 8014e88:	21ef      	movs	r1, #239	; 0xef
 8014e8a:	48ae      	ldr	r0, [pc, #696]	; (8015144 <_dtoa_r+0x2ec>)
 8014e8c:	f001 fc68 	bl	8016760 <__assert_func>
 8014e90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e94:	6005      	str	r5, [r0, #0]
 8014e96:	60c5      	str	r5, [r0, #12]
 8014e98:	69e3      	ldr	r3, [r4, #28]
 8014e9a:	6819      	ldr	r1, [r3, #0]
 8014e9c:	b151      	cbz	r1, 8014eb4 <_dtoa_r+0x5c>
 8014e9e:	685a      	ldr	r2, [r3, #4]
 8014ea0:	604a      	str	r2, [r1, #4]
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	4093      	lsls	r3, r2
 8014ea6:	608b      	str	r3, [r1, #8]
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f000 ff07 	bl	8015cbc <_Bfree>
 8014eae:	69e3      	ldr	r3, [r4, #28]
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	601a      	str	r2, [r3, #0]
 8014eb4:	1e3b      	subs	r3, r7, #0
 8014eb6:	bfbb      	ittet	lt
 8014eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014ebc:	9303      	strlt	r3, [sp, #12]
 8014ebe:	2300      	movge	r3, #0
 8014ec0:	2201      	movlt	r2, #1
 8014ec2:	bfac      	ite	ge
 8014ec4:	f8c8 3000 	strge.w	r3, [r8]
 8014ec8:	f8c8 2000 	strlt.w	r2, [r8]
 8014ecc:	4b9e      	ldr	r3, [pc, #632]	; (8015148 <_dtoa_r+0x2f0>)
 8014ece:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014ed2:	ea33 0308 	bics.w	r3, r3, r8
 8014ed6:	d11b      	bne.n	8014f10 <_dtoa_r+0xb8>
 8014ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014eda:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ede:	6013      	str	r3, [r2, #0]
 8014ee0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014ee4:	4333      	orrs	r3, r6
 8014ee6:	f000 8593 	beq.w	8015a10 <_dtoa_r+0xbb8>
 8014eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014eec:	b963      	cbnz	r3, 8014f08 <_dtoa_r+0xb0>
 8014eee:	4b97      	ldr	r3, [pc, #604]	; (801514c <_dtoa_r+0x2f4>)
 8014ef0:	e027      	b.n	8014f42 <_dtoa_r+0xea>
 8014ef2:	4b97      	ldr	r3, [pc, #604]	; (8015150 <_dtoa_r+0x2f8>)
 8014ef4:	9300      	str	r3, [sp, #0]
 8014ef6:	3308      	adds	r3, #8
 8014ef8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014efa:	6013      	str	r3, [r2, #0]
 8014efc:	9800      	ldr	r0, [sp, #0]
 8014efe:	b013      	add	sp, #76	; 0x4c
 8014f00:	ecbd 8b04 	vpop	{d8-d9}
 8014f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f08:	4b90      	ldr	r3, [pc, #576]	; (801514c <_dtoa_r+0x2f4>)
 8014f0a:	9300      	str	r3, [sp, #0]
 8014f0c:	3303      	adds	r3, #3
 8014f0e:	e7f3      	b.n	8014ef8 <_dtoa_r+0xa0>
 8014f10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014f14:	2200      	movs	r2, #0
 8014f16:	ec51 0b17 	vmov	r0, r1, d7
 8014f1a:	eeb0 8a47 	vmov.f32	s16, s14
 8014f1e:	eef0 8a67 	vmov.f32	s17, s15
 8014f22:	2300      	movs	r3, #0
 8014f24:	f7eb fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8014f28:	4681      	mov	r9, r0
 8014f2a:	b160      	cbz	r0, 8014f46 <_dtoa_r+0xee>
 8014f2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f2e:	2301      	movs	r3, #1
 8014f30:	6013      	str	r3, [r2, #0]
 8014f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	f000 8568 	beq.w	8015a0a <_dtoa_r+0xbb2>
 8014f3a:	4b86      	ldr	r3, [pc, #536]	; (8015154 <_dtoa_r+0x2fc>)
 8014f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014f3e:	6013      	str	r3, [r2, #0]
 8014f40:	3b01      	subs	r3, #1
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	e7da      	b.n	8014efc <_dtoa_r+0xa4>
 8014f46:	aa10      	add	r2, sp, #64	; 0x40
 8014f48:	a911      	add	r1, sp, #68	; 0x44
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	eeb0 0a48 	vmov.f32	s0, s16
 8014f50:	eef0 0a68 	vmov.f32	s1, s17
 8014f54:	f001 f994 	bl	8016280 <__d2b>
 8014f58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014f5c:	4682      	mov	sl, r0
 8014f5e:	2d00      	cmp	r5, #0
 8014f60:	d07f      	beq.n	8015062 <_dtoa_r+0x20a>
 8014f62:	ee18 3a90 	vmov	r3, s17
 8014f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014f6e:	ec51 0b18 	vmov	r0, r1, d8
 8014f72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014f7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014f7e:	4619      	mov	r1, r3
 8014f80:	2200      	movs	r2, #0
 8014f82:	4b75      	ldr	r3, [pc, #468]	; (8015158 <_dtoa_r+0x300>)
 8014f84:	f7eb f988 	bl	8000298 <__aeabi_dsub>
 8014f88:	a367      	add	r3, pc, #412	; (adr r3, 8015128 <_dtoa_r+0x2d0>)
 8014f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8e:	f7eb fb3b 	bl	8000608 <__aeabi_dmul>
 8014f92:	a367      	add	r3, pc, #412	; (adr r3, 8015130 <_dtoa_r+0x2d8>)
 8014f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f98:	f7eb f980 	bl	800029c <__adddf3>
 8014f9c:	4606      	mov	r6, r0
 8014f9e:	4628      	mov	r0, r5
 8014fa0:	460f      	mov	r7, r1
 8014fa2:	f7eb fac7 	bl	8000534 <__aeabi_i2d>
 8014fa6:	a364      	add	r3, pc, #400	; (adr r3, 8015138 <_dtoa_r+0x2e0>)
 8014fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fac:	f7eb fb2c 	bl	8000608 <__aeabi_dmul>
 8014fb0:	4602      	mov	r2, r0
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	4630      	mov	r0, r6
 8014fb6:	4639      	mov	r1, r7
 8014fb8:	f7eb f970 	bl	800029c <__adddf3>
 8014fbc:	4606      	mov	r6, r0
 8014fbe:	460f      	mov	r7, r1
 8014fc0:	f7eb fdd2 	bl	8000b68 <__aeabi_d2iz>
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	4683      	mov	fp, r0
 8014fc8:	2300      	movs	r3, #0
 8014fca:	4630      	mov	r0, r6
 8014fcc:	4639      	mov	r1, r7
 8014fce:	f7eb fd8d 	bl	8000aec <__aeabi_dcmplt>
 8014fd2:	b148      	cbz	r0, 8014fe8 <_dtoa_r+0x190>
 8014fd4:	4658      	mov	r0, fp
 8014fd6:	f7eb faad 	bl	8000534 <__aeabi_i2d>
 8014fda:	4632      	mov	r2, r6
 8014fdc:	463b      	mov	r3, r7
 8014fde:	f7eb fd7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8014fe2:	b908      	cbnz	r0, 8014fe8 <_dtoa_r+0x190>
 8014fe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014fe8:	f1bb 0f16 	cmp.w	fp, #22
 8014fec:	d857      	bhi.n	801509e <_dtoa_r+0x246>
 8014fee:	4b5b      	ldr	r3, [pc, #364]	; (801515c <_dtoa_r+0x304>)
 8014ff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff8:	ec51 0b18 	vmov	r0, r1, d8
 8014ffc:	f7eb fd76 	bl	8000aec <__aeabi_dcmplt>
 8015000:	2800      	cmp	r0, #0
 8015002:	d04e      	beq.n	80150a2 <_dtoa_r+0x24a>
 8015004:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015008:	2300      	movs	r3, #0
 801500a:	930c      	str	r3, [sp, #48]	; 0x30
 801500c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801500e:	1b5b      	subs	r3, r3, r5
 8015010:	1e5a      	subs	r2, r3, #1
 8015012:	bf45      	ittet	mi
 8015014:	f1c3 0301 	rsbmi	r3, r3, #1
 8015018:	9305      	strmi	r3, [sp, #20]
 801501a:	2300      	movpl	r3, #0
 801501c:	2300      	movmi	r3, #0
 801501e:	9206      	str	r2, [sp, #24]
 8015020:	bf54      	ite	pl
 8015022:	9305      	strpl	r3, [sp, #20]
 8015024:	9306      	strmi	r3, [sp, #24]
 8015026:	f1bb 0f00 	cmp.w	fp, #0
 801502a:	db3c      	blt.n	80150a6 <_dtoa_r+0x24e>
 801502c:	9b06      	ldr	r3, [sp, #24]
 801502e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015032:	445b      	add	r3, fp
 8015034:	9306      	str	r3, [sp, #24]
 8015036:	2300      	movs	r3, #0
 8015038:	9308      	str	r3, [sp, #32]
 801503a:	9b07      	ldr	r3, [sp, #28]
 801503c:	2b09      	cmp	r3, #9
 801503e:	d868      	bhi.n	8015112 <_dtoa_r+0x2ba>
 8015040:	2b05      	cmp	r3, #5
 8015042:	bfc4      	itt	gt
 8015044:	3b04      	subgt	r3, #4
 8015046:	9307      	strgt	r3, [sp, #28]
 8015048:	9b07      	ldr	r3, [sp, #28]
 801504a:	f1a3 0302 	sub.w	r3, r3, #2
 801504e:	bfcc      	ite	gt
 8015050:	2500      	movgt	r5, #0
 8015052:	2501      	movle	r5, #1
 8015054:	2b03      	cmp	r3, #3
 8015056:	f200 8085 	bhi.w	8015164 <_dtoa_r+0x30c>
 801505a:	e8df f003 	tbb	[pc, r3]
 801505e:	3b2e      	.short	0x3b2e
 8015060:	5839      	.short	0x5839
 8015062:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015066:	441d      	add	r5, r3
 8015068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801506c:	2b20      	cmp	r3, #32
 801506e:	bfc1      	itttt	gt
 8015070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015074:	fa08 f803 	lslgt.w	r8, r8, r3
 8015078:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801507c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015080:	bfd6      	itet	le
 8015082:	f1c3 0320 	rsble	r3, r3, #32
 8015086:	ea48 0003 	orrgt.w	r0, r8, r3
 801508a:	fa06 f003 	lslle.w	r0, r6, r3
 801508e:	f7eb fa41 	bl	8000514 <__aeabi_ui2d>
 8015092:	2201      	movs	r2, #1
 8015094:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015098:	3d01      	subs	r5, #1
 801509a:	920e      	str	r2, [sp, #56]	; 0x38
 801509c:	e76f      	b.n	8014f7e <_dtoa_r+0x126>
 801509e:	2301      	movs	r3, #1
 80150a0:	e7b3      	b.n	801500a <_dtoa_r+0x1b2>
 80150a2:	900c      	str	r0, [sp, #48]	; 0x30
 80150a4:	e7b2      	b.n	801500c <_dtoa_r+0x1b4>
 80150a6:	9b05      	ldr	r3, [sp, #20]
 80150a8:	eba3 030b 	sub.w	r3, r3, fp
 80150ac:	9305      	str	r3, [sp, #20]
 80150ae:	f1cb 0300 	rsb	r3, fp, #0
 80150b2:	9308      	str	r3, [sp, #32]
 80150b4:	2300      	movs	r3, #0
 80150b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80150b8:	e7bf      	b.n	801503a <_dtoa_r+0x1e2>
 80150ba:	2300      	movs	r3, #0
 80150bc:	9309      	str	r3, [sp, #36]	; 0x24
 80150be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	dc52      	bgt.n	801516a <_dtoa_r+0x312>
 80150c4:	2301      	movs	r3, #1
 80150c6:	9301      	str	r3, [sp, #4]
 80150c8:	9304      	str	r3, [sp, #16]
 80150ca:	461a      	mov	r2, r3
 80150cc:	920a      	str	r2, [sp, #40]	; 0x28
 80150ce:	e00b      	b.n	80150e8 <_dtoa_r+0x290>
 80150d0:	2301      	movs	r3, #1
 80150d2:	e7f3      	b.n	80150bc <_dtoa_r+0x264>
 80150d4:	2300      	movs	r3, #0
 80150d6:	9309      	str	r3, [sp, #36]	; 0x24
 80150d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150da:	445b      	add	r3, fp
 80150dc:	9301      	str	r3, [sp, #4]
 80150de:	3301      	adds	r3, #1
 80150e0:	2b01      	cmp	r3, #1
 80150e2:	9304      	str	r3, [sp, #16]
 80150e4:	bfb8      	it	lt
 80150e6:	2301      	movlt	r3, #1
 80150e8:	69e0      	ldr	r0, [r4, #28]
 80150ea:	2100      	movs	r1, #0
 80150ec:	2204      	movs	r2, #4
 80150ee:	f102 0614 	add.w	r6, r2, #20
 80150f2:	429e      	cmp	r6, r3
 80150f4:	d93d      	bls.n	8015172 <_dtoa_r+0x31a>
 80150f6:	6041      	str	r1, [r0, #4]
 80150f8:	4620      	mov	r0, r4
 80150fa:	f000 fd9f 	bl	8015c3c <_Balloc>
 80150fe:	9000      	str	r0, [sp, #0]
 8015100:	2800      	cmp	r0, #0
 8015102:	d139      	bne.n	8015178 <_dtoa_r+0x320>
 8015104:	4b16      	ldr	r3, [pc, #88]	; (8015160 <_dtoa_r+0x308>)
 8015106:	4602      	mov	r2, r0
 8015108:	f240 11af 	movw	r1, #431	; 0x1af
 801510c:	e6bd      	b.n	8014e8a <_dtoa_r+0x32>
 801510e:	2301      	movs	r3, #1
 8015110:	e7e1      	b.n	80150d6 <_dtoa_r+0x27e>
 8015112:	2501      	movs	r5, #1
 8015114:	2300      	movs	r3, #0
 8015116:	9307      	str	r3, [sp, #28]
 8015118:	9509      	str	r5, [sp, #36]	; 0x24
 801511a:	f04f 33ff 	mov.w	r3, #4294967295
 801511e:	9301      	str	r3, [sp, #4]
 8015120:	9304      	str	r3, [sp, #16]
 8015122:	2200      	movs	r2, #0
 8015124:	2312      	movs	r3, #18
 8015126:	e7d1      	b.n	80150cc <_dtoa_r+0x274>
 8015128:	636f4361 	.word	0x636f4361
 801512c:	3fd287a7 	.word	0x3fd287a7
 8015130:	8b60c8b3 	.word	0x8b60c8b3
 8015134:	3fc68a28 	.word	0x3fc68a28
 8015138:	509f79fb 	.word	0x509f79fb
 801513c:	3fd34413 	.word	0x3fd34413
 8015140:	080178b1 	.word	0x080178b1
 8015144:	080178c8 	.word	0x080178c8
 8015148:	7ff00000 	.word	0x7ff00000
 801514c:	080178ad 	.word	0x080178ad
 8015150:	080178a4 	.word	0x080178a4
 8015154:	08017881 	.word	0x08017881
 8015158:	3ff80000 	.word	0x3ff80000
 801515c:	080179b8 	.word	0x080179b8
 8015160:	08017920 	.word	0x08017920
 8015164:	2301      	movs	r3, #1
 8015166:	9309      	str	r3, [sp, #36]	; 0x24
 8015168:	e7d7      	b.n	801511a <_dtoa_r+0x2c2>
 801516a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801516c:	9301      	str	r3, [sp, #4]
 801516e:	9304      	str	r3, [sp, #16]
 8015170:	e7ba      	b.n	80150e8 <_dtoa_r+0x290>
 8015172:	3101      	adds	r1, #1
 8015174:	0052      	lsls	r2, r2, #1
 8015176:	e7ba      	b.n	80150ee <_dtoa_r+0x296>
 8015178:	69e3      	ldr	r3, [r4, #28]
 801517a:	9a00      	ldr	r2, [sp, #0]
 801517c:	601a      	str	r2, [r3, #0]
 801517e:	9b04      	ldr	r3, [sp, #16]
 8015180:	2b0e      	cmp	r3, #14
 8015182:	f200 80a8 	bhi.w	80152d6 <_dtoa_r+0x47e>
 8015186:	2d00      	cmp	r5, #0
 8015188:	f000 80a5 	beq.w	80152d6 <_dtoa_r+0x47e>
 801518c:	f1bb 0f00 	cmp.w	fp, #0
 8015190:	dd38      	ble.n	8015204 <_dtoa_r+0x3ac>
 8015192:	4bc0      	ldr	r3, [pc, #768]	; (8015494 <_dtoa_r+0x63c>)
 8015194:	f00b 020f 	and.w	r2, fp, #15
 8015198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801519c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80151a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80151a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80151a8:	d019      	beq.n	80151de <_dtoa_r+0x386>
 80151aa:	4bbb      	ldr	r3, [pc, #748]	; (8015498 <_dtoa_r+0x640>)
 80151ac:	ec51 0b18 	vmov	r0, r1, d8
 80151b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80151b4:	f7eb fb52 	bl	800085c <__aeabi_ddiv>
 80151b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151bc:	f008 080f 	and.w	r8, r8, #15
 80151c0:	2503      	movs	r5, #3
 80151c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015498 <_dtoa_r+0x640>
 80151c6:	f1b8 0f00 	cmp.w	r8, #0
 80151ca:	d10a      	bne.n	80151e2 <_dtoa_r+0x38a>
 80151cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151d0:	4632      	mov	r2, r6
 80151d2:	463b      	mov	r3, r7
 80151d4:	f7eb fb42 	bl	800085c <__aeabi_ddiv>
 80151d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151dc:	e02b      	b.n	8015236 <_dtoa_r+0x3de>
 80151de:	2502      	movs	r5, #2
 80151e0:	e7ef      	b.n	80151c2 <_dtoa_r+0x36a>
 80151e2:	f018 0f01 	tst.w	r8, #1
 80151e6:	d008      	beq.n	80151fa <_dtoa_r+0x3a2>
 80151e8:	4630      	mov	r0, r6
 80151ea:	4639      	mov	r1, r7
 80151ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80151f0:	f7eb fa0a 	bl	8000608 <__aeabi_dmul>
 80151f4:	3501      	adds	r5, #1
 80151f6:	4606      	mov	r6, r0
 80151f8:	460f      	mov	r7, r1
 80151fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80151fe:	f109 0908 	add.w	r9, r9, #8
 8015202:	e7e0      	b.n	80151c6 <_dtoa_r+0x36e>
 8015204:	f000 809f 	beq.w	8015346 <_dtoa_r+0x4ee>
 8015208:	f1cb 0600 	rsb	r6, fp, #0
 801520c:	4ba1      	ldr	r3, [pc, #644]	; (8015494 <_dtoa_r+0x63c>)
 801520e:	4fa2      	ldr	r7, [pc, #648]	; (8015498 <_dtoa_r+0x640>)
 8015210:	f006 020f 	and.w	r2, r6, #15
 8015214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521c:	ec51 0b18 	vmov	r0, r1, d8
 8015220:	f7eb f9f2 	bl	8000608 <__aeabi_dmul>
 8015224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015228:	1136      	asrs	r6, r6, #4
 801522a:	2300      	movs	r3, #0
 801522c:	2502      	movs	r5, #2
 801522e:	2e00      	cmp	r6, #0
 8015230:	d17e      	bne.n	8015330 <_dtoa_r+0x4d8>
 8015232:	2b00      	cmp	r3, #0
 8015234:	d1d0      	bne.n	80151d8 <_dtoa_r+0x380>
 8015236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015238:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801523c:	2b00      	cmp	r3, #0
 801523e:	f000 8084 	beq.w	801534a <_dtoa_r+0x4f2>
 8015242:	4b96      	ldr	r3, [pc, #600]	; (801549c <_dtoa_r+0x644>)
 8015244:	2200      	movs	r2, #0
 8015246:	4640      	mov	r0, r8
 8015248:	4649      	mov	r1, r9
 801524a:	f7eb fc4f 	bl	8000aec <__aeabi_dcmplt>
 801524e:	2800      	cmp	r0, #0
 8015250:	d07b      	beq.n	801534a <_dtoa_r+0x4f2>
 8015252:	9b04      	ldr	r3, [sp, #16]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d078      	beq.n	801534a <_dtoa_r+0x4f2>
 8015258:	9b01      	ldr	r3, [sp, #4]
 801525a:	2b00      	cmp	r3, #0
 801525c:	dd39      	ble.n	80152d2 <_dtoa_r+0x47a>
 801525e:	4b90      	ldr	r3, [pc, #576]	; (80154a0 <_dtoa_r+0x648>)
 8015260:	2200      	movs	r2, #0
 8015262:	4640      	mov	r0, r8
 8015264:	4649      	mov	r1, r9
 8015266:	f7eb f9cf 	bl	8000608 <__aeabi_dmul>
 801526a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801526e:	9e01      	ldr	r6, [sp, #4]
 8015270:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015274:	3501      	adds	r5, #1
 8015276:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801527a:	4628      	mov	r0, r5
 801527c:	f7eb f95a 	bl	8000534 <__aeabi_i2d>
 8015280:	4642      	mov	r2, r8
 8015282:	464b      	mov	r3, r9
 8015284:	f7eb f9c0 	bl	8000608 <__aeabi_dmul>
 8015288:	4b86      	ldr	r3, [pc, #536]	; (80154a4 <_dtoa_r+0x64c>)
 801528a:	2200      	movs	r2, #0
 801528c:	f7eb f806 	bl	800029c <__adddf3>
 8015290:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015298:	9303      	str	r3, [sp, #12]
 801529a:	2e00      	cmp	r6, #0
 801529c:	d158      	bne.n	8015350 <_dtoa_r+0x4f8>
 801529e:	4b82      	ldr	r3, [pc, #520]	; (80154a8 <_dtoa_r+0x650>)
 80152a0:	2200      	movs	r2, #0
 80152a2:	4640      	mov	r0, r8
 80152a4:	4649      	mov	r1, r9
 80152a6:	f7ea fff7 	bl	8000298 <__aeabi_dsub>
 80152aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152ae:	4680      	mov	r8, r0
 80152b0:	4689      	mov	r9, r1
 80152b2:	f7eb fc39 	bl	8000b28 <__aeabi_dcmpgt>
 80152b6:	2800      	cmp	r0, #0
 80152b8:	f040 8296 	bne.w	80157e8 <_dtoa_r+0x990>
 80152bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80152c0:	4640      	mov	r0, r8
 80152c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152c6:	4649      	mov	r1, r9
 80152c8:	f7eb fc10 	bl	8000aec <__aeabi_dcmplt>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	f040 8289 	bne.w	80157e4 <_dtoa_r+0x98c>
 80152d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80152d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80152d8:	2b00      	cmp	r3, #0
 80152da:	f2c0 814e 	blt.w	801557a <_dtoa_r+0x722>
 80152de:	f1bb 0f0e 	cmp.w	fp, #14
 80152e2:	f300 814a 	bgt.w	801557a <_dtoa_r+0x722>
 80152e6:	4b6b      	ldr	r3, [pc, #428]	; (8015494 <_dtoa_r+0x63c>)
 80152e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80152ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80152f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	f280 80dc 	bge.w	80154b0 <_dtoa_r+0x658>
 80152f8:	9b04      	ldr	r3, [sp, #16]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	f300 80d8 	bgt.w	80154b0 <_dtoa_r+0x658>
 8015300:	f040 826f 	bne.w	80157e2 <_dtoa_r+0x98a>
 8015304:	4b68      	ldr	r3, [pc, #416]	; (80154a8 <_dtoa_r+0x650>)
 8015306:	2200      	movs	r2, #0
 8015308:	4640      	mov	r0, r8
 801530a:	4649      	mov	r1, r9
 801530c:	f7eb f97c 	bl	8000608 <__aeabi_dmul>
 8015310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015314:	f7eb fbfe 	bl	8000b14 <__aeabi_dcmpge>
 8015318:	9e04      	ldr	r6, [sp, #16]
 801531a:	4637      	mov	r7, r6
 801531c:	2800      	cmp	r0, #0
 801531e:	f040 8245 	bne.w	80157ac <_dtoa_r+0x954>
 8015322:	9d00      	ldr	r5, [sp, #0]
 8015324:	2331      	movs	r3, #49	; 0x31
 8015326:	f805 3b01 	strb.w	r3, [r5], #1
 801532a:	f10b 0b01 	add.w	fp, fp, #1
 801532e:	e241      	b.n	80157b4 <_dtoa_r+0x95c>
 8015330:	07f2      	lsls	r2, r6, #31
 8015332:	d505      	bpl.n	8015340 <_dtoa_r+0x4e8>
 8015334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015338:	f7eb f966 	bl	8000608 <__aeabi_dmul>
 801533c:	3501      	adds	r5, #1
 801533e:	2301      	movs	r3, #1
 8015340:	1076      	asrs	r6, r6, #1
 8015342:	3708      	adds	r7, #8
 8015344:	e773      	b.n	801522e <_dtoa_r+0x3d6>
 8015346:	2502      	movs	r5, #2
 8015348:	e775      	b.n	8015236 <_dtoa_r+0x3de>
 801534a:	9e04      	ldr	r6, [sp, #16]
 801534c:	465f      	mov	r7, fp
 801534e:	e792      	b.n	8015276 <_dtoa_r+0x41e>
 8015350:	9900      	ldr	r1, [sp, #0]
 8015352:	4b50      	ldr	r3, [pc, #320]	; (8015494 <_dtoa_r+0x63c>)
 8015354:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015358:	4431      	add	r1, r6
 801535a:	9102      	str	r1, [sp, #8]
 801535c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801535e:	eeb0 9a47 	vmov.f32	s18, s14
 8015362:	eef0 9a67 	vmov.f32	s19, s15
 8015366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801536a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801536e:	2900      	cmp	r1, #0
 8015370:	d044      	beq.n	80153fc <_dtoa_r+0x5a4>
 8015372:	494e      	ldr	r1, [pc, #312]	; (80154ac <_dtoa_r+0x654>)
 8015374:	2000      	movs	r0, #0
 8015376:	f7eb fa71 	bl	800085c <__aeabi_ddiv>
 801537a:	ec53 2b19 	vmov	r2, r3, d9
 801537e:	f7ea ff8b 	bl	8000298 <__aeabi_dsub>
 8015382:	9d00      	ldr	r5, [sp, #0]
 8015384:	ec41 0b19 	vmov	d9, r0, r1
 8015388:	4649      	mov	r1, r9
 801538a:	4640      	mov	r0, r8
 801538c:	f7eb fbec 	bl	8000b68 <__aeabi_d2iz>
 8015390:	4606      	mov	r6, r0
 8015392:	f7eb f8cf 	bl	8000534 <__aeabi_i2d>
 8015396:	4602      	mov	r2, r0
 8015398:	460b      	mov	r3, r1
 801539a:	4640      	mov	r0, r8
 801539c:	4649      	mov	r1, r9
 801539e:	f7ea ff7b 	bl	8000298 <__aeabi_dsub>
 80153a2:	3630      	adds	r6, #48	; 0x30
 80153a4:	f805 6b01 	strb.w	r6, [r5], #1
 80153a8:	ec53 2b19 	vmov	r2, r3, d9
 80153ac:	4680      	mov	r8, r0
 80153ae:	4689      	mov	r9, r1
 80153b0:	f7eb fb9c 	bl	8000aec <__aeabi_dcmplt>
 80153b4:	2800      	cmp	r0, #0
 80153b6:	d164      	bne.n	8015482 <_dtoa_r+0x62a>
 80153b8:	4642      	mov	r2, r8
 80153ba:	464b      	mov	r3, r9
 80153bc:	4937      	ldr	r1, [pc, #220]	; (801549c <_dtoa_r+0x644>)
 80153be:	2000      	movs	r0, #0
 80153c0:	f7ea ff6a 	bl	8000298 <__aeabi_dsub>
 80153c4:	ec53 2b19 	vmov	r2, r3, d9
 80153c8:	f7eb fb90 	bl	8000aec <__aeabi_dcmplt>
 80153cc:	2800      	cmp	r0, #0
 80153ce:	f040 80b6 	bne.w	801553e <_dtoa_r+0x6e6>
 80153d2:	9b02      	ldr	r3, [sp, #8]
 80153d4:	429d      	cmp	r5, r3
 80153d6:	f43f af7c 	beq.w	80152d2 <_dtoa_r+0x47a>
 80153da:	4b31      	ldr	r3, [pc, #196]	; (80154a0 <_dtoa_r+0x648>)
 80153dc:	ec51 0b19 	vmov	r0, r1, d9
 80153e0:	2200      	movs	r2, #0
 80153e2:	f7eb f911 	bl	8000608 <__aeabi_dmul>
 80153e6:	4b2e      	ldr	r3, [pc, #184]	; (80154a0 <_dtoa_r+0x648>)
 80153e8:	ec41 0b19 	vmov	d9, r0, r1
 80153ec:	2200      	movs	r2, #0
 80153ee:	4640      	mov	r0, r8
 80153f0:	4649      	mov	r1, r9
 80153f2:	f7eb f909 	bl	8000608 <__aeabi_dmul>
 80153f6:	4680      	mov	r8, r0
 80153f8:	4689      	mov	r9, r1
 80153fa:	e7c5      	b.n	8015388 <_dtoa_r+0x530>
 80153fc:	ec51 0b17 	vmov	r0, r1, d7
 8015400:	f7eb f902 	bl	8000608 <__aeabi_dmul>
 8015404:	9b02      	ldr	r3, [sp, #8]
 8015406:	9d00      	ldr	r5, [sp, #0]
 8015408:	930f      	str	r3, [sp, #60]	; 0x3c
 801540a:	ec41 0b19 	vmov	d9, r0, r1
 801540e:	4649      	mov	r1, r9
 8015410:	4640      	mov	r0, r8
 8015412:	f7eb fba9 	bl	8000b68 <__aeabi_d2iz>
 8015416:	4606      	mov	r6, r0
 8015418:	f7eb f88c 	bl	8000534 <__aeabi_i2d>
 801541c:	3630      	adds	r6, #48	; 0x30
 801541e:	4602      	mov	r2, r0
 8015420:	460b      	mov	r3, r1
 8015422:	4640      	mov	r0, r8
 8015424:	4649      	mov	r1, r9
 8015426:	f7ea ff37 	bl	8000298 <__aeabi_dsub>
 801542a:	f805 6b01 	strb.w	r6, [r5], #1
 801542e:	9b02      	ldr	r3, [sp, #8]
 8015430:	429d      	cmp	r5, r3
 8015432:	4680      	mov	r8, r0
 8015434:	4689      	mov	r9, r1
 8015436:	f04f 0200 	mov.w	r2, #0
 801543a:	d124      	bne.n	8015486 <_dtoa_r+0x62e>
 801543c:	4b1b      	ldr	r3, [pc, #108]	; (80154ac <_dtoa_r+0x654>)
 801543e:	ec51 0b19 	vmov	r0, r1, d9
 8015442:	f7ea ff2b 	bl	800029c <__adddf3>
 8015446:	4602      	mov	r2, r0
 8015448:	460b      	mov	r3, r1
 801544a:	4640      	mov	r0, r8
 801544c:	4649      	mov	r1, r9
 801544e:	f7eb fb6b 	bl	8000b28 <__aeabi_dcmpgt>
 8015452:	2800      	cmp	r0, #0
 8015454:	d173      	bne.n	801553e <_dtoa_r+0x6e6>
 8015456:	ec53 2b19 	vmov	r2, r3, d9
 801545a:	4914      	ldr	r1, [pc, #80]	; (80154ac <_dtoa_r+0x654>)
 801545c:	2000      	movs	r0, #0
 801545e:	f7ea ff1b 	bl	8000298 <__aeabi_dsub>
 8015462:	4602      	mov	r2, r0
 8015464:	460b      	mov	r3, r1
 8015466:	4640      	mov	r0, r8
 8015468:	4649      	mov	r1, r9
 801546a:	f7eb fb3f 	bl	8000aec <__aeabi_dcmplt>
 801546e:	2800      	cmp	r0, #0
 8015470:	f43f af2f 	beq.w	80152d2 <_dtoa_r+0x47a>
 8015474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015476:	1e6b      	subs	r3, r5, #1
 8015478:	930f      	str	r3, [sp, #60]	; 0x3c
 801547a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801547e:	2b30      	cmp	r3, #48	; 0x30
 8015480:	d0f8      	beq.n	8015474 <_dtoa_r+0x61c>
 8015482:	46bb      	mov	fp, r7
 8015484:	e04a      	b.n	801551c <_dtoa_r+0x6c4>
 8015486:	4b06      	ldr	r3, [pc, #24]	; (80154a0 <_dtoa_r+0x648>)
 8015488:	f7eb f8be 	bl	8000608 <__aeabi_dmul>
 801548c:	4680      	mov	r8, r0
 801548e:	4689      	mov	r9, r1
 8015490:	e7bd      	b.n	801540e <_dtoa_r+0x5b6>
 8015492:	bf00      	nop
 8015494:	080179b8 	.word	0x080179b8
 8015498:	08017990 	.word	0x08017990
 801549c:	3ff00000 	.word	0x3ff00000
 80154a0:	40240000 	.word	0x40240000
 80154a4:	401c0000 	.word	0x401c0000
 80154a8:	40140000 	.word	0x40140000
 80154ac:	3fe00000 	.word	0x3fe00000
 80154b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80154b4:	9d00      	ldr	r5, [sp, #0]
 80154b6:	4642      	mov	r2, r8
 80154b8:	464b      	mov	r3, r9
 80154ba:	4630      	mov	r0, r6
 80154bc:	4639      	mov	r1, r7
 80154be:	f7eb f9cd 	bl	800085c <__aeabi_ddiv>
 80154c2:	f7eb fb51 	bl	8000b68 <__aeabi_d2iz>
 80154c6:	9001      	str	r0, [sp, #4]
 80154c8:	f7eb f834 	bl	8000534 <__aeabi_i2d>
 80154cc:	4642      	mov	r2, r8
 80154ce:	464b      	mov	r3, r9
 80154d0:	f7eb f89a 	bl	8000608 <__aeabi_dmul>
 80154d4:	4602      	mov	r2, r0
 80154d6:	460b      	mov	r3, r1
 80154d8:	4630      	mov	r0, r6
 80154da:	4639      	mov	r1, r7
 80154dc:	f7ea fedc 	bl	8000298 <__aeabi_dsub>
 80154e0:	9e01      	ldr	r6, [sp, #4]
 80154e2:	9f04      	ldr	r7, [sp, #16]
 80154e4:	3630      	adds	r6, #48	; 0x30
 80154e6:	f805 6b01 	strb.w	r6, [r5], #1
 80154ea:	9e00      	ldr	r6, [sp, #0]
 80154ec:	1bae      	subs	r6, r5, r6
 80154ee:	42b7      	cmp	r7, r6
 80154f0:	4602      	mov	r2, r0
 80154f2:	460b      	mov	r3, r1
 80154f4:	d134      	bne.n	8015560 <_dtoa_r+0x708>
 80154f6:	f7ea fed1 	bl	800029c <__adddf3>
 80154fa:	4642      	mov	r2, r8
 80154fc:	464b      	mov	r3, r9
 80154fe:	4606      	mov	r6, r0
 8015500:	460f      	mov	r7, r1
 8015502:	f7eb fb11 	bl	8000b28 <__aeabi_dcmpgt>
 8015506:	b9c8      	cbnz	r0, 801553c <_dtoa_r+0x6e4>
 8015508:	4642      	mov	r2, r8
 801550a:	464b      	mov	r3, r9
 801550c:	4630      	mov	r0, r6
 801550e:	4639      	mov	r1, r7
 8015510:	f7eb fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 8015514:	b110      	cbz	r0, 801551c <_dtoa_r+0x6c4>
 8015516:	9b01      	ldr	r3, [sp, #4]
 8015518:	07db      	lsls	r3, r3, #31
 801551a:	d40f      	bmi.n	801553c <_dtoa_r+0x6e4>
 801551c:	4651      	mov	r1, sl
 801551e:	4620      	mov	r0, r4
 8015520:	f000 fbcc 	bl	8015cbc <_Bfree>
 8015524:	2300      	movs	r3, #0
 8015526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015528:	702b      	strb	r3, [r5, #0]
 801552a:	f10b 0301 	add.w	r3, fp, #1
 801552e:	6013      	str	r3, [r2, #0]
 8015530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015532:	2b00      	cmp	r3, #0
 8015534:	f43f ace2 	beq.w	8014efc <_dtoa_r+0xa4>
 8015538:	601d      	str	r5, [r3, #0]
 801553a:	e4df      	b.n	8014efc <_dtoa_r+0xa4>
 801553c:	465f      	mov	r7, fp
 801553e:	462b      	mov	r3, r5
 8015540:	461d      	mov	r5, r3
 8015542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015546:	2a39      	cmp	r2, #57	; 0x39
 8015548:	d106      	bne.n	8015558 <_dtoa_r+0x700>
 801554a:	9a00      	ldr	r2, [sp, #0]
 801554c:	429a      	cmp	r2, r3
 801554e:	d1f7      	bne.n	8015540 <_dtoa_r+0x6e8>
 8015550:	9900      	ldr	r1, [sp, #0]
 8015552:	2230      	movs	r2, #48	; 0x30
 8015554:	3701      	adds	r7, #1
 8015556:	700a      	strb	r2, [r1, #0]
 8015558:	781a      	ldrb	r2, [r3, #0]
 801555a:	3201      	adds	r2, #1
 801555c:	701a      	strb	r2, [r3, #0]
 801555e:	e790      	b.n	8015482 <_dtoa_r+0x62a>
 8015560:	4ba3      	ldr	r3, [pc, #652]	; (80157f0 <_dtoa_r+0x998>)
 8015562:	2200      	movs	r2, #0
 8015564:	f7eb f850 	bl	8000608 <__aeabi_dmul>
 8015568:	2200      	movs	r2, #0
 801556a:	2300      	movs	r3, #0
 801556c:	4606      	mov	r6, r0
 801556e:	460f      	mov	r7, r1
 8015570:	f7eb fab2 	bl	8000ad8 <__aeabi_dcmpeq>
 8015574:	2800      	cmp	r0, #0
 8015576:	d09e      	beq.n	80154b6 <_dtoa_r+0x65e>
 8015578:	e7d0      	b.n	801551c <_dtoa_r+0x6c4>
 801557a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801557c:	2a00      	cmp	r2, #0
 801557e:	f000 80ca 	beq.w	8015716 <_dtoa_r+0x8be>
 8015582:	9a07      	ldr	r2, [sp, #28]
 8015584:	2a01      	cmp	r2, #1
 8015586:	f300 80ad 	bgt.w	80156e4 <_dtoa_r+0x88c>
 801558a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801558c:	2a00      	cmp	r2, #0
 801558e:	f000 80a5 	beq.w	80156dc <_dtoa_r+0x884>
 8015592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015596:	9e08      	ldr	r6, [sp, #32]
 8015598:	9d05      	ldr	r5, [sp, #20]
 801559a:	9a05      	ldr	r2, [sp, #20]
 801559c:	441a      	add	r2, r3
 801559e:	9205      	str	r2, [sp, #20]
 80155a0:	9a06      	ldr	r2, [sp, #24]
 80155a2:	2101      	movs	r1, #1
 80155a4:	441a      	add	r2, r3
 80155a6:	4620      	mov	r0, r4
 80155a8:	9206      	str	r2, [sp, #24]
 80155aa:	f000 fc3d 	bl	8015e28 <__i2b>
 80155ae:	4607      	mov	r7, r0
 80155b0:	b165      	cbz	r5, 80155cc <_dtoa_r+0x774>
 80155b2:	9b06      	ldr	r3, [sp, #24]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	dd09      	ble.n	80155cc <_dtoa_r+0x774>
 80155b8:	42ab      	cmp	r3, r5
 80155ba:	9a05      	ldr	r2, [sp, #20]
 80155bc:	bfa8      	it	ge
 80155be:	462b      	movge	r3, r5
 80155c0:	1ad2      	subs	r2, r2, r3
 80155c2:	9205      	str	r2, [sp, #20]
 80155c4:	9a06      	ldr	r2, [sp, #24]
 80155c6:	1aed      	subs	r5, r5, r3
 80155c8:	1ad3      	subs	r3, r2, r3
 80155ca:	9306      	str	r3, [sp, #24]
 80155cc:	9b08      	ldr	r3, [sp, #32]
 80155ce:	b1f3      	cbz	r3, 801560e <_dtoa_r+0x7b6>
 80155d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	f000 80a3 	beq.w	801571e <_dtoa_r+0x8c6>
 80155d8:	2e00      	cmp	r6, #0
 80155da:	dd10      	ble.n	80155fe <_dtoa_r+0x7a6>
 80155dc:	4639      	mov	r1, r7
 80155de:	4632      	mov	r2, r6
 80155e0:	4620      	mov	r0, r4
 80155e2:	f000 fce1 	bl	8015fa8 <__pow5mult>
 80155e6:	4652      	mov	r2, sl
 80155e8:	4601      	mov	r1, r0
 80155ea:	4607      	mov	r7, r0
 80155ec:	4620      	mov	r0, r4
 80155ee:	f000 fc31 	bl	8015e54 <__multiply>
 80155f2:	4651      	mov	r1, sl
 80155f4:	4680      	mov	r8, r0
 80155f6:	4620      	mov	r0, r4
 80155f8:	f000 fb60 	bl	8015cbc <_Bfree>
 80155fc:	46c2      	mov	sl, r8
 80155fe:	9b08      	ldr	r3, [sp, #32]
 8015600:	1b9a      	subs	r2, r3, r6
 8015602:	d004      	beq.n	801560e <_dtoa_r+0x7b6>
 8015604:	4651      	mov	r1, sl
 8015606:	4620      	mov	r0, r4
 8015608:	f000 fcce 	bl	8015fa8 <__pow5mult>
 801560c:	4682      	mov	sl, r0
 801560e:	2101      	movs	r1, #1
 8015610:	4620      	mov	r0, r4
 8015612:	f000 fc09 	bl	8015e28 <__i2b>
 8015616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015618:	2b00      	cmp	r3, #0
 801561a:	4606      	mov	r6, r0
 801561c:	f340 8081 	ble.w	8015722 <_dtoa_r+0x8ca>
 8015620:	461a      	mov	r2, r3
 8015622:	4601      	mov	r1, r0
 8015624:	4620      	mov	r0, r4
 8015626:	f000 fcbf 	bl	8015fa8 <__pow5mult>
 801562a:	9b07      	ldr	r3, [sp, #28]
 801562c:	2b01      	cmp	r3, #1
 801562e:	4606      	mov	r6, r0
 8015630:	dd7a      	ble.n	8015728 <_dtoa_r+0x8d0>
 8015632:	f04f 0800 	mov.w	r8, #0
 8015636:	6933      	ldr	r3, [r6, #16]
 8015638:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801563c:	6918      	ldr	r0, [r3, #16]
 801563e:	f000 fba5 	bl	8015d8c <__hi0bits>
 8015642:	f1c0 0020 	rsb	r0, r0, #32
 8015646:	9b06      	ldr	r3, [sp, #24]
 8015648:	4418      	add	r0, r3
 801564a:	f010 001f 	ands.w	r0, r0, #31
 801564e:	f000 8094 	beq.w	801577a <_dtoa_r+0x922>
 8015652:	f1c0 0320 	rsb	r3, r0, #32
 8015656:	2b04      	cmp	r3, #4
 8015658:	f340 8085 	ble.w	8015766 <_dtoa_r+0x90e>
 801565c:	9b05      	ldr	r3, [sp, #20]
 801565e:	f1c0 001c 	rsb	r0, r0, #28
 8015662:	4403      	add	r3, r0
 8015664:	9305      	str	r3, [sp, #20]
 8015666:	9b06      	ldr	r3, [sp, #24]
 8015668:	4403      	add	r3, r0
 801566a:	4405      	add	r5, r0
 801566c:	9306      	str	r3, [sp, #24]
 801566e:	9b05      	ldr	r3, [sp, #20]
 8015670:	2b00      	cmp	r3, #0
 8015672:	dd05      	ble.n	8015680 <_dtoa_r+0x828>
 8015674:	4651      	mov	r1, sl
 8015676:	461a      	mov	r2, r3
 8015678:	4620      	mov	r0, r4
 801567a:	f000 fcef 	bl	801605c <__lshift>
 801567e:	4682      	mov	sl, r0
 8015680:	9b06      	ldr	r3, [sp, #24]
 8015682:	2b00      	cmp	r3, #0
 8015684:	dd05      	ble.n	8015692 <_dtoa_r+0x83a>
 8015686:	4631      	mov	r1, r6
 8015688:	461a      	mov	r2, r3
 801568a:	4620      	mov	r0, r4
 801568c:	f000 fce6 	bl	801605c <__lshift>
 8015690:	4606      	mov	r6, r0
 8015692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015694:	2b00      	cmp	r3, #0
 8015696:	d072      	beq.n	801577e <_dtoa_r+0x926>
 8015698:	4631      	mov	r1, r6
 801569a:	4650      	mov	r0, sl
 801569c:	f000 fd4a 	bl	8016134 <__mcmp>
 80156a0:	2800      	cmp	r0, #0
 80156a2:	da6c      	bge.n	801577e <_dtoa_r+0x926>
 80156a4:	2300      	movs	r3, #0
 80156a6:	4651      	mov	r1, sl
 80156a8:	220a      	movs	r2, #10
 80156aa:	4620      	mov	r0, r4
 80156ac:	f000 fb28 	bl	8015d00 <__multadd>
 80156b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80156b6:	4682      	mov	sl, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	f000 81b0 	beq.w	8015a1e <_dtoa_r+0xbc6>
 80156be:	2300      	movs	r3, #0
 80156c0:	4639      	mov	r1, r7
 80156c2:	220a      	movs	r2, #10
 80156c4:	4620      	mov	r0, r4
 80156c6:	f000 fb1b 	bl	8015d00 <__multadd>
 80156ca:	9b01      	ldr	r3, [sp, #4]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	4607      	mov	r7, r0
 80156d0:	f300 8096 	bgt.w	8015800 <_dtoa_r+0x9a8>
 80156d4:	9b07      	ldr	r3, [sp, #28]
 80156d6:	2b02      	cmp	r3, #2
 80156d8:	dc59      	bgt.n	801578e <_dtoa_r+0x936>
 80156da:	e091      	b.n	8015800 <_dtoa_r+0x9a8>
 80156dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80156de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80156e2:	e758      	b.n	8015596 <_dtoa_r+0x73e>
 80156e4:	9b04      	ldr	r3, [sp, #16]
 80156e6:	1e5e      	subs	r6, r3, #1
 80156e8:	9b08      	ldr	r3, [sp, #32]
 80156ea:	42b3      	cmp	r3, r6
 80156ec:	bfbf      	itttt	lt
 80156ee:	9b08      	ldrlt	r3, [sp, #32]
 80156f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80156f2:	9608      	strlt	r6, [sp, #32]
 80156f4:	1af3      	sublt	r3, r6, r3
 80156f6:	bfb4      	ite	lt
 80156f8:	18d2      	addlt	r2, r2, r3
 80156fa:	1b9e      	subge	r6, r3, r6
 80156fc:	9b04      	ldr	r3, [sp, #16]
 80156fe:	bfbc      	itt	lt
 8015700:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015702:	2600      	movlt	r6, #0
 8015704:	2b00      	cmp	r3, #0
 8015706:	bfb7      	itett	lt
 8015708:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801570c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015710:	1a9d      	sublt	r5, r3, r2
 8015712:	2300      	movlt	r3, #0
 8015714:	e741      	b.n	801559a <_dtoa_r+0x742>
 8015716:	9e08      	ldr	r6, [sp, #32]
 8015718:	9d05      	ldr	r5, [sp, #20]
 801571a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801571c:	e748      	b.n	80155b0 <_dtoa_r+0x758>
 801571e:	9a08      	ldr	r2, [sp, #32]
 8015720:	e770      	b.n	8015604 <_dtoa_r+0x7ac>
 8015722:	9b07      	ldr	r3, [sp, #28]
 8015724:	2b01      	cmp	r3, #1
 8015726:	dc19      	bgt.n	801575c <_dtoa_r+0x904>
 8015728:	9b02      	ldr	r3, [sp, #8]
 801572a:	b9bb      	cbnz	r3, 801575c <_dtoa_r+0x904>
 801572c:	9b03      	ldr	r3, [sp, #12]
 801572e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015732:	b99b      	cbnz	r3, 801575c <_dtoa_r+0x904>
 8015734:	9b03      	ldr	r3, [sp, #12]
 8015736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801573a:	0d1b      	lsrs	r3, r3, #20
 801573c:	051b      	lsls	r3, r3, #20
 801573e:	b183      	cbz	r3, 8015762 <_dtoa_r+0x90a>
 8015740:	9b05      	ldr	r3, [sp, #20]
 8015742:	3301      	adds	r3, #1
 8015744:	9305      	str	r3, [sp, #20]
 8015746:	9b06      	ldr	r3, [sp, #24]
 8015748:	3301      	adds	r3, #1
 801574a:	9306      	str	r3, [sp, #24]
 801574c:	f04f 0801 	mov.w	r8, #1
 8015750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015752:	2b00      	cmp	r3, #0
 8015754:	f47f af6f 	bne.w	8015636 <_dtoa_r+0x7de>
 8015758:	2001      	movs	r0, #1
 801575a:	e774      	b.n	8015646 <_dtoa_r+0x7ee>
 801575c:	f04f 0800 	mov.w	r8, #0
 8015760:	e7f6      	b.n	8015750 <_dtoa_r+0x8f8>
 8015762:	4698      	mov	r8, r3
 8015764:	e7f4      	b.n	8015750 <_dtoa_r+0x8f8>
 8015766:	d082      	beq.n	801566e <_dtoa_r+0x816>
 8015768:	9a05      	ldr	r2, [sp, #20]
 801576a:	331c      	adds	r3, #28
 801576c:	441a      	add	r2, r3
 801576e:	9205      	str	r2, [sp, #20]
 8015770:	9a06      	ldr	r2, [sp, #24]
 8015772:	441a      	add	r2, r3
 8015774:	441d      	add	r5, r3
 8015776:	9206      	str	r2, [sp, #24]
 8015778:	e779      	b.n	801566e <_dtoa_r+0x816>
 801577a:	4603      	mov	r3, r0
 801577c:	e7f4      	b.n	8015768 <_dtoa_r+0x910>
 801577e:	9b04      	ldr	r3, [sp, #16]
 8015780:	2b00      	cmp	r3, #0
 8015782:	dc37      	bgt.n	80157f4 <_dtoa_r+0x99c>
 8015784:	9b07      	ldr	r3, [sp, #28]
 8015786:	2b02      	cmp	r3, #2
 8015788:	dd34      	ble.n	80157f4 <_dtoa_r+0x99c>
 801578a:	9b04      	ldr	r3, [sp, #16]
 801578c:	9301      	str	r3, [sp, #4]
 801578e:	9b01      	ldr	r3, [sp, #4]
 8015790:	b963      	cbnz	r3, 80157ac <_dtoa_r+0x954>
 8015792:	4631      	mov	r1, r6
 8015794:	2205      	movs	r2, #5
 8015796:	4620      	mov	r0, r4
 8015798:	f000 fab2 	bl	8015d00 <__multadd>
 801579c:	4601      	mov	r1, r0
 801579e:	4606      	mov	r6, r0
 80157a0:	4650      	mov	r0, sl
 80157a2:	f000 fcc7 	bl	8016134 <__mcmp>
 80157a6:	2800      	cmp	r0, #0
 80157a8:	f73f adbb 	bgt.w	8015322 <_dtoa_r+0x4ca>
 80157ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157ae:	9d00      	ldr	r5, [sp, #0]
 80157b0:	ea6f 0b03 	mvn.w	fp, r3
 80157b4:	f04f 0800 	mov.w	r8, #0
 80157b8:	4631      	mov	r1, r6
 80157ba:	4620      	mov	r0, r4
 80157bc:	f000 fa7e 	bl	8015cbc <_Bfree>
 80157c0:	2f00      	cmp	r7, #0
 80157c2:	f43f aeab 	beq.w	801551c <_dtoa_r+0x6c4>
 80157c6:	f1b8 0f00 	cmp.w	r8, #0
 80157ca:	d005      	beq.n	80157d8 <_dtoa_r+0x980>
 80157cc:	45b8      	cmp	r8, r7
 80157ce:	d003      	beq.n	80157d8 <_dtoa_r+0x980>
 80157d0:	4641      	mov	r1, r8
 80157d2:	4620      	mov	r0, r4
 80157d4:	f000 fa72 	bl	8015cbc <_Bfree>
 80157d8:	4639      	mov	r1, r7
 80157da:	4620      	mov	r0, r4
 80157dc:	f000 fa6e 	bl	8015cbc <_Bfree>
 80157e0:	e69c      	b.n	801551c <_dtoa_r+0x6c4>
 80157e2:	2600      	movs	r6, #0
 80157e4:	4637      	mov	r7, r6
 80157e6:	e7e1      	b.n	80157ac <_dtoa_r+0x954>
 80157e8:	46bb      	mov	fp, r7
 80157ea:	4637      	mov	r7, r6
 80157ec:	e599      	b.n	8015322 <_dtoa_r+0x4ca>
 80157ee:	bf00      	nop
 80157f0:	40240000 	.word	0x40240000
 80157f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	f000 80c8 	beq.w	801598c <_dtoa_r+0xb34>
 80157fc:	9b04      	ldr	r3, [sp, #16]
 80157fe:	9301      	str	r3, [sp, #4]
 8015800:	2d00      	cmp	r5, #0
 8015802:	dd05      	ble.n	8015810 <_dtoa_r+0x9b8>
 8015804:	4639      	mov	r1, r7
 8015806:	462a      	mov	r2, r5
 8015808:	4620      	mov	r0, r4
 801580a:	f000 fc27 	bl	801605c <__lshift>
 801580e:	4607      	mov	r7, r0
 8015810:	f1b8 0f00 	cmp.w	r8, #0
 8015814:	d05b      	beq.n	80158ce <_dtoa_r+0xa76>
 8015816:	6879      	ldr	r1, [r7, #4]
 8015818:	4620      	mov	r0, r4
 801581a:	f000 fa0f 	bl	8015c3c <_Balloc>
 801581e:	4605      	mov	r5, r0
 8015820:	b928      	cbnz	r0, 801582e <_dtoa_r+0x9d6>
 8015822:	4b83      	ldr	r3, [pc, #524]	; (8015a30 <_dtoa_r+0xbd8>)
 8015824:	4602      	mov	r2, r0
 8015826:	f240 21ef 	movw	r1, #751	; 0x2ef
 801582a:	f7ff bb2e 	b.w	8014e8a <_dtoa_r+0x32>
 801582e:	693a      	ldr	r2, [r7, #16]
 8015830:	3202      	adds	r2, #2
 8015832:	0092      	lsls	r2, r2, #2
 8015834:	f107 010c 	add.w	r1, r7, #12
 8015838:	300c      	adds	r0, #12
 801583a:	f7ff fa76 	bl	8014d2a <memcpy>
 801583e:	2201      	movs	r2, #1
 8015840:	4629      	mov	r1, r5
 8015842:	4620      	mov	r0, r4
 8015844:	f000 fc0a 	bl	801605c <__lshift>
 8015848:	9b00      	ldr	r3, [sp, #0]
 801584a:	3301      	adds	r3, #1
 801584c:	9304      	str	r3, [sp, #16]
 801584e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015852:	4413      	add	r3, r2
 8015854:	9308      	str	r3, [sp, #32]
 8015856:	9b02      	ldr	r3, [sp, #8]
 8015858:	f003 0301 	and.w	r3, r3, #1
 801585c:	46b8      	mov	r8, r7
 801585e:	9306      	str	r3, [sp, #24]
 8015860:	4607      	mov	r7, r0
 8015862:	9b04      	ldr	r3, [sp, #16]
 8015864:	4631      	mov	r1, r6
 8015866:	3b01      	subs	r3, #1
 8015868:	4650      	mov	r0, sl
 801586a:	9301      	str	r3, [sp, #4]
 801586c:	f7ff fa6b 	bl	8014d46 <quorem>
 8015870:	4641      	mov	r1, r8
 8015872:	9002      	str	r0, [sp, #8]
 8015874:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015878:	4650      	mov	r0, sl
 801587a:	f000 fc5b 	bl	8016134 <__mcmp>
 801587e:	463a      	mov	r2, r7
 8015880:	9005      	str	r0, [sp, #20]
 8015882:	4631      	mov	r1, r6
 8015884:	4620      	mov	r0, r4
 8015886:	f000 fc71 	bl	801616c <__mdiff>
 801588a:	68c2      	ldr	r2, [r0, #12]
 801588c:	4605      	mov	r5, r0
 801588e:	bb02      	cbnz	r2, 80158d2 <_dtoa_r+0xa7a>
 8015890:	4601      	mov	r1, r0
 8015892:	4650      	mov	r0, sl
 8015894:	f000 fc4e 	bl	8016134 <__mcmp>
 8015898:	4602      	mov	r2, r0
 801589a:	4629      	mov	r1, r5
 801589c:	4620      	mov	r0, r4
 801589e:	9209      	str	r2, [sp, #36]	; 0x24
 80158a0:	f000 fa0c 	bl	8015cbc <_Bfree>
 80158a4:	9b07      	ldr	r3, [sp, #28]
 80158a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158a8:	9d04      	ldr	r5, [sp, #16]
 80158aa:	ea43 0102 	orr.w	r1, r3, r2
 80158ae:	9b06      	ldr	r3, [sp, #24]
 80158b0:	4319      	orrs	r1, r3
 80158b2:	d110      	bne.n	80158d6 <_dtoa_r+0xa7e>
 80158b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80158b8:	d029      	beq.n	801590e <_dtoa_r+0xab6>
 80158ba:	9b05      	ldr	r3, [sp, #20]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	dd02      	ble.n	80158c6 <_dtoa_r+0xa6e>
 80158c0:	9b02      	ldr	r3, [sp, #8]
 80158c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80158c6:	9b01      	ldr	r3, [sp, #4]
 80158c8:	f883 9000 	strb.w	r9, [r3]
 80158cc:	e774      	b.n	80157b8 <_dtoa_r+0x960>
 80158ce:	4638      	mov	r0, r7
 80158d0:	e7ba      	b.n	8015848 <_dtoa_r+0x9f0>
 80158d2:	2201      	movs	r2, #1
 80158d4:	e7e1      	b.n	801589a <_dtoa_r+0xa42>
 80158d6:	9b05      	ldr	r3, [sp, #20]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	db04      	blt.n	80158e6 <_dtoa_r+0xa8e>
 80158dc:	9907      	ldr	r1, [sp, #28]
 80158de:	430b      	orrs	r3, r1
 80158e0:	9906      	ldr	r1, [sp, #24]
 80158e2:	430b      	orrs	r3, r1
 80158e4:	d120      	bne.n	8015928 <_dtoa_r+0xad0>
 80158e6:	2a00      	cmp	r2, #0
 80158e8:	dded      	ble.n	80158c6 <_dtoa_r+0xa6e>
 80158ea:	4651      	mov	r1, sl
 80158ec:	2201      	movs	r2, #1
 80158ee:	4620      	mov	r0, r4
 80158f0:	f000 fbb4 	bl	801605c <__lshift>
 80158f4:	4631      	mov	r1, r6
 80158f6:	4682      	mov	sl, r0
 80158f8:	f000 fc1c 	bl	8016134 <__mcmp>
 80158fc:	2800      	cmp	r0, #0
 80158fe:	dc03      	bgt.n	8015908 <_dtoa_r+0xab0>
 8015900:	d1e1      	bne.n	80158c6 <_dtoa_r+0xa6e>
 8015902:	f019 0f01 	tst.w	r9, #1
 8015906:	d0de      	beq.n	80158c6 <_dtoa_r+0xa6e>
 8015908:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801590c:	d1d8      	bne.n	80158c0 <_dtoa_r+0xa68>
 801590e:	9a01      	ldr	r2, [sp, #4]
 8015910:	2339      	movs	r3, #57	; 0x39
 8015912:	7013      	strb	r3, [r2, #0]
 8015914:	462b      	mov	r3, r5
 8015916:	461d      	mov	r5, r3
 8015918:	3b01      	subs	r3, #1
 801591a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801591e:	2a39      	cmp	r2, #57	; 0x39
 8015920:	d06c      	beq.n	80159fc <_dtoa_r+0xba4>
 8015922:	3201      	adds	r2, #1
 8015924:	701a      	strb	r2, [r3, #0]
 8015926:	e747      	b.n	80157b8 <_dtoa_r+0x960>
 8015928:	2a00      	cmp	r2, #0
 801592a:	dd07      	ble.n	801593c <_dtoa_r+0xae4>
 801592c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015930:	d0ed      	beq.n	801590e <_dtoa_r+0xab6>
 8015932:	9a01      	ldr	r2, [sp, #4]
 8015934:	f109 0301 	add.w	r3, r9, #1
 8015938:	7013      	strb	r3, [r2, #0]
 801593a:	e73d      	b.n	80157b8 <_dtoa_r+0x960>
 801593c:	9b04      	ldr	r3, [sp, #16]
 801593e:	9a08      	ldr	r2, [sp, #32]
 8015940:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015944:	4293      	cmp	r3, r2
 8015946:	d043      	beq.n	80159d0 <_dtoa_r+0xb78>
 8015948:	4651      	mov	r1, sl
 801594a:	2300      	movs	r3, #0
 801594c:	220a      	movs	r2, #10
 801594e:	4620      	mov	r0, r4
 8015950:	f000 f9d6 	bl	8015d00 <__multadd>
 8015954:	45b8      	cmp	r8, r7
 8015956:	4682      	mov	sl, r0
 8015958:	f04f 0300 	mov.w	r3, #0
 801595c:	f04f 020a 	mov.w	r2, #10
 8015960:	4641      	mov	r1, r8
 8015962:	4620      	mov	r0, r4
 8015964:	d107      	bne.n	8015976 <_dtoa_r+0xb1e>
 8015966:	f000 f9cb 	bl	8015d00 <__multadd>
 801596a:	4680      	mov	r8, r0
 801596c:	4607      	mov	r7, r0
 801596e:	9b04      	ldr	r3, [sp, #16]
 8015970:	3301      	adds	r3, #1
 8015972:	9304      	str	r3, [sp, #16]
 8015974:	e775      	b.n	8015862 <_dtoa_r+0xa0a>
 8015976:	f000 f9c3 	bl	8015d00 <__multadd>
 801597a:	4639      	mov	r1, r7
 801597c:	4680      	mov	r8, r0
 801597e:	2300      	movs	r3, #0
 8015980:	220a      	movs	r2, #10
 8015982:	4620      	mov	r0, r4
 8015984:	f000 f9bc 	bl	8015d00 <__multadd>
 8015988:	4607      	mov	r7, r0
 801598a:	e7f0      	b.n	801596e <_dtoa_r+0xb16>
 801598c:	9b04      	ldr	r3, [sp, #16]
 801598e:	9301      	str	r3, [sp, #4]
 8015990:	9d00      	ldr	r5, [sp, #0]
 8015992:	4631      	mov	r1, r6
 8015994:	4650      	mov	r0, sl
 8015996:	f7ff f9d6 	bl	8014d46 <quorem>
 801599a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801599e:	9b00      	ldr	r3, [sp, #0]
 80159a0:	f805 9b01 	strb.w	r9, [r5], #1
 80159a4:	1aea      	subs	r2, r5, r3
 80159a6:	9b01      	ldr	r3, [sp, #4]
 80159a8:	4293      	cmp	r3, r2
 80159aa:	dd07      	ble.n	80159bc <_dtoa_r+0xb64>
 80159ac:	4651      	mov	r1, sl
 80159ae:	2300      	movs	r3, #0
 80159b0:	220a      	movs	r2, #10
 80159b2:	4620      	mov	r0, r4
 80159b4:	f000 f9a4 	bl	8015d00 <__multadd>
 80159b8:	4682      	mov	sl, r0
 80159ba:	e7ea      	b.n	8015992 <_dtoa_r+0xb3a>
 80159bc:	9b01      	ldr	r3, [sp, #4]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	bfc8      	it	gt
 80159c2:	461d      	movgt	r5, r3
 80159c4:	9b00      	ldr	r3, [sp, #0]
 80159c6:	bfd8      	it	le
 80159c8:	2501      	movle	r5, #1
 80159ca:	441d      	add	r5, r3
 80159cc:	f04f 0800 	mov.w	r8, #0
 80159d0:	4651      	mov	r1, sl
 80159d2:	2201      	movs	r2, #1
 80159d4:	4620      	mov	r0, r4
 80159d6:	f000 fb41 	bl	801605c <__lshift>
 80159da:	4631      	mov	r1, r6
 80159dc:	4682      	mov	sl, r0
 80159de:	f000 fba9 	bl	8016134 <__mcmp>
 80159e2:	2800      	cmp	r0, #0
 80159e4:	dc96      	bgt.n	8015914 <_dtoa_r+0xabc>
 80159e6:	d102      	bne.n	80159ee <_dtoa_r+0xb96>
 80159e8:	f019 0f01 	tst.w	r9, #1
 80159ec:	d192      	bne.n	8015914 <_dtoa_r+0xabc>
 80159ee:	462b      	mov	r3, r5
 80159f0:	461d      	mov	r5, r3
 80159f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80159f6:	2a30      	cmp	r2, #48	; 0x30
 80159f8:	d0fa      	beq.n	80159f0 <_dtoa_r+0xb98>
 80159fa:	e6dd      	b.n	80157b8 <_dtoa_r+0x960>
 80159fc:	9a00      	ldr	r2, [sp, #0]
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d189      	bne.n	8015916 <_dtoa_r+0xabe>
 8015a02:	f10b 0b01 	add.w	fp, fp, #1
 8015a06:	2331      	movs	r3, #49	; 0x31
 8015a08:	e796      	b.n	8015938 <_dtoa_r+0xae0>
 8015a0a:	4b0a      	ldr	r3, [pc, #40]	; (8015a34 <_dtoa_r+0xbdc>)
 8015a0c:	f7ff ba99 	b.w	8014f42 <_dtoa_r+0xea>
 8015a10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	f47f aa6d 	bne.w	8014ef2 <_dtoa_r+0x9a>
 8015a18:	4b07      	ldr	r3, [pc, #28]	; (8015a38 <_dtoa_r+0xbe0>)
 8015a1a:	f7ff ba92 	b.w	8014f42 <_dtoa_r+0xea>
 8015a1e:	9b01      	ldr	r3, [sp, #4]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	dcb5      	bgt.n	8015990 <_dtoa_r+0xb38>
 8015a24:	9b07      	ldr	r3, [sp, #28]
 8015a26:	2b02      	cmp	r3, #2
 8015a28:	f73f aeb1 	bgt.w	801578e <_dtoa_r+0x936>
 8015a2c:	e7b0      	b.n	8015990 <_dtoa_r+0xb38>
 8015a2e:	bf00      	nop
 8015a30:	08017920 	.word	0x08017920
 8015a34:	08017880 	.word	0x08017880
 8015a38:	080178a4 	.word	0x080178a4

08015a3c <_free_r>:
 8015a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a3e:	2900      	cmp	r1, #0
 8015a40:	d044      	beq.n	8015acc <_free_r+0x90>
 8015a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a46:	9001      	str	r0, [sp, #4]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8015a4e:	bfb8      	it	lt
 8015a50:	18e4      	addlt	r4, r4, r3
 8015a52:	f000 f8e7 	bl	8015c24 <__malloc_lock>
 8015a56:	4a1e      	ldr	r2, [pc, #120]	; (8015ad0 <_free_r+0x94>)
 8015a58:	9801      	ldr	r0, [sp, #4]
 8015a5a:	6813      	ldr	r3, [r2, #0]
 8015a5c:	b933      	cbnz	r3, 8015a6c <_free_r+0x30>
 8015a5e:	6063      	str	r3, [r4, #4]
 8015a60:	6014      	str	r4, [r2, #0]
 8015a62:	b003      	add	sp, #12
 8015a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a68:	f000 b8e2 	b.w	8015c30 <__malloc_unlock>
 8015a6c:	42a3      	cmp	r3, r4
 8015a6e:	d908      	bls.n	8015a82 <_free_r+0x46>
 8015a70:	6825      	ldr	r5, [r4, #0]
 8015a72:	1961      	adds	r1, r4, r5
 8015a74:	428b      	cmp	r3, r1
 8015a76:	bf01      	itttt	eq
 8015a78:	6819      	ldreq	r1, [r3, #0]
 8015a7a:	685b      	ldreq	r3, [r3, #4]
 8015a7c:	1949      	addeq	r1, r1, r5
 8015a7e:	6021      	streq	r1, [r4, #0]
 8015a80:	e7ed      	b.n	8015a5e <_free_r+0x22>
 8015a82:	461a      	mov	r2, r3
 8015a84:	685b      	ldr	r3, [r3, #4]
 8015a86:	b10b      	cbz	r3, 8015a8c <_free_r+0x50>
 8015a88:	42a3      	cmp	r3, r4
 8015a8a:	d9fa      	bls.n	8015a82 <_free_r+0x46>
 8015a8c:	6811      	ldr	r1, [r2, #0]
 8015a8e:	1855      	adds	r5, r2, r1
 8015a90:	42a5      	cmp	r5, r4
 8015a92:	d10b      	bne.n	8015aac <_free_r+0x70>
 8015a94:	6824      	ldr	r4, [r4, #0]
 8015a96:	4421      	add	r1, r4
 8015a98:	1854      	adds	r4, r2, r1
 8015a9a:	42a3      	cmp	r3, r4
 8015a9c:	6011      	str	r1, [r2, #0]
 8015a9e:	d1e0      	bne.n	8015a62 <_free_r+0x26>
 8015aa0:	681c      	ldr	r4, [r3, #0]
 8015aa2:	685b      	ldr	r3, [r3, #4]
 8015aa4:	6053      	str	r3, [r2, #4]
 8015aa6:	440c      	add	r4, r1
 8015aa8:	6014      	str	r4, [r2, #0]
 8015aaa:	e7da      	b.n	8015a62 <_free_r+0x26>
 8015aac:	d902      	bls.n	8015ab4 <_free_r+0x78>
 8015aae:	230c      	movs	r3, #12
 8015ab0:	6003      	str	r3, [r0, #0]
 8015ab2:	e7d6      	b.n	8015a62 <_free_r+0x26>
 8015ab4:	6825      	ldr	r5, [r4, #0]
 8015ab6:	1961      	adds	r1, r4, r5
 8015ab8:	428b      	cmp	r3, r1
 8015aba:	bf04      	itt	eq
 8015abc:	6819      	ldreq	r1, [r3, #0]
 8015abe:	685b      	ldreq	r3, [r3, #4]
 8015ac0:	6063      	str	r3, [r4, #4]
 8015ac2:	bf04      	itt	eq
 8015ac4:	1949      	addeq	r1, r1, r5
 8015ac6:	6021      	streq	r1, [r4, #0]
 8015ac8:	6054      	str	r4, [r2, #4]
 8015aca:	e7ca      	b.n	8015a62 <_free_r+0x26>
 8015acc:	b003      	add	sp, #12
 8015ace:	bd30      	pop	{r4, r5, pc}
 8015ad0:	20005bf8 	.word	0x20005bf8

08015ad4 <malloc>:
 8015ad4:	4b02      	ldr	r3, [pc, #8]	; (8015ae0 <malloc+0xc>)
 8015ad6:	4601      	mov	r1, r0
 8015ad8:	6818      	ldr	r0, [r3, #0]
 8015ada:	f000 b823 	b.w	8015b24 <_malloc_r>
 8015ade:	bf00      	nop
 8015ae0:	2000017c 	.word	0x2000017c

08015ae4 <sbrk_aligned>:
 8015ae4:	b570      	push	{r4, r5, r6, lr}
 8015ae6:	4e0e      	ldr	r6, [pc, #56]	; (8015b20 <sbrk_aligned+0x3c>)
 8015ae8:	460c      	mov	r4, r1
 8015aea:	6831      	ldr	r1, [r6, #0]
 8015aec:	4605      	mov	r5, r0
 8015aee:	b911      	cbnz	r1, 8015af6 <sbrk_aligned+0x12>
 8015af0:	f000 fe26 	bl	8016740 <_sbrk_r>
 8015af4:	6030      	str	r0, [r6, #0]
 8015af6:	4621      	mov	r1, r4
 8015af8:	4628      	mov	r0, r5
 8015afa:	f000 fe21 	bl	8016740 <_sbrk_r>
 8015afe:	1c43      	adds	r3, r0, #1
 8015b00:	d00a      	beq.n	8015b18 <sbrk_aligned+0x34>
 8015b02:	1cc4      	adds	r4, r0, #3
 8015b04:	f024 0403 	bic.w	r4, r4, #3
 8015b08:	42a0      	cmp	r0, r4
 8015b0a:	d007      	beq.n	8015b1c <sbrk_aligned+0x38>
 8015b0c:	1a21      	subs	r1, r4, r0
 8015b0e:	4628      	mov	r0, r5
 8015b10:	f000 fe16 	bl	8016740 <_sbrk_r>
 8015b14:	3001      	adds	r0, #1
 8015b16:	d101      	bne.n	8015b1c <sbrk_aligned+0x38>
 8015b18:	f04f 34ff 	mov.w	r4, #4294967295
 8015b1c:	4620      	mov	r0, r4
 8015b1e:	bd70      	pop	{r4, r5, r6, pc}
 8015b20:	20005bfc 	.word	0x20005bfc

08015b24 <_malloc_r>:
 8015b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b28:	1ccd      	adds	r5, r1, #3
 8015b2a:	f025 0503 	bic.w	r5, r5, #3
 8015b2e:	3508      	adds	r5, #8
 8015b30:	2d0c      	cmp	r5, #12
 8015b32:	bf38      	it	cc
 8015b34:	250c      	movcc	r5, #12
 8015b36:	2d00      	cmp	r5, #0
 8015b38:	4607      	mov	r7, r0
 8015b3a:	db01      	blt.n	8015b40 <_malloc_r+0x1c>
 8015b3c:	42a9      	cmp	r1, r5
 8015b3e:	d905      	bls.n	8015b4c <_malloc_r+0x28>
 8015b40:	230c      	movs	r3, #12
 8015b42:	603b      	str	r3, [r7, #0]
 8015b44:	2600      	movs	r6, #0
 8015b46:	4630      	mov	r0, r6
 8015b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015c20 <_malloc_r+0xfc>
 8015b50:	f000 f868 	bl	8015c24 <__malloc_lock>
 8015b54:	f8d8 3000 	ldr.w	r3, [r8]
 8015b58:	461c      	mov	r4, r3
 8015b5a:	bb5c      	cbnz	r4, 8015bb4 <_malloc_r+0x90>
 8015b5c:	4629      	mov	r1, r5
 8015b5e:	4638      	mov	r0, r7
 8015b60:	f7ff ffc0 	bl	8015ae4 <sbrk_aligned>
 8015b64:	1c43      	adds	r3, r0, #1
 8015b66:	4604      	mov	r4, r0
 8015b68:	d155      	bne.n	8015c16 <_malloc_r+0xf2>
 8015b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8015b6e:	4626      	mov	r6, r4
 8015b70:	2e00      	cmp	r6, #0
 8015b72:	d145      	bne.n	8015c00 <_malloc_r+0xdc>
 8015b74:	2c00      	cmp	r4, #0
 8015b76:	d048      	beq.n	8015c0a <_malloc_r+0xe6>
 8015b78:	6823      	ldr	r3, [r4, #0]
 8015b7a:	4631      	mov	r1, r6
 8015b7c:	4638      	mov	r0, r7
 8015b7e:	eb04 0903 	add.w	r9, r4, r3
 8015b82:	f000 fddd 	bl	8016740 <_sbrk_r>
 8015b86:	4581      	cmp	r9, r0
 8015b88:	d13f      	bne.n	8015c0a <_malloc_r+0xe6>
 8015b8a:	6821      	ldr	r1, [r4, #0]
 8015b8c:	1a6d      	subs	r5, r5, r1
 8015b8e:	4629      	mov	r1, r5
 8015b90:	4638      	mov	r0, r7
 8015b92:	f7ff ffa7 	bl	8015ae4 <sbrk_aligned>
 8015b96:	3001      	adds	r0, #1
 8015b98:	d037      	beq.n	8015c0a <_malloc_r+0xe6>
 8015b9a:	6823      	ldr	r3, [r4, #0]
 8015b9c:	442b      	add	r3, r5
 8015b9e:	6023      	str	r3, [r4, #0]
 8015ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d038      	beq.n	8015c1a <_malloc_r+0xf6>
 8015ba8:	685a      	ldr	r2, [r3, #4]
 8015baa:	42a2      	cmp	r2, r4
 8015bac:	d12b      	bne.n	8015c06 <_malloc_r+0xe2>
 8015bae:	2200      	movs	r2, #0
 8015bb0:	605a      	str	r2, [r3, #4]
 8015bb2:	e00f      	b.n	8015bd4 <_malloc_r+0xb0>
 8015bb4:	6822      	ldr	r2, [r4, #0]
 8015bb6:	1b52      	subs	r2, r2, r5
 8015bb8:	d41f      	bmi.n	8015bfa <_malloc_r+0xd6>
 8015bba:	2a0b      	cmp	r2, #11
 8015bbc:	d917      	bls.n	8015bee <_malloc_r+0xca>
 8015bbe:	1961      	adds	r1, r4, r5
 8015bc0:	42a3      	cmp	r3, r4
 8015bc2:	6025      	str	r5, [r4, #0]
 8015bc4:	bf18      	it	ne
 8015bc6:	6059      	strne	r1, [r3, #4]
 8015bc8:	6863      	ldr	r3, [r4, #4]
 8015bca:	bf08      	it	eq
 8015bcc:	f8c8 1000 	streq.w	r1, [r8]
 8015bd0:	5162      	str	r2, [r4, r5]
 8015bd2:	604b      	str	r3, [r1, #4]
 8015bd4:	4638      	mov	r0, r7
 8015bd6:	f104 060b 	add.w	r6, r4, #11
 8015bda:	f000 f829 	bl	8015c30 <__malloc_unlock>
 8015bde:	f026 0607 	bic.w	r6, r6, #7
 8015be2:	1d23      	adds	r3, r4, #4
 8015be4:	1af2      	subs	r2, r6, r3
 8015be6:	d0ae      	beq.n	8015b46 <_malloc_r+0x22>
 8015be8:	1b9b      	subs	r3, r3, r6
 8015bea:	50a3      	str	r3, [r4, r2]
 8015bec:	e7ab      	b.n	8015b46 <_malloc_r+0x22>
 8015bee:	42a3      	cmp	r3, r4
 8015bf0:	6862      	ldr	r2, [r4, #4]
 8015bf2:	d1dd      	bne.n	8015bb0 <_malloc_r+0x8c>
 8015bf4:	f8c8 2000 	str.w	r2, [r8]
 8015bf8:	e7ec      	b.n	8015bd4 <_malloc_r+0xb0>
 8015bfa:	4623      	mov	r3, r4
 8015bfc:	6864      	ldr	r4, [r4, #4]
 8015bfe:	e7ac      	b.n	8015b5a <_malloc_r+0x36>
 8015c00:	4634      	mov	r4, r6
 8015c02:	6876      	ldr	r6, [r6, #4]
 8015c04:	e7b4      	b.n	8015b70 <_malloc_r+0x4c>
 8015c06:	4613      	mov	r3, r2
 8015c08:	e7cc      	b.n	8015ba4 <_malloc_r+0x80>
 8015c0a:	230c      	movs	r3, #12
 8015c0c:	603b      	str	r3, [r7, #0]
 8015c0e:	4638      	mov	r0, r7
 8015c10:	f000 f80e 	bl	8015c30 <__malloc_unlock>
 8015c14:	e797      	b.n	8015b46 <_malloc_r+0x22>
 8015c16:	6025      	str	r5, [r4, #0]
 8015c18:	e7dc      	b.n	8015bd4 <_malloc_r+0xb0>
 8015c1a:	605b      	str	r3, [r3, #4]
 8015c1c:	deff      	udf	#255	; 0xff
 8015c1e:	bf00      	nop
 8015c20:	20005bf8 	.word	0x20005bf8

08015c24 <__malloc_lock>:
 8015c24:	4801      	ldr	r0, [pc, #4]	; (8015c2c <__malloc_lock+0x8>)
 8015c26:	f7ff b87e 	b.w	8014d26 <__retarget_lock_acquire_recursive>
 8015c2a:	bf00      	nop
 8015c2c:	20005bf4 	.word	0x20005bf4

08015c30 <__malloc_unlock>:
 8015c30:	4801      	ldr	r0, [pc, #4]	; (8015c38 <__malloc_unlock+0x8>)
 8015c32:	f7ff b879 	b.w	8014d28 <__retarget_lock_release_recursive>
 8015c36:	bf00      	nop
 8015c38:	20005bf4 	.word	0x20005bf4

08015c3c <_Balloc>:
 8015c3c:	b570      	push	{r4, r5, r6, lr}
 8015c3e:	69c6      	ldr	r6, [r0, #28]
 8015c40:	4604      	mov	r4, r0
 8015c42:	460d      	mov	r5, r1
 8015c44:	b976      	cbnz	r6, 8015c64 <_Balloc+0x28>
 8015c46:	2010      	movs	r0, #16
 8015c48:	f7ff ff44 	bl	8015ad4 <malloc>
 8015c4c:	4602      	mov	r2, r0
 8015c4e:	61e0      	str	r0, [r4, #28]
 8015c50:	b920      	cbnz	r0, 8015c5c <_Balloc+0x20>
 8015c52:	4b18      	ldr	r3, [pc, #96]	; (8015cb4 <_Balloc+0x78>)
 8015c54:	4818      	ldr	r0, [pc, #96]	; (8015cb8 <_Balloc+0x7c>)
 8015c56:	216b      	movs	r1, #107	; 0x6b
 8015c58:	f000 fd82 	bl	8016760 <__assert_func>
 8015c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015c60:	6006      	str	r6, [r0, #0]
 8015c62:	60c6      	str	r6, [r0, #12]
 8015c64:	69e6      	ldr	r6, [r4, #28]
 8015c66:	68f3      	ldr	r3, [r6, #12]
 8015c68:	b183      	cbz	r3, 8015c8c <_Balloc+0x50>
 8015c6a:	69e3      	ldr	r3, [r4, #28]
 8015c6c:	68db      	ldr	r3, [r3, #12]
 8015c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015c72:	b9b8      	cbnz	r0, 8015ca4 <_Balloc+0x68>
 8015c74:	2101      	movs	r1, #1
 8015c76:	fa01 f605 	lsl.w	r6, r1, r5
 8015c7a:	1d72      	adds	r2, r6, #5
 8015c7c:	0092      	lsls	r2, r2, #2
 8015c7e:	4620      	mov	r0, r4
 8015c80:	f000 fd8c 	bl	801679c <_calloc_r>
 8015c84:	b160      	cbz	r0, 8015ca0 <_Balloc+0x64>
 8015c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015c8a:	e00e      	b.n	8015caa <_Balloc+0x6e>
 8015c8c:	2221      	movs	r2, #33	; 0x21
 8015c8e:	2104      	movs	r1, #4
 8015c90:	4620      	mov	r0, r4
 8015c92:	f000 fd83 	bl	801679c <_calloc_r>
 8015c96:	69e3      	ldr	r3, [r4, #28]
 8015c98:	60f0      	str	r0, [r6, #12]
 8015c9a:	68db      	ldr	r3, [r3, #12]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d1e4      	bne.n	8015c6a <_Balloc+0x2e>
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	bd70      	pop	{r4, r5, r6, pc}
 8015ca4:	6802      	ldr	r2, [r0, #0]
 8015ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015caa:	2300      	movs	r3, #0
 8015cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015cb0:	e7f7      	b.n	8015ca2 <_Balloc+0x66>
 8015cb2:	bf00      	nop
 8015cb4:	080178b1 	.word	0x080178b1
 8015cb8:	08017931 	.word	0x08017931

08015cbc <_Bfree>:
 8015cbc:	b570      	push	{r4, r5, r6, lr}
 8015cbe:	69c6      	ldr	r6, [r0, #28]
 8015cc0:	4605      	mov	r5, r0
 8015cc2:	460c      	mov	r4, r1
 8015cc4:	b976      	cbnz	r6, 8015ce4 <_Bfree+0x28>
 8015cc6:	2010      	movs	r0, #16
 8015cc8:	f7ff ff04 	bl	8015ad4 <malloc>
 8015ccc:	4602      	mov	r2, r0
 8015cce:	61e8      	str	r0, [r5, #28]
 8015cd0:	b920      	cbnz	r0, 8015cdc <_Bfree+0x20>
 8015cd2:	4b09      	ldr	r3, [pc, #36]	; (8015cf8 <_Bfree+0x3c>)
 8015cd4:	4809      	ldr	r0, [pc, #36]	; (8015cfc <_Bfree+0x40>)
 8015cd6:	218f      	movs	r1, #143	; 0x8f
 8015cd8:	f000 fd42 	bl	8016760 <__assert_func>
 8015cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ce0:	6006      	str	r6, [r0, #0]
 8015ce2:	60c6      	str	r6, [r0, #12]
 8015ce4:	b13c      	cbz	r4, 8015cf6 <_Bfree+0x3a>
 8015ce6:	69eb      	ldr	r3, [r5, #28]
 8015ce8:	6862      	ldr	r2, [r4, #4]
 8015cea:	68db      	ldr	r3, [r3, #12]
 8015cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015cf0:	6021      	str	r1, [r4, #0]
 8015cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015cf6:	bd70      	pop	{r4, r5, r6, pc}
 8015cf8:	080178b1 	.word	0x080178b1
 8015cfc:	08017931 	.word	0x08017931

08015d00 <__multadd>:
 8015d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d04:	690d      	ldr	r5, [r1, #16]
 8015d06:	4607      	mov	r7, r0
 8015d08:	460c      	mov	r4, r1
 8015d0a:	461e      	mov	r6, r3
 8015d0c:	f101 0c14 	add.w	ip, r1, #20
 8015d10:	2000      	movs	r0, #0
 8015d12:	f8dc 3000 	ldr.w	r3, [ip]
 8015d16:	b299      	uxth	r1, r3
 8015d18:	fb02 6101 	mla	r1, r2, r1, r6
 8015d1c:	0c1e      	lsrs	r6, r3, #16
 8015d1e:	0c0b      	lsrs	r3, r1, #16
 8015d20:	fb02 3306 	mla	r3, r2, r6, r3
 8015d24:	b289      	uxth	r1, r1
 8015d26:	3001      	adds	r0, #1
 8015d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015d2c:	4285      	cmp	r5, r0
 8015d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8015d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015d36:	dcec      	bgt.n	8015d12 <__multadd+0x12>
 8015d38:	b30e      	cbz	r6, 8015d7e <__multadd+0x7e>
 8015d3a:	68a3      	ldr	r3, [r4, #8]
 8015d3c:	42ab      	cmp	r3, r5
 8015d3e:	dc19      	bgt.n	8015d74 <__multadd+0x74>
 8015d40:	6861      	ldr	r1, [r4, #4]
 8015d42:	4638      	mov	r0, r7
 8015d44:	3101      	adds	r1, #1
 8015d46:	f7ff ff79 	bl	8015c3c <_Balloc>
 8015d4a:	4680      	mov	r8, r0
 8015d4c:	b928      	cbnz	r0, 8015d5a <__multadd+0x5a>
 8015d4e:	4602      	mov	r2, r0
 8015d50:	4b0c      	ldr	r3, [pc, #48]	; (8015d84 <__multadd+0x84>)
 8015d52:	480d      	ldr	r0, [pc, #52]	; (8015d88 <__multadd+0x88>)
 8015d54:	21ba      	movs	r1, #186	; 0xba
 8015d56:	f000 fd03 	bl	8016760 <__assert_func>
 8015d5a:	6922      	ldr	r2, [r4, #16]
 8015d5c:	3202      	adds	r2, #2
 8015d5e:	f104 010c 	add.w	r1, r4, #12
 8015d62:	0092      	lsls	r2, r2, #2
 8015d64:	300c      	adds	r0, #12
 8015d66:	f7fe ffe0 	bl	8014d2a <memcpy>
 8015d6a:	4621      	mov	r1, r4
 8015d6c:	4638      	mov	r0, r7
 8015d6e:	f7ff ffa5 	bl	8015cbc <_Bfree>
 8015d72:	4644      	mov	r4, r8
 8015d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015d78:	3501      	adds	r5, #1
 8015d7a:	615e      	str	r6, [r3, #20]
 8015d7c:	6125      	str	r5, [r4, #16]
 8015d7e:	4620      	mov	r0, r4
 8015d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d84:	08017920 	.word	0x08017920
 8015d88:	08017931 	.word	0x08017931

08015d8c <__hi0bits>:
 8015d8c:	0c03      	lsrs	r3, r0, #16
 8015d8e:	041b      	lsls	r3, r3, #16
 8015d90:	b9d3      	cbnz	r3, 8015dc8 <__hi0bits+0x3c>
 8015d92:	0400      	lsls	r0, r0, #16
 8015d94:	2310      	movs	r3, #16
 8015d96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015d9a:	bf04      	itt	eq
 8015d9c:	0200      	lsleq	r0, r0, #8
 8015d9e:	3308      	addeq	r3, #8
 8015da0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015da4:	bf04      	itt	eq
 8015da6:	0100      	lsleq	r0, r0, #4
 8015da8:	3304      	addeq	r3, #4
 8015daa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015dae:	bf04      	itt	eq
 8015db0:	0080      	lsleq	r0, r0, #2
 8015db2:	3302      	addeq	r3, #2
 8015db4:	2800      	cmp	r0, #0
 8015db6:	db05      	blt.n	8015dc4 <__hi0bits+0x38>
 8015db8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015dbc:	f103 0301 	add.w	r3, r3, #1
 8015dc0:	bf08      	it	eq
 8015dc2:	2320      	moveq	r3, #32
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	4770      	bx	lr
 8015dc8:	2300      	movs	r3, #0
 8015dca:	e7e4      	b.n	8015d96 <__hi0bits+0xa>

08015dcc <__lo0bits>:
 8015dcc:	6803      	ldr	r3, [r0, #0]
 8015dce:	f013 0207 	ands.w	r2, r3, #7
 8015dd2:	d00c      	beq.n	8015dee <__lo0bits+0x22>
 8015dd4:	07d9      	lsls	r1, r3, #31
 8015dd6:	d422      	bmi.n	8015e1e <__lo0bits+0x52>
 8015dd8:	079a      	lsls	r2, r3, #30
 8015dda:	bf49      	itett	mi
 8015ddc:	085b      	lsrmi	r3, r3, #1
 8015dde:	089b      	lsrpl	r3, r3, #2
 8015de0:	6003      	strmi	r3, [r0, #0]
 8015de2:	2201      	movmi	r2, #1
 8015de4:	bf5c      	itt	pl
 8015de6:	6003      	strpl	r3, [r0, #0]
 8015de8:	2202      	movpl	r2, #2
 8015dea:	4610      	mov	r0, r2
 8015dec:	4770      	bx	lr
 8015dee:	b299      	uxth	r1, r3
 8015df0:	b909      	cbnz	r1, 8015df6 <__lo0bits+0x2a>
 8015df2:	0c1b      	lsrs	r3, r3, #16
 8015df4:	2210      	movs	r2, #16
 8015df6:	b2d9      	uxtb	r1, r3
 8015df8:	b909      	cbnz	r1, 8015dfe <__lo0bits+0x32>
 8015dfa:	3208      	adds	r2, #8
 8015dfc:	0a1b      	lsrs	r3, r3, #8
 8015dfe:	0719      	lsls	r1, r3, #28
 8015e00:	bf04      	itt	eq
 8015e02:	091b      	lsreq	r3, r3, #4
 8015e04:	3204      	addeq	r2, #4
 8015e06:	0799      	lsls	r1, r3, #30
 8015e08:	bf04      	itt	eq
 8015e0a:	089b      	lsreq	r3, r3, #2
 8015e0c:	3202      	addeq	r2, #2
 8015e0e:	07d9      	lsls	r1, r3, #31
 8015e10:	d403      	bmi.n	8015e1a <__lo0bits+0x4e>
 8015e12:	085b      	lsrs	r3, r3, #1
 8015e14:	f102 0201 	add.w	r2, r2, #1
 8015e18:	d003      	beq.n	8015e22 <__lo0bits+0x56>
 8015e1a:	6003      	str	r3, [r0, #0]
 8015e1c:	e7e5      	b.n	8015dea <__lo0bits+0x1e>
 8015e1e:	2200      	movs	r2, #0
 8015e20:	e7e3      	b.n	8015dea <__lo0bits+0x1e>
 8015e22:	2220      	movs	r2, #32
 8015e24:	e7e1      	b.n	8015dea <__lo0bits+0x1e>
	...

08015e28 <__i2b>:
 8015e28:	b510      	push	{r4, lr}
 8015e2a:	460c      	mov	r4, r1
 8015e2c:	2101      	movs	r1, #1
 8015e2e:	f7ff ff05 	bl	8015c3c <_Balloc>
 8015e32:	4602      	mov	r2, r0
 8015e34:	b928      	cbnz	r0, 8015e42 <__i2b+0x1a>
 8015e36:	4b05      	ldr	r3, [pc, #20]	; (8015e4c <__i2b+0x24>)
 8015e38:	4805      	ldr	r0, [pc, #20]	; (8015e50 <__i2b+0x28>)
 8015e3a:	f240 1145 	movw	r1, #325	; 0x145
 8015e3e:	f000 fc8f 	bl	8016760 <__assert_func>
 8015e42:	2301      	movs	r3, #1
 8015e44:	6144      	str	r4, [r0, #20]
 8015e46:	6103      	str	r3, [r0, #16]
 8015e48:	bd10      	pop	{r4, pc}
 8015e4a:	bf00      	nop
 8015e4c:	08017920 	.word	0x08017920
 8015e50:	08017931 	.word	0x08017931

08015e54 <__multiply>:
 8015e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e58:	4691      	mov	r9, r2
 8015e5a:	690a      	ldr	r2, [r1, #16]
 8015e5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	bfb8      	it	lt
 8015e64:	460b      	movlt	r3, r1
 8015e66:	460c      	mov	r4, r1
 8015e68:	bfbc      	itt	lt
 8015e6a:	464c      	movlt	r4, r9
 8015e6c:	4699      	movlt	r9, r3
 8015e6e:	6927      	ldr	r7, [r4, #16]
 8015e70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015e74:	68a3      	ldr	r3, [r4, #8]
 8015e76:	6861      	ldr	r1, [r4, #4]
 8015e78:	eb07 060a 	add.w	r6, r7, sl
 8015e7c:	42b3      	cmp	r3, r6
 8015e7e:	b085      	sub	sp, #20
 8015e80:	bfb8      	it	lt
 8015e82:	3101      	addlt	r1, #1
 8015e84:	f7ff feda 	bl	8015c3c <_Balloc>
 8015e88:	b930      	cbnz	r0, 8015e98 <__multiply+0x44>
 8015e8a:	4602      	mov	r2, r0
 8015e8c:	4b44      	ldr	r3, [pc, #272]	; (8015fa0 <__multiply+0x14c>)
 8015e8e:	4845      	ldr	r0, [pc, #276]	; (8015fa4 <__multiply+0x150>)
 8015e90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015e94:	f000 fc64 	bl	8016760 <__assert_func>
 8015e98:	f100 0514 	add.w	r5, r0, #20
 8015e9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015ea0:	462b      	mov	r3, r5
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	4543      	cmp	r3, r8
 8015ea6:	d321      	bcc.n	8015eec <__multiply+0x98>
 8015ea8:	f104 0314 	add.w	r3, r4, #20
 8015eac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015eb0:	f109 0314 	add.w	r3, r9, #20
 8015eb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015eb8:	9202      	str	r2, [sp, #8]
 8015eba:	1b3a      	subs	r2, r7, r4
 8015ebc:	3a15      	subs	r2, #21
 8015ebe:	f022 0203 	bic.w	r2, r2, #3
 8015ec2:	3204      	adds	r2, #4
 8015ec4:	f104 0115 	add.w	r1, r4, #21
 8015ec8:	428f      	cmp	r7, r1
 8015eca:	bf38      	it	cc
 8015ecc:	2204      	movcc	r2, #4
 8015ece:	9201      	str	r2, [sp, #4]
 8015ed0:	9a02      	ldr	r2, [sp, #8]
 8015ed2:	9303      	str	r3, [sp, #12]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d80c      	bhi.n	8015ef2 <__multiply+0x9e>
 8015ed8:	2e00      	cmp	r6, #0
 8015eda:	dd03      	ble.n	8015ee4 <__multiply+0x90>
 8015edc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d05b      	beq.n	8015f9c <__multiply+0x148>
 8015ee4:	6106      	str	r6, [r0, #16]
 8015ee6:	b005      	add	sp, #20
 8015ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eec:	f843 2b04 	str.w	r2, [r3], #4
 8015ef0:	e7d8      	b.n	8015ea4 <__multiply+0x50>
 8015ef2:	f8b3 a000 	ldrh.w	sl, [r3]
 8015ef6:	f1ba 0f00 	cmp.w	sl, #0
 8015efa:	d024      	beq.n	8015f46 <__multiply+0xf2>
 8015efc:	f104 0e14 	add.w	lr, r4, #20
 8015f00:	46a9      	mov	r9, r5
 8015f02:	f04f 0c00 	mov.w	ip, #0
 8015f06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015f0a:	f8d9 1000 	ldr.w	r1, [r9]
 8015f0e:	fa1f fb82 	uxth.w	fp, r2
 8015f12:	b289      	uxth	r1, r1
 8015f14:	fb0a 110b 	mla	r1, sl, fp, r1
 8015f18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8015f20:	4461      	add	r1, ip
 8015f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015f26:	fb0a c20b 	mla	r2, sl, fp, ip
 8015f2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015f2e:	b289      	uxth	r1, r1
 8015f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015f34:	4577      	cmp	r7, lr
 8015f36:	f849 1b04 	str.w	r1, [r9], #4
 8015f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015f3e:	d8e2      	bhi.n	8015f06 <__multiply+0xb2>
 8015f40:	9a01      	ldr	r2, [sp, #4]
 8015f42:	f845 c002 	str.w	ip, [r5, r2]
 8015f46:	9a03      	ldr	r2, [sp, #12]
 8015f48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015f4c:	3304      	adds	r3, #4
 8015f4e:	f1b9 0f00 	cmp.w	r9, #0
 8015f52:	d021      	beq.n	8015f98 <__multiply+0x144>
 8015f54:	6829      	ldr	r1, [r5, #0]
 8015f56:	f104 0c14 	add.w	ip, r4, #20
 8015f5a:	46ae      	mov	lr, r5
 8015f5c:	f04f 0a00 	mov.w	sl, #0
 8015f60:	f8bc b000 	ldrh.w	fp, [ip]
 8015f64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015f68:	fb09 220b 	mla	r2, r9, fp, r2
 8015f6c:	4452      	add	r2, sl
 8015f6e:	b289      	uxth	r1, r1
 8015f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015f74:	f84e 1b04 	str.w	r1, [lr], #4
 8015f78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015f7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015f80:	f8be 1000 	ldrh.w	r1, [lr]
 8015f84:	fb09 110a 	mla	r1, r9, sl, r1
 8015f88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015f8c:	4567      	cmp	r7, ip
 8015f8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015f92:	d8e5      	bhi.n	8015f60 <__multiply+0x10c>
 8015f94:	9a01      	ldr	r2, [sp, #4]
 8015f96:	50a9      	str	r1, [r5, r2]
 8015f98:	3504      	adds	r5, #4
 8015f9a:	e799      	b.n	8015ed0 <__multiply+0x7c>
 8015f9c:	3e01      	subs	r6, #1
 8015f9e:	e79b      	b.n	8015ed8 <__multiply+0x84>
 8015fa0:	08017920 	.word	0x08017920
 8015fa4:	08017931 	.word	0x08017931

08015fa8 <__pow5mult>:
 8015fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fac:	4615      	mov	r5, r2
 8015fae:	f012 0203 	ands.w	r2, r2, #3
 8015fb2:	4606      	mov	r6, r0
 8015fb4:	460f      	mov	r7, r1
 8015fb6:	d007      	beq.n	8015fc8 <__pow5mult+0x20>
 8015fb8:	4c25      	ldr	r4, [pc, #148]	; (8016050 <__pow5mult+0xa8>)
 8015fba:	3a01      	subs	r2, #1
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015fc2:	f7ff fe9d 	bl	8015d00 <__multadd>
 8015fc6:	4607      	mov	r7, r0
 8015fc8:	10ad      	asrs	r5, r5, #2
 8015fca:	d03d      	beq.n	8016048 <__pow5mult+0xa0>
 8015fcc:	69f4      	ldr	r4, [r6, #28]
 8015fce:	b97c      	cbnz	r4, 8015ff0 <__pow5mult+0x48>
 8015fd0:	2010      	movs	r0, #16
 8015fd2:	f7ff fd7f 	bl	8015ad4 <malloc>
 8015fd6:	4602      	mov	r2, r0
 8015fd8:	61f0      	str	r0, [r6, #28]
 8015fda:	b928      	cbnz	r0, 8015fe8 <__pow5mult+0x40>
 8015fdc:	4b1d      	ldr	r3, [pc, #116]	; (8016054 <__pow5mult+0xac>)
 8015fde:	481e      	ldr	r0, [pc, #120]	; (8016058 <__pow5mult+0xb0>)
 8015fe0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015fe4:	f000 fbbc 	bl	8016760 <__assert_func>
 8015fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015fec:	6004      	str	r4, [r0, #0]
 8015fee:	60c4      	str	r4, [r0, #12]
 8015ff0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015ff8:	b94c      	cbnz	r4, 801600e <__pow5mult+0x66>
 8015ffa:	f240 2171 	movw	r1, #625	; 0x271
 8015ffe:	4630      	mov	r0, r6
 8016000:	f7ff ff12 	bl	8015e28 <__i2b>
 8016004:	2300      	movs	r3, #0
 8016006:	f8c8 0008 	str.w	r0, [r8, #8]
 801600a:	4604      	mov	r4, r0
 801600c:	6003      	str	r3, [r0, #0]
 801600e:	f04f 0900 	mov.w	r9, #0
 8016012:	07eb      	lsls	r3, r5, #31
 8016014:	d50a      	bpl.n	801602c <__pow5mult+0x84>
 8016016:	4639      	mov	r1, r7
 8016018:	4622      	mov	r2, r4
 801601a:	4630      	mov	r0, r6
 801601c:	f7ff ff1a 	bl	8015e54 <__multiply>
 8016020:	4639      	mov	r1, r7
 8016022:	4680      	mov	r8, r0
 8016024:	4630      	mov	r0, r6
 8016026:	f7ff fe49 	bl	8015cbc <_Bfree>
 801602a:	4647      	mov	r7, r8
 801602c:	106d      	asrs	r5, r5, #1
 801602e:	d00b      	beq.n	8016048 <__pow5mult+0xa0>
 8016030:	6820      	ldr	r0, [r4, #0]
 8016032:	b938      	cbnz	r0, 8016044 <__pow5mult+0x9c>
 8016034:	4622      	mov	r2, r4
 8016036:	4621      	mov	r1, r4
 8016038:	4630      	mov	r0, r6
 801603a:	f7ff ff0b 	bl	8015e54 <__multiply>
 801603e:	6020      	str	r0, [r4, #0]
 8016040:	f8c0 9000 	str.w	r9, [r0]
 8016044:	4604      	mov	r4, r0
 8016046:	e7e4      	b.n	8016012 <__pow5mult+0x6a>
 8016048:	4638      	mov	r0, r7
 801604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801604e:	bf00      	nop
 8016050:	08017a80 	.word	0x08017a80
 8016054:	080178b1 	.word	0x080178b1
 8016058:	08017931 	.word	0x08017931

0801605c <__lshift>:
 801605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016060:	460c      	mov	r4, r1
 8016062:	6849      	ldr	r1, [r1, #4]
 8016064:	6923      	ldr	r3, [r4, #16]
 8016066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801606a:	68a3      	ldr	r3, [r4, #8]
 801606c:	4607      	mov	r7, r0
 801606e:	4691      	mov	r9, r2
 8016070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016074:	f108 0601 	add.w	r6, r8, #1
 8016078:	42b3      	cmp	r3, r6
 801607a:	db0b      	blt.n	8016094 <__lshift+0x38>
 801607c:	4638      	mov	r0, r7
 801607e:	f7ff fddd 	bl	8015c3c <_Balloc>
 8016082:	4605      	mov	r5, r0
 8016084:	b948      	cbnz	r0, 801609a <__lshift+0x3e>
 8016086:	4602      	mov	r2, r0
 8016088:	4b28      	ldr	r3, [pc, #160]	; (801612c <__lshift+0xd0>)
 801608a:	4829      	ldr	r0, [pc, #164]	; (8016130 <__lshift+0xd4>)
 801608c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016090:	f000 fb66 	bl	8016760 <__assert_func>
 8016094:	3101      	adds	r1, #1
 8016096:	005b      	lsls	r3, r3, #1
 8016098:	e7ee      	b.n	8016078 <__lshift+0x1c>
 801609a:	2300      	movs	r3, #0
 801609c:	f100 0114 	add.w	r1, r0, #20
 80160a0:	f100 0210 	add.w	r2, r0, #16
 80160a4:	4618      	mov	r0, r3
 80160a6:	4553      	cmp	r3, sl
 80160a8:	db33      	blt.n	8016112 <__lshift+0xb6>
 80160aa:	6920      	ldr	r0, [r4, #16]
 80160ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80160b0:	f104 0314 	add.w	r3, r4, #20
 80160b4:	f019 091f 	ands.w	r9, r9, #31
 80160b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80160bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80160c0:	d02b      	beq.n	801611a <__lshift+0xbe>
 80160c2:	f1c9 0e20 	rsb	lr, r9, #32
 80160c6:	468a      	mov	sl, r1
 80160c8:	2200      	movs	r2, #0
 80160ca:	6818      	ldr	r0, [r3, #0]
 80160cc:	fa00 f009 	lsl.w	r0, r0, r9
 80160d0:	4310      	orrs	r0, r2
 80160d2:	f84a 0b04 	str.w	r0, [sl], #4
 80160d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80160da:	459c      	cmp	ip, r3
 80160dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80160e0:	d8f3      	bhi.n	80160ca <__lshift+0x6e>
 80160e2:	ebac 0304 	sub.w	r3, ip, r4
 80160e6:	3b15      	subs	r3, #21
 80160e8:	f023 0303 	bic.w	r3, r3, #3
 80160ec:	3304      	adds	r3, #4
 80160ee:	f104 0015 	add.w	r0, r4, #21
 80160f2:	4584      	cmp	ip, r0
 80160f4:	bf38      	it	cc
 80160f6:	2304      	movcc	r3, #4
 80160f8:	50ca      	str	r2, [r1, r3]
 80160fa:	b10a      	cbz	r2, 8016100 <__lshift+0xa4>
 80160fc:	f108 0602 	add.w	r6, r8, #2
 8016100:	3e01      	subs	r6, #1
 8016102:	4638      	mov	r0, r7
 8016104:	612e      	str	r6, [r5, #16]
 8016106:	4621      	mov	r1, r4
 8016108:	f7ff fdd8 	bl	8015cbc <_Bfree>
 801610c:	4628      	mov	r0, r5
 801610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016112:	f842 0f04 	str.w	r0, [r2, #4]!
 8016116:	3301      	adds	r3, #1
 8016118:	e7c5      	b.n	80160a6 <__lshift+0x4a>
 801611a:	3904      	subs	r1, #4
 801611c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016120:	f841 2f04 	str.w	r2, [r1, #4]!
 8016124:	459c      	cmp	ip, r3
 8016126:	d8f9      	bhi.n	801611c <__lshift+0xc0>
 8016128:	e7ea      	b.n	8016100 <__lshift+0xa4>
 801612a:	bf00      	nop
 801612c:	08017920 	.word	0x08017920
 8016130:	08017931 	.word	0x08017931

08016134 <__mcmp>:
 8016134:	b530      	push	{r4, r5, lr}
 8016136:	6902      	ldr	r2, [r0, #16]
 8016138:	690c      	ldr	r4, [r1, #16]
 801613a:	1b12      	subs	r2, r2, r4
 801613c:	d10e      	bne.n	801615c <__mcmp+0x28>
 801613e:	f100 0314 	add.w	r3, r0, #20
 8016142:	3114      	adds	r1, #20
 8016144:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801614c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016150:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016154:	42a5      	cmp	r5, r4
 8016156:	d003      	beq.n	8016160 <__mcmp+0x2c>
 8016158:	d305      	bcc.n	8016166 <__mcmp+0x32>
 801615a:	2201      	movs	r2, #1
 801615c:	4610      	mov	r0, r2
 801615e:	bd30      	pop	{r4, r5, pc}
 8016160:	4283      	cmp	r3, r0
 8016162:	d3f3      	bcc.n	801614c <__mcmp+0x18>
 8016164:	e7fa      	b.n	801615c <__mcmp+0x28>
 8016166:	f04f 32ff 	mov.w	r2, #4294967295
 801616a:	e7f7      	b.n	801615c <__mcmp+0x28>

0801616c <__mdiff>:
 801616c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016170:	460c      	mov	r4, r1
 8016172:	4606      	mov	r6, r0
 8016174:	4611      	mov	r1, r2
 8016176:	4620      	mov	r0, r4
 8016178:	4690      	mov	r8, r2
 801617a:	f7ff ffdb 	bl	8016134 <__mcmp>
 801617e:	1e05      	subs	r5, r0, #0
 8016180:	d110      	bne.n	80161a4 <__mdiff+0x38>
 8016182:	4629      	mov	r1, r5
 8016184:	4630      	mov	r0, r6
 8016186:	f7ff fd59 	bl	8015c3c <_Balloc>
 801618a:	b930      	cbnz	r0, 801619a <__mdiff+0x2e>
 801618c:	4b3a      	ldr	r3, [pc, #232]	; (8016278 <__mdiff+0x10c>)
 801618e:	4602      	mov	r2, r0
 8016190:	f240 2137 	movw	r1, #567	; 0x237
 8016194:	4839      	ldr	r0, [pc, #228]	; (801627c <__mdiff+0x110>)
 8016196:	f000 fae3 	bl	8016760 <__assert_func>
 801619a:	2301      	movs	r3, #1
 801619c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80161a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a4:	bfa4      	itt	ge
 80161a6:	4643      	movge	r3, r8
 80161a8:	46a0      	movge	r8, r4
 80161aa:	4630      	mov	r0, r6
 80161ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80161b0:	bfa6      	itte	ge
 80161b2:	461c      	movge	r4, r3
 80161b4:	2500      	movge	r5, #0
 80161b6:	2501      	movlt	r5, #1
 80161b8:	f7ff fd40 	bl	8015c3c <_Balloc>
 80161bc:	b920      	cbnz	r0, 80161c8 <__mdiff+0x5c>
 80161be:	4b2e      	ldr	r3, [pc, #184]	; (8016278 <__mdiff+0x10c>)
 80161c0:	4602      	mov	r2, r0
 80161c2:	f240 2145 	movw	r1, #581	; 0x245
 80161c6:	e7e5      	b.n	8016194 <__mdiff+0x28>
 80161c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80161cc:	6926      	ldr	r6, [r4, #16]
 80161ce:	60c5      	str	r5, [r0, #12]
 80161d0:	f104 0914 	add.w	r9, r4, #20
 80161d4:	f108 0514 	add.w	r5, r8, #20
 80161d8:	f100 0e14 	add.w	lr, r0, #20
 80161dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80161e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80161e4:	f108 0210 	add.w	r2, r8, #16
 80161e8:	46f2      	mov	sl, lr
 80161ea:	2100      	movs	r1, #0
 80161ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80161f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80161f4:	fa11 f88b 	uxtah	r8, r1, fp
 80161f8:	b299      	uxth	r1, r3
 80161fa:	0c1b      	lsrs	r3, r3, #16
 80161fc:	eba8 0801 	sub.w	r8, r8, r1
 8016200:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016204:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016208:	fa1f f888 	uxth.w	r8, r8
 801620c:	1419      	asrs	r1, r3, #16
 801620e:	454e      	cmp	r6, r9
 8016210:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016214:	f84a 3b04 	str.w	r3, [sl], #4
 8016218:	d8e8      	bhi.n	80161ec <__mdiff+0x80>
 801621a:	1b33      	subs	r3, r6, r4
 801621c:	3b15      	subs	r3, #21
 801621e:	f023 0303 	bic.w	r3, r3, #3
 8016222:	3304      	adds	r3, #4
 8016224:	3415      	adds	r4, #21
 8016226:	42a6      	cmp	r6, r4
 8016228:	bf38      	it	cc
 801622a:	2304      	movcc	r3, #4
 801622c:	441d      	add	r5, r3
 801622e:	4473      	add	r3, lr
 8016230:	469e      	mov	lr, r3
 8016232:	462e      	mov	r6, r5
 8016234:	4566      	cmp	r6, ip
 8016236:	d30e      	bcc.n	8016256 <__mdiff+0xea>
 8016238:	f10c 0203 	add.w	r2, ip, #3
 801623c:	1b52      	subs	r2, r2, r5
 801623e:	f022 0203 	bic.w	r2, r2, #3
 8016242:	3d03      	subs	r5, #3
 8016244:	45ac      	cmp	ip, r5
 8016246:	bf38      	it	cc
 8016248:	2200      	movcc	r2, #0
 801624a:	4413      	add	r3, r2
 801624c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016250:	b17a      	cbz	r2, 8016272 <__mdiff+0x106>
 8016252:	6107      	str	r7, [r0, #16]
 8016254:	e7a4      	b.n	80161a0 <__mdiff+0x34>
 8016256:	f856 8b04 	ldr.w	r8, [r6], #4
 801625a:	fa11 f288 	uxtah	r2, r1, r8
 801625e:	1414      	asrs	r4, r2, #16
 8016260:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016264:	b292      	uxth	r2, r2
 8016266:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801626a:	f84e 2b04 	str.w	r2, [lr], #4
 801626e:	1421      	asrs	r1, r4, #16
 8016270:	e7e0      	b.n	8016234 <__mdiff+0xc8>
 8016272:	3f01      	subs	r7, #1
 8016274:	e7ea      	b.n	801624c <__mdiff+0xe0>
 8016276:	bf00      	nop
 8016278:	08017920 	.word	0x08017920
 801627c:	08017931 	.word	0x08017931

08016280 <__d2b>:
 8016280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016284:	460f      	mov	r7, r1
 8016286:	2101      	movs	r1, #1
 8016288:	ec59 8b10 	vmov	r8, r9, d0
 801628c:	4616      	mov	r6, r2
 801628e:	f7ff fcd5 	bl	8015c3c <_Balloc>
 8016292:	4604      	mov	r4, r0
 8016294:	b930      	cbnz	r0, 80162a4 <__d2b+0x24>
 8016296:	4602      	mov	r2, r0
 8016298:	4b24      	ldr	r3, [pc, #144]	; (801632c <__d2b+0xac>)
 801629a:	4825      	ldr	r0, [pc, #148]	; (8016330 <__d2b+0xb0>)
 801629c:	f240 310f 	movw	r1, #783	; 0x30f
 80162a0:	f000 fa5e 	bl	8016760 <__assert_func>
 80162a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80162a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162ac:	bb2d      	cbnz	r5, 80162fa <__d2b+0x7a>
 80162ae:	9301      	str	r3, [sp, #4]
 80162b0:	f1b8 0300 	subs.w	r3, r8, #0
 80162b4:	d026      	beq.n	8016304 <__d2b+0x84>
 80162b6:	4668      	mov	r0, sp
 80162b8:	9300      	str	r3, [sp, #0]
 80162ba:	f7ff fd87 	bl	8015dcc <__lo0bits>
 80162be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80162c2:	b1e8      	cbz	r0, 8016300 <__d2b+0x80>
 80162c4:	f1c0 0320 	rsb	r3, r0, #32
 80162c8:	fa02 f303 	lsl.w	r3, r2, r3
 80162cc:	430b      	orrs	r3, r1
 80162ce:	40c2      	lsrs	r2, r0
 80162d0:	6163      	str	r3, [r4, #20]
 80162d2:	9201      	str	r2, [sp, #4]
 80162d4:	9b01      	ldr	r3, [sp, #4]
 80162d6:	61a3      	str	r3, [r4, #24]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	bf14      	ite	ne
 80162dc:	2202      	movne	r2, #2
 80162de:	2201      	moveq	r2, #1
 80162e0:	6122      	str	r2, [r4, #16]
 80162e2:	b1bd      	cbz	r5, 8016314 <__d2b+0x94>
 80162e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80162e8:	4405      	add	r5, r0
 80162ea:	603d      	str	r5, [r7, #0]
 80162ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80162f0:	6030      	str	r0, [r6, #0]
 80162f2:	4620      	mov	r0, r4
 80162f4:	b003      	add	sp, #12
 80162f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80162fe:	e7d6      	b.n	80162ae <__d2b+0x2e>
 8016300:	6161      	str	r1, [r4, #20]
 8016302:	e7e7      	b.n	80162d4 <__d2b+0x54>
 8016304:	a801      	add	r0, sp, #4
 8016306:	f7ff fd61 	bl	8015dcc <__lo0bits>
 801630a:	9b01      	ldr	r3, [sp, #4]
 801630c:	6163      	str	r3, [r4, #20]
 801630e:	3020      	adds	r0, #32
 8016310:	2201      	movs	r2, #1
 8016312:	e7e5      	b.n	80162e0 <__d2b+0x60>
 8016314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801631c:	6038      	str	r0, [r7, #0]
 801631e:	6918      	ldr	r0, [r3, #16]
 8016320:	f7ff fd34 	bl	8015d8c <__hi0bits>
 8016324:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016328:	e7e2      	b.n	80162f0 <__d2b+0x70>
 801632a:	bf00      	nop
 801632c:	08017920 	.word	0x08017920
 8016330:	08017931 	.word	0x08017931

08016334 <__ssputs_r>:
 8016334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016338:	688e      	ldr	r6, [r1, #8]
 801633a:	461f      	mov	r7, r3
 801633c:	42be      	cmp	r6, r7
 801633e:	680b      	ldr	r3, [r1, #0]
 8016340:	4682      	mov	sl, r0
 8016342:	460c      	mov	r4, r1
 8016344:	4690      	mov	r8, r2
 8016346:	d82c      	bhi.n	80163a2 <__ssputs_r+0x6e>
 8016348:	898a      	ldrh	r2, [r1, #12]
 801634a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801634e:	d026      	beq.n	801639e <__ssputs_r+0x6a>
 8016350:	6965      	ldr	r5, [r4, #20]
 8016352:	6909      	ldr	r1, [r1, #16]
 8016354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016358:	eba3 0901 	sub.w	r9, r3, r1
 801635c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016360:	1c7b      	adds	r3, r7, #1
 8016362:	444b      	add	r3, r9
 8016364:	106d      	asrs	r5, r5, #1
 8016366:	429d      	cmp	r5, r3
 8016368:	bf38      	it	cc
 801636a:	461d      	movcc	r5, r3
 801636c:	0553      	lsls	r3, r2, #21
 801636e:	d527      	bpl.n	80163c0 <__ssputs_r+0x8c>
 8016370:	4629      	mov	r1, r5
 8016372:	f7ff fbd7 	bl	8015b24 <_malloc_r>
 8016376:	4606      	mov	r6, r0
 8016378:	b360      	cbz	r0, 80163d4 <__ssputs_r+0xa0>
 801637a:	6921      	ldr	r1, [r4, #16]
 801637c:	464a      	mov	r2, r9
 801637e:	f7fe fcd4 	bl	8014d2a <memcpy>
 8016382:	89a3      	ldrh	r3, [r4, #12]
 8016384:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801638c:	81a3      	strh	r3, [r4, #12]
 801638e:	6126      	str	r6, [r4, #16]
 8016390:	6165      	str	r5, [r4, #20]
 8016392:	444e      	add	r6, r9
 8016394:	eba5 0509 	sub.w	r5, r5, r9
 8016398:	6026      	str	r6, [r4, #0]
 801639a:	60a5      	str	r5, [r4, #8]
 801639c:	463e      	mov	r6, r7
 801639e:	42be      	cmp	r6, r7
 80163a0:	d900      	bls.n	80163a4 <__ssputs_r+0x70>
 80163a2:	463e      	mov	r6, r7
 80163a4:	6820      	ldr	r0, [r4, #0]
 80163a6:	4632      	mov	r2, r6
 80163a8:	4641      	mov	r1, r8
 80163aa:	f7fe fbc0 	bl	8014b2e <memmove>
 80163ae:	68a3      	ldr	r3, [r4, #8]
 80163b0:	1b9b      	subs	r3, r3, r6
 80163b2:	60a3      	str	r3, [r4, #8]
 80163b4:	6823      	ldr	r3, [r4, #0]
 80163b6:	4433      	add	r3, r6
 80163b8:	6023      	str	r3, [r4, #0]
 80163ba:	2000      	movs	r0, #0
 80163bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163c0:	462a      	mov	r2, r5
 80163c2:	f000 fa13 	bl	80167ec <_realloc_r>
 80163c6:	4606      	mov	r6, r0
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d1e0      	bne.n	801638e <__ssputs_r+0x5a>
 80163cc:	6921      	ldr	r1, [r4, #16]
 80163ce:	4650      	mov	r0, sl
 80163d0:	f7ff fb34 	bl	8015a3c <_free_r>
 80163d4:	230c      	movs	r3, #12
 80163d6:	f8ca 3000 	str.w	r3, [sl]
 80163da:	89a3      	ldrh	r3, [r4, #12]
 80163dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163e0:	81a3      	strh	r3, [r4, #12]
 80163e2:	f04f 30ff 	mov.w	r0, #4294967295
 80163e6:	e7e9      	b.n	80163bc <__ssputs_r+0x88>

080163e8 <_svfiprintf_r>:
 80163e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ec:	4698      	mov	r8, r3
 80163ee:	898b      	ldrh	r3, [r1, #12]
 80163f0:	061b      	lsls	r3, r3, #24
 80163f2:	b09d      	sub	sp, #116	; 0x74
 80163f4:	4607      	mov	r7, r0
 80163f6:	460d      	mov	r5, r1
 80163f8:	4614      	mov	r4, r2
 80163fa:	d50e      	bpl.n	801641a <_svfiprintf_r+0x32>
 80163fc:	690b      	ldr	r3, [r1, #16]
 80163fe:	b963      	cbnz	r3, 801641a <_svfiprintf_r+0x32>
 8016400:	2140      	movs	r1, #64	; 0x40
 8016402:	f7ff fb8f 	bl	8015b24 <_malloc_r>
 8016406:	6028      	str	r0, [r5, #0]
 8016408:	6128      	str	r0, [r5, #16]
 801640a:	b920      	cbnz	r0, 8016416 <_svfiprintf_r+0x2e>
 801640c:	230c      	movs	r3, #12
 801640e:	603b      	str	r3, [r7, #0]
 8016410:	f04f 30ff 	mov.w	r0, #4294967295
 8016414:	e0d0      	b.n	80165b8 <_svfiprintf_r+0x1d0>
 8016416:	2340      	movs	r3, #64	; 0x40
 8016418:	616b      	str	r3, [r5, #20]
 801641a:	2300      	movs	r3, #0
 801641c:	9309      	str	r3, [sp, #36]	; 0x24
 801641e:	2320      	movs	r3, #32
 8016420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016424:	f8cd 800c 	str.w	r8, [sp, #12]
 8016428:	2330      	movs	r3, #48	; 0x30
 801642a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80165d0 <_svfiprintf_r+0x1e8>
 801642e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016432:	f04f 0901 	mov.w	r9, #1
 8016436:	4623      	mov	r3, r4
 8016438:	469a      	mov	sl, r3
 801643a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801643e:	b10a      	cbz	r2, 8016444 <_svfiprintf_r+0x5c>
 8016440:	2a25      	cmp	r2, #37	; 0x25
 8016442:	d1f9      	bne.n	8016438 <_svfiprintf_r+0x50>
 8016444:	ebba 0b04 	subs.w	fp, sl, r4
 8016448:	d00b      	beq.n	8016462 <_svfiprintf_r+0x7a>
 801644a:	465b      	mov	r3, fp
 801644c:	4622      	mov	r2, r4
 801644e:	4629      	mov	r1, r5
 8016450:	4638      	mov	r0, r7
 8016452:	f7ff ff6f 	bl	8016334 <__ssputs_r>
 8016456:	3001      	adds	r0, #1
 8016458:	f000 80a9 	beq.w	80165ae <_svfiprintf_r+0x1c6>
 801645c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801645e:	445a      	add	r2, fp
 8016460:	9209      	str	r2, [sp, #36]	; 0x24
 8016462:	f89a 3000 	ldrb.w	r3, [sl]
 8016466:	2b00      	cmp	r3, #0
 8016468:	f000 80a1 	beq.w	80165ae <_svfiprintf_r+0x1c6>
 801646c:	2300      	movs	r3, #0
 801646e:	f04f 32ff 	mov.w	r2, #4294967295
 8016472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016476:	f10a 0a01 	add.w	sl, sl, #1
 801647a:	9304      	str	r3, [sp, #16]
 801647c:	9307      	str	r3, [sp, #28]
 801647e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016482:	931a      	str	r3, [sp, #104]	; 0x68
 8016484:	4654      	mov	r4, sl
 8016486:	2205      	movs	r2, #5
 8016488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801648c:	4850      	ldr	r0, [pc, #320]	; (80165d0 <_svfiprintf_r+0x1e8>)
 801648e:	f7e9 fea7 	bl	80001e0 <memchr>
 8016492:	9a04      	ldr	r2, [sp, #16]
 8016494:	b9d8      	cbnz	r0, 80164ce <_svfiprintf_r+0xe6>
 8016496:	06d0      	lsls	r0, r2, #27
 8016498:	bf44      	itt	mi
 801649a:	2320      	movmi	r3, #32
 801649c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80164a0:	0711      	lsls	r1, r2, #28
 80164a2:	bf44      	itt	mi
 80164a4:	232b      	movmi	r3, #43	; 0x2b
 80164a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80164aa:	f89a 3000 	ldrb.w	r3, [sl]
 80164ae:	2b2a      	cmp	r3, #42	; 0x2a
 80164b0:	d015      	beq.n	80164de <_svfiprintf_r+0xf6>
 80164b2:	9a07      	ldr	r2, [sp, #28]
 80164b4:	4654      	mov	r4, sl
 80164b6:	2000      	movs	r0, #0
 80164b8:	f04f 0c0a 	mov.w	ip, #10
 80164bc:	4621      	mov	r1, r4
 80164be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164c2:	3b30      	subs	r3, #48	; 0x30
 80164c4:	2b09      	cmp	r3, #9
 80164c6:	d94d      	bls.n	8016564 <_svfiprintf_r+0x17c>
 80164c8:	b1b0      	cbz	r0, 80164f8 <_svfiprintf_r+0x110>
 80164ca:	9207      	str	r2, [sp, #28]
 80164cc:	e014      	b.n	80164f8 <_svfiprintf_r+0x110>
 80164ce:	eba0 0308 	sub.w	r3, r0, r8
 80164d2:	fa09 f303 	lsl.w	r3, r9, r3
 80164d6:	4313      	orrs	r3, r2
 80164d8:	9304      	str	r3, [sp, #16]
 80164da:	46a2      	mov	sl, r4
 80164dc:	e7d2      	b.n	8016484 <_svfiprintf_r+0x9c>
 80164de:	9b03      	ldr	r3, [sp, #12]
 80164e0:	1d19      	adds	r1, r3, #4
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	9103      	str	r1, [sp, #12]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	bfbb      	ittet	lt
 80164ea:	425b      	neglt	r3, r3
 80164ec:	f042 0202 	orrlt.w	r2, r2, #2
 80164f0:	9307      	strge	r3, [sp, #28]
 80164f2:	9307      	strlt	r3, [sp, #28]
 80164f4:	bfb8      	it	lt
 80164f6:	9204      	strlt	r2, [sp, #16]
 80164f8:	7823      	ldrb	r3, [r4, #0]
 80164fa:	2b2e      	cmp	r3, #46	; 0x2e
 80164fc:	d10c      	bne.n	8016518 <_svfiprintf_r+0x130>
 80164fe:	7863      	ldrb	r3, [r4, #1]
 8016500:	2b2a      	cmp	r3, #42	; 0x2a
 8016502:	d134      	bne.n	801656e <_svfiprintf_r+0x186>
 8016504:	9b03      	ldr	r3, [sp, #12]
 8016506:	1d1a      	adds	r2, r3, #4
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	9203      	str	r2, [sp, #12]
 801650c:	2b00      	cmp	r3, #0
 801650e:	bfb8      	it	lt
 8016510:	f04f 33ff 	movlt.w	r3, #4294967295
 8016514:	3402      	adds	r4, #2
 8016516:	9305      	str	r3, [sp, #20]
 8016518:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80165e0 <_svfiprintf_r+0x1f8>
 801651c:	7821      	ldrb	r1, [r4, #0]
 801651e:	2203      	movs	r2, #3
 8016520:	4650      	mov	r0, sl
 8016522:	f7e9 fe5d 	bl	80001e0 <memchr>
 8016526:	b138      	cbz	r0, 8016538 <_svfiprintf_r+0x150>
 8016528:	9b04      	ldr	r3, [sp, #16]
 801652a:	eba0 000a 	sub.w	r0, r0, sl
 801652e:	2240      	movs	r2, #64	; 0x40
 8016530:	4082      	lsls	r2, r0
 8016532:	4313      	orrs	r3, r2
 8016534:	3401      	adds	r4, #1
 8016536:	9304      	str	r3, [sp, #16]
 8016538:	f814 1b01 	ldrb.w	r1, [r4], #1
 801653c:	4825      	ldr	r0, [pc, #148]	; (80165d4 <_svfiprintf_r+0x1ec>)
 801653e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016542:	2206      	movs	r2, #6
 8016544:	f7e9 fe4c 	bl	80001e0 <memchr>
 8016548:	2800      	cmp	r0, #0
 801654a:	d038      	beq.n	80165be <_svfiprintf_r+0x1d6>
 801654c:	4b22      	ldr	r3, [pc, #136]	; (80165d8 <_svfiprintf_r+0x1f0>)
 801654e:	bb1b      	cbnz	r3, 8016598 <_svfiprintf_r+0x1b0>
 8016550:	9b03      	ldr	r3, [sp, #12]
 8016552:	3307      	adds	r3, #7
 8016554:	f023 0307 	bic.w	r3, r3, #7
 8016558:	3308      	adds	r3, #8
 801655a:	9303      	str	r3, [sp, #12]
 801655c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801655e:	4433      	add	r3, r6
 8016560:	9309      	str	r3, [sp, #36]	; 0x24
 8016562:	e768      	b.n	8016436 <_svfiprintf_r+0x4e>
 8016564:	fb0c 3202 	mla	r2, ip, r2, r3
 8016568:	460c      	mov	r4, r1
 801656a:	2001      	movs	r0, #1
 801656c:	e7a6      	b.n	80164bc <_svfiprintf_r+0xd4>
 801656e:	2300      	movs	r3, #0
 8016570:	3401      	adds	r4, #1
 8016572:	9305      	str	r3, [sp, #20]
 8016574:	4619      	mov	r1, r3
 8016576:	f04f 0c0a 	mov.w	ip, #10
 801657a:	4620      	mov	r0, r4
 801657c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016580:	3a30      	subs	r2, #48	; 0x30
 8016582:	2a09      	cmp	r2, #9
 8016584:	d903      	bls.n	801658e <_svfiprintf_r+0x1a6>
 8016586:	2b00      	cmp	r3, #0
 8016588:	d0c6      	beq.n	8016518 <_svfiprintf_r+0x130>
 801658a:	9105      	str	r1, [sp, #20]
 801658c:	e7c4      	b.n	8016518 <_svfiprintf_r+0x130>
 801658e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016592:	4604      	mov	r4, r0
 8016594:	2301      	movs	r3, #1
 8016596:	e7f0      	b.n	801657a <_svfiprintf_r+0x192>
 8016598:	ab03      	add	r3, sp, #12
 801659a:	9300      	str	r3, [sp, #0]
 801659c:	462a      	mov	r2, r5
 801659e:	4b0f      	ldr	r3, [pc, #60]	; (80165dc <_svfiprintf_r+0x1f4>)
 80165a0:	a904      	add	r1, sp, #16
 80165a2:	4638      	mov	r0, r7
 80165a4:	f7fd fdd8 	bl	8014158 <_printf_float>
 80165a8:	1c42      	adds	r2, r0, #1
 80165aa:	4606      	mov	r6, r0
 80165ac:	d1d6      	bne.n	801655c <_svfiprintf_r+0x174>
 80165ae:	89ab      	ldrh	r3, [r5, #12]
 80165b0:	065b      	lsls	r3, r3, #25
 80165b2:	f53f af2d 	bmi.w	8016410 <_svfiprintf_r+0x28>
 80165b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165b8:	b01d      	add	sp, #116	; 0x74
 80165ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165be:	ab03      	add	r3, sp, #12
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	462a      	mov	r2, r5
 80165c4:	4b05      	ldr	r3, [pc, #20]	; (80165dc <_svfiprintf_r+0x1f4>)
 80165c6:	a904      	add	r1, sp, #16
 80165c8:	4638      	mov	r0, r7
 80165ca:	f7fe f869 	bl	80146a0 <_printf_i>
 80165ce:	e7eb      	b.n	80165a8 <_svfiprintf_r+0x1c0>
 80165d0:	08017a8c 	.word	0x08017a8c
 80165d4:	08017a96 	.word	0x08017a96
 80165d8:	08014159 	.word	0x08014159
 80165dc:	08016335 	.word	0x08016335
 80165e0:	08017a92 	.word	0x08017a92

080165e4 <__sflush_r>:
 80165e4:	898a      	ldrh	r2, [r1, #12]
 80165e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165ea:	4605      	mov	r5, r0
 80165ec:	0710      	lsls	r0, r2, #28
 80165ee:	460c      	mov	r4, r1
 80165f0:	d458      	bmi.n	80166a4 <__sflush_r+0xc0>
 80165f2:	684b      	ldr	r3, [r1, #4]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	dc05      	bgt.n	8016604 <__sflush_r+0x20>
 80165f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	dc02      	bgt.n	8016604 <__sflush_r+0x20>
 80165fe:	2000      	movs	r0, #0
 8016600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016606:	2e00      	cmp	r6, #0
 8016608:	d0f9      	beq.n	80165fe <__sflush_r+0x1a>
 801660a:	2300      	movs	r3, #0
 801660c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016610:	682f      	ldr	r7, [r5, #0]
 8016612:	6a21      	ldr	r1, [r4, #32]
 8016614:	602b      	str	r3, [r5, #0]
 8016616:	d032      	beq.n	801667e <__sflush_r+0x9a>
 8016618:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801661a:	89a3      	ldrh	r3, [r4, #12]
 801661c:	075a      	lsls	r2, r3, #29
 801661e:	d505      	bpl.n	801662c <__sflush_r+0x48>
 8016620:	6863      	ldr	r3, [r4, #4]
 8016622:	1ac0      	subs	r0, r0, r3
 8016624:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016626:	b10b      	cbz	r3, 801662c <__sflush_r+0x48>
 8016628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801662a:	1ac0      	subs	r0, r0, r3
 801662c:	2300      	movs	r3, #0
 801662e:	4602      	mov	r2, r0
 8016630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016632:	6a21      	ldr	r1, [r4, #32]
 8016634:	4628      	mov	r0, r5
 8016636:	47b0      	blx	r6
 8016638:	1c43      	adds	r3, r0, #1
 801663a:	89a3      	ldrh	r3, [r4, #12]
 801663c:	d106      	bne.n	801664c <__sflush_r+0x68>
 801663e:	6829      	ldr	r1, [r5, #0]
 8016640:	291d      	cmp	r1, #29
 8016642:	d82b      	bhi.n	801669c <__sflush_r+0xb8>
 8016644:	4a29      	ldr	r2, [pc, #164]	; (80166ec <__sflush_r+0x108>)
 8016646:	410a      	asrs	r2, r1
 8016648:	07d6      	lsls	r6, r2, #31
 801664a:	d427      	bmi.n	801669c <__sflush_r+0xb8>
 801664c:	2200      	movs	r2, #0
 801664e:	6062      	str	r2, [r4, #4]
 8016650:	04d9      	lsls	r1, r3, #19
 8016652:	6922      	ldr	r2, [r4, #16]
 8016654:	6022      	str	r2, [r4, #0]
 8016656:	d504      	bpl.n	8016662 <__sflush_r+0x7e>
 8016658:	1c42      	adds	r2, r0, #1
 801665a:	d101      	bne.n	8016660 <__sflush_r+0x7c>
 801665c:	682b      	ldr	r3, [r5, #0]
 801665e:	b903      	cbnz	r3, 8016662 <__sflush_r+0x7e>
 8016660:	6560      	str	r0, [r4, #84]	; 0x54
 8016662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016664:	602f      	str	r7, [r5, #0]
 8016666:	2900      	cmp	r1, #0
 8016668:	d0c9      	beq.n	80165fe <__sflush_r+0x1a>
 801666a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801666e:	4299      	cmp	r1, r3
 8016670:	d002      	beq.n	8016678 <__sflush_r+0x94>
 8016672:	4628      	mov	r0, r5
 8016674:	f7ff f9e2 	bl	8015a3c <_free_r>
 8016678:	2000      	movs	r0, #0
 801667a:	6360      	str	r0, [r4, #52]	; 0x34
 801667c:	e7c0      	b.n	8016600 <__sflush_r+0x1c>
 801667e:	2301      	movs	r3, #1
 8016680:	4628      	mov	r0, r5
 8016682:	47b0      	blx	r6
 8016684:	1c41      	adds	r1, r0, #1
 8016686:	d1c8      	bne.n	801661a <__sflush_r+0x36>
 8016688:	682b      	ldr	r3, [r5, #0]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d0c5      	beq.n	801661a <__sflush_r+0x36>
 801668e:	2b1d      	cmp	r3, #29
 8016690:	d001      	beq.n	8016696 <__sflush_r+0xb2>
 8016692:	2b16      	cmp	r3, #22
 8016694:	d101      	bne.n	801669a <__sflush_r+0xb6>
 8016696:	602f      	str	r7, [r5, #0]
 8016698:	e7b1      	b.n	80165fe <__sflush_r+0x1a>
 801669a:	89a3      	ldrh	r3, [r4, #12]
 801669c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166a0:	81a3      	strh	r3, [r4, #12]
 80166a2:	e7ad      	b.n	8016600 <__sflush_r+0x1c>
 80166a4:	690f      	ldr	r7, [r1, #16]
 80166a6:	2f00      	cmp	r7, #0
 80166a8:	d0a9      	beq.n	80165fe <__sflush_r+0x1a>
 80166aa:	0793      	lsls	r3, r2, #30
 80166ac:	680e      	ldr	r6, [r1, #0]
 80166ae:	bf08      	it	eq
 80166b0:	694b      	ldreq	r3, [r1, #20]
 80166b2:	600f      	str	r7, [r1, #0]
 80166b4:	bf18      	it	ne
 80166b6:	2300      	movne	r3, #0
 80166b8:	eba6 0807 	sub.w	r8, r6, r7
 80166bc:	608b      	str	r3, [r1, #8]
 80166be:	f1b8 0f00 	cmp.w	r8, #0
 80166c2:	dd9c      	ble.n	80165fe <__sflush_r+0x1a>
 80166c4:	6a21      	ldr	r1, [r4, #32]
 80166c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80166c8:	4643      	mov	r3, r8
 80166ca:	463a      	mov	r2, r7
 80166cc:	4628      	mov	r0, r5
 80166ce:	47b0      	blx	r6
 80166d0:	2800      	cmp	r0, #0
 80166d2:	dc06      	bgt.n	80166e2 <__sflush_r+0xfe>
 80166d4:	89a3      	ldrh	r3, [r4, #12]
 80166d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166da:	81a3      	strh	r3, [r4, #12]
 80166dc:	f04f 30ff 	mov.w	r0, #4294967295
 80166e0:	e78e      	b.n	8016600 <__sflush_r+0x1c>
 80166e2:	4407      	add	r7, r0
 80166e4:	eba8 0800 	sub.w	r8, r8, r0
 80166e8:	e7e9      	b.n	80166be <__sflush_r+0xda>
 80166ea:	bf00      	nop
 80166ec:	dfbffffe 	.word	0xdfbffffe

080166f0 <_fflush_r>:
 80166f0:	b538      	push	{r3, r4, r5, lr}
 80166f2:	690b      	ldr	r3, [r1, #16]
 80166f4:	4605      	mov	r5, r0
 80166f6:	460c      	mov	r4, r1
 80166f8:	b913      	cbnz	r3, 8016700 <_fflush_r+0x10>
 80166fa:	2500      	movs	r5, #0
 80166fc:	4628      	mov	r0, r5
 80166fe:	bd38      	pop	{r3, r4, r5, pc}
 8016700:	b118      	cbz	r0, 801670a <_fflush_r+0x1a>
 8016702:	6a03      	ldr	r3, [r0, #32]
 8016704:	b90b      	cbnz	r3, 801670a <_fflush_r+0x1a>
 8016706:	f7fe f979 	bl	80149fc <__sinit>
 801670a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d0f3      	beq.n	80166fa <_fflush_r+0xa>
 8016712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016714:	07d0      	lsls	r0, r2, #31
 8016716:	d404      	bmi.n	8016722 <_fflush_r+0x32>
 8016718:	0599      	lsls	r1, r3, #22
 801671a:	d402      	bmi.n	8016722 <_fflush_r+0x32>
 801671c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801671e:	f7fe fb02 	bl	8014d26 <__retarget_lock_acquire_recursive>
 8016722:	4628      	mov	r0, r5
 8016724:	4621      	mov	r1, r4
 8016726:	f7ff ff5d 	bl	80165e4 <__sflush_r>
 801672a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801672c:	07da      	lsls	r2, r3, #31
 801672e:	4605      	mov	r5, r0
 8016730:	d4e4      	bmi.n	80166fc <_fflush_r+0xc>
 8016732:	89a3      	ldrh	r3, [r4, #12]
 8016734:	059b      	lsls	r3, r3, #22
 8016736:	d4e1      	bmi.n	80166fc <_fflush_r+0xc>
 8016738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801673a:	f7fe faf5 	bl	8014d28 <__retarget_lock_release_recursive>
 801673e:	e7dd      	b.n	80166fc <_fflush_r+0xc>

08016740 <_sbrk_r>:
 8016740:	b538      	push	{r3, r4, r5, lr}
 8016742:	4d06      	ldr	r5, [pc, #24]	; (801675c <_sbrk_r+0x1c>)
 8016744:	2300      	movs	r3, #0
 8016746:	4604      	mov	r4, r0
 8016748:	4608      	mov	r0, r1
 801674a:	602b      	str	r3, [r5, #0]
 801674c:	f7ee fcb0 	bl	80050b0 <_sbrk>
 8016750:	1c43      	adds	r3, r0, #1
 8016752:	d102      	bne.n	801675a <_sbrk_r+0x1a>
 8016754:	682b      	ldr	r3, [r5, #0]
 8016756:	b103      	cbz	r3, 801675a <_sbrk_r+0x1a>
 8016758:	6023      	str	r3, [r4, #0]
 801675a:	bd38      	pop	{r3, r4, r5, pc}
 801675c:	20005bf0 	.word	0x20005bf0

08016760 <__assert_func>:
 8016760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016762:	4614      	mov	r4, r2
 8016764:	461a      	mov	r2, r3
 8016766:	4b09      	ldr	r3, [pc, #36]	; (801678c <__assert_func+0x2c>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	4605      	mov	r5, r0
 801676c:	68d8      	ldr	r0, [r3, #12]
 801676e:	b14c      	cbz	r4, 8016784 <__assert_func+0x24>
 8016770:	4b07      	ldr	r3, [pc, #28]	; (8016790 <__assert_func+0x30>)
 8016772:	9100      	str	r1, [sp, #0]
 8016774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016778:	4906      	ldr	r1, [pc, #24]	; (8016794 <__assert_func+0x34>)
 801677a:	462b      	mov	r3, r5
 801677c:	f000 f872 	bl	8016864 <fiprintf>
 8016780:	f000 f882 	bl	8016888 <abort>
 8016784:	4b04      	ldr	r3, [pc, #16]	; (8016798 <__assert_func+0x38>)
 8016786:	461c      	mov	r4, r3
 8016788:	e7f3      	b.n	8016772 <__assert_func+0x12>
 801678a:	bf00      	nop
 801678c:	2000017c 	.word	0x2000017c
 8016790:	08017aa7 	.word	0x08017aa7
 8016794:	08017ab4 	.word	0x08017ab4
 8016798:	08017ae2 	.word	0x08017ae2

0801679c <_calloc_r>:
 801679c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801679e:	fba1 2402 	umull	r2, r4, r1, r2
 80167a2:	b94c      	cbnz	r4, 80167b8 <_calloc_r+0x1c>
 80167a4:	4611      	mov	r1, r2
 80167a6:	9201      	str	r2, [sp, #4]
 80167a8:	f7ff f9bc 	bl	8015b24 <_malloc_r>
 80167ac:	9a01      	ldr	r2, [sp, #4]
 80167ae:	4605      	mov	r5, r0
 80167b0:	b930      	cbnz	r0, 80167c0 <_calloc_r+0x24>
 80167b2:	4628      	mov	r0, r5
 80167b4:	b003      	add	sp, #12
 80167b6:	bd30      	pop	{r4, r5, pc}
 80167b8:	220c      	movs	r2, #12
 80167ba:	6002      	str	r2, [r0, #0]
 80167bc:	2500      	movs	r5, #0
 80167be:	e7f8      	b.n	80167b2 <_calloc_r+0x16>
 80167c0:	4621      	mov	r1, r4
 80167c2:	f7fe f9ce 	bl	8014b62 <memset>
 80167c6:	e7f4      	b.n	80167b2 <_calloc_r+0x16>

080167c8 <__ascii_mbtowc>:
 80167c8:	b082      	sub	sp, #8
 80167ca:	b901      	cbnz	r1, 80167ce <__ascii_mbtowc+0x6>
 80167cc:	a901      	add	r1, sp, #4
 80167ce:	b142      	cbz	r2, 80167e2 <__ascii_mbtowc+0x1a>
 80167d0:	b14b      	cbz	r3, 80167e6 <__ascii_mbtowc+0x1e>
 80167d2:	7813      	ldrb	r3, [r2, #0]
 80167d4:	600b      	str	r3, [r1, #0]
 80167d6:	7812      	ldrb	r2, [r2, #0]
 80167d8:	1e10      	subs	r0, r2, #0
 80167da:	bf18      	it	ne
 80167dc:	2001      	movne	r0, #1
 80167de:	b002      	add	sp, #8
 80167e0:	4770      	bx	lr
 80167e2:	4610      	mov	r0, r2
 80167e4:	e7fb      	b.n	80167de <__ascii_mbtowc+0x16>
 80167e6:	f06f 0001 	mvn.w	r0, #1
 80167ea:	e7f8      	b.n	80167de <__ascii_mbtowc+0x16>

080167ec <_realloc_r>:
 80167ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167f0:	4680      	mov	r8, r0
 80167f2:	4614      	mov	r4, r2
 80167f4:	460e      	mov	r6, r1
 80167f6:	b921      	cbnz	r1, 8016802 <_realloc_r+0x16>
 80167f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167fc:	4611      	mov	r1, r2
 80167fe:	f7ff b991 	b.w	8015b24 <_malloc_r>
 8016802:	b92a      	cbnz	r2, 8016810 <_realloc_r+0x24>
 8016804:	f7ff f91a 	bl	8015a3c <_free_r>
 8016808:	4625      	mov	r5, r4
 801680a:	4628      	mov	r0, r5
 801680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016810:	f000 f841 	bl	8016896 <_malloc_usable_size_r>
 8016814:	4284      	cmp	r4, r0
 8016816:	4607      	mov	r7, r0
 8016818:	d802      	bhi.n	8016820 <_realloc_r+0x34>
 801681a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801681e:	d812      	bhi.n	8016846 <_realloc_r+0x5a>
 8016820:	4621      	mov	r1, r4
 8016822:	4640      	mov	r0, r8
 8016824:	f7ff f97e 	bl	8015b24 <_malloc_r>
 8016828:	4605      	mov	r5, r0
 801682a:	2800      	cmp	r0, #0
 801682c:	d0ed      	beq.n	801680a <_realloc_r+0x1e>
 801682e:	42bc      	cmp	r4, r7
 8016830:	4622      	mov	r2, r4
 8016832:	4631      	mov	r1, r6
 8016834:	bf28      	it	cs
 8016836:	463a      	movcs	r2, r7
 8016838:	f7fe fa77 	bl	8014d2a <memcpy>
 801683c:	4631      	mov	r1, r6
 801683e:	4640      	mov	r0, r8
 8016840:	f7ff f8fc 	bl	8015a3c <_free_r>
 8016844:	e7e1      	b.n	801680a <_realloc_r+0x1e>
 8016846:	4635      	mov	r5, r6
 8016848:	e7df      	b.n	801680a <_realloc_r+0x1e>

0801684a <__ascii_wctomb>:
 801684a:	b149      	cbz	r1, 8016860 <__ascii_wctomb+0x16>
 801684c:	2aff      	cmp	r2, #255	; 0xff
 801684e:	bf85      	ittet	hi
 8016850:	238a      	movhi	r3, #138	; 0x8a
 8016852:	6003      	strhi	r3, [r0, #0]
 8016854:	700a      	strbls	r2, [r1, #0]
 8016856:	f04f 30ff 	movhi.w	r0, #4294967295
 801685a:	bf98      	it	ls
 801685c:	2001      	movls	r0, #1
 801685e:	4770      	bx	lr
 8016860:	4608      	mov	r0, r1
 8016862:	4770      	bx	lr

08016864 <fiprintf>:
 8016864:	b40e      	push	{r1, r2, r3}
 8016866:	b503      	push	{r0, r1, lr}
 8016868:	4601      	mov	r1, r0
 801686a:	ab03      	add	r3, sp, #12
 801686c:	4805      	ldr	r0, [pc, #20]	; (8016884 <fiprintf+0x20>)
 801686e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016872:	6800      	ldr	r0, [r0, #0]
 8016874:	9301      	str	r3, [sp, #4]
 8016876:	f000 f83f 	bl	80168f8 <_vfiprintf_r>
 801687a:	b002      	add	sp, #8
 801687c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016880:	b003      	add	sp, #12
 8016882:	4770      	bx	lr
 8016884:	2000017c 	.word	0x2000017c

08016888 <abort>:
 8016888:	b508      	push	{r3, lr}
 801688a:	2006      	movs	r0, #6
 801688c:	f000 fa0c 	bl	8016ca8 <raise>
 8016890:	2001      	movs	r0, #1
 8016892:	f7ee fb95 	bl	8004fc0 <_exit>

08016896 <_malloc_usable_size_r>:
 8016896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801689a:	1f18      	subs	r0, r3, #4
 801689c:	2b00      	cmp	r3, #0
 801689e:	bfbc      	itt	lt
 80168a0:	580b      	ldrlt	r3, [r1, r0]
 80168a2:	18c0      	addlt	r0, r0, r3
 80168a4:	4770      	bx	lr

080168a6 <__sfputc_r>:
 80168a6:	6893      	ldr	r3, [r2, #8]
 80168a8:	3b01      	subs	r3, #1
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	b410      	push	{r4}
 80168ae:	6093      	str	r3, [r2, #8]
 80168b0:	da08      	bge.n	80168c4 <__sfputc_r+0x1e>
 80168b2:	6994      	ldr	r4, [r2, #24]
 80168b4:	42a3      	cmp	r3, r4
 80168b6:	db01      	blt.n	80168bc <__sfputc_r+0x16>
 80168b8:	290a      	cmp	r1, #10
 80168ba:	d103      	bne.n	80168c4 <__sfputc_r+0x1e>
 80168bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168c0:	f000 b934 	b.w	8016b2c <__swbuf_r>
 80168c4:	6813      	ldr	r3, [r2, #0]
 80168c6:	1c58      	adds	r0, r3, #1
 80168c8:	6010      	str	r0, [r2, #0]
 80168ca:	7019      	strb	r1, [r3, #0]
 80168cc:	4608      	mov	r0, r1
 80168ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168d2:	4770      	bx	lr

080168d4 <__sfputs_r>:
 80168d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168d6:	4606      	mov	r6, r0
 80168d8:	460f      	mov	r7, r1
 80168da:	4614      	mov	r4, r2
 80168dc:	18d5      	adds	r5, r2, r3
 80168de:	42ac      	cmp	r4, r5
 80168e0:	d101      	bne.n	80168e6 <__sfputs_r+0x12>
 80168e2:	2000      	movs	r0, #0
 80168e4:	e007      	b.n	80168f6 <__sfputs_r+0x22>
 80168e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168ea:	463a      	mov	r2, r7
 80168ec:	4630      	mov	r0, r6
 80168ee:	f7ff ffda 	bl	80168a6 <__sfputc_r>
 80168f2:	1c43      	adds	r3, r0, #1
 80168f4:	d1f3      	bne.n	80168de <__sfputs_r+0xa>
 80168f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080168f8 <_vfiprintf_r>:
 80168f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168fc:	460d      	mov	r5, r1
 80168fe:	b09d      	sub	sp, #116	; 0x74
 8016900:	4614      	mov	r4, r2
 8016902:	4698      	mov	r8, r3
 8016904:	4606      	mov	r6, r0
 8016906:	b118      	cbz	r0, 8016910 <_vfiprintf_r+0x18>
 8016908:	6a03      	ldr	r3, [r0, #32]
 801690a:	b90b      	cbnz	r3, 8016910 <_vfiprintf_r+0x18>
 801690c:	f7fe f876 	bl	80149fc <__sinit>
 8016910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016912:	07d9      	lsls	r1, r3, #31
 8016914:	d405      	bmi.n	8016922 <_vfiprintf_r+0x2a>
 8016916:	89ab      	ldrh	r3, [r5, #12]
 8016918:	059a      	lsls	r2, r3, #22
 801691a:	d402      	bmi.n	8016922 <_vfiprintf_r+0x2a>
 801691c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801691e:	f7fe fa02 	bl	8014d26 <__retarget_lock_acquire_recursive>
 8016922:	89ab      	ldrh	r3, [r5, #12]
 8016924:	071b      	lsls	r3, r3, #28
 8016926:	d501      	bpl.n	801692c <_vfiprintf_r+0x34>
 8016928:	692b      	ldr	r3, [r5, #16]
 801692a:	b99b      	cbnz	r3, 8016954 <_vfiprintf_r+0x5c>
 801692c:	4629      	mov	r1, r5
 801692e:	4630      	mov	r0, r6
 8016930:	f000 f93a 	bl	8016ba8 <__swsetup_r>
 8016934:	b170      	cbz	r0, 8016954 <_vfiprintf_r+0x5c>
 8016936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016938:	07dc      	lsls	r4, r3, #31
 801693a:	d504      	bpl.n	8016946 <_vfiprintf_r+0x4e>
 801693c:	f04f 30ff 	mov.w	r0, #4294967295
 8016940:	b01d      	add	sp, #116	; 0x74
 8016942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016946:	89ab      	ldrh	r3, [r5, #12]
 8016948:	0598      	lsls	r0, r3, #22
 801694a:	d4f7      	bmi.n	801693c <_vfiprintf_r+0x44>
 801694c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801694e:	f7fe f9eb 	bl	8014d28 <__retarget_lock_release_recursive>
 8016952:	e7f3      	b.n	801693c <_vfiprintf_r+0x44>
 8016954:	2300      	movs	r3, #0
 8016956:	9309      	str	r3, [sp, #36]	; 0x24
 8016958:	2320      	movs	r3, #32
 801695a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801695e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016962:	2330      	movs	r3, #48	; 0x30
 8016964:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016b18 <_vfiprintf_r+0x220>
 8016968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801696c:	f04f 0901 	mov.w	r9, #1
 8016970:	4623      	mov	r3, r4
 8016972:	469a      	mov	sl, r3
 8016974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016978:	b10a      	cbz	r2, 801697e <_vfiprintf_r+0x86>
 801697a:	2a25      	cmp	r2, #37	; 0x25
 801697c:	d1f9      	bne.n	8016972 <_vfiprintf_r+0x7a>
 801697e:	ebba 0b04 	subs.w	fp, sl, r4
 8016982:	d00b      	beq.n	801699c <_vfiprintf_r+0xa4>
 8016984:	465b      	mov	r3, fp
 8016986:	4622      	mov	r2, r4
 8016988:	4629      	mov	r1, r5
 801698a:	4630      	mov	r0, r6
 801698c:	f7ff ffa2 	bl	80168d4 <__sfputs_r>
 8016990:	3001      	adds	r0, #1
 8016992:	f000 80a9 	beq.w	8016ae8 <_vfiprintf_r+0x1f0>
 8016996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016998:	445a      	add	r2, fp
 801699a:	9209      	str	r2, [sp, #36]	; 0x24
 801699c:	f89a 3000 	ldrb.w	r3, [sl]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	f000 80a1 	beq.w	8016ae8 <_vfiprintf_r+0x1f0>
 80169a6:	2300      	movs	r3, #0
 80169a8:	f04f 32ff 	mov.w	r2, #4294967295
 80169ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169b0:	f10a 0a01 	add.w	sl, sl, #1
 80169b4:	9304      	str	r3, [sp, #16]
 80169b6:	9307      	str	r3, [sp, #28]
 80169b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80169bc:	931a      	str	r3, [sp, #104]	; 0x68
 80169be:	4654      	mov	r4, sl
 80169c0:	2205      	movs	r2, #5
 80169c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169c6:	4854      	ldr	r0, [pc, #336]	; (8016b18 <_vfiprintf_r+0x220>)
 80169c8:	f7e9 fc0a 	bl	80001e0 <memchr>
 80169cc:	9a04      	ldr	r2, [sp, #16]
 80169ce:	b9d8      	cbnz	r0, 8016a08 <_vfiprintf_r+0x110>
 80169d0:	06d1      	lsls	r1, r2, #27
 80169d2:	bf44      	itt	mi
 80169d4:	2320      	movmi	r3, #32
 80169d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80169da:	0713      	lsls	r3, r2, #28
 80169dc:	bf44      	itt	mi
 80169de:	232b      	movmi	r3, #43	; 0x2b
 80169e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80169e4:	f89a 3000 	ldrb.w	r3, [sl]
 80169e8:	2b2a      	cmp	r3, #42	; 0x2a
 80169ea:	d015      	beq.n	8016a18 <_vfiprintf_r+0x120>
 80169ec:	9a07      	ldr	r2, [sp, #28]
 80169ee:	4654      	mov	r4, sl
 80169f0:	2000      	movs	r0, #0
 80169f2:	f04f 0c0a 	mov.w	ip, #10
 80169f6:	4621      	mov	r1, r4
 80169f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169fc:	3b30      	subs	r3, #48	; 0x30
 80169fe:	2b09      	cmp	r3, #9
 8016a00:	d94d      	bls.n	8016a9e <_vfiprintf_r+0x1a6>
 8016a02:	b1b0      	cbz	r0, 8016a32 <_vfiprintf_r+0x13a>
 8016a04:	9207      	str	r2, [sp, #28]
 8016a06:	e014      	b.n	8016a32 <_vfiprintf_r+0x13a>
 8016a08:	eba0 0308 	sub.w	r3, r0, r8
 8016a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8016a10:	4313      	orrs	r3, r2
 8016a12:	9304      	str	r3, [sp, #16]
 8016a14:	46a2      	mov	sl, r4
 8016a16:	e7d2      	b.n	80169be <_vfiprintf_r+0xc6>
 8016a18:	9b03      	ldr	r3, [sp, #12]
 8016a1a:	1d19      	adds	r1, r3, #4
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	9103      	str	r1, [sp, #12]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	bfbb      	ittet	lt
 8016a24:	425b      	neglt	r3, r3
 8016a26:	f042 0202 	orrlt.w	r2, r2, #2
 8016a2a:	9307      	strge	r3, [sp, #28]
 8016a2c:	9307      	strlt	r3, [sp, #28]
 8016a2e:	bfb8      	it	lt
 8016a30:	9204      	strlt	r2, [sp, #16]
 8016a32:	7823      	ldrb	r3, [r4, #0]
 8016a34:	2b2e      	cmp	r3, #46	; 0x2e
 8016a36:	d10c      	bne.n	8016a52 <_vfiprintf_r+0x15a>
 8016a38:	7863      	ldrb	r3, [r4, #1]
 8016a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8016a3c:	d134      	bne.n	8016aa8 <_vfiprintf_r+0x1b0>
 8016a3e:	9b03      	ldr	r3, [sp, #12]
 8016a40:	1d1a      	adds	r2, r3, #4
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	9203      	str	r2, [sp, #12]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	bfb8      	it	lt
 8016a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a4e:	3402      	adds	r4, #2
 8016a50:	9305      	str	r3, [sp, #20]
 8016a52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016b28 <_vfiprintf_r+0x230>
 8016a56:	7821      	ldrb	r1, [r4, #0]
 8016a58:	2203      	movs	r2, #3
 8016a5a:	4650      	mov	r0, sl
 8016a5c:	f7e9 fbc0 	bl	80001e0 <memchr>
 8016a60:	b138      	cbz	r0, 8016a72 <_vfiprintf_r+0x17a>
 8016a62:	9b04      	ldr	r3, [sp, #16]
 8016a64:	eba0 000a 	sub.w	r0, r0, sl
 8016a68:	2240      	movs	r2, #64	; 0x40
 8016a6a:	4082      	lsls	r2, r0
 8016a6c:	4313      	orrs	r3, r2
 8016a6e:	3401      	adds	r4, #1
 8016a70:	9304      	str	r3, [sp, #16]
 8016a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a76:	4829      	ldr	r0, [pc, #164]	; (8016b1c <_vfiprintf_r+0x224>)
 8016a78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a7c:	2206      	movs	r2, #6
 8016a7e:	f7e9 fbaf 	bl	80001e0 <memchr>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	d03f      	beq.n	8016b06 <_vfiprintf_r+0x20e>
 8016a86:	4b26      	ldr	r3, [pc, #152]	; (8016b20 <_vfiprintf_r+0x228>)
 8016a88:	bb1b      	cbnz	r3, 8016ad2 <_vfiprintf_r+0x1da>
 8016a8a:	9b03      	ldr	r3, [sp, #12]
 8016a8c:	3307      	adds	r3, #7
 8016a8e:	f023 0307 	bic.w	r3, r3, #7
 8016a92:	3308      	adds	r3, #8
 8016a94:	9303      	str	r3, [sp, #12]
 8016a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a98:	443b      	add	r3, r7
 8016a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8016a9c:	e768      	b.n	8016970 <_vfiprintf_r+0x78>
 8016a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016aa2:	460c      	mov	r4, r1
 8016aa4:	2001      	movs	r0, #1
 8016aa6:	e7a6      	b.n	80169f6 <_vfiprintf_r+0xfe>
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	3401      	adds	r4, #1
 8016aac:	9305      	str	r3, [sp, #20]
 8016aae:	4619      	mov	r1, r3
 8016ab0:	f04f 0c0a 	mov.w	ip, #10
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016aba:	3a30      	subs	r2, #48	; 0x30
 8016abc:	2a09      	cmp	r2, #9
 8016abe:	d903      	bls.n	8016ac8 <_vfiprintf_r+0x1d0>
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d0c6      	beq.n	8016a52 <_vfiprintf_r+0x15a>
 8016ac4:	9105      	str	r1, [sp, #20]
 8016ac6:	e7c4      	b.n	8016a52 <_vfiprintf_r+0x15a>
 8016ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8016acc:	4604      	mov	r4, r0
 8016ace:	2301      	movs	r3, #1
 8016ad0:	e7f0      	b.n	8016ab4 <_vfiprintf_r+0x1bc>
 8016ad2:	ab03      	add	r3, sp, #12
 8016ad4:	9300      	str	r3, [sp, #0]
 8016ad6:	462a      	mov	r2, r5
 8016ad8:	4b12      	ldr	r3, [pc, #72]	; (8016b24 <_vfiprintf_r+0x22c>)
 8016ada:	a904      	add	r1, sp, #16
 8016adc:	4630      	mov	r0, r6
 8016ade:	f7fd fb3b 	bl	8014158 <_printf_float>
 8016ae2:	4607      	mov	r7, r0
 8016ae4:	1c78      	adds	r0, r7, #1
 8016ae6:	d1d6      	bne.n	8016a96 <_vfiprintf_r+0x19e>
 8016ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016aea:	07d9      	lsls	r1, r3, #31
 8016aec:	d405      	bmi.n	8016afa <_vfiprintf_r+0x202>
 8016aee:	89ab      	ldrh	r3, [r5, #12]
 8016af0:	059a      	lsls	r2, r3, #22
 8016af2:	d402      	bmi.n	8016afa <_vfiprintf_r+0x202>
 8016af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016af6:	f7fe f917 	bl	8014d28 <__retarget_lock_release_recursive>
 8016afa:	89ab      	ldrh	r3, [r5, #12]
 8016afc:	065b      	lsls	r3, r3, #25
 8016afe:	f53f af1d 	bmi.w	801693c <_vfiprintf_r+0x44>
 8016b02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b04:	e71c      	b.n	8016940 <_vfiprintf_r+0x48>
 8016b06:	ab03      	add	r3, sp, #12
 8016b08:	9300      	str	r3, [sp, #0]
 8016b0a:	462a      	mov	r2, r5
 8016b0c:	4b05      	ldr	r3, [pc, #20]	; (8016b24 <_vfiprintf_r+0x22c>)
 8016b0e:	a904      	add	r1, sp, #16
 8016b10:	4630      	mov	r0, r6
 8016b12:	f7fd fdc5 	bl	80146a0 <_printf_i>
 8016b16:	e7e4      	b.n	8016ae2 <_vfiprintf_r+0x1ea>
 8016b18:	08017a8c 	.word	0x08017a8c
 8016b1c:	08017a96 	.word	0x08017a96
 8016b20:	08014159 	.word	0x08014159
 8016b24:	080168d5 	.word	0x080168d5
 8016b28:	08017a92 	.word	0x08017a92

08016b2c <__swbuf_r>:
 8016b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b2e:	460e      	mov	r6, r1
 8016b30:	4614      	mov	r4, r2
 8016b32:	4605      	mov	r5, r0
 8016b34:	b118      	cbz	r0, 8016b3e <__swbuf_r+0x12>
 8016b36:	6a03      	ldr	r3, [r0, #32]
 8016b38:	b90b      	cbnz	r3, 8016b3e <__swbuf_r+0x12>
 8016b3a:	f7fd ff5f 	bl	80149fc <__sinit>
 8016b3e:	69a3      	ldr	r3, [r4, #24]
 8016b40:	60a3      	str	r3, [r4, #8]
 8016b42:	89a3      	ldrh	r3, [r4, #12]
 8016b44:	071a      	lsls	r2, r3, #28
 8016b46:	d525      	bpl.n	8016b94 <__swbuf_r+0x68>
 8016b48:	6923      	ldr	r3, [r4, #16]
 8016b4a:	b31b      	cbz	r3, 8016b94 <__swbuf_r+0x68>
 8016b4c:	6823      	ldr	r3, [r4, #0]
 8016b4e:	6922      	ldr	r2, [r4, #16]
 8016b50:	1a98      	subs	r0, r3, r2
 8016b52:	6963      	ldr	r3, [r4, #20]
 8016b54:	b2f6      	uxtb	r6, r6
 8016b56:	4283      	cmp	r3, r0
 8016b58:	4637      	mov	r7, r6
 8016b5a:	dc04      	bgt.n	8016b66 <__swbuf_r+0x3a>
 8016b5c:	4621      	mov	r1, r4
 8016b5e:	4628      	mov	r0, r5
 8016b60:	f7ff fdc6 	bl	80166f0 <_fflush_r>
 8016b64:	b9e0      	cbnz	r0, 8016ba0 <__swbuf_r+0x74>
 8016b66:	68a3      	ldr	r3, [r4, #8]
 8016b68:	3b01      	subs	r3, #1
 8016b6a:	60a3      	str	r3, [r4, #8]
 8016b6c:	6823      	ldr	r3, [r4, #0]
 8016b6e:	1c5a      	adds	r2, r3, #1
 8016b70:	6022      	str	r2, [r4, #0]
 8016b72:	701e      	strb	r6, [r3, #0]
 8016b74:	6962      	ldr	r2, [r4, #20]
 8016b76:	1c43      	adds	r3, r0, #1
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d004      	beq.n	8016b86 <__swbuf_r+0x5a>
 8016b7c:	89a3      	ldrh	r3, [r4, #12]
 8016b7e:	07db      	lsls	r3, r3, #31
 8016b80:	d506      	bpl.n	8016b90 <__swbuf_r+0x64>
 8016b82:	2e0a      	cmp	r6, #10
 8016b84:	d104      	bne.n	8016b90 <__swbuf_r+0x64>
 8016b86:	4621      	mov	r1, r4
 8016b88:	4628      	mov	r0, r5
 8016b8a:	f7ff fdb1 	bl	80166f0 <_fflush_r>
 8016b8e:	b938      	cbnz	r0, 8016ba0 <__swbuf_r+0x74>
 8016b90:	4638      	mov	r0, r7
 8016b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b94:	4621      	mov	r1, r4
 8016b96:	4628      	mov	r0, r5
 8016b98:	f000 f806 	bl	8016ba8 <__swsetup_r>
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	d0d5      	beq.n	8016b4c <__swbuf_r+0x20>
 8016ba0:	f04f 37ff 	mov.w	r7, #4294967295
 8016ba4:	e7f4      	b.n	8016b90 <__swbuf_r+0x64>
	...

08016ba8 <__swsetup_r>:
 8016ba8:	b538      	push	{r3, r4, r5, lr}
 8016baa:	4b2a      	ldr	r3, [pc, #168]	; (8016c54 <__swsetup_r+0xac>)
 8016bac:	4605      	mov	r5, r0
 8016bae:	6818      	ldr	r0, [r3, #0]
 8016bb0:	460c      	mov	r4, r1
 8016bb2:	b118      	cbz	r0, 8016bbc <__swsetup_r+0x14>
 8016bb4:	6a03      	ldr	r3, [r0, #32]
 8016bb6:	b90b      	cbnz	r3, 8016bbc <__swsetup_r+0x14>
 8016bb8:	f7fd ff20 	bl	80149fc <__sinit>
 8016bbc:	89a3      	ldrh	r3, [r4, #12]
 8016bbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016bc2:	0718      	lsls	r0, r3, #28
 8016bc4:	d422      	bmi.n	8016c0c <__swsetup_r+0x64>
 8016bc6:	06d9      	lsls	r1, r3, #27
 8016bc8:	d407      	bmi.n	8016bda <__swsetup_r+0x32>
 8016bca:	2309      	movs	r3, #9
 8016bcc:	602b      	str	r3, [r5, #0]
 8016bce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016bd2:	81a3      	strh	r3, [r4, #12]
 8016bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8016bd8:	e034      	b.n	8016c44 <__swsetup_r+0x9c>
 8016bda:	0758      	lsls	r0, r3, #29
 8016bdc:	d512      	bpl.n	8016c04 <__swsetup_r+0x5c>
 8016bde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016be0:	b141      	cbz	r1, 8016bf4 <__swsetup_r+0x4c>
 8016be2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016be6:	4299      	cmp	r1, r3
 8016be8:	d002      	beq.n	8016bf0 <__swsetup_r+0x48>
 8016bea:	4628      	mov	r0, r5
 8016bec:	f7fe ff26 	bl	8015a3c <_free_r>
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	6363      	str	r3, [r4, #52]	; 0x34
 8016bf4:	89a3      	ldrh	r3, [r4, #12]
 8016bf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016bfa:	81a3      	strh	r3, [r4, #12]
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	6063      	str	r3, [r4, #4]
 8016c00:	6923      	ldr	r3, [r4, #16]
 8016c02:	6023      	str	r3, [r4, #0]
 8016c04:	89a3      	ldrh	r3, [r4, #12]
 8016c06:	f043 0308 	orr.w	r3, r3, #8
 8016c0a:	81a3      	strh	r3, [r4, #12]
 8016c0c:	6923      	ldr	r3, [r4, #16]
 8016c0e:	b94b      	cbnz	r3, 8016c24 <__swsetup_r+0x7c>
 8016c10:	89a3      	ldrh	r3, [r4, #12]
 8016c12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c1a:	d003      	beq.n	8016c24 <__swsetup_r+0x7c>
 8016c1c:	4621      	mov	r1, r4
 8016c1e:	4628      	mov	r0, r5
 8016c20:	f000 f884 	bl	8016d2c <__smakebuf_r>
 8016c24:	89a0      	ldrh	r0, [r4, #12]
 8016c26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c2a:	f010 0301 	ands.w	r3, r0, #1
 8016c2e:	d00a      	beq.n	8016c46 <__swsetup_r+0x9e>
 8016c30:	2300      	movs	r3, #0
 8016c32:	60a3      	str	r3, [r4, #8]
 8016c34:	6963      	ldr	r3, [r4, #20]
 8016c36:	425b      	negs	r3, r3
 8016c38:	61a3      	str	r3, [r4, #24]
 8016c3a:	6923      	ldr	r3, [r4, #16]
 8016c3c:	b943      	cbnz	r3, 8016c50 <__swsetup_r+0xa8>
 8016c3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016c42:	d1c4      	bne.n	8016bce <__swsetup_r+0x26>
 8016c44:	bd38      	pop	{r3, r4, r5, pc}
 8016c46:	0781      	lsls	r1, r0, #30
 8016c48:	bf58      	it	pl
 8016c4a:	6963      	ldrpl	r3, [r4, #20]
 8016c4c:	60a3      	str	r3, [r4, #8]
 8016c4e:	e7f4      	b.n	8016c3a <__swsetup_r+0x92>
 8016c50:	2000      	movs	r0, #0
 8016c52:	e7f7      	b.n	8016c44 <__swsetup_r+0x9c>
 8016c54:	2000017c 	.word	0x2000017c

08016c58 <_raise_r>:
 8016c58:	291f      	cmp	r1, #31
 8016c5a:	b538      	push	{r3, r4, r5, lr}
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	460d      	mov	r5, r1
 8016c60:	d904      	bls.n	8016c6c <_raise_r+0x14>
 8016c62:	2316      	movs	r3, #22
 8016c64:	6003      	str	r3, [r0, #0]
 8016c66:	f04f 30ff 	mov.w	r0, #4294967295
 8016c6a:	bd38      	pop	{r3, r4, r5, pc}
 8016c6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016c6e:	b112      	cbz	r2, 8016c76 <_raise_r+0x1e>
 8016c70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016c74:	b94b      	cbnz	r3, 8016c8a <_raise_r+0x32>
 8016c76:	4620      	mov	r0, r4
 8016c78:	f000 f830 	bl	8016cdc <_getpid_r>
 8016c7c:	462a      	mov	r2, r5
 8016c7e:	4601      	mov	r1, r0
 8016c80:	4620      	mov	r0, r4
 8016c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c86:	f000 b817 	b.w	8016cb8 <_kill_r>
 8016c8a:	2b01      	cmp	r3, #1
 8016c8c:	d00a      	beq.n	8016ca4 <_raise_r+0x4c>
 8016c8e:	1c59      	adds	r1, r3, #1
 8016c90:	d103      	bne.n	8016c9a <_raise_r+0x42>
 8016c92:	2316      	movs	r3, #22
 8016c94:	6003      	str	r3, [r0, #0]
 8016c96:	2001      	movs	r0, #1
 8016c98:	e7e7      	b.n	8016c6a <_raise_r+0x12>
 8016c9a:	2400      	movs	r4, #0
 8016c9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	4798      	blx	r3
 8016ca4:	2000      	movs	r0, #0
 8016ca6:	e7e0      	b.n	8016c6a <_raise_r+0x12>

08016ca8 <raise>:
 8016ca8:	4b02      	ldr	r3, [pc, #8]	; (8016cb4 <raise+0xc>)
 8016caa:	4601      	mov	r1, r0
 8016cac:	6818      	ldr	r0, [r3, #0]
 8016cae:	f7ff bfd3 	b.w	8016c58 <_raise_r>
 8016cb2:	bf00      	nop
 8016cb4:	2000017c 	.word	0x2000017c

08016cb8 <_kill_r>:
 8016cb8:	b538      	push	{r3, r4, r5, lr}
 8016cba:	4d07      	ldr	r5, [pc, #28]	; (8016cd8 <_kill_r+0x20>)
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	4608      	mov	r0, r1
 8016cc2:	4611      	mov	r1, r2
 8016cc4:	602b      	str	r3, [r5, #0]
 8016cc6:	f7ee f96b 	bl	8004fa0 <_kill>
 8016cca:	1c43      	adds	r3, r0, #1
 8016ccc:	d102      	bne.n	8016cd4 <_kill_r+0x1c>
 8016cce:	682b      	ldr	r3, [r5, #0]
 8016cd0:	b103      	cbz	r3, 8016cd4 <_kill_r+0x1c>
 8016cd2:	6023      	str	r3, [r4, #0]
 8016cd4:	bd38      	pop	{r3, r4, r5, pc}
 8016cd6:	bf00      	nop
 8016cd8:	20005bf0 	.word	0x20005bf0

08016cdc <_getpid_r>:
 8016cdc:	f7ee b958 	b.w	8004f90 <_getpid>

08016ce0 <__swhatbuf_r>:
 8016ce0:	b570      	push	{r4, r5, r6, lr}
 8016ce2:	460c      	mov	r4, r1
 8016ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ce8:	2900      	cmp	r1, #0
 8016cea:	b096      	sub	sp, #88	; 0x58
 8016cec:	4615      	mov	r5, r2
 8016cee:	461e      	mov	r6, r3
 8016cf0:	da0d      	bge.n	8016d0e <__swhatbuf_r+0x2e>
 8016cf2:	89a3      	ldrh	r3, [r4, #12]
 8016cf4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016cf8:	f04f 0100 	mov.w	r1, #0
 8016cfc:	bf0c      	ite	eq
 8016cfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016d02:	2340      	movne	r3, #64	; 0x40
 8016d04:	2000      	movs	r0, #0
 8016d06:	6031      	str	r1, [r6, #0]
 8016d08:	602b      	str	r3, [r5, #0]
 8016d0a:	b016      	add	sp, #88	; 0x58
 8016d0c:	bd70      	pop	{r4, r5, r6, pc}
 8016d0e:	466a      	mov	r2, sp
 8016d10:	f000 f848 	bl	8016da4 <_fstat_r>
 8016d14:	2800      	cmp	r0, #0
 8016d16:	dbec      	blt.n	8016cf2 <__swhatbuf_r+0x12>
 8016d18:	9901      	ldr	r1, [sp, #4]
 8016d1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016d1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016d22:	4259      	negs	r1, r3
 8016d24:	4159      	adcs	r1, r3
 8016d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d2a:	e7eb      	b.n	8016d04 <__swhatbuf_r+0x24>

08016d2c <__smakebuf_r>:
 8016d2c:	898b      	ldrh	r3, [r1, #12]
 8016d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d30:	079d      	lsls	r5, r3, #30
 8016d32:	4606      	mov	r6, r0
 8016d34:	460c      	mov	r4, r1
 8016d36:	d507      	bpl.n	8016d48 <__smakebuf_r+0x1c>
 8016d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016d3c:	6023      	str	r3, [r4, #0]
 8016d3e:	6123      	str	r3, [r4, #16]
 8016d40:	2301      	movs	r3, #1
 8016d42:	6163      	str	r3, [r4, #20]
 8016d44:	b002      	add	sp, #8
 8016d46:	bd70      	pop	{r4, r5, r6, pc}
 8016d48:	ab01      	add	r3, sp, #4
 8016d4a:	466a      	mov	r2, sp
 8016d4c:	f7ff ffc8 	bl	8016ce0 <__swhatbuf_r>
 8016d50:	9900      	ldr	r1, [sp, #0]
 8016d52:	4605      	mov	r5, r0
 8016d54:	4630      	mov	r0, r6
 8016d56:	f7fe fee5 	bl	8015b24 <_malloc_r>
 8016d5a:	b948      	cbnz	r0, 8016d70 <__smakebuf_r+0x44>
 8016d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d60:	059a      	lsls	r2, r3, #22
 8016d62:	d4ef      	bmi.n	8016d44 <__smakebuf_r+0x18>
 8016d64:	f023 0303 	bic.w	r3, r3, #3
 8016d68:	f043 0302 	orr.w	r3, r3, #2
 8016d6c:	81a3      	strh	r3, [r4, #12]
 8016d6e:	e7e3      	b.n	8016d38 <__smakebuf_r+0xc>
 8016d70:	89a3      	ldrh	r3, [r4, #12]
 8016d72:	6020      	str	r0, [r4, #0]
 8016d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d78:	81a3      	strh	r3, [r4, #12]
 8016d7a:	9b00      	ldr	r3, [sp, #0]
 8016d7c:	6163      	str	r3, [r4, #20]
 8016d7e:	9b01      	ldr	r3, [sp, #4]
 8016d80:	6120      	str	r0, [r4, #16]
 8016d82:	b15b      	cbz	r3, 8016d9c <__smakebuf_r+0x70>
 8016d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d88:	4630      	mov	r0, r6
 8016d8a:	f000 f81d 	bl	8016dc8 <_isatty_r>
 8016d8e:	b128      	cbz	r0, 8016d9c <__smakebuf_r+0x70>
 8016d90:	89a3      	ldrh	r3, [r4, #12]
 8016d92:	f023 0303 	bic.w	r3, r3, #3
 8016d96:	f043 0301 	orr.w	r3, r3, #1
 8016d9a:	81a3      	strh	r3, [r4, #12]
 8016d9c:	89a3      	ldrh	r3, [r4, #12]
 8016d9e:	431d      	orrs	r5, r3
 8016da0:	81a5      	strh	r5, [r4, #12]
 8016da2:	e7cf      	b.n	8016d44 <__smakebuf_r+0x18>

08016da4 <_fstat_r>:
 8016da4:	b538      	push	{r3, r4, r5, lr}
 8016da6:	4d07      	ldr	r5, [pc, #28]	; (8016dc4 <_fstat_r+0x20>)
 8016da8:	2300      	movs	r3, #0
 8016daa:	4604      	mov	r4, r0
 8016dac:	4608      	mov	r0, r1
 8016dae:	4611      	mov	r1, r2
 8016db0:	602b      	str	r3, [r5, #0]
 8016db2:	f7ee f954 	bl	800505e <_fstat>
 8016db6:	1c43      	adds	r3, r0, #1
 8016db8:	d102      	bne.n	8016dc0 <_fstat_r+0x1c>
 8016dba:	682b      	ldr	r3, [r5, #0]
 8016dbc:	b103      	cbz	r3, 8016dc0 <_fstat_r+0x1c>
 8016dbe:	6023      	str	r3, [r4, #0]
 8016dc0:	bd38      	pop	{r3, r4, r5, pc}
 8016dc2:	bf00      	nop
 8016dc4:	20005bf0 	.word	0x20005bf0

08016dc8 <_isatty_r>:
 8016dc8:	b538      	push	{r3, r4, r5, lr}
 8016dca:	4d06      	ldr	r5, [pc, #24]	; (8016de4 <_isatty_r+0x1c>)
 8016dcc:	2300      	movs	r3, #0
 8016dce:	4604      	mov	r4, r0
 8016dd0:	4608      	mov	r0, r1
 8016dd2:	602b      	str	r3, [r5, #0]
 8016dd4:	f7ee f953 	bl	800507e <_isatty>
 8016dd8:	1c43      	adds	r3, r0, #1
 8016dda:	d102      	bne.n	8016de2 <_isatty_r+0x1a>
 8016ddc:	682b      	ldr	r3, [r5, #0]
 8016dde:	b103      	cbz	r3, 8016de2 <_isatty_r+0x1a>
 8016de0:	6023      	str	r3, [r4, #0]
 8016de2:	bd38      	pop	{r3, r4, r5, pc}
 8016de4:	20005bf0 	.word	0x20005bf0

08016de8 <round>:
 8016de8:	ec53 2b10 	vmov	r2, r3, d0
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8016df2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8016df6:	2813      	cmp	r0, #19
 8016df8:	ee10 5a10 	vmov	r5, s0
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	dc18      	bgt.n	8016e32 <round+0x4a>
 8016e00:	2800      	cmp	r0, #0
 8016e02:	da09      	bge.n	8016e18 <round+0x30>
 8016e04:	3001      	adds	r0, #1
 8016e06:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8016e0a:	d103      	bne.n	8016e14 <round+0x2c>
 8016e0c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8016e10:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8016e14:	2300      	movs	r3, #0
 8016e16:	e02a      	b.n	8016e6e <round+0x86>
 8016e18:	4c16      	ldr	r4, [pc, #88]	; (8016e74 <round+0x8c>)
 8016e1a:	4104      	asrs	r4, r0
 8016e1c:	ea03 0604 	and.w	r6, r3, r4
 8016e20:	4316      	orrs	r6, r2
 8016e22:	d011      	beq.n	8016e48 <round+0x60>
 8016e24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016e28:	4103      	asrs	r3, r0
 8016e2a:	440b      	add	r3, r1
 8016e2c:	ea23 0104 	bic.w	r1, r3, r4
 8016e30:	e7f0      	b.n	8016e14 <round+0x2c>
 8016e32:	2833      	cmp	r0, #51	; 0x33
 8016e34:	dd0b      	ble.n	8016e4e <round+0x66>
 8016e36:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016e3a:	d105      	bne.n	8016e48 <round+0x60>
 8016e3c:	ee10 0a10 	vmov	r0, s0
 8016e40:	f7e9 fa2c 	bl	800029c <__adddf3>
 8016e44:	4602      	mov	r2, r0
 8016e46:	460b      	mov	r3, r1
 8016e48:	ec43 2b10 	vmov	d0, r2, r3
 8016e4c:	bd70      	pop	{r4, r5, r6, pc}
 8016e4e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8016e52:	f04f 34ff 	mov.w	r4, #4294967295
 8016e56:	40f4      	lsrs	r4, r6
 8016e58:	4214      	tst	r4, r2
 8016e5a:	d0f5      	beq.n	8016e48 <round+0x60>
 8016e5c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8016e60:	2301      	movs	r3, #1
 8016e62:	4083      	lsls	r3, r0
 8016e64:	195b      	adds	r3, r3, r5
 8016e66:	bf28      	it	cs
 8016e68:	3101      	addcs	r1, #1
 8016e6a:	ea23 0304 	bic.w	r3, r3, r4
 8016e6e:	461a      	mov	r2, r3
 8016e70:	460b      	mov	r3, r1
 8016e72:	e7e9      	b.n	8016e48 <round+0x60>
 8016e74:	000fffff 	.word	0x000fffff

08016e78 <_init>:
 8016e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e7a:	bf00      	nop
 8016e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e7e:	bc08      	pop	{r3}
 8016e80:	469e      	mov	lr, r3
 8016e82:	4770      	bx	lr

08016e84 <_fini>:
 8016e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e86:	bf00      	nop
 8016e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e8a:	bc08      	pop	{r3}
 8016e8c:	469e      	mov	lr, r3
 8016e8e:	4770      	bx	lr
