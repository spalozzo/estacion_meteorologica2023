
UTN_USBHID02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006750  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080068e4  080068e4  000168e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800695c  0800695c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006964  08006964  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800696c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  20000164  08006ad0  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  08006ad0  00020b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc9c  00000000  00000000  000201d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cde  00000000  00000000  0002fe73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00032b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c2  00000000  00000000  00033848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f26  00000000  00000000  0003420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011820  00000000  00000000  0004c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000883bf  00000000  00000000  0005d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000343c  00000000  00000000  000e5d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000164 	.word	0x20000164
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080068cc 	.word	0x080068cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000168 	.word	0x20000168
 80001d0:	080068cc 	.word	0x080068cc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9f2 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f808 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f89a 	bl	8000614 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f86e 	bl	80005c0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f005 fd4e 	bl	8005f84 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x18>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 f9ba 	bl	8006874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000538:	4a20      	ldr	r2, [pc, #128]	; (80005bc <SystemClock_Config+0xd0>)
 800053a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000550:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000560:	2304      	movs	r3, #4
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000564:	2348      	movs	r3, #72	; 0x48
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800056c:	2303      	movs	r3, #3
 800056e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fe51 	bl	800221c <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000580:	f000 f8b6 	bl	80006f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2302      	movs	r3, #2
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2102      	movs	r1, #2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 f8b3 	bl	800270c <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ac:	f000 f8a0 	bl	80006f0 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <MX_USART2_UART_Init+0x50>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f8:	f002 faa8 	bl	8002b4c <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000602:	f000 f875 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000180 	.word	0x20000180
 8000610:	40004400 	.word	0x40004400

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a2c      	ldr	r2, [pc, #176]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <MX_GPIO_Init+0xd4>)
 80006a0:	f000 fc38 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_GPIO_Init+0xd8>)
 80006bc:	f000 faa6 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c0:	2320      	movs	r3, #32
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_GPIO_Init+0xd4>)
 80006d8:	f000 fa98 	bl	8000c0c <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020800 	.word	0x40020800

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <HAL_MspInit+0x4c>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <HAL_MspInit+0x4c>)
 800070c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x4c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x4c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800073a:	2007      	movs	r0, #7
 800073c:	f000 fa24 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <HAL_UART_MspInit+0x84>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12b      	bne.n	80007c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_UART_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a6:	230c      	movs	r3, #12
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b6:	2307      	movs	r3, #7
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 80007c2:	f000 fa23 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020000 	.word	0x40020000

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f89a 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <OTG_FS_IRQHandler+0x10>)
 8000836:	f000 fcd6 	bl	80011e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200006dc 	.word	0x200006dc

08000844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086e:	490e      	ldr	r1, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000884:	4c0b      	ldr	r4, [pc, #44]	; (80008b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000892:	f7ff ffd7 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000896:	f005 fff5 	bl	8006884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fe19 	bl	80004d0 <main>
  bx  lr    
 800089e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80008ac:	0800696c 	.word	0x0800696c
  ldr r2, =_sbss
 80008b0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80008b4:	20000b00 	.word	0x20000b00

080008b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <HAL_Init+0x40>)
 80008c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_Init+0x40>)
 80008d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_Init+0x40>)
 80008de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f94f 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff ff04 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023c00 	.word	0x40023c00

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f967 	bl	8000bf2 <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 f92f 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000008 	.word	0x20000008
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x20>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_IncTick+0x24>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_IncTick+0x24>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008
 8000984:	200001c4 	.word	0x200001c4

08000988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_GetTick+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	200001c4 	.word	0x200001c4

080009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff ffee 	bl	8000988 <HAL_GetTick>
 80009ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d005      	beq.n	80009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_Delay+0x44>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009c6:	bf00      	nop
 80009c8:	f7ff ffde 	bl	8000988 <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f7      	bhi.n	80009c8 <HAL_Delay+0x28>
  {
  }
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <__NVIC_EnableIRQ+0x38>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff8e 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff29 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff3e 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff8e 	bl	8000adc <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff31 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffa2 	bl	8000b44 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e159      	b.n	8000edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 8148 	bne.w	8000ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d005      	beq.n	8000c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d130      	bne.n	8000cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	f003 0201 	and.w	r2, r3, #1
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d017      	beq.n	8000cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80a2 	beq.w	8000ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a56      	ldr	r2, [pc, #344]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a52      	ldr	r2, [pc, #328]	; (8000ef8 <HAL_GPIO_Init+0x2ec>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a49      	ldr	r2, [pc, #292]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d019      	beq.n	8000e0e <HAL_GPIO_Init+0x202>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a48      	ldr	r2, [pc, #288]	; (8000f00 <HAL_GPIO_Init+0x2f4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0x1fe>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a47      	ldr	r2, [pc, #284]	; (8000f04 <HAL_GPIO_Init+0x2f8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d00d      	beq.n	8000e06 <HAL_GPIO_Init+0x1fa>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a46      	ldr	r2, [pc, #280]	; (8000f08 <HAL_GPIO_Init+0x2fc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d007      	beq.n	8000e02 <HAL_GPIO_Init+0x1f6>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a45      	ldr	r2, [pc, #276]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_GPIO_Init+0x1f2>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000dfe:	2307      	movs	r3, #7
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e20:	4935      	ldr	r1, [pc, #212]	; (8000ef8 <HAL_GPIO_Init+0x2ec>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e52:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7c:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	f67f aea2 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f30:	e003      	b.n	8000f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f48:	b08f      	sub	sp, #60	; 0x3c
 8000f4a:	af0a      	add	r7, sp, #40	; 0x28
 8000f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e10f      	b.n	8001178 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f005 f97c 	bl	8006270 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 f9af 	bl	80032fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	687e      	ldr	r6, [r7, #4]
 8000fa4:	466d      	mov	r5, sp
 8000fa6:	f106 0410 	add.w	r4, r6, #16
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fba:	1d33      	adds	r3, r6, #4
 8000fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f002 f886 	bl	80030d0 <USB_CoreInit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0d0      	b.n	8001178 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 f99d 	bl	800331c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e04a      	b.n	800107e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	333d      	adds	r3, #61	; 0x3d
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	333c      	adds	r3, #60	; 0x3c
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	b298      	uxth	r0, r3
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3342      	adds	r3, #66	; 0x42
 8001024:	4602      	mov	r2, r0
 8001026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	333f      	adds	r3, #63	; 0x3f
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3344      	adds	r3, #68	; 0x44
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3348      	adds	r3, #72	; 0x48
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	3350      	adds	r3, #80	; 0x50
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3301      	adds	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3af      	bcc.n	8000fe8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e044      	b.n	8001118 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	1a9b      	subs	r3, r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	3301      	adds	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3b5      	bcc.n	800108e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	687e      	ldr	r6, [r7, #4]
 800112a:	466d      	mov	r5, sp
 800112c:	f106 0410 	add.w	r4, r6, #16
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800113c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001140:	1d33      	adds	r3, r6, #4
 8001142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f002 f935 	bl	80033b4 <USB_DevInit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e00d      	b.n	8001178 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f9b1 	bl	80044d8 <USB_DevDisconnect>

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001180 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001194:	2b01      	cmp	r3, #1
 8001196:	d101      	bne.n	800119c <HAL_PCD_Start+0x1c>
 8001198:	2302      	movs	r3, #2
 800119a:	e020      	b.n	80011de <HAL_PCD_Start+0x5e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d109      	bne.n	80011c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d005      	beq.n	80011c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 f887 	bl	80032d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 f961 	bl	8004496 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e6:	b590      	push	{r4, r7, lr}
 80011e8:	b08d      	sub	sp, #52	; 0x34
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fa1f 	bl	8004640 <USB_GetMode>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	f040 839d 	bne.w	8001944 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f983 	bl	800451a <USB_ReadInterrupts>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8393 	beq.w	8001942 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f003 f97a 	bl	800451a <USB_ReadInterrupts>
 8001226:	4603      	mov	r3, r0
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b02      	cmp	r3, #2
 800122e:	d107      	bne.n	8001240 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f002 0202 	and.w	r2, r2, #2
 800123e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f003 f968 	bl	800451a <USB_ReadInterrupts>
 800124a:	4603      	mov	r3, r0
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b10      	cmp	r3, #16
 8001252:	d161      	bne.n	8001318 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0210 	bic.w	r2, r2, #16
 8001262:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	f003 020f 	and.w	r2, r3, #15
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	3304      	adds	r3, #4
 8001282:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	0c5b      	lsrs	r3, r3, #17
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	2b02      	cmp	r3, #2
 800128e:	d124      	bne.n	80012da <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d035      	beq.n	8001308 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	6a38      	ldr	r0, [r7, #32]
 80012b0:	f002 ff9f 	bl	80041f2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c0:	441a      	add	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	699a      	ldr	r2, [r3, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d2:	441a      	add	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	619a      	str	r2, [r3, #24]
 80012d8:	e016      	b.n	8001308 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	0c5b      	lsrs	r3, r3, #17
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d110      	bne.n	8001308 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012ec:	2208      	movs	r2, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	6a38      	ldr	r0, [r7, #32]
 80012f2:	f002 ff7e 	bl	80041f2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001302:	441a      	add	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0210 	orr.w	r2, r2, #16
 8001316:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 f8fc 	bl	800451a <USB_ReadInterrupts>
 8001322:	4603      	mov	r3, r0
 8001324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001328:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800132c:	d16e      	bne.n	800140c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f003 f902 	bl	8004540 <USB_ReadDevAllOutEpInterrupt>
 800133c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800133e:	e062      	b.n	8001406 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d057      	beq.n	80013fa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f003 f927 	bl	80045a8 <USB_ReadDevOutEPInterrupt>
 800135a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00c      	beq.n	8001380 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	015a      	lsls	r2, r3, #5
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	4413      	add	r3, r2
 800136e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001372:	461a      	mov	r2, r3
 8001374:	2301      	movs	r3, #1
 8001376:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fd98 	bl	8001eb0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00c      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001396:	461a      	mov	r2, r3
 8001398:	2308      	movs	r3, #8
 800139a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800139c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fe92 	bl	80020c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ba:	461a      	mov	r2, r3
 80013bc:	2310      	movs	r3, #16
 80013be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d008      	beq.n	80013dc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d6:	461a      	mov	r2, r3
 80013d8:	2320      	movs	r3, #32
 80013da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	3301      	adds	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d199      	bne.n	8001340 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 f882 	bl	800451a <USB_ReadInterrupts>
 8001416:	4603      	mov	r3, r0
 8001418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001420:	f040 80c0 	bne.w	80015a4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f8a3 	bl	8004574 <USB_ReadDevAllInEpInterrupt>
 800142e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001434:	e0b2      	b.n	800159c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a7 	beq.w	8001590 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f003 f8c9 	bl	80045e4 <USB_ReadDevInEPInterrupt>
 8001452:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d057      	beq.n	800150e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	2201      	movs	r2, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	69f9      	ldr	r1, [r7, #28]
 800147a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800147e:	4013      	ands	r3, r2
 8001480:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	015a      	lsls	r2, r3, #5
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148e:	461a      	mov	r2, r3
 8001490:	2301      	movs	r3, #1
 8001492:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d132      	bne.n	8001502 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3348      	adds	r3, #72	; 0x48
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4403      	add	r3, r0
 80014bc:	3344      	adds	r3, #68	; 0x44
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4419      	add	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4403      	add	r3, r0
 80014d0:	3348      	adds	r3, #72	; 0x48
 80014d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d113      	bne.n	8001502 <HAL_PCD_IRQHandler+0x31c>
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3350      	adds	r3, #80	; 0x50
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d108      	bne.n	8001502 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014fa:	461a      	mov	r2, r3
 80014fc:	2101      	movs	r1, #1
 80014fe:	f003 f8d1 	bl	80046a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f004 ff32 	bl	8006372 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	015a      	lsls	r2, r3, #5
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001524:	461a      	mov	r2, r3
 8001526:	2308      	movs	r3, #8
 8001528:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001540:	461a      	mov	r2, r3
 8001542:	2310      	movs	r3, #16
 8001544:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	015a      	lsls	r2, r3, #5
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4413      	add	r3, r2
 8001558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800155c:	461a      	mov	r2, r3
 800155e:	2340      	movs	r3, #64	; 0x40
 8001560:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001578:	461a      	mov	r2, r3
 800157a:	2302      	movs	r3, #2
 800157c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fc03 	bl	8001d96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	3301      	adds	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f47f af49 	bne.w	8001436 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 ffb6 	bl	800451a <USB_ReadInterrupts>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015b8:	d122      	bne.n	8001600 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d108      	bne.n	80015ea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015e0:	2100      	movs	r1, #0
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fe0e 	bl	8002204 <HAL_PCDEx_LPM_Callback>
 80015e8:	e002      	b.n	80015f0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f004 ff38 	bl	8006460 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 ff88 	bl	800451a <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001614:	d112      	bne.n	800163c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f004 fef4 	bl	8006414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800163a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 ff6a 	bl	800451a <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001650:	f040 80c7 	bne.w	80017e2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2110      	movs	r1, #16
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f804 	bl	800367c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001678:	e056      	b.n	8001728 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001686:	461a      	mov	r2, r3
 8001688:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800168c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169e:	0151      	lsls	r1, r2, #5
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	440a      	add	r2, r1
 80016a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016ac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016be:	0151      	lsls	r1, r2, #5
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	440a      	add	r2, r1
 80016c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	015a      	lsls	r2, r3, #5
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016da:	461a      	mov	r2, r3
 80016dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f2:	0151      	lsls	r1, r2, #5
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	440a      	add	r2, r1
 80016f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001700:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	015a      	lsls	r2, r3, #5
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001712:	0151      	lsls	r1, r2, #5
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	440a      	add	r2, r1
 8001718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800171c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001720:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	3301      	adds	r3, #1
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172e:	429a      	cmp	r2, r3
 8001730:	d3a3      	bcc.n	800167a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001740:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001744:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	2b00      	cmp	r3, #0
 800174c:	d016      	beq.n	800177c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175e:	f043 030b 	orr.w	r3, r3, #11
 8001762:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001774:	f043 030b 	orr.w	r3, r3, #11
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	e015      	b.n	80017a8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001792:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a2:	f043 030b 	orr.w	r3, r3, #11
 80017a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017cc:	461a      	mov	r2, r3
 80017ce:	f002 ff69 	bl	80046a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 fe97 	bl	800451a <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f6:	d124      	bne.n	8001842 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 ff2d 	bl	800465c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f001 ff95 	bl	8003736 <USB_GetDevSpeed>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681c      	ldr	r4, [r3, #0]
 8001818:	f001 f964 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 800181c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4620      	mov	r0, r4
 8001828:	f001 fcb4 	bl	8003194 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f004 fdc8 	bl	80063c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001840:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fe67 	bl	800451a <USB_ReadInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b08      	cmp	r3, #8
 8001854:	d10a      	bne.n	800186c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f004 fda5 	bl	80063a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f002 0208 	and.w	r2, r2, #8
 800186a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fe52 	bl	800451a <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001880:	d10f      	bne.n	80018a2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f004 fe07 	bl	80064a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fe37 	bl	800451a <USB_ReadInterrupts>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b6:	d10f      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f004 fdda 	bl	800647c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fe1c 	bl	800451a <USB_ReadInterrupts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ec:	d10a      	bne.n	8001904 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f004 fde8 	bl	80064c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fe06 	bl	800451a <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b04      	cmp	r3, #4
 8001916:	d115      	bne.n	8001944 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f004 fdd8 	bl	80064e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6859      	ldr	r1, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	e000      	b.n	8001944 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001942:	bf00      	nop
    }
  }
}
 8001944:	3734      	adds	r7, #52	; 0x34
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}

0800194a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_PCD_SetAddress+0x1a>
 8001960:	2302      	movs	r3, #2
 8001962:	e013      	b.n	800198c <HAL_PCD_SetAddress+0x42>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f002 fd64 	bl	800444a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	70fb      	strb	r3, [r7, #3]
 80019a6:	460b      	mov	r3, r1
 80019a8:	803b      	strh	r3, [r7, #0]
 80019aa:	4613      	mov	r3, r2
 80019ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0f      	bge.n	80019da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 020f 	and.w	r2, r3, #15
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	3338      	adds	r3, #56	; 0x38
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	3304      	adds	r3, #4
 80019d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2201      	movs	r2, #1
 80019d6:	705a      	strb	r2, [r3, #1]
 80019d8:	e00f      	b.n	80019fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 020f 	and.w	r2, r3, #15
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	3304      	adds	r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a06:	883a      	ldrh	r2, [r7, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	78ba      	ldrb	r2, [r7, #2]
 8001a10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	785b      	ldrb	r3, [r3, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a24:	78bb      	ldrb	r3, [r7, #2]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d102      	bne.n	8001a30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_PCD_EP_Open+0xaa>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e00e      	b.n	8001a5c <HAL_PCD_EP_Open+0xc8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fe97 	bl	8003780 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da0f      	bge.n	8001a98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	f003 020f 	and.w	r2, r3, #15
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	3338      	adds	r3, #56	; 0x38
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	705a      	strb	r2, [r3, #1]
 8001a96:	e00f      	b.n	8001ab8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	f003 020f 	and.w	r2, r3, #15
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	3304      	adds	r3, #4
 8001ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_PCD_EP_Close+0x6e>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e00e      	b.n	8001af0 <HAL_PCD_EP_Close+0x8c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 fed5 	bl	8003890 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	460b      	mov	r3, r1
 8001b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	f003 020f 	and.w	r2, r3, #15
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3304      	adds	r3, #4
 8001b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2200      	movs	r2, #0
 8001b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b54:	7afb      	ldrb	r3, [r7, #11]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6979      	ldr	r1, [r7, #20]
 8001b6c:	f002 f9b0 	bl	8003ed0 <USB_EP0StartXfer>
 8001b70:	e008      	b.n	8001b84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6979      	ldr	r1, [r7, #20]
 8001b80:	f001 ff62 	bl	8003a48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
 8001ba0:	f003 020f 	and.w	r2, r3, #15
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	3338      	adds	r3, #56	; 0x38
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001be8:	7afb      	ldrb	r3, [r7, #11]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	6979      	ldr	r1, [r7, #20]
 8001c00:	f002 f966 	bl	8003ed0 <USB_EP0StartXfer>
 8001c04:	e008      	b.n	8001c18 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	6979      	ldr	r1, [r7, #20]
 8001c14:	f001 ff18 	bl	8003a48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d901      	bls.n	8001c40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e050      	b.n	8001ce2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da0f      	bge.n	8001c68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3338      	adds	r3, #56	; 0x38
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2201      	movs	r2, #1
 8001c64:	705a      	strb	r2, [r3, #1]
 8001c66:	e00d      	b.n	8001c84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_PCD_EP_SetStall+0x82>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e01e      	b.n	8001ce2 <HAL_PCD_EP_SetStall+0xc0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 faf5 	bl	80042a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	b2d9      	uxtb	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f002 fce6 	bl	80046a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d901      	bls.n	8001d08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e042      	b.n	8001d8e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da0f      	bge.n	8001d30 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 020f 	and.w	r2, r3, #15
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3338      	adds	r3, #56	; 0x38
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	705a      	strb	r2, [r3, #1]
 8001d2e:	e00f      	b.n	8001d50 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 020f 	and.w	r2, r3, #15
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_PCD_EP_ClrStall+0x86>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e00e      	b.n	8001d8e <HAL_PCD_EP_ClrStall+0xa4>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fafd 	bl	800437e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b08a      	sub	sp, #40	; 0x28
 8001d9a:	af02      	add	r7, sp, #8
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	3338      	adds	r3, #56	; 0x38
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	3304      	adds	r3, #4
 8001dbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d901      	bls.n	8001dce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06c      	b.n	8001ea8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d902      	bls.n	8001dea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3303      	adds	r3, #3
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001df2:	e02b      	b.n	8001e4c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d902      	bls.n	8001e10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	3303      	adds	r3, #3
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	68d9      	ldr	r1, [r3, #12]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f002 f9a1 	bl	8004176 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	441a      	add	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	441a      	add	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d809      	bhi.n	8001e76 <PCD_WriteEmptyTxFifo+0xe0>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d203      	bcs.n	8001e76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1be      	bne.n	8001df4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d811      	bhi.n	8001ea6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	2201      	movs	r2, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	6939      	ldr	r1, [r7, #16]
 8001e9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	333c      	adds	r3, #60	; 0x3c
 8001ec8:	3304      	adds	r3, #4
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	f040 80a0 	bne.w	8002028 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d015      	beq.n	8001f1e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4a72      	ldr	r2, [pc, #456]	; (80020c0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	f240 80dd 	bls.w	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80d7 	beq.w	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f14:	461a      	mov	r2, r3
 8001f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f1a:	6093      	str	r3, [r2, #8]
 8001f1c:	e0cb      	b.n	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f34:	461a      	mov	r2, r3
 8001f36:	2320      	movs	r3, #32
 8001f38:	6093      	str	r3, [r2, #8]
 8001f3a:	e0bc      	b.n	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 80b7 	bne.w	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a5d      	ldr	r2, [pc, #372]	; (80020c0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d90f      	bls.n	8001f70 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f66:	461a      	mov	r2, r3
 8001f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6c:	6093      	str	r3, [r2, #8]
 8001f6e:	e0a2      	b.n	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f82:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	0159      	lsls	r1, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001f96:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4403      	add	r3, r0
 8001fa6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001faa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4403      	add	r3, r0
 8001fce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4419      	add	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4403      	add	r3, r0
 8001fe4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fe8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d114      	bne.n	800201a <PCD_EP_OutXfrComplete_int+0x16a>
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d108      	bne.n	800201a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002012:	461a      	mov	r2, r3
 8002014:	2101      	movs	r1, #1
 8002016:	f002 fb45 	bl	80046a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f004 f98b 	bl	800633c <HAL_PCD_DataOutStageCallback>
 8002026:	e046      	b.n	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d124      	bne.n	800207a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204c:	6093      	str	r3, [r2, #8]
 800204e:	e032      	b.n	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002066:	461a      	mov	r2, r3
 8002068:	2320      	movs	r3, #32
 800206a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f004 f962 	bl	800633c <HAL_PCD_DataOutStageCallback>
 8002078:	e01d      	b.n	80020b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d114      	bne.n	80020aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d108      	bne.n	80020aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020a2:	461a      	mov	r2, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	f002 fafd 	bl	80046a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f004 f943 	bl	800633c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	4f54300a 	.word	0x4f54300a
 80020c4:	4f54310a 	.word	0x4f54310a

080020c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	333c      	adds	r3, #60	; 0x3c
 80020e0:	3304      	adds	r3, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4a15      	ldr	r2, [pc, #84]	; (8002150 <PCD_EP_OutSetupPacket_int+0x88>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d90e      	bls.n	800211c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002114:	461a      	mov	r2, r3
 8002116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800211a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f004 f8fb 	bl	8006318 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <PCD_EP_OutSetupPacket_int+0x88>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d90c      	bls.n	8002144 <PCD_EP_OutSetupPacket_int+0x7c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d108      	bne.n	8002144 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800213c:	461a      	mov	r2, r3
 800213e:	2101      	movs	r1, #1
 8002140:	f002 fab0 	bl	80046a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	4f54300a 	.word	0x4f54300a

08002154 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
 8002160:	4613      	mov	r3, r2
 8002162:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d107      	bne.n	8002182 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002172:	883b      	ldrh	r3, [r7, #0]
 8002174:	0419      	lsls	r1, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	430a      	orrs	r2, r1
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
 8002180:	e028      	b.n	80021d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e00d      	b.n	80021b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	3340      	adds	r3, #64	; 0x40
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4413      	add	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	3301      	adds	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3ec      	bcc.n	8002196 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021bc:	883b      	ldrh	r3, [r7, #0]
 80021be:	0418      	lsls	r0, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	4302      	orrs	r2, r0
 80021cc:	3340      	adds	r3, #64	; 0x40
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e267      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d075      	beq.n	8002326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b04      	cmp	r3, #4
 8002244:	d00c      	beq.n	8002260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224e:	2b08      	cmp	r3, #8
 8002250:	d112      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05b      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e242      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x74>
 8002282:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b70      	ldr	r3, [pc, #448]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6f      	ldr	r2, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6d      	ldr	r3, [pc, #436]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6c      	ldr	r2, [pc, #432]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 80022b4:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b66      	ldr	r3, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fb58 	bl	8000988 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fb54 	bl	8000988 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e207      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fb44 	bl	8000988 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fb40 	bl	8000988 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1f3      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b44      	ldr	r3, [pc, #272]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c7      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4937      	ldr	r1, [pc, #220]	; (800245c <HAL_RCC_OscConfig+0x240>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCC_OscConfig+0x244>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe faf9 	bl	8000988 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe faf5 	bl	8000988 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a8      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4925      	ldr	r1, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_OscConfig+0x244>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fad8 	bl	8000988 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023dc:	f7fe fad4 	bl	8000988 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e187      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d036      	beq.n	8002474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_RCC_OscConfig+0x248>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fab8 	bl	8000988 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe fab4 	bl	8000988 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e167      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x240>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x200>
 800243a:	e01b      	b.n	8002474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x248>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe faa1 	bl	8000988 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00e      	b.n	8002468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244a:	f7fe fa9d 	bl	8000988 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d907      	bls.n	8002468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e150      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800245c:	40023800 	.word	0x40023800
 8002460:	42470000 	.word	0x42470000
 8002464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8097 	beq.w	80025b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b81      	ldr	r3, [pc, #516]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b7d      	ldr	r3, [pc, #500]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a7c      	ldr	r2, [pc, #496]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b7a      	ldr	r3, [pc, #488]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b77      	ldr	r3, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b74      	ldr	r3, [pc, #464]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a73      	ldr	r2, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fa5d 	bl	8000988 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7fe fa59 	bl	8000988 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e10c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x474>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x2ea>
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a63      	ldr	r2, [pc, #396]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x30c>
 800250e:	4b5f      	ldr	r3, [pc, #380]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a5e      	ldr	r2, [pc, #376]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a5b      	ldr	r2, [pc, #364]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x324>
 8002528:	4b58      	ldr	r3, [pc, #352]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a57      	ldr	r2, [pc, #348]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	4b55      	ldr	r3, [pc, #340]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a54      	ldr	r2, [pc, #336]	; (800268c <HAL_RCC_OscConfig+0x470>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fa1e 	bl	8000988 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe fa1a 	bl	8000988 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0cb      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	4b49      	ldr	r3, [pc, #292]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ee      	beq.n	8002550 <HAL_RCC_OscConfig+0x334>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7fe fa08 	bl	8000988 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fa04 	bl	8000988 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0b5      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ee      	bne.n	800257c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a1 	beq.w	80026fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d05c      	beq.n	8002680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d141      	bne.n	8002652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe f9d8 	bl	8000988 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe f9d4 	bl	8000988 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e087      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x470>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	491b      	ldr	r1, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe f9ad 	bl	8000988 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe f9a9 	bl	8000988 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e05c      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x416>
 8002650:	e054      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCC_OscConfig+0x478>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe f996 	bl	8000988 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe f992 	bl	8000988 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e045      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_OscConfig+0x470>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x444>
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e038      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
 800268c:	40023800 	.word	0x40023800
 8002690:	40007000 	.word	0x40007000
 8002694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x4ec>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d028      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d121      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d11a      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d111      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0cc      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002720:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d90c      	bls.n	8002748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d044      	beq.n	800282c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e067      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027fc:	f7fe f8c4 	bl	8000988 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe f8c0 	bl	8000988 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d20c      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490a      	ldr	r1, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f824 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08006944 	.word	0x08006944
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b094      	sub	sp, #80	; 0x50
 80028de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	647b      	str	r3, [r7, #68]	; 0x44
 80028e4:	2300      	movs	r3, #0
 80028e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028e8:	2300      	movs	r3, #0
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f0:	4b79      	ldr	r3, [pc, #484]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d00d      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x40>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	f200 80e1 	bhi.w	8002ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x34>
 8002906:	2b04      	cmp	r3, #4
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x3a>
 800290a:	e0db      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b73      	ldr	r3, [pc, #460]	; (8002adc <HAL_RCC_GetSysClockFreq+0x204>)
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002910:	e0db      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002912:	4b73      	ldr	r3, [pc, #460]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002916:	e0d8      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002918:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002920:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d063      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	2200      	movs	r2, #0
 8002936:	63bb      	str	r3, [r7, #56]	; 0x38
 8002938:	63fa      	str	r2, [r7, #60]	; 0x3c
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002940:	633b      	str	r3, [r7, #48]	; 0x30
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800294a:	4622      	mov	r2, r4
 800294c:	462b      	mov	r3, r5
 800294e:	f04f 0000 	mov.w	r0, #0
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	0159      	lsls	r1, r3, #5
 8002958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800295c:	0150      	lsls	r0, r2, #5
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4621      	mov	r1, r4
 8002964:	1a51      	subs	r1, r2, r1
 8002966:	6139      	str	r1, [r7, #16]
 8002968:	4629      	mov	r1, r5
 800296a:	eb63 0301 	sbc.w	r3, r3, r1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800297c:	4659      	mov	r1, fp
 800297e:	018b      	lsls	r3, r1, #6
 8002980:	4651      	mov	r1, sl
 8002982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002986:	4651      	mov	r1, sl
 8002988:	018a      	lsls	r2, r1, #6
 800298a:	4651      	mov	r1, sl
 800298c:	ebb2 0801 	subs.w	r8, r2, r1
 8002990:	4659      	mov	r1, fp
 8002992:	eb63 0901 	sbc.w	r9, r3, r1
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029aa:	4690      	mov	r8, r2
 80029ac:	4699      	mov	r9, r3
 80029ae:	4623      	mov	r3, r4
 80029b0:	eb18 0303 	adds.w	r3, r8, r3
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	462b      	mov	r3, r5
 80029b8:	eb49 0303 	adc.w	r3, r9, r3
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ca:	4629      	mov	r1, r5
 80029cc:	024b      	lsls	r3, r1, #9
 80029ce:	4621      	mov	r1, r4
 80029d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029d4:	4621      	mov	r1, r4
 80029d6:	024a      	lsls	r2, r1, #9
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029de:	2200      	movs	r2, #0
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029e8:	f7fd fbf4 	bl	80001d4 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f4:	e058      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	2200      	movs	r2, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	4611      	mov	r1, r2
 8002a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	f04f 0000 	mov.w	r0, #0
 8002a18:	f04f 0100 	mov.w	r1, #0
 8002a1c:	0159      	lsls	r1, r3, #5
 8002a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a22:	0150      	lsls	r0, r2, #5
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4641      	mov	r1, r8
 8002a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a2e:	4649      	mov	r1, r9
 8002a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a48:	ebb2 040a 	subs.w	r4, r2, sl
 8002a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	00eb      	lsls	r3, r5, #3
 8002a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5e:	00e2      	lsls	r2, r4, #3
 8002a60:	4614      	mov	r4, r2
 8002a62:	461d      	mov	r5, r3
 8002a64:	4643      	mov	r3, r8
 8002a66:	18e3      	adds	r3, r4, r3
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	eb45 0303 	adc.w	r3, r5, r3
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a7e:	4629      	mov	r1, r5
 8002a80:	028b      	lsls	r3, r1, #10
 8002a82:	4621      	mov	r1, r4
 8002a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a88:	4621      	mov	r1, r4
 8002a8a:	028a      	lsls	r2, r1, #10
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	2200      	movs	r2, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	61fa      	str	r2, [r7, #28]
 8002a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a9c:	f7fd fb9a 	bl	80001d4 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3750      	adds	r7, #80	; 0x50
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	007a1200 	.word	0x007a1200

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000000 	.word	0x20000000

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08006954 	.word	0x08006954

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08006954 	.word	0x08006954

08002b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e03f      	b.n	8002bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fd fdea 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	; 0x24
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f829 	bl	8002be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bec:	b0c0      	sub	sp, #256	; 0x100
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	ea40 0301 	orr.w	r3, r0, r1
 8002c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c40:	f021 010c 	bic.w	r1, r1, #12
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	6999      	ldr	r1, [r3, #24]
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	ea40 0301 	orr.w	r3, r0, r1
 8002c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <UART_SetConfig+0x2cc>)
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d005      	beq.n	8002c88 <UART_SetConfig+0xa0>
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b8d      	ldr	r3, [pc, #564]	; (8002eb8 <UART_SetConfig+0x2d0>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d104      	bne.n	8002c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff ff4c 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c90:	e003      	b.n	8002c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c92:	f7ff ff33 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8002c96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca4:	f040 810c 	bne.w	8002ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cba:	4622      	mov	r2, r4
 8002cbc:	462b      	mov	r3, r5
 8002cbe:	1891      	adds	r1, r2, r2
 8002cc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cc2:	415b      	adcs	r3, r3
 8002cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cca:	4621      	mov	r1, r4
 8002ccc:	eb12 0801 	adds.w	r8, r2, r1
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb43 0901 	adc.w	r9, r3, r1
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cea:	4690      	mov	r8, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	eb18 0303 	adds.w	r3, r8, r3
 8002cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	eb49 0303 	adc.w	r3, r9, r3
 8002cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d16:	460b      	mov	r3, r1
 8002d18:	18db      	adds	r3, r3, r3
 8002d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	eb42 0303 	adc.w	r3, r2, r3
 8002d22:	657b      	str	r3, [r7, #84]	; 0x54
 8002d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d2c:	f7fd fa52 	bl	80001d4 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4b61      	ldr	r3, [pc, #388]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002d36:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	011c      	lsls	r4, r3, #4
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d60:	4641      	mov	r1, r8
 8002d62:	eb12 0a01 	adds.w	sl, r2, r1
 8002d66:	4649      	mov	r1, r9
 8002d68:	eb43 0b01 	adc.w	fp, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d80:	4692      	mov	sl, r2
 8002d82:	469b      	mov	fp, r3
 8002d84:	4643      	mov	r3, r8
 8002d86:	eb1a 0303 	adds.w	r3, sl, r3
 8002d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	eb4b 0303 	adc.w	r3, fp, r3
 8002d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dac:	460b      	mov	r3, r1
 8002dae:	18db      	adds	r3, r3, r3
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
 8002db2:	4613      	mov	r3, r2
 8002db4:	eb42 0303 	adc.w	r3, r2, r3
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
 8002dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dc2:	f7fd fa07 	bl	80001d4 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002dce:	fba3 2301 	umull	r2, r3, r3, r1
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2264      	movs	r2, #100	; 0x64
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	1acb      	subs	r3, r1, r3
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002de4:	fba3 2302 	umull	r2, r3, r3, r2
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df0:	441c      	add	r4, r3
 8002df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	1891      	adds	r1, r2, r2
 8002e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e0c:	415b      	adcs	r3, r3
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e14:	4641      	mov	r1, r8
 8002e16:	1851      	adds	r1, r2, r1
 8002e18:	6339      	str	r1, [r7, #48]	; 0x30
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	414b      	adcs	r3, r1
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	00cb      	lsls	r3, r1, #3
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e36:	4651      	mov	r1, sl
 8002e38:	00ca      	lsls	r2, r1, #3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4642      	mov	r2, r8
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e48:	464b      	mov	r3, r9
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e68:	460b      	mov	r3, r1
 8002e6a:	18db      	adds	r3, r3, r3
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6e:	4613      	mov	r3, r2
 8002e70:	eb42 0303 	adc.w	r3, r2, r3
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e7e:	f7fd f9a9 	bl	80001d4 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002e88:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	2164      	movs	r1, #100	; 0x64
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	3332      	adds	r3, #50	; 0x32
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	f003 0207 	and.w	r2, r3, #7
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4422      	add	r2, r4
 8002eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eb0:	e106      	b.n	80030c0 <UART_SetConfig+0x4d8>
 8002eb2:	bf00      	nop
 8002eb4:	40011000 	.word	0x40011000
 8002eb8:	40011400 	.word	0x40011400
 8002ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ed2:	4642      	mov	r2, r8
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	1891      	adds	r1, r2, r2
 8002ed8:	6239      	str	r1, [r7, #32]
 8002eda:	415b      	adcs	r3, r3
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	1854      	adds	r4, r2, r1
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	eb43 0501 	adc.w	r5, r3, r1
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	00eb      	lsls	r3, r5, #3
 8002ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efa:	00e2      	lsls	r2, r4, #3
 8002efc:	4614      	mov	r4, r2
 8002efe:	461d      	mov	r5, r3
 8002f00:	4643      	mov	r3, r8
 8002f02:	18e3      	adds	r3, r4, r3
 8002f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f08:	464b      	mov	r3, r9
 8002f0a:	eb45 0303 	adc.w	r3, r5, r3
 8002f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f2e:	4629      	mov	r1, r5
 8002f30:	008b      	lsls	r3, r1, #2
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f38:	4621      	mov	r1, r4
 8002f3a:	008a      	lsls	r2, r1, #2
 8002f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f40:	f7fd f948 	bl	80001d4 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4b60      	ldr	r3, [pc, #384]	; (80030cc <UART_SetConfig+0x4e4>)
 8002f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	011c      	lsls	r4, r3, #4
 8002f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	1891      	adds	r1, r2, r2
 8002f6a:	61b9      	str	r1, [r7, #24]
 8002f6c:	415b      	adcs	r3, r3
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f74:	4641      	mov	r1, r8
 8002f76:	1851      	adds	r1, r2, r1
 8002f78:	6139      	str	r1, [r7, #16]
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	414b      	adcs	r3, r1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	00cb      	lsls	r3, r1, #3
 8002f90:	4651      	mov	r1, sl
 8002f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f96:	4651      	mov	r1, sl
 8002f98:	00ca      	lsls	r2, r1, #3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	189b      	adds	r3, r3, r2
 8002fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fa8:	464b      	mov	r3, r9
 8002faa:	460a      	mov	r2, r1
 8002fac:	eb42 0303 	adc.w	r3, r2, r3
 8002fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fcc:	4649      	mov	r1, r9
 8002fce:	008b      	lsls	r3, r1, #2
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	008a      	lsls	r2, r1, #2
 8002fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fde:	f7fd f8f9 	bl	80001d4 <__aeabi_uldivmod>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4b38      	ldr	r3, [pc, #224]	; (80030cc <UART_SetConfig+0x4e4>)
 8002fea:	fba3 2301 	umull	r2, r3, r3, r1
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2264      	movs	r2, #100	; 0x64
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	1acb      	subs	r3, r1, r3
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	3332      	adds	r3, #50	; 0x32
 8002ffc:	4a33      	ldr	r2, [pc, #204]	; (80030cc <UART_SetConfig+0x4e4>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003008:	441c      	add	r4, r3
 800300a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300e:	2200      	movs	r2, #0
 8003010:	673b      	str	r3, [r7, #112]	; 0x70
 8003012:	677a      	str	r2, [r7, #116]	; 0x74
 8003014:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	415b      	adcs	r3, r3
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003028:	4641      	mov	r1, r8
 800302a:	1851      	adds	r1, r2, r1
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	4649      	mov	r1, r9
 8003030:	414b      	adcs	r3, r1
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003040:	4659      	mov	r1, fp
 8003042:	00cb      	lsls	r3, r1, #3
 8003044:	4651      	mov	r1, sl
 8003046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304a:	4651      	mov	r1, sl
 800304c:	00ca      	lsls	r2, r1, #3
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	4603      	mov	r3, r0
 8003054:	4642      	mov	r2, r8
 8003056:	189b      	adds	r3, r3, r2
 8003058:	66bb      	str	r3, [r7, #104]	; 0x68
 800305a:	464b      	mov	r3, r9
 800305c:	460a      	mov	r2, r1
 800305e:	eb42 0303 	adc.w	r3, r2, r3
 8003062:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	663b      	str	r3, [r7, #96]	; 0x60
 800306e:	667a      	str	r2, [r7, #100]	; 0x64
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800307c:	4649      	mov	r1, r9
 800307e:	008b      	lsls	r3, r1, #2
 8003080:	4641      	mov	r1, r8
 8003082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003086:	4641      	mov	r1, r8
 8003088:	008a      	lsls	r2, r1, #2
 800308a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800308e:	f7fd f8a1 	bl	80001d4 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <UART_SetConfig+0x4e4>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	; 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	3332      	adds	r3, #50	; 0x32
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <UART_SetConfig+0x4e4>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 020f 	and.w	r2, r3, #15
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4422      	add	r2, r4
 80030be:	609a      	str	r2, [r3, #8]
}
 80030c0:	bf00      	nop
 80030c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030c6:	46bd      	mov	sp, r7
 80030c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030cc:	51eb851f 	.word	0x51eb851f

080030d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030d0:	b084      	sub	sp, #16
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	f107 001c 	add.w	r0, r7, #28
 80030de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d122      	bne.n	800312e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80030fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f001 fb1c 	bl	8004760 <USB_CoreReset>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e01a      	b.n	8003164 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f001 fb10 	bl	8004760 <USB_CoreReset>
 8003140:	4603      	mov	r3, r0
 8003142:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	639a      	str	r2, [r3, #56]	; 0x38
 8003156:	e005      	b.n	8003164 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10b      	bne.n	8003182 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f043 0206 	orr.w	r2, r3, #6
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f043 0220 	orr.w	r2, r3, #32
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800318e:	b004      	add	sp, #16
 8003190:	4770      	bx	lr
	...

08003194 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d165      	bne.n	8003274 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4a41      	ldr	r2, [pc, #260]	; (80032b0 <USB_SetTurnaroundTime+0x11c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d906      	bls.n	80031be <USB_SetTurnaroundTime+0x2a>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4a40      	ldr	r2, [pc, #256]	; (80032b4 <USB_SetTurnaroundTime+0x120>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d202      	bcs.n	80031be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80031b8:	230f      	movs	r3, #15
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e062      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4a3c      	ldr	r2, [pc, #240]	; (80032b4 <USB_SetTurnaroundTime+0x120>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d306      	bcc.n	80031d4 <USB_SetTurnaroundTime+0x40>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <USB_SetTurnaroundTime+0x124>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d202      	bcs.n	80031d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80031ce:	230e      	movs	r3, #14
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	e057      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <USB_SetTurnaroundTime+0x124>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d306      	bcc.n	80031ea <USB_SetTurnaroundTime+0x56>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4a37      	ldr	r2, [pc, #220]	; (80032bc <USB_SetTurnaroundTime+0x128>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d202      	bcs.n	80031ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80031e4:	230d      	movs	r3, #13
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e04c      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4a33      	ldr	r2, [pc, #204]	; (80032bc <USB_SetTurnaroundTime+0x128>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d306      	bcc.n	8003200 <USB_SetTurnaroundTime+0x6c>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4a32      	ldr	r2, [pc, #200]	; (80032c0 <USB_SetTurnaroundTime+0x12c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d802      	bhi.n	8003200 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80031fa:	230c      	movs	r3, #12
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e041      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <USB_SetTurnaroundTime+0x12c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d906      	bls.n	8003216 <USB_SetTurnaroundTime+0x82>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <USB_SetTurnaroundTime+0x130>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d802      	bhi.n	8003216 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003210:	230b      	movs	r3, #11
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e036      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <USB_SetTurnaroundTime+0x130>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d906      	bls.n	800322c <USB_SetTurnaroundTime+0x98>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <USB_SetTurnaroundTime+0x134>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d802      	bhi.n	800322c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003226:	230a      	movs	r3, #10
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e02b      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <USB_SetTurnaroundTime+0x134>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d906      	bls.n	8003242 <USB_SetTurnaroundTime+0xae>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4a25      	ldr	r2, [pc, #148]	; (80032cc <USB_SetTurnaroundTime+0x138>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d202      	bcs.n	8003242 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800323c:	2309      	movs	r3, #9
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e020      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <USB_SetTurnaroundTime+0x138>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d306      	bcc.n	8003258 <USB_SetTurnaroundTime+0xc4>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <USB_SetTurnaroundTime+0x13c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d802      	bhi.n	8003258 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003252:	2308      	movs	r3, #8
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e015      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <USB_SetTurnaroundTime+0x13c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d906      	bls.n	800326e <USB_SetTurnaroundTime+0xda>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <USB_SetTurnaroundTime+0x140>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d202      	bcs.n	800326e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003268:	2307      	movs	r3, #7
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	e00a      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800326e:	2306      	movs	r3, #6
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e007      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800327a:	2309      	movs	r3, #9
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e001      	b.n	8003284 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003280:	2309      	movs	r3, #9
 8003282:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	00d8acbf 	.word	0x00d8acbf
 80032b4:	00e4e1c0 	.word	0x00e4e1c0
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	01067380 	.word	0x01067380
 80032c0:	011a499f 	.word	0x011a499f
 80032c4:	01312cff 	.word	0x01312cff
 80032c8:	014ca43f 	.word	0x014ca43f
 80032cc:	016e3600 	.word	0x016e3600
 80032d0:	01a6ab1f 	.word	0x01a6ab1f
 80032d4:	01e84800 	.word	0x01e84800

080032d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d115      	bne.n	800336a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800334a:	2001      	movs	r0, #1
 800334c:	f7fd fb28 	bl	80009a0 <HAL_Delay>
      ms++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3301      	adds	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f001 f972 	bl	8004640 <USB_GetMode>
 800335c:	4603      	mov	r3, r0
 800335e:	2b01      	cmp	r3, #1
 8003360:	d01e      	beq.n	80033a0 <USB_SetCurrentMode+0x84>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b31      	cmp	r3, #49	; 0x31
 8003366:	d9f0      	bls.n	800334a <USB_SetCurrentMode+0x2e>
 8003368:	e01a      	b.n	80033a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d115      	bne.n	800339c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800337c:	2001      	movs	r0, #1
 800337e:	f7fd fb0f 	bl	80009a0 <HAL_Delay>
      ms++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3301      	adds	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f001 f959 	bl	8004640 <USB_GetMode>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <USB_SetCurrentMode+0x84>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b31      	cmp	r3, #49	; 0x31
 8003398:	d9f0      	bls.n	800337c <USB_SetCurrentMode+0x60>
 800339a:	e001      	b.n	80033a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e005      	b.n	80033ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b32      	cmp	r3, #50	; 0x32
 80033a4:	d101      	bne.n	80033aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033b4:	b084      	sub	sp, #16
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80033c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	e009      	b.n	80033e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	3340      	adds	r3, #64	; 0x40
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	2200      	movs	r2, #0
 80033e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	3301      	adds	r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b0e      	cmp	r3, #14
 80033ec:	d9f2      	bls.n	80033d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80033ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11c      	bne.n	800342e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
 800342c:	e00b      	b.n	8003446 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800344c:	461a      	mov	r2, r3
 800344e:	2300      	movs	r3, #0
 8003450:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003458:	4619      	mov	r1, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003460:	461a      	mov	r2, r3
 8003462:	680b      	ldr	r3, [r1, #0]
 8003464:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	2b01      	cmp	r3, #1
 800346a:	d10c      	bne.n	8003486 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003472:	2100      	movs	r1, #0
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f945 	bl	8003704 <USB_SetDevSpeed>
 800347a:	e008      	b.n	800348e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800347c:	2101      	movs	r1, #1
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f940 	bl	8003704 <USB_SetDevSpeed>
 8003484:	e003      	b.n	800348e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003486:	2103      	movs	r1, #3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f93b 	bl	8003704 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800348e:	2110      	movs	r1, #16
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f8f3 	bl	800367c <USB_FlushTxFifo>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f90f 	bl	80036c4 <USB_FlushRxFifo>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b6:	461a      	mov	r2, r3
 80034b8:	2300      	movs	r3, #0
 80034ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c2:	461a      	mov	r2, r3
 80034c4:	2300      	movs	r3, #0
 80034c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ce:	461a      	mov	r2, r3
 80034d0:	2300      	movs	r3, #0
 80034d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	e043      	b.n	8003562 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f0:	d118      	bne.n	8003524 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	461a      	mov	r2, r3
 8003506:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e013      	b.n	8003536 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351a:	461a      	mov	r2, r3
 800351c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e008      	b.n	8003536 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003530:	461a      	mov	r2, r3
 8003532:	2300      	movs	r3, #0
 8003534:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003542:	461a      	mov	r2, r3
 8003544:	2300      	movs	r3, #0
 8003546:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003554:	461a      	mov	r2, r3
 8003556:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800355a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	3301      	adds	r3, #1
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	429a      	cmp	r2, r3
 8003568:	d3b7      	bcc.n	80034da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	e043      	b.n	80035f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003586:	d118      	bne.n	80035ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359a:	461a      	mov	r2, r3
 800359c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e013      	b.n	80035cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	461a      	mov	r2, r3
 80035b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e008      	b.n	80035cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c6:	461a      	mov	r2, r3
 80035c8:	2300      	movs	r3, #0
 80035ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d8:	461a      	mov	r2, r3
 80035da:	2300      	movs	r3, #0
 80035dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	461a      	mov	r2, r3
 80035ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3301      	adds	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3b7      	bcc.n	8003570 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800360e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003612:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003620:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f043 0210 	orr.w	r2, r3, #16
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <USB_DevInit+0x2c4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f043 0208 	orr.w	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003668:	7dfb      	ldrb	r3, [r7, #23]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003674:	b004      	add	sp, #16
 8003676:	4770      	bx	lr
 8003678:	803c3800 	.word	0x803c3800

0800367c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3301      	adds	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <USB_FlushTxFifo+0x44>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e006      	b.n	80036b4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d0f1      	beq.n	8003696 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	00030d40 	.word	0x00030d40

080036c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2210      	movs	r2, #16
 80036d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3301      	adds	r3, #1
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <USB_FlushRxFifo+0x3c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e006      	b.n	80036f4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d0f1      	beq.n	80036d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	00030d40 	.word	0x00030d40

08003704 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003736:	b480      	push	{r7}
 8003738:	b087      	sub	sp, #28
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]
 800375a:	e00a      	b.n	8003772 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d002      	beq.n	8003768 <USB_GetDevSpeed+0x32>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b06      	cmp	r3, #6
 8003766:	d102      	bne.n	800376e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003768:	2302      	movs	r3, #2
 800376a:	75fb      	strb	r3, [r7, #23]
 800376c:	e001      	b.n	8003772 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800376e:	230f      	movs	r3, #15
 8003770:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d13a      	bne.n	8003812 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	2101      	movs	r1, #1
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d155      	bne.n	8003880 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	78db      	ldrb	r3, [r3, #3]
 80037ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	059b      	lsls	r3, r3, #22
 80037f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037f8:	4313      	orrs	r3, r2
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	440a      	add	r2, r1
 8003802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e036      	b.n	8003880 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003830:	4313      	orrs	r3, r2
 8003832:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11a      	bne.n	8003880 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	78db      	ldrb	r3, [r3, #3]
 8003864:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003866:	430b      	orrs	r3, r1
 8003868:	4313      	orrs	r3, r2
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	0151      	lsls	r1, r2, #5
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	440a      	add	r2, r1
 8003872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	785b      	ldrb	r3, [r3, #1]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d161      	bne.n	8003970 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c2:	d11f      	bne.n	8003904 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	0151      	lsls	r1, r2, #5
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	440a      	add	r2, r1
 80038da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	0151      	lsls	r1, r2, #5
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	440a      	add	r2, r1
 80038fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	2101      	movs	r1, #1
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	b29b      	uxth	r3, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003924:	4013      	ands	r3, r2
 8003926:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	b29b      	uxth	r3, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003948:	4013      	ands	r3, r2
 800394a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	0159      	lsls	r1, r3, #5
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	440b      	add	r3, r1
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	4619      	mov	r1, r3
 8003968:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <USB_DeactivateEndpoint+0x1b0>)
 800396a:	4013      	ands	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
 800396e:	e060      	b.n	8003a32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003986:	d11f      	bne.n	80039c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	0151      	lsls	r1, r2, #5
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	440a      	add	r2, r1
 80039be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	43db      	mvns	r3, r3
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e8:	4013      	ands	r3, r2
 80039ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	2101      	movs	r1, #1
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	43db      	mvns	r3, r3
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	0159      	lsls	r1, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	440b      	add	r3, r1
 8003a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <USB_DeactivateEndpoint+0x1b4>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	ec337800 	.word	0xec337800
 8003a44:	eff37800 	.word	0xeff37800

08003a48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 815c 	bne.w	8003d22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d132      	bne.n	8003ad8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	0151      	lsls	r1, r2, #5
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	440a      	add	r2, r1
 8003a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	0151      	lsls	r1, r2, #5
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	440a      	add	r2, r1
 8003aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	0151      	lsls	r1, r2, #5
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	440a      	add	r2, r1
 8003acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad0:	0cdb      	lsrs	r3, r3, #19
 8003ad2:	04db      	lsls	r3, r3, #19
 8003ad4:	6113      	str	r3, [r2, #16]
 8003ad6:	e074      	b.n	8003bc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af2:	0cdb      	lsrs	r3, r3, #19
 8003af4:	04db      	lsls	r3, r3, #19
 8003af6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	0151      	lsls	r1, r2, #5
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	440a      	add	r2, r1
 8003b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6959      	ldr	r1, [r3, #20]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	440b      	add	r3, r1
 8003b34:	1e59      	subs	r1, r3, #1
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003b40:	4b9d      	ldr	r3, [pc, #628]	; (8003db8 <USB_EPStartXfer+0x370>)
 8003b42:	400b      	ands	r3, r1
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	0148      	lsls	r0, r1, #5
 8003b48:	69f9      	ldr	r1, [r7, #28]
 8003b4a:	4401      	add	r1, r0
 8003b4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b50:	4313      	orrs	r3, r2
 8003b52:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	0148      	lsls	r0, r1, #5
 8003b6e:	69f9      	ldr	r1, [r7, #28]
 8003b70:	4401      	add	r1, r0
 8003b72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b76:	4313      	orrs	r3, r2
 8003b78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	78db      	ldrb	r3, [r3, #3]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d11f      	bne.n	8003bc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	0151      	lsls	r1, r2, #5
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	440a      	add	r2, r1
 8003b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ba0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d14b      	bne.n	8003c60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	78db      	ldrb	r3, [r3, #3]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d128      	bne.n	8003c3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d110      	bne.n	8003c1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	0151      	lsls	r1, r2, #5
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	440a      	add	r2, r1
 8003c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	e00f      	b.n	8003c3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e12f      	b.n	8003ec0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	78db      	ldrb	r3, [r3, #3]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d015      	beq.n	8003cb4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8117 	beq.w	8003ec0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca8:	69f9      	ldr	r1, [r7, #28]
 8003caa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	634b      	str	r3, [r1, #52]	; 0x34
 8003cb2:	e105      	b.n	8003ec0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d110      	bne.n	8003ce6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e00f      	b.n	8003d06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	68d9      	ldr	r1, [r3, #12]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	b298      	uxth	r0, r3
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	4603      	mov	r3, r0
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa2b 	bl	8004176 <USB_WritePacket>
 8003d20:	e0ce      	b.n	8003ec0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3c:	0cdb      	lsrs	r3, r3, #19
 8003d3e:	04db      	lsls	r3, r3, #19
 8003d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d126      	bne.n	8003dbc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d84:	69b9      	ldr	r1, [r7, #24]
 8003d86:	0148      	lsls	r0, r1, #5
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	4401      	add	r1, r0
 8003d8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d90:	4313      	orrs	r3, r2
 8003d92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003db2:	6113      	str	r3, [r2, #16]
 8003db4:	e036      	b.n	8003e24 <USB_EPStartXfer+0x3dc>
 8003db6:	bf00      	nop
 8003db8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	1e5a      	subs	r2, r3, #1
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	8afb      	ldrh	r3, [r7, #22]
 8003de2:	04d9      	lsls	r1, r3, #19
 8003de4:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <USB_EPStartXfer+0x484>)
 8003de6:	400b      	ands	r3, r1
 8003de8:	69b9      	ldr	r1, [r7, #24]
 8003dea:	0148      	lsls	r0, r1, #5
 8003dec:	69f9      	ldr	r1, [r7, #28]
 8003dee:	4401      	add	r1, r0
 8003df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003df4:	4313      	orrs	r3, r2
 8003df6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	8af9      	ldrh	r1, [r7, #22]
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	0148      	lsls	r0, r1, #5
 8003e18:	69f9      	ldr	r1, [r7, #28]
 8003e1a:	4401      	add	r1, r0
 8003e1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e20:	4313      	orrs	r3, r2
 8003e22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10d      	bne.n	8003e46 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	68d9      	ldr	r1, [r3, #12]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	460a      	mov	r2, r1
 8003e44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	78db      	ldrb	r3, [r3, #3]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d128      	bne.n	8003ea0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d110      	bne.n	8003e80 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e00f      	b.n	8003ea0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	1ff80000 	.word	0x1ff80000

08003ed0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 80cd 	bne.w	800408c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d132      	bne.n	8003f60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	0151      	lsls	r1, r2, #5
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	440a      	add	r2, r1
 8003f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	0151      	lsls	r1, r2, #5
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	440a      	add	r2, r1
 8003f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f58:	0cdb      	lsrs	r3, r3, #19
 8003f5a:	04db      	lsls	r3, r3, #19
 8003f5c:	6113      	str	r3, [r2, #16]
 8003f5e:	e04e      	b.n	8003ffe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	0151      	lsls	r1, r2, #5
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	440a      	add	r2, r1
 8003f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7a:	0cdb      	lsrs	r3, r3, #19
 8003f7c:	04db      	lsls	r3, r3, #19
 8003f7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fa2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d903      	bls.n	8003fb8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fee:	6939      	ldr	r1, [r7, #16]
 8003ff0:	0148      	lsls	r0, r1, #5
 8003ff2:	6979      	ldr	r1, [r7, #20]
 8003ff4:	4401      	add	r1, r0
 8003ff6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d11e      	bne.n	8004042 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e092      	b.n	8004168 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004060:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d07e      	beq.n	8004168 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	2101      	movs	r1, #1
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004086:	4313      	orrs	r3, r2
 8004088:	634b      	str	r3, [r1, #52]	; 0x34
 800408a:	e06d      	b.n	8004168 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	0151      	lsls	r1, r2, #5
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	440a      	add	r2, r1
 80040a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a6:	0cdb      	lsrs	r3, r3, #19
 80040a8:	04db      	lsls	r3, r3, #19
 80040aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	0151      	lsls	r1, r2, #5
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	440a      	add	r2, r1
 80040c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004116:	6939      	ldr	r1, [r7, #16]
 8004118:	0148      	lsls	r0, r1, #5
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	4401      	add	r1, r0
 800411e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004122:	4313      	orrs	r3, r2
 8004124:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d10d      	bne.n	8004148 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	68d9      	ldr	r1, [r3, #12]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	460a      	mov	r2, r1
 8004146:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	0151      	lsls	r1, r2, #5
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	440a      	add	r2, r1
 800415e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004176:	b480      	push	{r7}
 8004178:	b089      	sub	sp, #36	; 0x24
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	4611      	mov	r1, r2
 8004182:	461a      	mov	r2, r3
 8004184:	460b      	mov	r3, r1
 8004186:	71fb      	strb	r3, [r7, #7]
 8004188:	4613      	mov	r3, r2
 800418a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004194:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d123      	bne.n	80041e4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800419c:	88bb      	ldrh	r3, [r7, #4]
 800419e:	3303      	adds	r3, #3
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e018      	b.n	80041dc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	031a      	lsls	r2, r3, #12
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b6:	461a      	mov	r2, r3
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3301      	adds	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	3301      	adds	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	3301      	adds	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	3301      	adds	r3, #1
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3e2      	bcc.n	80041aa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3724      	adds	r7, #36	; 0x24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b08b      	sub	sp, #44	; 0x2c
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	4613      	mov	r3, r2
 80041fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	b29b      	uxth	r3, r3
 800420e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
 800421c:	e014      	b.n	8004248 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	601a      	str	r2, [r3, #0]
    pDest++;
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	3301      	adds	r3, #1
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	3301      	adds	r3, #1
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	3301      	adds	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	3301      	adds	r3, #1
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	3301      	adds	r3, #1
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	d3e6      	bcc.n	800421e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004250:	8bfb      	ldrh	r3, [r7, #30]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01e      	beq.n	8004294 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004260:	461a      	mov	r2, r3
 8004262:	f107 0310 	add.w	r3, r7, #16
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	b2da      	uxtb	r2, r3
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	701a      	strb	r2, [r3, #0]
      i++;
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	3301      	adds	r3, #1
 8004280:	623b      	str	r3, [r7, #32]
      pDest++;
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	3301      	adds	r3, #1
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004288:	8bfb      	ldrh	r3, [r7, #30]
 800428a:	3b01      	subs	r3, #1
 800428c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800428e:	8bfb      	ldrh	r3, [r7, #30]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ea      	bne.n	800426a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004296:	4618      	mov	r0, r3
 8004298:	372c      	adds	r7, #44	; 0x2c
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d12c      	bne.n	8004318 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	db12      	blt.n	80042f6 <USB_EPSetStall+0x54>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00f      	beq.n	80042f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	440a      	add	r2, r1
 800430c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e02b      	b.n	8004370 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	db12      	blt.n	8004350 <USB_EPSetStall+0xae>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00f      	beq.n	8004350 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800434e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800436a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800436e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	785b      	ldrb	r3, [r3, #1]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d128      	bne.n	80043ec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	78db      	ldrb	r3, [r3, #3]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d003      	beq.n	80043ca <USB_EPClearStall+0x4c>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	78db      	ldrb	r3, [r3, #3]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d138      	bne.n	800443c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e027      	b.n	800443c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800440a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	78db      	ldrb	r3, [r3, #3]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d003      	beq.n	800441c <USB_EPClearStall+0x9e>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	78db      	ldrb	r3, [r3, #3]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d10f      	bne.n	800443c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004468:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800446c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044b0:	f023 0303 	bic.w	r3, r3, #3
 80044b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c4:	f023 0302 	bic.w	r3, r3, #2
 80044c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004506:	f043 0302 	orr.w	r3, r3, #2
 800450a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004532:	68fb      	ldr	r3, [r7, #12]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	0c1b      	lsrs	r3, r3, #16
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	4013      	ands	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	b29b      	uxth	r3, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	4013      	ands	r3, r2
 80045d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045d6:	68bb      	ldr	r3, [r7, #8]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	01db      	lsls	r3, r3, #7
 8004616:	b2db      	uxtb	r3, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004632:	68bb      	ldr	r3, [r7, #8]
}
 8004634:	4618      	mov	r0, r3
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0301 	and.w	r3, r3, #1
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800467a:	f023 0307 	bic.w	r3, r3, #7
 800467e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800468e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004692:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	460b      	mov	r3, r1
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	333c      	adds	r3, #60	; 0x3c
 80046ba:	3304      	adds	r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4a26      	ldr	r2, [pc, #152]	; (800475c <USB_EP0_OutStart+0xb8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d90a      	bls.n	80046de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d8:	d101      	bne.n	80046de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e037      	b.n	800474e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e4:	461a      	mov	r2, r3
 80046e6:	2300      	movs	r3, #0
 80046e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470c:	f043 0318 	orr.w	r3, r3, #24
 8004710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004720:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004724:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004726:	7afb      	ldrb	r3, [r7, #11]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d10f      	bne.n	800474c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	461a      	mov	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004746:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800474a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	4f54300a 	.word	0x4f54300a

08004760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <USB_CoreReset+0x60>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e01a      	b.n	80047b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	daf3      	bge.n	800476c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f043 0201 	orr.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <USB_CoreReset+0x60>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e006      	b.n	80047b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d0f1      	beq.n	8004794 <USB_CoreReset+0x34>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	00030d40 	.word	0x00030d40

080047c4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80047d0:	2018      	movs	r0, #24
 80047d2:	f002 f80b 	bl	80067ec <USBD_static_malloc>
 80047d6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80047e6:	2302      	movs	r3, #2
 80047e8:	e038      	b.n	800485c <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7c1b      	ldrb	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d107      	bne.n	800480a <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2205      	movs	r2, #5
 80047fe:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2205      	movs	r2, #5
 8004804:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8004808:	e006      	b.n	8004818 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	220a      	movs	r2, #10
 800480e:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	220a      	movs	r2, #10
 8004814:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004818:	2340      	movs	r3, #64	; 0x40
 800481a:	2203      	movs	r2, #3
 800481c:	2181      	movs	r1, #129	; 0x81
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f001 fed3 	bl	80065ca <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	2203      	movs	r2, #3
 800482e:	2101      	movs	r1, #1
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f001 feca 	bl	80065ca <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	2302      	movs	r3, #2
 8004852:	2101      	movs	r1, #1
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f001 ffa7 	bl	80067a8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004870:	2181      	movs	r1, #129	; 0x81
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f001 fecf 	bl	8006616 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004884:	2101      	movs	r1, #1
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f001 fec5 	bl	8006616 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00e      	beq.n	80048c4 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 ffa6 	bl	8006808 <USBD_static_free>
    pdev->pClassData = NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048e0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0ed      	b.n	8004ad8 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004904:	2b00      	cmp	r3, #0
 8004906:	d052      	beq.n	80049ae <USBD_CUSTOM_HID_Setup+0xde>
 8004908:	2b20      	cmp	r3, #32
 800490a:	f040 80dd 	bne.w	8004ac8 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	3b02      	subs	r3, #2
 8004914:	2b09      	cmp	r3, #9
 8004916:	d842      	bhi.n	800499e <USBD_CUSTOM_HID_Setup+0xce>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <USBD_CUSTOM_HID_Setup+0x50>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004979 	.word	0x08004979
 8004924:	08004957 	.word	0x08004957
 8004928:	0800499f 	.word	0x0800499f
 800492c:	0800499f 	.word	0x0800499f
 8004930:	0800499f 	.word	0x0800499f
 8004934:	0800499f 	.word	0x0800499f
 8004938:	0800499f 	.word	0x0800499f
 800493c:	08004989 	.word	0x08004989
 8004940:	08004967 	.word	0x08004967
 8004944:	08004949 	.word	0x08004949
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	885b      	ldrh	r3, [r3, #2]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]
          break;
 8004954:	e02a      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3304      	adds	r3, #4
 800495a:	2201      	movs	r2, #1
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f001 fa8f 	bl	8005e82 <USBD_CtlSendData>
          break;
 8004964:	e022      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	885b      	ldrh	r3, [r3, #2]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	b29b      	uxth	r3, r3
 800496e:	b2db      	uxtb	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	609a      	str	r2, [r3, #8]
          break;
 8004976:	e019      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	3308      	adds	r3, #8
 800497c:	2201      	movs	r2, #1
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f001 fa7e 	bl	8005e82 <USBD_CtlSendData>
          break;
 8004986:	e011      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2201      	movs	r2, #1
 800498c:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800498e:	6939      	ldr	r1, [r7, #16]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	88db      	ldrh	r3, [r3, #6]
 8004994:	461a      	mov	r2, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f001 fa9f 	bl	8005eda <USBD_CtlPrepareRx>
          break;
 800499c:	e006      	b.n	80049ac <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 f9fd 	bl	8005da0 <USBD_CtlError>
          ret = USBD_FAIL;
 80049a6:	2303      	movs	r3, #3
 80049a8:	75fb      	strb	r3, [r7, #23]
          break;
 80049aa:	bf00      	nop
      }
      break;
 80049ac:	e093      	b.n	8004ad6 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	785b      	ldrb	r3, [r3, #1]
 80049b2:	2b0b      	cmp	r3, #11
 80049b4:	d87f      	bhi.n	8004ab6 <USBD_CUSTOM_HID_Setup+0x1e6>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <USBD_CUSTOM_HID_Setup+0xec>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049ed 	.word	0x080049ed
 80049c0:	08004ac5 	.word	0x08004ac5
 80049c4:	08004ab7 	.word	0x08004ab7
 80049c8:	08004ab7 	.word	0x08004ab7
 80049cc:	08004ab7 	.word	0x08004ab7
 80049d0:	08004ab7 	.word	0x08004ab7
 80049d4:	08004a17 	.word	0x08004a17
 80049d8:	08004ab7 	.word	0x08004ab7
 80049dc:	08004ab7 	.word	0x08004ab7
 80049e0:	08004ab7 	.word	0x08004ab7
 80049e4:	08004a65 	.word	0x08004a65
 80049e8:	08004a8f 	.word	0x08004a8f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d107      	bne.n	8004a08 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80049f8:	f107 030e 	add.w	r3, r7, #14
 80049fc:	2202      	movs	r2, #2
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f001 fa3e 	bl	8005e82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a06:	e05e      	b.n	8004ac6 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004a08:	6839      	ldr	r1, [r7, #0]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 f9c8 	bl	8005da0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a10:	2303      	movs	r3, #3
 8004a12:	75fb      	strb	r3, [r7, #23]
          break;
 8004a14:	e057      	b.n	8004ac6 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	885b      	ldrh	r3, [r3, #2]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b22      	cmp	r3, #34	; 0x22
 8004a20:	d10b      	bne.n	8004a3a <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	88db      	ldrh	r3, [r3, #6]
 8004a26:	2b21      	cmp	r3, #33	; 0x21
 8004a28:	bf28      	it	cs
 8004a2a:	2321      	movcs	r3, #33	; 0x21
 8004a2c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	e00d      	b.n	8004a56 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	885b      	ldrh	r3, [r3, #2]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b21      	cmp	r3, #33	; 0x21
 8004a44:	d107      	bne.n	8004a56 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004a46:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <USBD_CUSTOM_HID_Setup+0x210>)
 8004a48:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	88db      	ldrh	r3, [r3, #6]
 8004a4e:	2b09      	cmp	r3, #9
 8004a50:	bf28      	it	cs
 8004a52:	2309      	movcs	r3, #9
 8004a54:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004a56:	8bfb      	ldrh	r3, [r7, #30]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	69b9      	ldr	r1, [r7, #24]
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f001 fa10 	bl	8005e82 <USBD_CtlSendData>
          break;
 8004a62:	e030      	b.n	8004ac6 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d107      	bne.n	8004a80 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	330c      	adds	r3, #12
 8004a74:	2201      	movs	r2, #1
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f001 fa02 	bl	8005e82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a7e:	e022      	b.n	8004ac6 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 f98c 	bl	8005da0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	75fb      	strb	r3, [r7, #23]
          break;
 8004a8c:	e01b      	b.n	8004ac6 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d106      	bne.n	8004aa8 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	885b      	ldrh	r3, [r3, #2]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004aa6:	e00e      	b.n	8004ac6 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004aa8:	6839      	ldr	r1, [r7, #0]
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 f978 	bl	8005da0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	75fb      	strb	r3, [r7, #23]
          break;
 8004ab4:	e007      	b.n	8004ac6 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 f971 	bl	8005da0 <USBD_CtlError>
          ret = USBD_FAIL;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ac2:	e000      	b.n	8004ac6 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8004ac4:	bf00      	nop
      }
      break;
 8004ac6:	e006      	b.n	8004ad6 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 f968 	bl	8005da0 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad4:	bf00      	nop
  }
  return (uint8_t)ret;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	200000c8 	.word	0x200000c8

08004ae4 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e01a      	b.n	8004b36 <USBD_CUSTOM_HID_SendReport+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b06:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d10f      	bne.n	8004b34 <USBD_CUSTOM_HID_SendReport+0x50>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	7d1b      	ldrb	r3, [r3, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <USBD_CUSTOM_HID_SendReport+0x4c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	2181      	movs	r1, #129	; 0x81
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f001 fe1c 	bl	8006766 <USBD_LL_Transmit>
 8004b2e:	e001      	b.n	8004b34 <USBD_CUSTOM_HID_SendReport+0x50>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <USBD_CUSTOM_HID_SendReport+0x52>
    }
  }
  return (uint8_t)USBD_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2229      	movs	r2, #41	; 0x29
 8004b4c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8004b4e:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	20000044 	.word	0x20000044

08004b60 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2229      	movs	r2, #41	; 0x29
 8004b6c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8004b6e:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	20000070 	.word	0x20000070

08004b80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2229      	movs	r2, #41	; 0x29
 8004b8c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004b8e:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	2000009c 	.word	0x2000009c

08004ba0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bd6:	60fb      	str	r3, [r7, #12]
	((USBD_CUSTOM_HID_ItfTypeDef *) pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4610      	mov	r0, r2
 8004be4:	4798      	blx	r3
    USBD_LL_PrepareReceive (pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	2302      	movs	r3, #2
 8004bea:	2101      	movs	r1, #1
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 fddb 	bl	80067a8 <USBD_LL_PrepareReceive>
    return (uint8_t) USBD_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e00a      	b.n	8004c28 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	2101      	movs	r1, #1
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f001 fdc1 	bl	80067a8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c3e:	60fb      	str	r3, [r7, #12]

	if (hhid->IsReportAvailable == 1)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d109      	bne.n	8004c5c <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
	{
		((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4610      	mov	r0, r2
 8004c54:	4798      	blx	r3
		hhid->IsReportAvailable = 0;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	611a      	str	r2, [r3, #16]
	}
	return USBD_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	220a      	movs	r2, #10
 8004c74:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004c76:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	200000d4 	.word	0x200000d4

08004c88 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e004      	b.n	8004ca6 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e01f      	b.n	8004d0a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	79fa      	ldrb	r2, [r7, #7]
 8004cfc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f001 fbfc 	bl	80064fc <USBD_LL_Init>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e016      	b.n	8004d58 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	f107 020e 	add.w	r2, r7, #14
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4798      	blx	r3
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 fc13 	bl	8006594 <USBD_LL_Start>
 8004d6e:	4603      	mov	r3, r0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	460b      	mov	r3, r1
 8004d98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	4611      	mov	r1, r2
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	4611      	mov	r1, r2
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	4798      	blx	r3
  }

  return USBD_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 ff8f 	bl	8005d2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d01a      	beq.n	8004e68 <USBD_LL_SetupStage+0x72>
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d822      	bhi.n	8004e7c <USBD_LL_SetupStage+0x86>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <USBD_LL_SetupStage+0x4a>
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d00a      	beq.n	8004e54 <USBD_LL_SetupStage+0x5e>
 8004e3e:	e01d      	b.n	8004e7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e46:	4619      	mov	r1, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa61 	bl	8005310 <USBD_StdDevReq>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	73fb      	strb	r3, [r7, #15]
      break;
 8004e52:	e020      	b.n	8004e96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fac5 	bl	80053ec <USBD_StdItfReq>
 8004e62:	4603      	mov	r3, r0
 8004e64:	73fb      	strb	r3, [r7, #15]
      break;
 8004e66:	e016      	b.n	8004e96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fb04 	bl	800547e <USBD_StdEPReq>
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7a:	e00c      	b.n	8004e96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 fbe2 	bl	8006654 <USBD_LL_StallEP>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]
      break;
 8004e94:	bf00      	nop
  }

  return ret;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004eae:	7afb      	ldrb	r3, [r7, #11]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d138      	bne.n	8004f26 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004eba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d14a      	bne.n	8004f5c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d913      	bls.n	8004efa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	bf28      	it	cs
 8004eec:	4613      	movcs	r3, r2
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f001 f80e 	bl	8005f14 <USBD_CtlContinueRx>
 8004ef8:	e030      	b.n	8004f5c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d10b      	bne.n	8004f1e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f001 f809 	bl	8005f36 <USBD_CtlSendStatus>
 8004f24:	e01a      	b.n	8004f5c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d114      	bne.n	8004f5c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	7afa      	ldrb	r2, [r7, #11]
 8004f48:	4611      	mov	r1, r2
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	4798      	blx	r3
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	e000      	b.n	8004f5e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	607a      	str	r2, [r7, #4]
 8004f72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004f74:	7afb      	ldrb	r3, [r7, #11]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d16b      	bne.n	8005052 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d156      	bne.n	8005038 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d914      	bls.n	8004fc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	1ad2      	subs	r2, r2, r3
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 ff83 	bl	8005eb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f001 fbf5 	bl	80067a8 <USBD_LL_PrepareReceive>
 8004fbe:	e03b      	b.n	8005038 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d11c      	bne.n	8005006 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d316      	bcc.n	8005006 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d20f      	bcs.n	8005006 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 ff64 	bl	8005eb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f001 fbd2 	bl	80067a8 <USBD_LL_PrepareReceive>
 8005004:	e018      	b.n	8005038 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b03      	cmp	r3, #3
 8005010:	d10b      	bne.n	800502a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800502a:	2180      	movs	r1, #128	; 0x80
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f001 fb11 	bl	8006654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 ff92 	bl	8005f5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d122      	bne.n	8005088 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff fe98 	bl	8004d78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005050:	e01a      	b.n	8005088 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b03      	cmp	r3, #3
 800505c:	d114      	bne.n	8005088 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	7afa      	ldrb	r2, [r7, #11]
 8005074:	4611      	mov	r1, r2
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	4798      	blx	r3
 800507a:	4603      	mov	r3, r0
 800507c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	e000      	b.n	800508a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e02f      	b.n	8005126 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00f      	beq.n	80050f0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d009      	beq.n	80050f0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6852      	ldr	r2, [r2, #4]
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	4611      	mov	r1, r2
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	2200      	movs	r2, #0
 80050f4:	2100      	movs	r1, #0
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f001 fa67 	bl	80065ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2240      	movs	r2, #64	; 0x40
 8005108:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800510c:	2340      	movs	r3, #64	; 0x40
 800510e:	2200      	movs	r2, #0
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 fa59 	bl	80065ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2240      	movs	r2, #64	; 0x40
 8005122:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800515c:	b2da      	uxtb	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2204      	movs	r2, #4
 8005168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b04      	cmp	r3, #4
 800518c:	d106      	bne.n	800519c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005194:	b2da      	uxtb	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80051bc:	2303      	movs	r3, #3
 80051be:	e012      	b.n	80051e6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d10b      	bne.n	80051e4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	460b      	mov	r3, r1
 80051f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005204:	2303      	movs	r3, #3
 8005206:	e014      	b.n	8005232 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b03      	cmp	r3, #3
 8005212:	d10d      	bne.n	8005230 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	4611      	mov	r1, r2
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	460b      	mov	r3, r1
 8005244:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005250:	2303      	movs	r3, #3
 8005252:	e014      	b.n	800527e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b03      	cmp	r3, #3
 800525e:	d10d      	bne.n	800527c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	4611      	mov	r1, r2
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6852      	ldr	r2, [r2, #4]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	4611      	mov	r1, r2
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
  }

  return USBD_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3301      	adds	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80052f2:	8a3b      	ldrh	r3, [r7, #16]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	b21a      	sxth	r2, r3
 80052f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b21b      	sxth	r3, r3
 8005300:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005302:	89fb      	ldrh	r3, [r7, #14]
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d005      	beq.n	8005336 <USBD_StdDevReq+0x26>
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d853      	bhi.n	80053d6 <USBD_StdDevReq+0xc6>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <USBD_StdDevReq+0x3a>
 8005332:	2b20      	cmp	r3, #32
 8005334:	d14f      	bne.n	80053d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
      break;
 8005348:	e04a      	b.n	80053e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b09      	cmp	r3, #9
 8005350:	d83b      	bhi.n	80053ca <USBD_StdDevReq+0xba>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <USBD_StdDevReq+0x48>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	080053ad 	.word	0x080053ad
 800535c:	080053c1 	.word	0x080053c1
 8005360:	080053cb 	.word	0x080053cb
 8005364:	080053b7 	.word	0x080053b7
 8005368:	080053cb 	.word	0x080053cb
 800536c:	0800538b 	.word	0x0800538b
 8005370:	08005381 	.word	0x08005381
 8005374:	080053cb 	.word	0x080053cb
 8005378:	080053a3 	.word	0x080053a3
 800537c:	08005395 	.word	0x08005395
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f9de 	bl	8005744 <USBD_GetDescriptor>
          break;
 8005388:	e024      	b.n	80053d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800538a:	6839      	ldr	r1, [r7, #0]
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fb43 	bl	8005a18 <USBD_SetAddress>
          break;
 8005392:	e01f      	b.n	80053d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fb82 	bl	8005aa0 <USBD_SetConfig>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
          break;
 80053a0:	e018      	b.n	80053d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fc21 	bl	8005bec <USBD_GetConfig>
          break;
 80053aa:	e013      	b.n	80053d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fc52 	bl	8005c58 <USBD_GetStatus>
          break;
 80053b4:	e00e      	b.n	80053d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fc81 	bl	8005cc0 <USBD_SetFeature>
          break;
 80053be:	e009      	b.n	80053d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fc90 	bl	8005ce8 <USBD_ClrFeature>
          break;
 80053c8:	e004      	b.n	80053d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fce7 	bl	8005da0 <USBD_CtlError>
          break;
 80053d2:	bf00      	nop
      }
      break;
 80053d4:	e004      	b.n	80053e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fce1 	bl	8005da0 <USBD_CtlError>
      break;
 80053de:	bf00      	nop
  }

  return ret;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop

080053ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d005      	beq.n	8005412 <USBD_StdItfReq+0x26>
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d82f      	bhi.n	800546a <USBD_StdItfReq+0x7e>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <USBD_StdItfReq+0x26>
 800540e:	2b20      	cmp	r3, #32
 8005410:	d12b      	bne.n	800546a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005418:	b2db      	uxtb	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	2b02      	cmp	r3, #2
 800541e:	d81d      	bhi.n	800545c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	889b      	ldrh	r3, [r3, #4]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d813      	bhi.n	8005452 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	88db      	ldrh	r3, [r3, #6]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d110      	bne.n	8005466 <USBD_StdItfReq+0x7a>
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fd73 	bl	8005f36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005450:	e009      	b.n	8005466 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fca3 	bl	8005da0 <USBD_CtlError>
          break;
 800545a:	e004      	b.n	8005466 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fc9e 	bl	8005da0 <USBD_CtlError>
          break;
 8005464:	e000      	b.n	8005468 <USBD_StdItfReq+0x7c>
          break;
 8005466:	bf00      	nop
      }
      break;
 8005468:	e004      	b.n	8005474 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fc97 	bl	8005da0 <USBD_CtlError>
      break;
 8005472:	bf00      	nop
  }

  return ret;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	889b      	ldrh	r3, [r3, #4]
 8005490:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d007      	beq.n	80054ae <USBD_StdEPReq+0x30>
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	f200 8145 	bhi.w	800572e <USBD_StdEPReq+0x2b0>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <USBD_StdEPReq+0x44>
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	f040 8140 	bne.w	800572e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	4798      	blx	r3
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	e13a      	b.n	8005738 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d007      	beq.n	80054da <USBD_StdEPReq+0x5c>
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	f300 8129 	bgt.w	8005722 <USBD_StdEPReq+0x2a4>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d07f      	beq.n	80055d4 <USBD_StdEPReq+0x156>
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d03c      	beq.n	8005552 <USBD_StdEPReq+0xd4>
 80054d8:	e123      	b.n	8005722 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d002      	beq.n	80054ec <USBD_StdEPReq+0x6e>
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d016      	beq.n	8005518 <USBD_StdEPReq+0x9a>
 80054ea:	e02c      	b.n	8005546 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <USBD_StdEPReq+0x90>
 80054f2:	7bbb      	ldrb	r3, [r7, #14]
 80054f4:	2b80      	cmp	r3, #128	; 0x80
 80054f6:	d00a      	beq.n	800550e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80054f8:	7bbb      	ldrb	r3, [r7, #14]
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f001 f8a9 	bl	8006654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 f8a5 	bl	8006654 <USBD_LL_StallEP>
 800550a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800550c:	e020      	b.n	8005550 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fc45 	bl	8005da0 <USBD_CtlError>
              break;
 8005516:	e01b      	b.n	8005550 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	885b      	ldrh	r3, [r3, #2]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10e      	bne.n	800553e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <USBD_StdEPReq+0xc0>
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	2b80      	cmp	r3, #128	; 0x80
 800552a:	d008      	beq.n	800553e <USBD_StdEPReq+0xc0>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	88db      	ldrh	r3, [r3, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 f88b 	bl	8006654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fcf9 	bl	8005f36 <USBD_CtlSendStatus>

              break;
 8005544:	e004      	b.n	8005550 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fc29 	bl	8005da0 <USBD_CtlError>
              break;
 800554e:	bf00      	nop
          }
          break;
 8005550:	e0ec      	b.n	800572c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d002      	beq.n	8005564 <USBD_StdEPReq+0xe6>
 800555e:	2b03      	cmp	r3, #3
 8005560:	d016      	beq.n	8005590 <USBD_StdEPReq+0x112>
 8005562:	e030      	b.n	80055c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <USBD_StdEPReq+0x108>
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d00a      	beq.n	8005586 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 f86d 	bl	8006654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800557a:	2180      	movs	r1, #128	; 0x80
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f001 f869 	bl	8006654 <USBD_LL_StallEP>
 8005582:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005584:	e025      	b.n	80055d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fc09 	bl	8005da0 <USBD_CtlError>
              break;
 800558e:	e020      	b.n	80055d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	885b      	ldrh	r3, [r3, #2]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11b      	bne.n	80055d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005598:	7bbb      	ldrb	r3, [r7, #14]
 800559a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 f873 	bl	8006692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fcc2 	bl	8005f36 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4798      	blx	r3
 80055c0:	4603      	mov	r3, r0
 80055c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80055c4:	e004      	b.n	80055d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fbe9 	bl	8005da0 <USBD_CtlError>
              break;
 80055ce:	e000      	b.n	80055d2 <USBD_StdEPReq+0x154>
              break;
 80055d0:	bf00      	nop
          }
          break;
 80055d2:	e0ab      	b.n	800572c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d002      	beq.n	80055e6 <USBD_StdEPReq+0x168>
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d032      	beq.n	800564a <USBD_StdEPReq+0x1cc>
 80055e4:	e097      	b.n	8005716 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055e6:	7bbb      	ldrb	r3, [r7, #14]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <USBD_StdEPReq+0x17e>
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d004      	beq.n	80055fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fbd3 	bl	8005da0 <USBD_CtlError>
                break;
 80055fa:	e091      	b.n	8005720 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005600:	2b00      	cmp	r3, #0
 8005602:	da0b      	bge.n	800561c <USBD_StdEPReq+0x19e>
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	3310      	adds	r3, #16
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	3304      	adds	r3, #4
 800561a:	e00b      	b.n	8005634 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2202      	movs	r2, #2
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fc1d 	bl	8005e82 <USBD_CtlSendData>
              break;
 8005648:	e06a      	b.n	8005720 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800564a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800564e:	2b00      	cmp	r3, #0
 8005650:	da11      	bge.n	8005676 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005652:	7bbb      	ldrb	r3, [r7, #14]
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	3324      	adds	r3, #36	; 0x24
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d117      	bne.n	800569c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fb96 	bl	8005da0 <USBD_CtlError>
                  break;
 8005674:	e054      	b.n	8005720 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005676:	7bbb      	ldrb	r3, [r7, #14]
 8005678:	f003 020f 	and.w	r2, r3, #15
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fb83 	bl	8005da0 <USBD_CtlError>
                  break;
 800569a:	e041      	b.n	8005720 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800569c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da0b      	bge.n	80056bc <USBD_StdEPReq+0x23e>
 80056a4:	7bbb      	ldrb	r3, [r7, #14]
 80056a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	3310      	adds	r3, #16
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	4413      	add	r3, r2
 80056b8:	3304      	adds	r3, #4
 80056ba:	e00b      	b.n	80056d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056bc:	7bbb      	ldrb	r3, [r7, #14]
 80056be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	3304      	adds	r3, #4
 80056d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80056d6:	7bbb      	ldrb	r3, [r7, #14]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <USBD_StdEPReq+0x264>
 80056dc:	7bbb      	ldrb	r3, [r7, #14]
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d103      	bne.n	80056ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e00e      	b.n	8005708 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80056ea:	7bbb      	ldrb	r3, [r7, #14]
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 ffee 	bl	80066d0 <USBD_LL_IsStallEP>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2201      	movs	r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e002      	b.n	8005708 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2202      	movs	r2, #2
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fbb7 	bl	8005e82 <USBD_CtlSendData>
              break;
 8005714:	e004      	b.n	8005720 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fb41 	bl	8005da0 <USBD_CtlError>
              break;
 800571e:	bf00      	nop
          }
          break;
 8005720:	e004      	b.n	800572c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fb3b 	bl	8005da0 <USBD_CtlError>
          break;
 800572a:	bf00      	nop
      }
      break;
 800572c:	e004      	b.n	8005738 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fb35 	bl	8005da0 <USBD_CtlError>
      break;
 8005736:	bf00      	nop
  }

  return ret;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	885b      	ldrh	r3, [r3, #2]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	2b06      	cmp	r3, #6
 8005766:	f200 8128 	bhi.w	80059ba <USBD_GetDescriptor+0x276>
 800576a:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <USBD_GetDescriptor+0x2c>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	0800578d 	.word	0x0800578d
 8005774:	080057a5 	.word	0x080057a5
 8005778:	080057e5 	.word	0x080057e5
 800577c:	080059bb 	.word	0x080059bb
 8005780:	080059bb 	.word	0x080059bb
 8005784:	0800595b 	.word	0x0800595b
 8005788:	08005987 	.word	0x08005987
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	7c12      	ldrb	r2, [r2, #16]
 8005798:	f107 0108 	add.w	r1, r7, #8
 800579c:	4610      	mov	r0, r2
 800579e:	4798      	blx	r3
 80057a0:	60f8      	str	r0, [r7, #12]
      break;
 80057a2:	e112      	b.n	80059ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7c1b      	ldrb	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10d      	bne.n	80057c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	f107 0208 	add.w	r2, r7, #8
 80057b8:	4610      	mov	r0, r2
 80057ba:	4798      	blx	r3
 80057bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3301      	adds	r3, #1
 80057c2:	2202      	movs	r2, #2
 80057c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80057c6:	e100      	b.n	80059ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f107 0208 	add.w	r2, r7, #8
 80057d4:	4610      	mov	r0, r2
 80057d6:	4798      	blx	r3
 80057d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	2202      	movs	r2, #2
 80057e0:	701a      	strb	r2, [r3, #0]
      break;
 80057e2:	e0f2      	b.n	80059ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	885b      	ldrh	r3, [r3, #2]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b05      	cmp	r3, #5
 80057ec:	f200 80ac 	bhi.w	8005948 <USBD_GetDescriptor+0x204>
 80057f0:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <USBD_GetDescriptor+0xb4>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	08005811 	.word	0x08005811
 80057fc:	08005845 	.word	0x08005845
 8005800:	08005879 	.word	0x08005879
 8005804:	080058ad 	.word	0x080058ad
 8005808:	080058e1 	.word	0x080058e1
 800580c:	08005915 	.word	0x08005915
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00b      	beq.n	8005834 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	7c12      	ldrb	r2, [r2, #16]
 8005828:	f107 0108 	add.w	r1, r7, #8
 800582c:	4610      	mov	r0, r2
 800582e:	4798      	blx	r3
 8005830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005832:	e091      	b.n	8005958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fab2 	bl	8005da0 <USBD_CtlError>
            err++;
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	3301      	adds	r3, #1
 8005840:	72fb      	strb	r3, [r7, #11]
          break;
 8005842:	e089      	b.n	8005958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	7c12      	ldrb	r2, [r2, #16]
 800585c:	f107 0108 	add.w	r1, r7, #8
 8005860:	4610      	mov	r0, r2
 8005862:	4798      	blx	r3
 8005864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005866:	e077      	b.n	8005958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa98 	bl	8005da0 <USBD_CtlError>
            err++;
 8005870:	7afb      	ldrb	r3, [r7, #11]
 8005872:	3301      	adds	r3, #1
 8005874:	72fb      	strb	r3, [r7, #11]
          break;
 8005876:	e06f      	b.n	8005958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	7c12      	ldrb	r2, [r2, #16]
 8005890:	f107 0108 	add.w	r1, r7, #8
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
 8005898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800589a:	e05d      	b.n	8005958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa7e 	bl	8005da0 <USBD_CtlError>
            err++;
 80058a4:	7afb      	ldrb	r3, [r7, #11]
 80058a6:	3301      	adds	r3, #1
 80058a8:	72fb      	strb	r3, [r7, #11]
          break;
 80058aa:	e055      	b.n	8005958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	7c12      	ldrb	r2, [r2, #16]
 80058c4:	f107 0108 	add.w	r1, r7, #8
 80058c8:	4610      	mov	r0, r2
 80058ca:	4798      	blx	r3
 80058cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058ce:	e043      	b.n	8005958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fa64 	bl	8005da0 <USBD_CtlError>
            err++;
 80058d8:	7afb      	ldrb	r3, [r7, #11]
 80058da:	3301      	adds	r3, #1
 80058dc:	72fb      	strb	r3, [r7, #11]
          break;
 80058de:	e03b      	b.n	8005958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	7c12      	ldrb	r2, [r2, #16]
 80058f8:	f107 0108 	add.w	r1, r7, #8
 80058fc:	4610      	mov	r0, r2
 80058fe:	4798      	blx	r3
 8005900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005902:	e029      	b.n	8005958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa4a 	bl	8005da0 <USBD_CtlError>
            err++;
 800590c:	7afb      	ldrb	r3, [r7, #11]
 800590e:	3301      	adds	r3, #1
 8005910:	72fb      	strb	r3, [r7, #11]
          break;
 8005912:	e021      	b.n	8005958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	7c12      	ldrb	r2, [r2, #16]
 800592c:	f107 0108 	add.w	r1, r7, #8
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
 8005934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005936:	e00f      	b.n	8005958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa30 	bl	8005da0 <USBD_CtlError>
            err++;
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	3301      	adds	r3, #1
 8005944:	72fb      	strb	r3, [r7, #11]
          break;
 8005946:	e007      	b.n	8005958 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa28 	bl	8005da0 <USBD_CtlError>
          err++;
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	3301      	adds	r3, #1
 8005954:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005956:	bf00      	nop
      }
      break;
 8005958:	e037      	b.n	80059ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7c1b      	ldrb	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	f107 0208 	add.w	r2, r7, #8
 800596e:	4610      	mov	r0, r2
 8005970:	4798      	blx	r3
 8005972:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005974:	e029      	b.n	80059ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fa11 	bl	8005da0 <USBD_CtlError>
        err++;
 800597e:	7afb      	ldrb	r3, [r7, #11]
 8005980:	3301      	adds	r3, #1
 8005982:	72fb      	strb	r3, [r7, #11]
      break;
 8005984:	e021      	b.n	80059ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7c1b      	ldrb	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10d      	bne.n	80059aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	f107 0208 	add.w	r2, r7, #8
 800599a:	4610      	mov	r0, r2
 800599c:	4798      	blx	r3
 800599e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	2207      	movs	r2, #7
 80059a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059a8:	e00f      	b.n	80059ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f9f7 	bl	8005da0 <USBD_CtlError>
        err++;
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	3301      	adds	r3, #1
 80059b6:	72fb      	strb	r3, [r7, #11]
      break;
 80059b8:	e007      	b.n	80059ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f9ef 	bl	8005da0 <USBD_CtlError>
      err++;
 80059c2:	7afb      	ldrb	r3, [r7, #11]
 80059c4:	3301      	adds	r3, #1
 80059c6:	72fb      	strb	r3, [r7, #11]
      break;
 80059c8:	bf00      	nop
  }

  if (err != 0U)
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d11e      	bne.n	8005a0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	88db      	ldrh	r3, [r3, #6]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d016      	beq.n	8005a06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80059d8:	893b      	ldrh	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00e      	beq.n	80059fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	88da      	ldrh	r2, [r3, #6]
 80059e2:	893b      	ldrh	r3, [r7, #8]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bf28      	it	cs
 80059e8:	4613      	movcs	r3, r2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80059ee:	893b      	ldrh	r3, [r7, #8]
 80059f0:	461a      	mov	r2, r3
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fa44 	bl	8005e82 <USBD_CtlSendData>
 80059fa:	e009      	b.n	8005a10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9ce 	bl	8005da0 <USBD_CtlError>
 8005a04:	e004      	b.n	8005a10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa95 	bl	8005f36 <USBD_CtlSendStatus>
 8005a0c:	e000      	b.n	8005a10 <USBD_GetDescriptor+0x2cc>
    return;
 8005a0e:	bf00      	nop
  }
}
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop

08005a18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	889b      	ldrh	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d131      	bne.n	8005a8e <USBD_SetAddress+0x76>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	88db      	ldrh	r3, [r3, #6]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d12d      	bne.n	8005a8e <USBD_SetAddress+0x76>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	885b      	ldrh	r3, [r3, #2]
 8005a36:	2b7f      	cmp	r3, #127	; 0x7f
 8005a38:	d829      	bhi.n	8005a8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	885b      	ldrh	r3, [r3, #2]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d104      	bne.n	8005a5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9a3 	bl	8005da0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a5a:	e01d      	b.n	8005a98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7bfa      	ldrb	r2, [r7, #15]
 8005a60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fe5d 	bl	8006728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa61 	bl	8005f36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d004      	beq.n	8005a84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a82:	e009      	b.n	8005a98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a8c:	e004      	b.n	8005a98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f985 	bl	8005da0 <USBD_CtlError>
  }
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	885b      	ldrh	r3, [r3, #2]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	4b4c      	ldr	r3, [pc, #304]	; (8005be8 <USBD_SetConfig+0x148>)
 8005ab6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <USBD_SetConfig+0x148>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d905      	bls.n	8005acc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f96c 	bl	8005da0 <USBD_CtlError>
    return USBD_FAIL;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e088      	b.n	8005bde <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d002      	beq.n	8005ade <USBD_SetConfig+0x3e>
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d025      	beq.n	8005b28 <USBD_SetConfig+0x88>
 8005adc:	e071      	b.n	8005bc2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005ade:	4b42      	ldr	r3, [pc, #264]	; (8005be8 <USBD_SetConfig+0x148>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01c      	beq.n	8005b20 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005ae6:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <USBD_SetConfig+0x148>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005af0:	4b3d      	ldr	r3, [pc, #244]	; (8005be8 <USBD_SetConfig+0x148>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff f949 	bl	8004d8e <USBD_SetClassConfig>
 8005afc:	4603      	mov	r3, r0
 8005afe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d004      	beq.n	8005b10 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f949 	bl	8005da0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005b0e:	e065      	b.n	8005bdc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa10 	bl	8005f36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005b1e:	e05d      	b.n	8005bdc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fa08 	bl	8005f36 <USBD_CtlSendStatus>
      break;
 8005b26:	e059      	b.n	8005bdc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005b28:	4b2f      	ldr	r3, [pc, #188]	; (8005be8 <USBD_SetConfig+0x148>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d112      	bne.n	8005b56 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005b38:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <USBD_SetConfig+0x148>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005b42:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <USBD_SetConfig+0x148>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff f93c 	bl	8004dc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f9f1 	bl	8005f36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005b54:	e042      	b.n	8005bdc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <USBD_SetConfig+0x148>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d02a      	beq.n	8005bba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff f92a 	bl	8004dc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005b72:	4b1d      	ldr	r3, [pc, #116]	; (8005be8 <USBD_SetConfig+0x148>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <USBD_SetConfig+0x148>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff f903 	bl	8004d8e <USBD_SetClassConfig>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00f      	beq.n	8005bb2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f903 	bl	8005da0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff f90f 	bl	8004dc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005bb0:	e014      	b.n	8005bdc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9bf 	bl	8005f36 <USBD_CtlSendStatus>
      break;
 8005bb8:	e010      	b.n	8005bdc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9bb 	bl	8005f36 <USBD_CtlSendStatus>
      break;
 8005bc0:	e00c      	b.n	8005bdc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f8eb 	bl	8005da0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005bca:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <USBD_SetConfig+0x148>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff f8f8 	bl	8004dc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bda:	bf00      	nop
  }

  return ret;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200001c8 	.word	0x200001c8

08005bec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	88db      	ldrh	r3, [r3, #6]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d004      	beq.n	8005c08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f8cd 	bl	8005da0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005c06:	e023      	b.n	8005c50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	dc02      	bgt.n	8005c1a <USBD_GetConfig+0x2e>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dc03      	bgt.n	8005c20 <USBD_GetConfig+0x34>
 8005c18:	e015      	b.n	8005c46 <USBD_GetConfig+0x5a>
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d00b      	beq.n	8005c36 <USBD_GetConfig+0x4a>
 8005c1e:	e012      	b.n	8005c46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f927 	bl	8005e82 <USBD_CtlSendData>
        break;
 8005c34:	e00c      	b.n	8005c50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f91f 	bl	8005e82 <USBD_CtlSendData>
        break;
 8005c44:	e004      	b.n	8005c50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f8a9 	bl	8005da0 <USBD_CtlError>
        break;
 8005c4e:	bf00      	nop
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d81e      	bhi.n	8005cae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	88db      	ldrh	r3, [r3, #6]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d004      	beq.n	8005c82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f890 	bl	8005da0 <USBD_CtlError>
        break;
 8005c80:	e01a      	b.n	8005cb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f043 0202 	orr.w	r2, r3, #2
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f8eb 	bl	8005e82 <USBD_CtlSendData>
      break;
 8005cac:	e004      	b.n	8005cb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f875 	bl	8005da0 <USBD_CtlError>
      break;
 8005cb6:	bf00      	nop
  }
}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	885b      	ldrh	r3, [r3, #2]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d106      	bne.n	8005ce0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f92b 	bl	8005f36 <USBD_CtlSendStatus>
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d80b      	bhi.n	8005d18 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	885b      	ldrh	r3, [r3, #2]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d10c      	bne.n	8005d22 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f910 	bl	8005f36 <USBD_CtlSendStatus>
      }
      break;
 8005d16:	e004      	b.n	8005d22 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f840 	bl	8005da0 <USBD_CtlError>
      break;
 8005d20:	e000      	b.n	8005d24 <USBD_ClrFeature+0x3c>
      break;
 8005d22:	bf00      	nop
  }
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	781a      	ldrb	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff fabc 	bl	80052d4 <SWAPBYTE>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff faaf 	bl	80052d4 <SWAPBYTE>
 8005d76:	4603      	mov	r3, r0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff faa2 	bl	80052d4 <SWAPBYTE>
 8005d90:	4603      	mov	r3, r0
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	80da      	strh	r2, [r3, #6]
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fc51 	bl	8006654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005db2:	2100      	movs	r1, #0
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fc4d 	bl	8006654 <USBD_LL_StallEP>
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b086      	sub	sp, #24
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d036      	beq.n	8005e46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005ddc:	6938      	ldr	r0, [r7, #16]
 8005dde:	f000 f836 	bl	8005e4e <USBD_GetLen>
 8005de2:	4603      	mov	r3, r0
 8005de4:	3301      	adds	r3, #1
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	701a      	strb	r2, [r3, #0]
  idx++;
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	4413      	add	r3, r2
 8005e08:	2203      	movs	r2, #3
 8005e0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005e12:	e013      	b.n	8005e3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4413      	add	r3, r2
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	3301      	adds	r3, #1
 8005e24:	613b      	str	r3, [r7, #16]
    idx++;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	4413      	add	r3, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
    idx++;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e7      	bne.n	8005e14 <USBD_GetString+0x52>
 8005e44:	e000      	b.n	8005e48 <USBD_GetString+0x86>
    return;
 8005e46:	bf00      	nop
  }
}
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005e5e:	e005      	b.n	8005e6c <USBD_GetLen+0x1e>
  {
    len++;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	3301      	adds	r3, #1
 8005e64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f5      	bne.n	8005e60 <USBD_GetLen+0x12>
  }

  return len;
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 fc5c 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fc4b 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2203      	movs	r2, #3
 8005eea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	2100      	movs	r1, #0
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fc4f 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	2100      	movs	r1, #0
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fc3e 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2204      	movs	r2, #4
 8005f42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f46:	2300      	movs	r3, #0
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fc0a 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2205      	movs	r2, #5
 8005f68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2100      	movs	r1, #0
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fc18 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4912      	ldr	r1, [pc, #72]	; (8005fd4 <MX_USB_DEVICE_Init+0x50>)
 8005f8c:	4812      	ldr	r0, [pc, #72]	; (8005fd8 <MX_USB_DEVICE_Init+0x54>)
 8005f8e:	f7fe fe90 	bl	8004cb2 <USBD_Init>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f98:	f7fa fbaa 	bl	80006f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005f9c:	490f      	ldr	r1, [pc, #60]	; (8005fdc <MX_USB_DEVICE_Init+0x58>)
 8005f9e:	480e      	ldr	r0, [pc, #56]	; (8005fd8 <MX_USB_DEVICE_Init+0x54>)
 8005fa0:	f7fe feb7 	bl	8004d12 <USBD_RegisterClass>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005faa:	f7fa fba1 	bl	80006f0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8005fae:	490c      	ldr	r1, [pc, #48]	; (8005fe0 <MX_USB_DEVICE_Init+0x5c>)
 8005fb0:	4809      	ldr	r0, [pc, #36]	; (8005fd8 <MX_USB_DEVICE_Init+0x54>)
 8005fb2:	f7fe fe69 	bl	8004c88 <USBD_CUSTOM_HID_RegisterInterface>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005fbc:	f7fa fb98 	bl	80006f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005fc0:	4805      	ldr	r0, [pc, #20]	; (8005fd8 <MX_USB_DEVICE_Init+0x54>)
 8005fc2:	f7fe fecd 	bl	8004d60 <USBD_Start>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005fcc:	f7fa fb90 	bl	80006f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005fd0:	bf00      	nop
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000114 	.word	0x20000114
 8005fd8:	200001cc 	.word	0x200001cc
 8005fdc:	2000000c 	.word	0x2000000c
 8005fe0:	20000104 	.word	0x20000104

08005fe4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005fe8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005ff8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8006004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  memcpy (buffer, state, 0x40);
 800600c:	4a0e      	ldr	r2, [pc, #56]	; (8006048 <CUSTOM_HID_OutEvent_FS+0x44>)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	461c      	mov	r4, r3
 8006012:	4616      	mov	r6, r2
 8006014:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8006018:	4635      	mov	r5, r6
 800601a:	4623      	mov	r3, r4
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	6859      	ldr	r1, [r3, #4]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006026:	3410      	adds	r4, #16
 8006028:	3610      	adds	r6, #16
 800602a:	4564      	cmp	r4, ip
 800602c:	d1f4      	bne.n	8006018 <CUSTOM_HID_OutEvent_FS+0x14>

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800602e:	4807      	ldr	r0, [pc, #28]	; (800604c <CUSTOM_HID_OutEvent_FS+0x48>)
 8006030:	f7fe fde4 	bl	8004bfc <USBD_CUSTOM_HID_ReceivePacket>
  USBD_CUSTOM_HID_SendReport (&hUsbDeviceFS, (uint8_t *)buffer, 0x40);
 8006034:	2240      	movs	r2, #64	; 0x40
 8006036:	4904      	ldr	r1, [pc, #16]	; (8006048 <CUSTOM_HID_OutEvent_FS+0x44>)
 8006038:	4804      	ldr	r0, [pc, #16]	; (800604c <CUSTOM_HID_OutEvent_FS+0x48>)
 800603a:	f7fe fd53 	bl	8004ae4 <USBD_CUSTOM_HID_SendReport>
  return (USBD_OK);
 800603e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006048:	2000049c 	.word	0x2000049c
 800604c:	200001cc 	.word	0x200001cc

08006050 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	6039      	str	r1, [r7, #0]
 800605a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2212      	movs	r2, #18
 8006060:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006062:	4b03      	ldr	r3, [pc, #12]	; (8006070 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	20000130 	.word	0x20000130

08006074 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	6039      	str	r1, [r7, #0]
 800607e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2204      	movs	r2, #4
 8006084:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006086:	4b03      	ldr	r3, [pc, #12]	; (8006094 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20000144 	.word	0x20000144

08006098 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	6039      	str	r1, [r7, #0]
 80060a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	4907      	ldr	r1, [pc, #28]	; (80060cc <USBD_FS_ProductStrDescriptor+0x34>)
 80060ae:	4808      	ldr	r0, [pc, #32]	; (80060d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80060b0:	f7ff fe87 	bl	8005dc2 <USBD_GetString>
 80060b4:	e004      	b.n	80060c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	4904      	ldr	r1, [pc, #16]	; (80060cc <USBD_FS_ProductStrDescriptor+0x34>)
 80060ba:	4805      	ldr	r0, [pc, #20]	; (80060d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80060bc:	f7ff fe81 	bl	8005dc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060c0:	4b02      	ldr	r3, [pc, #8]	; (80060cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	200004dc 	.word	0x200004dc
 80060d0:	080068e4 	.word	0x080068e4

080060d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	6039      	str	r1, [r7, #0]
 80060de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	4904      	ldr	r1, [pc, #16]	; (80060f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80060e4:	4804      	ldr	r0, [pc, #16]	; (80060f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80060e6:	f7ff fe6c 	bl	8005dc2 <USBD_GetString>
  return USBD_StrDesc;
 80060ea:	4b02      	ldr	r3, [pc, #8]	; (80060f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	200004dc 	.word	0x200004dc
 80060f8:	08006904 	.word	0x08006904

080060fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	6039      	str	r1, [r7, #0]
 8006106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	221a      	movs	r2, #26
 800610c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800610e:	f000 f843 	bl	8006198 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006112:	4b02      	ldr	r3, [pc, #8]	; (800611c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000148 	.word	0x20000148

08006120 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	6039      	str	r1, [r7, #0]
 800612a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d105      	bne.n	800613e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	4907      	ldr	r1, [pc, #28]	; (8006154 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006136:	4808      	ldr	r0, [pc, #32]	; (8006158 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006138:	f7ff fe43 	bl	8005dc2 <USBD_GetString>
 800613c:	e004      	b.n	8006148 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4904      	ldr	r1, [pc, #16]	; (8006154 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006142:	4805      	ldr	r0, [pc, #20]	; (8006158 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006144:	f7ff fe3d 	bl	8005dc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006148:	4b02      	ldr	r3, [pc, #8]	; (8006154 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200004dc 	.word	0x200004dc
 8006158:	08006918 	.word	0x08006918

0800615c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	6039      	str	r1, [r7, #0]
 8006166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d105      	bne.n	800617a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	4907      	ldr	r1, [pc, #28]	; (8006190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006172:	4808      	ldr	r0, [pc, #32]	; (8006194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006174:	f7ff fe25 	bl	8005dc2 <USBD_GetString>
 8006178:	e004      	b.n	8006184 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	4904      	ldr	r1, [pc, #16]	; (8006190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800617e:	4805      	ldr	r0, [pc, #20]	; (8006194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006180:	f7ff fe1f 	bl	8005dc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006184:	4b02      	ldr	r3, [pc, #8]	; (8006190 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200004dc 	.word	0x200004dc
 8006194:	0800692c 	.word	0x0800692c

08006198 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800619e:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <Get_SerialNum+0x44>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061a4:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <Get_SerialNum+0x48>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061aa:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <Get_SerialNum+0x4c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061be:	2208      	movs	r2, #8
 80061c0:	4909      	ldr	r1, [pc, #36]	; (80061e8 <Get_SerialNum+0x50>)
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f814 	bl	80061f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80061c8:	2204      	movs	r2, #4
 80061ca:	4908      	ldr	r1, [pc, #32]	; (80061ec <Get_SerialNum+0x54>)
 80061cc:	68b8      	ldr	r0, [r7, #8]
 80061ce:	f000 f80f 	bl	80061f0 <IntToUnicode>
  }
}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	1fff7a10 	.word	0x1fff7a10
 80061e0:	1fff7a14 	.word	0x1fff7a14
 80061e4:	1fff7a18 	.word	0x1fff7a18
 80061e8:	2000014a 	.word	0x2000014a
 80061ec:	2000015a 	.word	0x2000015a

080061f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4613      	mov	r3, r2
 80061fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
 8006206:	e027      	b.n	8006258 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	0f1b      	lsrs	r3, r3, #28
 800620c:	2b09      	cmp	r3, #9
 800620e:	d80b      	bhi.n	8006228 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	0f1b      	lsrs	r3, r3, #28
 8006214:	b2da      	uxtb	r2, r3
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	4619      	mov	r1, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	440b      	add	r3, r1
 8006220:	3230      	adds	r2, #48	; 0x30
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e00a      	b.n	800623e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0f1b      	lsrs	r3, r3, #28
 800622c:	b2da      	uxtb	r2, r3
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	4619      	mov	r1, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	440b      	add	r3, r1
 8006238:	3237      	adds	r2, #55	; 0x37
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	3301      	adds	r3, #1
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	3301      	adds	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
 8006258:	7dfa      	ldrb	r2, [r7, #23]
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	429a      	cmp	r2, r3
 800625e:	d3d3      	bcc.n	8006208 <IntToUnicode+0x18>
  }
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	; 0x28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006278:	f107 0314 	add.w	r3, r7, #20
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	609a      	str	r2, [r3, #8]
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006290:	d13a      	bne.n	8006308 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	4b1e      	ldr	r3, [pc, #120]	; (8006310 <HAL_PCD_MspInit+0xa0>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <HAL_PCD_MspInit+0xa0>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	6313      	str	r3, [r2, #48]	; 0x30
 80062a2:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <HAL_PCD_MspInit+0xa0>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80062ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80062b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b4:	2302      	movs	r3, #2
 80062b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062bc:	2303      	movs	r3, #3
 80062be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062c0:	230a      	movs	r3, #10
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c4:	f107 0314 	add.w	r3, r7, #20
 80062c8:	4619      	mov	r1, r3
 80062ca:	4812      	ldr	r0, [pc, #72]	; (8006314 <HAL_PCD_MspInit+0xa4>)
 80062cc:	f7fa fc9e 	bl	8000c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <HAL_PCD_MspInit+0xa0>)
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	4a0e      	ldr	r2, [pc, #56]	; (8006310 <HAL_PCD_MspInit+0xa0>)
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	6353      	str	r3, [r2, #52]	; 0x34
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_PCD_MspInit+0xa0>)
 80062e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <HAL_PCD_MspInit+0xa0>)
 80062e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062ea:	6453      	str	r3, [r2, #68]	; 0x44
 80062ec:	4b08      	ldr	r3, [pc, #32]	; (8006310 <HAL_PCD_MspInit+0xa0>)
 80062ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80062f8:	2200      	movs	r2, #0
 80062fa:	2100      	movs	r1, #0
 80062fc:	2043      	movs	r0, #67	; 0x43
 80062fe:	f7fa fc4e 	bl	8000b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006302:	2043      	movs	r0, #67	; 0x43
 8006304:	f7fa fc67 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006308:	bf00      	nop
 800630a:	3728      	adds	r7, #40	; 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40023800 	.word	0x40023800
 8006314:	40020000 	.word	0x40020000

08006318 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f7fe fd61 	bl	8004df6 <USBD_LL_SetupStage>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	4619      	mov	r1, r3
 8006366:	f7fe fd9b 	bl	8004ea0 <USBD_LL_DataOutStage>
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	3348      	adds	r3, #72	; 0x48
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	4619      	mov	r1, r3
 800639a:	f7fe fde4 	bl	8004f66 <USBD_LL_DataInStage>
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe fef8 	bl	80051aa <USBD_LL_SOF>
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80063ca:	2301      	movs	r3, #1
 80063cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
 80063da:	e008      	b.n	80063ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d102      	bne.n	80063ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
 80063e8:	e001      	b.n	80063ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80063ea:	f7fa f981 	bl	80006f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	4611      	mov	r1, r2
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fe98 	bl	800512e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fe44 	bl	8005092 <USBD_LL_Reset>
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fe93 	bl	800514e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006448:	4b04      	ldr	r3, [pc, #16]	; (800645c <HAL_PCD_SuspendCallback+0x48>)
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	4a03      	ldr	r2, [pc, #12]	; (800645c <HAL_PCD_SuspendCallback+0x48>)
 800644e:	f043 0306 	orr.w	r3, r3, #6
 8006452:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	e000ed00 	.word	0xe000ed00

08006460 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fe83 	bl	800517a <USBD_LL_Resume>
}
 8006474:	bf00      	nop
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fed1 	bl	800523a <USBD_LL_IsoOUTIncomplete>
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fe99 	bl	80051ee <USBD_LL_IsoINIncomplete>
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fed7 	bl	8005286 <USBD_LL_DevConnected>
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fed4 	bl	800529c <USBD_LL_DevDisconnected>
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d13c      	bne.n	8006586 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800650c:	4a20      	ldr	r2, [pc, #128]	; (8006590 <USBD_LL_Init+0x94>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <USBD_LL_Init+0x94>)
 8006518:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800651c:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <USBD_LL_Init+0x94>)
 800651e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006522:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006524:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <USBD_LL_Init+0x94>)
 8006526:	2204      	movs	r2, #4
 8006528:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800652a:	4b19      	ldr	r3, [pc, #100]	; (8006590 <USBD_LL_Init+0x94>)
 800652c:	2202      	movs	r2, #2
 800652e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <USBD_LL_Init+0x94>)
 8006532:	2200      	movs	r2, #0
 8006534:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006536:	4b16      	ldr	r3, [pc, #88]	; (8006590 <USBD_LL_Init+0x94>)
 8006538:	2202      	movs	r2, #2
 800653a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800653c:	4b14      	ldr	r3, [pc, #80]	; (8006590 <USBD_LL_Init+0x94>)
 800653e:	2200      	movs	r2, #0
 8006540:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <USBD_LL_Init+0x94>)
 8006544:	2200      	movs	r2, #0
 8006546:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <USBD_LL_Init+0x94>)
 800654a:	2200      	movs	r2, #0
 800654c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <USBD_LL_Init+0x94>)
 8006550:	2200      	movs	r2, #0
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <USBD_LL_Init+0x94>)
 8006556:	2200      	movs	r2, #0
 8006558:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800655a:	480d      	ldr	r0, [pc, #52]	; (8006590 <USBD_LL_Init+0x94>)
 800655c:	f7fa fcf3 	bl	8000f46 <HAL_PCD_Init>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006566:	f7fa f8c3 	bl	80006f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	4808      	ldr	r0, [pc, #32]	; (8006590 <USBD_LL_Init+0x94>)
 800656e:	f7fb fe38 	bl	80021e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006572:	2240      	movs	r2, #64	; 0x40
 8006574:	2100      	movs	r1, #0
 8006576:	4806      	ldr	r0, [pc, #24]	; (8006590 <USBD_LL_Init+0x94>)
 8006578:	f7fb fdec 	bl	8002154 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800657c:	2280      	movs	r2, #128	; 0x80
 800657e:	2101      	movs	r1, #1
 8006580:	4803      	ldr	r0, [pc, #12]	; (8006590 <USBD_LL_Init+0x94>)
 8006582:	f7fb fde7 	bl	8002154 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	200006dc 	.word	0x200006dc

08006594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fa fde8 	bl	8001180 <HAL_PCD_Start>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f930 	bl	800681c <USBD_Get_USB_Status>
 80065bc:	4603      	mov	r3, r0
 80065be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	461a      	mov	r2, r3
 80065d8:	4603      	mov	r3, r0
 80065da:	70fb      	strb	r3, [r7, #3]
 80065dc:	460b      	mov	r3, r1
 80065de:	70bb      	strb	r3, [r7, #2]
 80065e0:	4613      	mov	r3, r2
 80065e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80065f2:	78bb      	ldrb	r3, [r7, #2]
 80065f4:	883a      	ldrh	r2, [r7, #0]
 80065f6:	78f9      	ldrb	r1, [r7, #3]
 80065f8:	f7fb f9cc 	bl	8001994 <HAL_PCD_EP_Open>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f90a 	bl	800681c <USBD_Get_USB_Status>
 8006608:	4603      	mov	r3, r0
 800660a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800660c:	7bbb      	ldrb	r3, [r7, #14]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f7fb fa15 	bl	8001a64 <HAL_PCD_EP_Close>
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 f8eb 	bl	800681c <USBD_Get_USB_Status>
 8006646:	4603      	mov	r3, r0
 8006648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800664a:	7bbb      	ldrb	r3, [r7, #14]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f7fb fad5 	bl	8001c22 <HAL_PCD_EP_SetStall>
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f8cc 	bl	800681c <USBD_Get_USB_Status>
 8006684:	4603      	mov	r3, r0
 8006686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006688:	7bbb      	ldrb	r3, [r7, #14]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fb fb1a 	bl	8001cea <HAL_PCD_EP_ClrStall>
 80066b6:	4603      	mov	r3, r0
 80066b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f8ad 	bl	800681c <USBD_Get_USB_Status>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80066e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da0b      	bge.n	8006704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066f2:	68f9      	ldr	r1, [r7, #12]
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	333e      	adds	r3, #62	; 0x3e
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	e00b      	b.n	800671c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800671a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7fb f8ff 	bl	800194a <HAL_PCD_SetAddress>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f862 	bl	800681c <USBD_Get_USB_Status>
 8006758:	4603      	mov	r3, r0
 800675a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800675c:	7bbb      	ldrb	r3, [r7, #14]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	460b      	mov	r3, r1
 8006774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006784:	7af9      	ldrb	r1, [r7, #11]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	f7fb fa00 	bl	8001b8e <HAL_PCD_EP_Transmit>
 800678e:	4603      	mov	r3, r0
 8006790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f841 	bl	800681c <USBD_Get_USB_Status>
 800679a:	4603      	mov	r3, r0
 800679c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800679e:	7dbb      	ldrb	r3, [r7, #22]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	460b      	mov	r3, r1
 80067b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067c6:	7af9      	ldrb	r1, [r7, #11]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	f7fb f994 	bl	8001af8 <HAL_PCD_EP_Receive>
 80067d0:	4603      	mov	r3, r0
 80067d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f820 	bl	800681c <USBD_Get_USB_Status>
 80067dc:	4603      	mov	r3, r0
 80067de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80067f4:	4b03      	ldr	r3, [pc, #12]	; (8006804 <USBD_static_malloc+0x18>)
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000ae4 	.word	0x20000ae4

08006808 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]

}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d817      	bhi.n	8006860 <USBD_Get_USB_Status+0x44>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <USBD_Get_USB_Status+0x1c>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006849 	.word	0x08006849
 800683c:	0800684f 	.word	0x0800684f
 8006840:	08006855 	.word	0x08006855
 8006844:	0800685b 	.word	0x0800685b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]
    break;
 800684c:	e00b      	b.n	8006866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800684e:	2303      	movs	r3, #3
 8006850:	73fb      	strb	r3, [r7, #15]
    break;
 8006852:	e008      	b.n	8006866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
    break;
 8006858:	e005      	b.n	8006866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	73fb      	strb	r3, [r7, #15]
    break;
 800685e:	e002      	b.n	8006866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006860:	2303      	movs	r3, #3
 8006862:	73fb      	strb	r3, [r7, #15]
    break;
 8006864:	bf00      	nop
  }
  return usb_status;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <memset>:
 8006874:	4402      	add	r2, r0
 8006876:	4603      	mov	r3, r0
 8006878:	4293      	cmp	r3, r2
 800687a:	d100      	bne.n	800687e <memset+0xa>
 800687c:	4770      	bx	lr
 800687e:	f803 1b01 	strb.w	r1, [r3], #1
 8006882:	e7f9      	b.n	8006878 <memset+0x4>

08006884 <__libc_init_array>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4d0d      	ldr	r5, [pc, #52]	; (80068bc <__libc_init_array+0x38>)
 8006888:	4c0d      	ldr	r4, [pc, #52]	; (80068c0 <__libc_init_array+0x3c>)
 800688a:	1b64      	subs	r4, r4, r5
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	2600      	movs	r6, #0
 8006890:	42a6      	cmp	r6, r4
 8006892:	d109      	bne.n	80068a8 <__libc_init_array+0x24>
 8006894:	4d0b      	ldr	r5, [pc, #44]	; (80068c4 <__libc_init_array+0x40>)
 8006896:	4c0c      	ldr	r4, [pc, #48]	; (80068c8 <__libc_init_array+0x44>)
 8006898:	f000 f818 	bl	80068cc <_init>
 800689c:	1b64      	subs	r4, r4, r5
 800689e:	10a4      	asrs	r4, r4, #2
 80068a0:	2600      	movs	r6, #0
 80068a2:	42a6      	cmp	r6, r4
 80068a4:	d105      	bne.n	80068b2 <__libc_init_array+0x2e>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ac:	4798      	blx	r3
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7ee      	b.n	8006890 <__libc_init_array+0xc>
 80068b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b6:	4798      	blx	r3
 80068b8:	3601      	adds	r6, #1
 80068ba:	e7f2      	b.n	80068a2 <__libc_init_array+0x1e>
 80068bc:	08006964 	.word	0x08006964
 80068c0:	08006964 	.word	0x08006964
 80068c4:	08006964 	.word	0x08006964
 80068c8:	08006968 	.word	0x08006968

080068cc <_init>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr

080068d8 <_fini>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr
