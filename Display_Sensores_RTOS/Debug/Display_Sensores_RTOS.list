
Display_Sensores_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  0800c200  0800c200  0001c200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cde4  0800cde4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdec  0800cdec  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdec  0800cdec  0001cdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdf0  0800cdf0  0001cdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cdf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b84  200001f4  0800cfe8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d78  0800cfe8  00024d78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2a6  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f25  00000000  00000000  0003c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  000403f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00041c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c448  00000000  00000000  00043318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2f1  00000000  00000000  0005f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac893  00000000  00000000  0007da51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a2e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c8  00000000  00000000  0012a334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c1e8 	.word	0x0800c1e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800c1e8 	.word	0x0800c1e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <Set_Pin_Output>:
//----------------------------------------------------------------------//
//---------- Funciones -------------------------------------------------//
//----------------------------------------------------------------------//

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f003 fc7c 	bl	8004888 <HAL_GPIO_Init>
}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f003 fc5e 	bl	8004888 <HAL_GPIO_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_TIM_IC_CaptureCallback>:
//-------------------------------------------//
// Intento de implementacion no bloqueante
//-------------------------------------------//

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if (enableCapture && iindex <= 82)
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d050      	beq.n	8001086 <HAL_TIM_IC_CaptureCallback+0xb2>
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b52      	cmp	r3, #82	; 0x52
 8000fea:	d84c      	bhi.n	8001086 <HAL_TIM_IC_CaptureCallback+0xb2>
	{
		capture = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1); // canal y handler de timer.
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000ff6:	701a      	strb	r2, [r3, #0]

		if (firstCapture == 0)
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d104      	bne.n	800100a <HAL_TIM_IC_CaptureCallback+0x36>
			firstCapture = capture;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001006:	701a      	strb	r2, [r3, #0]
				iindex++;
			else
				iindex = 0;
		}
	}
}
 8001008:	e03d      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0xb2>
			secondCapture = capture;
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001010:	701a      	strb	r2, [r3, #0]
			if(secondCapture > firstCapture)
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d908      	bls.n	8001030 <HAL_TIM_IC_CaptureCallback+0x5c>
				pulseTime = secondCapture - firstCapture;
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e00d      	b.n	800104c <HAL_TIM_IC_CaptureCallback+0x78>
				pulseTime = __HAL_TIM_GET_AUTORELOAD(&htim3) + secondCapture - firstCapture;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4413      	add	r3, r2
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 800104a:	701a      	strb	r2, [r3, #0]
			firstCapture = secondCapture;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001052:	701a      	strb	r2, [r3, #0]
			timeArray[iindex] = pulseTime;
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_TIM_IC_CaptureCallback+0xd8>)
 800105c:	7819      	ldrb	r1, [r3, #0]
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001060:	5499      	strb	r1, [r3, r2]
			if(timeArray[0] > 70 && timeArray[0] < 90)
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b46      	cmp	r3, #70	; 0x46
 8001068:	d90a      	bls.n	8001080 <HAL_TIM_IC_CaptureCallback+0xac>
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b59      	cmp	r3, #89	; 0x59
 8001070:	d806      	bhi.n	8001080 <HAL_TIM_IC_CaptureCallback+0xac>
				iindex++;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800107c:	701a      	strb	r2, [r3, #0]
}
 800107e:	e002      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0xb2>
				iindex = 0;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000215 	.word	0x20000215
 8001098:	20000210 	.word	0x20000210
 800109c:	200006b0 	.word	0x200006b0
 80010a0:	20000211 	.word	0x20000211
 80010a4:	20000212 	.word	0x20000212
 80010a8:	20000213 	.word	0x20000213
 80010ac:	20000214 	.word	0x20000214
 80010b0:	20000218 	.word	0x20000218

080010b4 <DHT22_Recieve>:

void DHT22_Recieve(float *Humidity)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	static uint8_t j = 0;

	if(timeArray[0] > 70 && timeArray[0] < 90)
 80010bc:	4b96      	ldr	r3, [pc, #600]	; (8001318 <DHT22_Recieve+0x264>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b46      	cmp	r3, #70	; 0x46
 80010c2:	f240 80bd 	bls.w	8001240 <DHT22_Recieve+0x18c>
 80010c6:	4b94      	ldr	r3, [pc, #592]	; (8001318 <DHT22_Recieve+0x264>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b59      	cmp	r3, #89	; 0x59
 80010cc:	f200 80b8 	bhi.w	8001240 <DHT22_Recieve+0x18c>
	{
		if(timeArray[1] > 70 && timeArray[1] < 90)
 80010d0:	4b91      	ldr	r3, [pc, #580]	; (8001318 <DHT22_Recieve+0x264>)
 80010d2:	785b      	ldrb	r3, [r3, #1]
 80010d4:	2b46      	cmp	r3, #70	; 0x46
 80010d6:	f240 80b3 	bls.w	8001240 <DHT22_Recieve+0x18c>
 80010da:	4b8f      	ldr	r3, [pc, #572]	; (8001318 <DHT22_Recieve+0x264>)
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	2b59      	cmp	r3, #89	; 0x59
 80010e0:	f200 80ae 	bhi.w	8001240 <DHT22_Recieve+0x18c>
		{
			for(uint8_t i = 2; i <= 17; i += 2)
 80010e4:	2302      	movs	r3, #2
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e04d      	b.n	8001186 <DHT22_Recieve+0xd2>
			{
				if(timeArray[i] > 40 && timeArray[i] < 60)
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	4a8a      	ldr	r2, [pc, #552]	; (8001318 <DHT22_Recieve+0x264>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	2b28      	cmp	r3, #40	; 0x28
 80010f2:	d93f      	bls.n	8001174 <DHT22_Recieve+0xc0>
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	4a88      	ldr	r2, [pc, #544]	; (8001318 <DHT22_Recieve+0x264>)
 80010f8:	5cd3      	ldrb	r3, [r2, r3]
 80010fa:	2b3b      	cmp	r3, #59	; 0x3b
 80010fc:	d83a      	bhi.n	8001174 <DHT22_Recieve+0xc0>
				{
					if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	4a85      	ldr	r2, [pc, #532]	; (8001318 <DHT22_Recieve+0x264>)
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	2b19      	cmp	r3, #25
 8001108:	d918      	bls.n	800113c <DHT22_Recieve+0x88>
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	3301      	adds	r3, #1
 800110e:	4a82      	ldr	r2, [pc, #520]	; (8001318 <DHT22_Recieve+0x264>)
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	2b1c      	cmp	r3, #28
 8001114:	d812      	bhi.n	800113c <DHT22_Recieve+0x88>
					{
						Rh_byte1 &= ~(1<<(7 - j));   // write 0
 8001116:	4b81      	ldr	r3, [pc, #516]	; (800131c <DHT22_Recieve+0x268>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2201      	movs	r2, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	b25b      	sxtb	r3, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	b25a      	sxtb	r2, r3
 800112a:	4b7d      	ldr	r3, [pc, #500]	; (8001320 <DHT22_Recieve+0x26c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b25b      	sxtb	r3, r3
 8001130:	4013      	ands	r3, r2
 8001132:	b25b      	sxtb	r3, r3
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b7a      	ldr	r3, [pc, #488]	; (8001320 <DHT22_Recieve+0x26c>)
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e01b      	b.n	8001174 <DHT22_Recieve+0xc0>
					}
					else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	4a75      	ldr	r2, [pc, #468]	; (8001318 <DHT22_Recieve+0x264>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	2b3c      	cmp	r3, #60	; 0x3c
 8001146:	d915      	bls.n	8001174 <DHT22_Recieve+0xc0>
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	3301      	adds	r3, #1
 800114c:	4a72      	ldr	r2, [pc, #456]	; (8001318 <DHT22_Recieve+0x264>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	2b4f      	cmp	r3, #79	; 0x4f
 8001152:	d80f      	bhi.n	8001174 <DHT22_Recieve+0xc0>
					{
						Rh_byte1 |= (1<<(7 - j));
 8001154:	4b71      	ldr	r3, [pc, #452]	; (800131c <DHT22_Recieve+0x268>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	f1c3 0307 	rsb	r3, r3, #7
 800115c:	2201      	movs	r2, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	b25a      	sxtb	r2, r3
 8001164:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <DHT22_Recieve+0x26c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b25b      	sxtb	r3, r3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b6b      	ldr	r3, [pc, #428]	; (8001320 <DHT22_Recieve+0x26c>)
 8001172:	701a      	strb	r2, [r3, #0]
					}
				}

				j++;
 8001174:	4b69      	ldr	r3, [pc, #420]	; (800131c <DHT22_Recieve+0x268>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b67      	ldr	r3, [pc, #412]	; (800131c <DHT22_Recieve+0x268>)
 800117e:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 2; i <= 17; i += 2)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	3302      	adds	r3, #2
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b11      	cmp	r3, #17
 800118a:	d9ae      	bls.n	80010ea <DHT22_Recieve+0x36>
			}

			j = 0;
 800118c:	4b63      	ldr	r3, [pc, #396]	; (800131c <DHT22_Recieve+0x268>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 18; i <= 33; i += 2)
 8001192:	2312      	movs	r3, #18
 8001194:	73bb      	strb	r3, [r7, #14]
 8001196:	e04d      	b.n	8001234 <DHT22_Recieve+0x180>
			{
				if(timeArray[i] > 40 && timeArray[i] < 60)
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	4a5f      	ldr	r2, [pc, #380]	; (8001318 <DHT22_Recieve+0x264>)
 800119c:	5cd3      	ldrb	r3, [r2, r3]
 800119e:	2b28      	cmp	r3, #40	; 0x28
 80011a0:	d93f      	bls.n	8001222 <DHT22_Recieve+0x16e>
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <DHT22_Recieve+0x264>)
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	2b3b      	cmp	r3, #59	; 0x3b
 80011aa:	d83a      	bhi.n	8001222 <DHT22_Recieve+0x16e>
				{
					if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a59      	ldr	r2, [pc, #356]	; (8001318 <DHT22_Recieve+0x264>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	2b19      	cmp	r3, #25
 80011b6:	d918      	bls.n	80011ea <DHT22_Recieve+0x136>
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a56      	ldr	r2, [pc, #344]	; (8001318 <DHT22_Recieve+0x264>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	2b1c      	cmp	r3, #28
 80011c2:	d812      	bhi.n	80011ea <DHT22_Recieve+0x136>
					{
						Rh_byte2 &= ~(1<<(7 - j));   // write 0
 80011c4:	4b55      	ldr	r3, [pc, #340]	; (800131c <DHT22_Recieve+0x268>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	f1c3 0307 	rsb	r3, r3, #7
 80011cc:	2201      	movs	r2, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	4b52      	ldr	r3, [pc, #328]	; (8001324 <DHT22_Recieve+0x270>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4013      	ands	r3, r2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <DHT22_Recieve+0x270>)
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	e01b      	b.n	8001222 <DHT22_Recieve+0x16e>
					}
					else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a4a      	ldr	r2, [pc, #296]	; (8001318 <DHT22_Recieve+0x264>)
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	2b3c      	cmp	r3, #60	; 0x3c
 80011f4:	d915      	bls.n	8001222 <DHT22_Recieve+0x16e>
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a47      	ldr	r2, [pc, #284]	; (8001318 <DHT22_Recieve+0x264>)
 80011fc:	5cd3      	ldrb	r3, [r2, r3]
 80011fe:	2b4f      	cmp	r3, #79	; 0x4f
 8001200:	d80f      	bhi.n	8001222 <DHT22_Recieve+0x16e>
					{
						Rh_byte2 |= (1<<(7 - j));
 8001202:	4b46      	ldr	r3, [pc, #280]	; (800131c <DHT22_Recieve+0x268>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2201      	movs	r2, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	b25a      	sxtb	r2, r3
 8001212:	4b44      	ldr	r3, [pc, #272]	; (8001324 <DHT22_Recieve+0x270>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b25b      	sxtb	r3, r3
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <DHT22_Recieve+0x270>)
 8001220:	701a      	strb	r2, [r3, #0]
					}
				}

				j++;
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <DHT22_Recieve+0x268>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <DHT22_Recieve+0x268>)
 800122c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 18; i <= 33; i += 2)
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	3302      	adds	r3, #2
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	2b21      	cmp	r3, #33	; 0x21
 8001238:	d9ae      	bls.n	8001198 <DHT22_Recieve+0xe4>
			}

			j = 0;
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <DHT22_Recieve+0x268>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]

		}
	}

	if((timeArray[0] > 70 && timeArray[0] < 90) || (timeArray[1] < 70 && timeArray[1] > 90))
 8001240:	4b35      	ldr	r3, [pc, #212]	; (8001318 <DHT22_Recieve+0x264>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b46      	cmp	r3, #70	; 0x46
 8001246:	d903      	bls.n	8001250 <DHT22_Recieve+0x19c>
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <DHT22_Recieve+0x264>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b59      	cmp	r3, #89	; 0x59
 800124e:	d909      	bls.n	8001264 <DHT22_Recieve+0x1b0>
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <DHT22_Recieve+0x264>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	2b45      	cmp	r3, #69	; 0x45
 8001256:	f200 80bb 	bhi.w	80013d0 <DHT22_Recieve+0x31c>
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <DHT22_Recieve+0x264>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	2b5a      	cmp	r3, #90	; 0x5a
 8001260:	f240 80b6 	bls.w	80013d0 <DHT22_Recieve+0x31c>
	{
		for(uint8_t i = 1; i <= 16; i += 2)
 8001264:	2301      	movs	r3, #1
 8001266:	737b      	strb	r3, [r7, #13]
 8001268:	e04d      	b.n	8001306 <DHT22_Recieve+0x252>
		{
			if(timeArray[i] > 40 && timeArray[i] < 60)
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <DHT22_Recieve+0x264>)
 800126e:	5cd3      	ldrb	r3, [r2, r3]
 8001270:	2b28      	cmp	r3, #40	; 0x28
 8001272:	d93f      	bls.n	80012f4 <DHT22_Recieve+0x240>
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	4a28      	ldr	r2, [pc, #160]	; (8001318 <DHT22_Recieve+0x264>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	2b3b      	cmp	r3, #59	; 0x3b
 800127c:	d83a      	bhi.n	80012f4 <DHT22_Recieve+0x240>
			{
				if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 800127e:	7b7b      	ldrb	r3, [r7, #13]
 8001280:	3301      	adds	r3, #1
 8001282:	4a25      	ldr	r2, [pc, #148]	; (8001318 <DHT22_Recieve+0x264>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
 8001286:	2b19      	cmp	r3, #25
 8001288:	d918      	bls.n	80012bc <DHT22_Recieve+0x208>
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	3301      	adds	r3, #1
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <DHT22_Recieve+0x264>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	2b1c      	cmp	r3, #28
 8001294:	d812      	bhi.n	80012bc <DHT22_Recieve+0x208>
				{
					Rh_byte1 &= ~(1<<(7 - j));   // write 0
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <DHT22_Recieve+0x268>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2201      	movs	r2, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <DHT22_Recieve+0x26c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <DHT22_Recieve+0x26c>)
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e01b      	b.n	80012f4 <DHT22_Recieve+0x240>
				}
				else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 80012bc:	7b7b      	ldrb	r3, [r7, #13]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a15      	ldr	r2, [pc, #84]	; (8001318 <DHT22_Recieve+0x264>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	2b3c      	cmp	r3, #60	; 0x3c
 80012c6:	d915      	bls.n	80012f4 <DHT22_Recieve+0x240>
 80012c8:	7b7b      	ldrb	r3, [r7, #13]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <DHT22_Recieve+0x264>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	2b4f      	cmp	r3, #79	; 0x4f
 80012d2:	d80f      	bhi.n	80012f4 <DHT22_Recieve+0x240>
				{
					Rh_byte1 |= (1<<(7 - j));
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <DHT22_Recieve+0x268>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f1c3 0307 	rsb	r3, r3, #7
 80012dc:	2201      	movs	r2, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	b25a      	sxtb	r2, r3
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <DHT22_Recieve+0x26c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <DHT22_Recieve+0x26c>)
 80012f2:	701a      	strb	r2, [r3, #0]
				}
			}

			j++;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <DHT22_Recieve+0x268>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <DHT22_Recieve+0x268>)
 80012fe:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 1; i <= 16; i += 2)
 8001300:	7b7b      	ldrb	r3, [r7, #13]
 8001302:	3302      	adds	r3, #2
 8001304:	737b      	strb	r3, [r7, #13]
 8001306:	7b7b      	ldrb	r3, [r7, #13]
 8001308:	2b10      	cmp	r3, #16
 800130a:	d9ae      	bls.n	800126a <DHT22_Recieve+0x1b6>
		}

		j = 0;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <DHT22_Recieve+0x268>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 17; i <= 32; i += 2)
 8001312:	2311      	movs	r3, #17
 8001314:	733b      	strb	r3, [r7, #12]
 8001316:	e055      	b.n	80013c4 <DHT22_Recieve+0x310>
 8001318:	20000218 	.word	0x20000218
 800131c:	20000284 	.word	0x20000284
 8001320:	20000280 	.word	0x20000280
 8001324:	20000281 	.word	0x20000281
		{
			if(timeArray[i] > 40 && timeArray[i] < 60)
 8001328:	7b3b      	ldrb	r3, [r7, #12]
 800132a:	4a3b      	ldr	r2, [pc, #236]	; (8001418 <DHT22_Recieve+0x364>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	2b28      	cmp	r3, #40	; 0x28
 8001330:	d93f      	bls.n	80013b2 <DHT22_Recieve+0x2fe>
 8001332:	7b3b      	ldrb	r3, [r7, #12]
 8001334:	4a38      	ldr	r2, [pc, #224]	; (8001418 <DHT22_Recieve+0x364>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	2b3b      	cmp	r3, #59	; 0x3b
 800133a:	d83a      	bhi.n	80013b2 <DHT22_Recieve+0x2fe>
			{
				if(timeArray[i + 1] > 25 && timeArray[i + 1] < 29)
 800133c:	7b3b      	ldrb	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	4a35      	ldr	r2, [pc, #212]	; (8001418 <DHT22_Recieve+0x364>)
 8001342:	5cd3      	ldrb	r3, [r2, r3]
 8001344:	2b19      	cmp	r3, #25
 8001346:	d918      	bls.n	800137a <DHT22_Recieve+0x2c6>
 8001348:	7b3b      	ldrb	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	4a32      	ldr	r2, [pc, #200]	; (8001418 <DHT22_Recieve+0x364>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	2b1c      	cmp	r3, #28
 8001352:	d812      	bhi.n	800137a <DHT22_Recieve+0x2c6>
				{
					Rh_byte2 &= ~(1<<(7 - j));   // write 0
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <DHT22_Recieve+0x368>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	f1c3 0307 	rsb	r3, r3, #7
 800135c:	2201      	movs	r2, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	b25b      	sxtb	r3, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	b25a      	sxtb	r2, r3
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <DHT22_Recieve+0x36c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b25b      	sxtb	r3, r3
 800136e:	4013      	ands	r3, r2
 8001370:	b25b      	sxtb	r3, r3
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <DHT22_Recieve+0x36c>)
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e01b      	b.n	80013b2 <DHT22_Recieve+0x2fe>
				}
				else if(timeArray[i + 1] > 60 && timeArray[i + 1] < 80)
 800137a:	7b3b      	ldrb	r3, [r7, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	4a26      	ldr	r2, [pc, #152]	; (8001418 <DHT22_Recieve+0x364>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	2b3c      	cmp	r3, #60	; 0x3c
 8001384:	d915      	bls.n	80013b2 <DHT22_Recieve+0x2fe>
 8001386:	7b3b      	ldrb	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <DHT22_Recieve+0x364>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b4f      	cmp	r3, #79	; 0x4f
 8001390:	d80f      	bhi.n	80013b2 <DHT22_Recieve+0x2fe>
				{
					Rh_byte2 |= (1<<(7 - j));
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <DHT22_Recieve+0x368>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2201      	movs	r2, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <DHT22_Recieve+0x36c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <DHT22_Recieve+0x36c>)
 80013b0:	701a      	strb	r2, [r3, #0]
				}
			}

			j++;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <DHT22_Recieve+0x368>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <DHT22_Recieve+0x368>)
 80013bc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 17; i <= 32; i += 2)
 80013be:	7b3b      	ldrb	r3, [r7, #12]
 80013c0:	3302      	adds	r3, #2
 80013c2:	733b      	strb	r3, [r7, #12]
 80013c4:	7b3b      	ldrb	r3, [r7, #12]
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	d9ae      	bls.n	8001328 <DHT22_Recieve+0x274>
		}

		j = 0;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <DHT22_Recieve+0x368>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
	}

	RH = ((Rh_byte1<<8)|Rh_byte2);
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <DHT22_Recieve+0x370>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <DHT22_Recieve+0x36c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <DHT22_Recieve+0x374>)
 80013e6:	801a      	strh	r2, [r3, #0]
	*Humidity = (float) (RH/10.0);
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <DHT22_Recieve+0x374>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f8a1 	bl	8000534 <__aeabi_i2d>
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <DHT22_Recieve+0x378>)
 80013f8:	f7ff fa30 	bl	800085c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fbd8 	bl	8000bb8 <__aeabi_d2f>
 8001408:	4602      	mov	r2, r0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000218 	.word	0x20000218
 800141c:	20000284 	.word	0x20000284
 8001420:	20000281 	.word	0x20000281
 8001424:	20000280 	.word	0x20000280
 8001428:	20000282 	.word	0x20000282
 800142c:	40240000 	.word	0x40240000

08001430 <DHT22_Read_Humidity>:

void DHT22_Read_Humidity (float *Humidity)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	if(iindex > 80)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <DHT22_Read_Humidity+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b50      	cmp	r3, #80	; 0x50
 800143e:	d914      	bls.n	800146a <DHT22_Read_Humidity+0x3a>
	{
		DHT22_Recieve(Humidity);				// Funcion para procesar los datos obtenidos provenientes de la callback
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fe37 	bl	80010b4 <DHT22_Recieve>

		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001446:	2100      	movs	r1, #0
 8001448:	4810      	ldr	r0, [pc, #64]	; (800148c <DHT22_Read_Humidity+0x5c>)
 800144a:	f005 fc7d 	bl	8006d48 <HAL_TIM_IC_Stop_IT>

		enableCapture = 0;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <DHT22_Read_Humidity+0x60>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]

		iindex = 0;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <DHT22_Read_Humidity+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]

		memset(timeArray,0x00,100);
 800145a:	2264      	movs	r2, #100	; 0x64
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <DHT22_Read_Humidity+0x64>)
 8001460:	f008 f88f 	bl	8009582 <memset>

		start = 0;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <DHT22_Read_Humidity+0x68>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
	}

	vTaskDelay(2000);
 800146a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800146e:	f006 ffa3 	bl	80083b8 <vTaskDelay>

	Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <DHT22_Read_Humidity+0x6c>)
 8001476:	f7ff fd71 	bl	8000f5c <Set_Pin_Output>

	HAL_TIM_Base_Start_IT(&htim4);
 800147a:	4809      	ldr	r0, [pc, #36]	; (80014a0 <DHT22_Read_Humidity+0x70>)
 800147c:	f005 fa60 	bl	8006940 <HAL_TIM_Base_Start_IT>

}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000210 	.word	0x20000210
 800148c:	200006b0 	.word	0x200006b0
 8001490:	20000215 	.word	0x20000215
 8001494:	20000218 	.word	0x20000218
 8001498:	2000027c 	.word	0x2000027c
 800149c:	40020000 	.word	0x40020000
 80014a0:	200006f8 	.word	0x200006f8

080014a4 <Mostrar_Temperatura>:
//----------------------------------------------------------------------//
//---------- Funciones -------------------------------------------------//
//----------------------------------------------------------------------//

void Mostrar_Temperatura()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	float Temperatura = MedicionesEstacion.Temperature;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <Mostrar_Temperatura+0xc0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <Mostrar_Temperatura+0xc4>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80014ba:	da08      	bge.n	80014ce <Mostrar_Temperatura+0x2a>
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <Mostrar_Temperatura+0xc8>)
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80014c6:	da02      	bge.n	80014ce <Mostrar_Temperatura+0x2a>
	{
		Cambio_Pantalla = 1;
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <Mostrar_Temperatura+0xcc>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
	}

	if(!Cambio_Pantalla && iD <= 140 && jD <= 140)
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <Mostrar_Temperatura+0xcc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d142      	bne.n	800155c <Mostrar_Temperatura+0xb8>
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <Mostrar_Temperatura+0xd0>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	2b8c      	cmp	r3, #140	; 0x8c
 80014de:	dc3d      	bgt.n	800155c <Mostrar_Temperatura+0xb8>
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <Mostrar_Temperatura+0xd4>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	2b8c      	cmp	r3, #140	; 0x8c
 80014e8:	dc38      	bgt.n	800155c <Mostrar_Temperatura+0xb8>
	{
		ssd1306_SetCursor(i - 3, 20);
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <Mostrar_Temperatura+0xc4>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b03      	subs	r3, #3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	2114      	movs	r1, #20
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fb44 	bl	8002b88 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Temp", Font_7x10, White);
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <Mostrar_Temperatura+0xd8>)
 8001502:	2301      	movs	r3, #1
 8001504:	ca06      	ldmia	r2, {r1, r2}
 8001506:	481e      	ldr	r0, [pc, #120]	; (8001580 <Mostrar_Temperatura+0xdc>)
 8001508:	f001 fb18 	bl	8002b3c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 10, 35);
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <Mostrar_Temperatura+0xc8>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b0a      	subs	r3, #10
 8001516:	b29b      	uxth	r3, r3
 8001518:	b21b      	sxth	r3, r3
 800151a:	2123      	movs	r1, #35	; 0x23
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fb33 	bl	8002b88 <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Temperatura);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff f818 	bl	8000558 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4915      	ldr	r1, [pc, #84]	; (8001584 <Mostrar_Temperatura+0xe0>)
 800152e:	4816      	ldr	r0, [pc, #88]	; (8001588 <Mostrar_Temperatura+0xe4>)
 8001530:	f008 fda8 	bl	800a084 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 8001534:	4a11      	ldr	r2, [pc, #68]	; (800157c <Mostrar_Temperatura+0xd8>)
 8001536:	2301      	movs	r3, #1
 8001538:	ca06      	ldmia	r2, {r1, r2}
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <Mostrar_Temperatura+0xe4>)
 800153c:	f001 fafe 	bl	8002b3c <ssd1306_WriteString>

		ssd1306_WriteChar(32, Font_7x10, White);
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <Mostrar_Temperatura+0xd8>)
 8001542:	2301      	movs	r3, #1
 8001544:	ca06      	ldmia	r2, {r1, r2}
 8001546:	2020      	movs	r0, #32
 8001548:	f001 fa78 	bl	8002a3c <ssd1306_WriteChar>

		Grados();
 800154c:	f001 fcec 	bl	8002f28 <Grados>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("C", Font_7x10, White);
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <Mostrar_Temperatura+0xd8>)
 8001552:	2301      	movs	r3, #1
 8001554:	ca06      	ldmia	r2, {r1, r2}
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <Mostrar_Temperatura+0xe8>)
 8001558:	f001 faf0 	bl	8002b3c <ssd1306_WriteString>
		#endif
	}
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000b8c 	.word	0x20000b8c
 8001568:	20000000 	.word	0x20000000
 800156c:	20000002 	.word	0x20000002
 8001570:	20000286 	.word	0x20000286
 8001574:	20000004 	.word	0x20000004
 8001578:	20000006 	.word	0x20000006
 800157c:	2000000c 	.word	0x2000000c
 8001580:	0800c200 	.word	0x0800c200
 8001584:	0800c208 	.word	0x0800c208
 8001588:	2000028c 	.word	0x2000028c
 800158c:	0800c210 	.word	0x0800c210

08001590 <Mostrar_Humedad>:

void Mostrar_Humedad()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	//Humedad = 35.456;

	Humedad = MedicionesEstacion.Humidity;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <Mostrar_Humedad+0x78>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a1c      	ldr	r2, [pc, #112]	; (800160c <Mostrar_Humedad+0x7c>)
 800159a:	6013      	str	r3, [r2, #0]

	if(!Cambio_Pantalla)
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <Mostrar_Humedad+0x80>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d12e      	bne.n	8001602 <Mostrar_Humedad+0x72>
	{
		ssd1306_SetCursor(iD, 20);
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <Mostrar_Humedad+0x84>)
 80015a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015aa:	2114      	movs	r1, #20
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 faeb 	bl	8002b88 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Hum", Font_7x10, White);
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <Mostrar_Humedad+0x88>)
 80015b4:	2301      	movs	r3, #1
 80015b6:	ca06      	ldmia	r2, {r1, r2}
 80015b8:	4818      	ldr	r0, [pc, #96]	; (800161c <Mostrar_Humedad+0x8c>)
 80015ba:	f001 fabf 	bl	8002b3c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD - 3, 35);
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <Mostrar_Humedad+0x90>)
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3b03      	subs	r3, #3
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	2123      	movs	r1, #35	; 0x23
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 fada 	bl	8002b88 <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Humedad);
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <Mostrar_Humedad+0x7c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffbd 	bl	8000558 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4910      	ldr	r1, [pc, #64]	; (8001624 <Mostrar_Humedad+0x94>)
 80015e4:	4810      	ldr	r0, [pc, #64]	; (8001628 <Mostrar_Humedad+0x98>)
 80015e6:	f008 fd4d 	bl	800a084 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <Mostrar_Humedad+0x88>)
 80015ec:	2301      	movs	r3, #1
 80015ee:	ca06      	ldmia	r2, {r1, r2}
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <Mostrar_Humedad+0x98>)
 80015f2:	f001 faa3 	bl	8002b3c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" %", Font_7x10, White);
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <Mostrar_Humedad+0x88>)
 80015f8:	2301      	movs	r3, #1
 80015fa:	ca06      	ldmia	r2, {r1, r2}
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <Mostrar_Humedad+0x9c>)
 80015fe:	f001 fa9d 	bl	8002b3c <ssd1306_WriteString>
		#endif
	}
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000b8c 	.word	0x20000b8c
 800160c:	20000288 	.word	0x20000288
 8001610:	20000286 	.word	0x20000286
 8001614:	20000004 	.word	0x20000004
 8001618:	2000000c 	.word	0x2000000c
 800161c:	0800c214 	.word	0x0800c214
 8001620:	20000006 	.word	0x20000006
 8001624:	0800c208 	.word	0x0800c208
 8001628:	2000028c 	.word	0x2000028c
 800162c:	0800c218 	.word	0x0800c218

08001630 <Mostrar_Presion>:

uint16_t read;

void Mostrar_Presion()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	float Presion = 34.56;
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <Mostrar_Presion+0x9c>)
 8001638:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <Mostrar_Presion+0xa0>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001644:	da08      	bge.n	8001658 <Mostrar_Presion+0x28>
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <Mostrar_Presion+0xa4>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001650:	da02      	bge.n	8001658 <Mostrar_Presion+0x28>
	{
		Cambio_Pantalla = 2;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <Mostrar_Presion+0xa8>)
 8001654:	2202      	movs	r2, #2
 8001656:	701a      	strb	r2, [r3, #0]
	}

	if(Cambio_Pantalla == 1)
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <Mostrar_Presion+0xa8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d130      	bne.n	80016c2 <Mostrar_Presion+0x92>
	{
		ssd1306_SetCursor(i + 2, 20);
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <Mostrar_Presion+0xa0>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	b29b      	uxth	r3, r3
 8001668:	3302      	adds	r3, #2
 800166a:	b29b      	uxth	r3, r3
 800166c:	b21b      	sxth	r3, r3
 800166e:	2114      	movs	r1, #20
 8001670:	4618      	mov	r0, r3
 8001672:	f001 fa89 	bl	8002b88 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Pres", Font_7x10, White);
 8001676:	4a19      	ldr	r2, [pc, #100]	; (80016dc <Mostrar_Presion+0xac>)
 8001678:	2301      	movs	r3, #1
 800167a:	ca06      	ldmia	r2, {r1, r2}
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <Mostrar_Presion+0xb0>)
 800167e:	f001 fa5d 	bl	8002b3c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 9, 35);
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <Mostrar_Presion+0xa4>)
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	b29b      	uxth	r3, r3
 800168a:	3b09      	subs	r3, #9
 800168c:	b29b      	uxth	r3, r3
 800168e:	b21b      	sxth	r3, r3
 8001690:	2123      	movs	r1, #35	; 0x23
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fa78 	bl	8002b88 <ssd1306_SetCursor>

		//Char_Display(Presion, 1);

		sprintf(Humedad_str, "%.1f", Presion);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7fe ff5d 	bl	8000558 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4910      	ldr	r1, [pc, #64]	; (80016e4 <Mostrar_Presion+0xb4>)
 80016a4:	4810      	ldr	r0, [pc, #64]	; (80016e8 <Mostrar_Presion+0xb8>)
 80016a6:	f008 fced 	bl	800a084 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <Mostrar_Presion+0xac>)
 80016ac:	2301      	movs	r3, #1
 80016ae:	ca06      	ldmia	r2, {r1, r2}
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <Mostrar_Presion+0xb8>)
 80016b2:	f001 fa43 	bl	8002b3c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" Atm", Font_7x10, White);
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <Mostrar_Presion+0xac>)
 80016b8:	2301      	movs	r3, #1
 80016ba:	ca06      	ldmia	r2, {r1, r2}
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <Mostrar_Presion+0xbc>)
 80016be:	f001 fa3d 	bl	8002b3c <ssd1306_WriteString>
		#endif
	}
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	420a3d71 	.word	0x420a3d71
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000002 	.word	0x20000002
 80016d8:	20000286 	.word	0x20000286
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	0800c21c 	.word	0x0800c21c
 80016e4:	0800c208 	.word	0x0800c208
 80016e8:	2000028c 	.word	0x2000028c
 80016ec:	0800c224 	.word	0x0800c224

080016f0 <Mostrar_Lux>:

void Mostrar_Lux()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	float Lux = 30.34;
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <Mostrar_Lux+0x7c>)
 80016f8:	607b      	str	r3, [r7, #4]

	if(Cambio_Pantalla == 1)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <Mostrar_Lux+0x80>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d130      	bne.n	8001764 <Mostrar_Lux+0x74>
	{
		ssd1306_SetCursor(iD + 2, 20);
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <Mostrar_Lux+0x84>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	b29b      	uxth	r3, r3
 800170a:	3302      	adds	r3, #2
 800170c:	b29b      	uxth	r3, r3
 800170e:	b21b      	sxth	r3, r3
 8001710:	2114      	movs	r1, #20
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fa38 	bl	8002b88 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Lux", Font_7x10, White);
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <Mostrar_Lux+0x88>)
 800171a:	2301      	movs	r3, #1
 800171c:	ca06      	ldmia	r2, {r1, r2}
 800171e:	4817      	ldr	r0, [pc, #92]	; (800177c <Mostrar_Lux+0x8c>)
 8001720:	f001 fa0c 	bl	8002b3c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD - 4, 35);
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <Mostrar_Lux+0x90>)
 8001726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b04      	subs	r3, #4
 800172e:	b29b      	uxth	r3, r3
 8001730:	b21b      	sxth	r3, r3
 8001732:	2123      	movs	r1, #35	; 0x23
 8001734:	4618      	mov	r0, r3
 8001736:	f001 fa27 	bl	8002b88 <ssd1306_SetCursor>

		//Char_Display(Lux, 1);

		sprintf(Humedad_str, "%.1f", Lux);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe ff0c 	bl	8000558 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	490f      	ldr	r1, [pc, #60]	; (8001784 <Mostrar_Lux+0x94>)
 8001746:	4810      	ldr	r0, [pc, #64]	; (8001788 <Mostrar_Lux+0x98>)
 8001748:	f008 fc9c 	bl	800a084 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <Mostrar_Lux+0x88>)
 800174e:	2301      	movs	r3, #1
 8001750:	ca06      	ldmia	r2, {r1, r2}
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <Mostrar_Lux+0x98>)
 8001754:	f001 f9f2 	bl	8002b3c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" %", Font_7x10, White);
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <Mostrar_Lux+0x88>)
 800175a:	2301      	movs	r3, #1
 800175c:	ca06      	ldmia	r2, {r1, r2}
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <Mostrar_Lux+0x9c>)
 8001760:	f001 f9ec 	bl	8002b3c <ssd1306_WriteString>
		#endif
	}
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	41f2b852 	.word	0x41f2b852
 8001770:	20000286 	.word	0x20000286
 8001774:	20000004 	.word	0x20000004
 8001778:	2000000c 	.word	0x2000000c
 800177c:	0800c22c 	.word	0x0800c22c
 8001780:	20000006 	.word	0x20000006
 8001784:	0800c208 	.word	0x0800c208
 8001788:	2000028c 	.word	0x2000028c
 800178c:	0800c218 	.word	0x0800c218

08001790 <Mostrar_Velocidad>:

void Mostrar_Velocidad()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	float Velocidad = 30.45;
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <Mostrar_Velocidad+0x9c>)
 8001798:	607b      	str	r3, [r7, #4]

	if (i <= -50 && j <= -50)
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <Mostrar_Velocidad+0xa0>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80017a4:	da08      	bge.n	80017b8 <Mostrar_Velocidad+0x28>
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <Mostrar_Velocidad+0xa4>)
 80017a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ac:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80017b0:	da02      	bge.n	80017b8 <Mostrar_Velocidad+0x28>
	{
		Cambio_Pantalla = 0;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <Mostrar_Velocidad+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
	}

	if(Cambio_Pantalla == 2)
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <Mostrar_Velocidad+0xa8>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d130      	bne.n	8001822 <Mostrar_Velocidad+0x92>
	{
		ssd1306_SetCursor(i + 8, 20);
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <Mostrar_Velocidad+0xa0>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3308      	adds	r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	2114      	movs	r1, #20
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 f9d9 	bl	8002b88 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Vel", Font_7x10, White);
 80017d6:	4a19      	ldr	r2, [pc, #100]	; (800183c <Mostrar_Velocidad+0xac>)
 80017d8:	2301      	movs	r3, #1
 80017da:	ca06      	ldmia	r2, {r1, r2}
 80017dc:	4818      	ldr	r0, [pc, #96]	; (8001840 <Mostrar_Velocidad+0xb0>)
 80017de:	f001 f9ad 	bl	8002b3c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(j - 11, 35);
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <Mostrar_Velocidad+0xa4>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b0b      	subs	r3, #11
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	2123      	movs	r1, #35	; 0x23
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 f9c8 	bl	8002b88 <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Velocidad);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7fe fead 	bl	8000558 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4910      	ldr	r1, [pc, #64]	; (8001844 <Mostrar_Velocidad+0xb4>)
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <Mostrar_Velocidad+0xb8>)
 8001806:	f008 fc3d 	bl	800a084 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <Mostrar_Velocidad+0xac>)
 800180c:	2301      	movs	r3, #1
 800180e:	ca06      	ldmia	r2, {r1, r2}
 8001810:	480d      	ldr	r0, [pc, #52]	; (8001848 <Mostrar_Velocidad+0xb8>)
 8001812:	f001 f993 	bl	8002b3c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" km/h", Font_7x10, White);
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <Mostrar_Velocidad+0xac>)
 8001818:	2301      	movs	r3, #1
 800181a:	ca06      	ldmia	r2, {r1, r2}
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <Mostrar_Velocidad+0xbc>)
 800181e:	f001 f98d 	bl	8002b3c <ssd1306_WriteString>
		#endif
	}
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	41f3999a 	.word	0x41f3999a
 8001830:	20000000 	.word	0x20000000
 8001834:	20000002 	.word	0x20000002
 8001838:	20000286 	.word	0x20000286
 800183c:	2000000c 	.word	0x2000000c
 8001840:	0800c230 	.word	0x0800c230
 8001844:	0800c208 	.word	0x0800c208
 8001848:	2000028c 	.word	0x2000028c
 800184c:	0800c234 	.word	0x0800c234

08001850 <Mostrar_Calidad_Aire>:

void Mostrar_Calidad_Aire()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
	float Calidad = 30.45;
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <Mostrar_Calidad_Aire+0x74>)
 8001858:	607b      	str	r3, [r7, #4]

	if(Cambio_Pantalla == 2)
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <Mostrar_Calidad_Aire+0x78>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d12c      	bne.n	80018bc <Mostrar_Calidad_Aire+0x6c>
	{
		ssd1306_SetCursor(iD + 3, 20);
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <Mostrar_Calidad_Aire+0x7c>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	b29b      	uxth	r3, r3
 800186a:	3303      	adds	r3, #3
 800186c:	b29b      	uxth	r3, r3
 800186e:	b21b      	sxth	r3, r3
 8001870:	2114      	movs	r1, #20
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f988 	bl	8002b88 <ssd1306_SetCursor>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString("Aire", Font_7x10, White);
 8001878:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <Mostrar_Calidad_Aire+0x80>)
 800187a:	2301      	movs	r3, #1
 800187c:	ca06      	ldmia	r2, {r1, r2}
 800187e:	4815      	ldr	r0, [pc, #84]	; (80018d4 <Mostrar_Calidad_Aire+0x84>)
 8001880:	f001 f95c 	bl	8002b3c <ssd1306_WriteString>
		#endif

		ssd1306_SetCursor(jD, 35);
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <Mostrar_Calidad_Aire+0x88>)
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	2123      	movs	r1, #35	; 0x23
 800188c:	4618      	mov	r0, r3
 800188e:	f001 f97b 	bl	8002b88 <ssd1306_SetCursor>

		sprintf(Humedad_str, "%.1f", Calidad);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7fe fe60 	bl	8000558 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	490f      	ldr	r1, [pc, #60]	; (80018dc <Mostrar_Calidad_Aire+0x8c>)
 800189e:	4810      	ldr	r0, [pc, #64]	; (80018e0 <Mostrar_Calidad_Aire+0x90>)
 80018a0:	f008 fbf0 	bl	800a084 <siprintf>

		ssd1306_WriteString(Humedad_str, Font_7x10, White);
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <Mostrar_Calidad_Aire+0x80>)
 80018a6:	2301      	movs	r3, #1
 80018a8:	ca06      	ldmia	r2, {r1, r2}
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <Mostrar_Calidad_Aire+0x90>)
 80018ac:	f001 f946 	bl	8002b3c <ssd1306_WriteString>

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_WriteString(" %", Font_7x10, White);
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <Mostrar_Calidad_Aire+0x80>)
 80018b2:	2301      	movs	r3, #1
 80018b4:	ca06      	ldmia	r2, {r1, r2}
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <Mostrar_Calidad_Aire+0x94>)
 80018b8:	f001 f940 	bl	8002b3c <ssd1306_WriteString>
		#endif
	}
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	41f3999a 	.word	0x41f3999a
 80018c8:	20000286 	.word	0x20000286
 80018cc:	20000004 	.word	0x20000004
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	0800c23c 	.word	0x0800c23c
 80018d8:	20000006 	.word	0x20000006
 80018dc:	0800c208 	.word	0x0800c208
 80018e0:	2000028c 	.word	0x2000028c
 80018e4:	0800c218 	.word	0x0800c218

080018e8 <Mostrar_Tiempo>:

void Mostrar_Tiempo(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80018ee:	463b      	mov	r3, r7
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	482e      	ldr	r0, [pc, #184]	; (80019b0 <Mostrar_Tiempo+0xc8>)
 80018f6:	f004 fc89 	bl	800620c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2200      	movs	r2, #0
 8001900:	4619      	mov	r1, r3
 8001902:	482b      	ldr	r0, [pc, #172]	; (80019b0 <Mostrar_Tiempo+0xc8>)
 8001904:	f004 fd64 	bl	80063d0 <HAL_RTC_GetDate>

	ssd1306_SetCursor(35, 0);
 8001908:	2100      	movs	r1, #0
 800190a:	2023      	movs	r0, #35	; 0x23
 800190c:	f001 f93c 	bl	8002b88 <ssd1306_SetCursor>

	Char_Display(15 + gTime.Hours, 0);
 8001910:	783b      	ldrb	r3, [r7, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	330f      	adds	r3, #15
 8001916:	b29b      	uxth	r3, r3
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f850 	bl	80019c0 <Char_Display>
	ssd1306_WriteString(":", Font_7x10, White);
 8001920:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <Mostrar_Tiempo+0xcc>)
 8001922:	2301      	movs	r3, #1
 8001924:	ca06      	ldmia	r2, {r1, r2}
 8001926:	4824      	ldr	r0, [pc, #144]	; (80019b8 <Mostrar_Tiempo+0xd0>)
 8001928:	f001 f908 	bl	8002b3c <ssd1306_WriteString>
	Char_Display(1 + gTime.Minutes, 1);
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	b29b      	uxth	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	2101      	movs	r1, #1
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f842 	bl	80019c0 <Char_Display>
	ssd1306_WriteString(":", Font_7x10, White);
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <Mostrar_Tiempo+0xcc>)
 800193e:	2301      	movs	r3, #1
 8001940:	ca06      	ldmia	r2, {r1, r2}
 8001942:	481d      	ldr	r0, [pc, #116]	; (80019b8 <Mostrar_Tiempo+0xd0>)
 8001944:	f001 f8fa 	bl	8002b3c <ssd1306_WriteString>
	Char_Display(gTime.Seconds, 1);
 8001948:	78bb      	ldrb	r3, [r7, #2]
 800194a:	b29b      	uxth	r3, r3
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f836 	bl	80019c0 <Char_Display>

	ssd1306_SetCursor(28, 54);
 8001954:	2136      	movs	r1, #54	; 0x36
 8001956:	201c      	movs	r0, #28
 8001958:	f001 f916 	bl	8002b88 <ssd1306_SetCursor>

	Char_Display(2023 + gDate.Year, 0);
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	b29b      	uxth	r3, r3
 8001960:	f203 73e7 	addw	r3, r3, #2023	; 0x7e7
 8001964:	b29b      	uxth	r3, r3
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f829 	bl	80019c0 <Char_Display>
	ssd1306_WriteString("/", Font_7x10, White);
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <Mostrar_Tiempo+0xcc>)
 8001970:	2301      	movs	r3, #1
 8001972:	ca06      	ldmia	r2, {r1, r2}
 8001974:	4811      	ldr	r0, [pc, #68]	; (80019bc <Mostrar_Tiempo+0xd4>)
 8001976:	f001 f8e1 	bl	8002b3c <ssd1306_WriteString>
	Char_Display(7 + gDate.Month, 1);
 800197a:	7d7b      	ldrb	r3, [r7, #21]
 800197c:	b29b      	uxth	r3, r3
 800197e:	3307      	adds	r3, #7
 8001980:	b29b      	uxth	r3, r3
 8001982:	2101      	movs	r1, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f81b 	bl	80019c0 <Char_Display>
	ssd1306_WriteString("/", Font_7x10, White);
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <Mostrar_Tiempo+0xcc>)
 800198c:	2301      	movs	r3, #1
 800198e:	ca06      	ldmia	r2, {r1, r2}
 8001990:	480a      	ldr	r0, [pc, #40]	; (80019bc <Mostrar_Tiempo+0xd4>)
 8001992:	f001 f8d3 	bl	8002b3c <ssd1306_WriteString>
	Char_Display(29 + gDate.Date, 1);
 8001996:	7dbb      	ldrb	r3, [r7, #22]
 8001998:	b29b      	uxth	r3, r3
 800199a:	331d      	adds	r3, #29
 800199c:	b29b      	uxth	r3, r3
 800199e:	2101      	movs	r1, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f80d 	bl	80019c0 <Char_Display>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000648 	.word	0x20000648
 80019b4:	2000000c 	.word	0x2000000c
 80019b8:	0800c244 	.word	0x0800c244
 80019bc:	0800c248 	.word	0x0800c248

080019c0 <Char_Display>:

void Char_Display(uint16_t dato, uint8_t Cero)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	80fb      	strh	r3, [r7, #6]
 80019cc:	4613      	mov	r3, r2
 80019ce:	717b      	strb	r3, [r7, #5]
	uint8_t aux1 = 0, aux2 = 0, aux3 = 0, aux4 = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	2300      	movs	r3, #0
 80019d6:	73bb      	strb	r3, [r7, #14]
 80019d8:	2300      	movs	r3, #0
 80019da:	737b      	strb	r3, [r7, #13]
 80019dc:	2300      	movs	r3, #0
 80019de:	733b      	strb	r3, [r7, #12]

	#ifdef SSD1306_INCLUDE_FONT_7x10

	if(dato >= 0 && dato < 10)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	2b09      	cmp	r3, #9
 80019e4:	d812      	bhi.n	8001a0c <Char_Display+0x4c>
	{
		if (Cero)
 80019e6:	797b      	ldrb	r3, [r7, #5]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <Char_Display+0x38>
			ssd1306_WriteChar(48, Font_7x10, White);
 80019ec:	4a70      	ldr	r2, [pc, #448]	; (8001bb0 <Char_Display+0x1f0>)
 80019ee:	2301      	movs	r3, #1
 80019f0:	ca06      	ldmia	r2, {r1, r2}
 80019f2:	2030      	movs	r0, #48	; 0x30
 80019f4:	f001 f822 	bl	8002a3c <ssd1306_WriteChar>
		ssd1306_WriteChar(dato + 48, Font_7x10, White);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	3330      	adds	r3, #48	; 0x30
 80019fe:	b2d8      	uxtb	r0, r3
 8001a00:	4a6b      	ldr	r2, [pc, #428]	; (8001bb0 <Char_Display+0x1f0>)
 8001a02:	2301      	movs	r3, #1
 8001a04:	ca06      	ldmia	r2, {r1, r2}
 8001a06:	f001 f819 	bl	8002a3c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
	}

	#endif
}
 8001a0a:	e0cc      	b.n	8001ba6 <Char_Display+0x1e6>
	else if(dato >= 10 && dato < 100)
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	2b09      	cmp	r3, #9
 8001a10:	d926      	bls.n	8001a60 <Char_Display+0xa0>
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b63      	cmp	r3, #99	; 0x63
 8001a16:	d823      	bhi.n	8001a60 <Char_Display+0xa0>
		aux1 = dato / 10;
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	4a66      	ldr	r2, [pc, #408]	; (8001bb4 <Char_Display+0x1f4>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	73fb      	strb	r3, [r7, #15]
		dato %= 10;
 8001a26:	88fa      	ldrh	r2, [r7, #6]
 8001a28:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <Char_Display+0x1f4>)
 8001a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a2e:	08d9      	lsrs	r1, r3, #3
 8001a30:	460b      	mov	r3, r1
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	80fb      	strh	r3, [r7, #6]
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	3330      	adds	r3, #48	; 0x30
 8001a40:	b2d8      	uxtb	r0, r3
 8001a42:	4a5b      	ldr	r2, [pc, #364]	; (8001bb0 <Char_Display+0x1f0>)
 8001a44:	2301      	movs	r3, #1
 8001a46:	ca06      	ldmia	r2, {r1, r2}
 8001a48:	f000 fff8 	bl	8002a3c <ssd1306_WriteChar>
		ssd1306_WriteChar(dato + 48, Font_7x10, White);
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3330      	adds	r3, #48	; 0x30
 8001a52:	b2d8      	uxtb	r0, r3
 8001a54:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <Char_Display+0x1f0>)
 8001a56:	2301      	movs	r3, #1
 8001a58:	ca06      	ldmia	r2, {r1, r2}
 8001a5a:	f000 ffef 	bl	8002a3c <ssd1306_WriteChar>
 8001a5e:	e0a2      	b.n	8001ba6 <Char_Display+0x1e6>
	else if(dato >= 100 && dato < 1000)
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	2b63      	cmp	r3, #99	; 0x63
 8001a64:	d940      	bls.n	8001ae8 <Char_Display+0x128>
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6c:	d23c      	bcs.n	8001ae8 <Char_Display+0x128>
		aux1 = dato % 10;
 8001a6e:	88fa      	ldrh	r2, [r7, #6]
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <Char_Display+0x1f4>)
 8001a72:	fba3 1302 	umull	r1, r3, r3, r2
 8001a76:	08d9      	lsrs	r1, r3, #3
 8001a78:	460b      	mov	r3, r1
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	73fb      	strb	r3, [r7, #15]
		aux2 = dato / 10;
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4a4a      	ldr	r2, [pc, #296]	; (8001bb4 <Char_Display+0x1f4>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	73bb      	strb	r3, [r7, #14]
		aux3 = aux2 / 10;
 8001a94:	7bbb      	ldrb	r3, [r7, #14]
 8001a96:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <Char_Display+0x1f4>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	737b      	strb	r3, [r7, #13]
		aux2 %= 10;
 8001aa0:	7bba      	ldrb	r2, [r7, #14]
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <Char_Display+0x1f4>)
 8001aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa8:	08d9      	lsrs	r1, r3, #3
 8001aaa:	460b      	mov	r3, r1
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	73bb      	strb	r3, [r7, #14]
		ssd1306_WriteChar(aux3 + 48, Font_7x10, White);
 8001ab6:	7b7b      	ldrb	r3, [r7, #13]
 8001ab8:	3330      	adds	r3, #48	; 0x30
 8001aba:	b2d8      	uxtb	r0, r3
 8001abc:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <Char_Display+0x1f0>)
 8001abe:	2301      	movs	r3, #1
 8001ac0:	ca06      	ldmia	r2, {r1, r2}
 8001ac2:	f000 ffbb 	bl	8002a3c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	3330      	adds	r3, #48	; 0x30
 8001aca:	b2d8      	uxtb	r0, r3
 8001acc:	4a38      	ldr	r2, [pc, #224]	; (8001bb0 <Char_Display+0x1f0>)
 8001ace:	2301      	movs	r3, #1
 8001ad0:	ca06      	ldmia	r2, {r1, r2}
 8001ad2:	f000 ffb3 	bl	8002a3c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3330      	adds	r3, #48	; 0x30
 8001ada:	b2d8      	uxtb	r0, r3
 8001adc:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <Char_Display+0x1f0>)
 8001ade:	2301      	movs	r3, #1
 8001ae0:	ca06      	ldmia	r2, {r1, r2}
 8001ae2:	f000 ffab 	bl	8002a3c <ssd1306_WriteChar>
 8001ae6:	e05e      	b.n	8001ba6 <Char_Display+0x1e6>
	else if(dato >= 1000 && dato < 10000)
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aee:	d35a      	bcc.n	8001ba6 <Char_Display+0x1e6>
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d855      	bhi.n	8001ba6 <Char_Display+0x1e6>
		aux1 = dato % 10;
 8001afa:	88fa      	ldrh	r2, [r7, #6]
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <Char_Display+0x1f4>)
 8001afe:	fba3 1302 	umull	r1, r3, r3, r2
 8001b02:	08d9      	lsrs	r1, r3, #3
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	73fb      	strb	r3, [r7, #15]
		aux2 = dato / 10;
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <Char_Display+0x1f4>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	08db      	lsrs	r3, r3, #3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	73bb      	strb	r3, [r7, #14]
		aux3 = aux2 / 10;
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <Char_Display+0x1f4>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	737b      	strb	r3, [r7, #13]
		aux2 %= 10;
 8001b2c:	7bba      	ldrb	r2, [r7, #14]
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <Char_Display+0x1f4>)
 8001b30:	fba3 1302 	umull	r1, r3, r3, r2
 8001b34:	08d9      	lsrs	r1, r3, #3
 8001b36:	460b      	mov	r3, r1
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	73bb      	strb	r3, [r7, #14]
		aux4 = aux3 / 10;
 8001b42:	7b7b      	ldrb	r3, [r7, #13]
 8001b44:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <Char_Display+0x1f4>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	08db      	lsrs	r3, r3, #3
 8001b4c:	733b      	strb	r3, [r7, #12]
		aux3 %= 10;
 8001b4e:	7b7a      	ldrb	r2, [r7, #13]
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <Char_Display+0x1f4>)
 8001b52:	fba3 1302 	umull	r1, r3, r3, r2
 8001b56:	08d9      	lsrs	r1, r3, #3
 8001b58:	460b      	mov	r3, r1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	737b      	strb	r3, [r7, #13]
		ssd1306_WriteChar(aux4 + 48, Font_7x10, White);
 8001b64:	7b3b      	ldrb	r3, [r7, #12]
 8001b66:	3330      	adds	r3, #48	; 0x30
 8001b68:	b2d8      	uxtb	r0, r3
 8001b6a:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <Char_Display+0x1f0>)
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	ca06      	ldmia	r2, {r1, r2}
 8001b70:	f000 ff64 	bl	8002a3c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux3 + 48, Font_7x10, White);
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
 8001b76:	3330      	adds	r3, #48	; 0x30
 8001b78:	b2d8      	uxtb	r0, r3
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <Char_Display+0x1f0>)
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	ca06      	ldmia	r2, {r1, r2}
 8001b80:	f000 ff5c 	bl	8002a3c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux2 + 48, Font_7x10, White);
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	3330      	adds	r3, #48	; 0x30
 8001b88:	b2d8      	uxtb	r0, r3
 8001b8a:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <Char_Display+0x1f0>)
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	ca06      	ldmia	r2, {r1, r2}
 8001b90:	f000 ff54 	bl	8002a3c <ssd1306_WriteChar>
		ssd1306_WriteChar(aux1 + 48, Font_7x10, White);
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	3330      	adds	r3, #48	; 0x30
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <Char_Display+0x1f0>)
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	ca06      	ldmia	r2, {r1, r2}
 8001ba0:	f000 ff4c 	bl	8002a3c <ssd1306_WriteChar>
}
 8001ba4:	e7ff      	b.n	8001ba6 <Char_Display+0x1e6>
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	cccccccd 	.word	0xcccccccd

08001bb8 <Scroll>:

	#endif
}

void Scroll(uint8_t Cambio_Datos, uint8_t Posicion_X, uint8_t Posicion_Y)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	71bb      	strb	r3, [r7, #6]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	717b      	strb	r3, [r7, #5]
	if (Flag_Datos && Flag_Scroll && Cambio_Pantalla == Cambio_Datos)
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <Scroll+0x130>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02f      	beq.n	8001c32 <Scroll+0x7a>
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <Scroll+0x134>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d02b      	beq.n	8001c32 <Scroll+0x7a>
 8001bda:	4b45      	ldr	r3, [pc, #276]	; (8001cf0 <Scroll+0x138>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	79fa      	ldrb	r2, [r7, #7]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d126      	bne.n	8001c32 <Scroll+0x7a>
	{
		Flag_Scroll = 0;
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <Scroll+0x134>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]

			i--;
 8001bea:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <Scroll+0x13c>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <Scroll+0x13c>)
 8001bfa:	801a      	strh	r2, [r3, #0]
			j--;
 8001bfc:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <Scroll+0x140>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <Scroll+0x140>)
 8001c0c:	801a      	strh	r2, [r3, #0]

			iD++;
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <Scroll+0x144>)
 8001c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <Scroll+0x144>)
 8001c1e:	801a      	strh	r2, [r3, #0]
			jD++;
 8001c20:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <Scroll+0x148>)
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <Scroll+0x148>)
 8001c30:	801a      	strh	r2, [r3, #0]
	}

	if (Cambio_Pantalla == Cambio_Datos)
 8001c32:	4b2f      	ldr	r3, [pc, #188]	; (8001cf0 <Scroll+0x138>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d14f      	bne.n	8001cdc <Scroll+0x124>
	{
		if(i < Posicion_X && j < Posicion_Y && Reinicio_Scroll == Cambio_Datos)
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <Scroll+0x13c>)
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	461a      	mov	r2, r3
 8001c44:	79bb      	ldrb	r3, [r7, #6]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	da33      	bge.n	8001cb2 <Scroll+0xfa>
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <Scroll+0x140>)
 8001c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c50:	461a      	mov	r2, r3
 8001c52:	797b      	ldrb	r3, [r7, #5]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	da2c      	bge.n	8001cb2 <Scroll+0xfa>
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <Scroll+0x14c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d127      	bne.n	8001cb2 <Scroll+0xfa>
		{
			i++;
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <Scroll+0x13c>)
 8001c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <Scroll+0x13c>)
 8001c72:	801a      	strh	r2, [r3, #0]
			j++;
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <Scroll+0x140>)
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <Scroll+0x140>)
 8001c84:	801a      	strh	r2, [r3, #0]

			iD--;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <Scroll+0x144>)
 8001c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <Scroll+0x144>)
 8001c96:	801a      	strh	r2, [r3, #0]
			jD--;
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <Scroll+0x148>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <Scroll+0x148>)
 8001ca8:	801a      	strh	r2, [r3, #0]

			Flag_Datos = 0;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <Scroll+0x130>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
				Reinicio_Scroll = Cambio_Datos + 1;
			}

		}
	}
}
 8001cb0:	e014      	b.n	8001cdc <Scroll+0x124>
		else if(Reinicio_Scroll == Cambio_Datos)
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <Scroll+0x14c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	79fa      	ldrb	r2, [r7, #7]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d10f      	bne.n	8001cdc <Scroll+0x124>
			Datos = 3000;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <Scroll+0x150>)
 8001cbe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cc2:	801a      	strh	r2, [r3, #0]
			if(Cambio_Datos == 2)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d103      	bne.n	8001cd2 <Scroll+0x11a>
				Reinicio_Scroll = 0;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <Scroll+0x14c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
}
 8001cd0:	e004      	b.n	8001cdc <Scroll+0x124>
				Reinicio_Scroll = Cambio_Datos + 1;
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <Scroll+0x14c>)
 8001cda:	701a      	strb	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000b89 	.word	0x20000b89
 8001cec:	20000b88 	.word	0x20000b88
 8001cf0:	20000286 	.word	0x20000286
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000002 	.word	0x20000002
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	20000006 	.word	0x20000006
 8001d04:	20000285 	.word	0x20000285
 8001d08:	20000008 	.word	0x20000008

08001d0c <Mostrar_Datos>:
	}
}


void Mostrar_Datos()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f000 fddd 	bl	80028d0 <ssd1306_Fill>

	Scroll(0, 25, 17);
 8001d16:	2211      	movs	r2, #17
 8001d18:	2119      	movs	r1, #25
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff ff4c 	bl	8001bb8 <Scroll>

	Mostrar_Tiempo();
 8001d20:	f7ff fde2 	bl	80018e8 <Mostrar_Tiempo>
	Mostrar_Temperatura();
 8001d24:	f7ff fbbe 	bl	80014a4 <Mostrar_Temperatura>
	Mostrar_Humedad();
 8001d28:	f7ff fc32 	bl	8001590 <Mostrar_Humedad>

	Scroll(1, 25, 17);
 8001d2c:	2211      	movs	r2, #17
 8001d2e:	2119      	movs	r1, #25
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff ff41 	bl	8001bb8 <Scroll>

	Mostrar_Tiempo();
 8001d36:	f7ff fdd7 	bl	80018e8 <Mostrar_Tiempo>
	Mostrar_Presion();
 8001d3a:	f7ff fc79 	bl	8001630 <Mostrar_Presion>
	Mostrar_Lux();
 8001d3e:	f7ff fcd7 	bl	80016f0 <Mostrar_Lux>

	Scroll(2, 25, 17);
 8001d42:	2211      	movs	r2, #17
 8001d44:	2119      	movs	r1, #25
 8001d46:	2002      	movs	r0, #2
 8001d48:	f7ff ff36 	bl	8001bb8 <Scroll>

	Mostrar_Tiempo();
 8001d4c:	f7ff fdcc 	bl	80018e8 <Mostrar_Tiempo>
	Mostrar_Velocidad();
 8001d50:	f7ff fd1e 	bl	8001790 <Mostrar_Velocidad>
	Mostrar_Calidad_Aire();
 8001d54:	f7ff fd7c 	bl	8001850 <Mostrar_Calidad_Aire>

	Battery_100();
 8001d58:	f001 f852 	bl	8002e00 <Battery_100>
	Wifi_On();
 8001d5c:	f001 f87e 	bl	8002e5c <Wifi_On>

	ssd1306_UpdateScreen();
 8001d60:	f000 fdda 	bl	8002918 <ssd1306_UpdateScreen>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <LM35_Read_Temperature>:
 *  Created on: Sep 28, 2023
 *      Author: axu_n
 */

float LM35_Read_Temperature(unsigned int Temp_ADC)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	return ((330.0 * Temp_ADC)/4095);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe fbcf 	bl	8000514 <__aeabi_ui2d>
 8001d76:	a30e      	add	r3, pc, #56	; (adr r3, 8001db0 <LM35_Read_Temperature+0x48>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc44 	bl	8000608 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	a30b      	add	r3, pc, #44	; (adr r3, 8001db8 <LM35_Read_Temperature+0x50>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f7fe fd65 	bl	800085c <__aeabi_ddiv>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe ff0d 	bl	8000bb8 <__aeabi_d2f>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	ee07 3a90 	vmov	s15, r3
}
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	00000000 	.word	0x00000000
 8001db4:	4074a000 	.word	0x4074a000
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40affe00 	.word	0x40affe00

08001dc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a07      	ldr	r2, [pc, #28]	; (8001dec <vApplicationGetIdleTaskMemory+0x2c>)
 8001dd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <vApplicationGetIdleTaskMemory+0x30>)
 8001dd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000298 	.word	0x20000298
 8001df0:	2000034c 	.word	0x2000034c

08001df4 <Set_Time>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Set_Time(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
	/** Initialize RTC and set the Time and Date
	*/

	RTC_TimeTypeDef sTime = {0};
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001e08:	2300      	movs	r3, #0
 8001e0a:	603b      	str	r3, [r7, #0]

	sTime.Hours = 0x0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2201      	movs	r2, #1
 8001e24:	4619      	mov	r1, r3
 8001e26:	4812      	ldr	r0, [pc, #72]	; (8001e70 <Set_Time+0x7c>)
 8001e28:	f004 f956 	bl	80060d8 <HAL_RTC_SetTime>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <Set_Time+0x42>
	{
		Error_Handler();
 8001e32:	f000 fca5 	bl	8002780 <Error_Handler>
	}

	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e36:	2301      	movs	r3, #1
 8001e38:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e46:	463b      	mov	r3, r7
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <Set_Time+0x7c>)
 8001e4e:	f004 fa3b 	bl	80062c8 <HAL_RTC_SetDate>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <Set_Time+0x68>
	{
		Error_Handler();
 8001e58:	f000 fc92 	bl	8002780 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001e5c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001e60:	2101      	movs	r1, #1
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <Set_Time+0x7c>)
 8001e64:	f004 fcea 	bl	800683c <HAL_RTCEx_BKUPWrite>
}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000648 	.word	0x20000648

08001e74 <Set_Alarm>:

void Set_Alarm (void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0

	RTC_AlarmTypeDef sAlarm = {0};
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	2228      	movs	r2, #40	; 0x28
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f007 fb7e 	bl	8009582 <memset>

	/** Enable the Alarm A
	*/
	sAlarm.AlarmTime.Hours = 0x0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8001eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <Set_Alarm+0x60>)
 8001ebe:	f004 fad6 	bl	800646e <HAL_RTC_SetAlarm>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <Set_Alarm+0x58>
	{
		Error_Handler();
 8001ec8:	f000 fc5a 	bl	8002780 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */
}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	; 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000648 	.word	0x20000648

08001ed8 <Task_Data_Display>:

void Task_Data_Display (void *pvParameters)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	//vTaskPrioritySet(Task_ReadSensors, tskIDLE_PRIORITY + 2);

	ssd1306_Init();
 8001ee0:	f000 fc8c 	bl	80027fc <ssd1306_Init>

	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1))
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	480f      	ldr	r0, [pc, #60]	; (8001f24 <Task_Data_Display+0x4c>)
 8001ee8:	f004 fcc2 	bl	8006870 <HAL_RTCEx_BKUPRead>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <Task_Data_Display+0x1e>
	{
	  Set_Time();
 8001ef2:	f7ff ff7f 	bl	8001df4 <Set_Time>
	}

	Set_Alarm();
 8001ef6:	f7ff ffbd 	bl	8001e74 <Set_Alarm>

	for (int i = 0; i < 128 * 64 / 8; ++i) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e007      	b.n	8001f10 <Task_Data_Display+0x38>
		 screenBuffer[i] = 0xFF;
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <Task_Data_Display+0x50>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	22ff      	movs	r2, #255	; 0xff
 8001f08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 128 * 64 / 8; ++i) {
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	dbf3      	blt.n	8001f00 <Task_Data_Display+0x28>
	}

	HAL_TIM_Base_Start_IT(&htim2);
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <Task_Data_Display+0x54>)
 8001f1a:	f004 fd11 	bl	8006940 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		Mostrar_Datos();
 8001f1e:	f7ff fef5 	bl	8001d0c <Mostrar_Datos>
 8001f22:	e7fc      	b.n	8001f1e <Task_Data_Display+0x46>
 8001f24:	20000648 	.word	0x20000648
 8001f28:	20000788 	.word	0x20000788
 8001f2c:	20000668 	.word	0x20000668

08001f30 <Task_ReadSensors>:
	}
}

void Task_ReadSensors(void *pvParam)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <Task_ReadSensors+0x3c>)
 8001f3a:	f004 fd01 	bl	8006940 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, &Temp_ADC, 1);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	490b      	ldr	r1, [pc, #44]	; (8001f70 <Task_ReadSensors+0x40>)
 8001f42:	480c      	ldr	r0, [pc, #48]	; (8001f74 <Task_ReadSensors+0x44>)
 8001f44:	f001 fca0 	bl	8003888 <HAL_ADC_Start_DMA>
		//xSemaphoreTake(sem1, portMAX_DELAY);
		//BME280_Measure(&MedicionesEstacion.Temperature, &MedicionesEstacion.Pressure);
		//BH1750_ReadLight(&MedicionesEstacion.Light);
		//MedicionesEstacion.AirQuality= MQ135_NivelContaminacion(ConversionGasADC);

		MedicionesEstacion.Temperature = LM35_Read_Temperature(Temp_ADC);
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <Task_ReadSensors+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff0b 	bl	8001d68 <LM35_Read_Temperature>
 8001f52:	eef0 7a40 	vmov.f32	s15, s0
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <Task_ReadSensors+0x48>)
 8001f58:	edc3 7a00 	vstr	s15, [r3]
		DHT22_Read_Humidity(&MedicionesEstacion.Humidity);
 8001f5c:	4807      	ldr	r0, [pc, #28]	; (8001f7c <Task_ReadSensors+0x4c>)
 8001f5e:	f7ff fa67 	bl	8001430 <DHT22_Read_Humidity>

		//xSemaphoreGive(sem1);

		//vTaskPrioritySet(Task_ReadSensors, tskIDLE_PRIORITY + 1);

		vTaskDelay(pdMS_TO_TICKS(1000));
 8001f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f66:	f006 fa27 	bl	80083b8 <vTaskDelay>
		MedicionesEstacion.Temperature = LM35_Read_Temperature(Temp_ADC);
 8001f6a:	e7ed      	b.n	8001f48 <Task_ReadSensors+0x18>
 8001f6c:	200006f8 	.word	0x200006f8
 8001f70:	20000784 	.word	0x20000784
 8001f74:	2000054c 	.word	0x2000054c
 8001f78:	20000b8c 	.word	0x20000b8c
 8001f7c:	20000b94 	.word	0x20000b94

08001f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f86:	f001 fbd5 	bl	8003734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8a:	f000 f833 	bl	8001ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f8e:	f000 fafb 	bl	8002588 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f92:	f000 fad9 	bl	8002548 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f96:	f000 faad 	bl	80024f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f9a:	f000 f8e9 	bl	8002170 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f9e:	f000 f9a1 	bl	80022e4 <MX_TIM2_Init>
  MX_RTC_Init();
 8001fa2:	f000 f913 	bl	80021cc <MX_RTC_Init>
  MX_TIM3_Init();
 8001fa6:	f000 f9e9 	bl	800237c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001faa:	f000 f88f 	bl	80020cc <MX_ADC1_Init>
  MX_TIM4_Init();
 8001fae:	f000 fa55 	bl	800245c <MX_TIM4_Init>
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#endif

  /* USER CODE BEGIN RTOS_THREADS */

  xTaskCreate(Task_Data_Display, "Data_Display", configMINIMAL_STACK_SIZE * 3, NULL, tskIDLE_PRIORITY + 1, NULL);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001fc0:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <main+0x64>)
 8001fc2:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <main+0x68>)
 8001fc4:	f006 f8ab 	bl	800811e <xTaskCreate>
  xTaskCreate(Task_ReadSensors, "ReadSensors", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	4905      	ldr	r1, [pc, #20]	; (8001fec <main+0x6c>)
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <main+0x70>)
 8001fd8:	f006 f8a1 	bl	800811e <xTaskCreate>

  vTaskStartScheduler();
 8001fdc:	f006 fa20 	bl	8008420 <vTaskStartScheduler>
#endif

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <main+0x60>
 8001fe2:	bf00      	nop
 8001fe4:	0800c24c 	.word	0x0800c24c
 8001fe8:	08001ed9 	.word	0x08001ed9
 8001fec:	0800c25c 	.word	0x0800c25c
 8001ff0:	08001f31 	.word	0x08001f31

08001ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b094      	sub	sp, #80	; 0x50
 8001ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	2230      	movs	r2, #48	; 0x30
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f007 fabd 	bl	8009582 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <SystemClock_Config+0xd0>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <SystemClock_Config+0xd0>)
 8002022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002026:	6413      	str	r3, [r2, #64]	; 0x40
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <SystemClock_Config+0xd0>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <SystemClock_Config+0xd4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002040:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <SystemClock_Config+0xd4>)
 8002042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <SystemClock_Config+0xd4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002054:	2309      	movs	r3, #9
 8002056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002058:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800205e:	2301      	movs	r3, #1
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002062:	2302      	movs	r3, #2
 8002064:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002066:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800206c:	2304      	movs	r3, #4
 800206e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002070:	2354      	movs	r3, #84	; 0x54
 8002072:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002074:	2302      	movs	r3, #2
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002078:	2307      	movs	r3, #7
 800207a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207c:	f107 0320 	add.w	r3, r7, #32
 8002080:	4618      	mov	r0, r3
 8002082:	f003 f9fb 	bl	800547c <HAL_RCC_OscConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800208c:	f000 fb78 	bl	8002780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002090:	230f      	movs	r3, #15
 8002092:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002094:	2302      	movs	r3, #2
 8002096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800209c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	2102      	movs	r1, #2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fc5d 	bl	800596c <HAL_RCC_ClockConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80020b8:	f000 fb62 	bl	8002780 <Error_Handler>
  }
}
 80020bc:	bf00      	nop
 80020be:	3750      	adds	r7, #80	; 0x50
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000

080020cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020d2:	463b      	mov	r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <MX_ADC1_Init+0x98>)
 80020e0:	4a21      	ldr	r2, [pc, #132]	; (8002168 <MX_ADC1_Init+0x9c>)
 80020e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <MX_ADC1_Init+0x98>)
 80020e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <MX_ADC1_Init+0x98>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <MX_ADC1_Init+0x98>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MX_ADC1_Init+0x98>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_ADC1_Init+0x98>)
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <MX_ADC1_Init+0x98>)
 8002108:	2200      	movs	r2, #0
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <MX_ADC1_Init+0x98>)
 800210e:	4a17      	ldr	r2, [pc, #92]	; (800216c <MX_ADC1_Init+0xa0>)
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <MX_ADC1_Init+0x98>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <MX_ADC1_Init+0x98>)
 800211a:	2201      	movs	r2, #1
 800211c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_ADC1_Init+0x98>)
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <MX_ADC1_Init+0x98>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800212c:	480d      	ldr	r0, [pc, #52]	; (8002164 <MX_ADC1_Init+0x98>)
 800212e:	f001 fb67 	bl	8003800 <HAL_ADC_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002138:	f000 fb22 	bl	8002780 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800213c:	2300      	movs	r3, #0
 800213e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002144:	2307      	movs	r3, #7
 8002146:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_ADC1_Init+0x98>)
 800214e:	f001 fca9 	bl	8003aa4 <HAL_ADC_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002158:	f000 fb12 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000054c 	.word	0x2000054c
 8002168:	40012000 	.word	0x40012000
 800216c:	0f000001 	.word	0x0f000001

08002170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <MX_I2C1_Init+0x50>)
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <MX_I2C1_Init+0x54>)
 8002178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_I2C1_Init+0x50>)
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <MX_I2C1_Init+0x58>)
 800217e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_I2C1_Init+0x50>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_I2C1_Init+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_I2C1_Init+0x50>)
 800218e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <MX_I2C1_Init+0x50>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_I2C1_Init+0x50>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <MX_I2C1_Init+0x50>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_I2C1_Init+0x50>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_I2C1_Init+0x50>)
 80021ae:	f002 fd09 	bl	8004bc4 <HAL_I2C_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021b8:	f000 fae2 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200005f4 	.word	0x200005f4
 80021c4:	40005400 	.word	0x40005400
 80021c8:	00061a80 	.word	0x00061a80

080021cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b090      	sub	sp, #64	; 0x40
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80021d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80021e2:	2300      	movs	r3, #0
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2228      	movs	r2, #40	; 0x28
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f007 f9c8 	bl	8009582 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021f2:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <MX_RTC_Init+0x110>)
 80021f4:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <MX_RTC_Init+0x114>)
 80021f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021f8:	4b38      	ldr	r3, [pc, #224]	; (80022dc <MX_RTC_Init+0x110>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021fe:	4b37      	ldr	r3, [pc, #220]	; (80022dc <MX_RTC_Init+0x110>)
 8002200:	227f      	movs	r2, #127	; 0x7f
 8002202:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002204:	4b35      	ldr	r3, [pc, #212]	; (80022dc <MX_RTC_Init+0x110>)
 8002206:	22ff      	movs	r2, #255	; 0xff
 8002208:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <MX_RTC_Init+0x110>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002210:	4b32      	ldr	r3, [pc, #200]	; (80022dc <MX_RTC_Init+0x110>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002216:	4b31      	ldr	r3, [pc, #196]	; (80022dc <MX_RTC_Init+0x110>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800221c:	482f      	ldr	r0, [pc, #188]	; (80022dc <MX_RTC_Init+0x110>)
 800221e:	f003 fee5 	bl	8005fec <HAL_RTC_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002228:	f000 faaa 	bl	8002780 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800222c:	2300      	movs	r3, #0
 800222e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800223e:	2300      	movs	r3, #0
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224a:	2201      	movs	r2, #1
 800224c:	4619      	mov	r1, r3
 800224e:	4823      	ldr	r0, [pc, #140]	; (80022dc <MX_RTC_Init+0x110>)
 8002250:	f003 ff42 	bl	80060d8 <HAL_RTC_SetTime>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800225a:	f000 fa91 	bl	8002780 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002270:	2300      	movs	r3, #0
 8002272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800227a:	2201      	movs	r2, #1
 800227c:	4619      	mov	r1, r3
 800227e:	4817      	ldr	r0, [pc, #92]	; (80022dc <MX_RTC_Init+0x110>)
 8002280:	f004 f822 	bl	80062c8 <HAL_RTC_SetDate>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800228a:	f000 fa79 	bl	8002780 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800228e:	2300      	movs	r3, #0
 8002290:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002292:	2300      	movs	r3, #0
 8002294:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002296:	2300      	movs	r3, #0
 8002298:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80022b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_RTC_Init+0x110>)
 80022c6:	f004 f8d2 	bl	800646e <HAL_RTC_SetAlarm>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80022d0:	f000 fa56 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	3740      	adds	r7, #64	; 0x40
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000648 	.word	0x20000648
 80022e0:	40002800 	.word	0x40002800

080022e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	463b      	mov	r3, r7
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MX_TIM2_Init+0x94>)
 8002302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <MX_TIM2_Init+0x94>)
 800230a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800230e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_TIM2_Init+0x94>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <MX_TIM2_Init+0x94>)
 8002318:	2202      	movs	r2, #2
 800231a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_TIM2_Init+0x94>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MX_TIM2_Init+0x94>)
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002328:	4813      	ldr	r0, [pc, #76]	; (8002378 <MX_TIM2_Init+0x94>)
 800232a:	f004 fab9 	bl	80068a0 <HAL_TIM_Base_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002334:	f000 fa24 	bl	8002780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4619      	mov	r1, r3
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <MX_TIM2_Init+0x94>)
 8002346:	f004 ff51 	bl	80071ec <HAL_TIM_ConfigClockSource>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002350:	f000 fa16 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800235c:	463b      	mov	r3, r7
 800235e:	4619      	mov	r1, r3
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_TIM2_Init+0x94>)
 8002362:	f005 fa87 	bl	8007874 <HAL_TIMEx_MasterConfigSynchronization>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800236c:	f000 fa08 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000668 	.word	0x20000668

0800237c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0318 	add.w	r3, r7, #24
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800239a:	463b      	mov	r3, r7
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023a6:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023a8:	4a2b      	ldr	r2, [pc, #172]	; (8002458 <MX_TIM3_Init+0xdc>)
 80023aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023ae:	2253      	movs	r2, #83	; 0x53
 80023b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b2:	4b28      	ldr	r3, [pc, #160]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023ba:	22c8      	movs	r2, #200	; 0xc8
 80023bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023be:	4b25      	ldr	r3, [pc, #148]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023c4:	4b23      	ldr	r3, [pc, #140]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ca:	4822      	ldr	r0, [pc, #136]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023cc:	f004 fa68 	bl	80068a0 <HAL_TIM_Base_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 80023d6:	f000 f9d3 	bl	8002780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023e0:	f107 0318 	add.w	r3, r7, #24
 80023e4:	4619      	mov	r1, r3
 80023e6:	481b      	ldr	r0, [pc, #108]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023e8:	f004 ff00 	bl	80071ec <HAL_TIM_ConfigClockSource>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80023f2:	f000 f9c5 	bl	8002780 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80023f6:	4817      	ldr	r0, [pc, #92]	; (8002454 <MX_TIM3_Init+0xd8>)
 80023f8:	f004 fb33 	bl	8006a62 <HAL_TIM_IC_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002402:	f000 f9bd 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	4619      	mov	r1, r3
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <MX_TIM3_Init+0xd8>)
 8002416:	f005 fa2d 	bl	8007874 <HAL_TIMEx_MasterConfigSynchronization>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8002420:	f000 f9ae 	bl	8002780 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002424:	230a      	movs	r3, #10
 8002426:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002428:	2301      	movs	r3, #1
 800242a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002430:	230f      	movs	r3, #15
 8002432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002434:	463b      	mov	r3, r7
 8002436:	2200      	movs	r2, #0
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	; (8002454 <MX_TIM3_Init+0xd8>)
 800243c:	f004 fe3a 	bl	80070b4 <HAL_TIM_IC_ConfigChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8002446:	f000 f99b 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200006b0 	.word	0x200006b0
 8002458:	40000400 	.word	0x40000400

0800245c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002462:	f107 0308 	add.w	r3, r7, #8
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002470:	463b      	mov	r3, r7
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <MX_TIM4_Init+0x90>)
 800247a:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <MX_TIM4_Init+0x94>)
 800247c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_TIM4_Init+0x90>)
 8002480:	2253      	movs	r2, #83	; 0x53
 8002482:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <MX_TIM4_Init+0x90>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_TIM4_Init+0x90>)
 800248c:	2214      	movs	r2, #20
 800248e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_TIM4_Init+0x90>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_TIM4_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800249c:	4813      	ldr	r0, [pc, #76]	; (80024ec <MX_TIM4_Init+0x90>)
 800249e:	f004 f9ff 	bl	80068a0 <HAL_TIM_Base_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80024a8:	f000 f96a 	bl	8002780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	4619      	mov	r1, r3
 80024b8:	480c      	ldr	r0, [pc, #48]	; (80024ec <MX_TIM4_Init+0x90>)
 80024ba:	f004 fe97 	bl	80071ec <HAL_TIM_ConfigClockSource>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80024c4:	f000 f95c 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c8:	2300      	movs	r3, #0
 80024ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024d0:	463b      	mov	r3, r7
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_TIM4_Init+0x90>)
 80024d6:	f005 f9cd 	bl	8007874 <HAL_TIMEx_MasterConfigSynchronization>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80024e0:	f000 f94e 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200006f8 	.word	0x200006f8
 80024f0:	40000800 	.word	0x40000800

080024f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <MX_USART2_UART_Init+0x50>)
 80024fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 8002500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 800251a:	220c      	movs	r2, #12
 800251c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_USART2_UART_Init+0x4c>)
 800252c:	f005 fa24 	bl	8007978 <HAL_UART_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002536:	f000 f923 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000740 	.word	0x20000740
 8002544:	40004400 	.word	0x40004400

08002548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <MX_DMA_Init+0x3c>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <MX_DMA_Init+0x3c>)
 8002558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <MX_DMA_Init+0x3c>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2105      	movs	r1, #5
 800256e:	2038      	movs	r0, #56	; 0x38
 8002570:	f001 fdf0 	bl	8004154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002574:	2038      	movs	r0, #56	; 0x38
 8002576:	f001 fe09 	bl	800418c <HAL_NVIC_EnableIRQ>

}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a2c      	ldr	r2, [pc, #176]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b26      	ldr	r3, [pc, #152]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a25      	ldr	r2, [pc, #148]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a17      	ldr	r2, [pc, #92]	; (8002658 <MX_GPIO_Init+0xd0>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <MX_GPIO_Init+0xd0>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DHT22_Pin, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	21a0      	movs	r1, #160	; 0xa0
 8002612:	4812      	ldr	r0, [pc, #72]	; (800265c <MX_GPIO_Init+0xd4>)
 8002614:	f002 fabc 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800261e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	480c      	ldr	r0, [pc, #48]	; (8002660 <MX_GPIO_Init+0xd8>)
 8002630:	f002 f92a 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DHT22_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DHT22_Pin;
 8002634:	23a0      	movs	r3, #160	; 0xa0
 8002636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	4804      	ldr	r0, [pc, #16]	; (800265c <MX_GPIO_Init+0xd4>)
 800264c:	f002 f91c 	bl	8004888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020800 	.word	0x40020800

08002664 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a36      	ldr	r2, [pc, #216]	; (800274c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002676:	f001 f87f 	bl	8003778 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002682:	d11c      	bne.n	80026be <HAL_TIM_PeriodElapsedCallback+0x5a>
  {
	static uint8_t Scroll = 20;

	Scroll--;
 8002684:	4b32      	ldr	r3, [pc, #200]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3b01      	subs	r3, #1
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800268e:	701a      	strb	r2, [r3, #0]
	if(!Scroll)
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		Flag_Scroll = 1;
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
		Scroll = 1;
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
	}

	Datos--;
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80026ae:	801a      	strh	r2, [r3, #0]
	if(!Datos)
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		Flag_Datos = 1;
 80026b8:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
	}
  }

  static uint32_t contador_20us = 0, contador_2000us = 0;

  	if(htim->Instance == TIM4)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d13d      	bne.n	8002744 <HAL_TIM_PeriodElapsedCallback+0xe0>
  	{
  		if(start == 1)
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d104      	bne.n	80026da <HAL_TIM_PeriodElapsedCallback+0x76>
  		{
  			contador_20us++;
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026d8:	6013      	str	r3, [r2, #0]
  		}

  		if(contador_20us >= 1)
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d013      	beq.n	800270a <HAL_TIM_PeriodElapsedCallback+0xa6>
  		{
  			Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin);
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	4821      	ldr	r0, [pc, #132]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80026e6:	f7fe fc57 	bl	8000f98 <Set_Pin_Input>
  			contador_20us = 0;
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

  			start = 0;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]

  			enableCapture = 1;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
  			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80026fc:	2100      	movs	r1, #0
 80026fe:	481d      	ldr	r0, [pc, #116]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002700:	f004 fa08 	bl	8006b14 <HAL_TIM_IC_Start_IT>
  			HAL_TIM_Base_Stop_IT(&htim4);
 8002704:	481c      	ldr	r0, [pc, #112]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002706:	f004 f97d 	bl	8006a04 <HAL_TIM_Base_Stop_IT>
  		}

  		if(!start)
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_TIM_PeriodElapsedCallback+0xc2>
  		{
  			//Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);
  			HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 0);   // pull the pin low
 8002712:	2200      	movs	r2, #0
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	4815      	ldr	r0, [pc, #84]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002718:	f002 fa3a 	bl	8004b90 <HAL_GPIO_WritePin>
  			contador_2000us++;
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002724:	6013      	str	r3, [r2, #0]
  		}

  		if(contador_2000us >= 100)
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b63      	cmp	r3, #99	; 0x63
 800272c:	d90a      	bls.n	8002744 <HAL_TIM_PeriodElapsedCallback+0xe0>
  		{
  			HAL_GPIO_WritePin (DHT22_GPIO_Port, DHT22_Pin, 1);   // pull the pin high
 800272e:	2201      	movs	r2, #1
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	480e      	ldr	r0, [pc, #56]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002734:	f002 fa2c 	bl	8004b90 <HAL_GPIO_WritePin>

  			contador_2000us = 0;
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

  			start = 1;
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
  		}
  	}

  /* USER CODE END Callback 1 */
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40010000 	.word	0x40010000
 8002750:	2000000a 	.word	0x2000000a
 8002754:	20000b88 	.word	0x20000b88
 8002758:	20000008 	.word	0x20000008
 800275c:	20000b89 	.word	0x20000b89
 8002760:	40000800 	.word	0x40000800
 8002764:	2000027c 	.word	0x2000027c
 8002768:	20000ba4 	.word	0x20000ba4
 800276c:	40020000 	.word	0x40020000
 8002770:	20000215 	.word	0x20000215
 8002774:	200006b0 	.word	0x200006b0
 8002778:	200006f8 	.word	0x200006f8
 800277c:	20000ba8 	.word	0x20000ba8

08002780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
}
 8002786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002788:	e7fe      	b.n	8002788 <Error_Handler+0x8>

0800278a <ssd1306_Reset>:

#include "Datos_Display.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af04      	add	r7, sp, #16
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	9302      	str	r3, [sp, #8]
 80027a8:	2301      	movs	r3, #1
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	2200      	movs	r2, #0
 80027b4:	2178      	movs	r1, #120	; 0x78
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <ssd1306_WriteCommand+0x2c>)
 80027b8:	f002 fb48 	bl	8004e4c <HAL_I2C_Mem_Write>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200005f4 	.word	0x200005f4

080027c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af04      	add	r7, sp, #16
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f04f 32ff 	mov.w	r2, #4294967295
 80027da:	9202      	str	r2, [sp, #8]
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2301      	movs	r3, #1
 80027e4:	2240      	movs	r2, #64	; 0x40
 80027e6:	2178      	movs	r1, #120	; 0x78
 80027e8:	4803      	ldr	r0, [pc, #12]	; (80027f8 <ssd1306_WriteData+0x30>)
 80027ea:	f002 fb2f 	bl	8004e4c <HAL_I2C_Mem_Write>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200005f4 	.word	0x200005f4

080027fc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002800:	f7ff ffc3 	bl	800278a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	f000 ffd7 	bl	80037b8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800280a:	2000      	movs	r0, #0
 800280c:	f000 fada 	bl	8002dc4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002810:	2020      	movs	r0, #32
 8002812:	f7ff ffc1 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002816:	2000      	movs	r0, #0
 8002818:	f7ff ffbe 	bl	8002798 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800281c:	20b0      	movs	r0, #176	; 0xb0
 800281e:	f7ff ffbb 	bl	8002798 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002822:	20c8      	movs	r0, #200	; 0xc8
 8002824:	f7ff ffb8 	bl	8002798 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002828:	2000      	movs	r0, #0
 800282a:	f7ff ffb5 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800282e:	2010      	movs	r0, #16
 8002830:	f7ff ffb2 	bl	8002798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002834:	2040      	movs	r0, #64	; 0x40
 8002836:	f7ff ffaf 	bl	8002798 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800283a:	20ff      	movs	r0, #255	; 0xff
 800283c:	f000 faaf 	bl	8002d9e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002840:	20a1      	movs	r0, #161	; 0xa1
 8002842:	f7ff ffa9 	bl	8002798 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002846:	20a6      	movs	r0, #166	; 0xa6
 8002848:	f7ff ffa6 	bl	8002798 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800284c:	20a8      	movs	r0, #168	; 0xa8
 800284e:	f7ff ffa3 	bl	8002798 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002852:	203f      	movs	r0, #63	; 0x3f
 8002854:	f7ff ffa0 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002858:	20a4      	movs	r0, #164	; 0xa4
 800285a:	f7ff ff9d 	bl	8002798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800285e:	20d3      	movs	r0, #211	; 0xd3
 8002860:	f7ff ff9a 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff ff97 	bl	8002798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800286a:	20d5      	movs	r0, #213	; 0xd5
 800286c:	f7ff ff94 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002870:	20f0      	movs	r0, #240	; 0xf0
 8002872:	f7ff ff91 	bl	8002798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002876:	20d9      	movs	r0, #217	; 0xd9
 8002878:	f7ff ff8e 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800287c:	2022      	movs	r0, #34	; 0x22
 800287e:	f7ff ff8b 	bl	8002798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002882:	20da      	movs	r0, #218	; 0xda
 8002884:	f7ff ff88 	bl	8002798 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002888:	2012      	movs	r0, #18
 800288a:	f7ff ff85 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800288e:	20db      	movs	r0, #219	; 0xdb
 8002890:	f7ff ff82 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002894:	2020      	movs	r0, #32
 8002896:	f7ff ff7f 	bl	8002798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800289a:	208d      	movs	r0, #141	; 0x8d
 800289c:	f7ff ff7c 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80028a0:	2014      	movs	r0, #20
 80028a2:	f7ff ff79 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 fa8c 	bl	8002dc4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f000 f80f 	bl	80028d0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80028b2:	f000 f831 	bl	8002918 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <ssd1306_Init+0xd0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <ssd1306_Init+0xd0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80028c2:	4b02      	ldr	r3, [pc, #8]	; (80028cc <ssd1306_Init+0xd0>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	711a      	strb	r2, [r3, #4]
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000fbc 	.word	0x20000fbc

080028d0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e00d      	b.n	80028fc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <ssd1306_Fill+0x1a>
 80028e6:	2100      	movs	r1, #0
 80028e8:	e000      	b.n	80028ec <ssd1306_Fill+0x1c>
 80028ea:	21ff      	movs	r1, #255	; 0xff
 80028ec:	4a09      	ldr	r2, [pc, #36]	; (8002914 <ssd1306_Fill+0x44>)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	460a      	mov	r2, r1
 80028f4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3301      	adds	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8002902:	d3ed      	bcc.n	80028e0 <ssd1306_Fill+0x10>
    }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000bac 	.word	0x20000bac

08002918 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800291e:	2300      	movs	r3, #0
 8002920:	71fb      	strb	r3, [r7, #7]
 8002922:	e01a      	b.n	800295a <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	3b50      	subs	r3, #80	; 0x50
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff34 	bl	8002798 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002930:	2000      	movs	r0, #0
 8002932:	f7ff ff31 	bl	8002798 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002936:	2010      	movs	r0, #16
 8002938:	f7ff ff2e 	bl	8002798 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800293c:	79fa      	ldrb	r2, [r7, #7]
 800293e:	4613      	mov	r3, r2
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	4413      	add	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	461a      	mov	r2, r3
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <ssd1306_UpdateScreen+0x54>)
 800294a:	4413      	add	r3, r2
 800294c:	2182      	movs	r1, #130	; 0x82
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff3a 	bl	80027c8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	3301      	adds	r3, #1
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	2b07      	cmp	r3, #7
 800295e:	d9e1      	bls.n	8002924 <ssd1306_UpdateScreen+0xc>
    }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000bac 	.word	0x20000bac

08002970 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(int16_t x, uint8_t y, SSD1306_COLOR color) {
 8002970:	b490      	push	{r4, r7}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
 800297a:	460b      	mov	r3, r1
 800297c:	717b      	strb	r3, [r7, #5]
 800297e:	4613      	mov	r3, r2
 8002980:	713b      	strb	r3, [r7, #4]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT || x <= 0)
 8002982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002986:	2b81      	cmp	r3, #129	; 0x81
 8002988:	dc51      	bgt.n	8002a2e <ssd1306_DrawPixel+0xbe>
 800298a:	797b      	ldrb	r3, [r7, #5]
 800298c:	2b3f      	cmp	r3, #63	; 0x3f
 800298e:	d84e      	bhi.n	8002a2e <ssd1306_DrawPixel+0xbe>
 8002990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	dd4a      	ble.n	8002a2e <ssd1306_DrawPixel+0xbe>
        // Don't write outside the buffer
    	return ;
     }
   
    // Draw in the right color
    if(color == White) {
 8002998:	793b      	ldrb	r3, [r7, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d122      	bne.n	80029e4 <ssd1306_DrawPixel+0x74>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800299e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029a2:	797b      	ldrb	r3, [r7, #5]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	b2d8      	uxtb	r0, r3
 80029a8:	4601      	mov	r1, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	440b      	add	r3, r1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <ssd1306_DrawPixel+0xc8>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	797b      	ldrb	r3, [r7, #5]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b25c      	sxtb	r4, r3
 80029cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029d0:	4601      	mov	r1, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	440b      	add	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	b2e1      	uxtb	r1, r4
 80029de:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <ssd1306_DrawPixel+0xc8>)
 80029e0:	54d1      	strb	r1, [r2, r3]
 80029e2:	e025      	b.n	8002a30 <ssd1306_DrawPixel+0xc0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80029e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029e8:	797b      	ldrb	r3, [r7, #5]
 80029ea:	08db      	lsrs	r3, r3, #3
 80029ec:	b2d8      	uxtb	r0, r3
 80029ee:	4601      	mov	r1, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	019b      	lsls	r3, r3, #6
 80029f4:	440b      	add	r3, r1
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <ssd1306_DrawPixel+0xc8>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
 80029fe:	b25a      	sxtb	r2, r3
 8002a00:	797b      	ldrb	r3, [r7, #5]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	4013      	ands	r3, r2
 8002a14:	b25c      	sxtb	r4, r3
 8002a16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	440b      	add	r3, r1
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	b2e1      	uxtb	r1, r4
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <ssd1306_DrawPixel+0xc8>)
 8002a2a:	54d1      	strb	r1, [r2, r3]
 8002a2c:	e000      	b.n	8002a30 <ssd1306_DrawPixel+0xc0>
    	return ;
 8002a2e:	bf00      	nop
    }
}
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc90      	pop	{r4, r7}
 8002a36:	4770      	bx	lr
 8002a38:	20000bac 	.word	0x20000bac

08002a3c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4604      	mov	r4, r0
 8002a44:	1d38      	adds	r0, r7, #4
 8002a46:	e880 0006 	stmia.w	r0, {r1, r2}
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	4613      	mov	r3, r2
 8002a52:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b1f      	cmp	r3, #31
 8002a58:	d902      	bls.n	8002a60 <ssd1306_WriteChar+0x24>
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b7e      	cmp	r3, #126	; 0x7e
 8002a5e:	d901      	bls.n	8002a64 <ssd1306_WriteChar+0x28>
        return 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e064      	b.n	8002b2e <ssd1306_WriteChar+0xf2>
        // Not enough space on current line
        return 0;
    }*/
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	e050      	b.n	8002b0c <ssd1306_WriteChar+0xd0>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	3b20      	subs	r3, #32
 8002a70:	7979      	ldrb	r1, [r7, #5]
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	440b      	add	r3, r1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	e038      	b.n	8002afc <ssd1306_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d014      	beq.n	8002ac4 <ssd1306_WriteChar+0x88>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <ssd1306_WriteChar+0xfc>)
 8002a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	b218      	sxth	r0, r3
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <ssd1306_WriteChar+0xfc>)
 8002aae:	885b      	ldrh	r3, [r3, #2]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	7bba      	ldrb	r2, [r7, #14]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f7ff ff57 	bl	8002970 <ssd1306_DrawPixel>
 8002ac2:	e018      	b.n	8002af6 <ssd1306_WriteChar+0xba>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <ssd1306_WriteChar+0xfc>)
 8002ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b218      	sxth	r0, r3
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <ssd1306_WriteChar+0xfc>)
 8002ad8:	885b      	ldrh	r3, [r3, #2]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b2d9      	uxtb	r1, r3
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	f7ff ff3d 	bl	8002970 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	793b      	ldrb	r3, [r7, #4]
 8002afe:	461a      	mov	r2, r3
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d3c1      	bcc.n	8002a8a <ssd1306_WriteChar+0x4e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	797b      	ldrb	r3, [r7, #5]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d3a9      	bcc.n	8002a6a <ssd1306_WriteChar+0x2e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <ssd1306_WriteChar+0xfc>)
 8002b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	793b      	ldrb	r3, [r7, #4]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b21a      	sxth	r2, r3
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <ssd1306_WriteChar+0xfc>)
 8002b2a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000fbc 	.word	0x20000fbc

08002b3c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	1d38      	adds	r0, r7, #4
 8002b46:	e880 0006 	stmia.w	r0, {r1, r2}
 8002b4a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002b4c:	e012      	b.n	8002b74 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	7818      	ldrb	r0, [r3, #0]
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	1d3a      	adds	r2, r7, #4
 8002b56:	ca06      	ldmia	r2, {r1, r2}
 8002b58:	f7ff ff70 	bl	8002a3c <ssd1306_WriteChar>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d002      	beq.n	8002b6e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	e008      	b.n	8002b80 <ssd1306_WriteString+0x44>
        }
        str++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e8      	bne.n	8002b4e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(int16_t x, uint8_t y) {
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	460a      	mov	r2, r1
 8002b92:	80fb      	strh	r3, [r7, #6]
 8002b94:	4613      	mov	r3, r2
 8002b96:	717b      	strb	r3, [r7, #5]
    SSD1306.CurrentX = x;
 8002b98:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <ssd1306_SetCursor+0x2c>)
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8002b9e:	797b      	ldrb	r3, [r7, #5]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <ssd1306_SetCursor+0x2c>)
 8002ba4:	805a      	strh	r2, [r3, #2]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000fbc 	.word	0x20000fbc

08002bb8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	71fb      	strb	r3, [r7, #7]
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71bb      	strb	r3, [r7, #6]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	717b      	strb	r3, [r7, #5]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002bd6:	797a      	ldrb	r2, [r7, #5]
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bfb8      	it	lt
 8002be0:	425b      	neglt	r3, r3
 8002be2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002be4:	793a      	ldrb	r2, [r7, #4]
 8002be6:	79bb      	ldrb	r3, [r7, #6]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bfb8      	it	lt
 8002bee:	425b      	neglt	r3, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002bf2:	79fa      	ldrb	r2, [r7, #7]
 8002bf4:	797b      	ldrb	r3, [r7, #5]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d201      	bcs.n	8002bfe <ssd1306_Line+0x46>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e001      	b.n	8002c02 <ssd1306_Line+0x4a>
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002c04:	79ba      	ldrb	r2, [r7, #6]
 8002c06:	793b      	ldrb	r3, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d201      	bcs.n	8002c10 <ssd1306_Line+0x58>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e001      	b.n	8002c14 <ssd1306_Line+0x5c>
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295
 8002c14:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002c1e:	797b      	ldrb	r3, [r7, #5]
 8002c20:	b21b      	sxth	r3, r3
 8002c22:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002c26:	7939      	ldrb	r1, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fea1 	bl	8002970 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002c2e:	e025      	b.n	8002c7c <ssd1306_Line+0xc4>
        ssd1306_DrawPixel(x1, y1, color);
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002c38:	79b9      	ldrb	r1, [r7, #6]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fe98 	bl	8002970 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	425b      	negs	r3, r3
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dd08      	ble.n	8002c62 <ssd1306_Line+0xaa>
            error -= deltaY;
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	4413      	add	r3, r2
 8002c60:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	da08      	bge.n	8002c7c <ssd1306_Line+0xc4>
            error += deltaX;
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	79bb      	ldrb	r3, [r7, #6]
 8002c78:	4413      	add	r3, r2
 8002c7a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002c7c:	79fa      	ldrb	r2, [r7, #7]
 8002c7e:	797b      	ldrb	r3, [r7, #5]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1d5      	bne.n	8002c30 <ssd1306_Line+0x78>
 8002c84:	79ba      	ldrb	r2, [r7, #6]
 8002c86:	793b      	ldrb	r3, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1d1      	bne.n	8002c30 <ssd1306_Line+0x78>
        }
    }
    return;
 8002c8c:	bf00      	nop
}
 8002c8e:	3724      	adds	r7, #36	; 0x24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd90      	pop	{r4, r7, pc}

08002c94 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	71fb      	strb	r3, [r7, #7]
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71bb      	strb	r3, [r7, #6]
 8002caa:	460b      	mov	r3, r1
 8002cac:	717b      	strb	r3, [r7, #5]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002cb2:	79bc      	ldrb	r4, [r7, #6]
 8002cb4:	797a      	ldrb	r2, [r7, #5]
 8002cb6:	79b9      	ldrb	r1, [r7, #6]
 8002cb8:	79f8      	ldrb	r0, [r7, #7]
 8002cba:	7e3b      	ldrb	r3, [r7, #24]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	f7ff ff7a 	bl	8002bb8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002cc4:	793c      	ldrb	r4, [r7, #4]
 8002cc6:	797a      	ldrb	r2, [r7, #5]
 8002cc8:	79b9      	ldrb	r1, [r7, #6]
 8002cca:	7978      	ldrb	r0, [r7, #5]
 8002ccc:	7e3b      	ldrb	r3, [r7, #24]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	4623      	mov	r3, r4
 8002cd2:	f7ff ff71 	bl	8002bb8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002cd6:	793c      	ldrb	r4, [r7, #4]
 8002cd8:	79fa      	ldrb	r2, [r7, #7]
 8002cda:	7939      	ldrb	r1, [r7, #4]
 8002cdc:	7978      	ldrb	r0, [r7, #5]
 8002cde:	7e3b      	ldrb	r3, [r7, #24]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	f7ff ff68 	bl	8002bb8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002ce8:	79bc      	ldrb	r4, [r7, #6]
 8002cea:	79fa      	ldrb	r2, [r7, #7]
 8002cec:	7939      	ldrb	r1, [r7, #4]
 8002cee:	79f8      	ldrb	r0, [r7, #7]
 8002cf0:	7e3b      	ldrb	r3, [r7, #24]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	f7ff ff5f 	bl	8002bb8 <ssd1306_Line>

    return;
 8002cfa:	bf00      	nop
}
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}

08002d02 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002d02:	b590      	push	{r4, r7, lr}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4604      	mov	r4, r0
 8002d0a:	4608      	mov	r0, r1
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4623      	mov	r3, r4
 8002d12:	71fb      	strb	r3, [r7, #7]
 8002d14:	4603      	mov	r3, r0
 8002d16:	71bb      	strb	r3, [r7, #6]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	717b      	strb	r3, [r7, #5]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	797b      	ldrb	r3, [r7, #5]
 8002d24:	4293      	cmp	r3, r2
 8002d26:	bf28      	it	cs
 8002d28:	4613      	movcs	r3, r2
 8002d2a:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002d2c:	797a      	ldrb	r2, [r7, #5]
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	4293      	cmp	r3, r2
 8002d32:	bf38      	it	cc
 8002d34:	4613      	movcc	r3, r2
 8002d36:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002d38:	79ba      	ldrb	r2, [r7, #6]
 8002d3a:	793b      	ldrb	r3, [r7, #4]
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	bf28      	it	cs
 8002d40:	4613      	movcs	r3, r2
 8002d42:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002d44:	793a      	ldrb	r2, [r7, #4]
 8002d46:	79bb      	ldrb	r3, [r7, #6]
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	bf38      	it	cc
 8002d4c:	4613      	movcc	r3, r2
 8002d4e:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e017      	b.n	8002d86 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002d56:	7b7b      	ldrb	r3, [r7, #13]
 8002d58:	73bb      	strb	r3, [r7, #14]
 8002d5a:	e00a      	b.n	8002d72 <ssd1306_FillRectangle+0x70>
            ssd1306_DrawPixel(x, y, color);
 8002d5c:	7bbb      	ldrb	r3, [r7, #14]
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d64:	7bf9      	ldrb	r1, [r7, #15]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fe02 	bl	8002970 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	73bb      	strb	r3, [r7, #14]
 8002d72:	7bba      	ldrb	r2, [r7, #14]
 8002d74:	7b3b      	ldrb	r3, [r7, #12]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d802      	bhi.n	8002d80 <ssd1306_FillRectangle+0x7e>
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	2b81      	cmp	r3, #129	; 0x81
 8002d7e:	d9ed      	bls.n	8002d5c <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	3301      	adds	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	7abb      	ldrb	r3, [r7, #10]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d803      	bhi.n	8002d96 <ssd1306_FillRectangle+0x94>
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b3f      	cmp	r3, #63	; 0x3f
 8002d92:	d9e0      	bls.n	8002d56 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
}
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}

08002d9e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002da8:	2381      	movs	r3, #129	; 0x81
 8002daa:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fcf2 	bl	8002798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fcee 	bl	8002798 <ssd1306_WriteCommand>
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002dd4:	23af      	movs	r3, #175	; 0xaf
 8002dd6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <ssd1306_SetDisplayOn+0x38>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	715a      	strb	r2, [r3, #5]
 8002dde:	e004      	b.n	8002dea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002de0:	23ae      	movs	r3, #174	; 0xae
 8002de2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <ssd1306_SetDisplayOn+0x38>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fcd3 	bl	8002798 <ssd1306_WriteCommand>
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000fbc 	.word	0x20000fbc

08002e00 <Battery_100>:
    0b00000000,  //
    0b00000000   //
};

void Battery_100(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(110, 0, 124, 8, White);
 8002e06:	2301      	movs	r3, #1
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	227c      	movs	r2, #124	; 0x7c
 8002e0e:	2100      	movs	r1, #0
 8002e10:	206e      	movs	r0, #110	; 0x6e
 8002e12:	f7ff ff3f 	bl	8002c94 <ssd1306_DrawRectangle>
	ssd1306_FillRectangle(112, 2, 114, 6, White);
 8002e16:	2301      	movs	r3, #1
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	2272      	movs	r2, #114	; 0x72
 8002e1e:	2102      	movs	r1, #2
 8002e20:	2070      	movs	r0, #112	; 0x70
 8002e22:	f7ff ff6e 	bl	8002d02 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(116, 2, 118, 6, White);
 8002e26:	2301      	movs	r3, #1
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2306      	movs	r3, #6
 8002e2c:	2276      	movs	r2, #118	; 0x76
 8002e2e:	2102      	movs	r1, #2
 8002e30:	2074      	movs	r0, #116	; 0x74
 8002e32:	f7ff ff66 	bl	8002d02 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(120, 2, 122, 6, White);
 8002e36:	2301      	movs	r3, #1
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2306      	movs	r3, #6
 8002e3c:	227a      	movs	r2, #122	; 0x7a
 8002e3e:	2102      	movs	r1, #2
 8002e40:	2078      	movs	r0, #120	; 0x78
 8002e42:	f7ff ff5e 	bl	8002d02 <ssd1306_FillRectangle>
	ssd1306_FillRectangle(124, 2, 126, 6, White);
 8002e46:	2301      	movs	r3, #1
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	227e      	movs	r2, #126	; 0x7e
 8002e4e:	2102      	movs	r1, #2
 8002e50:	207c      	movs	r0, #124	; 0x7c
 8002e52:	f7ff ff56 	bl	8002d02 <ssd1306_FillRectangle>
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <Wifi_On>:
	ssd1306_DrawRectangle(110, 0, 124, 8, White);
	ssd1306_FillRectangle(124, 2, 126, 6, White);
}

void Wifi_On(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af02      	add	r7, sp, #8
	ssd1306_Line(7, 0, 7, 9, White);
 8002e62:	2301      	movs	r3, #1
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2309      	movs	r3, #9
 8002e68:	2207      	movs	r2, #7
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2007      	movs	r0, #7
 8002e6e:	f7ff fea3 	bl	8002bb8 <ssd1306_Line>
	ssd1306_Line(2, 0, 12, 0, White);
 8002e72:	2301      	movs	r3, #1
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	220c      	movs	r2, #12
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f7ff fe9b 	bl	8002bb8 <ssd1306_Line>
	ssd1306_Line(2, 0, 7, 5, White);
 8002e82:	2301      	movs	r3, #1
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2305      	movs	r3, #5
 8002e88:	2207      	movs	r2, #7
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7ff fe93 	bl	8002bb8 <ssd1306_Line>
	ssd1306_Line(7, 5, 12, 0, White);
 8002e92:	2301      	movs	r3, #1
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	220c      	movs	r2, #12
 8002e9a:	2105      	movs	r1, #5
 8002e9c:	2007      	movs	r0, #7
 8002e9e:	f7ff fe8b 	bl	8002bb8 <ssd1306_Line>

	ssd1306_Line(9, 8, 9, 9, White);
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2309      	movs	r3, #9
 8002ea8:	2209      	movs	r2, #9
 8002eaa:	2108      	movs	r1, #8
 8002eac:	2009      	movs	r0, #9
 8002eae:	f7ff fe83 	bl	8002bb8 <ssd1306_Line>
	ssd1306_Line(10, 8, 10, 9, White);
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	2309      	movs	r3, #9
 8002eb8:	220a      	movs	r2, #10
 8002eba:	2108      	movs	r1, #8
 8002ebc:	200a      	movs	r0, #10
 8002ebe:	f7ff fe7b 	bl	8002bb8 <ssd1306_Line>

	ssd1306_Line(12, 6, 12, 9, White);
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2309      	movs	r3, #9
 8002ec8:	220c      	movs	r2, #12
 8002eca:	2106      	movs	r1, #6
 8002ecc:	200c      	movs	r0, #12
 8002ece:	f7ff fe73 	bl	8002bb8 <ssd1306_Line>
	ssd1306_Line(13, 6, 13, 9, White);
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2309      	movs	r3, #9
 8002ed8:	220d      	movs	r2, #13
 8002eda:	2106      	movs	r1, #6
 8002edc:	200d      	movs	r0, #13
 8002ede:	f7ff fe6b 	bl	8002bb8 <ssd1306_Line>

	ssd1306_Line(15, 4, 15, 9, White);
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2309      	movs	r3, #9
 8002ee8:	220f      	movs	r2, #15
 8002eea:	2104      	movs	r1, #4
 8002eec:	200f      	movs	r0, #15
 8002eee:	f7ff fe63 	bl	8002bb8 <ssd1306_Line>
	ssd1306_Line(16, 4, 16, 9, White);
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2309      	movs	r3, #9
 8002ef8:	2210      	movs	r2, #16
 8002efa:	2104      	movs	r1, #4
 8002efc:	2010      	movs	r0, #16
 8002efe:	f7ff fe5b 	bl	8002bb8 <ssd1306_Line>

	ssd1306_Line(18, 2, 18, 9, White);
 8002f02:	2301      	movs	r3, #1
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2309      	movs	r3, #9
 8002f08:	2212      	movs	r2, #18
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	2012      	movs	r0, #18
 8002f0e:	f7ff fe53 	bl	8002bb8 <ssd1306_Line>
	ssd1306_Line(19, 2, 19, 9, White);
 8002f12:	2301      	movs	r3, #1
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2309      	movs	r3, #9
 8002f18:	2213      	movs	r2, #19
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	2013      	movs	r0, #19
 8002f1e:	f7ff fe4b 	bl	8002bb8 <ssd1306_Line>
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <Grados>:

	ssd1306_Line(2, 9, 19, 0, White);
}

void Grados(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
	uint32_t i, j, b = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]

	for(i = 0; i < 10; i++)  // Itera sobre 10 filas
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	e043      	b.n	8002fc0 <Grados+0x98>
	{
	    b = degreesSymbol[i];
 8002f38:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <Grados+0xb8>)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	607b      	str	r3, [r7, #4]
	    for(j = 0; j < 7; j++)  // Itera sobre 7 columnas
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	e035      	b.n	8002fb4 <Grados+0x8c>
	    {
	        if((b >> (6 - j)) & 0x01)  // Ajusta la máscara a 6
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f1c3 0306 	rsb	r3, r3, #6
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d014      	beq.n	8002f86 <Grados+0x5e>
	        {
	            ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), White);
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <Grados+0xbc>)
 8002f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	b218      	sxth	r0, r3
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <Grados+0xbc>)
 8002f70:	885b      	ldrh	r3, [r3, #2]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7ff fcf6 	bl	8002970 <ssd1306_DrawPixel>
 8002f84:	e013      	b.n	8002fae <Grados+0x86>
	        }
	        else
	        {
	            ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), Black);
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <Grados+0xbc>)
 8002f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	b218      	sxth	r0, r3
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <Grados+0xbc>)
 8002f9a:	885b      	ldrh	r3, [r3, #2]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7ff fce1 	bl	8002970 <ssd1306_DrawPixel>
	    for(j = 0; j < 7; j++)  // Itera sobre 7 columnas
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d9c6      	bls.n	8002f48 <Grados+0x20>
	for(i = 0; i < 10; i++)  // Itera sobre 10 filas
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b09      	cmp	r3, #9
 8002fc4:	d9b8      	bls.n	8002f38 <Grados+0x10>
	        }
	    }
	}

	SSD1306.CurrentX += 7;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <Grados+0xbc>)
 8002fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3307      	adds	r3, #7
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	b21a      	sxth	r2, r3
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <Grados+0xbc>)
 8002fd6:	801a      	strh	r2, [r3, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	0800c270 	.word	0x0800c270
 8002fe4:	20000fbc 	.word	0x20000fbc

08002fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_MspInit+0x54>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_MspInit+0x54>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_MspInit+0x54>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_MspInit+0x54>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_MspInit+0x54>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_MspInit+0x54>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	210f      	movs	r1, #15
 800302a:	f06f 0001 	mvn.w	r0, #1
 800302e:	f001 f891 	bl	8004154 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800

08003040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2f      	ldr	r2, [pc, #188]	; (800311c <HAL_ADC_MspInit+0xdc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d157      	bne.n	8003112 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_ADC_MspInit+0xe0>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <HAL_ADC_MspInit+0xe0>)
 800306c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_ADC_MspInit+0xe0>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_ADC_MspInit+0xe0>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a26      	ldr	r2, [pc, #152]	; (8003120 <HAL_ADC_MspInit+0xe0>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_ADC_MspInit+0xe0>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800309a:	2301      	movs	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800309e:	2303      	movs	r3, #3
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	481d      	ldr	r0, [pc, #116]	; (8003124 <HAL_ADC_MspInit+0xe4>)
 80030ae:	f001 fbeb 	bl	8004888 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80030b2:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_ADC_MspInit+0xec>)
 80030b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030ea:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030f6:	480c      	ldr	r0, [pc, #48]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 80030f8:	f001 f856 	bl	80041a8 <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003102:	f7ff fb3d 	bl	8002780 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <HAL_ADC_MspInit+0xe8>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003112:	bf00      	nop
 8003114:	3728      	adds	r7, #40	; 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40012000 	.word	0x40012000
 8003120:	40023800 	.word	0x40023800
 8003124:	40020000 	.word	0x40020000
 8003128:	20000594 	.word	0x20000594
 800312c:	40026410 	.word	0x40026410

08003130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <HAL_I2C_MspInit+0x84>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d12c      	bne.n	80031ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_I2C_MspInit+0x88>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_I2C_MspInit+0x88>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_I2C_MspInit+0x88>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800316e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003174:	2312      	movs	r3, #18
 8003176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317c:	2303      	movs	r3, #3
 800317e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003180:	2304      	movs	r3, #4
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4619      	mov	r1, r3
 800318a:	480c      	ldr	r0, [pc, #48]	; (80031bc <HAL_I2C_MspInit+0x8c>)
 800318c:	f001 fb7c 	bl	8004888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_I2C_MspInit+0x88>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <HAL_I2C_MspInit+0x88>)
 800319a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800319e:	6413      	str	r3, [r2, #64]	; 0x40
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_I2C_MspInit+0x88>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031ac:	bf00      	nop
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40005400 	.word	0x40005400
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020400 	.word	0x40020400

080031c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <HAL_RTC_MspInit+0x50>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d111      	bne.n	8003206 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031e2:	2302      	movs	r3, #2
 80031e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80031e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 fe0d 	bl	8005e10 <HAL_RCCEx_PeriphCLKConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80031fc:	f7ff fac0 	bl	8002780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <HAL_RTC_MspInit+0x54>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003206:	bf00      	nop
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40002800 	.word	0x40002800
 8003214:	42470e3c 	.word	0x42470e3c

08003218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d116      	bne.n	8003268 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	4b37      	ldr	r3, [pc, #220]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a36      	ldr	r2, [pc, #216]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	2105      	movs	r1, #5
 800325a:	201c      	movs	r0, #28
 800325c:	f000 ff7a 	bl	8004154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003260:	201c      	movs	r0, #28
 8003262:	f000 ff93 	bl	800418c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003266:	e054      	b.n	8003312 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <HAL_TIM_Base_MspInit+0x108>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d134      	bne.n	80032dc <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	4a28      	ldr	r2, [pc, #160]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b1f      	ldr	r3, [pc, #124]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ba:	2302      	movs	r3, #2
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	f107 031c 	add.w	r3, r7, #28
 80032c2:	4619      	mov	r1, r3
 80032c4:	4817      	ldr	r0, [pc, #92]	; (8003324 <HAL_TIM_Base_MspInit+0x10c>)
 80032c6:	f001 fadf 	bl	8004888 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2105      	movs	r1, #5
 80032ce:	201d      	movs	r0, #29
 80032d0:	f000 ff40 	bl	8004154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032d4:	201d      	movs	r0, #29
 80032d6:	f000 ff59 	bl	800418c <HAL_NVIC_EnableIRQ>
}
 80032da:	e01a      	b.n	8003312 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a11      	ldr	r2, [pc, #68]	; (8003328 <HAL_TIM_Base_MspInit+0x110>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d115      	bne.n	8003312 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_TIM_Base_MspInit+0x104>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2105      	movs	r1, #5
 8003306:	201e      	movs	r0, #30
 8003308:	f000 ff24 	bl	8004154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800330c:	201e      	movs	r0, #30
 800330e:	f000 ff3d 	bl	800418c <HAL_NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3730      	adds	r7, #48	; 0x30
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	40000400 	.word	0x40000400
 8003324:	40020000 	.word	0x40020000
 8003328:	40000800 	.word	0x40000800

0800332c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_UART_MspInit+0x84>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d12b      	bne.n	80033a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <HAL_UART_MspInit+0x88>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <HAL_UART_MspInit+0x88>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <HAL_UART_MspInit+0x88>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_UART_MspInit+0x88>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <HAL_UART_MspInit+0x88>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6313      	str	r3, [r2, #48]	; 0x30
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_UART_MspInit+0x88>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003386:	230c      	movs	r3, #12
 8003388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338a:	2302      	movs	r3, #2
 800338c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003392:	2300      	movs	r3, #0
 8003394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003396:	2307      	movs	r3, #7
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	4619      	mov	r1, r3
 80033a0:	4805      	ldr	r0, [pc, #20]	; (80033b8 <HAL_UART_MspInit+0x8c>)
 80033a2:	f001 fa71 	bl	8004888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033a6:	bf00      	nop
 80033a8:	3728      	adds	r7, #40	; 0x28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40004400 	.word	0x40004400
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40020000 	.word	0x40020000

080033bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_InitTick+0xd0>)
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	4a2d      	ldr	r2, [pc, #180]	; (800348c <HAL_InitTick+0xd0>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6453      	str	r3, [r2, #68]	; 0x44
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_InitTick+0xd0>)
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033e8:	f107 020c 	add.w	r2, r7, #12
 80033ec:	f107 0310 	add.w	r3, r7, #16
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f002 fcda 	bl	8005dac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80033f8:	f002 fcc4 	bl	8005d84 <HAL_RCC_GetPCLK2Freq>
 80033fc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	4a23      	ldr	r2, [pc, #140]	; (8003490 <HAL_InitTick+0xd4>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0c9b      	lsrs	r3, r3, #18
 8003408:	3b01      	subs	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800340c:	4b21      	ldr	r3, [pc, #132]	; (8003494 <HAL_InitTick+0xd8>)
 800340e:	4a22      	ldr	r2, [pc, #136]	; (8003498 <HAL_InitTick+0xdc>)
 8003410:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003412:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_InitTick+0xd8>)
 8003414:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003418:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_InitTick+0xd8>)
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003420:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <HAL_InitTick+0xd8>)
 8003422:	2200      	movs	r2, #0
 8003424:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_InitTick+0xd8>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_InitTick+0xd8>)
 800342e:	2200      	movs	r2, #0
 8003430:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003432:	4818      	ldr	r0, [pc, #96]	; (8003494 <HAL_InitTick+0xd8>)
 8003434:	f003 fa34 	bl	80068a0 <HAL_TIM_Base_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800343e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11b      	bne.n	800347e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003446:	4813      	ldr	r0, [pc, #76]	; (8003494 <HAL_InitTick+0xd8>)
 8003448:	f003 fa7a 	bl	8006940 <HAL_TIM_Base_Start_IT>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003456:	2b00      	cmp	r3, #0
 8003458:	d111      	bne.n	800347e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800345a:	2019      	movs	r0, #25
 800345c:	f000 fe96 	bl	800418c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	d808      	bhi.n	8003478 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003466:	2200      	movs	r2, #0
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	2019      	movs	r0, #25
 800346c:	f000 fe72 	bl	8004154 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <HAL_InitTick+0xe0>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e002      	b.n	800347e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800347e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003482:	4618      	mov	r0, r3
 8003484:	3730      	adds	r7, #48	; 0x30
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	431bde83 	.word	0x431bde83
 8003494:	20000fc4 	.word	0x20000fc4
 8003498:	40010000 	.word	0x40010000
 800349c:	20000018 	.word	0x20000018

080034a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034a4:	e7fe      	b.n	80034a4 <NMI_Handler+0x4>

080034a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034a6:	b480      	push	{r7}
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034aa:	e7fe      	b.n	80034aa <HardFault_Handler+0x4>

080034ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <MemManage_Handler+0x4>

080034b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <BusFault_Handler+0x4>

080034b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <UsageFault_Handler+0x4>

080034be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80034d2:	f003 fce7 	bl	8006ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000fc4 	.word	0x20000fc4

080034e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <TIM2_IRQHandler+0x10>)
 80034e6:	f003 fcdd 	bl	8006ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000668 	.word	0x20000668

080034f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <TIM3_IRQHandler+0x10>)
 80034fa:	f003 fcd3 	bl	8006ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200006b0 	.word	0x200006b0

08003508 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <TIM4_IRQHandler+0x10>)
 800350e:	f003 fcc9 	bl	8006ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200006f8 	.word	0x200006f8

0800351c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <DMA2_Stream0_IRQHandler+0x10>)
 8003522:	f000 ff47 	bl	80043b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000594 	.word	0x20000594

08003530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return 1;
 8003534:	2301      	movs	r3, #1
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <_kill>:

int _kill(int pid, int sig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800354a:	f005 fecf 	bl	80092ec <__errno>
 800354e:	4603      	mov	r3, r0
 8003550:	2216      	movs	r2, #22
 8003552:	601a      	str	r2, [r3, #0]
  return -1;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_exit>:

void _exit (int status)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003568:	f04f 31ff 	mov.w	r1, #4294967295
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ffe7 	bl	8003540 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003572:	e7fe      	b.n	8003572 <_exit+0x12>

08003574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e00a      	b.n	800359c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003586:	f3af 8000 	nop.w
 800358a:	4601      	mov	r1, r0
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	60ba      	str	r2, [r7, #8]
 8003592:	b2ca      	uxtb	r2, r1
 8003594:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	3301      	adds	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	dbf0      	blt.n	8003586 <_read+0x12>
  }

  return len;
 80035a4:	687b      	ldr	r3, [r7, #4]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e009      	b.n	80035d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	60ba      	str	r2, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	3301      	adds	r3, #1
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	429a      	cmp	r2, r3
 80035da:	dbf1      	blt.n	80035c0 <_write+0x12>
  }
  return len;
 80035dc:	687b      	ldr	r3, [r7, #4]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <_close>:

int _close(int file)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800360e:	605a      	str	r2, [r3, #4]
  return 0;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <_isatty>:

int _isatty(int file)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003626:	2301      	movs	r3, #1
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003658:	4a14      	ldr	r2, [pc, #80]	; (80036ac <_sbrk+0x5c>)
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <_sbrk+0x60>)
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <_sbrk+0x64>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <_sbrk+0x64>)
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <_sbrk+0x68>)
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <_sbrk+0x64>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d207      	bcs.n	8003690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003680:	f005 fe34 	bl	80092ec <__errno>
 8003684:	4603      	mov	r3, r0
 8003686:	220c      	movs	r2, #12
 8003688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e009      	b.n	80036a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <_sbrk+0x64>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <_sbrk+0x64>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <_sbrk+0x64>)
 80036a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20018000 	.word	0x20018000
 80036b0:	00000400 	.word	0x00000400
 80036b4:	2000100c 	.word	0x2000100c
 80036b8:	20004d78 	.word	0x20004d78

080036bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <SystemInit+0x20>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <SystemInit+0x20>)
 80036c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036e4:	480d      	ldr	r0, [pc, #52]	; (800371c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036e6:	490e      	ldr	r1, [pc, #56]	; (8003720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036e8:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036ec:	e002      	b.n	80036f4 <LoopCopyDataInit>

080036ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036f2:	3304      	adds	r3, #4

080036f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f8:	d3f9      	bcc.n	80036ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036fa:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036fc:	4c0b      	ldr	r4, [pc, #44]	; (800372c <LoopFillZerobss+0x26>)
  movs r3, #0
 80036fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003700:	e001      	b.n	8003706 <LoopFillZerobss>

08003702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003704:	3204      	adds	r2, #4

08003706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003708:	d3fb      	bcc.n	8003702 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800370a:	f7ff ffd7 	bl	80036bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800370e:	f005 fee9 	bl	80094e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003712:	f7fe fc35 	bl	8001f80 <main>
  bx  lr    
 8003716:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003718:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800371c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003720:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003724:	0800cdf4 	.word	0x0800cdf4
  ldr r2, =_sbss
 8003728:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800372c:	20004d78 	.word	0x20004d78

08003730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003730:	e7fe      	b.n	8003730 <ADC_IRQHandler>
	...

08003734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <HAL_Init+0x40>)
 800373e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_Init+0x40>)
 800374a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_Init+0x40>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_Init+0x40>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375c:	2003      	movs	r0, #3
 800375e:	f000 fcee 	bl	800413e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003762:	200f      	movs	r0, #15
 8003764:	f7ff fe2a 	bl	80033bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003768:	f7ff fc3e 	bl	8002fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023c00 	.word	0x40023c00

08003778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_IncTick+0x20>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_IncTick+0x24>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4413      	add	r3, r2
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_IncTick+0x24>)
 800378a:	6013      	str	r3, [r2, #0]
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	2000001c 	.word	0x2000001c
 800379c:	20001010 	.word	0x20001010

080037a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return uwTick;
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <HAL_GetTick+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20001010 	.word	0x20001010

080037b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7ff ffee 	bl	80037a0 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d005      	beq.n	80037de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_Delay+0x44>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037de:	bf00      	nop
 80037e0:	f7ff ffde 	bl	80037a0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d8f7      	bhi.n	80037e0 <HAL_Delay+0x28>
  {
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	2000001c 	.word	0x2000001c

08003800 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e033      	b.n	800387e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fc0e 	bl	8003040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d118      	bne.n	8003870 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003846:	f023 0302 	bic.w	r3, r3, #2
 800384a:	f043 0202 	orr.w	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa48 	bl	8003ce8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
 800386e:	e001      	b.n	8003874 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_Start_DMA+0x1e>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e0ce      	b.n	8003a44 <HAL_ADC_Start_DMA+0x1bc>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d018      	beq.n	80038ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038cc:	4b5f      	ldr	r3, [pc, #380]	; (8003a4c <HAL_ADC_Start_DMA+0x1c4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5f      	ldr	r2, [pc, #380]	; (8003a50 <HAL_ADC_Start_DMA+0x1c8>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0c9a      	lsrs	r2, r3, #18
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038e0:	e002      	b.n	80038e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f9      	bne.n	80038e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d107      	bne.n	800390e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800390c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	f040 8086 	bne.w	8003a2a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003948:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	d106      	bne.n	800396c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f023 0206 	bic.w	r2, r3, #6
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
 800396a:	e002      	b.n	8003972 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800397a:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_ADC_Start_DMA+0x1cc>)
 800397c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <HAL_ADC_Start_DMA+0x1d0>)
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	4a34      	ldr	r2, [pc, #208]	; (8003a5c <HAL_ADC_Start_DMA+0x1d4>)
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	4a33      	ldr	r2, [pc, #204]	; (8003a60 <HAL_ADC_Start_DMA+0x1d8>)
 8003994:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800399e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	334c      	adds	r3, #76	; 0x4c
 80039ca:	4619      	mov	r1, r3
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f000 fc98 	bl	8004304 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10f      	bne.n	8003a00 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d129      	bne.n	8003a42 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	e020      	b.n	8003a42 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_ADC_Start_DMA+0x1dc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d11b      	bne.n	8003a42 <HAL_ADC_Start_DMA+0x1ba>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d114      	bne.n	8003a42 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	e00b      	b.n	8003a42 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0210 	orr.w	r2, r3, #16
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000014 	.word	0x20000014
 8003a50:	431bde83 	.word	0x431bde83
 8003a54:	40012300 	.word	0x40012300
 8003a58:	08003ee1 	.word	0x08003ee1
 8003a5c:	08003f9b 	.word	0x08003f9b
 8003a60:	08003fb7 	.word	0x08003fb7
 8003a64:	40012000 	.word	0x40012000

08003a68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x1c>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e105      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x228>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d925      	bls.n	8003b1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68d9      	ldr	r1, [r3, #12]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3b1e      	subs	r3, #30
 8003ae6:	2207      	movs	r2, #7
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43da      	mvns	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	400a      	ands	r2, r1
 8003af4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68d9      	ldr	r1, [r3, #12]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	4603      	mov	r3, r0
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4403      	add	r3, r0
 8003b0e:	3b1e      	subs	r3, #30
 8003b10:	409a      	lsls	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	e022      	b.n	8003b62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6919      	ldr	r1, [r3, #16]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	2207      	movs	r2, #7
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43da      	mvns	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6919      	ldr	r1, [r3, #16]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4618      	mov	r0, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4403      	add	r3, r0
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d824      	bhi.n	8003bb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	3b05      	subs	r3, #5
 8003b7c:	221f      	movs	r2, #31
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43da      	mvns	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	400a      	ands	r2, r1
 8003b8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	4618      	mov	r0, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3b05      	subs	r3, #5
 8003ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8003bb2:	e04c      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d824      	bhi.n	8003c06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b23      	subs	r3, #35	; 0x23
 8003bce:	221f      	movs	r2, #31
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	400a      	ands	r2, r1
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	4618      	mov	r0, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3b23      	subs	r3, #35	; 0x23
 8003bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
 8003c04:	e023      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	3b41      	subs	r3, #65	; 0x41
 8003c18:	221f      	movs	r2, #31
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	400a      	ands	r2, r1
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	4618      	mov	r0, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	3b41      	subs	r3, #65	; 0x41
 8003c42:	fa00 f203 	lsl.w	r2, r0, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c4e:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <HAL_ADC_ConfigChannel+0x234>)
 8003c50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <HAL_ADC_ConfigChannel+0x238>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d109      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x1cc>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b12      	cmp	r3, #18
 8003c62:	d105      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_ADC_ConfigChannel+0x238>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d123      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x21e>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d003      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x1e6>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b11      	cmp	r3, #17
 8003c88:	d11b      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d111      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_ADC_ConfigChannel+0x23c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <HAL_ADC_ConfigChannel+0x240>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	0c9a      	lsrs	r2, r3, #18
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cb4:	e002      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f9      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40012300 	.word	0x40012300
 8003cdc:	40012000 	.word	0x40012000
 8003ce0:	20000014 	.word	0x20000014
 8003ce4:	431bde83 	.word	0x431bde83

08003ce8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cf0:	4b79      	ldr	r3, [pc, #484]	; (8003ed8 <ADC_Init+0x1f0>)
 8003cf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	021a      	lsls	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6899      	ldr	r1, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	4a58      	ldr	r2, [pc, #352]	; (8003edc <ADC_Init+0x1f4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6899      	ldr	r1, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6899      	ldr	r1, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	e00f      	b.n	8003de6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003de4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0202 	bic.w	r2, r2, #2
 8003df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6899      	ldr	r1, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7e1b      	ldrb	r3, [r3, #24]
 8003e00:	005a      	lsls	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	035a      	lsls	r2, r3, #13
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	e007      	b.n	8003e5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	051a      	lsls	r2, r3, #20
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6899      	ldr	r1, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e9e:	025a      	lsls	r2, r3, #9
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	029a      	lsls	r2, r3, #10
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40012300 	.word	0x40012300
 8003edc:	0f000001 	.word	0x0f000001

08003ee0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d13c      	bne.n	8003f74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d12b      	bne.n	8003f6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d127      	bne.n	8003f6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d119      	bne.n	8003f6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0220 	bic.w	r2, r2, #32
 8003f46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff fd7b 	bl	8003a68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f72:	e00e      	b.n	8003f92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff fd85 	bl	8003a90 <HAL_ADC_ErrorCallback>
}
 8003f86:	e004      	b.n	8003f92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff fd67 	bl	8003a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2240      	movs	r2, #64	; 0x40
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff fd5a 	bl	8003a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800400c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <__NVIC_SetPriorityGrouping+0x44>)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	60d3      	str	r3, [r2, #12]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <__NVIC_GetPriorityGrouping+0x18>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	f003 0307 	and.w	r3, r3, #7
}
 800403a:	4618      	mov	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	2b00      	cmp	r3, #0
 8004058:	db0b      	blt.n	8004072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	4907      	ldr	r1, [pc, #28]	; (8004080 <__NVIC_EnableIRQ+0x38>)
 8004062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2001      	movs	r0, #1
 800406a:	fa00 f202 	lsl.w	r2, r0, r2
 800406e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	e000e100 	.word	0xe000e100

08004084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004094:	2b00      	cmp	r3, #0
 8004096:	db0a      	blt.n	80040ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	490c      	ldr	r1, [pc, #48]	; (80040d0 <__NVIC_SetPriority+0x4c>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	0112      	lsls	r2, r2, #4
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	440b      	add	r3, r1
 80040a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040ac:	e00a      	b.n	80040c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4908      	ldr	r1, [pc, #32]	; (80040d4 <__NVIC_SetPriority+0x50>)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	3b04      	subs	r3, #4
 80040bc:	0112      	lsls	r2, r2, #4
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	440b      	add	r3, r1
 80040c2:	761a      	strb	r2, [r3, #24]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000e100 	.word	0xe000e100
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f1c3 0307 	rsb	r3, r3, #7
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	bf28      	it	cs
 80040f6:	2304      	movcs	r3, #4
 80040f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3304      	adds	r3, #4
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d902      	bls.n	8004108 <NVIC_EncodePriority+0x30>
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3b03      	subs	r3, #3
 8004106:	e000      	b.n	800410a <NVIC_EncodePriority+0x32>
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	f04f 32ff 	mov.w	r2, #4294967295
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43da      	mvns	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	401a      	ands	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004120:	f04f 31ff 	mov.w	r1, #4294967295
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	43d9      	mvns	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	4313      	orrs	r3, r2
         );
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	; 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff4c 	bl	8003fe4 <__NVIC_SetPriorityGrouping>
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004166:	f7ff ff61 	bl	800402c <__NVIC_GetPriorityGrouping>
 800416a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	6978      	ldr	r0, [r7, #20]
 8004172:	f7ff ffb1 	bl	80040d8 <NVIC_EncodePriority>
 8004176:	4602      	mov	r2, r0
 8004178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ff80 	bl	8004084 <__NVIC_SetPriority>
}
 8004184:	bf00      	nop
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff54 	bl	8004048 <__NVIC_EnableIRQ>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041b4:	f7ff faf4 	bl	80037a0 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e099      	b.n	80042f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e4:	e00f      	b.n	8004206 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041e6:	f7ff fadb 	bl	80037a0 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d908      	bls.n	8004206 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2203      	movs	r2, #3
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e078      	b.n	80042f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e8      	bne.n	80041e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4b38      	ldr	r3, [pc, #224]	; (8004300 <HAL_DMA_Init+0x158>)
 8004220:	4013      	ands	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004232:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800424a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b04      	cmp	r3, #4
 800425e:	d107      	bne.n	8004270 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	4313      	orrs	r3, r2
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0307 	bic.w	r3, r3, #7
 8004286:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	2b04      	cmp	r3, #4
 8004298:	d117      	bne.n	80042ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00e      	beq.n	80042ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fa6f 	bl	8004790 <DMA_CheckFifoParam>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2240      	movs	r2, #64	; 0x40
 80042bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042c6:	2301      	movs	r3, #1
 80042c8:	e016      	b.n	80042f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fa26 	bl	8004724 <DMA_CalcBaseAndBitshift>
 80042d8:	4603      	mov	r3, r0
 80042da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	223f      	movs	r2, #63	; 0x3f
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	f010803f 	.word	0xf010803f

08004304 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_DMA_Start_IT+0x26>
 8004326:	2302      	movs	r3, #2
 8004328:	e040      	b.n	80043ac <HAL_DMA_Start_IT+0xa8>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d12f      	bne.n	800439e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f9b8 	bl	80046c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	223f      	movs	r2, #63	; 0x3f
 800435e:	409a      	lsls	r2, r3
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0216 	orr.w	r2, r2, #22
 8004372:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0208 	orr.w	r2, r2, #8
 800438a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e005      	b.n	80043aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
 80043a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043c0:	4b8e      	ldr	r3, [pc, #568]	; (80045fc <HAL_DMA_IRQHandler+0x248>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a8e      	ldr	r2, [pc, #568]	; (8004600 <HAL_DMA_IRQHandler+0x24c>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0a9b      	lsrs	r3, r3, #10
 80043cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	2208      	movs	r2, #8
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01a      	beq.n	8004420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0204 	bic.w	r2, r2, #4
 8004406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	2208      	movs	r2, #8
 800440e:	409a      	lsls	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d012      	beq.n	8004456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	2201      	movs	r2, #1
 8004444:	409a      	lsls	r2, r3
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f043 0202 	orr.w	r2, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	2204      	movs	r2, #4
 800445c:	409a      	lsls	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d012      	beq.n	800448c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	2204      	movs	r2, #4
 800447a:	409a      	lsls	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f043 0204 	orr.w	r2, r3, #4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	2210      	movs	r2, #16
 8004492:	409a      	lsls	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d043      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03c      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	2210      	movs	r2, #16
 80044b0:	409a      	lsls	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d024      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
 80044e2:	e01f      	b.n	8004524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
 80044f4:	e016      	b.n	8004524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d107      	bne.n	8004514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0208 	bic.w	r2, r2, #8
 8004512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	2220      	movs	r2, #32
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 808f 	beq.w	8004654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8087 	beq.w	8004654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454a:	2220      	movs	r2, #32
 800454c:	409a      	lsls	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b05      	cmp	r3, #5
 800455c:	d136      	bne.n	80045cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0216 	bic.w	r2, r2, #22
 800456c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <HAL_DMA_IRQHandler+0x1da>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0208 	bic.w	r2, r2, #8
 800459c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	223f      	movs	r2, #63	; 0x3f
 80045a4:	409a      	lsls	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d07e      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
        }
        return;
 80045ca:	e079      	b.n	80046c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01d      	beq.n	8004616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d031      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
 80045f8:	e02c      	b.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
 80045fa:	bf00      	nop
 80045fc:	20000014 	.word	0x20000014
 8004600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d023      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
 8004614:	e01e      	b.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10f      	bne.n	8004644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0210 	bic.w	r2, r2, #16
 8004632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	2b00      	cmp	r3, #0
 800465a:	d032      	beq.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d022      	beq.n	80046ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2205      	movs	r2, #5
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3301      	adds	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	429a      	cmp	r2, r3
 800468a:	d307      	bcc.n	800469c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f2      	bne.n	8004680 <HAL_DMA_IRQHandler+0x2cc>
 800469a:	e000      	b.n	800469e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800469c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
 80046be:	e000      	b.n	80046c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80046c0:	bf00      	nop
    }
  }
}
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d108      	bne.n	8004708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004706:	e007      	b.n	8004718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	3b10      	subs	r3, #16
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <DMA_CalcBaseAndBitshift+0x64>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800473e:	4a13      	ldr	r2, [pc, #76]	; (800478c <DMA_CalcBaseAndBitshift+0x68>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d909      	bls.n	8004766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	659a      	str	r2, [r3, #88]	; 0x58
 8004764:	e007      	b.n	8004776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	aaaaaaab 	.word	0xaaaaaaab
 800478c:	0800ca00 	.word	0x0800ca00

08004790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11f      	bne.n	80047ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d856      	bhi.n	800485e <DMA_CheckFifoParam+0xce>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <DMA_CheckFifoParam+0x28>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047db 	.word	0x080047db
 80047c0:	080047c9 	.word	0x080047c9
 80047c4:	0800485f 	.word	0x0800485f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d046      	beq.n	8004862 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d8:	e043      	b.n	8004862 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047e2:	d140      	bne.n	8004866 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e8:	e03d      	b.n	8004866 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f2:	d121      	bne.n	8004838 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d837      	bhi.n	800486a <DMA_CheckFifoParam+0xda>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <DMA_CheckFifoParam+0x70>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004811 	.word	0x08004811
 8004804:	08004817 	.word	0x08004817
 8004808:	08004811 	.word	0x08004811
 800480c:	08004829 	.word	0x08004829
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e030      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d025      	beq.n	800486e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004826:	e022      	b.n	800486e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004830:	d11f      	bne.n	8004872 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004836:	e01c      	b.n	8004872 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d903      	bls.n	8004846 <DMA_CheckFifoParam+0xb6>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b03      	cmp	r3, #3
 8004842:	d003      	beq.n	800484c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004844:	e018      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
      break;
 800484a:	e015      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00e      	beq.n	8004876 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e00b      	b.n	8004876 <DMA_CheckFifoParam+0xe6>
      break;
 800485e:	bf00      	nop
 8004860:	e00a      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 8004862:	bf00      	nop
 8004864:	e008      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 8004866:	bf00      	nop
 8004868:	e006      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 800486a:	bf00      	nop
 800486c:	e004      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 800486e:	bf00      	nop
 8004870:	e002      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;   
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <DMA_CheckFifoParam+0xe8>
      break;
 8004876:	bf00      	nop
    }
  } 
  
  return status; 
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop

08004888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e159      	b.n	8004b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048a4:	2201      	movs	r2, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	429a      	cmp	r2, r3
 80048be:	f040 8148 	bne.w	8004b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d005      	beq.n	80048da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d130      	bne.n	800493c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	2203      	movs	r2, #3
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004910:	2201      	movs	r2, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 0201 	and.w	r2, r3, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d017      	beq.n	8004978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	2203      	movs	r2, #3
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d123      	bne.n	80049cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	220f      	movs	r2, #15
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	08da      	lsrs	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3208      	adds	r2, #8
 80049c6:	69b9      	ldr	r1, [r7, #24]
 80049c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	2203      	movs	r2, #3
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80a2 	beq.w	8004b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	4b57      	ldr	r3, [pc, #348]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	4a56      	ldr	r2, [pc, #344]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a1e:	4b54      	ldr	r3, [pc, #336]	; (8004b70 <HAL_GPIO_Init+0x2e8>)
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a2a:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_GPIO_Init+0x2ec>)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	089b      	lsrs	r3, r3, #2
 8004a30:	3302      	adds	r3, #2
 8004a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	220f      	movs	r2, #15
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a49      	ldr	r2, [pc, #292]	; (8004b78 <HAL_GPIO_Init+0x2f0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d019      	beq.n	8004a8a <HAL_GPIO_Init+0x202>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a48      	ldr	r2, [pc, #288]	; (8004b7c <HAL_GPIO_Init+0x2f4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_GPIO_Init+0x1fe>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a47      	ldr	r2, [pc, #284]	; (8004b80 <HAL_GPIO_Init+0x2f8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00d      	beq.n	8004a82 <HAL_GPIO_Init+0x1fa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a46      	ldr	r2, [pc, #280]	; (8004b84 <HAL_GPIO_Init+0x2fc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <HAL_GPIO_Init+0x1f6>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a45      	ldr	r2, [pc, #276]	; (8004b88 <HAL_GPIO_Init+0x300>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <HAL_GPIO_Init+0x1f2>
 8004a76:	2304      	movs	r3, #4
 8004a78:	e008      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	e006      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e004      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e002      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_GPIO_Init+0x204>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	f002 0203 	and.w	r2, r2, #3
 8004a92:	0092      	lsls	r2, r2, #2
 8004a94:	4093      	lsls	r3, r2
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a9c:	4935      	ldr	r1, [pc, #212]	; (8004b74 <HAL_GPIO_Init+0x2ec>)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aaa:	4b38      	ldr	r3, [pc, #224]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ace:	4a2f      	ldr	r2, [pc, #188]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ad4:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004af8:	4a24      	ldr	r2, [pc, #144]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b22:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b28:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <HAL_GPIO_Init+0x304>)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3301      	adds	r3, #1
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	f67f aea2 	bls.w	80048a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	3724      	adds	r7, #36	; 0x24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40013800 	.word	0x40013800
 8004b78:	40020000 	.word	0x40020000
 8004b7c:	40020400 	.word	0x40020400
 8004b80:	40020800 	.word	0x40020800
 8004b84:	40020c00 	.word	0x40020c00
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40013c00 	.word	0x40013c00

08004b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ba0:	787b      	ldrb	r3, [r7, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bac:	e003      	b.n	8004bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	041a      	lsls	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	619a      	str	r2, [r3, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e12b      	b.n	8004e2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fe faa0 	bl	8003130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	; 0x24
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c28:	f001 f898 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8004c2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4a81      	ldr	r2, [pc, #516]	; (8004e38 <HAL_I2C_Init+0x274>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d807      	bhi.n	8004c48 <HAL_I2C_Init+0x84>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a80      	ldr	r2, [pc, #512]	; (8004e3c <HAL_I2C_Init+0x278>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	bf94      	ite	ls
 8004c40:	2301      	movls	r3, #1
 8004c42:	2300      	movhi	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e006      	b.n	8004c56 <HAL_I2C_Init+0x92>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a7d      	ldr	r2, [pc, #500]	; (8004e40 <HAL_I2C_Init+0x27c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	bf94      	ite	ls
 8004c50:	2301      	movls	r3, #1
 8004c52:	2300      	movhi	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0e7      	b.n	8004e2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a78      	ldr	r2, [pc, #480]	; (8004e44 <HAL_I2C_Init+0x280>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	0c9b      	lsrs	r3, r3, #18
 8004c68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a6a      	ldr	r2, [pc, #424]	; (8004e38 <HAL_I2C_Init+0x274>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d802      	bhi.n	8004c98 <HAL_I2C_Init+0xd4>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3301      	adds	r3, #1
 8004c96:	e009      	b.n	8004cac <HAL_I2C_Init+0xe8>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	4a69      	ldr	r2, [pc, #420]	; (8004e48 <HAL_I2C_Init+0x284>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	099b      	lsrs	r3, r3, #6
 8004caa:	3301      	adds	r3, #1
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	495c      	ldr	r1, [pc, #368]	; (8004e38 <HAL_I2C_Init+0x274>)
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	d819      	bhi.n	8004d00 <HAL_I2C_Init+0x13c>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e59      	subs	r1, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ce0:	400b      	ands	r3, r1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_I2C_Init+0x138>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1e59      	subs	r1, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfa:	e051      	b.n	8004da0 <HAL_I2C_Init+0x1dc>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	e04f      	b.n	8004da0 <HAL_I2C_Init+0x1dc>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d111      	bne.n	8004d2c <HAL_I2C_Init+0x168>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1e58      	subs	r0, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	440b      	add	r3, r1
 8004d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e012      	b.n	8004d52 <HAL_I2C_Init+0x18e>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1e58      	subs	r0, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	0099      	lsls	r1, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Init+0x196>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e022      	b.n	8004da0 <HAL_I2C_Init+0x1dc>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10e      	bne.n	8004d80 <HAL_I2C_Init+0x1bc>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1e58      	subs	r0, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6859      	ldr	r1, [r3, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	440b      	add	r3, r1
 8004d70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d74:	3301      	adds	r3, #1
 8004d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7e:	e00f      	b.n	8004da0 <HAL_I2C_Init+0x1dc>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1e58      	subs	r0, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	0099      	lsls	r1, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d96:	3301      	adds	r3, #1
 8004d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	6809      	ldr	r1, [r1, #0]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6911      	ldr	r1, [r2, #16]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68d2      	ldr	r2, [r2, #12]
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	000186a0 	.word	0x000186a0
 8004e3c:	001e847f 	.word	0x001e847f
 8004e40:	003d08ff 	.word	0x003d08ff
 8004e44:	431bde83 	.word	0x431bde83
 8004e48:	10624dd3 	.word	0x10624dd3

08004e4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	817b      	strh	r3, [r7, #10]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	813b      	strh	r3, [r7, #8]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e66:	f7fe fc9b 	bl	80037a0 <HAL_GetTick>
 8004e6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	f040 80d9 	bne.w	800502c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	2319      	movs	r3, #25
 8004e80:	2201      	movs	r2, #1
 8004e82:	496d      	ldr	r1, [pc, #436]	; (8005038 <HAL_I2C_Mem_Write+0x1ec>)
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f971 	bl	800516c <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
 8004e92:	e0cc      	b.n	800502e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_I2C_Mem_Write+0x56>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e0c5      	b.n	800502e <HAL_I2C_Mem_Write+0x1e2>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d007      	beq.n	8004ec8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2221      	movs	r2, #33	; 0x21
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2240      	movs	r2, #64	; 0x40
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a3a      	ldr	r2, [r7, #32]
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4a4d      	ldr	r2, [pc, #308]	; (800503c <HAL_I2C_Mem_Write+0x1f0>)
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f0a:	88f8      	ldrh	r0, [r7, #6]
 8004f0c:	893a      	ldrh	r2, [r7, #8]
 8004f0e:	8979      	ldrh	r1, [r7, #10]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	4603      	mov	r3, r0
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f890 	bl	8005040 <I2C_RequestMemoryWrite>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d052      	beq.n	8004fcc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e081      	b.n	800502e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f9f2 	bl	8005318 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00d      	beq.n	8004f56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d107      	bne.n	8004f52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e06b      	b.n	800502e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d11b      	bne.n	8004fcc <HAL_I2C_Mem_Write+0x180>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	781a      	ldrb	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1aa      	bne.n	8004f2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f9de 	bl	800539a <I2C_WaitOnBTFFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d107      	bne.n	8004ffc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e016      	b.n	800502e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	00100002 	.word	0x00100002
 800503c:	ffff0000 	.word	0xffff0000

08005040 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	4608      	mov	r0, r1
 800504a:	4611      	mov	r1, r2
 800504c:	461a      	mov	r2, r3
 800504e:	4603      	mov	r3, r0
 8005050:	817b      	strh	r3, [r7, #10]
 8005052:	460b      	mov	r3, r1
 8005054:	813b      	strh	r3, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005068:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2200      	movs	r2, #0
 8005072:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f878 	bl	800516c <I2C_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00d      	beq.n	800509e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005090:	d103      	bne.n	800509a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e05f      	b.n	800515e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800509e:	897b      	ldrh	r3, [r7, #10]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	492d      	ldr	r1, [pc, #180]	; (8005168 <I2C_RequestMemoryWrite+0x128>)
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f8b0 	bl	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e04c      	b.n	800515e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050dc:	6a39      	ldr	r1, [r7, #32]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f91a 	bl	8005318 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00d      	beq.n	8005106 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d107      	bne.n	8005102 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005100:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e02b      	b.n	800515e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d105      	bne.n	8005118 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800510c:	893b      	ldrh	r3, [r7, #8]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	611a      	str	r2, [r3, #16]
 8005116:	e021      	b.n	800515c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005118:	893b      	ldrh	r3, [r7, #8]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	b29b      	uxth	r3, r3
 800511e:	b2da      	uxtb	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	6a39      	ldr	r1, [r7, #32]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f8f4 	bl	8005318 <I2C_WaitOnTXEFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	2b04      	cmp	r3, #4
 800513c:	d107      	bne.n	800514e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e005      	b.n	800515e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005152:	893b      	ldrh	r3, [r7, #8]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	00010002 	.word	0x00010002

0800516c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800517c:	e025      	b.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d021      	beq.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fe fb0b 	bl	80037a0 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d116      	bne.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f043 0220 	orr.w	r2, r3, #32
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e023      	b.n	8005212 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	0c1b      	lsrs	r3, r3, #16
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d10d      	bne.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	43da      	mvns	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4013      	ands	r3, r2
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	bf0c      	ite	eq
 80051e6:	2301      	moveq	r3, #1
 80051e8:	2300      	movne	r3, #0
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	e00c      	b.n	800520a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	43da      	mvns	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	429a      	cmp	r2, r3
 800520e:	d0b6      	beq.n	800517e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005228:	e051      	b.n	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005238:	d123      	bne.n	8005282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005248:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005252:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f043 0204 	orr.w	r2, r3, #4
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e046      	b.n	8005310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d021      	beq.n	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528a:	f7fe fa89 	bl	80037a0 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	429a      	cmp	r2, r3
 8005298:	d302      	bcc.n	80052a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d116      	bne.n	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e020      	b.n	8005310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	0c1b      	lsrs	r3, r3, #16
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d10c      	bne.n	80052f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	43da      	mvns	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bf14      	ite	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	2300      	moveq	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e00b      	b.n	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	43da      	mvns	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d18d      	bne.n	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005324:	e02d      	b.n	8005382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f878 	bl	800541c <I2C_IsAcknowledgeFailed>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e02d      	b.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d021      	beq.n	8005382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7fe fa2f 	bl	80037a0 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d116      	bne.n	8005382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e007      	b.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538c:	2b80      	cmp	r3, #128	; 0x80
 800538e:	d1ca      	bne.n	8005326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053a6:	e02d      	b.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f837 	bl	800541c <I2C_IsAcknowledgeFailed>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e02d      	b.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d021      	beq.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c0:	f7fe f9ee 	bl	80037a0 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d302      	bcc.n	80053d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d116      	bne.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e007      	b.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b04      	cmp	r3, #4
 8005410:	d1ca      	bne.n	80053a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005432:	d11b      	bne.n	800546c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800543c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f043 0204 	orr.w	r2, r3, #4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e267      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d075      	beq.n	8005586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800549a:	4b88      	ldr	r3, [pc, #544]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d00c      	beq.n	80054c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a6:	4b85      	ldr	r3, [pc, #532]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d112      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b2:	4b82      	ldr	r3, [pc, #520]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054be:	d10b      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c0:	4b7e      	ldr	r3, [pc, #504]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05b      	beq.n	8005584 <HAL_RCC_OscConfig+0x108>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d157      	bne.n	8005584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e242      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e0:	d106      	bne.n	80054f0 <HAL_RCC_OscConfig+0x74>
 80054e2:	4b76      	ldr	r3, [pc, #472]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a75      	ldr	r2, [pc, #468]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e01d      	b.n	800552c <HAL_RCC_OscConfig+0xb0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f8:	d10c      	bne.n	8005514 <HAL_RCC_OscConfig+0x98>
 80054fa:	4b70      	ldr	r3, [pc, #448]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a6f      	ldr	r2, [pc, #444]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4b6d      	ldr	r3, [pc, #436]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6c      	ldr	r2, [pc, #432]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800550c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e00b      	b.n	800552c <HAL_RCC_OscConfig+0xb0>
 8005514:	4b69      	ldr	r3, [pc, #420]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a68      	ldr	r2, [pc, #416]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800551a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	4b66      	ldr	r3, [pc, #408]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800552a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d013      	beq.n	800555c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005534:	f7fe f934 	bl	80037a0 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800553c:	f7fe f930 	bl	80037a0 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b64      	cmp	r3, #100	; 0x64
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e207      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	4b5b      	ldr	r3, [pc, #364]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0xc0>
 800555a:	e014      	b.n	8005586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fe f920 	bl	80037a0 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005564:	f7fe f91c 	bl	80037a0 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b64      	cmp	r3, #100	; 0x64
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e1f3      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005576:	4b51      	ldr	r3, [pc, #324]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0xe8>
 8005582:	e000      	b.n	8005586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d063      	beq.n	800565a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005592:	4b4a      	ldr	r3, [pc, #296]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559e:	4b47      	ldr	r3, [pc, #284]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d11c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055aa:	4b44      	ldr	r3, [pc, #272]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d116      	bne.n	80055e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b6:	4b41      	ldr	r3, [pc, #260]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_RCC_OscConfig+0x152>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e1c7      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4937      	ldr	r1, [pc, #220]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e2:	e03a      	b.n	800565a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ec:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <HAL_RCC_OscConfig+0x244>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f2:	f7fe f8d5 	bl	80037a0 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fa:	f7fe f8d1 	bl	80037a0 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1a8      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4925      	ldr	r1, [pc, #148]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
 800562c:	e015      	b.n	800565a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562e:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <HAL_RCC_OscConfig+0x244>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fe f8b4 	bl	80037a0 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563c:	f7fe f8b0 	bl	80037a0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e187      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d036      	beq.n	80056d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <HAL_RCC_OscConfig+0x248>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fe f894 	bl	80037a0 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567c:	f7fe f890 	bl	80037a0 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e167      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCC_OscConfig+0x240>)
 8005690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x200>
 800569a:	e01b      	b.n	80056d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <HAL_RCC_OscConfig+0x248>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a2:	f7fe f87d 	bl	80037a0 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	e00e      	b.n	80056c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056aa:	f7fe f879 	bl	80037a0 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d907      	bls.n	80056c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e150      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
 80056bc:	40023800 	.word	0x40023800
 80056c0:	42470000 	.word	0x42470000
 80056c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c8:	4b88      	ldr	r3, [pc, #544]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80056ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ea      	bne.n	80056aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8097 	beq.w	8005810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e6:	4b81      	ldr	r3, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	4b7d      	ldr	r3, [pc, #500]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	4a7c      	ldr	r2, [pc, #496]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
 8005702:	4b7a      	ldr	r3, [pc, #488]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b77      	ldr	r3, [pc, #476]	; (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d118      	bne.n	8005750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571e:	4b74      	ldr	r3, [pc, #464]	; (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a73      	ldr	r2, [pc, #460]	; (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572a:	f7fe f839 	bl	80037a0 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005732:	f7fe f835 	bl	80037a0 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e10c      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	4b6a      	ldr	r3, [pc, #424]	; (80058f0 <HAL_RCC_OscConfig+0x474>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x2ea>
 8005758:	4b64      	ldr	r3, [pc, #400]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a63      	ldr	r2, [pc, #396]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	e01c      	b.n	80057a0 <HAL_RCC_OscConfig+0x324>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b05      	cmp	r3, #5
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0x30c>
 800576e:	4b5f      	ldr	r3, [pc, #380]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a5e      	ldr	r2, [pc, #376]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
 800577a:	4b5c      	ldr	r3, [pc, #368]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a5b      	ldr	r2, [pc, #364]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
 8005786:	e00b      	b.n	80057a0 <HAL_RCC_OscConfig+0x324>
 8005788:	4b58      	ldr	r3, [pc, #352]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	4a57      	ldr	r2, [pc, #348]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	; 0x70
 8005794:	4b55      	ldr	r3, [pc, #340]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a54      	ldr	r2, [pc, #336]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800579a:	f023 0304 	bic.w	r3, r3, #4
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fd fffa 	bl	80037a0 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fd fff6 	bl	80037a0 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e0cb      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c6:	4b49      	ldr	r3, [pc, #292]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ee      	beq.n	80057b0 <HAL_RCC_OscConfig+0x334>
 80057d2:	e014      	b.n	80057fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d4:	f7fd ffe4 	bl	80037a0 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057da:	e00a      	b.n	80057f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057dc:	f7fd ffe0 	bl	80037a0 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0b5      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f2:	4b3e      	ldr	r3, [pc, #248]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ee      	bne.n	80057dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005804:	4b39      	ldr	r3, [pc, #228]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	4a38      	ldr	r2, [pc, #224]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80a1 	beq.w	800595c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800581a:	4b34      	ldr	r3, [pc, #208]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b08      	cmp	r3, #8
 8005824:	d05c      	beq.n	80058e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d141      	bne.n	80058b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <HAL_RCC_OscConfig+0x478>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005834:	f7fd ffb4 	bl	80037a0 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583c:	f7fd ffb0 	bl	80037a0 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e087      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584e:	4b27      	ldr	r3, [pc, #156]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	3b01      	subs	r3, #1
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	491b      	ldr	r1, [pc, #108]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x478>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588a:	f7fd ff89 	bl	80037a0 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005892:	f7fd ff85 	bl	80037a0 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e05c      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCC_OscConfig+0x416>
 80058b0:	e054      	b.n	800595c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <HAL_RCC_OscConfig+0x478>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fd ff72 	bl	80037a0 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c0:	f7fd ff6e 	bl	80037a0 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e045      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_RCC_OscConfig+0x470>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x444>
 80058de:	e03d      	b.n	800595c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e038      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40007000 	.word	0x40007000
 80058f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <HAL_RCC_OscConfig+0x4ec>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d028      	beq.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d121      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d11a      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800592e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005930:	4293      	cmp	r3, r2
 8005932:	d111      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	3b01      	subs	r3, #1
 8005942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d107      	bne.n	8005958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40023800 	.word	0x40023800

0800596c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0cc      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005980:	4b68      	ldr	r3, [pc, #416]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d90c      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b65      	ldr	r3, [pc, #404]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b63      	ldr	r3, [pc, #396]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0b8      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d020      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c0:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a58      	ldr	r2, [pc, #352]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d8:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4a52      	ldr	r2, [pc, #328]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e4:	4b50      	ldr	r3, [pc, #320]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	494d      	ldr	r1, [pc, #308]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d044      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d119      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e07f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d003      	beq.n	8005a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d107      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2a:	4b3f      	ldr	r3, [pc, #252]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e06f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3a:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e067      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a4a:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f023 0203 	bic.w	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4934      	ldr	r1, [pc, #208]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a5c:	f7fd fea0 	bl	80037a0 <HAL_GetTick>
 8005a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a64:	f7fd fe9c 	bl	80037a0 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e04f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a7a:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 020c 	and.w	r2, r3, #12
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d1eb      	bne.n	8005a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a8c:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d20c      	bcs.n	8005ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9a:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e032      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4916      	ldr	r1, [pc, #88]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	490e      	ldr	r1, [pc, #56]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005af2:	f000 f821 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	490a      	ldr	r1, [pc, #40]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005b04:	5ccb      	ldrb	r3, [r1, r3]
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <HAL_RCC_ClockConfig+0x1c8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fd fc52 	bl	80033bc <HAL_InitTick>

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40023c00 	.word	0x40023c00
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	0800c9e8 	.word	0x0800c9e8
 8005b30:	20000014 	.word	0x20000014
 8005b34:	20000018 	.word	0x20000018

08005b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b3c:	b094      	sub	sp, #80	; 0x50
 8005b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	647b      	str	r3, [r7, #68]	; 0x44
 8005b44:	2300      	movs	r3, #0
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b48:	2300      	movs	r3, #0
 8005b4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b50:	4b79      	ldr	r3, [pc, #484]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d00d      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x40>
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	f200 80e1 	bhi.w	8005d24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x34>
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d003      	beq.n	8005b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b6a:	e0db      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b6c:	4b73      	ldr	r3, [pc, #460]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b70:	e0db      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b72:	4b73      	ldr	r3, [pc, #460]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b76:	e0d8      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b78:	4b6f      	ldr	r3, [pc, #444]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b82:	4b6d      	ldr	r3, [pc, #436]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d063      	beq.n	8005c56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b8e:	4b6a      	ldr	r3, [pc, #424]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	099b      	lsrs	r3, r3, #6
 8005b94:	2200      	movs	r2, #0
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005baa:	4622      	mov	r2, r4
 8005bac:	462b      	mov	r3, r5
 8005bae:	f04f 0000 	mov.w	r0, #0
 8005bb2:	f04f 0100 	mov.w	r1, #0
 8005bb6:	0159      	lsls	r1, r3, #5
 8005bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bbc:	0150      	lsls	r0, r2, #5
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	1a51      	subs	r1, r2, r1
 8005bc6:	6139      	str	r1, [r7, #16]
 8005bc8:	4629      	mov	r1, r5
 8005bca:	eb63 0301 	sbc.w	r3, r3, r1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bdc:	4659      	mov	r1, fp
 8005bde:	018b      	lsls	r3, r1, #6
 8005be0:	4651      	mov	r1, sl
 8005be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005be6:	4651      	mov	r1, sl
 8005be8:	018a      	lsls	r2, r1, #6
 8005bea:	4651      	mov	r1, sl
 8005bec:	ebb2 0801 	subs.w	r8, r2, r1
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	eb63 0901 	sbc.w	r9, r3, r1
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c0a:	4690      	mov	r8, r2
 8005c0c:	4699      	mov	r9, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	eb18 0303 	adds.w	r3, r8, r3
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	462b      	mov	r3, r5
 8005c18:	eb49 0303 	adc.w	r3, r9, r3
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	024b      	lsls	r3, r1, #9
 8005c2e:	4621      	mov	r1, r4
 8005c30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c34:	4621      	mov	r1, r4
 8005c36:	024a      	lsls	r2, r1, #9
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3e:	2200      	movs	r2, #0
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c48:	f7fb f806 	bl	8000c58 <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4613      	mov	r3, r2
 8005c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c54:	e058      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c56:	4b38      	ldr	r3, [pc, #224]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	099b      	lsrs	r3, r3, #6
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	4611      	mov	r1, r2
 8005c62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	f04f 0000 	mov.w	r0, #0
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	0159      	lsls	r1, r3, #5
 8005c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c82:	0150      	lsls	r0, r2, #5
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4641      	mov	r1, r8
 8005c8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c8e:	4649      	mov	r1, r9
 8005c90:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ca0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ca4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ca8:	ebb2 040a 	subs.w	r4, r2, sl
 8005cac:	eb63 050b 	sbc.w	r5, r3, fp
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	00eb      	lsls	r3, r5, #3
 8005cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cbe:	00e2      	lsls	r2, r4, #3
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	461d      	mov	r5, r3
 8005cc4:	4643      	mov	r3, r8
 8005cc6:	18e3      	adds	r3, r4, r3
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	464b      	mov	r3, r9
 8005ccc:	eb45 0303 	adc.w	r3, r5, r3
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cde:	4629      	mov	r1, r5
 8005ce0:	028b      	lsls	r3, r1, #10
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ce8:	4621      	mov	r1, r4
 8005cea:	028a      	lsls	r2, r1, #10
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	61fa      	str	r2, [r7, #28]
 8005cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cfc:	f7fa ffac 	bl	8000c58 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	3301      	adds	r3, #1
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d22:	e002      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3750      	adds	r7, #80	; 0x50
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	00f42400 	.word	0x00f42400
 8005d40:	007a1200 	.word	0x007a1200

08005d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000014 	.word	0x20000014

08005d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d60:	f7ff fff0 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	0a9b      	lsrs	r3, r3, #10
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	4903      	ldr	r1, [pc, #12]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d72:	5ccb      	ldrb	r3, [r1, r3]
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	0800c9f8 	.word	0x0800c9f8

08005d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d88:	f7ff ffdc 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	0b5b      	lsrs	r3, r3, #13
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	4903      	ldr	r1, [pc, #12]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9a:	5ccb      	ldrb	r3, [r1, r3]
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40023800 	.word	0x40023800
 8005da8:	0800c9f8 	.word	0x0800c9f8

08005dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	220f      	movs	r2, #15
 8005dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dbc:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <HAL_RCC_GetClockConfig+0x5c>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0203 	and.w	r2, r3, #3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <HAL_RCC_GetClockConfig+0x5c>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <HAL_RCC_GetClockConfig+0x5c>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005de0:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <HAL_RCC_GetClockConfig+0x5c>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	08db      	lsrs	r3, r3, #3
 8005de6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <HAL_RCC_GetClockConfig+0x60>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0207 	and.w	r2, r3, #7
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	40023c00 	.word	0x40023c00

08005e10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d035      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e38:	4b67      	ldr	r3, [pc, #412]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e3e:	f7fd fcaf 	bl	80037a0 <HAL_GetTick>
 8005e42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e46:	f7fd fcab 	bl	80037a0 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e0ba      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e58:	4b60      	ldr	r3, [pc, #384]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1f0      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	019a      	lsls	r2, r3, #6
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	071b      	lsls	r3, r3, #28
 8005e70:	495a      	ldr	r1, [pc, #360]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e78:	4b57      	ldr	r3, [pc, #348]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e7e:	f7fd fc8f 	bl	80037a0 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e86:	f7fd fc8b 	bl	80037a0 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e09a      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e98:	4b50      	ldr	r3, [pc, #320]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8083 	beq.w	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	4b49      	ldr	r3, [pc, #292]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	4a48      	ldr	r2, [pc, #288]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ec2:	4b46      	ldr	r3, [pc, #280]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ece:	4b44      	ldr	r3, [pc, #272]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a43      	ldr	r2, [pc, #268]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eda:	f7fd fc61 	bl	80037a0 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ee2:	f7fd fc5d 	bl	80037a0 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e06c      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ef4:	4b3a      	ldr	r3, [pc, #232]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f00:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d02f      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d028      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f1e:	4b2f      	ldr	r3, [pc, #188]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f28:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f2e:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f34:	4a29      	ldr	r2, [pc, #164]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f3a:	4b28      	ldr	r3, [pc, #160]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d114      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f46:	f7fd fc2b 	bl	80037a0 <HAL_GetTick>
 8005f4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4c:	e00a      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f4e:	f7fd fc27 	bl	80037a0 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e034      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0ee      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7c:	d10d      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f7e:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f92:	4912      	ldr	r1, [pc, #72]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	608b      	str	r3, [r1, #8]
 8005f98:	e005      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f9a:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4a0f      	ldr	r2, [pc, #60]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fa0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fa4:	6093      	str	r3, [r2, #8]
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb2:	490a      	ldr	r1, [pc, #40]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	7c1a      	ldrb	r2, [r3, #16]
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fca:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	42470068 	.word	0x42470068
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	40007000 	.word	0x40007000
 8005fe4:	42470e40 	.word	0x42470e40
 8005fe8:	424711e0 	.word	0x424711e0

08005fec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e066      	b.n	80060d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7f5b      	ldrb	r3, [r3, #29]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fd f8d4 	bl	80031c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	22ca      	movs	r2, #202	; 0xca
 8006024:	625a      	str	r2, [r3, #36]	; 0x24
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2253      	movs	r2, #83	; 0x53
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fb6f 	bl	8006712 <RTC_EnterInitMode>
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d12c      	bne.n	8006098 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800604c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006050:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6899      	ldr	r1, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68d2      	ldr	r2, [r2, #12]
 8006078:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6919      	ldr	r1, [r3, #16]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	041a      	lsls	r2, r3, #16
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fb76 	bl	8006780 <RTC_ExitInitMode>
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d113      	bne.n	80060c6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	22ff      	movs	r2, #255	; 0xff
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060d8:	b590      	push	{r4, r7, lr}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	7f1b      	ldrb	r3, [r3, #28]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_RTC_SetTime+0x1c>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e087      	b.n	8006204 <HAL_RTC_SetTime+0x12c>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2202      	movs	r2, #2
 80060fe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d126      	bne.n	8006154 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2200      	movs	r2, #0
 8006118:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fb53 	bl	80067ca <RTC_ByteToBcd2>
 8006124:	4603      	mov	r3, r0
 8006126:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fb4c 	bl	80067ca <RTC_ByteToBcd2>
 8006132:	4603      	mov	r3, r0
 8006134:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006136:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	789b      	ldrb	r3, [r3, #2]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fb44 	bl	80067ca <RTC_ByteToBcd2>
 8006142:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006144:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e018      	b.n	8006186 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2200      	movs	r2, #0
 8006166:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006174:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800617a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	78db      	ldrb	r3, [r3, #3]
 8006180:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	22ca      	movs	r2, #202	; 0xca
 800618c:	625a      	str	r2, [r3, #36]	; 0x24
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2253      	movs	r2, #83	; 0x53
 8006194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fabb 	bl	8006712 <RTC_EnterInitMode>
 800619c:	4603      	mov	r3, r0
 800619e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d120      	bne.n	80061e8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061b4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6899      	ldr	r1, [r3, #8]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 face 	bl	8006780 <RTC_ExitInitMode>
 80061e4:	4603      	mov	r3, r0
 80061e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	22ff      	movs	r2, #255	; 0xff
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	771a      	strb	r2, [r3, #28]

  return status;
 8006202:	7cfb      	ldrb	r3, [r7, #19]
}
 8006204:	4618      	mov	r0, r3
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	bd90      	pop	{r4, r7, pc}

0800620c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800623e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006242:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	0c1b      	lsrs	r3, r3, #16
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	b2db      	uxtb	r3, r3
 800625a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800625e:	b2da      	uxtb	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626c:	b2da      	uxtb	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	0d9b      	lsrs	r3, r3, #22
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11a      	bne.n	80062be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fab9 	bl	8006804 <RTC_Bcd2ToByte>
 8006292:	4603      	mov	r3, r0
 8006294:	461a      	mov	r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fab0 	bl	8006804 <RTC_Bcd2ToByte>
 80062a4:	4603      	mov	r3, r0
 80062a6:	461a      	mov	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	789b      	ldrb	r3, [r3, #2]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 faa7 	bl	8006804 <RTC_Bcd2ToByte>
 80062b6:	4603      	mov	r3, r0
 80062b8:	461a      	mov	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	7f1b      	ldrb	r3, [r3, #28]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_RTC_SetDate+0x1c>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e071      	b.n	80063c8 <HAL_RTC_SetDate+0x100>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2202      	movs	r2, #2
 80062ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10e      	bne.n	8006314 <HAL_RTC_SetDate+0x4c>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	f023 0310 	bic.w	r3, r3, #16
 800630a:	b2db      	uxtb	r3, r3
 800630c:	330a      	adds	r3, #10
 800630e:	b2da      	uxtb	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d11c      	bne.n	8006354 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	78db      	ldrb	r3, [r3, #3]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fa53 	bl	80067ca <RTC_ByteToBcd2>
 8006324:	4603      	mov	r3, r0
 8006326:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fa4c 	bl	80067ca <RTC_ByteToBcd2>
 8006332:	4603      	mov	r3, r0
 8006334:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006336:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	789b      	ldrb	r3, [r3, #2]
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fa44 	bl	80067ca <RTC_ByteToBcd2>
 8006342:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006344:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e00e      	b.n	8006372 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	78db      	ldrb	r3, [r3, #3]
 8006358:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006360:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006366:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	22ca      	movs	r2, #202	; 0xca
 8006378:	625a      	str	r2, [r3, #36]	; 0x24
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2253      	movs	r2, #83	; 0x53
 8006380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f9c5 	bl	8006712 <RTC_EnterInitMode>
 8006388:	4603      	mov	r3, r0
 800638a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800638c:	7cfb      	ldrb	r3, [r7, #19]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10c      	bne.n	80063ac <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800639c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f9ec 	bl	8006780 <RTC_ExitInitMode>
 80063a8:	4603      	mov	r3, r0
 80063aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80063ac:	7cfb      	ldrb	r3, [r7, #19]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	22ff      	movs	r2, #255	; 0xff
 80063be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	771a      	strb	r2, [r3, #28]

  return status;
 80063c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd90      	pop	{r4, r7, pc}

080063d0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	0c1b      	lsrs	r3, r3, #16
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	b2da      	uxtb	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006412:	b2da      	uxtb	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	0b5b      	lsrs	r3, r3, #13
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d11a      	bne.n	8006464 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	78db      	ldrb	r3, [r3, #3]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f9e6 	bl	8006804 <RTC_Bcd2ToByte>
 8006438:	4603      	mov	r3, r0
 800643a:	461a      	mov	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 f9dd 	bl	8006804 <RTC_Bcd2ToByte>
 800644a:	4603      	mov	r3, r0
 800644c:	461a      	mov	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	789b      	ldrb	r3, [r3, #2]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f9d4 	bl	8006804 <RTC_Bcd2ToByte>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800646e:	b590      	push	{r4, r7, lr}
 8006470:	b089      	sub	sp, #36	; 0x24
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	7f1b      	ldrb	r3, [r3, #28]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_RTC_SetAlarm+0x24>
 800648e:	2302      	movs	r3, #2
 8006490:	e113      	b.n	80066ba <HAL_RTC_SetAlarm+0x24c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2202      	movs	r2, #2
 800649c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d137      	bne.n	8006514 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d102      	bne.n	80064b8 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 f984 	bl	80067ca <RTC_ByteToBcd2>
 80064c2:	4603      	mov	r3, r0
 80064c4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f97d 	bl	80067ca <RTC_ByteToBcd2>
 80064d0:	4603      	mov	r3, r0
 80064d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80064d4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	789b      	ldrb	r3, [r3, #2]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 f975 	bl	80067ca <RTC_ByteToBcd2>
 80064e0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80064e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	78db      	ldrb	r3, [r3, #3]
 80064ea:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80064ec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f967 	bl	80067ca <RTC_ByteToBcd2>
 80064fc:	4603      	mov	r3, r0
 80064fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006500:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006508:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800650e:	4313      	orrs	r3, r2
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	e023      	b.n	800655c <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d102      	bne.n	8006528 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006534:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800653a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	78db      	ldrb	r3, [r3, #3]
 8006540:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006542:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800654a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800654c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006552:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006558:	4313      	orrs	r3, r2
 800655a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	22ca      	movs	r2, #202	; 0xca
 800656e:	625a      	str	r2, [r3, #36]	; 0x24
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2253      	movs	r2, #83	; 0x53
 8006576:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006580:	d148      	bne.n	8006614 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006590:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065a0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80065b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065b4:	f7fd f8f4 	bl	80037a0 <HAL_GetTick>
 80065b8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80065ba:	e013      	b.n	80065e4 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065bc:	f7fd f8f0 	bl	80037a0 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ca:	d90b      	bls.n	80065e4 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	22ff      	movs	r2, #255	; 0xff
 80065d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2203      	movs	r2, #3
 80065d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e06a      	b.n	80066ba <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0e4      	beq.n	80065bc <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006610:	609a      	str	r2, [r3, #8]
 8006612:	e047      	b.n	80066a4 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006622:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006632:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006644:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006646:	f7fd f8ab 	bl	80037a0 <HAL_GetTick>
 800664a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800664c:	e013      	b.n	8006676 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800664e:	f7fd f8a7 	bl	80037a0 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800665c:	d90b      	bls.n	8006676 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	22ff      	movs	r2, #255	; 0xff
 8006664:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2203      	movs	r2, #3
 800666a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e021      	b.n	80066ba <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0e4      	beq.n	800664e <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a2:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	22ff      	movs	r2, #255	; 0xff
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3724      	adds	r7, #36	; 0x24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd90      	pop	{r4, r7, pc}

080066c2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066dc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066de:	f7fd f85f 	bl	80037a0 <HAL_GetTick>
 80066e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066e4:	e009      	b.n	80066fa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066e6:	f7fd f85b 	bl	80037a0 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f4:	d901      	bls.n	80066fa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e007      	b.n	800670a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0ee      	beq.n	80066e6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d122      	bne.n	8006776 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800673e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006740:	f7fd f82e 	bl	80037a0 <HAL_GetTick>
 8006744:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006746:	e00c      	b.n	8006762 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006748:	f7fd f82a 	bl	80037a0 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006756:	d904      	bls.n	8006762 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2204      	movs	r2, #4
 800675c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <RTC_EnterInitMode+0x64>
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d1e8      	bne.n	8006748 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800679a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff ff89 	bl	80066c2 <HAL_RTC_WaitForSynchro>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2204      	movs	r2, #4
 80067ba:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	4603      	mov	r3, r0
 80067d2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80067d8:	e005      	b.n	80067e6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	3301      	adds	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	3b0a      	subs	r3, #10
 80067e4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	2b09      	cmp	r3, #9
 80067ea:	d8f6      	bhi.n	80067da <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	b2db      	uxtb	r3, r3
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006812:	79fb      	ldrb	r3, [r7, #7]
 8006814:	091b      	lsrs	r3, r3, #4
 8006816:	b2db      	uxtb	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	4413      	add	r3, r2
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	b2da      	uxtb	r2, r3
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	4413      	add	r3, r2
 800682e:	b2db      	uxtb	r3, r3
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3350      	adds	r3, #80	; 0x50
 8006852:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4413      	add	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3350      	adds	r3, #80	; 0x50
 8006884:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e041      	b.n	8006936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fc fca6 	bl	8003218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3304      	adds	r3, #4
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f000 fd6a 	bl	80073b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	d001      	beq.n	8006958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e044      	b.n	80069e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1e      	ldr	r2, [pc, #120]	; (80069f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d018      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x6c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d013      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x6c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00e      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x6c>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d009      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x6c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a17      	ldr	r2, [pc, #92]	; (80069fc <HAL_TIM_Base_Start_IT+0xbc>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x6c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a16      	ldr	r2, [pc, #88]	; (8006a00 <HAL_TIM_Base_Start_IT+0xc0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d111      	bne.n	80069d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b06      	cmp	r3, #6
 80069bc:	d010      	beq.n	80069e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0201 	orr.w	r2, r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ce:	e007      	b.n	80069e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40010000 	.word	0x40010000
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40014000 	.word	0x40014000

08006a04 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a1a      	ldr	r2, [r3, #32]
 8006a22:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10f      	bne.n	8006a4c <HAL_TIM_Base_Stop_IT+0x48>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a1a      	ldr	r2, [r3, #32]
 8006a32:	f240 4344 	movw	r3, #1092	; 0x444
 8006a36:	4013      	ands	r3, r2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d107      	bne.n	8006a4c <HAL_TIM_Base_Stop_IT+0x48>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e041      	b.n	8006af8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f839 	bl	8006b00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f000 fc89 	bl	80073b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_TIM_IC_Start_IT+0x1e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	e013      	b.n	8006b5a <HAL_TIM_IC_Start_IT+0x46>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d104      	bne.n	8006b42 <HAL_TIM_IC_Start_IT+0x2e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	e00b      	b.n	8006b5a <HAL_TIM_IC_Start_IT+0x46>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d104      	bne.n	8006b52 <HAL_TIM_IC_Start_IT+0x3e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	e003      	b.n	8006b5a <HAL_TIM_IC_Start_IT+0x46>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d104      	bne.n	8006b6c <HAL_TIM_IC_Start_IT+0x58>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	e013      	b.n	8006b94 <HAL_TIM_IC_Start_IT+0x80>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d104      	bne.n	8006b7c <HAL_TIM_IC_Start_IT+0x68>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	e00b      	b.n	8006b94 <HAL_TIM_IC_Start_IT+0x80>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d104      	bne.n	8006b8c <HAL_TIM_IC_Start_IT+0x78>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e003      	b.n	8006b94 <HAL_TIM_IC_Start_IT+0x80>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d102      	bne.n	8006ba2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b9c:	7b7b      	ldrb	r3, [r7, #13]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d001      	beq.n	8006ba6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e0c2      	b.n	8006d2c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_TIM_IC_Start_IT+0xa2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb4:	e013      	b.n	8006bde <HAL_TIM_IC_Start_IT+0xca>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d104      	bne.n	8006bc6 <HAL_TIM_IC_Start_IT+0xb2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bc4:	e00b      	b.n	8006bde <HAL_TIM_IC_Start_IT+0xca>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d104      	bne.n	8006bd6 <HAL_TIM_IC_Start_IT+0xc2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd4:	e003      	b.n	8006bde <HAL_TIM_IC_Start_IT+0xca>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_IC_Start_IT+0xda>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bec:	e013      	b.n	8006c16 <HAL_TIM_IC_Start_IT+0x102>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_IC_Start_IT+0xea>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bfc:	e00b      	b.n	8006c16 <HAL_TIM_IC_Start_IT+0x102>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_IC_Start_IT+0xfa>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c0c:	e003      	b.n	8006c16 <HAL_TIM_IC_Start_IT+0x102>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b0c      	cmp	r3, #12
 8006c1a:	d841      	bhi.n	8006ca0 <HAL_TIM_IC_Start_IT+0x18c>
 8006c1c:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <HAL_TIM_IC_Start_IT+0x110>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c59 	.word	0x08006c59
 8006c28:	08006ca1 	.word	0x08006ca1
 8006c2c:	08006ca1 	.word	0x08006ca1
 8006c30:	08006ca1 	.word	0x08006ca1
 8006c34:	08006c6b 	.word	0x08006c6b
 8006c38:	08006ca1 	.word	0x08006ca1
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006ca1 	.word	0x08006ca1
 8006c44:	08006c7d 	.word	0x08006c7d
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006ca1 	.word	0x08006ca1
 8006c50:	08006ca1 	.word	0x08006ca1
 8006c54:	08006c8f 	.word	0x08006c8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0202 	orr.w	r2, r2, #2
 8006c66:	60da      	str	r2, [r3, #12]
      break;
 8006c68:	e01d      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0204 	orr.w	r2, r2, #4
 8006c78:	60da      	str	r2, [r3, #12]
      break;
 8006c7a:	e014      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0208 	orr.w	r2, r2, #8
 8006c8a:	60da      	str	r2, [r3, #12]
      break;
 8006c8c:	e00b      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0210 	orr.w	r2, r2, #16
 8006c9c:	60da      	str	r2, [r3, #12]
      break;
 8006c9e:	e002      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ca4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d13e      	bne.n	8006d2a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fdb7 	bl	8007828 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <HAL_TIM_IC_Start_IT+0x220>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ccc:	d013      	beq.n	8006cf6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a19      	ldr	r2, [pc, #100]	; (8006d38 <HAL_TIM_IC_Start_IT+0x224>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a17      	ldr	r2, [pc, #92]	; (8006d3c <HAL_TIM_IC_Start_IT+0x228>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <HAL_TIM_IC_Start_IT+0x22c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a14      	ldr	r2, [pc, #80]	; (8006d44 <HAL_TIM_IC_Start_IT+0x230>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d111      	bne.n	8006d1a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b06      	cmp	r3, #6
 8006d06:	d010      	beq.n	8006d2a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d18:	e007      	b.n	8006d2a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	40000800 	.word	0x40000800
 8006d40:	40000c00 	.word	0x40000c00
 8006d44:	40014000 	.word	0x40014000

08006d48 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b0c      	cmp	r3, #12
 8006d5a:	d841      	bhi.n	8006de0 <HAL_TIM_IC_Stop_IT+0x98>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <HAL_TIM_IC_Stop_IT+0x1c>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d99 	.word	0x08006d99
 8006d68:	08006de1 	.word	0x08006de1
 8006d6c:	08006de1 	.word	0x08006de1
 8006d70:	08006de1 	.word	0x08006de1
 8006d74:	08006dab 	.word	0x08006dab
 8006d78:	08006de1 	.word	0x08006de1
 8006d7c:	08006de1 	.word	0x08006de1
 8006d80:	08006de1 	.word	0x08006de1
 8006d84:	08006dbd 	.word	0x08006dbd
 8006d88:	08006de1 	.word	0x08006de1
 8006d8c:	08006de1 	.word	0x08006de1
 8006d90:	08006de1 	.word	0x08006de1
 8006d94:	08006dcf 	.word	0x08006dcf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0202 	bic.w	r2, r2, #2
 8006da6:	60da      	str	r2, [r3, #12]
      break;
 8006da8:	e01d      	b.n	8006de6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0204 	bic.w	r2, r2, #4
 8006db8:	60da      	str	r2, [r3, #12]
      break;
 8006dba:	e014      	b.n	8006de6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0208 	bic.w	r2, r2, #8
 8006dca:	60da      	str	r2, [r3, #12]
      break;
 8006dcc:	e00b      	b.n	8006de6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0210 	bic.w	r2, r2, #16
 8006ddc:	60da      	str	r2, [r3, #12]
      break;
 8006dde:	e002      	b.n	8006de6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
      break;
 8006de4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d156      	bne.n	8006e9a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2200      	movs	r2, #0
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fd17 	bl	8007828 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e04:	4013      	ands	r3, r2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10f      	bne.n	8006e2a <HAL_TIM_IC_Stop_IT+0xe2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6a1a      	ldr	r2, [r3, #32]
 8006e10:	f240 4344 	movw	r3, #1092	; 0x444
 8006e14:	4013      	ands	r3, r2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d107      	bne.n	8006e2a <HAL_TIM_IC_Stop_IT+0xe2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0201 	bic.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <HAL_TIM_IC_Stop_IT+0xf2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e38:	e013      	b.n	8006e62 <HAL_TIM_IC_Stop_IT+0x11a>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_IC_Stop_IT+0x102>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e48:	e00b      	b.n	8006e62 <HAL_TIM_IC_Stop_IT+0x11a>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_IC_Stop_IT+0x112>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e58:	e003      	b.n	8006e62 <HAL_TIM_IC_Stop_IT+0x11a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d104      	bne.n	8006e72 <HAL_TIM_IC_Stop_IT+0x12a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e70:	e013      	b.n	8006e9a <HAL_TIM_IC_Stop_IT+0x152>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d104      	bne.n	8006e82 <HAL_TIM_IC_Stop_IT+0x13a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e80:	e00b      	b.n	8006e9a <HAL_TIM_IC_Stop_IT+0x152>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d104      	bne.n	8006e92 <HAL_TIM_IC_Stop_IT+0x14a>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e90:	e003      	b.n	8006e9a <HAL_TIM_IC_Stop_IT+0x152>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d122      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d11b      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0202 	mvn.w	r2, #2
 8006ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fa f874 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa43 	bl	800737a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fa4a 	bl	800738e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d122      	bne.n	8006f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d11b      	bne.n	8006f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0204 	mvn.w	r2, #4
 8006f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fa f84a 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa19 	bl	800737a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa20 	bl	800738e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d122      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d11b      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0208 	mvn.w	r2, #8
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fa f820 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f9ef 	bl	800737a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f9f6 	bl	800738e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b10      	cmp	r3, #16
 8006fb4:	d122      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d11b      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0210 	mvn.w	r2, #16
 8006fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7f9 fff6 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8006fe8:	e005      	b.n	8006ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f9c5 	bl	800737a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f9cc 	bl	800738e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d10e      	bne.n	8007028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b01      	cmp	r3, #1
 8007016:	d107      	bne.n	8007028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0201 	mvn.w	r2, #1
 8007020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fb fb1e 	bl	8002664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d10e      	bne.n	8007054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007040:	2b80      	cmp	r3, #128	; 0x80
 8007042:	d107      	bne.n	8007054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800704c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fc88 	bl	8007964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b40      	cmp	r3, #64	; 0x40
 8007060:	d10e      	bne.n	8007080 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	d107      	bne.n	8007080 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f991 	bl	80073a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d10e      	bne.n	80070ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b20      	cmp	r3, #32
 800709a:	d107      	bne.n	80070ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0220 	mvn.w	r2, #32
 80070a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fc52 	bl	8007950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e088      	b.n	80071e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d11b      	bne.n	8007118 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6819      	ldr	r1, [r3, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f000 f9e2 	bl	80074b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 020c 	bic.w	r2, r2, #12
 8007102:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6999      	ldr	r1, [r3, #24]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	619a      	str	r2, [r3, #24]
 8007116:	e060      	b.n	80071da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b04      	cmp	r3, #4
 800711c:	d11c      	bne.n	8007158 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6819      	ldr	r1, [r3, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f000 fa5a 	bl	80075e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	699a      	ldr	r2, [r3, #24]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007140:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6999      	ldr	r1, [r3, #24]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	021a      	lsls	r2, r3, #8
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	619a      	str	r2, [r3, #24]
 8007156:	e040      	b.n	80071da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b08      	cmp	r3, #8
 800715c:	d11b      	bne.n	8007196 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6819      	ldr	r1, [r3, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f000 faa7 	bl	80076c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 020c 	bic.w	r2, r2, #12
 8007180:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69d9      	ldr	r1, [r3, #28]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	61da      	str	r2, [r3, #28]
 8007194:	e021      	b.n	80071da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b0c      	cmp	r3, #12
 800719a:	d11c      	bne.n	80071d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f000 fac4 	bl	8007738 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69da      	ldr	r2, [r3, #28]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69d9      	ldr	r1, [r3, #28]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	021a      	lsls	r2, r3, #8
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	61da      	str	r2, [r3, #28]
 80071d4:	e001      	b.n	80071da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_TIM_ConfigClockSource+0x1c>
 8007204:	2302      	movs	r3, #2
 8007206:	e0b4      	b.n	8007372 <HAL_TIM_ConfigClockSource+0x186>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800722e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007240:	d03e      	beq.n	80072c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007246:	f200 8087 	bhi.w	8007358 <HAL_TIM_ConfigClockSource+0x16c>
 800724a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724e:	f000 8086 	beq.w	800735e <HAL_TIM_ConfigClockSource+0x172>
 8007252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007256:	d87f      	bhi.n	8007358 <HAL_TIM_ConfigClockSource+0x16c>
 8007258:	2b70      	cmp	r3, #112	; 0x70
 800725a:	d01a      	beq.n	8007292 <HAL_TIM_ConfigClockSource+0xa6>
 800725c:	2b70      	cmp	r3, #112	; 0x70
 800725e:	d87b      	bhi.n	8007358 <HAL_TIM_ConfigClockSource+0x16c>
 8007260:	2b60      	cmp	r3, #96	; 0x60
 8007262:	d050      	beq.n	8007306 <HAL_TIM_ConfigClockSource+0x11a>
 8007264:	2b60      	cmp	r3, #96	; 0x60
 8007266:	d877      	bhi.n	8007358 <HAL_TIM_ConfigClockSource+0x16c>
 8007268:	2b50      	cmp	r3, #80	; 0x50
 800726a:	d03c      	beq.n	80072e6 <HAL_TIM_ConfigClockSource+0xfa>
 800726c:	2b50      	cmp	r3, #80	; 0x50
 800726e:	d873      	bhi.n	8007358 <HAL_TIM_ConfigClockSource+0x16c>
 8007270:	2b40      	cmp	r3, #64	; 0x40
 8007272:	d058      	beq.n	8007326 <HAL_TIM_ConfigClockSource+0x13a>
 8007274:	2b40      	cmp	r3, #64	; 0x40
 8007276:	d86f      	bhi.n	8007358 <HAL_TIM_ConfigClockSource+0x16c>
 8007278:	2b30      	cmp	r3, #48	; 0x30
 800727a:	d064      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x15a>
 800727c:	2b30      	cmp	r3, #48	; 0x30
 800727e:	d86b      	bhi.n	8007358 <HAL_TIM_ConfigClockSource+0x16c>
 8007280:	2b20      	cmp	r3, #32
 8007282:	d060      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x15a>
 8007284:	2b20      	cmp	r3, #32
 8007286:	d867      	bhi.n	8007358 <HAL_TIM_ConfigClockSource+0x16c>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d05c      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x15a>
 800728c:	2b10      	cmp	r3, #16
 800728e:	d05a      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x15a>
 8007290:	e062      	b.n	8007358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	6899      	ldr	r1, [r3, #8]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f000 faa1 	bl	80077e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	609a      	str	r2, [r3, #8]
      break;
 80072be:	e04f      	b.n	8007360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6818      	ldr	r0, [r3, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	6899      	ldr	r1, [r3, #8]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f000 fa8a 	bl	80077e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072e2:	609a      	str	r2, [r3, #8]
      break;
 80072e4:	e03c      	b.n	8007360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6818      	ldr	r0, [r3, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6859      	ldr	r1, [r3, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	461a      	mov	r2, r3
 80072f4:	f000 f948 	bl	8007588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2150      	movs	r1, #80	; 0x50
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fa57 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8007304:	e02c      	b.n	8007360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	6859      	ldr	r1, [r3, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	461a      	mov	r2, r3
 8007314:	f000 f9a4 	bl	8007660 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2160      	movs	r1, #96	; 0x60
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fa47 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8007324:	e01c      	b.n	8007360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	6859      	ldr	r1, [r3, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	461a      	mov	r2, r3
 8007334:	f000 f928 	bl	8007588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2140      	movs	r1, #64	; 0x40
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fa37 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8007344:	e00c      	b.n	8007360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f000 fa2e 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8007356:	e003      	b.n	8007360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
      break;
 800735c:	e000      	b.n	8007360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800735e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a34      	ldr	r2, [pc, #208]	; (800749c <TIM_Base_SetConfig+0xe4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00f      	beq.n	80073f0 <TIM_Base_SetConfig+0x38>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d6:	d00b      	beq.n	80073f0 <TIM_Base_SetConfig+0x38>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a31      	ldr	r2, [pc, #196]	; (80074a0 <TIM_Base_SetConfig+0xe8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_Base_SetConfig+0x38>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a30      	ldr	r2, [pc, #192]	; (80074a4 <TIM_Base_SetConfig+0xec>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_Base_SetConfig+0x38>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a2f      	ldr	r2, [pc, #188]	; (80074a8 <TIM_Base_SetConfig+0xf0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d108      	bne.n	8007402 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a25      	ldr	r2, [pc, #148]	; (800749c <TIM_Base_SetConfig+0xe4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d01b      	beq.n	8007442 <TIM_Base_SetConfig+0x8a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007410:	d017      	beq.n	8007442 <TIM_Base_SetConfig+0x8a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a22      	ldr	r2, [pc, #136]	; (80074a0 <TIM_Base_SetConfig+0xe8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <TIM_Base_SetConfig+0x8a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <TIM_Base_SetConfig+0xec>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00f      	beq.n	8007442 <TIM_Base_SetConfig+0x8a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a20      	ldr	r2, [pc, #128]	; (80074a8 <TIM_Base_SetConfig+0xf0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00b      	beq.n	8007442 <TIM_Base_SetConfig+0x8a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1f      	ldr	r2, [pc, #124]	; (80074ac <TIM_Base_SetConfig+0xf4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <TIM_Base_SetConfig+0x8a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1e      	ldr	r2, [pc, #120]	; (80074b0 <TIM_Base_SetConfig+0xf8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <TIM_Base_SetConfig+0x8a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <TIM_Base_SetConfig+0xfc>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d108      	bne.n	8007454 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a08      	ldr	r2, [pc, #32]	; (800749c <TIM_Base_SetConfig+0xe4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d103      	bne.n	8007488 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	615a      	str	r2, [r3, #20]
}
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40010000 	.word	0x40010000
 80074a0:	40000400 	.word	0x40000400
 80074a4:	40000800 	.word	0x40000800
 80074a8:	40000c00 	.word	0x40000c00
 80074ac:	40014000 	.word	0x40014000
 80074b0:	40014400 	.word	0x40014400
 80074b4:	40014800 	.word	0x40014800

080074b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f023 0201 	bic.w	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a24      	ldr	r2, [pc, #144]	; (8007574 <TIM_TI1_SetConfig+0xbc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <TIM_TI1_SetConfig+0x56>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ec:	d00f      	beq.n	800750e <TIM_TI1_SetConfig+0x56>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4a21      	ldr	r2, [pc, #132]	; (8007578 <TIM_TI1_SetConfig+0xc0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_TI1_SetConfig+0x56>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4a20      	ldr	r2, [pc, #128]	; (800757c <TIM_TI1_SetConfig+0xc4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_TI1_SetConfig+0x56>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4a1f      	ldr	r2, [pc, #124]	; (8007580 <TIM_TI1_SetConfig+0xc8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_TI1_SetConfig+0x56>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <TIM_TI1_SetConfig+0xcc>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d101      	bne.n	8007512 <TIM_TI1_SetConfig+0x5a>
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <TIM_TI1_SetConfig+0x5c>
 8007512:	2300      	movs	r3, #0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 0303 	bic.w	r3, r3, #3
 800751e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e003      	b.n	8007532 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f043 0301 	orr.w	r3, r3, #1
 8007530:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	b2db      	uxtb	r3, r3
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f023 030a 	bic.w	r3, r3, #10
 800754c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f003 030a 	and.w	r3, r3, #10
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40010000 	.word	0x40010000
 8007578:	40000400 	.word	0x40000400
 800757c:	40000800 	.word	0x40000800
 8007580:	40000c00 	.word	0x40000c00
 8007584:	40014000 	.word	0x40014000

08007588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f023 0201 	bic.w	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f023 030a 	bic.w	r3, r3, #10
 80075c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b087      	sub	sp, #28
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
 80075f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	f023 0210 	bic.w	r2, r3, #16
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007612:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	031b      	lsls	r3, r3, #12
 800762a:	b29b      	uxth	r3, r3
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007638:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	621a      	str	r2, [r3, #32]
}
 8007654:	bf00      	nop
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	f023 0210 	bic.w	r2, r3, #16
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800768a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	031b      	lsls	r3, r3, #12
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800769c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	621a      	str	r2, [r3, #32]
}
 80076b4:	bf00      	nop
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f023 0303 	bic.w	r3, r3, #3
 80076ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	b2db      	uxtb	r3, r3
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007710:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	621a      	str	r2, [r3, #32]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007776:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	031b      	lsls	r3, r3, #12
 800777c:	b29b      	uxth	r3, r3
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800778a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	031b      	lsls	r3, r3, #12
 8007790:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f043 0307 	orr.w	r3, r3, #7
 80077d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	609a      	str	r2, [r3, #8]
}
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	021a      	lsls	r2, r3, #8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	431a      	orrs	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4313      	orrs	r3, r2
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	609a      	str	r2, [r3, #8]
}
 800781c:	bf00      	nop
 800781e:	371c      	adds	r7, #28
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	2201      	movs	r2, #1
 800783c:	fa02 f303 	lsl.w	r3, r2, r3
 8007840:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a1a      	ldr	r2, [r3, #32]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	43db      	mvns	r3, r3
 800784a:	401a      	ands	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a1a      	ldr	r2, [r3, #32]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f003 031f 	and.w	r3, r3, #31
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	431a      	orrs	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
	...

08007874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007888:	2302      	movs	r3, #2
 800788a:	e050      	b.n	800792e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1c      	ldr	r2, [pc, #112]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d018      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d8:	d013      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a18      	ldr	r2, [pc, #96]	; (8007940 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00e      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a16      	ldr	r2, [pc, #88]	; (8007944 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d009      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d004      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a13      	ldr	r2, [pc, #76]	; (800794c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d10c      	bne.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	4313      	orrs	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40010000 	.word	0x40010000
 8007940:	40000400 	.word	0x40000400
 8007944:	40000800 	.word	0x40000800
 8007948:	40000c00 	.word	0x40000c00
 800794c:	40014000 	.word	0x40014000

08007950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e03f      	b.n	8007a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fb fcc4 	bl	800332c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2224      	movs	r2, #36	; 0x24
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f829 	bl	8007a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695a      	ldr	r2, [r3, #20]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a18:	b0c0      	sub	sp, #256	; 0x100
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a30:	68d9      	ldr	r1, [r3, #12]
 8007a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	ea40 0301 	orr.w	r3, r0, r1
 8007a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a6c:	f021 010c 	bic.w	r1, r1, #12
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8e:	6999      	ldr	r1, [r3, #24]
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	ea40 0301 	orr.w	r3, r0, r1
 8007a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	4b8f      	ldr	r3, [pc, #572]	; (8007ce0 <UART_SetConfig+0x2cc>)
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d005      	beq.n	8007ab4 <UART_SetConfig+0xa0>
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4b8d      	ldr	r3, [pc, #564]	; (8007ce4 <UART_SetConfig+0x2d0>)
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d104      	bne.n	8007abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ab4:	f7fe f966 	bl	8005d84 <HAL_RCC_GetPCLK2Freq>
 8007ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007abc:	e003      	b.n	8007ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007abe:	f7fe f94d 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8007ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad0:	f040 810c 	bne.w	8007cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	1891      	adds	r1, r2, r2
 8007aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8007aee:	415b      	adcs	r3, r3
 8007af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007af6:	4621      	mov	r1, r4
 8007af8:	eb12 0801 	adds.w	r8, r2, r1
 8007afc:	4629      	mov	r1, r5
 8007afe:	eb43 0901 	adc.w	r9, r3, r1
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b16:	4690      	mov	r8, r2
 8007b18:	4699      	mov	r9, r3
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	eb18 0303 	adds.w	r3, r8, r3
 8007b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b24:	462b      	mov	r3, r5
 8007b26:	eb49 0303 	adc.w	r3, r9, r3
 8007b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b42:	460b      	mov	r3, r1
 8007b44:	18db      	adds	r3, r3, r3
 8007b46:	653b      	str	r3, [r7, #80]	; 0x50
 8007b48:	4613      	mov	r3, r2
 8007b4a:	eb42 0303 	adc.w	r3, r2, r3
 8007b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b58:	f7f9 f87e 	bl	8000c58 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4b61      	ldr	r3, [pc, #388]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007b62:	fba3 2302 	umull	r2, r3, r3, r2
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	011c      	lsls	r4, r3, #4
 8007b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	1891      	adds	r1, r2, r2
 8007b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b84:	415b      	adcs	r3, r3
 8007b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8007b92:	4649      	mov	r1, r9
 8007b94:	eb43 0b01 	adc.w	fp, r3, r1
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bac:	4692      	mov	sl, r2
 8007bae:	469b      	mov	fp, r3
 8007bb0:	4643      	mov	r3, r8
 8007bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8007bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8007bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	18db      	adds	r3, r3, r3
 8007bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8007bde:	4613      	mov	r3, r2
 8007be0:	eb42 0303 	adc.w	r3, r2, r3
 8007be4:	647b      	str	r3, [r7, #68]	; 0x44
 8007be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007bee:	f7f9 f833 	bl	8000c58 <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4b3b      	ldr	r3, [pc, #236]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	2264      	movs	r2, #100	; 0x64
 8007c02:	fb02 f303 	mul.w	r3, r2, r3
 8007c06:	1acb      	subs	r3, r1, r3
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c0e:	4b36      	ldr	r3, [pc, #216]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007c10:	fba3 2302 	umull	r2, r3, r3, r2
 8007c14:	095b      	lsrs	r3, r3, #5
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c1c:	441c      	add	r4, r3
 8007c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c30:	4642      	mov	r2, r8
 8007c32:	464b      	mov	r3, r9
 8007c34:	1891      	adds	r1, r2, r2
 8007c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c38:	415b      	adcs	r3, r3
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c40:	4641      	mov	r1, r8
 8007c42:	1851      	adds	r1, r2, r1
 8007c44:	6339      	str	r1, [r7, #48]	; 0x30
 8007c46:	4649      	mov	r1, r9
 8007c48:	414b      	adcs	r3, r1
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4c:	f04f 0200 	mov.w	r2, #0
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c58:	4659      	mov	r1, fp
 8007c5a:	00cb      	lsls	r3, r1, #3
 8007c5c:	4651      	mov	r1, sl
 8007c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c62:	4651      	mov	r1, sl
 8007c64:	00ca      	lsls	r2, r1, #3
 8007c66:	4610      	mov	r0, r2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	189b      	adds	r3, r3, r2
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c74:	464b      	mov	r3, r9
 8007c76:	460a      	mov	r2, r1
 8007c78:	eb42 0303 	adc.w	r3, r2, r3
 8007c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c94:	460b      	mov	r3, r1
 8007c96:	18db      	adds	r3, r3, r3
 8007c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007caa:	f7f8 ffd5 	bl	8000c58 <__aeabi_uldivmod>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	2164      	movs	r1, #100	; 0x64
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	3332      	adds	r3, #50	; 0x32
 8007cc6:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	f003 0207 	and.w	r2, r3, #7
 8007cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4422      	add	r2, r4
 8007cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cdc:	e105      	b.n	8007eea <UART_SetConfig+0x4d6>
 8007cde:	bf00      	nop
 8007ce0:	40011000 	.word	0x40011000
 8007ce4:	40011400 	.word	0x40011400
 8007ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007cfe:	4642      	mov	r2, r8
 8007d00:	464b      	mov	r3, r9
 8007d02:	1891      	adds	r1, r2, r2
 8007d04:	6239      	str	r1, [r7, #32]
 8007d06:	415b      	adcs	r3, r3
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d0e:	4641      	mov	r1, r8
 8007d10:	1854      	adds	r4, r2, r1
 8007d12:	4649      	mov	r1, r9
 8007d14:	eb43 0501 	adc.w	r5, r3, r1
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	00eb      	lsls	r3, r5, #3
 8007d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d26:	00e2      	lsls	r2, r4, #3
 8007d28:	4614      	mov	r4, r2
 8007d2a:	461d      	mov	r5, r3
 8007d2c:	4643      	mov	r3, r8
 8007d2e:	18e3      	adds	r3, r4, r3
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d34:	464b      	mov	r3, r9
 8007d36:	eb45 0303 	adc.w	r3, r5, r3
 8007d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	f04f 0300 	mov.w	r3, #0
 8007d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	008b      	lsls	r3, r1, #2
 8007d5e:	4621      	mov	r1, r4
 8007d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d64:	4621      	mov	r1, r4
 8007d66:	008a      	lsls	r2, r1, #2
 8007d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d6c:	f7f8 ff74 	bl	8000c58 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4b60      	ldr	r3, [pc, #384]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007d76:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	011c      	lsls	r4, r3, #4
 8007d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d90:	4642      	mov	r2, r8
 8007d92:	464b      	mov	r3, r9
 8007d94:	1891      	adds	r1, r2, r2
 8007d96:	61b9      	str	r1, [r7, #24]
 8007d98:	415b      	adcs	r3, r3
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da0:	4641      	mov	r1, r8
 8007da2:	1851      	adds	r1, r2, r1
 8007da4:	6139      	str	r1, [r7, #16]
 8007da6:	4649      	mov	r1, r9
 8007da8:	414b      	adcs	r3, r1
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007db8:	4659      	mov	r1, fp
 8007dba:	00cb      	lsls	r3, r1, #3
 8007dbc:	4651      	mov	r1, sl
 8007dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc2:	4651      	mov	r1, sl
 8007dc4:	00ca      	lsls	r2, r1, #3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4642      	mov	r2, r8
 8007dce:	189b      	adds	r3, r3, r2
 8007dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	460a      	mov	r2, r1
 8007dd8:	eb42 0303 	adc.w	r3, r2, r3
 8007ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007df8:	4649      	mov	r1, r9
 8007dfa:	008b      	lsls	r3, r1, #2
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e02:	4641      	mov	r1, r8
 8007e04:	008a      	lsls	r2, r1, #2
 8007e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e0a:	f7f8 ff25 	bl	8000c58 <__aeabi_uldivmod>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4b39      	ldr	r3, [pc, #228]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007e14:	fba3 1302 	umull	r1, r3, r3, r2
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	2164      	movs	r1, #100	; 0x64
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	3332      	adds	r3, #50	; 0x32
 8007e26:	4a34      	ldr	r2, [pc, #208]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e32:	441c      	add	r4, r3
 8007e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e38:	2200      	movs	r2, #0
 8007e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e3c:	677a      	str	r2, [r7, #116]	; 0x74
 8007e3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e42:	4642      	mov	r2, r8
 8007e44:	464b      	mov	r3, r9
 8007e46:	1891      	adds	r1, r2, r2
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	415b      	adcs	r3, r3
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e52:	4641      	mov	r1, r8
 8007e54:	1851      	adds	r1, r2, r1
 8007e56:	6039      	str	r1, [r7, #0]
 8007e58:	4649      	mov	r1, r9
 8007e5a:	414b      	adcs	r3, r1
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	00cb      	lsls	r3, r1, #3
 8007e6e:	4651      	mov	r1, sl
 8007e70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e74:	4651      	mov	r1, sl
 8007e76:	00ca      	lsls	r2, r1, #3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4642      	mov	r2, r8
 8007e80:	189b      	adds	r3, r3, r2
 8007e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e84:	464b      	mov	r3, r9
 8007e86:	460a      	mov	r2, r1
 8007e88:	eb42 0303 	adc.w	r3, r2, r3
 8007e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	663b      	str	r3, [r7, #96]	; 0x60
 8007e98:	667a      	str	r2, [r7, #100]	; 0x64
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	008b      	lsls	r3, r1, #2
 8007eaa:	4641      	mov	r1, r8
 8007eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	008a      	lsls	r2, r1, #2
 8007eb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007eb8:	f7f8 fece 	bl	8000c58 <__aeabi_uldivmod>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	2164      	movs	r1, #100	; 0x64
 8007eca:	fb01 f303 	mul.w	r3, r1, r3
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	3332      	adds	r3, #50	; 0x32
 8007ed4:	4a08      	ldr	r2, [pc, #32]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	f003 020f 	and.w	r2, r3, #15
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4422      	add	r2, r4
 8007ee8:	609a      	str	r2, [r3, #8]
}
 8007eea:	bf00      	nop
 8007eec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef6:	bf00      	nop
 8007ef8:	51eb851f 	.word	0x51eb851f

08007efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f103 0208 	add.w	r2, r3, #8
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f103 0208 	add.w	r2, r3, #8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f103 0208 	add.w	r2, r3, #8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
}
 8007f92:	bf00      	nop
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb4:	d103      	bne.n	8007fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	e00c      	b.n	8007fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e002      	b.n	8007fcc <vListInsert+0x2e>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d2f6      	bcs.n	8007fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6892      	ldr	r2, [r2, #8]
 8008026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6852      	ldr	r2, [r2, #4]
 8008030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	d103      	bne.n	8008044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	1e5a      	subs	r2, r3, #1
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08e      	sub	sp, #56	; 0x38
 8008068:	af04      	add	r7, sp, #16
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <xTaskCreateStatic+0x46>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	61fb      	str	r3, [r7, #28]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080aa:	23b4      	movs	r3, #180	; 0xb4
 80080ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2bb4      	cmp	r3, #180	; 0xb4
 80080b2:	d00a      	beq.n	80080ca <xTaskCreateStatic+0x66>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	61bb      	str	r3, [r7, #24]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d01e      	beq.n	8008110 <xTaskCreateStatic+0xac>
 80080d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01b      	beq.n	8008110 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080ea:	2300      	movs	r3, #0
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	f107 0314 	add.w	r3, r7, #20
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	68b9      	ldr	r1, [r7, #8]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 f850 	bl	80081a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800810a:	f000 f8eb 	bl	80082e4 <prvAddNewTaskToReadyList>
 800810e:	e001      	b.n	8008114 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008114:	697b      	ldr	r3, [r7, #20]
	}
 8008116:	4618      	mov	r0, r3
 8008118:	3728      	adds	r7, #40	; 0x28
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800811e:	b580      	push	{r7, lr}
 8008120:	b08c      	sub	sp, #48	; 0x30
 8008122:	af04      	add	r7, sp, #16
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	603b      	str	r3, [r7, #0]
 800812a:	4613      	mov	r3, r2
 800812c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fef0 	bl	8008f18 <pvPortMalloc>
 8008138:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00e      	beq.n	800815e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008140:	20b4      	movs	r0, #180	; 0xb4
 8008142:	f000 fee9 	bl	8008f18 <pvPortMalloc>
 8008146:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	631a      	str	r2, [r3, #48]	; 0x30
 8008154:	e005      	b.n	8008162 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008156:	6978      	ldr	r0, [r7, #20]
 8008158:	f000 ffaa 	bl	80090b0 <vPortFree>
 800815c:	e001      	b.n	8008162 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800815e:	2300      	movs	r3, #0
 8008160:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d017      	beq.n	8008198 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008170:	88fa      	ldrh	r2, [r7, #6]
 8008172:	2300      	movs	r3, #0
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	9302      	str	r3, [sp, #8]
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f80e 	bl	80081a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800818c:	69f8      	ldr	r0, [r7, #28]
 800818e:	f000 f8a9 	bl	80082e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008192:	2301      	movs	r3, #1
 8008194:	61bb      	str	r3, [r7, #24]
 8008196:	e002      	b.n	800819e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008198:	f04f 33ff 	mov.w	r3, #4294967295
 800819c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800819e:	69bb      	ldr	r3, [r7, #24]
	}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3720      	adds	r7, #32
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081c0:	3b01      	subs	r3, #1
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	617b      	str	r3, [r7, #20]
}
 80081ec:	bf00      	nop
 80081ee:	e7fe      	b.n	80081ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d01f      	beq.n	8008236 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081f6:	2300      	movs	r3, #0
 80081f8:	61fb      	str	r3, [r7, #28]
 80081fa:	e012      	b.n	8008222 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	7819      	ldrb	r1, [r3, #0]
 8008204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	3334      	adds	r3, #52	; 0x34
 800820c:	460a      	mov	r2, r1
 800820e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d006      	beq.n	800822a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3301      	adds	r3, #1
 8008220:	61fb      	str	r3, [r7, #28]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	2b0f      	cmp	r3, #15
 8008226:	d9e9      	bls.n	80081fc <prvInitialiseNewTask+0x54>
 8008228:	e000      	b.n	800822c <prvInitialiseNewTask+0x84>
			{
				break;
 800822a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008234:	e003      	b.n	800823e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	2b06      	cmp	r3, #6
 8008242:	d901      	bls.n	8008248 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008244:	2306      	movs	r3, #6
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800824c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008252:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	2200      	movs	r2, #0
 8008258:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fe6c 	bl	8007f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	3318      	adds	r3, #24
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff fe67 	bl	8007f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008272:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	f1c3 0207 	rsb	r2, r3, #7
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008282:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	2200      	movs	r2, #0
 8008290:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	334c      	adds	r3, #76	; 0x4c
 8008298:	2260      	movs	r2, #96	; 0x60
 800829a:	2100      	movs	r1, #0
 800829c:	4618      	mov	r0, r3
 800829e:	f001 f970 	bl	8009582 <memset>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	4a0c      	ldr	r2, [pc, #48]	; (80082d8 <prvInitialiseNewTask+0x130>)
 80082a6:	651a      	str	r2, [r3, #80]	; 0x50
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	4a0c      	ldr	r2, [pc, #48]	; (80082dc <prvInitialiseNewTask+0x134>)
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	4a0b      	ldr	r2, [pc, #44]	; (80082e0 <prvInitialiseNewTask+0x138>)
 80082b2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	68f9      	ldr	r1, [r7, #12]
 80082b8:	69b8      	ldr	r0, [r7, #24]
 80082ba:	f000 fc1f 	bl	8008afc <pxPortInitialiseStack>
 80082be:	4602      	mov	r2, r0
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d0:	bf00      	nop
 80082d2:	3720      	adds	r7, #32
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	0800ca28 	.word	0x0800ca28
 80082dc:	0800ca48 	.word	0x0800ca48
 80082e0:	0800ca08 	.word	0x0800ca08

080082e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082ec:	f000 fd32 	bl	8008d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082f0:	4b2a      	ldr	r3, [pc, #168]	; (800839c <prvAddNewTaskToReadyList+0xb8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3301      	adds	r3, #1
 80082f6:	4a29      	ldr	r2, [pc, #164]	; (800839c <prvAddNewTaskToReadyList+0xb8>)
 80082f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082fa:	4b29      	ldr	r3, [pc, #164]	; (80083a0 <prvAddNewTaskToReadyList+0xbc>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008302:	4a27      	ldr	r2, [pc, #156]	; (80083a0 <prvAddNewTaskToReadyList+0xbc>)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008308:	4b24      	ldr	r3, [pc, #144]	; (800839c <prvAddNewTaskToReadyList+0xb8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d110      	bne.n	8008332 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008310:	f000 facc 	bl	80088ac <prvInitialiseTaskLists>
 8008314:	e00d      	b.n	8008332 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008316:	4b23      	ldr	r3, [pc, #140]	; (80083a4 <prvAddNewTaskToReadyList+0xc0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800831e:	4b20      	ldr	r3, [pc, #128]	; (80083a0 <prvAddNewTaskToReadyList+0xbc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	429a      	cmp	r2, r3
 800832a:	d802      	bhi.n	8008332 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800832c:	4a1c      	ldr	r2, [pc, #112]	; (80083a0 <prvAddNewTaskToReadyList+0xbc>)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008332:	4b1d      	ldr	r3, [pc, #116]	; (80083a8 <prvAddNewTaskToReadyList+0xc4>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3301      	adds	r3, #1
 8008338:	4a1b      	ldr	r2, [pc, #108]	; (80083a8 <prvAddNewTaskToReadyList+0xc4>)
 800833a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	2201      	movs	r2, #1
 8008342:	409a      	lsls	r2, r3
 8008344:	4b19      	ldr	r3, [pc, #100]	; (80083ac <prvAddNewTaskToReadyList+0xc8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4313      	orrs	r3, r2
 800834a:	4a18      	ldr	r2, [pc, #96]	; (80083ac <prvAddNewTaskToReadyList+0xc8>)
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4a15      	ldr	r2, [pc, #84]	; (80083b0 <prvAddNewTaskToReadyList+0xcc>)
 800835c:	441a      	add	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3304      	adds	r3, #4
 8008362:	4619      	mov	r1, r3
 8008364:	4610      	mov	r0, r2
 8008366:	f7ff fdf6 	bl	8007f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800836a:	f000 fd23 	bl	8008db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800836e:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <prvAddNewTaskToReadyList+0xc0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00e      	beq.n	8008394 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008376:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <prvAddNewTaskToReadyList+0xbc>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	429a      	cmp	r2, r3
 8008382:	d207      	bcs.n	8008394 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008384:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <prvAddNewTaskToReadyList+0xd0>)
 8008386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20001114 	.word	0x20001114
 80083a0:	20001014 	.word	0x20001014
 80083a4:	20001120 	.word	0x20001120
 80083a8:	20001130 	.word	0x20001130
 80083ac:	2000111c 	.word	0x2000111c
 80083b0:	20001018 	.word	0x20001018
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d017      	beq.n	80083fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083ca:	4b13      	ldr	r3, [pc, #76]	; (8008418 <vTaskDelay+0x60>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <vTaskDelay+0x30>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	60bb      	str	r3, [r7, #8]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80083e8:	f000 f884 	bl	80084f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083ec:	2100      	movs	r1, #0
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fb1e 	bl	8008a30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083f4:	f000 f88c 	bl	8008510 <xTaskResumeAll>
 80083f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d107      	bne.n	8008410 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008400:	4b06      	ldr	r3, [pc, #24]	; (800841c <vTaskDelay+0x64>)
 8008402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008410:	bf00      	nop
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	2000113c 	.word	0x2000113c
 800841c:	e000ed04 	.word	0xe000ed04

08008420 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	; 0x28
 8008424:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800842a:	2300      	movs	r3, #0
 800842c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800842e:	463a      	mov	r2, r7
 8008430:	1d39      	adds	r1, r7, #4
 8008432:	f107 0308 	add.w	r3, r7, #8
 8008436:	4618      	mov	r0, r3
 8008438:	f7f9 fcc2 	bl	8001dc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	9202      	str	r2, [sp, #8]
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	2300      	movs	r3, #0
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	2300      	movs	r3, #0
 800844c:	460a      	mov	r2, r1
 800844e:	4921      	ldr	r1, [pc, #132]	; (80084d4 <vTaskStartScheduler+0xb4>)
 8008450:	4821      	ldr	r0, [pc, #132]	; (80084d8 <vTaskStartScheduler+0xb8>)
 8008452:	f7ff fe07 	bl	8008064 <xTaskCreateStatic>
 8008456:	4603      	mov	r3, r0
 8008458:	4a20      	ldr	r2, [pc, #128]	; (80084dc <vTaskStartScheduler+0xbc>)
 800845a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800845c:	4b1f      	ldr	r3, [pc, #124]	; (80084dc <vTaskStartScheduler+0xbc>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008464:	2301      	movs	r3, #1
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	e001      	b.n	800846e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800846a:	2300      	movs	r3, #0
 800846c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d11b      	bne.n	80084ac <vTaskStartScheduler+0x8c>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	613b      	str	r3, [r7, #16]
}
 8008486:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008488:	4b15      	ldr	r3, [pc, #84]	; (80084e0 <vTaskStartScheduler+0xc0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	334c      	adds	r3, #76	; 0x4c
 800848e:	4a15      	ldr	r2, [pc, #84]	; (80084e4 <vTaskStartScheduler+0xc4>)
 8008490:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008492:	4b15      	ldr	r3, [pc, #84]	; (80084e8 <vTaskStartScheduler+0xc8>)
 8008494:	f04f 32ff 	mov.w	r2, #4294967295
 8008498:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800849a:	4b14      	ldr	r3, [pc, #80]	; (80084ec <vTaskStartScheduler+0xcc>)
 800849c:	2201      	movs	r2, #1
 800849e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084a0:	4b13      	ldr	r3, [pc, #76]	; (80084f0 <vTaskStartScheduler+0xd0>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084a6:	f000 fbb3 	bl	8008c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084aa:	e00e      	b.n	80084ca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d10a      	bne.n	80084ca <vTaskStartScheduler+0xaa>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60fb      	str	r3, [r7, #12]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <vTaskStartScheduler+0xa8>
}
 80084ca:	bf00      	nop
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	0800c268 	.word	0x0800c268
 80084d8:	0800887d 	.word	0x0800887d
 80084dc:	20001138 	.word	0x20001138
 80084e0:	20001014 	.word	0x20001014
 80084e4:	20000024 	.word	0x20000024
 80084e8:	20001134 	.word	0x20001134
 80084ec:	20001120 	.word	0x20001120
 80084f0:	20001118 	.word	0x20001118

080084f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80084f8:	4b04      	ldr	r3, [pc, #16]	; (800850c <vTaskSuspendAll+0x18>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3301      	adds	r3, #1
 80084fe:	4a03      	ldr	r2, [pc, #12]	; (800850c <vTaskSuspendAll+0x18>)
 8008500:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008502:	bf00      	nop
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	2000113c 	.word	0x2000113c

08008510 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800851a:	2300      	movs	r3, #0
 800851c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800851e:	4b41      	ldr	r3, [pc, #260]	; (8008624 <xTaskResumeAll+0x114>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <xTaskResumeAll+0x2c>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	603b      	str	r3, [r7, #0]
}
 8008538:	bf00      	nop
 800853a:	e7fe      	b.n	800853a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800853c:	f000 fc0a 	bl	8008d54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008540:	4b38      	ldr	r3, [pc, #224]	; (8008624 <xTaskResumeAll+0x114>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3b01      	subs	r3, #1
 8008546:	4a37      	ldr	r2, [pc, #220]	; (8008624 <xTaskResumeAll+0x114>)
 8008548:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800854a:	4b36      	ldr	r3, [pc, #216]	; (8008624 <xTaskResumeAll+0x114>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d161      	bne.n	8008616 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008552:	4b35      	ldr	r3, [pc, #212]	; (8008628 <xTaskResumeAll+0x118>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d05d      	beq.n	8008616 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800855a:	e02e      	b.n	80085ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800855c:	4b33      	ldr	r3, [pc, #204]	; (800862c <xTaskResumeAll+0x11c>)
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3318      	adds	r3, #24
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fd51 	bl	8008010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3304      	adds	r3, #4
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fd4c 	bl	8008010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	2201      	movs	r2, #1
 800857e:	409a      	lsls	r2, r3
 8008580:	4b2b      	ldr	r3, [pc, #172]	; (8008630 <xTaskResumeAll+0x120>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4313      	orrs	r3, r2
 8008586:	4a2a      	ldr	r2, [pc, #168]	; (8008630 <xTaskResumeAll+0x120>)
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4a27      	ldr	r2, [pc, #156]	; (8008634 <xTaskResumeAll+0x124>)
 8008598:	441a      	add	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f7ff fcd8 	bl	8007f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	4b23      	ldr	r3, [pc, #140]	; (8008638 <xTaskResumeAll+0x128>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d302      	bcc.n	80085ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80085b4:	4b21      	ldr	r3, [pc, #132]	; (800863c <xTaskResumeAll+0x12c>)
 80085b6:	2201      	movs	r2, #1
 80085b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ba:	4b1c      	ldr	r3, [pc, #112]	; (800862c <xTaskResumeAll+0x11c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1cc      	bne.n	800855c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085c8:	f000 fa12 	bl	80089f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085cc:	4b1c      	ldr	r3, [pc, #112]	; (8008640 <xTaskResumeAll+0x130>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d010      	beq.n	80085fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085d8:	f000 f836 	bl	8008648 <xTaskIncrementTick>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d002      	beq.n	80085e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80085e2:	4b16      	ldr	r3, [pc, #88]	; (800863c <xTaskResumeAll+0x12c>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f1      	bne.n	80085d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80085f4:	4b12      	ldr	r3, [pc, #72]	; (8008640 <xTaskResumeAll+0x130>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085fa:	4b10      	ldr	r3, [pc, #64]	; (800863c <xTaskResumeAll+0x12c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008602:	2301      	movs	r3, #1
 8008604:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008606:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <xTaskResumeAll+0x134>)
 8008608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008616:	f000 fbcd 	bl	8008db4 <vPortExitCritical>

	return xAlreadyYielded;
 800861a:	68bb      	ldr	r3, [r7, #8]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	2000113c 	.word	0x2000113c
 8008628:	20001114 	.word	0x20001114
 800862c:	200010d4 	.word	0x200010d4
 8008630:	2000111c 	.word	0x2000111c
 8008634:	20001018 	.word	0x20001018
 8008638:	20001014 	.word	0x20001014
 800863c:	20001128 	.word	0x20001128
 8008640:	20001124 	.word	0x20001124
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800864e:	2300      	movs	r3, #0
 8008650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008652:	4b4e      	ldr	r3, [pc, #312]	; (800878c <xTaskIncrementTick+0x144>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f040 808e 	bne.w	8008778 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800865c:	4b4c      	ldr	r3, [pc, #304]	; (8008790 <xTaskIncrementTick+0x148>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008664:	4a4a      	ldr	r2, [pc, #296]	; (8008790 <xTaskIncrementTick+0x148>)
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d120      	bne.n	80086b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008670:	4b48      	ldr	r3, [pc, #288]	; (8008794 <xTaskIncrementTick+0x14c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <xTaskIncrementTick+0x48>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	603b      	str	r3, [r7, #0]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <xTaskIncrementTick+0x46>
 8008690:	4b40      	ldr	r3, [pc, #256]	; (8008794 <xTaskIncrementTick+0x14c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	4b40      	ldr	r3, [pc, #256]	; (8008798 <xTaskIncrementTick+0x150>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a3e      	ldr	r2, [pc, #248]	; (8008794 <xTaskIncrementTick+0x14c>)
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	4a3e      	ldr	r2, [pc, #248]	; (8008798 <xTaskIncrementTick+0x150>)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	4b3d      	ldr	r3, [pc, #244]	; (800879c <xTaskIncrementTick+0x154>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3301      	adds	r3, #1
 80086aa:	4a3c      	ldr	r2, [pc, #240]	; (800879c <xTaskIncrementTick+0x154>)
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	f000 f99f 	bl	80089f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086b2:	4b3b      	ldr	r3, [pc, #236]	; (80087a0 <xTaskIncrementTick+0x158>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d348      	bcc.n	800874e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086bc:	4b35      	ldr	r3, [pc, #212]	; (8008794 <xTaskIncrementTick+0x14c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d104      	bne.n	80086d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c6:	4b36      	ldr	r3, [pc, #216]	; (80087a0 <xTaskIncrementTick+0x158>)
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
 80086cc:	601a      	str	r2, [r3, #0]
					break;
 80086ce:	e03e      	b.n	800874e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d0:	4b30      	ldr	r3, [pc, #192]	; (8008794 <xTaskIncrementTick+0x14c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d203      	bcs.n	80086f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086e8:	4a2d      	ldr	r2, [pc, #180]	; (80087a0 <xTaskIncrementTick+0x158>)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086ee:	e02e      	b.n	800874e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fc8b 	bl	8008010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	3318      	adds	r3, #24
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fc82 	bl	8008010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	2201      	movs	r2, #1
 8008712:	409a      	lsls	r2, r3
 8008714:	4b23      	ldr	r3, [pc, #140]	; (80087a4 <xTaskIncrementTick+0x15c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4313      	orrs	r3, r2
 800871a:	4a22      	ldr	r2, [pc, #136]	; (80087a4 <xTaskIncrementTick+0x15c>)
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4a1f      	ldr	r2, [pc, #124]	; (80087a8 <xTaskIncrementTick+0x160>)
 800872c:	441a      	add	r2, r3
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	3304      	adds	r3, #4
 8008732:	4619      	mov	r1, r3
 8008734:	4610      	mov	r0, r2
 8008736:	f7ff fc0e 	bl	8007f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873e:	4b1b      	ldr	r3, [pc, #108]	; (80087ac <xTaskIncrementTick+0x164>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	429a      	cmp	r2, r3
 8008746:	d3b9      	bcc.n	80086bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800874c:	e7b6      	b.n	80086bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800874e:	4b17      	ldr	r3, [pc, #92]	; (80087ac <xTaskIncrementTick+0x164>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008754:	4914      	ldr	r1, [pc, #80]	; (80087a8 <xTaskIncrementTick+0x160>)
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d901      	bls.n	800876a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008766:	2301      	movs	r3, #1
 8008768:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800876a:	4b11      	ldr	r3, [pc, #68]	; (80087b0 <xTaskIncrementTick+0x168>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008772:	2301      	movs	r3, #1
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	e004      	b.n	8008782 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008778:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <xTaskIncrementTick+0x16c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3301      	adds	r3, #1
 800877e:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <xTaskIncrementTick+0x16c>)
 8008780:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008782:	697b      	ldr	r3, [r7, #20]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	2000113c 	.word	0x2000113c
 8008790:	20001118 	.word	0x20001118
 8008794:	200010cc 	.word	0x200010cc
 8008798:	200010d0 	.word	0x200010d0
 800879c:	2000112c 	.word	0x2000112c
 80087a0:	20001134 	.word	0x20001134
 80087a4:	2000111c 	.word	0x2000111c
 80087a8:	20001018 	.word	0x20001018
 80087ac:	20001014 	.word	0x20001014
 80087b0:	20001128 	.word	0x20001128
 80087b4:	20001124 	.word	0x20001124

080087b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087be:	4b29      	ldr	r3, [pc, #164]	; (8008864 <vTaskSwitchContext+0xac>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087c6:	4b28      	ldr	r3, [pc, #160]	; (8008868 <vTaskSwitchContext+0xb0>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087cc:	e044      	b.n	8008858 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80087ce:	4b26      	ldr	r3, [pc, #152]	; (8008868 <vTaskSwitchContext+0xb0>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d4:	4b25      	ldr	r3, [pc, #148]	; (800886c <vTaskSwitchContext+0xb4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	fab3 f383 	clz	r3, r3
 80087e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	f1c3 031f 	rsb	r3, r3, #31
 80087e8:	617b      	str	r3, [r7, #20]
 80087ea:	4921      	ldr	r1, [pc, #132]	; (8008870 <vTaskSwitchContext+0xb8>)
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10a      	bne.n	8008814 <vTaskSwitchContext+0x5c>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <vTaskSwitchContext+0x5a>
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4a14      	ldr	r2, [pc, #80]	; (8008870 <vTaskSwitchContext+0xb8>)
 8008820:	4413      	add	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	605a      	str	r2, [r3, #4]
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	3308      	adds	r3, #8
 8008836:	429a      	cmp	r2, r3
 8008838:	d104      	bne.n	8008844 <vTaskSwitchContext+0x8c>
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	605a      	str	r2, [r3, #4]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	4a0a      	ldr	r2, [pc, #40]	; (8008874 <vTaskSwitchContext+0xbc>)
 800884c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800884e:	4b09      	ldr	r3, [pc, #36]	; (8008874 <vTaskSwitchContext+0xbc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	334c      	adds	r3, #76	; 0x4c
 8008854:	4a08      	ldr	r2, [pc, #32]	; (8008878 <vTaskSwitchContext+0xc0>)
 8008856:	6013      	str	r3, [r2, #0]
}
 8008858:	bf00      	nop
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	2000113c 	.word	0x2000113c
 8008868:	20001128 	.word	0x20001128
 800886c:	2000111c 	.word	0x2000111c
 8008870:	20001018 	.word	0x20001018
 8008874:	20001014 	.word	0x20001014
 8008878:	20000024 	.word	0x20000024

0800887c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008884:	f000 f852 	bl	800892c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008888:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <prvIdleTask+0x28>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d9f9      	bls.n	8008884 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <prvIdleTask+0x2c>)
 8008892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088a0:	e7f0      	b.n	8008884 <prvIdleTask+0x8>
 80088a2:	bf00      	nop
 80088a4:	20001018 	.word	0x20001018
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b2:	2300      	movs	r3, #0
 80088b4:	607b      	str	r3, [r7, #4]
 80088b6:	e00c      	b.n	80088d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4a12      	ldr	r2, [pc, #72]	; (800890c <prvInitialiseTaskLists+0x60>)
 80088c4:	4413      	add	r3, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fb18 	bl	8007efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3301      	adds	r3, #1
 80088d0:	607b      	str	r3, [r7, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b06      	cmp	r3, #6
 80088d6:	d9ef      	bls.n	80088b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088d8:	480d      	ldr	r0, [pc, #52]	; (8008910 <prvInitialiseTaskLists+0x64>)
 80088da:	f7ff fb0f 	bl	8007efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088de:	480d      	ldr	r0, [pc, #52]	; (8008914 <prvInitialiseTaskLists+0x68>)
 80088e0:	f7ff fb0c 	bl	8007efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088e4:	480c      	ldr	r0, [pc, #48]	; (8008918 <prvInitialiseTaskLists+0x6c>)
 80088e6:	f7ff fb09 	bl	8007efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088ea:	480c      	ldr	r0, [pc, #48]	; (800891c <prvInitialiseTaskLists+0x70>)
 80088ec:	f7ff fb06 	bl	8007efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088f0:	480b      	ldr	r0, [pc, #44]	; (8008920 <prvInitialiseTaskLists+0x74>)
 80088f2:	f7ff fb03 	bl	8007efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <prvInitialiseTaskLists+0x78>)
 80088f8:	4a05      	ldr	r2, [pc, #20]	; (8008910 <prvInitialiseTaskLists+0x64>)
 80088fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088fc:	4b0a      	ldr	r3, [pc, #40]	; (8008928 <prvInitialiseTaskLists+0x7c>)
 80088fe:	4a05      	ldr	r2, [pc, #20]	; (8008914 <prvInitialiseTaskLists+0x68>)
 8008900:	601a      	str	r2, [r3, #0]
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	20001018 	.word	0x20001018
 8008910:	200010a4 	.word	0x200010a4
 8008914:	200010b8 	.word	0x200010b8
 8008918:	200010d4 	.word	0x200010d4
 800891c:	200010e8 	.word	0x200010e8
 8008920:	20001100 	.word	0x20001100
 8008924:	200010cc 	.word	0x200010cc
 8008928:	200010d0 	.word	0x200010d0

0800892c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008932:	e019      	b.n	8008968 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008934:	f000 fa0e 	bl	8008d54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008938:	4b10      	ldr	r3, [pc, #64]	; (800897c <prvCheckTasksWaitingTermination+0x50>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3304      	adds	r3, #4
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff fb63 	bl	8008010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800894a:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <prvCheckTasksWaitingTermination+0x54>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3b01      	subs	r3, #1
 8008950:	4a0b      	ldr	r2, [pc, #44]	; (8008980 <prvCheckTasksWaitingTermination+0x54>)
 8008952:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008954:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <prvCheckTasksWaitingTermination+0x58>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3b01      	subs	r3, #1
 800895a:	4a0a      	ldr	r2, [pc, #40]	; (8008984 <prvCheckTasksWaitingTermination+0x58>)
 800895c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800895e:	f000 fa29 	bl	8008db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f810 	bl	8008988 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <prvCheckTasksWaitingTermination+0x58>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e1      	bne.n	8008934 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	200010e8 	.word	0x200010e8
 8008980:	20001114 	.word	0x20001114
 8008984:	200010fc 	.word	0x200010fc

08008988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	334c      	adds	r3, #76	; 0x4c
 8008994:	4618      	mov	r0, r3
 8008996:	f001 fb09 	bl	8009fac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d108      	bne.n	80089b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fb81 	bl	80090b0 <vPortFree>
				vPortFree( pxTCB );
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fb7e 	bl	80090b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089b4:	e018      	b.n	80089e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d103      	bne.n	80089c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fb75 	bl	80090b0 <vPortFree>
	}
 80089c6:	e00f      	b.n	80089e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d00a      	beq.n	80089e8 <prvDeleteTCB+0x60>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	60fb      	str	r3, [r7, #12]
}
 80089e4:	bf00      	nop
 80089e6:	e7fe      	b.n	80089e6 <prvDeleteTCB+0x5e>
	}
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089f6:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <prvResetNextTaskUnblockTime+0x38>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d104      	bne.n	8008a0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a00:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <prvResetNextTaskUnblockTime+0x3c>)
 8008a02:	f04f 32ff 	mov.w	r2, #4294967295
 8008a06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a08:	e008      	b.n	8008a1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a0a:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <prvResetNextTaskUnblockTime+0x38>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <prvResetNextTaskUnblockTime+0x3c>)
 8008a1a:	6013      	str	r3, [r2, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	200010cc 	.word	0x200010cc
 8008a2c:	20001134 	.word	0x20001134

08008a30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a3a:	4b29      	ldr	r3, [pc, #164]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a40:	4b28      	ldr	r3, [pc, #160]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3304      	adds	r3, #4
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fae2 	bl	8008010 <uxListRemove>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008a52:	4b24      	ldr	r3, [pc, #144]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	2201      	movs	r2, #1
 8008a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5e:	43da      	mvns	r2, r3
 8008a60:	4b21      	ldr	r3, [pc, #132]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4013      	ands	r3, r2
 8008a66:	4a20      	ldr	r2, [pc, #128]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d10a      	bne.n	8008a88 <prvAddCurrentTaskToDelayedList+0x58>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a78:	4b1a      	ldr	r3, [pc, #104]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	4619      	mov	r1, r3
 8008a80:	481a      	ldr	r0, [pc, #104]	; (8008aec <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a82:	f7ff fa68 	bl	8007f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a86:	e026      	b.n	8008ad6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a90:	4b14      	ldr	r3, [pc, #80]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d209      	bcs.n	8008ab4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aa0:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	4b0f      	ldr	r3, [pc, #60]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f7ff fa76 	bl	8007f9e <vListInsert>
}
 8008ab2:	e010      	b.n	8008ad6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3304      	adds	r3, #4
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	f7ff fa6c 	bl	8007f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d202      	bcs.n	8008ad6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ad0:	4a09      	ldr	r2, [pc, #36]	; (8008af8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	6013      	str	r3, [r2, #0]
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20001118 	.word	0x20001118
 8008ae4:	20001014 	.word	0x20001014
 8008ae8:	2000111c 	.word	0x2000111c
 8008aec:	20001100 	.word	0x20001100
 8008af0:	200010d0 	.word	0x200010d0
 8008af4:	200010cc 	.word	0x200010cc
 8008af8:	20001134 	.word	0x20001134

08008afc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3b04      	subs	r3, #4
 8008b0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f023 0201 	bic.w	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3b04      	subs	r3, #4
 8008b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b2c:	4a0c      	ldr	r2, [pc, #48]	; (8008b60 <pxPortInitialiseStack+0x64>)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3b14      	subs	r3, #20
 8008b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f06f 0202 	mvn.w	r2, #2
 8008b4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3b20      	subs	r3, #32
 8008b50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b52:	68fb      	ldr	r3, [r7, #12]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	08008b65 	.word	0x08008b65

08008b64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b6e:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <prvTaskExitError+0x54>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b76:	d00a      	beq.n	8008b8e <prvTaskExitError+0x2a>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	60fb      	str	r3, [r7, #12]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <prvTaskExitError+0x28>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	60bb      	str	r3, [r7, #8]
}
 8008ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ba2:	bf00      	nop
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0fc      	beq.n	8008ba4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	20000020 	.word	0x20000020
 8008bbc:	00000000 	.word	0x00000000

08008bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <pxCurrentTCBConst2>)
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	6808      	ldr	r0, [r1, #0]
 8008bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	f380 8809 	msr	PSP, r0
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8811 	msr	BASEPRI, r0
 8008bda:	4770      	bx	lr
 8008bdc:	f3af 8000 	nop.w

08008be0 <pxCurrentTCBConst2>:
 8008be0:	20001014 	.word	0x20001014
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop

08008be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008be8:	4808      	ldr	r0, [pc, #32]	; (8008c0c <prvPortStartFirstTask+0x24>)
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	6800      	ldr	r0, [r0, #0]
 8008bee:	f380 8808 	msr	MSP, r0
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8814 	msr	CONTROL, r0
 8008bfa:	b662      	cpsie	i
 8008bfc:	b661      	cpsie	f
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	df00      	svc	0
 8008c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c0a:	bf00      	nop
 8008c0c:	e000ed08 	.word	0xe000ed08

08008c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c16:	4b46      	ldr	r3, [pc, #280]	; (8008d30 <xPortStartScheduler+0x120>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a46      	ldr	r2, [pc, #280]	; (8008d34 <xPortStartScheduler+0x124>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10a      	bne.n	8008c36 <xPortStartScheduler+0x26>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	613b      	str	r3, [r7, #16]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c36:	4b3e      	ldr	r3, [pc, #248]	; (8008d30 <xPortStartScheduler+0x120>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a3f      	ldr	r2, [pc, #252]	; (8008d38 <xPortStartScheduler+0x128>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d10a      	bne.n	8008c56 <xPortStartScheduler+0x46>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c56:	4b39      	ldr	r3, [pc, #228]	; (8008d3c <xPortStartScheduler+0x12c>)
 8008c58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	22ff      	movs	r2, #255	; 0xff
 8008c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	4b31      	ldr	r3, [pc, #196]	; (8008d40 <xPortStartScheduler+0x130>)
 8008c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c7e:	4b31      	ldr	r3, [pc, #196]	; (8008d44 <xPortStartScheduler+0x134>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c84:	e009      	b.n	8008c9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c86:	4b2f      	ldr	r3, [pc, #188]	; (8008d44 <xPortStartScheduler+0x134>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	4a2d      	ldr	r2, [pc, #180]	; (8008d44 <xPortStartScheduler+0x134>)
 8008c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c9a:	78fb      	ldrb	r3, [r7, #3]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d0ef      	beq.n	8008c86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ca6:	4b27      	ldr	r3, [pc, #156]	; (8008d44 <xPortStartScheduler+0x134>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f1c3 0307 	rsb	r3, r3, #7
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d00a      	beq.n	8008cc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	60bb      	str	r3, [r7, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cc8:	4b1e      	ldr	r3, [pc, #120]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cda:	4a1a      	ldr	r2, [pc, #104]	; (8008d44 <xPortStartScheduler+0x134>)
 8008cdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ce6:	4b18      	ldr	r3, [pc, #96]	; (8008d48 <xPortStartScheduler+0x138>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <xPortStartScheduler+0x138>)
 8008cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <xPortStartScheduler+0x138>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a14      	ldr	r2, [pc, #80]	; (8008d48 <xPortStartScheduler+0x138>)
 8008cf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cfe:	f000 f8dd 	bl	8008ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <xPortStartScheduler+0x13c>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d08:	f000 f8fc 	bl	8008f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d0c:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <xPortStartScheduler+0x140>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a0f      	ldr	r2, [pc, #60]	; (8008d50 <xPortStartScheduler+0x140>)
 8008d12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d18:	f7ff ff66 	bl	8008be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d1c:	f7ff fd4c 	bl	80087b8 <vTaskSwitchContext>
	prvTaskExitError();
 8008d20:	f7ff ff20 	bl	8008b64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	e000ed00 	.word	0xe000ed00
 8008d34:	410fc271 	.word	0x410fc271
 8008d38:	410fc270 	.word	0x410fc270
 8008d3c:	e000e400 	.word	0xe000e400
 8008d40:	20001140 	.word	0x20001140
 8008d44:	20001144 	.word	0x20001144
 8008d48:	e000ed20 	.word	0xe000ed20
 8008d4c:	20000020 	.word	0x20000020
 8008d50:	e000ef34 	.word	0xe000ef34

08008d54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	607b      	str	r3, [r7, #4]
}
 8008d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <vPortEnterCritical+0x58>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a0d      	ldr	r2, [pc, #52]	; (8008dac <vPortEnterCritical+0x58>)
 8008d76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <vPortEnterCritical+0x58>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d10f      	bne.n	8008da0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d80:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <vPortEnterCritical+0x5c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	603b      	str	r3, [r7, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <vPortEnterCritical+0x4a>
	}
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	20000020 	.word	0x20000020
 8008db0:	e000ed04 	.word	0xe000ed04

08008db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dba:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <vPortExitCritical+0x50>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <vPortExitCritical+0x24>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	607b      	str	r3, [r7, #4]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <vPortExitCritical+0x50>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	4a09      	ldr	r2, [pc, #36]	; (8008e04 <vPortExitCritical+0x50>)
 8008de0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008de2:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <vPortExitCritical+0x50>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d105      	bne.n	8008df6 <vPortExitCritical+0x42>
 8008dea:	2300      	movs	r3, #0
 8008dec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008df4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000020 	.word	0x20000020
	...

08008e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e10:	f3ef 8009 	mrs	r0, PSP
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	4b15      	ldr	r3, [pc, #84]	; (8008e70 <pxCurrentTCBConst>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	f01e 0f10 	tst.w	lr, #16
 8008e20:	bf08      	it	eq
 8008e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2a:	6010      	str	r0, [r2, #0]
 8008e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e34:	f380 8811 	msr	BASEPRI, r0
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f7ff fcba 	bl	80087b8 <vTaskSwitchContext>
 8008e44:	f04f 0000 	mov.w	r0, #0
 8008e48:	f380 8811 	msr	BASEPRI, r0
 8008e4c:	bc09      	pop	{r0, r3}
 8008e4e:	6819      	ldr	r1, [r3, #0]
 8008e50:	6808      	ldr	r0, [r1, #0]
 8008e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e56:	f01e 0f10 	tst.w	lr, #16
 8008e5a:	bf08      	it	eq
 8008e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e60:	f380 8809 	msr	PSP, r0
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	f3af 8000 	nop.w

08008e70 <pxCurrentTCBConst>:
 8008e70:	20001014 	.word	0x20001014
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop

08008e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	607b      	str	r3, [r7, #4]
}
 8008e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e92:	f7ff fbd9 	bl	8008648 <xTaskIncrementTick>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <SysTick_Handler+0x40>)
 8008e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
}
 8008eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ec0:	4b0b      	ldr	r3, [pc, #44]	; (8008ef0 <vPortSetupTimerInterrupt+0x34>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <vPortSetupTimerInterrupt+0x38>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <vPortSetupTimerInterrupt+0x3c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <vPortSetupTimerInterrupt+0x40>)
 8008ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed6:	099b      	lsrs	r3, r3, #6
 8008ed8:	4a09      	ldr	r2, [pc, #36]	; (8008f00 <vPortSetupTimerInterrupt+0x44>)
 8008eda:	3b01      	subs	r3, #1
 8008edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ede:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <vPortSetupTimerInterrupt+0x34>)
 8008ee0:	2207      	movs	r2, #7
 8008ee2:	601a      	str	r2, [r3, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	e000e010 	.word	0xe000e010
 8008ef4:	e000e018 	.word	0xe000e018
 8008ef8:	20000014 	.word	0x20000014
 8008efc:	10624dd3 	.word	0x10624dd3
 8008f00:	e000e014 	.word	0xe000e014

08008f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f14 <vPortEnableVFP+0x10>
 8008f08:	6801      	ldr	r1, [r0, #0]
 8008f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f0e:	6001      	str	r1, [r0, #0]
 8008f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f12:	bf00      	nop
 8008f14:	e000ed88 	.word	0xe000ed88

08008f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	; 0x28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f24:	f7ff fae6 	bl	80084f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f28:	4b5b      	ldr	r3, [pc, #364]	; (8009098 <pvPortMalloc+0x180>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f30:	f000 f920 	bl	8009174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f34:	4b59      	ldr	r3, [pc, #356]	; (800909c <pvPortMalloc+0x184>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f040 8093 	bne.w	8009068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01d      	beq.n	8008f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f48:	2208      	movs	r2, #8
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f003 0307 	and.w	r3, r3, #7
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d014      	beq.n	8008f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f023 0307 	bic.w	r3, r3, #7
 8008f60:	3308      	adds	r3, #8
 8008f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <pvPortMalloc+0x6c>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	617b      	str	r3, [r7, #20]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d06e      	beq.n	8009068 <pvPortMalloc+0x150>
 8008f8a:	4b45      	ldr	r3, [pc, #276]	; (80090a0 <pvPortMalloc+0x188>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d869      	bhi.n	8009068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f94:	4b43      	ldr	r3, [pc, #268]	; (80090a4 <pvPortMalloc+0x18c>)
 8008f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f98:	4b42      	ldr	r3, [pc, #264]	; (80090a4 <pvPortMalloc+0x18c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f9e:	e004      	b.n	8008faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d903      	bls.n	8008fbc <pvPortMalloc+0xa4>
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f1      	bne.n	8008fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fbc:	4b36      	ldr	r3, [pc, #216]	; (8009098 <pvPortMalloc+0x180>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d050      	beq.n	8009068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2208      	movs	r2, #8
 8008fcc:	4413      	add	r3, r2
 8008fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	1ad2      	subs	r2, r2, r3
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d91f      	bls.n	8009028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <pvPortMalloc+0xf8>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	613b      	str	r3, [r7, #16]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009022:	69b8      	ldr	r0, [r7, #24]
 8009024:	f000 f908 	bl	8009238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009028:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <pvPortMalloc+0x188>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	4a1b      	ldr	r2, [pc, #108]	; (80090a0 <pvPortMalloc+0x188>)
 8009034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009036:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <pvPortMalloc+0x188>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <pvPortMalloc+0x190>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d203      	bcs.n	800904a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009042:	4b17      	ldr	r3, [pc, #92]	; (80090a0 <pvPortMalloc+0x188>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a18      	ldr	r2, [pc, #96]	; (80090a8 <pvPortMalloc+0x190>)
 8009048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	4b13      	ldr	r3, [pc, #76]	; (800909c <pvPortMalloc+0x184>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	431a      	orrs	r2, r3
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800905e:	4b13      	ldr	r3, [pc, #76]	; (80090ac <pvPortMalloc+0x194>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	4a11      	ldr	r2, [pc, #68]	; (80090ac <pvPortMalloc+0x194>)
 8009066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009068:	f7ff fa52 	bl	8008510 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <pvPortMalloc+0x174>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	60fb      	str	r3, [r7, #12]
}
 8009088:	bf00      	nop
 800908a:	e7fe      	b.n	800908a <pvPortMalloc+0x172>
	return pvReturn;
 800908c:	69fb      	ldr	r3, [r7, #28]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3728      	adds	r7, #40	; 0x28
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20004d50 	.word	0x20004d50
 800909c:	20004d64 	.word	0x20004d64
 80090a0:	20004d54 	.word	0x20004d54
 80090a4:	20004d48 	.word	0x20004d48
 80090a8:	20004d58 	.word	0x20004d58
 80090ac:	20004d5c 	.word	0x20004d5c

080090b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d04d      	beq.n	800915e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090c2:	2308      	movs	r3, #8
 80090c4:	425b      	negs	r3, r3
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	4413      	add	r3, r2
 80090ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	4b24      	ldr	r3, [pc, #144]	; (8009168 <vPortFree+0xb8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4013      	ands	r3, r2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <vPortFree+0x44>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	60fb      	str	r3, [r7, #12]
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00a      	beq.n	8009112 <vPortFree+0x62>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	60bb      	str	r3, [r7, #8]
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <vPortFree+0xb8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4013      	ands	r3, r2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01e      	beq.n	800915e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11a      	bne.n	800915e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	4b0e      	ldr	r3, [pc, #56]	; (8009168 <vPortFree+0xb8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	43db      	mvns	r3, r3
 8009132:	401a      	ands	r2, r3
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009138:	f7ff f9dc 	bl	80084f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <vPortFree+0xbc>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4413      	add	r3, r2
 8009146:	4a09      	ldr	r2, [pc, #36]	; (800916c <vPortFree+0xbc>)
 8009148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800914a:	6938      	ldr	r0, [r7, #16]
 800914c:	f000 f874 	bl	8009238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009150:	4b07      	ldr	r3, [pc, #28]	; (8009170 <vPortFree+0xc0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3301      	adds	r3, #1
 8009156:	4a06      	ldr	r2, [pc, #24]	; (8009170 <vPortFree+0xc0>)
 8009158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800915a:	f7ff f9d9 	bl	8008510 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800915e:	bf00      	nop
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20004d64 	.word	0x20004d64
 800916c:	20004d54 	.word	0x20004d54
 8009170:	20004d60 	.word	0x20004d60

08009174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800917a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800917e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009180:	4b27      	ldr	r3, [pc, #156]	; (8009220 <prvHeapInit+0xac>)
 8009182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00c      	beq.n	80091a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3307      	adds	r3, #7
 8009192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	4a1f      	ldr	r2, [pc, #124]	; (8009220 <prvHeapInit+0xac>)
 80091a4:	4413      	add	r3, r2
 80091a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091ac:	4a1d      	ldr	r2, [pc, #116]	; (8009224 <prvHeapInit+0xb0>)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091b2:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <prvHeapInit+0xb0>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	4413      	add	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091c0:	2208      	movs	r2, #8
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1a9b      	subs	r3, r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0307 	bic.w	r3, r3, #7
 80091ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4a15      	ldr	r2, [pc, #84]	; (8009228 <prvHeapInit+0xb4>)
 80091d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091d6:	4b14      	ldr	r3, [pc, #80]	; (8009228 <prvHeapInit+0xb4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091de:	4b12      	ldr	r3, [pc, #72]	; (8009228 <prvHeapInit+0xb4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	1ad2      	subs	r2, r2, r3
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091f4:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <prvHeapInit+0xb4>)
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	4a0a      	ldr	r2, [pc, #40]	; (800922c <prvHeapInit+0xb8>)
 8009202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	4a09      	ldr	r2, [pc, #36]	; (8009230 <prvHeapInit+0xbc>)
 800920a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800920c:	4b09      	ldr	r3, [pc, #36]	; (8009234 <prvHeapInit+0xc0>)
 800920e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009212:	601a      	str	r2, [r3, #0]
}
 8009214:	bf00      	nop
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	20001148 	.word	0x20001148
 8009224:	20004d48 	.word	0x20004d48
 8009228:	20004d50 	.word	0x20004d50
 800922c:	20004d58 	.word	0x20004d58
 8009230:	20004d54 	.word	0x20004d54
 8009234:	20004d64 	.word	0x20004d64

08009238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009240:	4b28      	ldr	r3, [pc, #160]	; (80092e4 <prvInsertBlockIntoFreeList+0xac>)
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e002      	b.n	800924c <prvInsertBlockIntoFreeList+0x14>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	429a      	cmp	r2, r3
 8009254:	d8f7      	bhi.n	8009246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	4413      	add	r3, r2
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d108      	bne.n	800927a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	441a      	add	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	441a      	add	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d118      	bne.n	80092c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d00d      	beq.n	80092b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	441a      	add	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	e008      	b.n	80092c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092b6:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <prvInsertBlockIntoFreeList+0xb0>)
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	e003      	b.n	80092c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d002      	beq.n	80092d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092d6:	bf00      	nop
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20004d48 	.word	0x20004d48
 80092e8:	20004d50 	.word	0x20004d50

080092ec <__errno>:
 80092ec:	4b01      	ldr	r3, [pc, #4]	; (80092f4 <__errno+0x8>)
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20000024 	.word	0x20000024

080092f8 <std>:
 80092f8:	2300      	movs	r3, #0
 80092fa:	b510      	push	{r4, lr}
 80092fc:	4604      	mov	r4, r0
 80092fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009306:	6083      	str	r3, [r0, #8]
 8009308:	8181      	strh	r1, [r0, #12]
 800930a:	6643      	str	r3, [r0, #100]	; 0x64
 800930c:	81c2      	strh	r2, [r0, #14]
 800930e:	6183      	str	r3, [r0, #24]
 8009310:	4619      	mov	r1, r3
 8009312:	2208      	movs	r2, #8
 8009314:	305c      	adds	r0, #92	; 0x5c
 8009316:	f000 f934 	bl	8009582 <memset>
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <std+0x38>)
 800931c:	6263      	str	r3, [r4, #36]	; 0x24
 800931e:	4b05      	ldr	r3, [pc, #20]	; (8009334 <std+0x3c>)
 8009320:	62a3      	str	r3, [r4, #40]	; 0x28
 8009322:	4b05      	ldr	r3, [pc, #20]	; (8009338 <std+0x40>)
 8009324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <std+0x44>)
 8009328:	6224      	str	r4, [r4, #32]
 800932a:	6323      	str	r3, [r4, #48]	; 0x30
 800932c:	bd10      	pop	{r4, pc}
 800932e:	bf00      	nop
 8009330:	0800a0c5 	.word	0x0800a0c5
 8009334:	0800a0e7 	.word	0x0800a0e7
 8009338:	0800a11f 	.word	0x0800a11f
 800933c:	0800a143 	.word	0x0800a143

08009340 <_cleanup_r>:
 8009340:	4901      	ldr	r1, [pc, #4]	; (8009348 <_cleanup_r+0x8>)
 8009342:	f000 b8af 	b.w	80094a4 <_fwalk_reent>
 8009346:	bf00      	nop
 8009348:	0800af91 	.word	0x0800af91

0800934c <__sfmoreglue>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	2268      	movs	r2, #104	; 0x68
 8009350:	1e4d      	subs	r5, r1, #1
 8009352:	4355      	muls	r5, r2
 8009354:	460e      	mov	r6, r1
 8009356:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800935a:	f000 f93b 	bl	80095d4 <_malloc_r>
 800935e:	4604      	mov	r4, r0
 8009360:	b140      	cbz	r0, 8009374 <__sfmoreglue+0x28>
 8009362:	2100      	movs	r1, #0
 8009364:	e9c0 1600 	strd	r1, r6, [r0]
 8009368:	300c      	adds	r0, #12
 800936a:	60a0      	str	r0, [r4, #8]
 800936c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009370:	f000 f907 	bl	8009582 <memset>
 8009374:	4620      	mov	r0, r4
 8009376:	bd70      	pop	{r4, r5, r6, pc}

08009378 <__sfp_lock_acquire>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__sfp_lock_acquire+0x8>)
 800937a:	f000 b8d8 	b.w	800952e <__retarget_lock_acquire_recursive>
 800937e:	bf00      	nop
 8009380:	20004d69 	.word	0x20004d69

08009384 <__sfp_lock_release>:
 8009384:	4801      	ldr	r0, [pc, #4]	; (800938c <__sfp_lock_release+0x8>)
 8009386:	f000 b8d3 	b.w	8009530 <__retarget_lock_release_recursive>
 800938a:	bf00      	nop
 800938c:	20004d69 	.word	0x20004d69

08009390 <__sinit_lock_acquire>:
 8009390:	4801      	ldr	r0, [pc, #4]	; (8009398 <__sinit_lock_acquire+0x8>)
 8009392:	f000 b8cc 	b.w	800952e <__retarget_lock_acquire_recursive>
 8009396:	bf00      	nop
 8009398:	20004d6a 	.word	0x20004d6a

0800939c <__sinit_lock_release>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__sinit_lock_release+0x8>)
 800939e:	f000 b8c7 	b.w	8009530 <__retarget_lock_release_recursive>
 80093a2:	bf00      	nop
 80093a4:	20004d6a 	.word	0x20004d6a

080093a8 <__sinit>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	f7ff fff0 	bl	8009390 <__sinit_lock_acquire>
 80093b0:	69a3      	ldr	r3, [r4, #24]
 80093b2:	b11b      	cbz	r3, 80093bc <__sinit+0x14>
 80093b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093b8:	f7ff bff0 	b.w	800939c <__sinit_lock_release>
 80093bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093c0:	6523      	str	r3, [r4, #80]	; 0x50
 80093c2:	4b13      	ldr	r3, [pc, #76]	; (8009410 <__sinit+0x68>)
 80093c4:	4a13      	ldr	r2, [pc, #76]	; (8009414 <__sinit+0x6c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80093ca:	42a3      	cmp	r3, r4
 80093cc:	bf04      	itt	eq
 80093ce:	2301      	moveq	r3, #1
 80093d0:	61a3      	streq	r3, [r4, #24]
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 f820 	bl	8009418 <__sfp>
 80093d8:	6060      	str	r0, [r4, #4]
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 f81c 	bl	8009418 <__sfp>
 80093e0:	60a0      	str	r0, [r4, #8]
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 f818 	bl	8009418 <__sfp>
 80093e8:	2200      	movs	r2, #0
 80093ea:	60e0      	str	r0, [r4, #12]
 80093ec:	2104      	movs	r1, #4
 80093ee:	6860      	ldr	r0, [r4, #4]
 80093f0:	f7ff ff82 	bl	80092f8 <std>
 80093f4:	68a0      	ldr	r0, [r4, #8]
 80093f6:	2201      	movs	r2, #1
 80093f8:	2109      	movs	r1, #9
 80093fa:	f7ff ff7d 	bl	80092f8 <std>
 80093fe:	68e0      	ldr	r0, [r4, #12]
 8009400:	2202      	movs	r2, #2
 8009402:	2112      	movs	r1, #18
 8009404:	f7ff ff78 	bl	80092f8 <std>
 8009408:	2301      	movs	r3, #1
 800940a:	61a3      	str	r3, [r4, #24]
 800940c:	e7d2      	b.n	80093b4 <__sinit+0xc>
 800940e:	bf00      	nop
 8009410:	0800ca68 	.word	0x0800ca68
 8009414:	08009341 	.word	0x08009341

08009418 <__sfp>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	4607      	mov	r7, r0
 800941c:	f7ff ffac 	bl	8009378 <__sfp_lock_acquire>
 8009420:	4b1e      	ldr	r3, [pc, #120]	; (800949c <__sfp+0x84>)
 8009422:	681e      	ldr	r6, [r3, #0]
 8009424:	69b3      	ldr	r3, [r6, #24]
 8009426:	b913      	cbnz	r3, 800942e <__sfp+0x16>
 8009428:	4630      	mov	r0, r6
 800942a:	f7ff ffbd 	bl	80093a8 <__sinit>
 800942e:	3648      	adds	r6, #72	; 0x48
 8009430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009434:	3b01      	subs	r3, #1
 8009436:	d503      	bpl.n	8009440 <__sfp+0x28>
 8009438:	6833      	ldr	r3, [r6, #0]
 800943a:	b30b      	cbz	r3, 8009480 <__sfp+0x68>
 800943c:	6836      	ldr	r6, [r6, #0]
 800943e:	e7f7      	b.n	8009430 <__sfp+0x18>
 8009440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009444:	b9d5      	cbnz	r5, 800947c <__sfp+0x64>
 8009446:	4b16      	ldr	r3, [pc, #88]	; (80094a0 <__sfp+0x88>)
 8009448:	60e3      	str	r3, [r4, #12]
 800944a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800944e:	6665      	str	r5, [r4, #100]	; 0x64
 8009450:	f000 f86c 	bl	800952c <__retarget_lock_init_recursive>
 8009454:	f7ff ff96 	bl	8009384 <__sfp_lock_release>
 8009458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800945c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009460:	6025      	str	r5, [r4, #0]
 8009462:	61a5      	str	r5, [r4, #24]
 8009464:	2208      	movs	r2, #8
 8009466:	4629      	mov	r1, r5
 8009468:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800946c:	f000 f889 	bl	8009582 <memset>
 8009470:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009474:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009478:	4620      	mov	r0, r4
 800947a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947c:	3468      	adds	r4, #104	; 0x68
 800947e:	e7d9      	b.n	8009434 <__sfp+0x1c>
 8009480:	2104      	movs	r1, #4
 8009482:	4638      	mov	r0, r7
 8009484:	f7ff ff62 	bl	800934c <__sfmoreglue>
 8009488:	4604      	mov	r4, r0
 800948a:	6030      	str	r0, [r6, #0]
 800948c:	2800      	cmp	r0, #0
 800948e:	d1d5      	bne.n	800943c <__sfp+0x24>
 8009490:	f7ff ff78 	bl	8009384 <__sfp_lock_release>
 8009494:	230c      	movs	r3, #12
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	e7ee      	b.n	8009478 <__sfp+0x60>
 800949a:	bf00      	nop
 800949c:	0800ca68 	.word	0x0800ca68
 80094a0:	ffff0001 	.word	0xffff0001

080094a4 <_fwalk_reent>:
 80094a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a8:	4606      	mov	r6, r0
 80094aa:	4688      	mov	r8, r1
 80094ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094b0:	2700      	movs	r7, #0
 80094b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094b6:	f1b9 0901 	subs.w	r9, r9, #1
 80094ba:	d505      	bpl.n	80094c8 <_fwalk_reent+0x24>
 80094bc:	6824      	ldr	r4, [r4, #0]
 80094be:	2c00      	cmp	r4, #0
 80094c0:	d1f7      	bne.n	80094b2 <_fwalk_reent+0xe>
 80094c2:	4638      	mov	r0, r7
 80094c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c8:	89ab      	ldrh	r3, [r5, #12]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d907      	bls.n	80094de <_fwalk_reent+0x3a>
 80094ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094d2:	3301      	adds	r3, #1
 80094d4:	d003      	beq.n	80094de <_fwalk_reent+0x3a>
 80094d6:	4629      	mov	r1, r5
 80094d8:	4630      	mov	r0, r6
 80094da:	47c0      	blx	r8
 80094dc:	4307      	orrs	r7, r0
 80094de:	3568      	adds	r5, #104	; 0x68
 80094e0:	e7e9      	b.n	80094b6 <_fwalk_reent+0x12>
	...

080094e4 <__libc_init_array>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	4d0d      	ldr	r5, [pc, #52]	; (800951c <__libc_init_array+0x38>)
 80094e8:	4c0d      	ldr	r4, [pc, #52]	; (8009520 <__libc_init_array+0x3c>)
 80094ea:	1b64      	subs	r4, r4, r5
 80094ec:	10a4      	asrs	r4, r4, #2
 80094ee:	2600      	movs	r6, #0
 80094f0:	42a6      	cmp	r6, r4
 80094f2:	d109      	bne.n	8009508 <__libc_init_array+0x24>
 80094f4:	4d0b      	ldr	r5, [pc, #44]	; (8009524 <__libc_init_array+0x40>)
 80094f6:	4c0c      	ldr	r4, [pc, #48]	; (8009528 <__libc_init_array+0x44>)
 80094f8:	f002 fe76 	bl	800c1e8 <_init>
 80094fc:	1b64      	subs	r4, r4, r5
 80094fe:	10a4      	asrs	r4, r4, #2
 8009500:	2600      	movs	r6, #0
 8009502:	42a6      	cmp	r6, r4
 8009504:	d105      	bne.n	8009512 <__libc_init_array+0x2e>
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	f855 3b04 	ldr.w	r3, [r5], #4
 800950c:	4798      	blx	r3
 800950e:	3601      	adds	r6, #1
 8009510:	e7ee      	b.n	80094f0 <__libc_init_array+0xc>
 8009512:	f855 3b04 	ldr.w	r3, [r5], #4
 8009516:	4798      	blx	r3
 8009518:	3601      	adds	r6, #1
 800951a:	e7f2      	b.n	8009502 <__libc_init_array+0x1e>
 800951c:	0800cdec 	.word	0x0800cdec
 8009520:	0800cdec 	.word	0x0800cdec
 8009524:	0800cdec 	.word	0x0800cdec
 8009528:	0800cdf0 	.word	0x0800cdf0

0800952c <__retarget_lock_init_recursive>:
 800952c:	4770      	bx	lr

0800952e <__retarget_lock_acquire_recursive>:
 800952e:	4770      	bx	lr

08009530 <__retarget_lock_release_recursive>:
 8009530:	4770      	bx	lr

08009532 <memcpy>:
 8009532:	440a      	add	r2, r1
 8009534:	4291      	cmp	r1, r2
 8009536:	f100 33ff 	add.w	r3, r0, #4294967295
 800953a:	d100      	bne.n	800953e <memcpy+0xc>
 800953c:	4770      	bx	lr
 800953e:	b510      	push	{r4, lr}
 8009540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009548:	4291      	cmp	r1, r2
 800954a:	d1f9      	bne.n	8009540 <memcpy+0xe>
 800954c:	bd10      	pop	{r4, pc}

0800954e <memmove>:
 800954e:	4288      	cmp	r0, r1
 8009550:	b510      	push	{r4, lr}
 8009552:	eb01 0402 	add.w	r4, r1, r2
 8009556:	d902      	bls.n	800955e <memmove+0x10>
 8009558:	4284      	cmp	r4, r0
 800955a:	4623      	mov	r3, r4
 800955c:	d807      	bhi.n	800956e <memmove+0x20>
 800955e:	1e43      	subs	r3, r0, #1
 8009560:	42a1      	cmp	r1, r4
 8009562:	d008      	beq.n	8009576 <memmove+0x28>
 8009564:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009568:	f803 2f01 	strb.w	r2, [r3, #1]!
 800956c:	e7f8      	b.n	8009560 <memmove+0x12>
 800956e:	4402      	add	r2, r0
 8009570:	4601      	mov	r1, r0
 8009572:	428a      	cmp	r2, r1
 8009574:	d100      	bne.n	8009578 <memmove+0x2a>
 8009576:	bd10      	pop	{r4, pc}
 8009578:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800957c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009580:	e7f7      	b.n	8009572 <memmove+0x24>

08009582 <memset>:
 8009582:	4402      	add	r2, r0
 8009584:	4603      	mov	r3, r0
 8009586:	4293      	cmp	r3, r2
 8009588:	d100      	bne.n	800958c <memset+0xa>
 800958a:	4770      	bx	lr
 800958c:	f803 1b01 	strb.w	r1, [r3], #1
 8009590:	e7f9      	b.n	8009586 <memset+0x4>
	...

08009594 <sbrk_aligned>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	4e0e      	ldr	r6, [pc, #56]	; (80095d0 <sbrk_aligned+0x3c>)
 8009598:	460c      	mov	r4, r1
 800959a:	6831      	ldr	r1, [r6, #0]
 800959c:	4605      	mov	r5, r0
 800959e:	b911      	cbnz	r1, 80095a6 <sbrk_aligned+0x12>
 80095a0:	f000 fd60 	bl	800a064 <_sbrk_r>
 80095a4:	6030      	str	r0, [r6, #0]
 80095a6:	4621      	mov	r1, r4
 80095a8:	4628      	mov	r0, r5
 80095aa:	f000 fd5b 	bl	800a064 <_sbrk_r>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d00a      	beq.n	80095c8 <sbrk_aligned+0x34>
 80095b2:	1cc4      	adds	r4, r0, #3
 80095b4:	f024 0403 	bic.w	r4, r4, #3
 80095b8:	42a0      	cmp	r0, r4
 80095ba:	d007      	beq.n	80095cc <sbrk_aligned+0x38>
 80095bc:	1a21      	subs	r1, r4, r0
 80095be:	4628      	mov	r0, r5
 80095c0:	f000 fd50 	bl	800a064 <_sbrk_r>
 80095c4:	3001      	adds	r0, #1
 80095c6:	d101      	bne.n	80095cc <sbrk_aligned+0x38>
 80095c8:	f04f 34ff 	mov.w	r4, #4294967295
 80095cc:	4620      	mov	r0, r4
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	20004d70 	.word	0x20004d70

080095d4 <_malloc_r>:
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	1ccd      	adds	r5, r1, #3
 80095da:	f025 0503 	bic.w	r5, r5, #3
 80095de:	3508      	adds	r5, #8
 80095e0:	2d0c      	cmp	r5, #12
 80095e2:	bf38      	it	cc
 80095e4:	250c      	movcc	r5, #12
 80095e6:	2d00      	cmp	r5, #0
 80095e8:	4607      	mov	r7, r0
 80095ea:	db01      	blt.n	80095f0 <_malloc_r+0x1c>
 80095ec:	42a9      	cmp	r1, r5
 80095ee:	d905      	bls.n	80095fc <_malloc_r+0x28>
 80095f0:	230c      	movs	r3, #12
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	2600      	movs	r6, #0
 80095f6:	4630      	mov	r0, r6
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095fc:	4e2e      	ldr	r6, [pc, #184]	; (80096b8 <_malloc_r+0xe4>)
 80095fe:	f001 fd21 	bl	800b044 <__malloc_lock>
 8009602:	6833      	ldr	r3, [r6, #0]
 8009604:	461c      	mov	r4, r3
 8009606:	bb34      	cbnz	r4, 8009656 <_malloc_r+0x82>
 8009608:	4629      	mov	r1, r5
 800960a:	4638      	mov	r0, r7
 800960c:	f7ff ffc2 	bl	8009594 <sbrk_aligned>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	4604      	mov	r4, r0
 8009614:	d14d      	bne.n	80096b2 <_malloc_r+0xde>
 8009616:	6834      	ldr	r4, [r6, #0]
 8009618:	4626      	mov	r6, r4
 800961a:	2e00      	cmp	r6, #0
 800961c:	d140      	bne.n	80096a0 <_malloc_r+0xcc>
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	4631      	mov	r1, r6
 8009622:	4638      	mov	r0, r7
 8009624:	eb04 0803 	add.w	r8, r4, r3
 8009628:	f000 fd1c 	bl	800a064 <_sbrk_r>
 800962c:	4580      	cmp	r8, r0
 800962e:	d13a      	bne.n	80096a6 <_malloc_r+0xd2>
 8009630:	6821      	ldr	r1, [r4, #0]
 8009632:	3503      	adds	r5, #3
 8009634:	1a6d      	subs	r5, r5, r1
 8009636:	f025 0503 	bic.w	r5, r5, #3
 800963a:	3508      	adds	r5, #8
 800963c:	2d0c      	cmp	r5, #12
 800963e:	bf38      	it	cc
 8009640:	250c      	movcc	r5, #12
 8009642:	4629      	mov	r1, r5
 8009644:	4638      	mov	r0, r7
 8009646:	f7ff ffa5 	bl	8009594 <sbrk_aligned>
 800964a:	3001      	adds	r0, #1
 800964c:	d02b      	beq.n	80096a6 <_malloc_r+0xd2>
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	442b      	add	r3, r5
 8009652:	6023      	str	r3, [r4, #0]
 8009654:	e00e      	b.n	8009674 <_malloc_r+0xa0>
 8009656:	6822      	ldr	r2, [r4, #0]
 8009658:	1b52      	subs	r2, r2, r5
 800965a:	d41e      	bmi.n	800969a <_malloc_r+0xc6>
 800965c:	2a0b      	cmp	r2, #11
 800965e:	d916      	bls.n	800968e <_malloc_r+0xba>
 8009660:	1961      	adds	r1, r4, r5
 8009662:	42a3      	cmp	r3, r4
 8009664:	6025      	str	r5, [r4, #0]
 8009666:	bf18      	it	ne
 8009668:	6059      	strne	r1, [r3, #4]
 800966a:	6863      	ldr	r3, [r4, #4]
 800966c:	bf08      	it	eq
 800966e:	6031      	streq	r1, [r6, #0]
 8009670:	5162      	str	r2, [r4, r5]
 8009672:	604b      	str	r3, [r1, #4]
 8009674:	4638      	mov	r0, r7
 8009676:	f104 060b 	add.w	r6, r4, #11
 800967a:	f001 fce9 	bl	800b050 <__malloc_unlock>
 800967e:	f026 0607 	bic.w	r6, r6, #7
 8009682:	1d23      	adds	r3, r4, #4
 8009684:	1af2      	subs	r2, r6, r3
 8009686:	d0b6      	beq.n	80095f6 <_malloc_r+0x22>
 8009688:	1b9b      	subs	r3, r3, r6
 800968a:	50a3      	str	r3, [r4, r2]
 800968c:	e7b3      	b.n	80095f6 <_malloc_r+0x22>
 800968e:	6862      	ldr	r2, [r4, #4]
 8009690:	42a3      	cmp	r3, r4
 8009692:	bf0c      	ite	eq
 8009694:	6032      	streq	r2, [r6, #0]
 8009696:	605a      	strne	r2, [r3, #4]
 8009698:	e7ec      	b.n	8009674 <_malloc_r+0xa0>
 800969a:	4623      	mov	r3, r4
 800969c:	6864      	ldr	r4, [r4, #4]
 800969e:	e7b2      	b.n	8009606 <_malloc_r+0x32>
 80096a0:	4634      	mov	r4, r6
 80096a2:	6876      	ldr	r6, [r6, #4]
 80096a4:	e7b9      	b.n	800961a <_malloc_r+0x46>
 80096a6:	230c      	movs	r3, #12
 80096a8:	603b      	str	r3, [r7, #0]
 80096aa:	4638      	mov	r0, r7
 80096ac:	f001 fcd0 	bl	800b050 <__malloc_unlock>
 80096b0:	e7a1      	b.n	80095f6 <_malloc_r+0x22>
 80096b2:	6025      	str	r5, [r4, #0]
 80096b4:	e7de      	b.n	8009674 <_malloc_r+0xa0>
 80096b6:	bf00      	nop
 80096b8:	20004d6c 	.word	0x20004d6c

080096bc <__cvt>:
 80096bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	ec55 4b10 	vmov	r4, r5, d0
 80096c4:	2d00      	cmp	r5, #0
 80096c6:	460e      	mov	r6, r1
 80096c8:	4619      	mov	r1, r3
 80096ca:	462b      	mov	r3, r5
 80096cc:	bfbb      	ittet	lt
 80096ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096d2:	461d      	movlt	r5, r3
 80096d4:	2300      	movge	r3, #0
 80096d6:	232d      	movlt	r3, #45	; 0x2d
 80096d8:	700b      	strb	r3, [r1, #0]
 80096da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096e0:	4691      	mov	r9, r2
 80096e2:	f023 0820 	bic.w	r8, r3, #32
 80096e6:	bfbc      	itt	lt
 80096e8:	4622      	movlt	r2, r4
 80096ea:	4614      	movlt	r4, r2
 80096ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096f0:	d005      	beq.n	80096fe <__cvt+0x42>
 80096f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096f6:	d100      	bne.n	80096fa <__cvt+0x3e>
 80096f8:	3601      	adds	r6, #1
 80096fa:	2102      	movs	r1, #2
 80096fc:	e000      	b.n	8009700 <__cvt+0x44>
 80096fe:	2103      	movs	r1, #3
 8009700:	ab03      	add	r3, sp, #12
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	ab02      	add	r3, sp, #8
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	ec45 4b10 	vmov	d0, r4, r5
 800970c:	4653      	mov	r3, sl
 800970e:	4632      	mov	r2, r6
 8009710:	f000 fdca 	bl	800a2a8 <_dtoa_r>
 8009714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009718:	4607      	mov	r7, r0
 800971a:	d102      	bne.n	8009722 <__cvt+0x66>
 800971c:	f019 0f01 	tst.w	r9, #1
 8009720:	d022      	beq.n	8009768 <__cvt+0xac>
 8009722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009726:	eb07 0906 	add.w	r9, r7, r6
 800972a:	d110      	bne.n	800974e <__cvt+0x92>
 800972c:	783b      	ldrb	r3, [r7, #0]
 800972e:	2b30      	cmp	r3, #48	; 0x30
 8009730:	d10a      	bne.n	8009748 <__cvt+0x8c>
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	f7f7 f9cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800973e:	b918      	cbnz	r0, 8009748 <__cvt+0x8c>
 8009740:	f1c6 0601 	rsb	r6, r6, #1
 8009744:	f8ca 6000 	str.w	r6, [sl]
 8009748:	f8da 3000 	ldr.w	r3, [sl]
 800974c:	4499      	add	r9, r3
 800974e:	2200      	movs	r2, #0
 8009750:	2300      	movs	r3, #0
 8009752:	4620      	mov	r0, r4
 8009754:	4629      	mov	r1, r5
 8009756:	f7f7 f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800975a:	b108      	cbz	r0, 8009760 <__cvt+0xa4>
 800975c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009760:	2230      	movs	r2, #48	; 0x30
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	454b      	cmp	r3, r9
 8009766:	d307      	bcc.n	8009778 <__cvt+0xbc>
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800976c:	1bdb      	subs	r3, r3, r7
 800976e:	4638      	mov	r0, r7
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	b004      	add	sp, #16
 8009774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009778:	1c59      	adds	r1, r3, #1
 800977a:	9103      	str	r1, [sp, #12]
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	e7f0      	b.n	8009762 <__cvt+0xa6>

08009780 <__exponent>:
 8009780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009782:	4603      	mov	r3, r0
 8009784:	2900      	cmp	r1, #0
 8009786:	bfb8      	it	lt
 8009788:	4249      	neglt	r1, r1
 800978a:	f803 2b02 	strb.w	r2, [r3], #2
 800978e:	bfb4      	ite	lt
 8009790:	222d      	movlt	r2, #45	; 0x2d
 8009792:	222b      	movge	r2, #43	; 0x2b
 8009794:	2909      	cmp	r1, #9
 8009796:	7042      	strb	r2, [r0, #1]
 8009798:	dd2a      	ble.n	80097f0 <__exponent+0x70>
 800979a:	f10d 0407 	add.w	r4, sp, #7
 800979e:	46a4      	mov	ip, r4
 80097a0:	270a      	movs	r7, #10
 80097a2:	46a6      	mov	lr, r4
 80097a4:	460a      	mov	r2, r1
 80097a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80097aa:	fb07 1516 	mls	r5, r7, r6, r1
 80097ae:	3530      	adds	r5, #48	; 0x30
 80097b0:	2a63      	cmp	r2, #99	; 0x63
 80097b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80097b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80097ba:	4631      	mov	r1, r6
 80097bc:	dcf1      	bgt.n	80097a2 <__exponent+0x22>
 80097be:	3130      	adds	r1, #48	; 0x30
 80097c0:	f1ae 0502 	sub.w	r5, lr, #2
 80097c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097c8:	1c44      	adds	r4, r0, #1
 80097ca:	4629      	mov	r1, r5
 80097cc:	4561      	cmp	r1, ip
 80097ce:	d30a      	bcc.n	80097e6 <__exponent+0x66>
 80097d0:	f10d 0209 	add.w	r2, sp, #9
 80097d4:	eba2 020e 	sub.w	r2, r2, lr
 80097d8:	4565      	cmp	r5, ip
 80097da:	bf88      	it	hi
 80097dc:	2200      	movhi	r2, #0
 80097de:	4413      	add	r3, r2
 80097e0:	1a18      	subs	r0, r3, r0
 80097e2:	b003      	add	sp, #12
 80097e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80097ee:	e7ed      	b.n	80097cc <__exponent+0x4c>
 80097f0:	2330      	movs	r3, #48	; 0x30
 80097f2:	3130      	adds	r1, #48	; 0x30
 80097f4:	7083      	strb	r3, [r0, #2]
 80097f6:	70c1      	strb	r1, [r0, #3]
 80097f8:	1d03      	adds	r3, r0, #4
 80097fa:	e7f1      	b.n	80097e0 <__exponent+0x60>

080097fc <_printf_float>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	ed2d 8b02 	vpush	{d8}
 8009804:	b08d      	sub	sp, #52	; 0x34
 8009806:	460c      	mov	r4, r1
 8009808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800980c:	4616      	mov	r6, r2
 800980e:	461f      	mov	r7, r3
 8009810:	4605      	mov	r5, r0
 8009812:	f001 fbf9 	bl	800b008 <_localeconv_r>
 8009816:	f8d0 a000 	ldr.w	sl, [r0]
 800981a:	4650      	mov	r0, sl
 800981c:	f7f6 fce0 	bl	80001e0 <strlen>
 8009820:	2300      	movs	r3, #0
 8009822:	930a      	str	r3, [sp, #40]	; 0x28
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	f8d8 3000 	ldr.w	r3, [r8]
 800982c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009830:	3307      	adds	r3, #7
 8009832:	f023 0307 	bic.w	r3, r3, #7
 8009836:	f103 0208 	add.w	r2, r3, #8
 800983a:	f8c8 2000 	str.w	r2, [r8]
 800983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009842:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009846:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800984a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800984e:	9307      	str	r3, [sp, #28]
 8009850:	f8cd 8018 	str.w	r8, [sp, #24]
 8009854:	ee08 0a10 	vmov	s16, r0
 8009858:	4b9f      	ldr	r3, [pc, #636]	; (8009ad8 <_printf_float+0x2dc>)
 800985a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800985e:	f04f 32ff 	mov.w	r2, #4294967295
 8009862:	f7f7 f96b 	bl	8000b3c <__aeabi_dcmpun>
 8009866:	bb88      	cbnz	r0, 80098cc <_printf_float+0xd0>
 8009868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800986c:	4b9a      	ldr	r3, [pc, #616]	; (8009ad8 <_printf_float+0x2dc>)
 800986e:	f04f 32ff 	mov.w	r2, #4294967295
 8009872:	f7f7 f945 	bl	8000b00 <__aeabi_dcmple>
 8009876:	bb48      	cbnz	r0, 80098cc <_printf_float+0xd0>
 8009878:	2200      	movs	r2, #0
 800987a:	2300      	movs	r3, #0
 800987c:	4640      	mov	r0, r8
 800987e:	4649      	mov	r1, r9
 8009880:	f7f7 f934 	bl	8000aec <__aeabi_dcmplt>
 8009884:	b110      	cbz	r0, 800988c <_printf_float+0x90>
 8009886:	232d      	movs	r3, #45	; 0x2d
 8009888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800988c:	4b93      	ldr	r3, [pc, #588]	; (8009adc <_printf_float+0x2e0>)
 800988e:	4894      	ldr	r0, [pc, #592]	; (8009ae0 <_printf_float+0x2e4>)
 8009890:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009894:	bf94      	ite	ls
 8009896:	4698      	movls	r8, r3
 8009898:	4680      	movhi	r8, r0
 800989a:	2303      	movs	r3, #3
 800989c:	6123      	str	r3, [r4, #16]
 800989e:	9b05      	ldr	r3, [sp, #20]
 80098a0:	f023 0204 	bic.w	r2, r3, #4
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	f04f 0900 	mov.w	r9, #0
 80098aa:	9700      	str	r7, [sp, #0]
 80098ac:	4633      	mov	r3, r6
 80098ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80098b0:	4621      	mov	r1, r4
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 f9d8 	bl	8009c68 <_printf_common>
 80098b8:	3001      	adds	r0, #1
 80098ba:	f040 8090 	bne.w	80099de <_printf_float+0x1e2>
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	b00d      	add	sp, #52	; 0x34
 80098c4:	ecbd 8b02 	vpop	{d8}
 80098c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098cc:	4642      	mov	r2, r8
 80098ce:	464b      	mov	r3, r9
 80098d0:	4640      	mov	r0, r8
 80098d2:	4649      	mov	r1, r9
 80098d4:	f7f7 f932 	bl	8000b3c <__aeabi_dcmpun>
 80098d8:	b140      	cbz	r0, 80098ec <_printf_float+0xf0>
 80098da:	464b      	mov	r3, r9
 80098dc:	2b00      	cmp	r3, #0
 80098de:	bfbc      	itt	lt
 80098e0:	232d      	movlt	r3, #45	; 0x2d
 80098e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098e6:	487f      	ldr	r0, [pc, #508]	; (8009ae4 <_printf_float+0x2e8>)
 80098e8:	4b7f      	ldr	r3, [pc, #508]	; (8009ae8 <_printf_float+0x2ec>)
 80098ea:	e7d1      	b.n	8009890 <_printf_float+0x94>
 80098ec:	6863      	ldr	r3, [r4, #4]
 80098ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098f2:	9206      	str	r2, [sp, #24]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	d13f      	bne.n	8009978 <_printf_float+0x17c>
 80098f8:	2306      	movs	r3, #6
 80098fa:	6063      	str	r3, [r4, #4]
 80098fc:	9b05      	ldr	r3, [sp, #20]
 80098fe:	6861      	ldr	r1, [r4, #4]
 8009900:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009904:	2300      	movs	r3, #0
 8009906:	9303      	str	r3, [sp, #12]
 8009908:	ab0a      	add	r3, sp, #40	; 0x28
 800990a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800990e:	ab09      	add	r3, sp, #36	; 0x24
 8009910:	ec49 8b10 	vmov	d0, r8, r9
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	6022      	str	r2, [r4, #0]
 8009918:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800991c:	4628      	mov	r0, r5
 800991e:	f7ff fecd 	bl	80096bc <__cvt>
 8009922:	9b06      	ldr	r3, [sp, #24]
 8009924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009926:	2b47      	cmp	r3, #71	; 0x47
 8009928:	4680      	mov	r8, r0
 800992a:	d108      	bne.n	800993e <_printf_float+0x142>
 800992c:	1cc8      	adds	r0, r1, #3
 800992e:	db02      	blt.n	8009936 <_printf_float+0x13a>
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	4299      	cmp	r1, r3
 8009934:	dd41      	ble.n	80099ba <_printf_float+0x1be>
 8009936:	f1ab 0b02 	sub.w	fp, fp, #2
 800993a:	fa5f fb8b 	uxtb.w	fp, fp
 800993e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009942:	d820      	bhi.n	8009986 <_printf_float+0x18a>
 8009944:	3901      	subs	r1, #1
 8009946:	465a      	mov	r2, fp
 8009948:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800994c:	9109      	str	r1, [sp, #36]	; 0x24
 800994e:	f7ff ff17 	bl	8009780 <__exponent>
 8009952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009954:	1813      	adds	r3, r2, r0
 8009956:	2a01      	cmp	r2, #1
 8009958:	4681      	mov	r9, r0
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	dc02      	bgt.n	8009964 <_printf_float+0x168>
 800995e:	6822      	ldr	r2, [r4, #0]
 8009960:	07d2      	lsls	r2, r2, #31
 8009962:	d501      	bpl.n	8009968 <_printf_float+0x16c>
 8009964:	3301      	adds	r3, #1
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800996c:	2b00      	cmp	r3, #0
 800996e:	d09c      	beq.n	80098aa <_printf_float+0xae>
 8009970:	232d      	movs	r3, #45	; 0x2d
 8009972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009976:	e798      	b.n	80098aa <_printf_float+0xae>
 8009978:	9a06      	ldr	r2, [sp, #24]
 800997a:	2a47      	cmp	r2, #71	; 0x47
 800997c:	d1be      	bne.n	80098fc <_printf_float+0x100>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1bc      	bne.n	80098fc <_printf_float+0x100>
 8009982:	2301      	movs	r3, #1
 8009984:	e7b9      	b.n	80098fa <_printf_float+0xfe>
 8009986:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800998a:	d118      	bne.n	80099be <_printf_float+0x1c2>
 800998c:	2900      	cmp	r1, #0
 800998e:	6863      	ldr	r3, [r4, #4]
 8009990:	dd0b      	ble.n	80099aa <_printf_float+0x1ae>
 8009992:	6121      	str	r1, [r4, #16]
 8009994:	b913      	cbnz	r3, 800999c <_printf_float+0x1a0>
 8009996:	6822      	ldr	r2, [r4, #0]
 8009998:	07d0      	lsls	r0, r2, #31
 800999a:	d502      	bpl.n	80099a2 <_printf_float+0x1a6>
 800999c:	3301      	adds	r3, #1
 800999e:	440b      	add	r3, r1
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80099a4:	f04f 0900 	mov.w	r9, #0
 80099a8:	e7de      	b.n	8009968 <_printf_float+0x16c>
 80099aa:	b913      	cbnz	r3, 80099b2 <_printf_float+0x1b6>
 80099ac:	6822      	ldr	r2, [r4, #0]
 80099ae:	07d2      	lsls	r2, r2, #31
 80099b0:	d501      	bpl.n	80099b6 <_printf_float+0x1ba>
 80099b2:	3302      	adds	r3, #2
 80099b4:	e7f4      	b.n	80099a0 <_printf_float+0x1a4>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e7f2      	b.n	80099a0 <_printf_float+0x1a4>
 80099ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80099be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c0:	4299      	cmp	r1, r3
 80099c2:	db05      	blt.n	80099d0 <_printf_float+0x1d4>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	6121      	str	r1, [r4, #16]
 80099c8:	07d8      	lsls	r0, r3, #31
 80099ca:	d5ea      	bpl.n	80099a2 <_printf_float+0x1a6>
 80099cc:	1c4b      	adds	r3, r1, #1
 80099ce:	e7e7      	b.n	80099a0 <_printf_float+0x1a4>
 80099d0:	2900      	cmp	r1, #0
 80099d2:	bfd4      	ite	le
 80099d4:	f1c1 0202 	rsble	r2, r1, #2
 80099d8:	2201      	movgt	r2, #1
 80099da:	4413      	add	r3, r2
 80099dc:	e7e0      	b.n	80099a0 <_printf_float+0x1a4>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	055a      	lsls	r2, r3, #21
 80099e2:	d407      	bmi.n	80099f4 <_printf_float+0x1f8>
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	4642      	mov	r2, r8
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	d12c      	bne.n	8009a4c <_printf_float+0x250>
 80099f2:	e764      	b.n	80098be <_printf_float+0xc2>
 80099f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099f8:	f240 80e0 	bls.w	8009bbc <_printf_float+0x3c0>
 80099fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a00:	2200      	movs	r2, #0
 8009a02:	2300      	movs	r3, #0
 8009a04:	f7f7 f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d034      	beq.n	8009a76 <_printf_float+0x27a>
 8009a0c:	4a37      	ldr	r2, [pc, #220]	; (8009aec <_printf_float+0x2f0>)
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4631      	mov	r1, r6
 8009a12:	4628      	mov	r0, r5
 8009a14:	47b8      	blx	r7
 8009a16:	3001      	adds	r0, #1
 8009a18:	f43f af51 	beq.w	80098be <_printf_float+0xc2>
 8009a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a20:	429a      	cmp	r2, r3
 8009a22:	db02      	blt.n	8009a2a <_printf_float+0x22e>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	07d8      	lsls	r0, r3, #31
 8009a28:	d510      	bpl.n	8009a4c <_printf_float+0x250>
 8009a2a:	ee18 3a10 	vmov	r3, s16
 8009a2e:	4652      	mov	r2, sl
 8009a30:	4631      	mov	r1, r6
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b8      	blx	r7
 8009a36:	3001      	adds	r0, #1
 8009a38:	f43f af41 	beq.w	80098be <_printf_float+0xc2>
 8009a3c:	f04f 0800 	mov.w	r8, #0
 8009a40:	f104 091a 	add.w	r9, r4, #26
 8009a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a46:	3b01      	subs	r3, #1
 8009a48:	4543      	cmp	r3, r8
 8009a4a:	dc09      	bgt.n	8009a60 <_printf_float+0x264>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	079b      	lsls	r3, r3, #30
 8009a50:	f100 8105 	bmi.w	8009c5e <_printf_float+0x462>
 8009a54:	68e0      	ldr	r0, [r4, #12]
 8009a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a58:	4298      	cmp	r0, r3
 8009a5a:	bfb8      	it	lt
 8009a5c:	4618      	movlt	r0, r3
 8009a5e:	e730      	b.n	80098c2 <_printf_float+0xc6>
 8009a60:	2301      	movs	r3, #1
 8009a62:	464a      	mov	r2, r9
 8009a64:	4631      	mov	r1, r6
 8009a66:	4628      	mov	r0, r5
 8009a68:	47b8      	blx	r7
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	f43f af27 	beq.w	80098be <_printf_float+0xc2>
 8009a70:	f108 0801 	add.w	r8, r8, #1
 8009a74:	e7e6      	b.n	8009a44 <_printf_float+0x248>
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	dc39      	bgt.n	8009af0 <_printf_float+0x2f4>
 8009a7c:	4a1b      	ldr	r2, [pc, #108]	; (8009aec <_printf_float+0x2f0>)
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4631      	mov	r1, r6
 8009a82:	4628      	mov	r0, r5
 8009a84:	47b8      	blx	r7
 8009a86:	3001      	adds	r0, #1
 8009a88:	f43f af19 	beq.w	80098be <_printf_float+0xc2>
 8009a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a90:	4313      	orrs	r3, r2
 8009a92:	d102      	bne.n	8009a9a <_printf_float+0x29e>
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	07d9      	lsls	r1, r3, #31
 8009a98:	d5d8      	bpl.n	8009a4c <_printf_float+0x250>
 8009a9a:	ee18 3a10 	vmov	r3, s16
 8009a9e:	4652      	mov	r2, sl
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	47b8      	blx	r7
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	f43f af09 	beq.w	80098be <_printf_float+0xc2>
 8009aac:	f04f 0900 	mov.w	r9, #0
 8009ab0:	f104 0a1a 	add.w	sl, r4, #26
 8009ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab6:	425b      	negs	r3, r3
 8009ab8:	454b      	cmp	r3, r9
 8009aba:	dc01      	bgt.n	8009ac0 <_printf_float+0x2c4>
 8009abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009abe:	e792      	b.n	80099e6 <_printf_float+0x1ea>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	4652      	mov	r2, sl
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	47b8      	blx	r7
 8009aca:	3001      	adds	r0, #1
 8009acc:	f43f aef7 	beq.w	80098be <_printf_float+0xc2>
 8009ad0:	f109 0901 	add.w	r9, r9, #1
 8009ad4:	e7ee      	b.n	8009ab4 <_printf_float+0x2b8>
 8009ad6:	bf00      	nop
 8009ad8:	7fefffff 	.word	0x7fefffff
 8009adc:	0800ca6c 	.word	0x0800ca6c
 8009ae0:	0800ca70 	.word	0x0800ca70
 8009ae4:	0800ca78 	.word	0x0800ca78
 8009ae8:	0800ca74 	.word	0x0800ca74
 8009aec:	0800ca7c 	.word	0x0800ca7c
 8009af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009af4:	429a      	cmp	r2, r3
 8009af6:	bfa8      	it	ge
 8009af8:	461a      	movge	r2, r3
 8009afa:	2a00      	cmp	r2, #0
 8009afc:	4691      	mov	r9, r2
 8009afe:	dc37      	bgt.n	8009b70 <_printf_float+0x374>
 8009b00:	f04f 0b00 	mov.w	fp, #0
 8009b04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b08:	f104 021a 	add.w	r2, r4, #26
 8009b0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b0e:	9305      	str	r3, [sp, #20]
 8009b10:	eba3 0309 	sub.w	r3, r3, r9
 8009b14:	455b      	cmp	r3, fp
 8009b16:	dc33      	bgt.n	8009b80 <_printf_float+0x384>
 8009b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	db3b      	blt.n	8009b98 <_printf_float+0x39c>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	07da      	lsls	r2, r3, #31
 8009b24:	d438      	bmi.n	8009b98 <_printf_float+0x39c>
 8009b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b28:	9a05      	ldr	r2, [sp, #20]
 8009b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b2c:	1a9a      	subs	r2, r3, r2
 8009b2e:	eba3 0901 	sub.w	r9, r3, r1
 8009b32:	4591      	cmp	r9, r2
 8009b34:	bfa8      	it	ge
 8009b36:	4691      	movge	r9, r2
 8009b38:	f1b9 0f00 	cmp.w	r9, #0
 8009b3c:	dc35      	bgt.n	8009baa <_printf_float+0x3ae>
 8009b3e:	f04f 0800 	mov.w	r8, #0
 8009b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b46:	f104 0a1a 	add.w	sl, r4, #26
 8009b4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b4e:	1a9b      	subs	r3, r3, r2
 8009b50:	eba3 0309 	sub.w	r3, r3, r9
 8009b54:	4543      	cmp	r3, r8
 8009b56:	f77f af79 	ble.w	8009a4c <_printf_float+0x250>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b8      	blx	r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	f43f aeaa 	beq.w	80098be <_printf_float+0xc2>
 8009b6a:	f108 0801 	add.w	r8, r8, #1
 8009b6e:	e7ec      	b.n	8009b4a <_printf_float+0x34e>
 8009b70:	4613      	mov	r3, r2
 8009b72:	4631      	mov	r1, r6
 8009b74:	4642      	mov	r2, r8
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	d1c0      	bne.n	8009b00 <_printf_float+0x304>
 8009b7e:	e69e      	b.n	80098be <_printf_float+0xc2>
 8009b80:	2301      	movs	r3, #1
 8009b82:	4631      	mov	r1, r6
 8009b84:	4628      	mov	r0, r5
 8009b86:	9205      	str	r2, [sp, #20]
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f ae97 	beq.w	80098be <_printf_float+0xc2>
 8009b90:	9a05      	ldr	r2, [sp, #20]
 8009b92:	f10b 0b01 	add.w	fp, fp, #1
 8009b96:	e7b9      	b.n	8009b0c <_printf_float+0x310>
 8009b98:	ee18 3a10 	vmov	r3, s16
 8009b9c:	4652      	mov	r2, sl
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b8      	blx	r7
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d1be      	bne.n	8009b26 <_printf_float+0x32a>
 8009ba8:	e689      	b.n	80098be <_printf_float+0xc2>
 8009baa:	9a05      	ldr	r2, [sp, #20]
 8009bac:	464b      	mov	r3, r9
 8009bae:	4442      	add	r2, r8
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d1c1      	bne.n	8009b3e <_printf_float+0x342>
 8009bba:	e680      	b.n	80098be <_printf_float+0xc2>
 8009bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bbe:	2a01      	cmp	r2, #1
 8009bc0:	dc01      	bgt.n	8009bc6 <_printf_float+0x3ca>
 8009bc2:	07db      	lsls	r3, r3, #31
 8009bc4:	d538      	bpl.n	8009c38 <_printf_float+0x43c>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4642      	mov	r2, r8
 8009bca:	4631      	mov	r1, r6
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b8      	blx	r7
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	f43f ae74 	beq.w	80098be <_printf_float+0xc2>
 8009bd6:	ee18 3a10 	vmov	r3, s16
 8009bda:	4652      	mov	r2, sl
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4628      	mov	r0, r5
 8009be0:	47b8      	blx	r7
 8009be2:	3001      	adds	r0, #1
 8009be4:	f43f ae6b 	beq.w	80098be <_printf_float+0xc2>
 8009be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bec:	2200      	movs	r2, #0
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f7f6 ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bf4:	b9d8      	cbnz	r0, 8009c2e <_printf_float+0x432>
 8009bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf8:	f108 0201 	add.w	r2, r8, #1
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b8      	blx	r7
 8009c04:	3001      	adds	r0, #1
 8009c06:	d10e      	bne.n	8009c26 <_printf_float+0x42a>
 8009c08:	e659      	b.n	80098be <_printf_float+0xc2>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	47b8      	blx	r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	f43f ae52 	beq.w	80098be <_printf_float+0xc2>
 8009c1a:	f108 0801 	add.w	r8, r8, #1
 8009c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c20:	3b01      	subs	r3, #1
 8009c22:	4543      	cmp	r3, r8
 8009c24:	dcf1      	bgt.n	8009c0a <_printf_float+0x40e>
 8009c26:	464b      	mov	r3, r9
 8009c28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c2c:	e6dc      	b.n	80099e8 <_printf_float+0x1ec>
 8009c2e:	f04f 0800 	mov.w	r8, #0
 8009c32:	f104 0a1a 	add.w	sl, r4, #26
 8009c36:	e7f2      	b.n	8009c1e <_printf_float+0x422>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4642      	mov	r2, r8
 8009c3c:	e7df      	b.n	8009bfe <_printf_float+0x402>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	464a      	mov	r2, r9
 8009c42:	4631      	mov	r1, r6
 8009c44:	4628      	mov	r0, r5
 8009c46:	47b8      	blx	r7
 8009c48:	3001      	adds	r0, #1
 8009c4a:	f43f ae38 	beq.w	80098be <_printf_float+0xc2>
 8009c4e:	f108 0801 	add.w	r8, r8, #1
 8009c52:	68e3      	ldr	r3, [r4, #12]
 8009c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c56:	1a5b      	subs	r3, r3, r1
 8009c58:	4543      	cmp	r3, r8
 8009c5a:	dcf0      	bgt.n	8009c3e <_printf_float+0x442>
 8009c5c:	e6fa      	b.n	8009a54 <_printf_float+0x258>
 8009c5e:	f04f 0800 	mov.w	r8, #0
 8009c62:	f104 0919 	add.w	r9, r4, #25
 8009c66:	e7f4      	b.n	8009c52 <_printf_float+0x456>

08009c68 <_printf_common>:
 8009c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c6c:	4616      	mov	r6, r2
 8009c6e:	4699      	mov	r9, r3
 8009c70:	688a      	ldr	r2, [r1, #8]
 8009c72:	690b      	ldr	r3, [r1, #16]
 8009c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	bfb8      	it	lt
 8009c7c:	4613      	movlt	r3, r2
 8009c7e:	6033      	str	r3, [r6, #0]
 8009c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c84:	4607      	mov	r7, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	b10a      	cbz	r2, 8009c8e <_printf_common+0x26>
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	6033      	str	r3, [r6, #0]
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	0699      	lsls	r1, r3, #26
 8009c92:	bf42      	ittt	mi
 8009c94:	6833      	ldrmi	r3, [r6, #0]
 8009c96:	3302      	addmi	r3, #2
 8009c98:	6033      	strmi	r3, [r6, #0]
 8009c9a:	6825      	ldr	r5, [r4, #0]
 8009c9c:	f015 0506 	ands.w	r5, r5, #6
 8009ca0:	d106      	bne.n	8009cb0 <_printf_common+0x48>
 8009ca2:	f104 0a19 	add.w	sl, r4, #25
 8009ca6:	68e3      	ldr	r3, [r4, #12]
 8009ca8:	6832      	ldr	r2, [r6, #0]
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	42ab      	cmp	r3, r5
 8009cae:	dc26      	bgt.n	8009cfe <_printf_common+0x96>
 8009cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009cb4:	1e13      	subs	r3, r2, #0
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	bf18      	it	ne
 8009cba:	2301      	movne	r3, #1
 8009cbc:	0692      	lsls	r2, r2, #26
 8009cbe:	d42b      	bmi.n	8009d18 <_printf_common+0xb0>
 8009cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	47c0      	blx	r8
 8009cca:	3001      	adds	r0, #1
 8009ccc:	d01e      	beq.n	8009d0c <_printf_common+0xa4>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	68e5      	ldr	r5, [r4, #12]
 8009cd2:	6832      	ldr	r2, [r6, #0]
 8009cd4:	f003 0306 	and.w	r3, r3, #6
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	bf08      	it	eq
 8009cdc:	1aad      	subeq	r5, r5, r2
 8009cde:	68a3      	ldr	r3, [r4, #8]
 8009ce0:	6922      	ldr	r2, [r4, #16]
 8009ce2:	bf0c      	ite	eq
 8009ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ce8:	2500      	movne	r5, #0
 8009cea:	4293      	cmp	r3, r2
 8009cec:	bfc4      	itt	gt
 8009cee:	1a9b      	subgt	r3, r3, r2
 8009cf0:	18ed      	addgt	r5, r5, r3
 8009cf2:	2600      	movs	r6, #0
 8009cf4:	341a      	adds	r4, #26
 8009cf6:	42b5      	cmp	r5, r6
 8009cf8:	d11a      	bne.n	8009d30 <_printf_common+0xc8>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e008      	b.n	8009d10 <_printf_common+0xa8>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4652      	mov	r2, sl
 8009d02:	4649      	mov	r1, r9
 8009d04:	4638      	mov	r0, r7
 8009d06:	47c0      	blx	r8
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d103      	bne.n	8009d14 <_printf_common+0xac>
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d14:	3501      	adds	r5, #1
 8009d16:	e7c6      	b.n	8009ca6 <_printf_common+0x3e>
 8009d18:	18e1      	adds	r1, r4, r3
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	2030      	movs	r0, #48	; 0x30
 8009d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d22:	4422      	add	r2, r4
 8009d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	e7c7      	b.n	8009cc0 <_printf_common+0x58>
 8009d30:	2301      	movs	r3, #1
 8009d32:	4622      	mov	r2, r4
 8009d34:	4649      	mov	r1, r9
 8009d36:	4638      	mov	r0, r7
 8009d38:	47c0      	blx	r8
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	d0e6      	beq.n	8009d0c <_printf_common+0xa4>
 8009d3e:	3601      	adds	r6, #1
 8009d40:	e7d9      	b.n	8009cf6 <_printf_common+0x8e>
	...

08009d44 <_printf_i>:
 8009d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d48:	7e0f      	ldrb	r7, [r1, #24]
 8009d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d4c:	2f78      	cmp	r7, #120	; 0x78
 8009d4e:	4691      	mov	r9, r2
 8009d50:	4680      	mov	r8, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	469a      	mov	sl, r3
 8009d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d5a:	d807      	bhi.n	8009d6c <_printf_i+0x28>
 8009d5c:	2f62      	cmp	r7, #98	; 0x62
 8009d5e:	d80a      	bhi.n	8009d76 <_printf_i+0x32>
 8009d60:	2f00      	cmp	r7, #0
 8009d62:	f000 80d8 	beq.w	8009f16 <_printf_i+0x1d2>
 8009d66:	2f58      	cmp	r7, #88	; 0x58
 8009d68:	f000 80a3 	beq.w	8009eb2 <_printf_i+0x16e>
 8009d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d74:	e03a      	b.n	8009dec <_printf_i+0xa8>
 8009d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d7a:	2b15      	cmp	r3, #21
 8009d7c:	d8f6      	bhi.n	8009d6c <_printf_i+0x28>
 8009d7e:	a101      	add	r1, pc, #4	; (adr r1, 8009d84 <_printf_i+0x40>)
 8009d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d84:	08009ddd 	.word	0x08009ddd
 8009d88:	08009df1 	.word	0x08009df1
 8009d8c:	08009d6d 	.word	0x08009d6d
 8009d90:	08009d6d 	.word	0x08009d6d
 8009d94:	08009d6d 	.word	0x08009d6d
 8009d98:	08009d6d 	.word	0x08009d6d
 8009d9c:	08009df1 	.word	0x08009df1
 8009da0:	08009d6d 	.word	0x08009d6d
 8009da4:	08009d6d 	.word	0x08009d6d
 8009da8:	08009d6d 	.word	0x08009d6d
 8009dac:	08009d6d 	.word	0x08009d6d
 8009db0:	08009efd 	.word	0x08009efd
 8009db4:	08009e21 	.word	0x08009e21
 8009db8:	08009edf 	.word	0x08009edf
 8009dbc:	08009d6d 	.word	0x08009d6d
 8009dc0:	08009d6d 	.word	0x08009d6d
 8009dc4:	08009f1f 	.word	0x08009f1f
 8009dc8:	08009d6d 	.word	0x08009d6d
 8009dcc:	08009e21 	.word	0x08009e21
 8009dd0:	08009d6d 	.word	0x08009d6d
 8009dd4:	08009d6d 	.word	0x08009d6d
 8009dd8:	08009ee7 	.word	0x08009ee7
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	1d1a      	adds	r2, r3, #4
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	602a      	str	r2, [r5, #0]
 8009de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dec:	2301      	movs	r3, #1
 8009dee:	e0a3      	b.n	8009f38 <_printf_i+0x1f4>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	6829      	ldr	r1, [r5, #0]
 8009df4:	0606      	lsls	r6, r0, #24
 8009df6:	f101 0304 	add.w	r3, r1, #4
 8009dfa:	d50a      	bpl.n	8009e12 <_printf_i+0xce>
 8009dfc:	680e      	ldr	r6, [r1, #0]
 8009dfe:	602b      	str	r3, [r5, #0]
 8009e00:	2e00      	cmp	r6, #0
 8009e02:	da03      	bge.n	8009e0c <_printf_i+0xc8>
 8009e04:	232d      	movs	r3, #45	; 0x2d
 8009e06:	4276      	negs	r6, r6
 8009e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e0c:	485e      	ldr	r0, [pc, #376]	; (8009f88 <_printf_i+0x244>)
 8009e0e:	230a      	movs	r3, #10
 8009e10:	e019      	b.n	8009e46 <_printf_i+0x102>
 8009e12:	680e      	ldr	r6, [r1, #0]
 8009e14:	602b      	str	r3, [r5, #0]
 8009e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e1a:	bf18      	it	ne
 8009e1c:	b236      	sxthne	r6, r6
 8009e1e:	e7ef      	b.n	8009e00 <_printf_i+0xbc>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	6820      	ldr	r0, [r4, #0]
 8009e24:	1d19      	adds	r1, r3, #4
 8009e26:	6029      	str	r1, [r5, #0]
 8009e28:	0601      	lsls	r1, r0, #24
 8009e2a:	d501      	bpl.n	8009e30 <_printf_i+0xec>
 8009e2c:	681e      	ldr	r6, [r3, #0]
 8009e2e:	e002      	b.n	8009e36 <_printf_i+0xf2>
 8009e30:	0646      	lsls	r6, r0, #25
 8009e32:	d5fb      	bpl.n	8009e2c <_printf_i+0xe8>
 8009e34:	881e      	ldrh	r6, [r3, #0]
 8009e36:	4854      	ldr	r0, [pc, #336]	; (8009f88 <_printf_i+0x244>)
 8009e38:	2f6f      	cmp	r7, #111	; 0x6f
 8009e3a:	bf0c      	ite	eq
 8009e3c:	2308      	moveq	r3, #8
 8009e3e:	230a      	movne	r3, #10
 8009e40:	2100      	movs	r1, #0
 8009e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e46:	6865      	ldr	r5, [r4, #4]
 8009e48:	60a5      	str	r5, [r4, #8]
 8009e4a:	2d00      	cmp	r5, #0
 8009e4c:	bfa2      	ittt	ge
 8009e4e:	6821      	ldrge	r1, [r4, #0]
 8009e50:	f021 0104 	bicge.w	r1, r1, #4
 8009e54:	6021      	strge	r1, [r4, #0]
 8009e56:	b90e      	cbnz	r6, 8009e5c <_printf_i+0x118>
 8009e58:	2d00      	cmp	r5, #0
 8009e5a:	d04d      	beq.n	8009ef8 <_printf_i+0x1b4>
 8009e5c:	4615      	mov	r5, r2
 8009e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e62:	fb03 6711 	mls	r7, r3, r1, r6
 8009e66:	5dc7      	ldrb	r7, [r0, r7]
 8009e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e6c:	4637      	mov	r7, r6
 8009e6e:	42bb      	cmp	r3, r7
 8009e70:	460e      	mov	r6, r1
 8009e72:	d9f4      	bls.n	8009e5e <_printf_i+0x11a>
 8009e74:	2b08      	cmp	r3, #8
 8009e76:	d10b      	bne.n	8009e90 <_printf_i+0x14c>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	07de      	lsls	r6, r3, #31
 8009e7c:	d508      	bpl.n	8009e90 <_printf_i+0x14c>
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	6861      	ldr	r1, [r4, #4]
 8009e82:	4299      	cmp	r1, r3
 8009e84:	bfde      	ittt	le
 8009e86:	2330      	movle	r3, #48	; 0x30
 8009e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e90:	1b52      	subs	r2, r2, r5
 8009e92:	6122      	str	r2, [r4, #16]
 8009e94:	f8cd a000 	str.w	sl, [sp]
 8009e98:	464b      	mov	r3, r9
 8009e9a:	aa03      	add	r2, sp, #12
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f7ff fee2 	bl	8009c68 <_printf_common>
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d14c      	bne.n	8009f42 <_printf_i+0x1fe>
 8009ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eac:	b004      	add	sp, #16
 8009eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb2:	4835      	ldr	r0, [pc, #212]	; (8009f88 <_printf_i+0x244>)
 8009eb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009eb8:	6829      	ldr	r1, [r5, #0]
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ec0:	6029      	str	r1, [r5, #0]
 8009ec2:	061d      	lsls	r5, r3, #24
 8009ec4:	d514      	bpl.n	8009ef0 <_printf_i+0x1ac>
 8009ec6:	07df      	lsls	r7, r3, #31
 8009ec8:	bf44      	itt	mi
 8009eca:	f043 0320 	orrmi.w	r3, r3, #32
 8009ece:	6023      	strmi	r3, [r4, #0]
 8009ed0:	b91e      	cbnz	r6, 8009eda <_printf_i+0x196>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	f023 0320 	bic.w	r3, r3, #32
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	2310      	movs	r3, #16
 8009edc:	e7b0      	b.n	8009e40 <_printf_i+0xfc>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	f043 0320 	orr.w	r3, r3, #32
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	2378      	movs	r3, #120	; 0x78
 8009ee8:	4828      	ldr	r0, [pc, #160]	; (8009f8c <_printf_i+0x248>)
 8009eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009eee:	e7e3      	b.n	8009eb8 <_printf_i+0x174>
 8009ef0:	0659      	lsls	r1, r3, #25
 8009ef2:	bf48      	it	mi
 8009ef4:	b2b6      	uxthmi	r6, r6
 8009ef6:	e7e6      	b.n	8009ec6 <_printf_i+0x182>
 8009ef8:	4615      	mov	r5, r2
 8009efa:	e7bb      	b.n	8009e74 <_printf_i+0x130>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	6826      	ldr	r6, [r4, #0]
 8009f00:	6961      	ldr	r1, [r4, #20]
 8009f02:	1d18      	adds	r0, r3, #4
 8009f04:	6028      	str	r0, [r5, #0]
 8009f06:	0635      	lsls	r5, r6, #24
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	d501      	bpl.n	8009f10 <_printf_i+0x1cc>
 8009f0c:	6019      	str	r1, [r3, #0]
 8009f0e:	e002      	b.n	8009f16 <_printf_i+0x1d2>
 8009f10:	0670      	lsls	r0, r6, #25
 8009f12:	d5fb      	bpl.n	8009f0c <_printf_i+0x1c8>
 8009f14:	8019      	strh	r1, [r3, #0]
 8009f16:	2300      	movs	r3, #0
 8009f18:	6123      	str	r3, [r4, #16]
 8009f1a:	4615      	mov	r5, r2
 8009f1c:	e7ba      	b.n	8009e94 <_printf_i+0x150>
 8009f1e:	682b      	ldr	r3, [r5, #0]
 8009f20:	1d1a      	adds	r2, r3, #4
 8009f22:	602a      	str	r2, [r5, #0]
 8009f24:	681d      	ldr	r5, [r3, #0]
 8009f26:	6862      	ldr	r2, [r4, #4]
 8009f28:	2100      	movs	r1, #0
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f7f6 f960 	bl	80001f0 <memchr>
 8009f30:	b108      	cbz	r0, 8009f36 <_printf_i+0x1f2>
 8009f32:	1b40      	subs	r0, r0, r5
 8009f34:	6060      	str	r0, [r4, #4]
 8009f36:	6863      	ldr	r3, [r4, #4]
 8009f38:	6123      	str	r3, [r4, #16]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f40:	e7a8      	b.n	8009e94 <_printf_i+0x150>
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	462a      	mov	r2, r5
 8009f46:	4649      	mov	r1, r9
 8009f48:	4640      	mov	r0, r8
 8009f4a:	47d0      	blx	sl
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d0ab      	beq.n	8009ea8 <_printf_i+0x164>
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	079b      	lsls	r3, r3, #30
 8009f54:	d413      	bmi.n	8009f7e <_printf_i+0x23a>
 8009f56:	68e0      	ldr	r0, [r4, #12]
 8009f58:	9b03      	ldr	r3, [sp, #12]
 8009f5a:	4298      	cmp	r0, r3
 8009f5c:	bfb8      	it	lt
 8009f5e:	4618      	movlt	r0, r3
 8009f60:	e7a4      	b.n	8009eac <_printf_i+0x168>
 8009f62:	2301      	movs	r3, #1
 8009f64:	4632      	mov	r2, r6
 8009f66:	4649      	mov	r1, r9
 8009f68:	4640      	mov	r0, r8
 8009f6a:	47d0      	blx	sl
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d09b      	beq.n	8009ea8 <_printf_i+0x164>
 8009f70:	3501      	adds	r5, #1
 8009f72:	68e3      	ldr	r3, [r4, #12]
 8009f74:	9903      	ldr	r1, [sp, #12]
 8009f76:	1a5b      	subs	r3, r3, r1
 8009f78:	42ab      	cmp	r3, r5
 8009f7a:	dcf2      	bgt.n	8009f62 <_printf_i+0x21e>
 8009f7c:	e7eb      	b.n	8009f56 <_printf_i+0x212>
 8009f7e:	2500      	movs	r5, #0
 8009f80:	f104 0619 	add.w	r6, r4, #25
 8009f84:	e7f5      	b.n	8009f72 <_printf_i+0x22e>
 8009f86:	bf00      	nop
 8009f88:	0800ca7e 	.word	0x0800ca7e
 8009f8c:	0800ca8f 	.word	0x0800ca8f

08009f90 <cleanup_glue>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	460c      	mov	r4, r1
 8009f94:	6809      	ldr	r1, [r1, #0]
 8009f96:	4605      	mov	r5, r0
 8009f98:	b109      	cbz	r1, 8009f9e <cleanup_glue+0xe>
 8009f9a:	f7ff fff9 	bl	8009f90 <cleanup_glue>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa6:	f001 bbf3 	b.w	800b790 <_free_r>
	...

08009fac <_reclaim_reent>:
 8009fac:	4b2c      	ldr	r3, [pc, #176]	; (800a060 <_reclaim_reent+0xb4>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4283      	cmp	r3, r0
 8009fb2:	b570      	push	{r4, r5, r6, lr}
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	d051      	beq.n	800a05c <_reclaim_reent+0xb0>
 8009fb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009fba:	b143      	cbz	r3, 8009fce <_reclaim_reent+0x22>
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d14a      	bne.n	800a058 <_reclaim_reent+0xac>
 8009fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc4:	6819      	ldr	r1, [r3, #0]
 8009fc6:	b111      	cbz	r1, 8009fce <_reclaim_reent+0x22>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f001 fbe1 	bl	800b790 <_free_r>
 8009fce:	6961      	ldr	r1, [r4, #20]
 8009fd0:	b111      	cbz	r1, 8009fd8 <_reclaim_reent+0x2c>
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f001 fbdc 	bl	800b790 <_free_r>
 8009fd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009fda:	b111      	cbz	r1, 8009fe2 <_reclaim_reent+0x36>
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f001 fbd7 	bl	800b790 <_free_r>
 8009fe2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009fe4:	b111      	cbz	r1, 8009fec <_reclaim_reent+0x40>
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f001 fbd2 	bl	800b790 <_free_r>
 8009fec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009fee:	b111      	cbz	r1, 8009ff6 <_reclaim_reent+0x4a>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f001 fbcd 	bl	800b790 <_free_r>
 8009ff6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009ff8:	b111      	cbz	r1, 800a000 <_reclaim_reent+0x54>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f001 fbc8 	bl	800b790 <_free_r>
 800a000:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a002:	b111      	cbz	r1, 800a00a <_reclaim_reent+0x5e>
 800a004:	4620      	mov	r0, r4
 800a006:	f001 fbc3 	bl	800b790 <_free_r>
 800a00a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a00c:	b111      	cbz	r1, 800a014 <_reclaim_reent+0x68>
 800a00e:	4620      	mov	r0, r4
 800a010:	f001 fbbe 	bl	800b790 <_free_r>
 800a014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a016:	b111      	cbz	r1, 800a01e <_reclaim_reent+0x72>
 800a018:	4620      	mov	r0, r4
 800a01a:	f001 fbb9 	bl	800b790 <_free_r>
 800a01e:	69a3      	ldr	r3, [r4, #24]
 800a020:	b1e3      	cbz	r3, 800a05c <_reclaim_reent+0xb0>
 800a022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a024:	4620      	mov	r0, r4
 800a026:	4798      	blx	r3
 800a028:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a02a:	b1b9      	cbz	r1, 800a05c <_reclaim_reent+0xb0>
 800a02c:	4620      	mov	r0, r4
 800a02e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a032:	f7ff bfad 	b.w	8009f90 <cleanup_glue>
 800a036:	5949      	ldr	r1, [r1, r5]
 800a038:	b941      	cbnz	r1, 800a04c <_reclaim_reent+0xa0>
 800a03a:	3504      	adds	r5, #4
 800a03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a03e:	2d80      	cmp	r5, #128	; 0x80
 800a040:	68d9      	ldr	r1, [r3, #12]
 800a042:	d1f8      	bne.n	800a036 <_reclaim_reent+0x8a>
 800a044:	4620      	mov	r0, r4
 800a046:	f001 fba3 	bl	800b790 <_free_r>
 800a04a:	e7ba      	b.n	8009fc2 <_reclaim_reent+0x16>
 800a04c:	680e      	ldr	r6, [r1, #0]
 800a04e:	4620      	mov	r0, r4
 800a050:	f001 fb9e 	bl	800b790 <_free_r>
 800a054:	4631      	mov	r1, r6
 800a056:	e7ef      	b.n	800a038 <_reclaim_reent+0x8c>
 800a058:	2500      	movs	r5, #0
 800a05a:	e7ef      	b.n	800a03c <_reclaim_reent+0x90>
 800a05c:	bd70      	pop	{r4, r5, r6, pc}
 800a05e:	bf00      	nop
 800a060:	20000024 	.word	0x20000024

0800a064 <_sbrk_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4d06      	ldr	r5, [pc, #24]	; (800a080 <_sbrk_r+0x1c>)
 800a068:	2300      	movs	r3, #0
 800a06a:	4604      	mov	r4, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	f7f9 faee 	bl	8003650 <_sbrk>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_sbrk_r+0x1a>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_sbrk_r+0x1a>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	20004d74 	.word	0x20004d74

0800a084 <siprintf>:
 800a084:	b40e      	push	{r1, r2, r3}
 800a086:	b500      	push	{lr}
 800a088:	b09c      	sub	sp, #112	; 0x70
 800a08a:	ab1d      	add	r3, sp, #116	; 0x74
 800a08c:	9002      	str	r0, [sp, #8]
 800a08e:	9006      	str	r0, [sp, #24]
 800a090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a094:	4809      	ldr	r0, [pc, #36]	; (800a0bc <siprintf+0x38>)
 800a096:	9107      	str	r1, [sp, #28]
 800a098:	9104      	str	r1, [sp, #16]
 800a09a:	4909      	ldr	r1, [pc, #36]	; (800a0c0 <siprintf+0x3c>)
 800a09c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a0:	9105      	str	r1, [sp, #20]
 800a0a2:	6800      	ldr	r0, [r0, #0]
 800a0a4:	9301      	str	r3, [sp, #4]
 800a0a6:	a902      	add	r1, sp, #8
 800a0a8:	f001 fc1a 	bl	800b8e0 <_svfiprintf_r>
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	701a      	strb	r2, [r3, #0]
 800a0b2:	b01c      	add	sp, #112	; 0x70
 800a0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0b8:	b003      	add	sp, #12
 800a0ba:	4770      	bx	lr
 800a0bc:	20000024 	.word	0x20000024
 800a0c0:	ffff0208 	.word	0xffff0208

0800a0c4 <__sread>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0cc:	f001 fd08 	bl	800bae0 <_read_r>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	bfab      	itete	ge
 800a0d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0d8:	181b      	addge	r3, r3, r0
 800a0da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0de:	bfac      	ite	ge
 800a0e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0e2:	81a3      	strhlt	r3, [r4, #12]
 800a0e4:	bd10      	pop	{r4, pc}

0800a0e6 <__swrite>:
 800a0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ea:	461f      	mov	r7, r3
 800a0ec:	898b      	ldrh	r3, [r1, #12]
 800a0ee:	05db      	lsls	r3, r3, #23
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	4616      	mov	r6, r2
 800a0f6:	d505      	bpl.n	800a104 <__swrite+0x1e>
 800a0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	2200      	movs	r2, #0
 800a100:	f000 ff86 	bl	800b010 <_lseek_r>
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	4632      	mov	r2, r6
 800a112:	463b      	mov	r3, r7
 800a114:	4628      	mov	r0, r5
 800a116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a11a:	f000 b817 	b.w	800a14c <_write_r>

0800a11e <__sseek>:
 800a11e:	b510      	push	{r4, lr}
 800a120:	460c      	mov	r4, r1
 800a122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a126:	f000 ff73 	bl	800b010 <_lseek_r>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	89a3      	ldrh	r3, [r4, #12]
 800a12e:	bf15      	itete	ne
 800a130:	6560      	strne	r0, [r4, #84]	; 0x54
 800a132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a13a:	81a3      	strheq	r3, [r4, #12]
 800a13c:	bf18      	it	ne
 800a13e:	81a3      	strhne	r3, [r4, #12]
 800a140:	bd10      	pop	{r4, pc}

0800a142 <__sclose>:
 800a142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a146:	f000 b813 	b.w	800a170 <_close_r>
	...

0800a14c <_write_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	; (800a16c <_write_r+0x20>)
 800a150:	4604      	mov	r4, r0
 800a152:	4608      	mov	r0, r1
 800a154:	4611      	mov	r1, r2
 800a156:	2200      	movs	r2, #0
 800a158:	602a      	str	r2, [r5, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	f7f9 fa27 	bl	80035ae <_write>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_write_r+0x1e>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	b103      	cbz	r3, 800a16a <_write_r+0x1e>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	20004d74 	.word	0x20004d74

0800a170 <_close_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d06      	ldr	r5, [pc, #24]	; (800a18c <_close_r+0x1c>)
 800a174:	2300      	movs	r3, #0
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	f7f9 fa33 	bl	80035e6 <_close>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_close_r+0x1a>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_close_r+0x1a>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	20004d74 	.word	0x20004d74

0800a190 <quorem>:
 800a190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	6903      	ldr	r3, [r0, #16]
 800a196:	690c      	ldr	r4, [r1, #16]
 800a198:	42a3      	cmp	r3, r4
 800a19a:	4607      	mov	r7, r0
 800a19c:	f2c0 8081 	blt.w	800a2a2 <quorem+0x112>
 800a1a0:	3c01      	subs	r4, #1
 800a1a2:	f101 0814 	add.w	r8, r1, #20
 800a1a6:	f100 0514 	add.w	r5, r0, #20
 800a1aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1c8:	d331      	bcc.n	800a22e <quorem+0x9e>
 800a1ca:	f04f 0e00 	mov.w	lr, #0
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	46ac      	mov	ip, r5
 800a1d2:	46f2      	mov	sl, lr
 800a1d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1d8:	b293      	uxth	r3, r2
 800a1da:	fb06 e303 	mla	r3, r6, r3, lr
 800a1de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a1e8:	f8dc a000 	ldr.w	sl, [ip]
 800a1ec:	0c12      	lsrs	r2, r2, #16
 800a1ee:	fa13 f38a 	uxtah	r3, r3, sl
 800a1f2:	fb06 e202 	mla	r2, r6, r2, lr
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	9b00      	ldr	r3, [sp, #0]
 800a1fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1fe:	b292      	uxth	r2, r2
 800a200:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a208:	f8bd 3000 	ldrh.w	r3, [sp]
 800a20c:	4581      	cmp	r9, r0
 800a20e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a212:	f84c 3b04 	str.w	r3, [ip], #4
 800a216:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a21a:	d2db      	bcs.n	800a1d4 <quorem+0x44>
 800a21c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a220:	b92b      	cbnz	r3, 800a22e <quorem+0x9e>
 800a222:	9b01      	ldr	r3, [sp, #4]
 800a224:	3b04      	subs	r3, #4
 800a226:	429d      	cmp	r5, r3
 800a228:	461a      	mov	r2, r3
 800a22a:	d32e      	bcc.n	800a28a <quorem+0xfa>
 800a22c:	613c      	str	r4, [r7, #16]
 800a22e:	4638      	mov	r0, r7
 800a230:	f001 f996 	bl	800b560 <__mcmp>
 800a234:	2800      	cmp	r0, #0
 800a236:	db24      	blt.n	800a282 <quorem+0xf2>
 800a238:	3601      	adds	r6, #1
 800a23a:	4628      	mov	r0, r5
 800a23c:	f04f 0c00 	mov.w	ip, #0
 800a240:	f858 2b04 	ldr.w	r2, [r8], #4
 800a244:	f8d0 e000 	ldr.w	lr, [r0]
 800a248:	b293      	uxth	r3, r2
 800a24a:	ebac 0303 	sub.w	r3, ip, r3
 800a24e:	0c12      	lsrs	r2, r2, #16
 800a250:	fa13 f38e 	uxtah	r3, r3, lr
 800a254:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a262:	45c1      	cmp	r9, r8
 800a264:	f840 3b04 	str.w	r3, [r0], #4
 800a268:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a26c:	d2e8      	bcs.n	800a240 <quorem+0xb0>
 800a26e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a276:	b922      	cbnz	r2, 800a282 <quorem+0xf2>
 800a278:	3b04      	subs	r3, #4
 800a27a:	429d      	cmp	r5, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	d30a      	bcc.n	800a296 <quorem+0x106>
 800a280:	613c      	str	r4, [r7, #16]
 800a282:	4630      	mov	r0, r6
 800a284:	b003      	add	sp, #12
 800a286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	3b04      	subs	r3, #4
 800a28e:	2a00      	cmp	r2, #0
 800a290:	d1cc      	bne.n	800a22c <quorem+0x9c>
 800a292:	3c01      	subs	r4, #1
 800a294:	e7c7      	b.n	800a226 <quorem+0x96>
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	3b04      	subs	r3, #4
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	d1f0      	bne.n	800a280 <quorem+0xf0>
 800a29e:	3c01      	subs	r4, #1
 800a2a0:	e7eb      	b.n	800a27a <quorem+0xea>
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e7ee      	b.n	800a284 <quorem+0xf4>
	...

0800a2a8 <_dtoa_r>:
 800a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	ed2d 8b04 	vpush	{d8-d9}
 800a2b0:	ec57 6b10 	vmov	r6, r7, d0
 800a2b4:	b093      	sub	sp, #76	; 0x4c
 800a2b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2bc:	9106      	str	r1, [sp, #24]
 800a2be:	ee10 aa10 	vmov	sl, s0
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2c8:	46bb      	mov	fp, r7
 800a2ca:	b975      	cbnz	r5, 800a2ea <_dtoa_r+0x42>
 800a2cc:	2010      	movs	r0, #16
 800a2ce:	f000 feb1 	bl	800b034 <malloc>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a2d6:	b920      	cbnz	r0, 800a2e2 <_dtoa_r+0x3a>
 800a2d8:	4ba7      	ldr	r3, [pc, #668]	; (800a578 <_dtoa_r+0x2d0>)
 800a2da:	21ea      	movs	r1, #234	; 0xea
 800a2dc:	48a7      	ldr	r0, [pc, #668]	; (800a57c <_dtoa_r+0x2d4>)
 800a2de:	f001 fc11 	bl	800bb04 <__assert_func>
 800a2e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2e6:	6005      	str	r5, [r0, #0]
 800a2e8:	60c5      	str	r5, [r0, #12]
 800a2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ec:	6819      	ldr	r1, [r3, #0]
 800a2ee:	b151      	cbz	r1, 800a306 <_dtoa_r+0x5e>
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	604a      	str	r2, [r1, #4]
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4093      	lsls	r3, r2
 800a2f8:	608b      	str	r3, [r1, #8]
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f000 feee 	bl	800b0dc <_Bfree>
 800a300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	1e3b      	subs	r3, r7, #0
 800a308:	bfaa      	itet	ge
 800a30a:	2300      	movge	r3, #0
 800a30c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a310:	f8c8 3000 	strge.w	r3, [r8]
 800a314:	4b9a      	ldr	r3, [pc, #616]	; (800a580 <_dtoa_r+0x2d8>)
 800a316:	bfbc      	itt	lt
 800a318:	2201      	movlt	r2, #1
 800a31a:	f8c8 2000 	strlt.w	r2, [r8]
 800a31e:	ea33 030b 	bics.w	r3, r3, fp
 800a322:	d11b      	bne.n	800a35c <_dtoa_r+0xb4>
 800a324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a326:	f242 730f 	movw	r3, #9999	; 0x270f
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a330:	4333      	orrs	r3, r6
 800a332:	f000 8592 	beq.w	800ae5a <_dtoa_r+0xbb2>
 800a336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a338:	b963      	cbnz	r3, 800a354 <_dtoa_r+0xac>
 800a33a:	4b92      	ldr	r3, [pc, #584]	; (800a584 <_dtoa_r+0x2dc>)
 800a33c:	e022      	b.n	800a384 <_dtoa_r+0xdc>
 800a33e:	4b92      	ldr	r3, [pc, #584]	; (800a588 <_dtoa_r+0x2e0>)
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	3308      	adds	r3, #8
 800a344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	9801      	ldr	r0, [sp, #4]
 800a34a:	b013      	add	sp, #76	; 0x4c
 800a34c:	ecbd 8b04 	vpop	{d8-d9}
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	4b8b      	ldr	r3, [pc, #556]	; (800a584 <_dtoa_r+0x2dc>)
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	3303      	adds	r3, #3
 800a35a:	e7f3      	b.n	800a344 <_dtoa_r+0x9c>
 800a35c:	2200      	movs	r2, #0
 800a35e:	2300      	movs	r3, #0
 800a360:	4650      	mov	r0, sl
 800a362:	4659      	mov	r1, fp
 800a364:	f7f6 fbb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a368:	ec4b ab19 	vmov	d9, sl, fp
 800a36c:	4680      	mov	r8, r0
 800a36e:	b158      	cbz	r0, 800a388 <_dtoa_r+0xe0>
 800a370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a372:	2301      	movs	r3, #1
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 856b 	beq.w	800ae54 <_dtoa_r+0xbac>
 800a37e:	4883      	ldr	r0, [pc, #524]	; (800a58c <_dtoa_r+0x2e4>)
 800a380:	6018      	str	r0, [r3, #0]
 800a382:	1e43      	subs	r3, r0, #1
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	e7df      	b.n	800a348 <_dtoa_r+0xa0>
 800a388:	ec4b ab10 	vmov	d0, sl, fp
 800a38c:	aa10      	add	r2, sp, #64	; 0x40
 800a38e:	a911      	add	r1, sp, #68	; 0x44
 800a390:	4620      	mov	r0, r4
 800a392:	f001 f98b 	bl	800b6ac <__d2b>
 800a396:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a39a:	ee08 0a10 	vmov	s16, r0
 800a39e:	2d00      	cmp	r5, #0
 800a3a0:	f000 8084 	beq.w	800a4ac <_dtoa_r+0x204>
 800a3a4:	ee19 3a90 	vmov	r3, s19
 800a3a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3b0:	4656      	mov	r6, sl
 800a3b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a3be:	4b74      	ldr	r3, [pc, #464]	; (800a590 <_dtoa_r+0x2e8>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	f7f5 ff67 	bl	8000298 <__aeabi_dsub>
 800a3ca:	a365      	add	r3, pc, #404	; (adr r3, 800a560 <_dtoa_r+0x2b8>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	f7f6 f91a 	bl	8000608 <__aeabi_dmul>
 800a3d4:	a364      	add	r3, pc, #400	; (adr r3, 800a568 <_dtoa_r+0x2c0>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	f7f5 ff5f 	bl	800029c <__adddf3>
 800a3de:	4606      	mov	r6, r0
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	f7f6 f8a6 	bl	8000534 <__aeabi_i2d>
 800a3e8:	a361      	add	r3, pc, #388	; (adr r3, 800a570 <_dtoa_r+0x2c8>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f6 f90b 	bl	8000608 <__aeabi_dmul>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	f7f5 ff4f 	bl	800029c <__adddf3>
 800a3fe:	4606      	mov	r6, r0
 800a400:	460f      	mov	r7, r1
 800a402:	f7f6 fbb1 	bl	8000b68 <__aeabi_d2iz>
 800a406:	2200      	movs	r2, #0
 800a408:	9000      	str	r0, [sp, #0]
 800a40a:	2300      	movs	r3, #0
 800a40c:	4630      	mov	r0, r6
 800a40e:	4639      	mov	r1, r7
 800a410:	f7f6 fb6c 	bl	8000aec <__aeabi_dcmplt>
 800a414:	b150      	cbz	r0, 800a42c <_dtoa_r+0x184>
 800a416:	9800      	ldr	r0, [sp, #0]
 800a418:	f7f6 f88c 	bl	8000534 <__aeabi_i2d>
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	f7f6 fb5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a424:	b910      	cbnz	r0, 800a42c <_dtoa_r+0x184>
 800a426:	9b00      	ldr	r3, [sp, #0]
 800a428:	3b01      	subs	r3, #1
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	9b00      	ldr	r3, [sp, #0]
 800a42e:	2b16      	cmp	r3, #22
 800a430:	d85a      	bhi.n	800a4e8 <_dtoa_r+0x240>
 800a432:	9a00      	ldr	r2, [sp, #0]
 800a434:	4b57      	ldr	r3, [pc, #348]	; (800a594 <_dtoa_r+0x2ec>)
 800a436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	ec51 0b19 	vmov	r0, r1, d9
 800a442:	f7f6 fb53 	bl	8000aec <__aeabi_dcmplt>
 800a446:	2800      	cmp	r0, #0
 800a448:	d050      	beq.n	800a4ec <_dtoa_r+0x244>
 800a44a:	9b00      	ldr	r3, [sp, #0]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	2300      	movs	r3, #0
 800a452:	930b      	str	r3, [sp, #44]	; 0x2c
 800a454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a456:	1b5d      	subs	r5, r3, r5
 800a458:	1e6b      	subs	r3, r5, #1
 800a45a:	9305      	str	r3, [sp, #20]
 800a45c:	bf45      	ittet	mi
 800a45e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a462:	9304      	strmi	r3, [sp, #16]
 800a464:	2300      	movpl	r3, #0
 800a466:	2300      	movmi	r3, #0
 800a468:	bf4c      	ite	mi
 800a46a:	9305      	strmi	r3, [sp, #20]
 800a46c:	9304      	strpl	r3, [sp, #16]
 800a46e:	9b00      	ldr	r3, [sp, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	db3d      	blt.n	800a4f0 <_dtoa_r+0x248>
 800a474:	9b05      	ldr	r3, [sp, #20]
 800a476:	9a00      	ldr	r2, [sp, #0]
 800a478:	920a      	str	r2, [sp, #40]	; 0x28
 800a47a:	4413      	add	r3, r2
 800a47c:	9305      	str	r3, [sp, #20]
 800a47e:	2300      	movs	r3, #0
 800a480:	9307      	str	r3, [sp, #28]
 800a482:	9b06      	ldr	r3, [sp, #24]
 800a484:	2b09      	cmp	r3, #9
 800a486:	f200 8089 	bhi.w	800a59c <_dtoa_r+0x2f4>
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	bfc4      	itt	gt
 800a48e:	3b04      	subgt	r3, #4
 800a490:	9306      	strgt	r3, [sp, #24]
 800a492:	9b06      	ldr	r3, [sp, #24]
 800a494:	f1a3 0302 	sub.w	r3, r3, #2
 800a498:	bfcc      	ite	gt
 800a49a:	2500      	movgt	r5, #0
 800a49c:	2501      	movle	r5, #1
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	f200 8087 	bhi.w	800a5b2 <_dtoa_r+0x30a>
 800a4a4:	e8df f003 	tbb	[pc, r3]
 800a4a8:	59383a2d 	.word	0x59383a2d
 800a4ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a4b0:	441d      	add	r5, r3
 800a4b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	bfc1      	itttt	gt
 800a4ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a4c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4ca:	bfda      	itte	le
 800a4cc:	f1c3 0320 	rsble	r3, r3, #32
 800a4d0:	fa06 f003 	lslle.w	r0, r6, r3
 800a4d4:	4318      	orrgt	r0, r3
 800a4d6:	f7f6 f81d 	bl	8000514 <__aeabi_ui2d>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4606      	mov	r6, r0
 800a4de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4e2:	3d01      	subs	r5, #1
 800a4e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a4e6:	e76a      	b.n	800a3be <_dtoa_r+0x116>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e7b2      	b.n	800a452 <_dtoa_r+0x1aa>
 800a4ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4ee:	e7b1      	b.n	800a454 <_dtoa_r+0x1ac>
 800a4f0:	9b04      	ldr	r3, [sp, #16]
 800a4f2:	9a00      	ldr	r2, [sp, #0]
 800a4f4:	1a9b      	subs	r3, r3, r2
 800a4f6:	9304      	str	r3, [sp, #16]
 800a4f8:	4253      	negs	r3, r2
 800a4fa:	9307      	str	r3, [sp, #28]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a500:	e7bf      	b.n	800a482 <_dtoa_r+0x1da>
 800a502:	2300      	movs	r3, #0
 800a504:	9308      	str	r3, [sp, #32]
 800a506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dc55      	bgt.n	800a5b8 <_dtoa_r+0x310>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a512:	461a      	mov	r2, r3
 800a514:	9209      	str	r2, [sp, #36]	; 0x24
 800a516:	e00c      	b.n	800a532 <_dtoa_r+0x28a>
 800a518:	2301      	movs	r3, #1
 800a51a:	e7f3      	b.n	800a504 <_dtoa_r+0x25c>
 800a51c:	2300      	movs	r3, #0
 800a51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a520:	9308      	str	r3, [sp, #32]
 800a522:	9b00      	ldr	r3, [sp, #0]
 800a524:	4413      	add	r3, r2
 800a526:	9302      	str	r3, [sp, #8]
 800a528:	3301      	adds	r3, #1
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	9303      	str	r3, [sp, #12]
 800a52e:	bfb8      	it	lt
 800a530:	2301      	movlt	r3, #1
 800a532:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a534:	2200      	movs	r2, #0
 800a536:	6042      	str	r2, [r0, #4]
 800a538:	2204      	movs	r2, #4
 800a53a:	f102 0614 	add.w	r6, r2, #20
 800a53e:	429e      	cmp	r6, r3
 800a540:	6841      	ldr	r1, [r0, #4]
 800a542:	d93d      	bls.n	800a5c0 <_dtoa_r+0x318>
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fd89 	bl	800b05c <_Balloc>
 800a54a:	9001      	str	r0, [sp, #4]
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d13b      	bne.n	800a5c8 <_dtoa_r+0x320>
 800a550:	4b11      	ldr	r3, [pc, #68]	; (800a598 <_dtoa_r+0x2f0>)
 800a552:	4602      	mov	r2, r0
 800a554:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a558:	e6c0      	b.n	800a2dc <_dtoa_r+0x34>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e7df      	b.n	800a51e <_dtoa_r+0x276>
 800a55e:	bf00      	nop
 800a560:	636f4361 	.word	0x636f4361
 800a564:	3fd287a7 	.word	0x3fd287a7
 800a568:	8b60c8b3 	.word	0x8b60c8b3
 800a56c:	3fc68a28 	.word	0x3fc68a28
 800a570:	509f79fb 	.word	0x509f79fb
 800a574:	3fd34413 	.word	0x3fd34413
 800a578:	0800caad 	.word	0x0800caad
 800a57c:	0800cac4 	.word	0x0800cac4
 800a580:	7ff00000 	.word	0x7ff00000
 800a584:	0800caa9 	.word	0x0800caa9
 800a588:	0800caa0 	.word	0x0800caa0
 800a58c:	0800ca7d 	.word	0x0800ca7d
 800a590:	3ff80000 	.word	0x3ff80000
 800a594:	0800cbb8 	.word	0x0800cbb8
 800a598:	0800cb1f 	.word	0x0800cb1f
 800a59c:	2501      	movs	r5, #1
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9306      	str	r3, [sp, #24]
 800a5a2:	9508      	str	r5, [sp, #32]
 800a5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2312      	movs	r3, #18
 800a5b0:	e7b0      	b.n	800a514 <_dtoa_r+0x26c>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	9308      	str	r3, [sp, #32]
 800a5b6:	e7f5      	b.n	800a5a4 <_dtoa_r+0x2fc>
 800a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5be:	e7b8      	b.n	800a532 <_dtoa_r+0x28a>
 800a5c0:	3101      	adds	r1, #1
 800a5c2:	6041      	str	r1, [r0, #4]
 800a5c4:	0052      	lsls	r2, r2, #1
 800a5c6:	e7b8      	b.n	800a53a <_dtoa_r+0x292>
 800a5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ca:	9a01      	ldr	r2, [sp, #4]
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	9b03      	ldr	r3, [sp, #12]
 800a5d0:	2b0e      	cmp	r3, #14
 800a5d2:	f200 809d 	bhi.w	800a710 <_dtoa_r+0x468>
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	f000 809a 	beq.w	800a710 <_dtoa_r+0x468>
 800a5dc:	9b00      	ldr	r3, [sp, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	dd32      	ble.n	800a648 <_dtoa_r+0x3a0>
 800a5e2:	4ab7      	ldr	r2, [pc, #732]	; (800a8c0 <_dtoa_r+0x618>)
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5f0:	9b00      	ldr	r3, [sp, #0]
 800a5f2:	05d8      	lsls	r0, r3, #23
 800a5f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5f8:	d516      	bpl.n	800a628 <_dtoa_r+0x380>
 800a5fa:	4bb2      	ldr	r3, [pc, #712]	; (800a8c4 <_dtoa_r+0x61c>)
 800a5fc:	ec51 0b19 	vmov	r0, r1, d9
 800a600:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a604:	f7f6 f92a 	bl	800085c <__aeabi_ddiv>
 800a608:	f007 070f 	and.w	r7, r7, #15
 800a60c:	4682      	mov	sl, r0
 800a60e:	468b      	mov	fp, r1
 800a610:	2503      	movs	r5, #3
 800a612:	4eac      	ldr	r6, [pc, #688]	; (800a8c4 <_dtoa_r+0x61c>)
 800a614:	b957      	cbnz	r7, 800a62c <_dtoa_r+0x384>
 800a616:	4642      	mov	r2, r8
 800a618:	464b      	mov	r3, r9
 800a61a:	4650      	mov	r0, sl
 800a61c:	4659      	mov	r1, fp
 800a61e:	f7f6 f91d 	bl	800085c <__aeabi_ddiv>
 800a622:	4682      	mov	sl, r0
 800a624:	468b      	mov	fp, r1
 800a626:	e028      	b.n	800a67a <_dtoa_r+0x3d2>
 800a628:	2502      	movs	r5, #2
 800a62a:	e7f2      	b.n	800a612 <_dtoa_r+0x36a>
 800a62c:	07f9      	lsls	r1, r7, #31
 800a62e:	d508      	bpl.n	800a642 <_dtoa_r+0x39a>
 800a630:	4640      	mov	r0, r8
 800a632:	4649      	mov	r1, r9
 800a634:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a638:	f7f5 ffe6 	bl	8000608 <__aeabi_dmul>
 800a63c:	3501      	adds	r5, #1
 800a63e:	4680      	mov	r8, r0
 800a640:	4689      	mov	r9, r1
 800a642:	107f      	asrs	r7, r7, #1
 800a644:	3608      	adds	r6, #8
 800a646:	e7e5      	b.n	800a614 <_dtoa_r+0x36c>
 800a648:	f000 809b 	beq.w	800a782 <_dtoa_r+0x4da>
 800a64c:	9b00      	ldr	r3, [sp, #0]
 800a64e:	4f9d      	ldr	r7, [pc, #628]	; (800a8c4 <_dtoa_r+0x61c>)
 800a650:	425e      	negs	r6, r3
 800a652:	4b9b      	ldr	r3, [pc, #620]	; (800a8c0 <_dtoa_r+0x618>)
 800a654:	f006 020f 	and.w	r2, r6, #15
 800a658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	ec51 0b19 	vmov	r0, r1, d9
 800a664:	f7f5 ffd0 	bl	8000608 <__aeabi_dmul>
 800a668:	1136      	asrs	r6, r6, #4
 800a66a:	4682      	mov	sl, r0
 800a66c:	468b      	mov	fp, r1
 800a66e:	2300      	movs	r3, #0
 800a670:	2502      	movs	r5, #2
 800a672:	2e00      	cmp	r6, #0
 800a674:	d17a      	bne.n	800a76c <_dtoa_r+0x4c4>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1d3      	bne.n	800a622 <_dtoa_r+0x37a>
 800a67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 8082 	beq.w	800a786 <_dtoa_r+0x4de>
 800a682:	4b91      	ldr	r3, [pc, #580]	; (800a8c8 <_dtoa_r+0x620>)
 800a684:	2200      	movs	r2, #0
 800a686:	4650      	mov	r0, sl
 800a688:	4659      	mov	r1, fp
 800a68a:	f7f6 fa2f 	bl	8000aec <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d079      	beq.n	800a786 <_dtoa_r+0x4de>
 800a692:	9b03      	ldr	r3, [sp, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d076      	beq.n	800a786 <_dtoa_r+0x4de>
 800a698:	9b02      	ldr	r3, [sp, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	dd36      	ble.n	800a70c <_dtoa_r+0x464>
 800a69e:	9b00      	ldr	r3, [sp, #0]
 800a6a0:	4650      	mov	r0, sl
 800a6a2:	4659      	mov	r1, fp
 800a6a4:	1e5f      	subs	r7, r3, #1
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4b88      	ldr	r3, [pc, #544]	; (800a8cc <_dtoa_r+0x624>)
 800a6aa:	f7f5 ffad 	bl	8000608 <__aeabi_dmul>
 800a6ae:	9e02      	ldr	r6, [sp, #8]
 800a6b0:	4682      	mov	sl, r0
 800a6b2:	468b      	mov	fp, r1
 800a6b4:	3501      	adds	r5, #1
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f7f5 ff3c 	bl	8000534 <__aeabi_i2d>
 800a6bc:	4652      	mov	r2, sl
 800a6be:	465b      	mov	r3, fp
 800a6c0:	f7f5 ffa2 	bl	8000608 <__aeabi_dmul>
 800a6c4:	4b82      	ldr	r3, [pc, #520]	; (800a8d0 <_dtoa_r+0x628>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f7f5 fde8 	bl	800029c <__adddf3>
 800a6cc:	46d0      	mov	r8, sl
 800a6ce:	46d9      	mov	r9, fp
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	d158      	bne.n	800a78c <_dtoa_r+0x4e4>
 800a6da:	4b7e      	ldr	r3, [pc, #504]	; (800a8d4 <_dtoa_r+0x62c>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f5 fdd9 	bl	8000298 <__aeabi_dsub>
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	465b      	mov	r3, fp
 800a6ea:	4680      	mov	r8, r0
 800a6ec:	4689      	mov	r9, r1
 800a6ee:	f7f6 fa1b 	bl	8000b28 <__aeabi_dcmpgt>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	f040 8295 	bne.w	800ac22 <_dtoa_r+0x97a>
 800a6f8:	4652      	mov	r2, sl
 800a6fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6fe:	4640      	mov	r0, r8
 800a700:	4649      	mov	r1, r9
 800a702:	f7f6 f9f3 	bl	8000aec <__aeabi_dcmplt>
 800a706:	2800      	cmp	r0, #0
 800a708:	f040 8289 	bne.w	800ac1e <_dtoa_r+0x976>
 800a70c:	ec5b ab19 	vmov	sl, fp, d9
 800a710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a712:	2b00      	cmp	r3, #0
 800a714:	f2c0 8148 	blt.w	800a9a8 <_dtoa_r+0x700>
 800a718:	9a00      	ldr	r2, [sp, #0]
 800a71a:	2a0e      	cmp	r2, #14
 800a71c:	f300 8144 	bgt.w	800a9a8 <_dtoa_r+0x700>
 800a720:	4b67      	ldr	r3, [pc, #412]	; (800a8c0 <_dtoa_r+0x618>)
 800a722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a726:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f280 80d5 	bge.w	800a8dc <_dtoa_r+0x634>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f300 80d1 	bgt.w	800a8dc <_dtoa_r+0x634>
 800a73a:	f040 826f 	bne.w	800ac1c <_dtoa_r+0x974>
 800a73e:	4b65      	ldr	r3, [pc, #404]	; (800a8d4 <_dtoa_r+0x62c>)
 800a740:	2200      	movs	r2, #0
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f5 ff5f 	bl	8000608 <__aeabi_dmul>
 800a74a:	4652      	mov	r2, sl
 800a74c:	465b      	mov	r3, fp
 800a74e:	f7f6 f9e1 	bl	8000b14 <__aeabi_dcmpge>
 800a752:	9e03      	ldr	r6, [sp, #12]
 800a754:	4637      	mov	r7, r6
 800a756:	2800      	cmp	r0, #0
 800a758:	f040 8245 	bne.w	800abe6 <_dtoa_r+0x93e>
 800a75c:	9d01      	ldr	r5, [sp, #4]
 800a75e:	2331      	movs	r3, #49	; 0x31
 800a760:	f805 3b01 	strb.w	r3, [r5], #1
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	e240      	b.n	800abee <_dtoa_r+0x946>
 800a76c:	07f2      	lsls	r2, r6, #31
 800a76e:	d505      	bpl.n	800a77c <_dtoa_r+0x4d4>
 800a770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a774:	f7f5 ff48 	bl	8000608 <__aeabi_dmul>
 800a778:	3501      	adds	r5, #1
 800a77a:	2301      	movs	r3, #1
 800a77c:	1076      	asrs	r6, r6, #1
 800a77e:	3708      	adds	r7, #8
 800a780:	e777      	b.n	800a672 <_dtoa_r+0x3ca>
 800a782:	2502      	movs	r5, #2
 800a784:	e779      	b.n	800a67a <_dtoa_r+0x3d2>
 800a786:	9f00      	ldr	r7, [sp, #0]
 800a788:	9e03      	ldr	r6, [sp, #12]
 800a78a:	e794      	b.n	800a6b6 <_dtoa_r+0x40e>
 800a78c:	9901      	ldr	r1, [sp, #4]
 800a78e:	4b4c      	ldr	r3, [pc, #304]	; (800a8c0 <_dtoa_r+0x618>)
 800a790:	4431      	add	r1, r6
 800a792:	910d      	str	r1, [sp, #52]	; 0x34
 800a794:	9908      	ldr	r1, [sp, #32]
 800a796:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a79a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	d043      	beq.n	800a82a <_dtoa_r+0x582>
 800a7a2:	494d      	ldr	r1, [pc, #308]	; (800a8d8 <_dtoa_r+0x630>)
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	f7f6 f859 	bl	800085c <__aeabi_ddiv>
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	465b      	mov	r3, fp
 800a7ae:	f7f5 fd73 	bl	8000298 <__aeabi_dsub>
 800a7b2:	9d01      	ldr	r5, [sp, #4]
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	468b      	mov	fp, r1
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	f7f6 f9d4 	bl	8000b68 <__aeabi_d2iz>
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	f7f5 feb7 	bl	8000534 <__aeabi_i2d>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	f7f5 fd63 	bl	8000298 <__aeabi_dsub>
 800a7d2:	3630      	adds	r6, #48	; 0x30
 800a7d4:	f805 6b01 	strb.w	r6, [r5], #1
 800a7d8:	4652      	mov	r2, sl
 800a7da:	465b      	mov	r3, fp
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4689      	mov	r9, r1
 800a7e0:	f7f6 f984 	bl	8000aec <__aeabi_dcmplt>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d163      	bne.n	800a8b0 <_dtoa_r+0x608>
 800a7e8:	4642      	mov	r2, r8
 800a7ea:	464b      	mov	r3, r9
 800a7ec:	4936      	ldr	r1, [pc, #216]	; (800a8c8 <_dtoa_r+0x620>)
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	f7f5 fd52 	bl	8000298 <__aeabi_dsub>
 800a7f4:	4652      	mov	r2, sl
 800a7f6:	465b      	mov	r3, fp
 800a7f8:	f7f6 f978 	bl	8000aec <__aeabi_dcmplt>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	f040 80b5 	bne.w	800a96c <_dtoa_r+0x6c4>
 800a802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a804:	429d      	cmp	r5, r3
 800a806:	d081      	beq.n	800a70c <_dtoa_r+0x464>
 800a808:	4b30      	ldr	r3, [pc, #192]	; (800a8cc <_dtoa_r+0x624>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	4650      	mov	r0, sl
 800a80e:	4659      	mov	r1, fp
 800a810:	f7f5 fefa 	bl	8000608 <__aeabi_dmul>
 800a814:	4b2d      	ldr	r3, [pc, #180]	; (800a8cc <_dtoa_r+0x624>)
 800a816:	4682      	mov	sl, r0
 800a818:	468b      	mov	fp, r1
 800a81a:	4640      	mov	r0, r8
 800a81c:	4649      	mov	r1, r9
 800a81e:	2200      	movs	r2, #0
 800a820:	f7f5 fef2 	bl	8000608 <__aeabi_dmul>
 800a824:	4680      	mov	r8, r0
 800a826:	4689      	mov	r9, r1
 800a828:	e7c6      	b.n	800a7b8 <_dtoa_r+0x510>
 800a82a:	4650      	mov	r0, sl
 800a82c:	4659      	mov	r1, fp
 800a82e:	f7f5 feeb 	bl	8000608 <__aeabi_dmul>
 800a832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a834:	9d01      	ldr	r5, [sp, #4]
 800a836:	930f      	str	r3, [sp, #60]	; 0x3c
 800a838:	4682      	mov	sl, r0
 800a83a:	468b      	mov	fp, r1
 800a83c:	4649      	mov	r1, r9
 800a83e:	4640      	mov	r0, r8
 800a840:	f7f6 f992 	bl	8000b68 <__aeabi_d2iz>
 800a844:	4606      	mov	r6, r0
 800a846:	f7f5 fe75 	bl	8000534 <__aeabi_i2d>
 800a84a:	3630      	adds	r6, #48	; 0x30
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f5 fd20 	bl	8000298 <__aeabi_dsub>
 800a858:	f805 6b01 	strb.w	r6, [r5], #1
 800a85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a85e:	429d      	cmp	r5, r3
 800a860:	4680      	mov	r8, r0
 800a862:	4689      	mov	r9, r1
 800a864:	f04f 0200 	mov.w	r2, #0
 800a868:	d124      	bne.n	800a8b4 <_dtoa_r+0x60c>
 800a86a:	4b1b      	ldr	r3, [pc, #108]	; (800a8d8 <_dtoa_r+0x630>)
 800a86c:	4650      	mov	r0, sl
 800a86e:	4659      	mov	r1, fp
 800a870:	f7f5 fd14 	bl	800029c <__adddf3>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f6 f954 	bl	8000b28 <__aeabi_dcmpgt>
 800a880:	2800      	cmp	r0, #0
 800a882:	d173      	bne.n	800a96c <_dtoa_r+0x6c4>
 800a884:	4652      	mov	r2, sl
 800a886:	465b      	mov	r3, fp
 800a888:	4913      	ldr	r1, [pc, #76]	; (800a8d8 <_dtoa_r+0x630>)
 800a88a:	2000      	movs	r0, #0
 800a88c:	f7f5 fd04 	bl	8000298 <__aeabi_dsub>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4640      	mov	r0, r8
 800a896:	4649      	mov	r1, r9
 800a898:	f7f6 f928 	bl	8000aec <__aeabi_dcmplt>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	f43f af35 	beq.w	800a70c <_dtoa_r+0x464>
 800a8a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a8a4:	1e6b      	subs	r3, r5, #1
 800a8a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8ac:	2b30      	cmp	r3, #48	; 0x30
 800a8ae:	d0f8      	beq.n	800a8a2 <_dtoa_r+0x5fa>
 800a8b0:	9700      	str	r7, [sp, #0]
 800a8b2:	e049      	b.n	800a948 <_dtoa_r+0x6a0>
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <_dtoa_r+0x624>)
 800a8b6:	f7f5 fea7 	bl	8000608 <__aeabi_dmul>
 800a8ba:	4680      	mov	r8, r0
 800a8bc:	4689      	mov	r9, r1
 800a8be:	e7bd      	b.n	800a83c <_dtoa_r+0x594>
 800a8c0:	0800cbb8 	.word	0x0800cbb8
 800a8c4:	0800cb90 	.word	0x0800cb90
 800a8c8:	3ff00000 	.word	0x3ff00000
 800a8cc:	40240000 	.word	0x40240000
 800a8d0:	401c0000 	.word	0x401c0000
 800a8d4:	40140000 	.word	0x40140000
 800a8d8:	3fe00000 	.word	0x3fe00000
 800a8dc:	9d01      	ldr	r5, [sp, #4]
 800a8de:	4656      	mov	r6, sl
 800a8e0:	465f      	mov	r7, fp
 800a8e2:	4642      	mov	r2, r8
 800a8e4:	464b      	mov	r3, r9
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	f7f5 ffb7 	bl	800085c <__aeabi_ddiv>
 800a8ee:	f7f6 f93b 	bl	8000b68 <__aeabi_d2iz>
 800a8f2:	4682      	mov	sl, r0
 800a8f4:	f7f5 fe1e 	bl	8000534 <__aeabi_i2d>
 800a8f8:	4642      	mov	r2, r8
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	f7f5 fe84 	bl	8000608 <__aeabi_dmul>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4630      	mov	r0, r6
 800a906:	4639      	mov	r1, r7
 800a908:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a90c:	f7f5 fcc4 	bl	8000298 <__aeabi_dsub>
 800a910:	f805 6b01 	strb.w	r6, [r5], #1
 800a914:	9e01      	ldr	r6, [sp, #4]
 800a916:	9f03      	ldr	r7, [sp, #12]
 800a918:	1bae      	subs	r6, r5, r6
 800a91a:	42b7      	cmp	r7, r6
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	d135      	bne.n	800a98e <_dtoa_r+0x6e6>
 800a922:	f7f5 fcbb 	bl	800029c <__adddf3>
 800a926:	4642      	mov	r2, r8
 800a928:	464b      	mov	r3, r9
 800a92a:	4606      	mov	r6, r0
 800a92c:	460f      	mov	r7, r1
 800a92e:	f7f6 f8fb 	bl	8000b28 <__aeabi_dcmpgt>
 800a932:	b9d0      	cbnz	r0, 800a96a <_dtoa_r+0x6c2>
 800a934:	4642      	mov	r2, r8
 800a936:	464b      	mov	r3, r9
 800a938:	4630      	mov	r0, r6
 800a93a:	4639      	mov	r1, r7
 800a93c:	f7f6 f8cc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a940:	b110      	cbz	r0, 800a948 <_dtoa_r+0x6a0>
 800a942:	f01a 0f01 	tst.w	sl, #1
 800a946:	d110      	bne.n	800a96a <_dtoa_r+0x6c2>
 800a948:	4620      	mov	r0, r4
 800a94a:	ee18 1a10 	vmov	r1, s16
 800a94e:	f000 fbc5 	bl	800b0dc <_Bfree>
 800a952:	2300      	movs	r3, #0
 800a954:	9800      	ldr	r0, [sp, #0]
 800a956:	702b      	strb	r3, [r5, #0]
 800a958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a95a:	3001      	adds	r0, #1
 800a95c:	6018      	str	r0, [r3, #0]
 800a95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a960:	2b00      	cmp	r3, #0
 800a962:	f43f acf1 	beq.w	800a348 <_dtoa_r+0xa0>
 800a966:	601d      	str	r5, [r3, #0]
 800a968:	e4ee      	b.n	800a348 <_dtoa_r+0xa0>
 800a96a:	9f00      	ldr	r7, [sp, #0]
 800a96c:	462b      	mov	r3, r5
 800a96e:	461d      	mov	r5, r3
 800a970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a974:	2a39      	cmp	r2, #57	; 0x39
 800a976:	d106      	bne.n	800a986 <_dtoa_r+0x6de>
 800a978:	9a01      	ldr	r2, [sp, #4]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d1f7      	bne.n	800a96e <_dtoa_r+0x6c6>
 800a97e:	9901      	ldr	r1, [sp, #4]
 800a980:	2230      	movs	r2, #48	; 0x30
 800a982:	3701      	adds	r7, #1
 800a984:	700a      	strb	r2, [r1, #0]
 800a986:	781a      	ldrb	r2, [r3, #0]
 800a988:	3201      	adds	r2, #1
 800a98a:	701a      	strb	r2, [r3, #0]
 800a98c:	e790      	b.n	800a8b0 <_dtoa_r+0x608>
 800a98e:	4ba6      	ldr	r3, [pc, #664]	; (800ac28 <_dtoa_r+0x980>)
 800a990:	2200      	movs	r2, #0
 800a992:	f7f5 fe39 	bl	8000608 <__aeabi_dmul>
 800a996:	2200      	movs	r2, #0
 800a998:	2300      	movs	r3, #0
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	f7f6 f89b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d09d      	beq.n	800a8e2 <_dtoa_r+0x63a>
 800a9a6:	e7cf      	b.n	800a948 <_dtoa_r+0x6a0>
 800a9a8:	9a08      	ldr	r2, [sp, #32]
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	f000 80d7 	beq.w	800ab5e <_dtoa_r+0x8b6>
 800a9b0:	9a06      	ldr	r2, [sp, #24]
 800a9b2:	2a01      	cmp	r2, #1
 800a9b4:	f300 80ba 	bgt.w	800ab2c <_dtoa_r+0x884>
 800a9b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	f000 80b2 	beq.w	800ab24 <_dtoa_r+0x87c>
 800a9c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9c4:	9e07      	ldr	r6, [sp, #28]
 800a9c6:	9d04      	ldr	r5, [sp, #16]
 800a9c8:	9a04      	ldr	r2, [sp, #16]
 800a9ca:	441a      	add	r2, r3
 800a9cc:	9204      	str	r2, [sp, #16]
 800a9ce:	9a05      	ldr	r2, [sp, #20]
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	441a      	add	r2, r3
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	9205      	str	r2, [sp, #20]
 800a9d8:	f000 fc38 	bl	800b24c <__i2b>
 800a9dc:	4607      	mov	r7, r0
 800a9de:	2d00      	cmp	r5, #0
 800a9e0:	dd0c      	ble.n	800a9fc <_dtoa_r+0x754>
 800a9e2:	9b05      	ldr	r3, [sp, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dd09      	ble.n	800a9fc <_dtoa_r+0x754>
 800a9e8:	42ab      	cmp	r3, r5
 800a9ea:	9a04      	ldr	r2, [sp, #16]
 800a9ec:	bfa8      	it	ge
 800a9ee:	462b      	movge	r3, r5
 800a9f0:	1ad2      	subs	r2, r2, r3
 800a9f2:	9204      	str	r2, [sp, #16]
 800a9f4:	9a05      	ldr	r2, [sp, #20]
 800a9f6:	1aed      	subs	r5, r5, r3
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	9305      	str	r3, [sp, #20]
 800a9fc:	9b07      	ldr	r3, [sp, #28]
 800a9fe:	b31b      	cbz	r3, 800aa48 <_dtoa_r+0x7a0>
 800aa00:	9b08      	ldr	r3, [sp, #32]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 80af 	beq.w	800ab66 <_dtoa_r+0x8be>
 800aa08:	2e00      	cmp	r6, #0
 800aa0a:	dd13      	ble.n	800aa34 <_dtoa_r+0x78c>
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	4632      	mov	r2, r6
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fcdb 	bl	800b3cc <__pow5mult>
 800aa16:	ee18 2a10 	vmov	r2, s16
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 fc2a 	bl	800b278 <__multiply>
 800aa24:	ee18 1a10 	vmov	r1, s16
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 fb56 	bl	800b0dc <_Bfree>
 800aa30:	ee08 8a10 	vmov	s16, r8
 800aa34:	9b07      	ldr	r3, [sp, #28]
 800aa36:	1b9a      	subs	r2, r3, r6
 800aa38:	d006      	beq.n	800aa48 <_dtoa_r+0x7a0>
 800aa3a:	ee18 1a10 	vmov	r1, s16
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 fcc4 	bl	800b3cc <__pow5mult>
 800aa44:	ee08 0a10 	vmov	s16, r0
 800aa48:	2101      	movs	r1, #1
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fbfe 	bl	800b24c <__i2b>
 800aa50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	4606      	mov	r6, r0
 800aa56:	f340 8088 	ble.w	800ab6a <_dtoa_r+0x8c2>
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 fcb4 	bl	800b3cc <__pow5mult>
 800aa64:	9b06      	ldr	r3, [sp, #24]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	4606      	mov	r6, r0
 800aa6a:	f340 8081 	ble.w	800ab70 <_dtoa_r+0x8c8>
 800aa6e:	f04f 0800 	mov.w	r8, #0
 800aa72:	6933      	ldr	r3, [r6, #16]
 800aa74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa78:	6918      	ldr	r0, [r3, #16]
 800aa7a:	f000 fb97 	bl	800b1ac <__hi0bits>
 800aa7e:	f1c0 0020 	rsb	r0, r0, #32
 800aa82:	9b05      	ldr	r3, [sp, #20]
 800aa84:	4418      	add	r0, r3
 800aa86:	f010 001f 	ands.w	r0, r0, #31
 800aa8a:	f000 8092 	beq.w	800abb2 <_dtoa_r+0x90a>
 800aa8e:	f1c0 0320 	rsb	r3, r0, #32
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	f340 808a 	ble.w	800abac <_dtoa_r+0x904>
 800aa98:	f1c0 001c 	rsb	r0, r0, #28
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	4403      	add	r3, r0
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	9b05      	ldr	r3, [sp, #20]
 800aaa4:	4403      	add	r3, r0
 800aaa6:	4405      	add	r5, r0
 800aaa8:	9305      	str	r3, [sp, #20]
 800aaaa:	9b04      	ldr	r3, [sp, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	dd07      	ble.n	800aac0 <_dtoa_r+0x818>
 800aab0:	ee18 1a10 	vmov	r1, s16
 800aab4:	461a      	mov	r2, r3
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 fce2 	bl	800b480 <__lshift>
 800aabc:	ee08 0a10 	vmov	s16, r0
 800aac0:	9b05      	ldr	r3, [sp, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dd05      	ble.n	800aad2 <_dtoa_r+0x82a>
 800aac6:	4631      	mov	r1, r6
 800aac8:	461a      	mov	r2, r3
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fcd8 	bl	800b480 <__lshift>
 800aad0:	4606      	mov	r6, r0
 800aad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d06e      	beq.n	800abb6 <_dtoa_r+0x90e>
 800aad8:	ee18 0a10 	vmov	r0, s16
 800aadc:	4631      	mov	r1, r6
 800aade:	f000 fd3f 	bl	800b560 <__mcmp>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	da67      	bge.n	800abb6 <_dtoa_r+0x90e>
 800aae6:	9b00      	ldr	r3, [sp, #0]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	ee18 1a10 	vmov	r1, s16
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	220a      	movs	r2, #10
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 fb13 	bl	800b120 <__multadd>
 800aafa:	9b08      	ldr	r3, [sp, #32]
 800aafc:	ee08 0a10 	vmov	s16, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 81b1 	beq.w	800ae68 <_dtoa_r+0xbc0>
 800ab06:	2300      	movs	r3, #0
 800ab08:	4639      	mov	r1, r7
 800ab0a:	220a      	movs	r2, #10
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 fb07 	bl	800b120 <__multadd>
 800ab12:	9b02      	ldr	r3, [sp, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	4607      	mov	r7, r0
 800ab18:	f300 808e 	bgt.w	800ac38 <_dtoa_r+0x990>
 800ab1c:	9b06      	ldr	r3, [sp, #24]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	dc51      	bgt.n	800abc6 <_dtoa_r+0x91e>
 800ab22:	e089      	b.n	800ac38 <_dtoa_r+0x990>
 800ab24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab2a:	e74b      	b.n	800a9c4 <_dtoa_r+0x71c>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	1e5e      	subs	r6, r3, #1
 800ab30:	9b07      	ldr	r3, [sp, #28]
 800ab32:	42b3      	cmp	r3, r6
 800ab34:	bfbf      	itttt	lt
 800ab36:	9b07      	ldrlt	r3, [sp, #28]
 800ab38:	9607      	strlt	r6, [sp, #28]
 800ab3a:	1af2      	sublt	r2, r6, r3
 800ab3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab3e:	bfb6      	itet	lt
 800ab40:	189b      	addlt	r3, r3, r2
 800ab42:	1b9e      	subge	r6, r3, r6
 800ab44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	bfb8      	it	lt
 800ab4a:	2600      	movlt	r6, #0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bfb7      	itett	lt
 800ab50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab58:	1a9d      	sublt	r5, r3, r2
 800ab5a:	2300      	movlt	r3, #0
 800ab5c:	e734      	b.n	800a9c8 <_dtoa_r+0x720>
 800ab5e:	9e07      	ldr	r6, [sp, #28]
 800ab60:	9d04      	ldr	r5, [sp, #16]
 800ab62:	9f08      	ldr	r7, [sp, #32]
 800ab64:	e73b      	b.n	800a9de <_dtoa_r+0x736>
 800ab66:	9a07      	ldr	r2, [sp, #28]
 800ab68:	e767      	b.n	800aa3a <_dtoa_r+0x792>
 800ab6a:	9b06      	ldr	r3, [sp, #24]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	dc18      	bgt.n	800aba2 <_dtoa_r+0x8fa>
 800ab70:	f1ba 0f00 	cmp.w	sl, #0
 800ab74:	d115      	bne.n	800aba2 <_dtoa_r+0x8fa>
 800ab76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab7a:	b993      	cbnz	r3, 800aba2 <_dtoa_r+0x8fa>
 800ab7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab80:	0d1b      	lsrs	r3, r3, #20
 800ab82:	051b      	lsls	r3, r3, #20
 800ab84:	b183      	cbz	r3, 800aba8 <_dtoa_r+0x900>
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	9b05      	ldr	r3, [sp, #20]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	9305      	str	r3, [sp, #20]
 800ab92:	f04f 0801 	mov.w	r8, #1
 800ab96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f47f af6a 	bne.w	800aa72 <_dtoa_r+0x7ca>
 800ab9e:	2001      	movs	r0, #1
 800aba0:	e76f      	b.n	800aa82 <_dtoa_r+0x7da>
 800aba2:	f04f 0800 	mov.w	r8, #0
 800aba6:	e7f6      	b.n	800ab96 <_dtoa_r+0x8ee>
 800aba8:	4698      	mov	r8, r3
 800abaa:	e7f4      	b.n	800ab96 <_dtoa_r+0x8ee>
 800abac:	f43f af7d 	beq.w	800aaaa <_dtoa_r+0x802>
 800abb0:	4618      	mov	r0, r3
 800abb2:	301c      	adds	r0, #28
 800abb4:	e772      	b.n	800aa9c <_dtoa_r+0x7f4>
 800abb6:	9b03      	ldr	r3, [sp, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dc37      	bgt.n	800ac2c <_dtoa_r+0x984>
 800abbc:	9b06      	ldr	r3, [sp, #24]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	dd34      	ble.n	800ac2c <_dtoa_r+0x984>
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	9302      	str	r3, [sp, #8]
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	b96b      	cbnz	r3, 800abe6 <_dtoa_r+0x93e>
 800abca:	4631      	mov	r1, r6
 800abcc:	2205      	movs	r2, #5
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 faa6 	bl	800b120 <__multadd>
 800abd4:	4601      	mov	r1, r0
 800abd6:	4606      	mov	r6, r0
 800abd8:	ee18 0a10 	vmov	r0, s16
 800abdc:	f000 fcc0 	bl	800b560 <__mcmp>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	f73f adbb 	bgt.w	800a75c <_dtoa_r+0x4b4>
 800abe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe8:	9d01      	ldr	r5, [sp, #4]
 800abea:	43db      	mvns	r3, r3
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	f04f 0800 	mov.w	r8, #0
 800abf2:	4631      	mov	r1, r6
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fa71 	bl	800b0dc <_Bfree>
 800abfa:	2f00      	cmp	r7, #0
 800abfc:	f43f aea4 	beq.w	800a948 <_dtoa_r+0x6a0>
 800ac00:	f1b8 0f00 	cmp.w	r8, #0
 800ac04:	d005      	beq.n	800ac12 <_dtoa_r+0x96a>
 800ac06:	45b8      	cmp	r8, r7
 800ac08:	d003      	beq.n	800ac12 <_dtoa_r+0x96a>
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 fa65 	bl	800b0dc <_Bfree>
 800ac12:	4639      	mov	r1, r7
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 fa61 	bl	800b0dc <_Bfree>
 800ac1a:	e695      	b.n	800a948 <_dtoa_r+0x6a0>
 800ac1c:	2600      	movs	r6, #0
 800ac1e:	4637      	mov	r7, r6
 800ac20:	e7e1      	b.n	800abe6 <_dtoa_r+0x93e>
 800ac22:	9700      	str	r7, [sp, #0]
 800ac24:	4637      	mov	r7, r6
 800ac26:	e599      	b.n	800a75c <_dtoa_r+0x4b4>
 800ac28:	40240000 	.word	0x40240000
 800ac2c:	9b08      	ldr	r3, [sp, #32]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f000 80ca 	beq.w	800adc8 <_dtoa_r+0xb20>
 800ac34:	9b03      	ldr	r3, [sp, #12]
 800ac36:	9302      	str	r3, [sp, #8]
 800ac38:	2d00      	cmp	r5, #0
 800ac3a:	dd05      	ble.n	800ac48 <_dtoa_r+0x9a0>
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	462a      	mov	r2, r5
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 fc1d 	bl	800b480 <__lshift>
 800ac46:	4607      	mov	r7, r0
 800ac48:	f1b8 0f00 	cmp.w	r8, #0
 800ac4c:	d05b      	beq.n	800ad06 <_dtoa_r+0xa5e>
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fa03 	bl	800b05c <_Balloc>
 800ac56:	4605      	mov	r5, r0
 800ac58:	b928      	cbnz	r0, 800ac66 <_dtoa_r+0x9be>
 800ac5a:	4b87      	ldr	r3, [pc, #540]	; (800ae78 <_dtoa_r+0xbd0>)
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac62:	f7ff bb3b 	b.w	800a2dc <_dtoa_r+0x34>
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	3202      	adds	r2, #2
 800ac6a:	0092      	lsls	r2, r2, #2
 800ac6c:	f107 010c 	add.w	r1, r7, #12
 800ac70:	300c      	adds	r0, #12
 800ac72:	f7fe fc5e 	bl	8009532 <memcpy>
 800ac76:	2201      	movs	r2, #1
 800ac78:	4629      	mov	r1, r5
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fc00 	bl	800b480 <__lshift>
 800ac80:	9b01      	ldr	r3, [sp, #4]
 800ac82:	f103 0901 	add.w	r9, r3, #1
 800ac86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	9305      	str	r3, [sp, #20]
 800ac8e:	f00a 0301 	and.w	r3, sl, #1
 800ac92:	46b8      	mov	r8, r7
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	4607      	mov	r7, r0
 800ac98:	4631      	mov	r1, r6
 800ac9a:	ee18 0a10 	vmov	r0, s16
 800ac9e:	f7ff fa77 	bl	800a190 <quorem>
 800aca2:	4641      	mov	r1, r8
 800aca4:	9002      	str	r0, [sp, #8]
 800aca6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800acaa:	ee18 0a10 	vmov	r0, s16
 800acae:	f000 fc57 	bl	800b560 <__mcmp>
 800acb2:	463a      	mov	r2, r7
 800acb4:	9003      	str	r0, [sp, #12]
 800acb6:	4631      	mov	r1, r6
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 fc6d 	bl	800b598 <__mdiff>
 800acbe:	68c2      	ldr	r2, [r0, #12]
 800acc0:	f109 3bff 	add.w	fp, r9, #4294967295
 800acc4:	4605      	mov	r5, r0
 800acc6:	bb02      	cbnz	r2, 800ad0a <_dtoa_r+0xa62>
 800acc8:	4601      	mov	r1, r0
 800acca:	ee18 0a10 	vmov	r0, s16
 800acce:	f000 fc47 	bl	800b560 <__mcmp>
 800acd2:	4602      	mov	r2, r0
 800acd4:	4629      	mov	r1, r5
 800acd6:	4620      	mov	r0, r4
 800acd8:	9207      	str	r2, [sp, #28]
 800acda:	f000 f9ff 	bl	800b0dc <_Bfree>
 800acde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ace2:	ea43 0102 	orr.w	r1, r3, r2
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	430b      	orrs	r3, r1
 800acea:	464d      	mov	r5, r9
 800acec:	d10f      	bne.n	800ad0e <_dtoa_r+0xa66>
 800acee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acf2:	d02a      	beq.n	800ad4a <_dtoa_r+0xaa2>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd02      	ble.n	800ad00 <_dtoa_r+0xa58>
 800acfa:	9b02      	ldr	r3, [sp, #8]
 800acfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad00:	f88b a000 	strb.w	sl, [fp]
 800ad04:	e775      	b.n	800abf2 <_dtoa_r+0x94a>
 800ad06:	4638      	mov	r0, r7
 800ad08:	e7ba      	b.n	800ac80 <_dtoa_r+0x9d8>
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	e7e2      	b.n	800acd4 <_dtoa_r+0xa2c>
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	db04      	blt.n	800ad1e <_dtoa_r+0xa76>
 800ad14:	9906      	ldr	r1, [sp, #24]
 800ad16:	430b      	orrs	r3, r1
 800ad18:	9904      	ldr	r1, [sp, #16]
 800ad1a:	430b      	orrs	r3, r1
 800ad1c:	d122      	bne.n	800ad64 <_dtoa_r+0xabc>
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	ddee      	ble.n	800ad00 <_dtoa_r+0xa58>
 800ad22:	ee18 1a10 	vmov	r1, s16
 800ad26:	2201      	movs	r2, #1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 fba9 	bl	800b480 <__lshift>
 800ad2e:	4631      	mov	r1, r6
 800ad30:	ee08 0a10 	vmov	s16, r0
 800ad34:	f000 fc14 	bl	800b560 <__mcmp>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	dc03      	bgt.n	800ad44 <_dtoa_r+0xa9c>
 800ad3c:	d1e0      	bne.n	800ad00 <_dtoa_r+0xa58>
 800ad3e:	f01a 0f01 	tst.w	sl, #1
 800ad42:	d0dd      	beq.n	800ad00 <_dtoa_r+0xa58>
 800ad44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad48:	d1d7      	bne.n	800acfa <_dtoa_r+0xa52>
 800ad4a:	2339      	movs	r3, #57	; 0x39
 800ad4c:	f88b 3000 	strb.w	r3, [fp]
 800ad50:	462b      	mov	r3, r5
 800ad52:	461d      	mov	r5, r3
 800ad54:	3b01      	subs	r3, #1
 800ad56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad5a:	2a39      	cmp	r2, #57	; 0x39
 800ad5c:	d071      	beq.n	800ae42 <_dtoa_r+0xb9a>
 800ad5e:	3201      	adds	r2, #1
 800ad60:	701a      	strb	r2, [r3, #0]
 800ad62:	e746      	b.n	800abf2 <_dtoa_r+0x94a>
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	dd07      	ble.n	800ad78 <_dtoa_r+0xad0>
 800ad68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad6c:	d0ed      	beq.n	800ad4a <_dtoa_r+0xaa2>
 800ad6e:	f10a 0301 	add.w	r3, sl, #1
 800ad72:	f88b 3000 	strb.w	r3, [fp]
 800ad76:	e73c      	b.n	800abf2 <_dtoa_r+0x94a>
 800ad78:	9b05      	ldr	r3, [sp, #20]
 800ad7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad7e:	4599      	cmp	r9, r3
 800ad80:	d047      	beq.n	800ae12 <_dtoa_r+0xb6a>
 800ad82:	ee18 1a10 	vmov	r1, s16
 800ad86:	2300      	movs	r3, #0
 800ad88:	220a      	movs	r2, #10
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 f9c8 	bl	800b120 <__multadd>
 800ad90:	45b8      	cmp	r8, r7
 800ad92:	ee08 0a10 	vmov	s16, r0
 800ad96:	f04f 0300 	mov.w	r3, #0
 800ad9a:	f04f 020a 	mov.w	r2, #10
 800ad9e:	4641      	mov	r1, r8
 800ada0:	4620      	mov	r0, r4
 800ada2:	d106      	bne.n	800adb2 <_dtoa_r+0xb0a>
 800ada4:	f000 f9bc 	bl	800b120 <__multadd>
 800ada8:	4680      	mov	r8, r0
 800adaa:	4607      	mov	r7, r0
 800adac:	f109 0901 	add.w	r9, r9, #1
 800adb0:	e772      	b.n	800ac98 <_dtoa_r+0x9f0>
 800adb2:	f000 f9b5 	bl	800b120 <__multadd>
 800adb6:	4639      	mov	r1, r7
 800adb8:	4680      	mov	r8, r0
 800adba:	2300      	movs	r3, #0
 800adbc:	220a      	movs	r2, #10
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 f9ae 	bl	800b120 <__multadd>
 800adc4:	4607      	mov	r7, r0
 800adc6:	e7f1      	b.n	800adac <_dtoa_r+0xb04>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	9302      	str	r3, [sp, #8]
 800adcc:	9d01      	ldr	r5, [sp, #4]
 800adce:	ee18 0a10 	vmov	r0, s16
 800add2:	4631      	mov	r1, r6
 800add4:	f7ff f9dc 	bl	800a190 <quorem>
 800add8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800addc:	9b01      	ldr	r3, [sp, #4]
 800adde:	f805 ab01 	strb.w	sl, [r5], #1
 800ade2:	1aea      	subs	r2, r5, r3
 800ade4:	9b02      	ldr	r3, [sp, #8]
 800ade6:	4293      	cmp	r3, r2
 800ade8:	dd09      	ble.n	800adfe <_dtoa_r+0xb56>
 800adea:	ee18 1a10 	vmov	r1, s16
 800adee:	2300      	movs	r3, #0
 800adf0:	220a      	movs	r2, #10
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 f994 	bl	800b120 <__multadd>
 800adf8:	ee08 0a10 	vmov	s16, r0
 800adfc:	e7e7      	b.n	800adce <_dtoa_r+0xb26>
 800adfe:	9b02      	ldr	r3, [sp, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfc8      	it	gt
 800ae04:	461d      	movgt	r5, r3
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	bfd8      	it	le
 800ae0a:	2501      	movle	r5, #1
 800ae0c:	441d      	add	r5, r3
 800ae0e:	f04f 0800 	mov.w	r8, #0
 800ae12:	ee18 1a10 	vmov	r1, s16
 800ae16:	2201      	movs	r2, #1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f000 fb31 	bl	800b480 <__lshift>
 800ae1e:	4631      	mov	r1, r6
 800ae20:	ee08 0a10 	vmov	s16, r0
 800ae24:	f000 fb9c 	bl	800b560 <__mcmp>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	dc91      	bgt.n	800ad50 <_dtoa_r+0xaa8>
 800ae2c:	d102      	bne.n	800ae34 <_dtoa_r+0xb8c>
 800ae2e:	f01a 0f01 	tst.w	sl, #1
 800ae32:	d18d      	bne.n	800ad50 <_dtoa_r+0xaa8>
 800ae34:	462b      	mov	r3, r5
 800ae36:	461d      	mov	r5, r3
 800ae38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae3c:	2a30      	cmp	r2, #48	; 0x30
 800ae3e:	d0fa      	beq.n	800ae36 <_dtoa_r+0xb8e>
 800ae40:	e6d7      	b.n	800abf2 <_dtoa_r+0x94a>
 800ae42:	9a01      	ldr	r2, [sp, #4]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d184      	bne.n	800ad52 <_dtoa_r+0xaaa>
 800ae48:	9b00      	ldr	r3, [sp, #0]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	2331      	movs	r3, #49	; 0x31
 800ae50:	7013      	strb	r3, [r2, #0]
 800ae52:	e6ce      	b.n	800abf2 <_dtoa_r+0x94a>
 800ae54:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <_dtoa_r+0xbd4>)
 800ae56:	f7ff ba95 	b.w	800a384 <_dtoa_r+0xdc>
 800ae5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f47f aa6e 	bne.w	800a33e <_dtoa_r+0x96>
 800ae62:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <_dtoa_r+0xbd8>)
 800ae64:	f7ff ba8e 	b.w	800a384 <_dtoa_r+0xdc>
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	dcae      	bgt.n	800adcc <_dtoa_r+0xb24>
 800ae6e:	9b06      	ldr	r3, [sp, #24]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	f73f aea8 	bgt.w	800abc6 <_dtoa_r+0x91e>
 800ae76:	e7a9      	b.n	800adcc <_dtoa_r+0xb24>
 800ae78:	0800cb1f 	.word	0x0800cb1f
 800ae7c:	0800ca7c 	.word	0x0800ca7c
 800ae80:	0800caa0 	.word	0x0800caa0

0800ae84 <__sflush_r>:
 800ae84:	898a      	ldrh	r2, [r1, #12]
 800ae86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	0710      	lsls	r0, r2, #28
 800ae8e:	460c      	mov	r4, r1
 800ae90:	d458      	bmi.n	800af44 <__sflush_r+0xc0>
 800ae92:	684b      	ldr	r3, [r1, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	dc05      	bgt.n	800aea4 <__sflush_r+0x20>
 800ae98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dc02      	bgt.n	800aea4 <__sflush_r+0x20>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	d0f9      	beq.n	800ae9e <__sflush_r+0x1a>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aeb0:	682f      	ldr	r7, [r5, #0]
 800aeb2:	602b      	str	r3, [r5, #0]
 800aeb4:	d032      	beq.n	800af1c <__sflush_r+0x98>
 800aeb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	075a      	lsls	r2, r3, #29
 800aebc:	d505      	bpl.n	800aeca <__sflush_r+0x46>
 800aebe:	6863      	ldr	r3, [r4, #4]
 800aec0:	1ac0      	subs	r0, r0, r3
 800aec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aec4:	b10b      	cbz	r3, 800aeca <__sflush_r+0x46>
 800aec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aec8:	1ac0      	subs	r0, r0, r3
 800aeca:	2300      	movs	r3, #0
 800aecc:	4602      	mov	r2, r0
 800aece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aed0:	6a21      	ldr	r1, [r4, #32]
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b0      	blx	r6
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	d106      	bne.n	800aeea <__sflush_r+0x66>
 800aedc:	6829      	ldr	r1, [r5, #0]
 800aede:	291d      	cmp	r1, #29
 800aee0:	d82c      	bhi.n	800af3c <__sflush_r+0xb8>
 800aee2:	4a2a      	ldr	r2, [pc, #168]	; (800af8c <__sflush_r+0x108>)
 800aee4:	40ca      	lsrs	r2, r1
 800aee6:	07d6      	lsls	r6, r2, #31
 800aee8:	d528      	bpl.n	800af3c <__sflush_r+0xb8>
 800aeea:	2200      	movs	r2, #0
 800aeec:	6062      	str	r2, [r4, #4]
 800aeee:	04d9      	lsls	r1, r3, #19
 800aef0:	6922      	ldr	r2, [r4, #16]
 800aef2:	6022      	str	r2, [r4, #0]
 800aef4:	d504      	bpl.n	800af00 <__sflush_r+0x7c>
 800aef6:	1c42      	adds	r2, r0, #1
 800aef8:	d101      	bne.n	800aefe <__sflush_r+0x7a>
 800aefa:	682b      	ldr	r3, [r5, #0]
 800aefc:	b903      	cbnz	r3, 800af00 <__sflush_r+0x7c>
 800aefe:	6560      	str	r0, [r4, #84]	; 0x54
 800af00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af02:	602f      	str	r7, [r5, #0]
 800af04:	2900      	cmp	r1, #0
 800af06:	d0ca      	beq.n	800ae9e <__sflush_r+0x1a>
 800af08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af0c:	4299      	cmp	r1, r3
 800af0e:	d002      	beq.n	800af16 <__sflush_r+0x92>
 800af10:	4628      	mov	r0, r5
 800af12:	f000 fc3d 	bl	800b790 <_free_r>
 800af16:	2000      	movs	r0, #0
 800af18:	6360      	str	r0, [r4, #52]	; 0x34
 800af1a:	e7c1      	b.n	800aea0 <__sflush_r+0x1c>
 800af1c:	6a21      	ldr	r1, [r4, #32]
 800af1e:	2301      	movs	r3, #1
 800af20:	4628      	mov	r0, r5
 800af22:	47b0      	blx	r6
 800af24:	1c41      	adds	r1, r0, #1
 800af26:	d1c7      	bne.n	800aeb8 <__sflush_r+0x34>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0c4      	beq.n	800aeb8 <__sflush_r+0x34>
 800af2e:	2b1d      	cmp	r3, #29
 800af30:	d001      	beq.n	800af36 <__sflush_r+0xb2>
 800af32:	2b16      	cmp	r3, #22
 800af34:	d101      	bne.n	800af3a <__sflush_r+0xb6>
 800af36:	602f      	str	r7, [r5, #0]
 800af38:	e7b1      	b.n	800ae9e <__sflush_r+0x1a>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af40:	81a3      	strh	r3, [r4, #12]
 800af42:	e7ad      	b.n	800aea0 <__sflush_r+0x1c>
 800af44:	690f      	ldr	r7, [r1, #16]
 800af46:	2f00      	cmp	r7, #0
 800af48:	d0a9      	beq.n	800ae9e <__sflush_r+0x1a>
 800af4a:	0793      	lsls	r3, r2, #30
 800af4c:	680e      	ldr	r6, [r1, #0]
 800af4e:	bf08      	it	eq
 800af50:	694b      	ldreq	r3, [r1, #20]
 800af52:	600f      	str	r7, [r1, #0]
 800af54:	bf18      	it	ne
 800af56:	2300      	movne	r3, #0
 800af58:	eba6 0807 	sub.w	r8, r6, r7
 800af5c:	608b      	str	r3, [r1, #8]
 800af5e:	f1b8 0f00 	cmp.w	r8, #0
 800af62:	dd9c      	ble.n	800ae9e <__sflush_r+0x1a>
 800af64:	6a21      	ldr	r1, [r4, #32]
 800af66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af68:	4643      	mov	r3, r8
 800af6a:	463a      	mov	r2, r7
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b0      	blx	r6
 800af70:	2800      	cmp	r0, #0
 800af72:	dc06      	bgt.n	800af82 <__sflush_r+0xfe>
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295
 800af80:	e78e      	b.n	800aea0 <__sflush_r+0x1c>
 800af82:	4407      	add	r7, r0
 800af84:	eba8 0800 	sub.w	r8, r8, r0
 800af88:	e7e9      	b.n	800af5e <__sflush_r+0xda>
 800af8a:	bf00      	nop
 800af8c:	20400001 	.word	0x20400001

0800af90 <_fflush_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	690b      	ldr	r3, [r1, #16]
 800af94:	4605      	mov	r5, r0
 800af96:	460c      	mov	r4, r1
 800af98:	b913      	cbnz	r3, 800afa0 <_fflush_r+0x10>
 800af9a:	2500      	movs	r5, #0
 800af9c:	4628      	mov	r0, r5
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	b118      	cbz	r0, 800afaa <_fflush_r+0x1a>
 800afa2:	6983      	ldr	r3, [r0, #24]
 800afa4:	b90b      	cbnz	r3, 800afaa <_fflush_r+0x1a>
 800afa6:	f7fe f9ff 	bl	80093a8 <__sinit>
 800afaa:	4b14      	ldr	r3, [pc, #80]	; (800affc <_fflush_r+0x6c>)
 800afac:	429c      	cmp	r4, r3
 800afae:	d11b      	bne.n	800afe8 <_fflush_r+0x58>
 800afb0:	686c      	ldr	r4, [r5, #4]
 800afb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d0ef      	beq.n	800af9a <_fflush_r+0xa>
 800afba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afbc:	07d0      	lsls	r0, r2, #31
 800afbe:	d404      	bmi.n	800afca <_fflush_r+0x3a>
 800afc0:	0599      	lsls	r1, r3, #22
 800afc2:	d402      	bmi.n	800afca <_fflush_r+0x3a>
 800afc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afc6:	f7fe fab2 	bl	800952e <__retarget_lock_acquire_recursive>
 800afca:	4628      	mov	r0, r5
 800afcc:	4621      	mov	r1, r4
 800afce:	f7ff ff59 	bl	800ae84 <__sflush_r>
 800afd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afd4:	07da      	lsls	r2, r3, #31
 800afd6:	4605      	mov	r5, r0
 800afd8:	d4e0      	bmi.n	800af9c <_fflush_r+0xc>
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	059b      	lsls	r3, r3, #22
 800afde:	d4dd      	bmi.n	800af9c <_fflush_r+0xc>
 800afe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afe2:	f7fe faa5 	bl	8009530 <__retarget_lock_release_recursive>
 800afe6:	e7d9      	b.n	800af9c <_fflush_r+0xc>
 800afe8:	4b05      	ldr	r3, [pc, #20]	; (800b000 <_fflush_r+0x70>)
 800afea:	429c      	cmp	r4, r3
 800afec:	d101      	bne.n	800aff2 <_fflush_r+0x62>
 800afee:	68ac      	ldr	r4, [r5, #8]
 800aff0:	e7df      	b.n	800afb2 <_fflush_r+0x22>
 800aff2:	4b04      	ldr	r3, [pc, #16]	; (800b004 <_fflush_r+0x74>)
 800aff4:	429c      	cmp	r4, r3
 800aff6:	bf08      	it	eq
 800aff8:	68ec      	ldreq	r4, [r5, #12]
 800affa:	e7da      	b.n	800afb2 <_fflush_r+0x22>
 800affc:	0800ca28 	.word	0x0800ca28
 800b000:	0800ca48 	.word	0x0800ca48
 800b004:	0800ca08 	.word	0x0800ca08

0800b008 <_localeconv_r>:
 800b008:	4800      	ldr	r0, [pc, #0]	; (800b00c <_localeconv_r+0x4>)
 800b00a:	4770      	bx	lr
 800b00c:	20000178 	.word	0x20000178

0800b010 <_lseek_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	; (800b030 <_lseek_r+0x20>)
 800b014:	4604      	mov	r4, r0
 800b016:	4608      	mov	r0, r1
 800b018:	4611      	mov	r1, r2
 800b01a:	2200      	movs	r2, #0
 800b01c:	602a      	str	r2, [r5, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	f7f8 fb08 	bl	8003634 <_lseek>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_lseek_r+0x1e>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_lseek_r+0x1e>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	20004d74 	.word	0x20004d74

0800b034 <malloc>:
 800b034:	4b02      	ldr	r3, [pc, #8]	; (800b040 <malloc+0xc>)
 800b036:	4601      	mov	r1, r0
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	f7fe bacb 	b.w	80095d4 <_malloc_r>
 800b03e:	bf00      	nop
 800b040:	20000024 	.word	0x20000024

0800b044 <__malloc_lock>:
 800b044:	4801      	ldr	r0, [pc, #4]	; (800b04c <__malloc_lock+0x8>)
 800b046:	f7fe ba72 	b.w	800952e <__retarget_lock_acquire_recursive>
 800b04a:	bf00      	nop
 800b04c:	20004d68 	.word	0x20004d68

0800b050 <__malloc_unlock>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__malloc_unlock+0x8>)
 800b052:	f7fe ba6d 	b.w	8009530 <__retarget_lock_release_recursive>
 800b056:	bf00      	nop
 800b058:	20004d68 	.word	0x20004d68

0800b05c <_Balloc>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b060:	4604      	mov	r4, r0
 800b062:	460d      	mov	r5, r1
 800b064:	b976      	cbnz	r6, 800b084 <_Balloc+0x28>
 800b066:	2010      	movs	r0, #16
 800b068:	f7ff ffe4 	bl	800b034 <malloc>
 800b06c:	4602      	mov	r2, r0
 800b06e:	6260      	str	r0, [r4, #36]	; 0x24
 800b070:	b920      	cbnz	r0, 800b07c <_Balloc+0x20>
 800b072:	4b18      	ldr	r3, [pc, #96]	; (800b0d4 <_Balloc+0x78>)
 800b074:	4818      	ldr	r0, [pc, #96]	; (800b0d8 <_Balloc+0x7c>)
 800b076:	2166      	movs	r1, #102	; 0x66
 800b078:	f000 fd44 	bl	800bb04 <__assert_func>
 800b07c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b080:	6006      	str	r6, [r0, #0]
 800b082:	60c6      	str	r6, [r0, #12]
 800b084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b086:	68f3      	ldr	r3, [r6, #12]
 800b088:	b183      	cbz	r3, 800b0ac <_Balloc+0x50>
 800b08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b092:	b9b8      	cbnz	r0, 800b0c4 <_Balloc+0x68>
 800b094:	2101      	movs	r1, #1
 800b096:	fa01 f605 	lsl.w	r6, r1, r5
 800b09a:	1d72      	adds	r2, r6, #5
 800b09c:	0092      	lsls	r2, r2, #2
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 fb60 	bl	800b764 <_calloc_r>
 800b0a4:	b160      	cbz	r0, 800b0c0 <_Balloc+0x64>
 800b0a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0aa:	e00e      	b.n	800b0ca <_Balloc+0x6e>
 800b0ac:	2221      	movs	r2, #33	; 0x21
 800b0ae:	2104      	movs	r1, #4
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fb57 	bl	800b764 <_calloc_r>
 800b0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0b8:	60f0      	str	r0, [r6, #12]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e4      	bne.n	800b08a <_Balloc+0x2e>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	bd70      	pop	{r4, r5, r6, pc}
 800b0c4:	6802      	ldr	r2, [r0, #0]
 800b0c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0d0:	e7f7      	b.n	800b0c2 <_Balloc+0x66>
 800b0d2:	bf00      	nop
 800b0d4:	0800caad 	.word	0x0800caad
 800b0d8:	0800cb30 	.word	0x0800cb30

0800b0dc <_Bfree>:
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	b976      	cbnz	r6, 800b104 <_Bfree+0x28>
 800b0e6:	2010      	movs	r0, #16
 800b0e8:	f7ff ffa4 	bl	800b034 <malloc>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	6268      	str	r0, [r5, #36]	; 0x24
 800b0f0:	b920      	cbnz	r0, 800b0fc <_Bfree+0x20>
 800b0f2:	4b09      	ldr	r3, [pc, #36]	; (800b118 <_Bfree+0x3c>)
 800b0f4:	4809      	ldr	r0, [pc, #36]	; (800b11c <_Bfree+0x40>)
 800b0f6:	218a      	movs	r1, #138	; 0x8a
 800b0f8:	f000 fd04 	bl	800bb04 <__assert_func>
 800b0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b100:	6006      	str	r6, [r0, #0]
 800b102:	60c6      	str	r6, [r0, #12]
 800b104:	b13c      	cbz	r4, 800b116 <_Bfree+0x3a>
 800b106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b108:	6862      	ldr	r2, [r4, #4]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b110:	6021      	str	r1, [r4, #0]
 800b112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	0800caad 	.word	0x0800caad
 800b11c:	0800cb30 	.word	0x0800cb30

0800b120 <__multadd>:
 800b120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b124:	690d      	ldr	r5, [r1, #16]
 800b126:	4607      	mov	r7, r0
 800b128:	460c      	mov	r4, r1
 800b12a:	461e      	mov	r6, r3
 800b12c:	f101 0c14 	add.w	ip, r1, #20
 800b130:	2000      	movs	r0, #0
 800b132:	f8dc 3000 	ldr.w	r3, [ip]
 800b136:	b299      	uxth	r1, r3
 800b138:	fb02 6101 	mla	r1, r2, r1, r6
 800b13c:	0c1e      	lsrs	r6, r3, #16
 800b13e:	0c0b      	lsrs	r3, r1, #16
 800b140:	fb02 3306 	mla	r3, r2, r6, r3
 800b144:	b289      	uxth	r1, r1
 800b146:	3001      	adds	r0, #1
 800b148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b14c:	4285      	cmp	r5, r0
 800b14e:	f84c 1b04 	str.w	r1, [ip], #4
 800b152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b156:	dcec      	bgt.n	800b132 <__multadd+0x12>
 800b158:	b30e      	cbz	r6, 800b19e <__multadd+0x7e>
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	42ab      	cmp	r3, r5
 800b15e:	dc19      	bgt.n	800b194 <__multadd+0x74>
 800b160:	6861      	ldr	r1, [r4, #4]
 800b162:	4638      	mov	r0, r7
 800b164:	3101      	adds	r1, #1
 800b166:	f7ff ff79 	bl	800b05c <_Balloc>
 800b16a:	4680      	mov	r8, r0
 800b16c:	b928      	cbnz	r0, 800b17a <__multadd+0x5a>
 800b16e:	4602      	mov	r2, r0
 800b170:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <__multadd+0x84>)
 800b172:	480d      	ldr	r0, [pc, #52]	; (800b1a8 <__multadd+0x88>)
 800b174:	21b5      	movs	r1, #181	; 0xb5
 800b176:	f000 fcc5 	bl	800bb04 <__assert_func>
 800b17a:	6922      	ldr	r2, [r4, #16]
 800b17c:	3202      	adds	r2, #2
 800b17e:	f104 010c 	add.w	r1, r4, #12
 800b182:	0092      	lsls	r2, r2, #2
 800b184:	300c      	adds	r0, #12
 800b186:	f7fe f9d4 	bl	8009532 <memcpy>
 800b18a:	4621      	mov	r1, r4
 800b18c:	4638      	mov	r0, r7
 800b18e:	f7ff ffa5 	bl	800b0dc <_Bfree>
 800b192:	4644      	mov	r4, r8
 800b194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b198:	3501      	adds	r5, #1
 800b19a:	615e      	str	r6, [r3, #20]
 800b19c:	6125      	str	r5, [r4, #16]
 800b19e:	4620      	mov	r0, r4
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	0800cb1f 	.word	0x0800cb1f
 800b1a8:	0800cb30 	.word	0x0800cb30

0800b1ac <__hi0bits>:
 800b1ac:	0c03      	lsrs	r3, r0, #16
 800b1ae:	041b      	lsls	r3, r3, #16
 800b1b0:	b9d3      	cbnz	r3, 800b1e8 <__hi0bits+0x3c>
 800b1b2:	0400      	lsls	r0, r0, #16
 800b1b4:	2310      	movs	r3, #16
 800b1b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1ba:	bf04      	itt	eq
 800b1bc:	0200      	lsleq	r0, r0, #8
 800b1be:	3308      	addeq	r3, #8
 800b1c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1c4:	bf04      	itt	eq
 800b1c6:	0100      	lsleq	r0, r0, #4
 800b1c8:	3304      	addeq	r3, #4
 800b1ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1ce:	bf04      	itt	eq
 800b1d0:	0080      	lsleq	r0, r0, #2
 800b1d2:	3302      	addeq	r3, #2
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	db05      	blt.n	800b1e4 <__hi0bits+0x38>
 800b1d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1dc:	f103 0301 	add.w	r3, r3, #1
 800b1e0:	bf08      	it	eq
 800b1e2:	2320      	moveq	r3, #32
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	4770      	bx	lr
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	e7e4      	b.n	800b1b6 <__hi0bits+0xa>

0800b1ec <__lo0bits>:
 800b1ec:	6803      	ldr	r3, [r0, #0]
 800b1ee:	f013 0207 	ands.w	r2, r3, #7
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	d00b      	beq.n	800b20e <__lo0bits+0x22>
 800b1f6:	07da      	lsls	r2, r3, #31
 800b1f8:	d423      	bmi.n	800b242 <__lo0bits+0x56>
 800b1fa:	0798      	lsls	r0, r3, #30
 800b1fc:	bf49      	itett	mi
 800b1fe:	085b      	lsrmi	r3, r3, #1
 800b200:	089b      	lsrpl	r3, r3, #2
 800b202:	2001      	movmi	r0, #1
 800b204:	600b      	strmi	r3, [r1, #0]
 800b206:	bf5c      	itt	pl
 800b208:	600b      	strpl	r3, [r1, #0]
 800b20a:	2002      	movpl	r0, #2
 800b20c:	4770      	bx	lr
 800b20e:	b298      	uxth	r0, r3
 800b210:	b9a8      	cbnz	r0, 800b23e <__lo0bits+0x52>
 800b212:	0c1b      	lsrs	r3, r3, #16
 800b214:	2010      	movs	r0, #16
 800b216:	b2da      	uxtb	r2, r3
 800b218:	b90a      	cbnz	r2, 800b21e <__lo0bits+0x32>
 800b21a:	3008      	adds	r0, #8
 800b21c:	0a1b      	lsrs	r3, r3, #8
 800b21e:	071a      	lsls	r2, r3, #28
 800b220:	bf04      	itt	eq
 800b222:	091b      	lsreq	r3, r3, #4
 800b224:	3004      	addeq	r0, #4
 800b226:	079a      	lsls	r2, r3, #30
 800b228:	bf04      	itt	eq
 800b22a:	089b      	lsreq	r3, r3, #2
 800b22c:	3002      	addeq	r0, #2
 800b22e:	07da      	lsls	r2, r3, #31
 800b230:	d403      	bmi.n	800b23a <__lo0bits+0x4e>
 800b232:	085b      	lsrs	r3, r3, #1
 800b234:	f100 0001 	add.w	r0, r0, #1
 800b238:	d005      	beq.n	800b246 <__lo0bits+0x5a>
 800b23a:	600b      	str	r3, [r1, #0]
 800b23c:	4770      	bx	lr
 800b23e:	4610      	mov	r0, r2
 800b240:	e7e9      	b.n	800b216 <__lo0bits+0x2a>
 800b242:	2000      	movs	r0, #0
 800b244:	4770      	bx	lr
 800b246:	2020      	movs	r0, #32
 800b248:	4770      	bx	lr
	...

0800b24c <__i2b>:
 800b24c:	b510      	push	{r4, lr}
 800b24e:	460c      	mov	r4, r1
 800b250:	2101      	movs	r1, #1
 800b252:	f7ff ff03 	bl	800b05c <_Balloc>
 800b256:	4602      	mov	r2, r0
 800b258:	b928      	cbnz	r0, 800b266 <__i2b+0x1a>
 800b25a:	4b05      	ldr	r3, [pc, #20]	; (800b270 <__i2b+0x24>)
 800b25c:	4805      	ldr	r0, [pc, #20]	; (800b274 <__i2b+0x28>)
 800b25e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b262:	f000 fc4f 	bl	800bb04 <__assert_func>
 800b266:	2301      	movs	r3, #1
 800b268:	6144      	str	r4, [r0, #20]
 800b26a:	6103      	str	r3, [r0, #16]
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	bf00      	nop
 800b270:	0800cb1f 	.word	0x0800cb1f
 800b274:	0800cb30 	.word	0x0800cb30

0800b278 <__multiply>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	4691      	mov	r9, r2
 800b27e:	690a      	ldr	r2, [r1, #16]
 800b280:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b284:	429a      	cmp	r2, r3
 800b286:	bfb8      	it	lt
 800b288:	460b      	movlt	r3, r1
 800b28a:	460c      	mov	r4, r1
 800b28c:	bfbc      	itt	lt
 800b28e:	464c      	movlt	r4, r9
 800b290:	4699      	movlt	r9, r3
 800b292:	6927      	ldr	r7, [r4, #16]
 800b294:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b298:	68a3      	ldr	r3, [r4, #8]
 800b29a:	6861      	ldr	r1, [r4, #4]
 800b29c:	eb07 060a 	add.w	r6, r7, sl
 800b2a0:	42b3      	cmp	r3, r6
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	bfb8      	it	lt
 800b2a6:	3101      	addlt	r1, #1
 800b2a8:	f7ff fed8 	bl	800b05c <_Balloc>
 800b2ac:	b930      	cbnz	r0, 800b2bc <__multiply+0x44>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	4b44      	ldr	r3, [pc, #272]	; (800b3c4 <__multiply+0x14c>)
 800b2b2:	4845      	ldr	r0, [pc, #276]	; (800b3c8 <__multiply+0x150>)
 800b2b4:	f240 115d 	movw	r1, #349	; 0x15d
 800b2b8:	f000 fc24 	bl	800bb04 <__assert_func>
 800b2bc:	f100 0514 	add.w	r5, r0, #20
 800b2c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2c4:	462b      	mov	r3, r5
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	4543      	cmp	r3, r8
 800b2ca:	d321      	bcc.n	800b310 <__multiply+0x98>
 800b2cc:	f104 0314 	add.w	r3, r4, #20
 800b2d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b2d4:	f109 0314 	add.w	r3, r9, #20
 800b2d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b2dc:	9202      	str	r2, [sp, #8]
 800b2de:	1b3a      	subs	r2, r7, r4
 800b2e0:	3a15      	subs	r2, #21
 800b2e2:	f022 0203 	bic.w	r2, r2, #3
 800b2e6:	3204      	adds	r2, #4
 800b2e8:	f104 0115 	add.w	r1, r4, #21
 800b2ec:	428f      	cmp	r7, r1
 800b2ee:	bf38      	it	cc
 800b2f0:	2204      	movcc	r2, #4
 800b2f2:	9201      	str	r2, [sp, #4]
 800b2f4:	9a02      	ldr	r2, [sp, #8]
 800b2f6:	9303      	str	r3, [sp, #12]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d80c      	bhi.n	800b316 <__multiply+0x9e>
 800b2fc:	2e00      	cmp	r6, #0
 800b2fe:	dd03      	ble.n	800b308 <__multiply+0x90>
 800b300:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b304:	2b00      	cmp	r3, #0
 800b306:	d05a      	beq.n	800b3be <__multiply+0x146>
 800b308:	6106      	str	r6, [r0, #16]
 800b30a:	b005      	add	sp, #20
 800b30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b310:	f843 2b04 	str.w	r2, [r3], #4
 800b314:	e7d8      	b.n	800b2c8 <__multiply+0x50>
 800b316:	f8b3 a000 	ldrh.w	sl, [r3]
 800b31a:	f1ba 0f00 	cmp.w	sl, #0
 800b31e:	d024      	beq.n	800b36a <__multiply+0xf2>
 800b320:	f104 0e14 	add.w	lr, r4, #20
 800b324:	46a9      	mov	r9, r5
 800b326:	f04f 0c00 	mov.w	ip, #0
 800b32a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b32e:	f8d9 1000 	ldr.w	r1, [r9]
 800b332:	fa1f fb82 	uxth.w	fp, r2
 800b336:	b289      	uxth	r1, r1
 800b338:	fb0a 110b 	mla	r1, sl, fp, r1
 800b33c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b340:	f8d9 2000 	ldr.w	r2, [r9]
 800b344:	4461      	add	r1, ip
 800b346:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b34a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b34e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b352:	b289      	uxth	r1, r1
 800b354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b358:	4577      	cmp	r7, lr
 800b35a:	f849 1b04 	str.w	r1, [r9], #4
 800b35e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b362:	d8e2      	bhi.n	800b32a <__multiply+0xb2>
 800b364:	9a01      	ldr	r2, [sp, #4]
 800b366:	f845 c002 	str.w	ip, [r5, r2]
 800b36a:	9a03      	ldr	r2, [sp, #12]
 800b36c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b370:	3304      	adds	r3, #4
 800b372:	f1b9 0f00 	cmp.w	r9, #0
 800b376:	d020      	beq.n	800b3ba <__multiply+0x142>
 800b378:	6829      	ldr	r1, [r5, #0]
 800b37a:	f104 0c14 	add.w	ip, r4, #20
 800b37e:	46ae      	mov	lr, r5
 800b380:	f04f 0a00 	mov.w	sl, #0
 800b384:	f8bc b000 	ldrh.w	fp, [ip]
 800b388:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b38c:	fb09 220b 	mla	r2, r9, fp, r2
 800b390:	4492      	add	sl, r2
 800b392:	b289      	uxth	r1, r1
 800b394:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b398:	f84e 1b04 	str.w	r1, [lr], #4
 800b39c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b3a0:	f8be 1000 	ldrh.w	r1, [lr]
 800b3a4:	0c12      	lsrs	r2, r2, #16
 800b3a6:	fb09 1102 	mla	r1, r9, r2, r1
 800b3aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b3ae:	4567      	cmp	r7, ip
 800b3b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b3b4:	d8e6      	bhi.n	800b384 <__multiply+0x10c>
 800b3b6:	9a01      	ldr	r2, [sp, #4]
 800b3b8:	50a9      	str	r1, [r5, r2]
 800b3ba:	3504      	adds	r5, #4
 800b3bc:	e79a      	b.n	800b2f4 <__multiply+0x7c>
 800b3be:	3e01      	subs	r6, #1
 800b3c0:	e79c      	b.n	800b2fc <__multiply+0x84>
 800b3c2:	bf00      	nop
 800b3c4:	0800cb1f 	.word	0x0800cb1f
 800b3c8:	0800cb30 	.word	0x0800cb30

0800b3cc <__pow5mult>:
 800b3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3d0:	4615      	mov	r5, r2
 800b3d2:	f012 0203 	ands.w	r2, r2, #3
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	460f      	mov	r7, r1
 800b3da:	d007      	beq.n	800b3ec <__pow5mult+0x20>
 800b3dc:	4c25      	ldr	r4, [pc, #148]	; (800b474 <__pow5mult+0xa8>)
 800b3de:	3a01      	subs	r2, #1
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3e6:	f7ff fe9b 	bl	800b120 <__multadd>
 800b3ea:	4607      	mov	r7, r0
 800b3ec:	10ad      	asrs	r5, r5, #2
 800b3ee:	d03d      	beq.n	800b46c <__pow5mult+0xa0>
 800b3f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3f2:	b97c      	cbnz	r4, 800b414 <__pow5mult+0x48>
 800b3f4:	2010      	movs	r0, #16
 800b3f6:	f7ff fe1d 	bl	800b034 <malloc>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	6270      	str	r0, [r6, #36]	; 0x24
 800b3fe:	b928      	cbnz	r0, 800b40c <__pow5mult+0x40>
 800b400:	4b1d      	ldr	r3, [pc, #116]	; (800b478 <__pow5mult+0xac>)
 800b402:	481e      	ldr	r0, [pc, #120]	; (800b47c <__pow5mult+0xb0>)
 800b404:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b408:	f000 fb7c 	bl	800bb04 <__assert_func>
 800b40c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b410:	6004      	str	r4, [r0, #0]
 800b412:	60c4      	str	r4, [r0, #12]
 800b414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b41c:	b94c      	cbnz	r4, 800b432 <__pow5mult+0x66>
 800b41e:	f240 2171 	movw	r1, #625	; 0x271
 800b422:	4630      	mov	r0, r6
 800b424:	f7ff ff12 	bl	800b24c <__i2b>
 800b428:	2300      	movs	r3, #0
 800b42a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b42e:	4604      	mov	r4, r0
 800b430:	6003      	str	r3, [r0, #0]
 800b432:	f04f 0900 	mov.w	r9, #0
 800b436:	07eb      	lsls	r3, r5, #31
 800b438:	d50a      	bpl.n	800b450 <__pow5mult+0x84>
 800b43a:	4639      	mov	r1, r7
 800b43c:	4622      	mov	r2, r4
 800b43e:	4630      	mov	r0, r6
 800b440:	f7ff ff1a 	bl	800b278 <__multiply>
 800b444:	4639      	mov	r1, r7
 800b446:	4680      	mov	r8, r0
 800b448:	4630      	mov	r0, r6
 800b44a:	f7ff fe47 	bl	800b0dc <_Bfree>
 800b44e:	4647      	mov	r7, r8
 800b450:	106d      	asrs	r5, r5, #1
 800b452:	d00b      	beq.n	800b46c <__pow5mult+0xa0>
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	b938      	cbnz	r0, 800b468 <__pow5mult+0x9c>
 800b458:	4622      	mov	r2, r4
 800b45a:	4621      	mov	r1, r4
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7ff ff0b 	bl	800b278 <__multiply>
 800b462:	6020      	str	r0, [r4, #0]
 800b464:	f8c0 9000 	str.w	r9, [r0]
 800b468:	4604      	mov	r4, r0
 800b46a:	e7e4      	b.n	800b436 <__pow5mult+0x6a>
 800b46c:	4638      	mov	r0, r7
 800b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b472:	bf00      	nop
 800b474:	0800cc80 	.word	0x0800cc80
 800b478:	0800caad 	.word	0x0800caad
 800b47c:	0800cb30 	.word	0x0800cb30

0800b480 <__lshift>:
 800b480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b484:	460c      	mov	r4, r1
 800b486:	6849      	ldr	r1, [r1, #4]
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b48e:	68a3      	ldr	r3, [r4, #8]
 800b490:	4607      	mov	r7, r0
 800b492:	4691      	mov	r9, r2
 800b494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b498:	f108 0601 	add.w	r6, r8, #1
 800b49c:	42b3      	cmp	r3, r6
 800b49e:	db0b      	blt.n	800b4b8 <__lshift+0x38>
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff fddb 	bl	800b05c <_Balloc>
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	b948      	cbnz	r0, 800b4be <__lshift+0x3e>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	4b2a      	ldr	r3, [pc, #168]	; (800b558 <__lshift+0xd8>)
 800b4ae:	482b      	ldr	r0, [pc, #172]	; (800b55c <__lshift+0xdc>)
 800b4b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4b4:	f000 fb26 	bl	800bb04 <__assert_func>
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	e7ee      	b.n	800b49c <__lshift+0x1c>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f100 0114 	add.w	r1, r0, #20
 800b4c4:	f100 0210 	add.w	r2, r0, #16
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	4553      	cmp	r3, sl
 800b4cc:	db37      	blt.n	800b53e <__lshift+0xbe>
 800b4ce:	6920      	ldr	r0, [r4, #16]
 800b4d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4d4:	f104 0314 	add.w	r3, r4, #20
 800b4d8:	f019 091f 	ands.w	r9, r9, #31
 800b4dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b4e4:	d02f      	beq.n	800b546 <__lshift+0xc6>
 800b4e6:	f1c9 0e20 	rsb	lr, r9, #32
 800b4ea:	468a      	mov	sl, r1
 800b4ec:	f04f 0c00 	mov.w	ip, #0
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	fa02 f209 	lsl.w	r2, r2, r9
 800b4f6:	ea42 020c 	orr.w	r2, r2, ip
 800b4fa:	f84a 2b04 	str.w	r2, [sl], #4
 800b4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b502:	4298      	cmp	r0, r3
 800b504:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b508:	d8f2      	bhi.n	800b4f0 <__lshift+0x70>
 800b50a:	1b03      	subs	r3, r0, r4
 800b50c:	3b15      	subs	r3, #21
 800b50e:	f023 0303 	bic.w	r3, r3, #3
 800b512:	3304      	adds	r3, #4
 800b514:	f104 0215 	add.w	r2, r4, #21
 800b518:	4290      	cmp	r0, r2
 800b51a:	bf38      	it	cc
 800b51c:	2304      	movcc	r3, #4
 800b51e:	f841 c003 	str.w	ip, [r1, r3]
 800b522:	f1bc 0f00 	cmp.w	ip, #0
 800b526:	d001      	beq.n	800b52c <__lshift+0xac>
 800b528:	f108 0602 	add.w	r6, r8, #2
 800b52c:	3e01      	subs	r6, #1
 800b52e:	4638      	mov	r0, r7
 800b530:	612e      	str	r6, [r5, #16]
 800b532:	4621      	mov	r1, r4
 800b534:	f7ff fdd2 	bl	800b0dc <_Bfree>
 800b538:	4628      	mov	r0, r5
 800b53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b53e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b542:	3301      	adds	r3, #1
 800b544:	e7c1      	b.n	800b4ca <__lshift+0x4a>
 800b546:	3904      	subs	r1, #4
 800b548:	f853 2b04 	ldr.w	r2, [r3], #4
 800b54c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b550:	4298      	cmp	r0, r3
 800b552:	d8f9      	bhi.n	800b548 <__lshift+0xc8>
 800b554:	e7ea      	b.n	800b52c <__lshift+0xac>
 800b556:	bf00      	nop
 800b558:	0800cb1f 	.word	0x0800cb1f
 800b55c:	0800cb30 	.word	0x0800cb30

0800b560 <__mcmp>:
 800b560:	b530      	push	{r4, r5, lr}
 800b562:	6902      	ldr	r2, [r0, #16]
 800b564:	690c      	ldr	r4, [r1, #16]
 800b566:	1b12      	subs	r2, r2, r4
 800b568:	d10e      	bne.n	800b588 <__mcmp+0x28>
 800b56a:	f100 0314 	add.w	r3, r0, #20
 800b56e:	3114      	adds	r1, #20
 800b570:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b574:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b578:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b57c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b580:	42a5      	cmp	r5, r4
 800b582:	d003      	beq.n	800b58c <__mcmp+0x2c>
 800b584:	d305      	bcc.n	800b592 <__mcmp+0x32>
 800b586:	2201      	movs	r2, #1
 800b588:	4610      	mov	r0, r2
 800b58a:	bd30      	pop	{r4, r5, pc}
 800b58c:	4283      	cmp	r3, r0
 800b58e:	d3f3      	bcc.n	800b578 <__mcmp+0x18>
 800b590:	e7fa      	b.n	800b588 <__mcmp+0x28>
 800b592:	f04f 32ff 	mov.w	r2, #4294967295
 800b596:	e7f7      	b.n	800b588 <__mcmp+0x28>

0800b598 <__mdiff>:
 800b598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	460c      	mov	r4, r1
 800b59e:	4606      	mov	r6, r0
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4690      	mov	r8, r2
 800b5a6:	f7ff ffdb 	bl	800b560 <__mcmp>
 800b5aa:	1e05      	subs	r5, r0, #0
 800b5ac:	d110      	bne.n	800b5d0 <__mdiff+0x38>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7ff fd53 	bl	800b05c <_Balloc>
 800b5b6:	b930      	cbnz	r0, 800b5c6 <__mdiff+0x2e>
 800b5b8:	4b3a      	ldr	r3, [pc, #232]	; (800b6a4 <__mdiff+0x10c>)
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	f240 2132 	movw	r1, #562	; 0x232
 800b5c0:	4839      	ldr	r0, [pc, #228]	; (800b6a8 <__mdiff+0x110>)
 800b5c2:	f000 fa9f 	bl	800bb04 <__assert_func>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d0:	bfa4      	itt	ge
 800b5d2:	4643      	movge	r3, r8
 800b5d4:	46a0      	movge	r8, r4
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5dc:	bfa6      	itte	ge
 800b5de:	461c      	movge	r4, r3
 800b5e0:	2500      	movge	r5, #0
 800b5e2:	2501      	movlt	r5, #1
 800b5e4:	f7ff fd3a 	bl	800b05c <_Balloc>
 800b5e8:	b920      	cbnz	r0, 800b5f4 <__mdiff+0x5c>
 800b5ea:	4b2e      	ldr	r3, [pc, #184]	; (800b6a4 <__mdiff+0x10c>)
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5f2:	e7e5      	b.n	800b5c0 <__mdiff+0x28>
 800b5f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5f8:	6926      	ldr	r6, [r4, #16]
 800b5fa:	60c5      	str	r5, [r0, #12]
 800b5fc:	f104 0914 	add.w	r9, r4, #20
 800b600:	f108 0514 	add.w	r5, r8, #20
 800b604:	f100 0e14 	add.w	lr, r0, #20
 800b608:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b60c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b610:	f108 0210 	add.w	r2, r8, #16
 800b614:	46f2      	mov	sl, lr
 800b616:	2100      	movs	r1, #0
 800b618:	f859 3b04 	ldr.w	r3, [r9], #4
 800b61c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b620:	fa1f f883 	uxth.w	r8, r3
 800b624:	fa11 f18b 	uxtah	r1, r1, fp
 800b628:	0c1b      	lsrs	r3, r3, #16
 800b62a:	eba1 0808 	sub.w	r8, r1, r8
 800b62e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b632:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b636:	fa1f f888 	uxth.w	r8, r8
 800b63a:	1419      	asrs	r1, r3, #16
 800b63c:	454e      	cmp	r6, r9
 800b63e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b642:	f84a 3b04 	str.w	r3, [sl], #4
 800b646:	d8e7      	bhi.n	800b618 <__mdiff+0x80>
 800b648:	1b33      	subs	r3, r6, r4
 800b64a:	3b15      	subs	r3, #21
 800b64c:	f023 0303 	bic.w	r3, r3, #3
 800b650:	3304      	adds	r3, #4
 800b652:	3415      	adds	r4, #21
 800b654:	42a6      	cmp	r6, r4
 800b656:	bf38      	it	cc
 800b658:	2304      	movcc	r3, #4
 800b65a:	441d      	add	r5, r3
 800b65c:	4473      	add	r3, lr
 800b65e:	469e      	mov	lr, r3
 800b660:	462e      	mov	r6, r5
 800b662:	4566      	cmp	r6, ip
 800b664:	d30e      	bcc.n	800b684 <__mdiff+0xec>
 800b666:	f10c 0203 	add.w	r2, ip, #3
 800b66a:	1b52      	subs	r2, r2, r5
 800b66c:	f022 0203 	bic.w	r2, r2, #3
 800b670:	3d03      	subs	r5, #3
 800b672:	45ac      	cmp	ip, r5
 800b674:	bf38      	it	cc
 800b676:	2200      	movcc	r2, #0
 800b678:	441a      	add	r2, r3
 800b67a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b67e:	b17b      	cbz	r3, 800b6a0 <__mdiff+0x108>
 800b680:	6107      	str	r7, [r0, #16]
 800b682:	e7a3      	b.n	800b5cc <__mdiff+0x34>
 800b684:	f856 8b04 	ldr.w	r8, [r6], #4
 800b688:	fa11 f288 	uxtah	r2, r1, r8
 800b68c:	1414      	asrs	r4, r2, #16
 800b68e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b692:	b292      	uxth	r2, r2
 800b694:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b698:	f84e 2b04 	str.w	r2, [lr], #4
 800b69c:	1421      	asrs	r1, r4, #16
 800b69e:	e7e0      	b.n	800b662 <__mdiff+0xca>
 800b6a0:	3f01      	subs	r7, #1
 800b6a2:	e7ea      	b.n	800b67a <__mdiff+0xe2>
 800b6a4:	0800cb1f 	.word	0x0800cb1f
 800b6a8:	0800cb30 	.word	0x0800cb30

0800b6ac <__d2b>:
 800b6ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	4689      	mov	r9, r1
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	ec57 6b10 	vmov	r6, r7, d0
 800b6b8:	4690      	mov	r8, r2
 800b6ba:	f7ff fccf 	bl	800b05c <_Balloc>
 800b6be:	4604      	mov	r4, r0
 800b6c0:	b930      	cbnz	r0, 800b6d0 <__d2b+0x24>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	4b25      	ldr	r3, [pc, #148]	; (800b75c <__d2b+0xb0>)
 800b6c6:	4826      	ldr	r0, [pc, #152]	; (800b760 <__d2b+0xb4>)
 800b6c8:	f240 310a 	movw	r1, #778	; 0x30a
 800b6cc:	f000 fa1a 	bl	800bb04 <__assert_func>
 800b6d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6d8:	bb35      	cbnz	r5, 800b728 <__d2b+0x7c>
 800b6da:	2e00      	cmp	r6, #0
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	d028      	beq.n	800b732 <__d2b+0x86>
 800b6e0:	4668      	mov	r0, sp
 800b6e2:	9600      	str	r6, [sp, #0]
 800b6e4:	f7ff fd82 	bl	800b1ec <__lo0bits>
 800b6e8:	9900      	ldr	r1, [sp, #0]
 800b6ea:	b300      	cbz	r0, 800b72e <__d2b+0x82>
 800b6ec:	9a01      	ldr	r2, [sp, #4]
 800b6ee:	f1c0 0320 	rsb	r3, r0, #32
 800b6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f6:	430b      	orrs	r3, r1
 800b6f8:	40c2      	lsrs	r2, r0
 800b6fa:	6163      	str	r3, [r4, #20]
 800b6fc:	9201      	str	r2, [sp, #4]
 800b6fe:	9b01      	ldr	r3, [sp, #4]
 800b700:	61a3      	str	r3, [r4, #24]
 800b702:	2b00      	cmp	r3, #0
 800b704:	bf14      	ite	ne
 800b706:	2202      	movne	r2, #2
 800b708:	2201      	moveq	r2, #1
 800b70a:	6122      	str	r2, [r4, #16]
 800b70c:	b1d5      	cbz	r5, 800b744 <__d2b+0x98>
 800b70e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b712:	4405      	add	r5, r0
 800b714:	f8c9 5000 	str.w	r5, [r9]
 800b718:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b71c:	f8c8 0000 	str.w	r0, [r8]
 800b720:	4620      	mov	r0, r4
 800b722:	b003      	add	sp, #12
 800b724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b72c:	e7d5      	b.n	800b6da <__d2b+0x2e>
 800b72e:	6161      	str	r1, [r4, #20]
 800b730:	e7e5      	b.n	800b6fe <__d2b+0x52>
 800b732:	a801      	add	r0, sp, #4
 800b734:	f7ff fd5a 	bl	800b1ec <__lo0bits>
 800b738:	9b01      	ldr	r3, [sp, #4]
 800b73a:	6163      	str	r3, [r4, #20]
 800b73c:	2201      	movs	r2, #1
 800b73e:	6122      	str	r2, [r4, #16]
 800b740:	3020      	adds	r0, #32
 800b742:	e7e3      	b.n	800b70c <__d2b+0x60>
 800b744:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b748:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b74c:	f8c9 0000 	str.w	r0, [r9]
 800b750:	6918      	ldr	r0, [r3, #16]
 800b752:	f7ff fd2b 	bl	800b1ac <__hi0bits>
 800b756:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b75a:	e7df      	b.n	800b71c <__d2b+0x70>
 800b75c:	0800cb1f 	.word	0x0800cb1f
 800b760:	0800cb30 	.word	0x0800cb30

0800b764 <_calloc_r>:
 800b764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b766:	fba1 2402 	umull	r2, r4, r1, r2
 800b76a:	b94c      	cbnz	r4, 800b780 <_calloc_r+0x1c>
 800b76c:	4611      	mov	r1, r2
 800b76e:	9201      	str	r2, [sp, #4]
 800b770:	f7fd ff30 	bl	80095d4 <_malloc_r>
 800b774:	9a01      	ldr	r2, [sp, #4]
 800b776:	4605      	mov	r5, r0
 800b778:	b930      	cbnz	r0, 800b788 <_calloc_r+0x24>
 800b77a:	4628      	mov	r0, r5
 800b77c:	b003      	add	sp, #12
 800b77e:	bd30      	pop	{r4, r5, pc}
 800b780:	220c      	movs	r2, #12
 800b782:	6002      	str	r2, [r0, #0]
 800b784:	2500      	movs	r5, #0
 800b786:	e7f8      	b.n	800b77a <_calloc_r+0x16>
 800b788:	4621      	mov	r1, r4
 800b78a:	f7fd fefa 	bl	8009582 <memset>
 800b78e:	e7f4      	b.n	800b77a <_calloc_r+0x16>

0800b790 <_free_r>:
 800b790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b792:	2900      	cmp	r1, #0
 800b794:	d044      	beq.n	800b820 <_free_r+0x90>
 800b796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b79a:	9001      	str	r0, [sp, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f1a1 0404 	sub.w	r4, r1, #4
 800b7a2:	bfb8      	it	lt
 800b7a4:	18e4      	addlt	r4, r4, r3
 800b7a6:	f7ff fc4d 	bl	800b044 <__malloc_lock>
 800b7aa:	4a1e      	ldr	r2, [pc, #120]	; (800b824 <_free_r+0x94>)
 800b7ac:	9801      	ldr	r0, [sp, #4]
 800b7ae:	6813      	ldr	r3, [r2, #0]
 800b7b0:	b933      	cbnz	r3, 800b7c0 <_free_r+0x30>
 800b7b2:	6063      	str	r3, [r4, #4]
 800b7b4:	6014      	str	r4, [r2, #0]
 800b7b6:	b003      	add	sp, #12
 800b7b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7bc:	f7ff bc48 	b.w	800b050 <__malloc_unlock>
 800b7c0:	42a3      	cmp	r3, r4
 800b7c2:	d908      	bls.n	800b7d6 <_free_r+0x46>
 800b7c4:	6825      	ldr	r5, [r4, #0]
 800b7c6:	1961      	adds	r1, r4, r5
 800b7c8:	428b      	cmp	r3, r1
 800b7ca:	bf01      	itttt	eq
 800b7cc:	6819      	ldreq	r1, [r3, #0]
 800b7ce:	685b      	ldreq	r3, [r3, #4]
 800b7d0:	1949      	addeq	r1, r1, r5
 800b7d2:	6021      	streq	r1, [r4, #0]
 800b7d4:	e7ed      	b.n	800b7b2 <_free_r+0x22>
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	b10b      	cbz	r3, 800b7e0 <_free_r+0x50>
 800b7dc:	42a3      	cmp	r3, r4
 800b7de:	d9fa      	bls.n	800b7d6 <_free_r+0x46>
 800b7e0:	6811      	ldr	r1, [r2, #0]
 800b7e2:	1855      	adds	r5, r2, r1
 800b7e4:	42a5      	cmp	r5, r4
 800b7e6:	d10b      	bne.n	800b800 <_free_r+0x70>
 800b7e8:	6824      	ldr	r4, [r4, #0]
 800b7ea:	4421      	add	r1, r4
 800b7ec:	1854      	adds	r4, r2, r1
 800b7ee:	42a3      	cmp	r3, r4
 800b7f0:	6011      	str	r1, [r2, #0]
 800b7f2:	d1e0      	bne.n	800b7b6 <_free_r+0x26>
 800b7f4:	681c      	ldr	r4, [r3, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	6053      	str	r3, [r2, #4]
 800b7fa:	4421      	add	r1, r4
 800b7fc:	6011      	str	r1, [r2, #0]
 800b7fe:	e7da      	b.n	800b7b6 <_free_r+0x26>
 800b800:	d902      	bls.n	800b808 <_free_r+0x78>
 800b802:	230c      	movs	r3, #12
 800b804:	6003      	str	r3, [r0, #0]
 800b806:	e7d6      	b.n	800b7b6 <_free_r+0x26>
 800b808:	6825      	ldr	r5, [r4, #0]
 800b80a:	1961      	adds	r1, r4, r5
 800b80c:	428b      	cmp	r3, r1
 800b80e:	bf04      	itt	eq
 800b810:	6819      	ldreq	r1, [r3, #0]
 800b812:	685b      	ldreq	r3, [r3, #4]
 800b814:	6063      	str	r3, [r4, #4]
 800b816:	bf04      	itt	eq
 800b818:	1949      	addeq	r1, r1, r5
 800b81a:	6021      	streq	r1, [r4, #0]
 800b81c:	6054      	str	r4, [r2, #4]
 800b81e:	e7ca      	b.n	800b7b6 <_free_r+0x26>
 800b820:	b003      	add	sp, #12
 800b822:	bd30      	pop	{r4, r5, pc}
 800b824:	20004d6c 	.word	0x20004d6c

0800b828 <__ssputs_r>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	688e      	ldr	r6, [r1, #8]
 800b82e:	429e      	cmp	r6, r3
 800b830:	4682      	mov	sl, r0
 800b832:	460c      	mov	r4, r1
 800b834:	4690      	mov	r8, r2
 800b836:	461f      	mov	r7, r3
 800b838:	d838      	bhi.n	800b8ac <__ssputs_r+0x84>
 800b83a:	898a      	ldrh	r2, [r1, #12]
 800b83c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b840:	d032      	beq.n	800b8a8 <__ssputs_r+0x80>
 800b842:	6825      	ldr	r5, [r4, #0]
 800b844:	6909      	ldr	r1, [r1, #16]
 800b846:	eba5 0901 	sub.w	r9, r5, r1
 800b84a:	6965      	ldr	r5, [r4, #20]
 800b84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b854:	3301      	adds	r3, #1
 800b856:	444b      	add	r3, r9
 800b858:	106d      	asrs	r5, r5, #1
 800b85a:	429d      	cmp	r5, r3
 800b85c:	bf38      	it	cc
 800b85e:	461d      	movcc	r5, r3
 800b860:	0553      	lsls	r3, r2, #21
 800b862:	d531      	bpl.n	800b8c8 <__ssputs_r+0xa0>
 800b864:	4629      	mov	r1, r5
 800b866:	f7fd feb5 	bl	80095d4 <_malloc_r>
 800b86a:	4606      	mov	r6, r0
 800b86c:	b950      	cbnz	r0, 800b884 <__ssputs_r+0x5c>
 800b86e:	230c      	movs	r3, #12
 800b870:	f8ca 3000 	str.w	r3, [sl]
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295
 800b880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b884:	6921      	ldr	r1, [r4, #16]
 800b886:	464a      	mov	r2, r9
 800b888:	f7fd fe53 	bl	8009532 <memcpy>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	6126      	str	r6, [r4, #16]
 800b89a:	6165      	str	r5, [r4, #20]
 800b89c:	444e      	add	r6, r9
 800b89e:	eba5 0509 	sub.w	r5, r5, r9
 800b8a2:	6026      	str	r6, [r4, #0]
 800b8a4:	60a5      	str	r5, [r4, #8]
 800b8a6:	463e      	mov	r6, r7
 800b8a8:	42be      	cmp	r6, r7
 800b8aa:	d900      	bls.n	800b8ae <__ssputs_r+0x86>
 800b8ac:	463e      	mov	r6, r7
 800b8ae:	6820      	ldr	r0, [r4, #0]
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	4641      	mov	r1, r8
 800b8b4:	f7fd fe4b 	bl	800954e <memmove>
 800b8b8:	68a3      	ldr	r3, [r4, #8]
 800b8ba:	1b9b      	subs	r3, r3, r6
 800b8bc:	60a3      	str	r3, [r4, #8]
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	4433      	add	r3, r6
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	e7db      	b.n	800b880 <__ssputs_r+0x58>
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	f000 f95d 	bl	800bb88 <_realloc_r>
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d1e1      	bne.n	800b898 <__ssputs_r+0x70>
 800b8d4:	6921      	ldr	r1, [r4, #16]
 800b8d6:	4650      	mov	r0, sl
 800b8d8:	f7ff ff5a 	bl	800b790 <_free_r>
 800b8dc:	e7c7      	b.n	800b86e <__ssputs_r+0x46>
	...

0800b8e0 <_svfiprintf_r>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	4698      	mov	r8, r3
 800b8e6:	898b      	ldrh	r3, [r1, #12]
 800b8e8:	061b      	lsls	r3, r3, #24
 800b8ea:	b09d      	sub	sp, #116	; 0x74
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	460d      	mov	r5, r1
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	d50e      	bpl.n	800b912 <_svfiprintf_r+0x32>
 800b8f4:	690b      	ldr	r3, [r1, #16]
 800b8f6:	b963      	cbnz	r3, 800b912 <_svfiprintf_r+0x32>
 800b8f8:	2140      	movs	r1, #64	; 0x40
 800b8fa:	f7fd fe6b 	bl	80095d4 <_malloc_r>
 800b8fe:	6028      	str	r0, [r5, #0]
 800b900:	6128      	str	r0, [r5, #16]
 800b902:	b920      	cbnz	r0, 800b90e <_svfiprintf_r+0x2e>
 800b904:	230c      	movs	r3, #12
 800b906:	603b      	str	r3, [r7, #0]
 800b908:	f04f 30ff 	mov.w	r0, #4294967295
 800b90c:	e0d1      	b.n	800bab2 <_svfiprintf_r+0x1d2>
 800b90e:	2340      	movs	r3, #64	; 0x40
 800b910:	616b      	str	r3, [r5, #20]
 800b912:	2300      	movs	r3, #0
 800b914:	9309      	str	r3, [sp, #36]	; 0x24
 800b916:	2320      	movs	r3, #32
 800b918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b91c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b920:	2330      	movs	r3, #48	; 0x30
 800b922:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bacc <_svfiprintf_r+0x1ec>
 800b926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b92a:	f04f 0901 	mov.w	r9, #1
 800b92e:	4623      	mov	r3, r4
 800b930:	469a      	mov	sl, r3
 800b932:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b936:	b10a      	cbz	r2, 800b93c <_svfiprintf_r+0x5c>
 800b938:	2a25      	cmp	r2, #37	; 0x25
 800b93a:	d1f9      	bne.n	800b930 <_svfiprintf_r+0x50>
 800b93c:	ebba 0b04 	subs.w	fp, sl, r4
 800b940:	d00b      	beq.n	800b95a <_svfiprintf_r+0x7a>
 800b942:	465b      	mov	r3, fp
 800b944:	4622      	mov	r2, r4
 800b946:	4629      	mov	r1, r5
 800b948:	4638      	mov	r0, r7
 800b94a:	f7ff ff6d 	bl	800b828 <__ssputs_r>
 800b94e:	3001      	adds	r0, #1
 800b950:	f000 80aa 	beq.w	800baa8 <_svfiprintf_r+0x1c8>
 800b954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b956:	445a      	add	r2, fp
 800b958:	9209      	str	r2, [sp, #36]	; 0x24
 800b95a:	f89a 3000 	ldrb.w	r3, [sl]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f000 80a2 	beq.w	800baa8 <_svfiprintf_r+0x1c8>
 800b964:	2300      	movs	r3, #0
 800b966:	f04f 32ff 	mov.w	r2, #4294967295
 800b96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b96e:	f10a 0a01 	add.w	sl, sl, #1
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	9307      	str	r3, [sp, #28]
 800b976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b97a:	931a      	str	r3, [sp, #104]	; 0x68
 800b97c:	4654      	mov	r4, sl
 800b97e:	2205      	movs	r2, #5
 800b980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b984:	4851      	ldr	r0, [pc, #324]	; (800bacc <_svfiprintf_r+0x1ec>)
 800b986:	f7f4 fc33 	bl	80001f0 <memchr>
 800b98a:	9a04      	ldr	r2, [sp, #16]
 800b98c:	b9d8      	cbnz	r0, 800b9c6 <_svfiprintf_r+0xe6>
 800b98e:	06d0      	lsls	r0, r2, #27
 800b990:	bf44      	itt	mi
 800b992:	2320      	movmi	r3, #32
 800b994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b998:	0711      	lsls	r1, r2, #28
 800b99a:	bf44      	itt	mi
 800b99c:	232b      	movmi	r3, #43	; 0x2b
 800b99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a8:	d015      	beq.n	800b9d6 <_svfiprintf_r+0xf6>
 800b9aa:	9a07      	ldr	r2, [sp, #28]
 800b9ac:	4654      	mov	r4, sl
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	f04f 0c0a 	mov.w	ip, #10
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ba:	3b30      	subs	r3, #48	; 0x30
 800b9bc:	2b09      	cmp	r3, #9
 800b9be:	d94e      	bls.n	800ba5e <_svfiprintf_r+0x17e>
 800b9c0:	b1b0      	cbz	r0, 800b9f0 <_svfiprintf_r+0x110>
 800b9c2:	9207      	str	r2, [sp, #28]
 800b9c4:	e014      	b.n	800b9f0 <_svfiprintf_r+0x110>
 800b9c6:	eba0 0308 	sub.w	r3, r0, r8
 800b9ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	9304      	str	r3, [sp, #16]
 800b9d2:	46a2      	mov	sl, r4
 800b9d4:	e7d2      	b.n	800b97c <_svfiprintf_r+0x9c>
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	1d19      	adds	r1, r3, #4
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	9103      	str	r1, [sp, #12]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	bfbb      	ittet	lt
 800b9e2:	425b      	neglt	r3, r3
 800b9e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b9e8:	9307      	strge	r3, [sp, #28]
 800b9ea:	9307      	strlt	r3, [sp, #28]
 800b9ec:	bfb8      	it	lt
 800b9ee:	9204      	strlt	r2, [sp, #16]
 800b9f0:	7823      	ldrb	r3, [r4, #0]
 800b9f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9f4:	d10c      	bne.n	800ba10 <_svfiprintf_r+0x130>
 800b9f6:	7863      	ldrb	r3, [r4, #1]
 800b9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9fa:	d135      	bne.n	800ba68 <_svfiprintf_r+0x188>
 800b9fc:	9b03      	ldr	r3, [sp, #12]
 800b9fe:	1d1a      	adds	r2, r3, #4
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	9203      	str	r2, [sp, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	bfb8      	it	lt
 800ba08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba0c:	3402      	adds	r4, #2
 800ba0e:	9305      	str	r3, [sp, #20]
 800ba10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800badc <_svfiprintf_r+0x1fc>
 800ba14:	7821      	ldrb	r1, [r4, #0]
 800ba16:	2203      	movs	r2, #3
 800ba18:	4650      	mov	r0, sl
 800ba1a:	f7f4 fbe9 	bl	80001f0 <memchr>
 800ba1e:	b140      	cbz	r0, 800ba32 <_svfiprintf_r+0x152>
 800ba20:	2340      	movs	r3, #64	; 0x40
 800ba22:	eba0 000a 	sub.w	r0, r0, sl
 800ba26:	fa03 f000 	lsl.w	r0, r3, r0
 800ba2a:	9b04      	ldr	r3, [sp, #16]
 800ba2c:	4303      	orrs	r3, r0
 800ba2e:	3401      	adds	r4, #1
 800ba30:	9304      	str	r3, [sp, #16]
 800ba32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba36:	4826      	ldr	r0, [pc, #152]	; (800bad0 <_svfiprintf_r+0x1f0>)
 800ba38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba3c:	2206      	movs	r2, #6
 800ba3e:	f7f4 fbd7 	bl	80001f0 <memchr>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d038      	beq.n	800bab8 <_svfiprintf_r+0x1d8>
 800ba46:	4b23      	ldr	r3, [pc, #140]	; (800bad4 <_svfiprintf_r+0x1f4>)
 800ba48:	bb1b      	cbnz	r3, 800ba92 <_svfiprintf_r+0x1b2>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	3307      	adds	r3, #7
 800ba4e:	f023 0307 	bic.w	r3, r3, #7
 800ba52:	3308      	adds	r3, #8
 800ba54:	9303      	str	r3, [sp, #12]
 800ba56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba58:	4433      	add	r3, r6
 800ba5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba5c:	e767      	b.n	800b92e <_svfiprintf_r+0x4e>
 800ba5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba62:	460c      	mov	r4, r1
 800ba64:	2001      	movs	r0, #1
 800ba66:	e7a5      	b.n	800b9b4 <_svfiprintf_r+0xd4>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	3401      	adds	r4, #1
 800ba6c:	9305      	str	r3, [sp, #20]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	f04f 0c0a 	mov.w	ip, #10
 800ba74:	4620      	mov	r0, r4
 800ba76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba7a:	3a30      	subs	r2, #48	; 0x30
 800ba7c:	2a09      	cmp	r2, #9
 800ba7e:	d903      	bls.n	800ba88 <_svfiprintf_r+0x1a8>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d0c5      	beq.n	800ba10 <_svfiprintf_r+0x130>
 800ba84:	9105      	str	r1, [sp, #20]
 800ba86:	e7c3      	b.n	800ba10 <_svfiprintf_r+0x130>
 800ba88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e7f0      	b.n	800ba74 <_svfiprintf_r+0x194>
 800ba92:	ab03      	add	r3, sp, #12
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	462a      	mov	r2, r5
 800ba98:	4b0f      	ldr	r3, [pc, #60]	; (800bad8 <_svfiprintf_r+0x1f8>)
 800ba9a:	a904      	add	r1, sp, #16
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f7fd fead 	bl	80097fc <_printf_float>
 800baa2:	1c42      	adds	r2, r0, #1
 800baa4:	4606      	mov	r6, r0
 800baa6:	d1d6      	bne.n	800ba56 <_svfiprintf_r+0x176>
 800baa8:	89ab      	ldrh	r3, [r5, #12]
 800baaa:	065b      	lsls	r3, r3, #25
 800baac:	f53f af2c 	bmi.w	800b908 <_svfiprintf_r+0x28>
 800bab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bab2:	b01d      	add	sp, #116	; 0x74
 800bab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab8:	ab03      	add	r3, sp, #12
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	462a      	mov	r2, r5
 800babe:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <_svfiprintf_r+0x1f8>)
 800bac0:	a904      	add	r1, sp, #16
 800bac2:	4638      	mov	r0, r7
 800bac4:	f7fe f93e 	bl	8009d44 <_printf_i>
 800bac8:	e7eb      	b.n	800baa2 <_svfiprintf_r+0x1c2>
 800baca:	bf00      	nop
 800bacc:	0800cc8c 	.word	0x0800cc8c
 800bad0:	0800cc96 	.word	0x0800cc96
 800bad4:	080097fd 	.word	0x080097fd
 800bad8:	0800b829 	.word	0x0800b829
 800badc:	0800cc92 	.word	0x0800cc92

0800bae0 <_read_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d07      	ldr	r5, [pc, #28]	; (800bb00 <_read_r+0x20>)
 800bae4:	4604      	mov	r4, r0
 800bae6:	4608      	mov	r0, r1
 800bae8:	4611      	mov	r1, r2
 800baea:	2200      	movs	r2, #0
 800baec:	602a      	str	r2, [r5, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	f7f7 fd40 	bl	8003574 <_read>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_read_r+0x1e>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_read_r+0x1e>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20004d74 	.word	0x20004d74

0800bb04 <__assert_func>:
 800bb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb06:	4614      	mov	r4, r2
 800bb08:	461a      	mov	r2, r3
 800bb0a:	4b09      	ldr	r3, [pc, #36]	; (800bb30 <__assert_func+0x2c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4605      	mov	r5, r0
 800bb10:	68d8      	ldr	r0, [r3, #12]
 800bb12:	b14c      	cbz	r4, 800bb28 <__assert_func+0x24>
 800bb14:	4b07      	ldr	r3, [pc, #28]	; (800bb34 <__assert_func+0x30>)
 800bb16:	9100      	str	r1, [sp, #0]
 800bb18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb1c:	4906      	ldr	r1, [pc, #24]	; (800bb38 <__assert_func+0x34>)
 800bb1e:	462b      	mov	r3, r5
 800bb20:	f000 f80e 	bl	800bb40 <fiprintf>
 800bb24:	f000 fa86 	bl	800c034 <abort>
 800bb28:	4b04      	ldr	r3, [pc, #16]	; (800bb3c <__assert_func+0x38>)
 800bb2a:	461c      	mov	r4, r3
 800bb2c:	e7f3      	b.n	800bb16 <__assert_func+0x12>
 800bb2e:	bf00      	nop
 800bb30:	20000024 	.word	0x20000024
 800bb34:	0800cc9d 	.word	0x0800cc9d
 800bb38:	0800ccaa 	.word	0x0800ccaa
 800bb3c:	0800ccd8 	.word	0x0800ccd8

0800bb40 <fiprintf>:
 800bb40:	b40e      	push	{r1, r2, r3}
 800bb42:	b503      	push	{r0, r1, lr}
 800bb44:	4601      	mov	r1, r0
 800bb46:	ab03      	add	r3, sp, #12
 800bb48:	4805      	ldr	r0, [pc, #20]	; (800bb60 <fiprintf+0x20>)
 800bb4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb4e:	6800      	ldr	r0, [r0, #0]
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	f000 f871 	bl	800bc38 <_vfiprintf_r>
 800bb56:	b002      	add	sp, #8
 800bb58:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb5c:	b003      	add	sp, #12
 800bb5e:	4770      	bx	lr
 800bb60:	20000024 	.word	0x20000024

0800bb64 <__ascii_mbtowc>:
 800bb64:	b082      	sub	sp, #8
 800bb66:	b901      	cbnz	r1, 800bb6a <__ascii_mbtowc+0x6>
 800bb68:	a901      	add	r1, sp, #4
 800bb6a:	b142      	cbz	r2, 800bb7e <__ascii_mbtowc+0x1a>
 800bb6c:	b14b      	cbz	r3, 800bb82 <__ascii_mbtowc+0x1e>
 800bb6e:	7813      	ldrb	r3, [r2, #0]
 800bb70:	600b      	str	r3, [r1, #0]
 800bb72:	7812      	ldrb	r2, [r2, #0]
 800bb74:	1e10      	subs	r0, r2, #0
 800bb76:	bf18      	it	ne
 800bb78:	2001      	movne	r0, #1
 800bb7a:	b002      	add	sp, #8
 800bb7c:	4770      	bx	lr
 800bb7e:	4610      	mov	r0, r2
 800bb80:	e7fb      	b.n	800bb7a <__ascii_mbtowc+0x16>
 800bb82:	f06f 0001 	mvn.w	r0, #1
 800bb86:	e7f8      	b.n	800bb7a <__ascii_mbtowc+0x16>

0800bb88 <_realloc_r>:
 800bb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb8c:	4680      	mov	r8, r0
 800bb8e:	4614      	mov	r4, r2
 800bb90:	460e      	mov	r6, r1
 800bb92:	b921      	cbnz	r1, 800bb9e <_realloc_r+0x16>
 800bb94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	4611      	mov	r1, r2
 800bb9a:	f7fd bd1b 	b.w	80095d4 <_malloc_r>
 800bb9e:	b92a      	cbnz	r2, 800bbac <_realloc_r+0x24>
 800bba0:	f7ff fdf6 	bl	800b790 <_free_r>
 800bba4:	4625      	mov	r5, r4
 800bba6:	4628      	mov	r0, r5
 800bba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbac:	f000 faae 	bl	800c10c <_malloc_usable_size_r>
 800bbb0:	4284      	cmp	r4, r0
 800bbb2:	4607      	mov	r7, r0
 800bbb4:	d802      	bhi.n	800bbbc <_realloc_r+0x34>
 800bbb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbba:	d812      	bhi.n	800bbe2 <_realloc_r+0x5a>
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	f7fd fd08 	bl	80095d4 <_malloc_r>
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d0ed      	beq.n	800bba6 <_realloc_r+0x1e>
 800bbca:	42bc      	cmp	r4, r7
 800bbcc:	4622      	mov	r2, r4
 800bbce:	4631      	mov	r1, r6
 800bbd0:	bf28      	it	cs
 800bbd2:	463a      	movcs	r2, r7
 800bbd4:	f7fd fcad 	bl	8009532 <memcpy>
 800bbd8:	4631      	mov	r1, r6
 800bbda:	4640      	mov	r0, r8
 800bbdc:	f7ff fdd8 	bl	800b790 <_free_r>
 800bbe0:	e7e1      	b.n	800bba6 <_realloc_r+0x1e>
 800bbe2:	4635      	mov	r5, r6
 800bbe4:	e7df      	b.n	800bba6 <_realloc_r+0x1e>

0800bbe6 <__sfputc_r>:
 800bbe6:	6893      	ldr	r3, [r2, #8]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	b410      	push	{r4}
 800bbee:	6093      	str	r3, [r2, #8]
 800bbf0:	da08      	bge.n	800bc04 <__sfputc_r+0x1e>
 800bbf2:	6994      	ldr	r4, [r2, #24]
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	db01      	blt.n	800bbfc <__sfputc_r+0x16>
 800bbf8:	290a      	cmp	r1, #10
 800bbfa:	d103      	bne.n	800bc04 <__sfputc_r+0x1e>
 800bbfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc00:	f000 b94a 	b.w	800be98 <__swbuf_r>
 800bc04:	6813      	ldr	r3, [r2, #0]
 800bc06:	1c58      	adds	r0, r3, #1
 800bc08:	6010      	str	r0, [r2, #0]
 800bc0a:	7019      	strb	r1, [r3, #0]
 800bc0c:	4608      	mov	r0, r1
 800bc0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <__sfputs_r>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	4614      	mov	r4, r2
 800bc1c:	18d5      	adds	r5, r2, r3
 800bc1e:	42ac      	cmp	r4, r5
 800bc20:	d101      	bne.n	800bc26 <__sfputs_r+0x12>
 800bc22:	2000      	movs	r0, #0
 800bc24:	e007      	b.n	800bc36 <__sfputs_r+0x22>
 800bc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc2a:	463a      	mov	r2, r7
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f7ff ffda 	bl	800bbe6 <__sfputc_r>
 800bc32:	1c43      	adds	r3, r0, #1
 800bc34:	d1f3      	bne.n	800bc1e <__sfputs_r+0xa>
 800bc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc38 <_vfiprintf_r>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	b09d      	sub	sp, #116	; 0x74
 800bc40:	4614      	mov	r4, r2
 800bc42:	4698      	mov	r8, r3
 800bc44:	4606      	mov	r6, r0
 800bc46:	b118      	cbz	r0, 800bc50 <_vfiprintf_r+0x18>
 800bc48:	6983      	ldr	r3, [r0, #24]
 800bc4a:	b90b      	cbnz	r3, 800bc50 <_vfiprintf_r+0x18>
 800bc4c:	f7fd fbac 	bl	80093a8 <__sinit>
 800bc50:	4b89      	ldr	r3, [pc, #548]	; (800be78 <_vfiprintf_r+0x240>)
 800bc52:	429d      	cmp	r5, r3
 800bc54:	d11b      	bne.n	800bc8e <_vfiprintf_r+0x56>
 800bc56:	6875      	ldr	r5, [r6, #4]
 800bc58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc5a:	07d9      	lsls	r1, r3, #31
 800bc5c:	d405      	bmi.n	800bc6a <_vfiprintf_r+0x32>
 800bc5e:	89ab      	ldrh	r3, [r5, #12]
 800bc60:	059a      	lsls	r2, r3, #22
 800bc62:	d402      	bmi.n	800bc6a <_vfiprintf_r+0x32>
 800bc64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc66:	f7fd fc62 	bl	800952e <__retarget_lock_acquire_recursive>
 800bc6a:	89ab      	ldrh	r3, [r5, #12]
 800bc6c:	071b      	lsls	r3, r3, #28
 800bc6e:	d501      	bpl.n	800bc74 <_vfiprintf_r+0x3c>
 800bc70:	692b      	ldr	r3, [r5, #16]
 800bc72:	b9eb      	cbnz	r3, 800bcb0 <_vfiprintf_r+0x78>
 800bc74:	4629      	mov	r1, r5
 800bc76:	4630      	mov	r0, r6
 800bc78:	f000 f96e 	bl	800bf58 <__swsetup_r>
 800bc7c:	b1c0      	cbz	r0, 800bcb0 <_vfiprintf_r+0x78>
 800bc7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc80:	07dc      	lsls	r4, r3, #31
 800bc82:	d50e      	bpl.n	800bca2 <_vfiprintf_r+0x6a>
 800bc84:	f04f 30ff 	mov.w	r0, #4294967295
 800bc88:	b01d      	add	sp, #116	; 0x74
 800bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8e:	4b7b      	ldr	r3, [pc, #492]	; (800be7c <_vfiprintf_r+0x244>)
 800bc90:	429d      	cmp	r5, r3
 800bc92:	d101      	bne.n	800bc98 <_vfiprintf_r+0x60>
 800bc94:	68b5      	ldr	r5, [r6, #8]
 800bc96:	e7df      	b.n	800bc58 <_vfiprintf_r+0x20>
 800bc98:	4b79      	ldr	r3, [pc, #484]	; (800be80 <_vfiprintf_r+0x248>)
 800bc9a:	429d      	cmp	r5, r3
 800bc9c:	bf08      	it	eq
 800bc9e:	68f5      	ldreq	r5, [r6, #12]
 800bca0:	e7da      	b.n	800bc58 <_vfiprintf_r+0x20>
 800bca2:	89ab      	ldrh	r3, [r5, #12]
 800bca4:	0598      	lsls	r0, r3, #22
 800bca6:	d4ed      	bmi.n	800bc84 <_vfiprintf_r+0x4c>
 800bca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcaa:	f7fd fc41 	bl	8009530 <__retarget_lock_release_recursive>
 800bcae:	e7e9      	b.n	800bc84 <_vfiprintf_r+0x4c>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb4:	2320      	movs	r3, #32
 800bcb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcba:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcbe:	2330      	movs	r3, #48	; 0x30
 800bcc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be84 <_vfiprintf_r+0x24c>
 800bcc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcc8:	f04f 0901 	mov.w	r9, #1
 800bccc:	4623      	mov	r3, r4
 800bcce:	469a      	mov	sl, r3
 800bcd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcd4:	b10a      	cbz	r2, 800bcda <_vfiprintf_r+0xa2>
 800bcd6:	2a25      	cmp	r2, #37	; 0x25
 800bcd8:	d1f9      	bne.n	800bcce <_vfiprintf_r+0x96>
 800bcda:	ebba 0b04 	subs.w	fp, sl, r4
 800bcde:	d00b      	beq.n	800bcf8 <_vfiprintf_r+0xc0>
 800bce0:	465b      	mov	r3, fp
 800bce2:	4622      	mov	r2, r4
 800bce4:	4629      	mov	r1, r5
 800bce6:	4630      	mov	r0, r6
 800bce8:	f7ff ff94 	bl	800bc14 <__sfputs_r>
 800bcec:	3001      	adds	r0, #1
 800bcee:	f000 80aa 	beq.w	800be46 <_vfiprintf_r+0x20e>
 800bcf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcf4:	445a      	add	r2, fp
 800bcf6:	9209      	str	r2, [sp, #36]	; 0x24
 800bcf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 80a2 	beq.w	800be46 <_vfiprintf_r+0x20e>
 800bd02:	2300      	movs	r3, #0
 800bd04:	f04f 32ff 	mov.w	r2, #4294967295
 800bd08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd0c:	f10a 0a01 	add.w	sl, sl, #1
 800bd10:	9304      	str	r3, [sp, #16]
 800bd12:	9307      	str	r3, [sp, #28]
 800bd14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd18:	931a      	str	r3, [sp, #104]	; 0x68
 800bd1a:	4654      	mov	r4, sl
 800bd1c:	2205      	movs	r2, #5
 800bd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd22:	4858      	ldr	r0, [pc, #352]	; (800be84 <_vfiprintf_r+0x24c>)
 800bd24:	f7f4 fa64 	bl	80001f0 <memchr>
 800bd28:	9a04      	ldr	r2, [sp, #16]
 800bd2a:	b9d8      	cbnz	r0, 800bd64 <_vfiprintf_r+0x12c>
 800bd2c:	06d1      	lsls	r1, r2, #27
 800bd2e:	bf44      	itt	mi
 800bd30:	2320      	movmi	r3, #32
 800bd32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd36:	0713      	lsls	r3, r2, #28
 800bd38:	bf44      	itt	mi
 800bd3a:	232b      	movmi	r3, #43	; 0x2b
 800bd3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd40:	f89a 3000 	ldrb.w	r3, [sl]
 800bd44:	2b2a      	cmp	r3, #42	; 0x2a
 800bd46:	d015      	beq.n	800bd74 <_vfiprintf_r+0x13c>
 800bd48:	9a07      	ldr	r2, [sp, #28]
 800bd4a:	4654      	mov	r4, sl
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	f04f 0c0a 	mov.w	ip, #10
 800bd52:	4621      	mov	r1, r4
 800bd54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd58:	3b30      	subs	r3, #48	; 0x30
 800bd5a:	2b09      	cmp	r3, #9
 800bd5c:	d94e      	bls.n	800bdfc <_vfiprintf_r+0x1c4>
 800bd5e:	b1b0      	cbz	r0, 800bd8e <_vfiprintf_r+0x156>
 800bd60:	9207      	str	r2, [sp, #28]
 800bd62:	e014      	b.n	800bd8e <_vfiprintf_r+0x156>
 800bd64:	eba0 0308 	sub.w	r3, r0, r8
 800bd68:	fa09 f303 	lsl.w	r3, r9, r3
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	9304      	str	r3, [sp, #16]
 800bd70:	46a2      	mov	sl, r4
 800bd72:	e7d2      	b.n	800bd1a <_vfiprintf_r+0xe2>
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	1d19      	adds	r1, r3, #4
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	9103      	str	r1, [sp, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	bfbb      	ittet	lt
 800bd80:	425b      	neglt	r3, r3
 800bd82:	f042 0202 	orrlt.w	r2, r2, #2
 800bd86:	9307      	strge	r3, [sp, #28]
 800bd88:	9307      	strlt	r3, [sp, #28]
 800bd8a:	bfb8      	it	lt
 800bd8c:	9204      	strlt	r2, [sp, #16]
 800bd8e:	7823      	ldrb	r3, [r4, #0]
 800bd90:	2b2e      	cmp	r3, #46	; 0x2e
 800bd92:	d10c      	bne.n	800bdae <_vfiprintf_r+0x176>
 800bd94:	7863      	ldrb	r3, [r4, #1]
 800bd96:	2b2a      	cmp	r3, #42	; 0x2a
 800bd98:	d135      	bne.n	800be06 <_vfiprintf_r+0x1ce>
 800bd9a:	9b03      	ldr	r3, [sp, #12]
 800bd9c:	1d1a      	adds	r2, r3, #4
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	9203      	str	r2, [sp, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	bfb8      	it	lt
 800bda6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdaa:	3402      	adds	r4, #2
 800bdac:	9305      	str	r3, [sp, #20]
 800bdae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be94 <_vfiprintf_r+0x25c>
 800bdb2:	7821      	ldrb	r1, [r4, #0]
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	4650      	mov	r0, sl
 800bdb8:	f7f4 fa1a 	bl	80001f0 <memchr>
 800bdbc:	b140      	cbz	r0, 800bdd0 <_vfiprintf_r+0x198>
 800bdbe:	2340      	movs	r3, #64	; 0x40
 800bdc0:	eba0 000a 	sub.w	r0, r0, sl
 800bdc4:	fa03 f000 	lsl.w	r0, r3, r0
 800bdc8:	9b04      	ldr	r3, [sp, #16]
 800bdca:	4303      	orrs	r3, r0
 800bdcc:	3401      	adds	r4, #1
 800bdce:	9304      	str	r3, [sp, #16]
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	482c      	ldr	r0, [pc, #176]	; (800be88 <_vfiprintf_r+0x250>)
 800bdd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdda:	2206      	movs	r2, #6
 800bddc:	f7f4 fa08 	bl	80001f0 <memchr>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d03f      	beq.n	800be64 <_vfiprintf_r+0x22c>
 800bde4:	4b29      	ldr	r3, [pc, #164]	; (800be8c <_vfiprintf_r+0x254>)
 800bde6:	bb1b      	cbnz	r3, 800be30 <_vfiprintf_r+0x1f8>
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	3307      	adds	r3, #7
 800bdec:	f023 0307 	bic.w	r3, r3, #7
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	9303      	str	r3, [sp, #12]
 800bdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf6:	443b      	add	r3, r7
 800bdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfa:	e767      	b.n	800bccc <_vfiprintf_r+0x94>
 800bdfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800be00:	460c      	mov	r4, r1
 800be02:	2001      	movs	r0, #1
 800be04:	e7a5      	b.n	800bd52 <_vfiprintf_r+0x11a>
 800be06:	2300      	movs	r3, #0
 800be08:	3401      	adds	r4, #1
 800be0a:	9305      	str	r3, [sp, #20]
 800be0c:	4619      	mov	r1, r3
 800be0e:	f04f 0c0a 	mov.w	ip, #10
 800be12:	4620      	mov	r0, r4
 800be14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be18:	3a30      	subs	r2, #48	; 0x30
 800be1a:	2a09      	cmp	r2, #9
 800be1c:	d903      	bls.n	800be26 <_vfiprintf_r+0x1ee>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d0c5      	beq.n	800bdae <_vfiprintf_r+0x176>
 800be22:	9105      	str	r1, [sp, #20]
 800be24:	e7c3      	b.n	800bdae <_vfiprintf_r+0x176>
 800be26:	fb0c 2101 	mla	r1, ip, r1, r2
 800be2a:	4604      	mov	r4, r0
 800be2c:	2301      	movs	r3, #1
 800be2e:	e7f0      	b.n	800be12 <_vfiprintf_r+0x1da>
 800be30:	ab03      	add	r3, sp, #12
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	462a      	mov	r2, r5
 800be36:	4b16      	ldr	r3, [pc, #88]	; (800be90 <_vfiprintf_r+0x258>)
 800be38:	a904      	add	r1, sp, #16
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7fd fcde 	bl	80097fc <_printf_float>
 800be40:	4607      	mov	r7, r0
 800be42:	1c78      	adds	r0, r7, #1
 800be44:	d1d6      	bne.n	800bdf4 <_vfiprintf_r+0x1bc>
 800be46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be48:	07d9      	lsls	r1, r3, #31
 800be4a:	d405      	bmi.n	800be58 <_vfiprintf_r+0x220>
 800be4c:	89ab      	ldrh	r3, [r5, #12]
 800be4e:	059a      	lsls	r2, r3, #22
 800be50:	d402      	bmi.n	800be58 <_vfiprintf_r+0x220>
 800be52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be54:	f7fd fb6c 	bl	8009530 <__retarget_lock_release_recursive>
 800be58:	89ab      	ldrh	r3, [r5, #12]
 800be5a:	065b      	lsls	r3, r3, #25
 800be5c:	f53f af12 	bmi.w	800bc84 <_vfiprintf_r+0x4c>
 800be60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be62:	e711      	b.n	800bc88 <_vfiprintf_r+0x50>
 800be64:	ab03      	add	r3, sp, #12
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	462a      	mov	r2, r5
 800be6a:	4b09      	ldr	r3, [pc, #36]	; (800be90 <_vfiprintf_r+0x258>)
 800be6c:	a904      	add	r1, sp, #16
 800be6e:	4630      	mov	r0, r6
 800be70:	f7fd ff68 	bl	8009d44 <_printf_i>
 800be74:	e7e4      	b.n	800be40 <_vfiprintf_r+0x208>
 800be76:	bf00      	nop
 800be78:	0800ca28 	.word	0x0800ca28
 800be7c:	0800ca48 	.word	0x0800ca48
 800be80:	0800ca08 	.word	0x0800ca08
 800be84:	0800cc8c 	.word	0x0800cc8c
 800be88:	0800cc96 	.word	0x0800cc96
 800be8c:	080097fd 	.word	0x080097fd
 800be90:	0800bc15 	.word	0x0800bc15
 800be94:	0800cc92 	.word	0x0800cc92

0800be98 <__swbuf_r>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	460e      	mov	r6, r1
 800be9c:	4614      	mov	r4, r2
 800be9e:	4605      	mov	r5, r0
 800bea0:	b118      	cbz	r0, 800beaa <__swbuf_r+0x12>
 800bea2:	6983      	ldr	r3, [r0, #24]
 800bea4:	b90b      	cbnz	r3, 800beaa <__swbuf_r+0x12>
 800bea6:	f7fd fa7f 	bl	80093a8 <__sinit>
 800beaa:	4b21      	ldr	r3, [pc, #132]	; (800bf30 <__swbuf_r+0x98>)
 800beac:	429c      	cmp	r4, r3
 800beae:	d12b      	bne.n	800bf08 <__swbuf_r+0x70>
 800beb0:	686c      	ldr	r4, [r5, #4]
 800beb2:	69a3      	ldr	r3, [r4, #24]
 800beb4:	60a3      	str	r3, [r4, #8]
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	071a      	lsls	r2, r3, #28
 800beba:	d52f      	bpl.n	800bf1c <__swbuf_r+0x84>
 800bebc:	6923      	ldr	r3, [r4, #16]
 800bebe:	b36b      	cbz	r3, 800bf1c <__swbuf_r+0x84>
 800bec0:	6923      	ldr	r3, [r4, #16]
 800bec2:	6820      	ldr	r0, [r4, #0]
 800bec4:	1ac0      	subs	r0, r0, r3
 800bec6:	6963      	ldr	r3, [r4, #20]
 800bec8:	b2f6      	uxtb	r6, r6
 800beca:	4283      	cmp	r3, r0
 800becc:	4637      	mov	r7, r6
 800bece:	dc04      	bgt.n	800beda <__swbuf_r+0x42>
 800bed0:	4621      	mov	r1, r4
 800bed2:	4628      	mov	r0, r5
 800bed4:	f7ff f85c 	bl	800af90 <_fflush_r>
 800bed8:	bb30      	cbnz	r0, 800bf28 <__swbuf_r+0x90>
 800beda:	68a3      	ldr	r3, [r4, #8]
 800bedc:	3b01      	subs	r3, #1
 800bede:	60a3      	str	r3, [r4, #8]
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	6022      	str	r2, [r4, #0]
 800bee6:	701e      	strb	r6, [r3, #0]
 800bee8:	6963      	ldr	r3, [r4, #20]
 800beea:	3001      	adds	r0, #1
 800beec:	4283      	cmp	r3, r0
 800beee:	d004      	beq.n	800befa <__swbuf_r+0x62>
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	07db      	lsls	r3, r3, #31
 800bef4:	d506      	bpl.n	800bf04 <__swbuf_r+0x6c>
 800bef6:	2e0a      	cmp	r6, #10
 800bef8:	d104      	bne.n	800bf04 <__swbuf_r+0x6c>
 800befa:	4621      	mov	r1, r4
 800befc:	4628      	mov	r0, r5
 800befe:	f7ff f847 	bl	800af90 <_fflush_r>
 800bf02:	b988      	cbnz	r0, 800bf28 <__swbuf_r+0x90>
 800bf04:	4638      	mov	r0, r7
 800bf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf08:	4b0a      	ldr	r3, [pc, #40]	; (800bf34 <__swbuf_r+0x9c>)
 800bf0a:	429c      	cmp	r4, r3
 800bf0c:	d101      	bne.n	800bf12 <__swbuf_r+0x7a>
 800bf0e:	68ac      	ldr	r4, [r5, #8]
 800bf10:	e7cf      	b.n	800beb2 <__swbuf_r+0x1a>
 800bf12:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <__swbuf_r+0xa0>)
 800bf14:	429c      	cmp	r4, r3
 800bf16:	bf08      	it	eq
 800bf18:	68ec      	ldreq	r4, [r5, #12]
 800bf1a:	e7ca      	b.n	800beb2 <__swbuf_r+0x1a>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f000 f81a 	bl	800bf58 <__swsetup_r>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d0cb      	beq.n	800bec0 <__swbuf_r+0x28>
 800bf28:	f04f 37ff 	mov.w	r7, #4294967295
 800bf2c:	e7ea      	b.n	800bf04 <__swbuf_r+0x6c>
 800bf2e:	bf00      	nop
 800bf30:	0800ca28 	.word	0x0800ca28
 800bf34:	0800ca48 	.word	0x0800ca48
 800bf38:	0800ca08 	.word	0x0800ca08

0800bf3c <__ascii_wctomb>:
 800bf3c:	b149      	cbz	r1, 800bf52 <__ascii_wctomb+0x16>
 800bf3e:	2aff      	cmp	r2, #255	; 0xff
 800bf40:	bf85      	ittet	hi
 800bf42:	238a      	movhi	r3, #138	; 0x8a
 800bf44:	6003      	strhi	r3, [r0, #0]
 800bf46:	700a      	strbls	r2, [r1, #0]
 800bf48:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf4c:	bf98      	it	ls
 800bf4e:	2001      	movls	r0, #1
 800bf50:	4770      	bx	lr
 800bf52:	4608      	mov	r0, r1
 800bf54:	4770      	bx	lr
	...

0800bf58 <__swsetup_r>:
 800bf58:	4b32      	ldr	r3, [pc, #200]	; (800c024 <__swsetup_r+0xcc>)
 800bf5a:	b570      	push	{r4, r5, r6, lr}
 800bf5c:	681d      	ldr	r5, [r3, #0]
 800bf5e:	4606      	mov	r6, r0
 800bf60:	460c      	mov	r4, r1
 800bf62:	b125      	cbz	r5, 800bf6e <__swsetup_r+0x16>
 800bf64:	69ab      	ldr	r3, [r5, #24]
 800bf66:	b913      	cbnz	r3, 800bf6e <__swsetup_r+0x16>
 800bf68:	4628      	mov	r0, r5
 800bf6a:	f7fd fa1d 	bl	80093a8 <__sinit>
 800bf6e:	4b2e      	ldr	r3, [pc, #184]	; (800c028 <__swsetup_r+0xd0>)
 800bf70:	429c      	cmp	r4, r3
 800bf72:	d10f      	bne.n	800bf94 <__swsetup_r+0x3c>
 800bf74:	686c      	ldr	r4, [r5, #4]
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf7c:	0719      	lsls	r1, r3, #28
 800bf7e:	d42c      	bmi.n	800bfda <__swsetup_r+0x82>
 800bf80:	06dd      	lsls	r5, r3, #27
 800bf82:	d411      	bmi.n	800bfa8 <__swsetup_r+0x50>
 800bf84:	2309      	movs	r3, #9
 800bf86:	6033      	str	r3, [r6, #0]
 800bf88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf8c:	81a3      	strh	r3, [r4, #12]
 800bf8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf92:	e03e      	b.n	800c012 <__swsetup_r+0xba>
 800bf94:	4b25      	ldr	r3, [pc, #148]	; (800c02c <__swsetup_r+0xd4>)
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d101      	bne.n	800bf9e <__swsetup_r+0x46>
 800bf9a:	68ac      	ldr	r4, [r5, #8]
 800bf9c:	e7eb      	b.n	800bf76 <__swsetup_r+0x1e>
 800bf9e:	4b24      	ldr	r3, [pc, #144]	; (800c030 <__swsetup_r+0xd8>)
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	bf08      	it	eq
 800bfa4:	68ec      	ldreq	r4, [r5, #12]
 800bfa6:	e7e6      	b.n	800bf76 <__swsetup_r+0x1e>
 800bfa8:	0758      	lsls	r0, r3, #29
 800bfaa:	d512      	bpl.n	800bfd2 <__swsetup_r+0x7a>
 800bfac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfae:	b141      	cbz	r1, 800bfc2 <__swsetup_r+0x6a>
 800bfb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfb4:	4299      	cmp	r1, r3
 800bfb6:	d002      	beq.n	800bfbe <__swsetup_r+0x66>
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f7ff fbe9 	bl	800b790 <_free_r>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	6363      	str	r3, [r4, #52]	; 0x34
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	6063      	str	r3, [r4, #4]
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	f043 0308 	orr.w	r3, r3, #8
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	6923      	ldr	r3, [r4, #16]
 800bfdc:	b94b      	cbnz	r3, 800bff2 <__swsetup_r+0x9a>
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfe8:	d003      	beq.n	800bff2 <__swsetup_r+0x9a>
 800bfea:	4621      	mov	r1, r4
 800bfec:	4630      	mov	r0, r6
 800bfee:	f000 f84d 	bl	800c08c <__smakebuf_r>
 800bff2:	89a0      	ldrh	r0, [r4, #12]
 800bff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bff8:	f010 0301 	ands.w	r3, r0, #1
 800bffc:	d00a      	beq.n	800c014 <__swsetup_r+0xbc>
 800bffe:	2300      	movs	r3, #0
 800c000:	60a3      	str	r3, [r4, #8]
 800c002:	6963      	ldr	r3, [r4, #20]
 800c004:	425b      	negs	r3, r3
 800c006:	61a3      	str	r3, [r4, #24]
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	b943      	cbnz	r3, 800c01e <__swsetup_r+0xc6>
 800c00c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c010:	d1ba      	bne.n	800bf88 <__swsetup_r+0x30>
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	0781      	lsls	r1, r0, #30
 800c016:	bf58      	it	pl
 800c018:	6963      	ldrpl	r3, [r4, #20]
 800c01a:	60a3      	str	r3, [r4, #8]
 800c01c:	e7f4      	b.n	800c008 <__swsetup_r+0xb0>
 800c01e:	2000      	movs	r0, #0
 800c020:	e7f7      	b.n	800c012 <__swsetup_r+0xba>
 800c022:	bf00      	nop
 800c024:	20000024 	.word	0x20000024
 800c028:	0800ca28 	.word	0x0800ca28
 800c02c:	0800ca48 	.word	0x0800ca48
 800c030:	0800ca08 	.word	0x0800ca08

0800c034 <abort>:
 800c034:	b508      	push	{r3, lr}
 800c036:	2006      	movs	r0, #6
 800c038:	f000 f898 	bl	800c16c <raise>
 800c03c:	2001      	movs	r0, #1
 800c03e:	f7f7 fa8f 	bl	8003560 <_exit>

0800c042 <__swhatbuf_r>:
 800c042:	b570      	push	{r4, r5, r6, lr}
 800c044:	460e      	mov	r6, r1
 800c046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04a:	2900      	cmp	r1, #0
 800c04c:	b096      	sub	sp, #88	; 0x58
 800c04e:	4614      	mov	r4, r2
 800c050:	461d      	mov	r5, r3
 800c052:	da08      	bge.n	800c066 <__swhatbuf_r+0x24>
 800c054:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	602a      	str	r2, [r5, #0]
 800c05c:	061a      	lsls	r2, r3, #24
 800c05e:	d410      	bmi.n	800c082 <__swhatbuf_r+0x40>
 800c060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c064:	e00e      	b.n	800c084 <__swhatbuf_r+0x42>
 800c066:	466a      	mov	r2, sp
 800c068:	f000 f89c 	bl	800c1a4 <_fstat_r>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	dbf1      	blt.n	800c054 <__swhatbuf_r+0x12>
 800c070:	9a01      	ldr	r2, [sp, #4]
 800c072:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c076:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c07a:	425a      	negs	r2, r3
 800c07c:	415a      	adcs	r2, r3
 800c07e:	602a      	str	r2, [r5, #0]
 800c080:	e7ee      	b.n	800c060 <__swhatbuf_r+0x1e>
 800c082:	2340      	movs	r3, #64	; 0x40
 800c084:	2000      	movs	r0, #0
 800c086:	6023      	str	r3, [r4, #0]
 800c088:	b016      	add	sp, #88	; 0x58
 800c08a:	bd70      	pop	{r4, r5, r6, pc}

0800c08c <__smakebuf_r>:
 800c08c:	898b      	ldrh	r3, [r1, #12]
 800c08e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c090:	079d      	lsls	r5, r3, #30
 800c092:	4606      	mov	r6, r0
 800c094:	460c      	mov	r4, r1
 800c096:	d507      	bpl.n	800c0a8 <__smakebuf_r+0x1c>
 800c098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	6123      	str	r3, [r4, #16]
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	6163      	str	r3, [r4, #20]
 800c0a4:	b002      	add	sp, #8
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
 800c0a8:	ab01      	add	r3, sp, #4
 800c0aa:	466a      	mov	r2, sp
 800c0ac:	f7ff ffc9 	bl	800c042 <__swhatbuf_r>
 800c0b0:	9900      	ldr	r1, [sp, #0]
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f7fd fa8d 	bl	80095d4 <_malloc_r>
 800c0ba:	b948      	cbnz	r0, 800c0d0 <__smakebuf_r+0x44>
 800c0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c0:	059a      	lsls	r2, r3, #22
 800c0c2:	d4ef      	bmi.n	800c0a4 <__smakebuf_r+0x18>
 800c0c4:	f023 0303 	bic.w	r3, r3, #3
 800c0c8:	f043 0302 	orr.w	r3, r3, #2
 800c0cc:	81a3      	strh	r3, [r4, #12]
 800c0ce:	e7e3      	b.n	800c098 <__smakebuf_r+0xc>
 800c0d0:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <__smakebuf_r+0x7c>)
 800c0d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	6020      	str	r0, [r4, #0]
 800c0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0dc:	81a3      	strh	r3, [r4, #12]
 800c0de:	9b00      	ldr	r3, [sp, #0]
 800c0e0:	6163      	str	r3, [r4, #20]
 800c0e2:	9b01      	ldr	r3, [sp, #4]
 800c0e4:	6120      	str	r0, [r4, #16]
 800c0e6:	b15b      	cbz	r3, 800c100 <__smakebuf_r+0x74>
 800c0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f000 f86b 	bl	800c1c8 <_isatty_r>
 800c0f2:	b128      	cbz	r0, 800c100 <__smakebuf_r+0x74>
 800c0f4:	89a3      	ldrh	r3, [r4, #12]
 800c0f6:	f023 0303 	bic.w	r3, r3, #3
 800c0fa:	f043 0301 	orr.w	r3, r3, #1
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	89a0      	ldrh	r0, [r4, #12]
 800c102:	4305      	orrs	r5, r0
 800c104:	81a5      	strh	r5, [r4, #12]
 800c106:	e7cd      	b.n	800c0a4 <__smakebuf_r+0x18>
 800c108:	08009341 	.word	0x08009341

0800c10c <_malloc_usable_size_r>:
 800c10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c110:	1f18      	subs	r0, r3, #4
 800c112:	2b00      	cmp	r3, #0
 800c114:	bfbc      	itt	lt
 800c116:	580b      	ldrlt	r3, [r1, r0]
 800c118:	18c0      	addlt	r0, r0, r3
 800c11a:	4770      	bx	lr

0800c11c <_raise_r>:
 800c11c:	291f      	cmp	r1, #31
 800c11e:	b538      	push	{r3, r4, r5, lr}
 800c120:	4604      	mov	r4, r0
 800c122:	460d      	mov	r5, r1
 800c124:	d904      	bls.n	800c130 <_raise_r+0x14>
 800c126:	2316      	movs	r3, #22
 800c128:	6003      	str	r3, [r0, #0]
 800c12a:	f04f 30ff 	mov.w	r0, #4294967295
 800c12e:	bd38      	pop	{r3, r4, r5, pc}
 800c130:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c132:	b112      	cbz	r2, 800c13a <_raise_r+0x1e>
 800c134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c138:	b94b      	cbnz	r3, 800c14e <_raise_r+0x32>
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 f830 	bl	800c1a0 <_getpid_r>
 800c140:	462a      	mov	r2, r5
 800c142:	4601      	mov	r1, r0
 800c144:	4620      	mov	r0, r4
 800c146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c14a:	f000 b817 	b.w	800c17c <_kill_r>
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d00a      	beq.n	800c168 <_raise_r+0x4c>
 800c152:	1c59      	adds	r1, r3, #1
 800c154:	d103      	bne.n	800c15e <_raise_r+0x42>
 800c156:	2316      	movs	r3, #22
 800c158:	6003      	str	r3, [r0, #0]
 800c15a:	2001      	movs	r0, #1
 800c15c:	e7e7      	b.n	800c12e <_raise_r+0x12>
 800c15e:	2400      	movs	r4, #0
 800c160:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c164:	4628      	mov	r0, r5
 800c166:	4798      	blx	r3
 800c168:	2000      	movs	r0, #0
 800c16a:	e7e0      	b.n	800c12e <_raise_r+0x12>

0800c16c <raise>:
 800c16c:	4b02      	ldr	r3, [pc, #8]	; (800c178 <raise+0xc>)
 800c16e:	4601      	mov	r1, r0
 800c170:	6818      	ldr	r0, [r3, #0]
 800c172:	f7ff bfd3 	b.w	800c11c <_raise_r>
 800c176:	bf00      	nop
 800c178:	20000024 	.word	0x20000024

0800c17c <_kill_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d07      	ldr	r5, [pc, #28]	; (800c19c <_kill_r+0x20>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	4611      	mov	r1, r2
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	f7f7 f9d9 	bl	8003540 <_kill>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d102      	bne.n	800c198 <_kill_r+0x1c>
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	b103      	cbz	r3, 800c198 <_kill_r+0x1c>
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	bf00      	nop
 800c19c:	20004d74 	.word	0x20004d74

0800c1a0 <_getpid_r>:
 800c1a0:	f7f7 b9c6 	b.w	8003530 <_getpid>

0800c1a4 <_fstat_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4d07      	ldr	r5, [pc, #28]	; (800c1c4 <_fstat_r+0x20>)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	4608      	mov	r0, r1
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	602b      	str	r3, [r5, #0]
 800c1b2:	f7f7 fa24 	bl	80035fe <_fstat>
 800c1b6:	1c43      	adds	r3, r0, #1
 800c1b8:	d102      	bne.n	800c1c0 <_fstat_r+0x1c>
 800c1ba:	682b      	ldr	r3, [r5, #0]
 800c1bc:	b103      	cbz	r3, 800c1c0 <_fstat_r+0x1c>
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	bd38      	pop	{r3, r4, r5, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20004d74 	.word	0x20004d74

0800c1c8 <_isatty_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d06      	ldr	r5, [pc, #24]	; (800c1e4 <_isatty_r+0x1c>)
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	f7f7 fa23 	bl	800361e <_isatty>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_isatty_r+0x1a>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_isatty_r+0x1a>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20004d74 	.word	0x20004d74

0800c1e8 <_init>:
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ea:	bf00      	nop
 800c1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ee:	bc08      	pop	{r3}
 800c1f0:	469e      	mov	lr, r3
 800c1f2:	4770      	bx	lr

0800c1f4 <_fini>:
 800c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f6:	bf00      	nop
 800c1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fa:	bc08      	pop	{r3}
 800c1fc:	469e      	mov	lr, r3
 800c1fe:	4770      	bx	lr
