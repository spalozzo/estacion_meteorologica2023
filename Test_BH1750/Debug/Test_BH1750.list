
Test_BH1750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008148  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  080082e8  080082e8  000182e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800867c  0800867c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008684  08008684  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800868c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001d4  08008860  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08008860  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be5c  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9a  00000000  00000000  0002c0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000831  00000000  00000000  0002e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016960  00000000  00000000  0002f0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd10  00000000  00000000  00045a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089208  00000000  00000000  00053769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b1c  00000000  00000000  000dc974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e0490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082d0 	.word	0x080082d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080082d0 	.word	0x080082d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <BH1750_Init+0x34>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000ec2:	f000 f813 	bl	8000eec <BH1750_Reset>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d107      	bne.n	8000edc <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000ecc:	2045      	movs	r0, #69	; 0x45
 8000ece:	f000 f859 	bl	8000f84 <BH1750_SetMtreg>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <BH1750_Init+0x28>
			return BH1750_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e000      	b.n	8000ede <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000edc:	2301      	movs	r3, #1
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001f0 	.word	0x200001f0

08000eec <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <BH1750_Reset+0x30>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	1dfa      	adds	r2, r7, #7
 8000efc:	230a      	movs	r3, #10
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	2146      	movs	r1, #70	; 0x46
 8000f04:	f001 fce0 	bl	80028c8 <HAL_I2C_Master_Transmit>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <BH1750_Reset+0x26>
	//if(HAL_OK == HAL_I2C_Master_Transmit_DMA(bh1750_i2c, BH1750_ADDRESS, &tmp, 1))
		return BH1750_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001f0 	.word	0x200001f0

08000f20 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_MODE Mode)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d106      	bne.n	8000f42 <BH1750_SetMode+0x22>
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <BH1750_SetMode+0x22>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e018      	b.n	8000f74 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <BH1750_SetMode+0x30>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e011      	b.n	8000f74 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <BH1750_SetMode+0x5c>)
 8000f54:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <BH1750_SetMode+0x60>)
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	2146      	movs	r1, #70	; 0x46
 8000f64:	f001 fcb0 	bl	80028c8 <HAL_I2C_Master_Transmit>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <BH1750_SetMode+0x52>
		return BH1750_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200001f4 	.word	0x200001f4
 8000f80:	200001f0 	.word	0x200001f0

08000f84 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b1e      	cmp	r3, #30
 8000f92:	d902      	bls.n	8000f9a <BH1750_SetMtreg+0x16>
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2bff      	cmp	r3, #255	; 0xff
 8000f98:	d101      	bne.n	8000f9e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e037      	b.n	800100e <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	; (8001018 <BH1750_SetMtreg+0x94>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <BH1750_SetMtreg+0x98>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	230a      	movs	r3, #10
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2146      	movs	r1, #70	; 0x46
 8000fd6:	f001 fc77 	bl	80028c8 <HAL_I2C_Master_Transmit>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e012      	b.n	800100e <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <BH1750_SetMtreg+0x98>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2146      	movs	r1, #70	; 0x46
 8000ffa:	f001 fc65 	bl	80028c8 <HAL_I2C_Master_Transmit>
 8000ffe:	4603      	mov	r3, r0
 8001000:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e000      	b.n	800100e <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001f5 	.word	0x200001f5
 800101c:	200001f0 	.word	0x200001f0

08001020 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];


	//if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
	if(HAL_OK == HAL_I2C_Master_Receive_DMA(bh1750_i2c, BH1750_ADDRESS, tmp, 2))
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <BH1750_ReadLight+0x9c>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	f107 0208 	add.w	r2, r7, #8
 8001030:	2302      	movs	r3, #2
 8001032:	2146      	movs	r1, #70	; 0x46
 8001034:	f001 fd46 	bl	8002ac4 <HAL_I2C_Master_Receive_DMA>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d138      	bne.n	80010b0 <BH1750_ReadLight+0x90>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 800103e:	7a3b      	ldrb	r3, [r7, #8]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	7a7a      	ldrb	r2, [r7, #9]
 8001044:	4313      	orrs	r3, r2
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104e:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <BH1750_ReadLight+0xa0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b45      	cmp	r3, #69	; 0x45
 8001058:	d00f      	beq.n	800107a <BH1750_ReadLight+0x5a>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <BH1750_ReadLight+0xa0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001066:	eddf 6a17 	vldr	s13, [pc, #92]	; 80010c4 <BH1750_ReadLight+0xa4>
 800106a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800106e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001076:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <BH1750_ReadLight+0xa8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b21      	cmp	r3, #33	; 0x21
 8001080:	d003      	beq.n	800108a <BH1750_ReadLight+0x6a>
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <BH1750_ReadLight+0xa8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b11      	cmp	r3, #17
 8001088:	d107      	bne.n	800109a <BH1750_ReadLight+0x7a>
		{
			result /= 2.0;
 800108a:	ed97 7a03 	vldr	s14, [r7, #12]
 800108e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001096:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800109a:	ed97 7a03 	vldr	s14, [r7, #12]
 800109e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80010cc <BH1750_ReadLight+0xac>
 80010a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <BH1750_ReadLight+0x92>
	}
	return BH1750_ERROR;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001f0 	.word	0x200001f0
 80010c0:	200001f5 	.word	0x200001f5
 80010c4:	428a0000 	.word	0x428a0000
 80010c8:	200001f4 	.word	0x200001f4
 80010cc:	3f99999a 	.word	0x3f99999a

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f000 fbe6 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 f816 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f000 f8fe 	bl	80012dc <MX_GPIO_Init>
  MX_DMA_Init();
 80010e0:	f000 f8d4 	bl	800128c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010e4:	f000 f8a8 	bl	8001238 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010e8:	f000 f878 	bl	80011dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BH1750_Init(&hi2c1); //Usa funciones bloqueantes pero va en la inicializacion
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <main+0x30>)
 80010ee:	f7ff fee1 	bl	8000eb4 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE); //Usa funciones bloqueantes pero va en la inicializacion
 80010f2:	2010      	movs	r0, #16
 80010f4:	f7ff ff14 	bl	8000f20 <BH1750_SetMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BH1750_ReadLight(&LuzDetectada); //Corregido sin bloqueantes
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <main+0x34>)
 80010fa:	f7ff ff91 	bl	8001020 <BH1750_ReadLight>
 80010fe:	e7fb      	b.n	80010f8 <main+0x28>
 8001100:	200001f8 	.word	0x200001f8
 8001104:	20000350 	.word	0x20000350

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f005 f989 	bl	800642e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <SystemClock_Config+0xcc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <SystemClock_Config+0xcc>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <SystemClock_Config+0xcc>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <SystemClock_Config+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <SystemClock_Config+0xd0>)
 8001156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <SystemClock_Config+0xd0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800116c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800117c:	2304      	movs	r3, #4
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001180:	2354      	movs	r3, #84	; 0x54
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001188:	2307      	movs	r3, #7
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f003 fc87 	bl	8004aa4 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800119c:	f000 f90c 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2102      	movs	r1, #2
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fee9 	bl	8004f94 <HAL_RCC_ClockConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011c8:	f000 f8f6 	bl	80013b8 <Error_Handler>
  }
}
 80011cc:	bf00      	nop
 80011ce:	3750      	adds	r7, #80	; 0x50
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x50>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_I2C1_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x50>)
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_I2C1_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_I2C1_Init+0x50>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C1_Init+0x50>)
 800121a:	f001 fa11 	bl	8002640 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 f8c8 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001f8 	.word	0x200001f8
 8001230:	40005400 	.word	0x40005400
 8001234:	00061a80 	.word	0x00061a80

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_USART2_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001270:	f004 f8b0 	bl	80053d4 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f89d 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000030c 	.word	0x2000030c
 8001288:	40004400 	.word	0x40004400

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_DMA_Init+0x4c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <MX_DMA_Init+0x4c>)
 800129c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <MX_DMA_Init+0x4c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	200b      	movs	r0, #11
 80012b4:	f000 fc43 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012b8:	200b      	movs	r0, #11
 80012ba:	f000 fc5c 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2011      	movs	r0, #17
 80012c4:	f000 fc3b 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012c8:	2011      	movs	r0, #17
 80012ca:	f000 fc54 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <MX_GPIO_Init+0xd0>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a25      	ldr	r2, [pc, #148]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_GPIO_Init+0xd0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_GPIO_Init+0xd0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2120      	movs	r1, #32
 8001366:	4812      	ldr	r0, [pc, #72]	; (80013b0 <MX_GPIO_Init+0xd4>)
 8001368:	f001 f950 	bl	800260c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800136c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001372:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0xd8>)
 8001384:	f000 ffbe 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001388:	2320      	movs	r3, #32
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_GPIO_Init+0xd4>)
 80013a0:	f000 ffb0 	bl	8002304 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020800 	.word	0x40020800

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <HAL_MspInit+0x4c>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_MspInit+0x4c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001402:	2007      	movs	r0, #7
 8001404:	f000 fb90 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_I2C_MspInit+0x150>)
 8001432:	4293      	cmp	r3, r2
 8001434:	f040 8091 	bne.w	800155a <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <HAL_I2C_MspInit+0x154>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	4a49      	ldr	r2, [pc, #292]	; (8001568 <HAL_I2C_MspInit+0x154>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	6313      	str	r3, [r2, #48]	; 0x30
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <HAL_I2C_MspInit+0x154>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001454:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001466:	2304      	movs	r3, #4
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	483e      	ldr	r0, [pc, #248]	; (800156c <HAL_I2C_MspInit+0x158>)
 8001472:	f000 ff47 	bl	8002304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <HAL_I2C_MspInit+0x154>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a3a      	ldr	r2, [pc, #232]	; (8001568 <HAL_I2C_MspInit+0x154>)
 8001480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_I2C_MspInit+0x154>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 8001494:	4a37      	ldr	r2, [pc, #220]	; (8001574 <HAL_I2C_MspInit+0x160>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001498:	4b35      	ldr	r3, [pc, #212]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 800149a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800149e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b4:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014d4:	f000 fb6a 	bl	8001bac <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80014de:	f7ff ff6b 	bl	80013b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <HAL_I2C_MspInit+0x15c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_I2C_MspInit+0x164>)
 80014f0:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_I2C_MspInit+0x168>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_I2C_MspInit+0x164>)
 80014f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_I2C_MspInit+0x164>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_I2C_MspInit+0x164>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_I2C_MspInit+0x164>)
 800150a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_I2C_MspInit+0x164>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_I2C_MspInit+0x164>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_I2C_MspInit+0x164>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_I2C_MspInit+0x164>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_I2C_MspInit+0x164>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <HAL_I2C_MspInit+0x164>)
 8001530:	f000 fb3c 	bl	8001bac <HAL_DMA_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800153a:	f7ff ff3d 	bl	80013b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_I2C_MspInit+0x164>)
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_I2C_MspInit+0x164>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	201f      	movs	r0, #31
 8001550:	f000 faf5 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001554:	201f      	movs	r0, #31
 8001556:	f000 fb0e 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40005400 	.word	0x40005400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020400 	.word	0x40020400
 8001570:	2000024c 	.word	0x2000024c
 8001574:	400260a0 	.word	0x400260a0
 8001578:	200002ac 	.word	0x200002ac
 800157c:	40026010 	.word	0x40026010

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_UART_MspInit+0x84>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12b      	bne.n	80015fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_UART_MspInit+0x88>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_UART_MspInit+0x88>)
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_UART_MspInit+0x88>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_UART_MspInit+0x88>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <HAL_UART_MspInit+0x88>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_UART_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015da:	230c      	movs	r3, #12
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ea:	2307      	movs	r3, #7
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <HAL_UART_MspInit+0x8c>)
 80015f6:	f000 fe85 	bl	8002304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40004400 	.word	0x40004400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f974 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <DMA1_Stream0_IRQHandler+0x10>)
 800166a:	f000 fbc7 	bl	8001dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200002ac 	.word	0x200002ac

08001678 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA1_Stream6_IRQHandler+0x10>)
 800167e:	f000 fbbd 	bl	8001dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000024c 	.word	0x2000024c

0800168c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <I2C1_EV_IRQHandler+0x10>)
 8001692:	f001 fb47 	bl	8002d24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001f8 	.word	0x200001f8

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_kill>:

int _kill(int pid, int sig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ba:	f004 ff0b 	bl	80064d4 <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	2216      	movs	r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
  return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_exit>:

void _exit (int status)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffe7 	bl	80016b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e2:	e7fe      	b.n	80016e2 <_exit+0x12>

080016e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e00a      	b.n	800170c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f6:	f3af 8000 	nop.w
 80016fa:	4601      	mov	r1, r0
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf0      	blt.n	80016f6 <_read+0x12>
  }

  return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e009      	b.n	8001744 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf1      	blt.n	8001730 <_write+0x12>
  }
  return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_close>:

int _close(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800177e:	605a      	str	r2, [r3, #4]
  return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_isatty>:

int _isatty(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f004 fe70 	bl	80064d4 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20018000 	.word	0x20018000
 8001820:	00000400 	.word	0x00000400
 8001824:	20000354 	.word	0x20000354
 8001828:	200004a8 	.word	0x200004a8

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001856:	490e      	ldr	r1, [pc, #56]	; (8001890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800186c:	4c0b      	ldr	r4, [pc, #44]	; (800189c <LoopFillZerobss+0x26>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800187a:	f7ff ffd7 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f004 fe2f 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7ff fc25 	bl	80010d0 <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001888:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001894:	0800868c 	.word	0x0800868c
  ldr r2, =_sbss
 8001898:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800189c:	200004a8 	.word	0x200004a8

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f92b 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fd74 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f943 	bl	8001b92 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f90b 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	20000008 	.word	0x20000008
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	20000358 	.word	0x20000358

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000358 	.word	0x20000358

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff feda 	bl	8001970 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e099      	b.n	8001cfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be8:	e00f      	b.n	8001c0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bea:	f7ff fec1 	bl	8001970 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d908      	bls.n	8001c0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2203      	movs	r2, #3
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e078      	b.n	8001cfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e8      	bne.n	8001bea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <HAL_DMA_Init+0x158>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d107      	bne.n	8001c74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f023 0307 	bic.w	r3, r3, #7
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d117      	bne.n	8001cce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 faab 	bl	800220c <DMA_CheckFifoParam>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e016      	b.n	8001cfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa62 	bl	80021a0 <DMA_CalcBaseAndBitshift>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	223f      	movs	r2, #63	; 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	f010803f 	.word	0xf010803f

08001d08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_DMA_Start_IT+0x26>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e040      	b.n	8001db0 <HAL_DMA_Start_IT+0xa8>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d12f      	bne.n	8001da2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2202      	movs	r2, #2
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f9f4 	bl	8002144 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	223f      	movs	r2, #63	; 0x3f
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0216 	orr.w	r2, r2, #22
 8001d76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0208 	orr.w	r2, r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e005      	b.n	8001dae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
 8001dac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d004      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00c      	b.n	8001df0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2205      	movs	r2, #5
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e08:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <HAL_DMA_IRQHandler+0x248>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a8e      	ldr	r2, [pc, #568]	; (8002048 <HAL_DMA_IRQHandler+0x24c>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0a9b      	lsrs	r3, r3, #10
 8001e14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2208      	movs	r2, #8
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01a      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0204 	bic.w	r2, r2, #4
 8001e4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2208      	movs	r2, #8
 8001e56:	409a      	lsls	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d012      	beq.n	8001e9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f043 0202 	orr.w	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f043 0204 	orr.w	r2, r3, #4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2210      	movs	r2, #16
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d043      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03c      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d018      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d108      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d024      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
 8001f2a:	e01f      	b.n	8001f6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01b      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
 8001f3c:	e016      	b.n	8001f6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0208 	bic.w	r2, r2, #8
 8001f5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2220      	movs	r2, #32
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 808f 	beq.w	800209c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8087 	beq.w	800209c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	2220      	movs	r2, #32
 8001f94:	409a      	lsls	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d136      	bne.n	8002014 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0216 	bic.w	r2, r2, #22
 8001fb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x1da>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0208 	bic.w	r2, r2, #8
 8001fe4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	223f      	movs	r2, #63	; 0x3f
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002006:	2b00      	cmp	r3, #0
 8002008:	d07e      	beq.n	8002108 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
        }
        return;
 8002012:	e079      	b.n	8002108 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01d      	beq.n	800205e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	2b00      	cmp	r3, #0
 8002036:	d031      	beq.n	800209c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
 8002040:	e02c      	b.n	800209c <HAL_DMA_IRQHandler+0x2a0>
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000
 8002048:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e01e      	b.n	800209c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10f      	bne.n	800208c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0210 	bic.w	r2, r2, #16
 800207a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d032      	beq.n	800210a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d022      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2205      	movs	r2, #5
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3301      	adds	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d307      	bcc.n	80020e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f2      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x2cc>
 80020e2:	e000      	b.n	80020e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
 8002106:	e000      	b.n	800210a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002108:	bf00      	nop
    }
  }
}
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800211e:	b2db      	uxtb	r3, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002160:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d108      	bne.n	8002184 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002182:	e007      	b.n	8002194 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	60da      	str	r2, [r3, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3b10      	subs	r3, #16
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <DMA_CalcBaseAndBitshift+0x64>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ba:	4a13      	ldr	r2, [pc, #76]	; (8002208 <DMA_CalcBaseAndBitshift+0x68>)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d909      	bls.n	80021e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	1d1a      	adds	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
 80021e0:	e007      	b.n	80021f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	aaaaaaab 	.word	0xaaaaaaab
 8002208:	08008300 	.word	0x08008300

0800220c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11f      	bne.n	8002266 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d856      	bhi.n	80022da <DMA_CheckFifoParam+0xce>
 800222c:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <DMA_CheckFifoParam+0x28>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002245 	.word	0x08002245
 8002238:	08002257 	.word	0x08002257
 800223c:	08002245 	.word	0x08002245
 8002240:	080022db 	.word	0x080022db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d046      	beq.n	80022de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002254:	e043      	b.n	80022de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800225e:	d140      	bne.n	80022e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002264:	e03d      	b.n	80022e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226e:	d121      	bne.n	80022b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d837      	bhi.n	80022e6 <DMA_CheckFifoParam+0xda>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <DMA_CheckFifoParam+0x70>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	0800228d 	.word	0x0800228d
 8002280:	08002293 	.word	0x08002293
 8002284:	0800228d 	.word	0x0800228d
 8002288:	080022a5 	.word	0x080022a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      break;
 8002290:	e030      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d025      	beq.n	80022ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a2:	e022      	b.n	80022ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ac:	d11f      	bne.n	80022ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022b2:	e01c      	b.n	80022ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d903      	bls.n	80022c2 <DMA_CheckFifoParam+0xb6>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d003      	beq.n	80022c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022c0:	e018      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      break;
 80022c6:	e015      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00e      	beq.n	80022f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      break;
 80022d8:	e00b      	b.n	80022f2 <DMA_CheckFifoParam+0xe6>
      break;
 80022da:	bf00      	nop
 80022dc:	e00a      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e008      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022e2:	bf00      	nop
 80022e4:	e006      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
 80022e8:	e004      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ea:	bf00      	nop
 80022ec:	e002      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ee:	bf00      	nop
 80022f0:	e000      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022f2:	bf00      	nop
    }
  } 
  
  return status; 
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e159      	b.n	80025d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 8148 	bne.w	80025ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d005      	beq.n	8002356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002352:	2b02      	cmp	r3, #2
 8002354:	d130      	bne.n	80023b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0201 	and.w	r2, r3, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d017      	beq.n	80023f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d123      	bne.n	8002448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a2 	beq.w	80025ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a6:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_GPIO_Init+0x2f0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_Init+0x202>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_GPIO_Init+0x2f4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0x1fe>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a47      	ldr	r2, [pc, #284]	; (80025fc <HAL_GPIO_Init+0x2f8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_Init+0x1fa>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a46      	ldr	r2, [pc, #280]	; (8002600 <HAL_GPIO_Init+0x2fc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x1f6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a45      	ldr	r2, [pc, #276]	; (8002604 <HAL_GPIO_Init+0x300>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_Init+0x1f2>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x204>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x204>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_GPIO_Init+0x304>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_GPIO_Init+0x304>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259e:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f aea2 	bls.w	8002320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
 8002618:	4613      	mov	r3, r2
 800261a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800261c:	787b      	ldrb	r3, [r7, #1]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002628:	e003      	b.n	8002632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	041a      	lsls	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e12b      	b.n	80028aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe fed4 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026a4:	f002 fe6e 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 80026a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a81      	ldr	r2, [pc, #516]	; (80028b4 <HAL_I2C_Init+0x274>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d807      	bhi.n	80026c4 <HAL_I2C_Init+0x84>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a80      	ldr	r2, [pc, #512]	; (80028b8 <HAL_I2C_Init+0x278>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	bf94      	ite	ls
 80026bc:	2301      	movls	r3, #1
 80026be:	2300      	movhi	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e006      	b.n	80026d2 <HAL_I2C_Init+0x92>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a7d      	ldr	r2, [pc, #500]	; (80028bc <HAL_I2C_Init+0x27c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0e7      	b.n	80028aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a78      	ldr	r2, [pc, #480]	; (80028c0 <HAL_I2C_Init+0x280>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9b      	lsrs	r3, r3, #18
 80026e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a6a      	ldr	r2, [pc, #424]	; (80028b4 <HAL_I2C_Init+0x274>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d802      	bhi.n	8002714 <HAL_I2C_Init+0xd4>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	e009      	b.n	8002728 <HAL_I2C_Init+0xe8>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_I2C_Init+0x284>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	3301      	adds	r3, #1
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800273a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	495c      	ldr	r1, [pc, #368]	; (80028b4 <HAL_I2C_Init+0x274>)
 8002744:	428b      	cmp	r3, r1
 8002746:	d819      	bhi.n	800277c <HAL_I2C_Init+0x13c>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e59      	subs	r1, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fbb1 f3f3 	udiv	r3, r1, r3
 8002756:	1c59      	adds	r1, r3, #1
 8002758:	f640 73fc 	movw	r3, #4092	; 0xffc
 800275c:	400b      	ands	r3, r1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_I2C_Init+0x138>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1e59      	subs	r1, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002776:	e051      	b.n	800281c <HAL_I2C_Init+0x1dc>
 8002778:	2304      	movs	r3, #4
 800277a:	e04f      	b.n	800281c <HAL_I2C_Init+0x1dc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_I2C_Init+0x168>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	440b      	add	r3, r1
 8002792:	fbb0 f3f3 	udiv	r3, r0, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e012      	b.n	80027ce <HAL_I2C_Init+0x18e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x196>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e022      	b.n	800281c <HAL_I2C_Init+0x1dc>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10e      	bne.n	80027fc <HAL_I2C_Init+0x1bc>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e58      	subs	r0, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	440b      	add	r3, r1
 80027ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Init+0x1dc>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	6809      	ldr	r1, [r1, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800284a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6911      	ldr	r1, [r2, #16]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	000186a0 	.word	0x000186a0
 80028b8:	001e847f 	.word	0x001e847f
 80028bc:	003d08ff 	.word	0x003d08ff
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff f848 	bl	8001970 <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	f040 80e0 	bne.w	8002ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2319      	movs	r3, #25
 80028f6:	2201      	movs	r2, #1
 80028f8:	4970      	ldr	r1, [pc, #448]	; (8002abc <HAL_I2C_Master_Transmit+0x1f4>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f001 fefe 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	e0d3      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2C_Master_Transmit+0x50>
 8002914:	2302      	movs	r3, #2
 8002916:	e0cc      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d007      	beq.n	800293e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2221      	movs	r2, #33	; 0x21
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2210      	movs	r2, #16
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	893a      	ldrh	r2, [r7, #8]
 800296e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a50      	ldr	r2, [pc, #320]	; (8002ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f001 fc7c 	bl	8004284 <I2C_MasterRequestWrite>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e08d      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029ac:	e066      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	6a39      	ldr	r1, [r7, #32]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f001 ff78 	bl	80048a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d107      	bne.n	80029d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06b      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d11b      	bne.n	8002a50 <HAL_I2C_Master_Transmit+0x188>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	6a39      	ldr	r1, [r7, #32]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f001 ff68 	bl	800492a <I2C_WaitOnBTFFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d107      	bne.n	8002a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e01a      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d194      	bne.n	80029ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	00100002 	.word	0x00100002
 8002ac0:	ffff0000 	.word	0xffff0000

08002ac4 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	817b      	strh	r3, [r7, #10]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	f040 810d 	bne.w	8002d04 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	4a88      	ldr	r2, [pc, #544]	; (8002d14 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	0a1a      	lsrs	r2, r3, #8
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009a      	lsls	r2, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d116      	bne.n	8002b3e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0e3      	b.n	8002d06 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d0db      	beq.n	8002b04 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_I2C_Master_Receive_DMA+0x96>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0d5      	b.n	8002d06 <HAL_I2C_Master_Receive_DMA+0x242>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d007      	beq.n	8002b80 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2222      	movs	r2, #34	; 0x22
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	893a      	ldrh	r2, [r7, #8]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a56      	ldr	r2, [pc, #344]	; (8002d18 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002bc2:	897a      	ldrh	r2, [r7, #10]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d07b      	beq.n	8002cc8 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02a      	beq.n	8002c2e <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	4a4f      	ldr	r2, [pc, #316]	; (8002d1c <HAL_I2C_Master_Receive_DMA+0x258>)
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	4a4e      	ldr	r2, [pc, #312]	; (8002d20 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002be6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	2200      	movs	r2, #0
 8002c06:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3310      	adds	r3, #16
 8002c12:	4619      	mov	r1, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	f7ff f873 	bl	8001d08 <HAL_DMA_Start_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d139      	bne.n	8002ca0 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002c2c:	e013      	b.n	8002c56 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e057      	b.n	8002d06 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c64:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c74:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c8c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	e02f      	b.n	8002d00 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0210 	orr.w	r2, r3, #16
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e01e      	b.n	8002d06 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002cde:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cee:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000000 	.word	0x20000000
 8002d14:	14f8b589 	.word	0x14f8b589
 8002d18:	ffff0000 	.word	0xffff0000
 8002d1c:	08004389 	.word	0x08004389
 8002d20:	08004533 	.word	0x08004533

08002d24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d003      	beq.n	8002d5c <HAL_I2C_EV_IRQHandler+0x38>
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	f040 80b1 	bne.w	8002ebe <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10d      	bne.n	8002d92 <HAL_I2C_EV_IRQHandler+0x6e>
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d7c:	d003      	beq.n	8002d86 <HAL_I2C_EV_IRQHandler+0x62>
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d84:	d101      	bne.n	8002d8a <HAL_I2C_EV_IRQHandler+0x66>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_I2C_EV_IRQHandler+0x68>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	f000 8114 	beq.w	8002fba <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_I2C_EV_IRQHandler+0x90>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f001 fe61 	bl	8004a6e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fcbf 	bl	8003730 <I2C_Master_SB>
 8002db2:	e083      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_I2C_EV_IRQHandler+0xac>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fd37 	bl	800383c <I2C_Master_ADD10>
 8002dce:	e075      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_I2C_EV_IRQHandler+0xc8>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fd53 	bl	8003890 <I2C_Master_ADDR>
 8002dea:	e067      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d036      	beq.n	8002e64 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e04:	f000 80db 	beq.w	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <HAL_I2C_EV_IRQHandler+0x10a>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_I2C_EV_IRQHandler+0x10a>
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f937 	bl	800309a <I2C_MasterTransmit_TXE>
 8002e2c:	e046      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80c2 	beq.w	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80bc 	beq.w	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e46:	7bbb      	ldrb	r3, [r7, #14]
 8002e48:	2b21      	cmp	r3, #33	; 0x21
 8002e4a:	d103      	bne.n	8002e54 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9c0 	bl	80031d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e52:	e0b4      	b.n	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	f040 80b1 	bne.w	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fa2e 	bl	80032be <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e62:	e0ac      	b.n	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e72:	f000 80a4 	beq.w	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_I2C_EV_IRQHandler+0x178>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_I2C_EV_IRQHandler+0x178>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 faa6 	bl	80033e6 <I2C_MasterReceive_RXNE>
 8002e9a:	e00f      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 808b 	beq.w	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8085 	beq.w	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fb51 	bl	800355c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eba:	e080      	b.n	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
 8002ebc:	e07f      	b.n	8002fbe <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	e007      	b.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d011      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 ff11 	bl	8003d2e <I2C_Slave_ADDR>
 8002f0c:	e05a      	b.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_I2C_EV_IRQHandler+0x206>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 ff4c 	bl	8003dc0 <I2C_Slave_STOPF>
 8002f28:	e04c      	b.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f2a:	7bbb      	ldrb	r3, [r7, #14]
 8002f2c:	2b21      	cmp	r3, #33	; 0x21
 8002f2e:	d002      	beq.n	8002f36 <HAL_I2C_EV_IRQHandler+0x212>
 8002f30:	7bbb      	ldrb	r3, [r7, #14]
 8002f32:	2b29      	cmp	r3, #41	; 0x29
 8002f34:	d120      	bne.n	8002f78 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_I2C_EV_IRQHandler+0x238>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_I2C_EV_IRQHandler+0x238>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d103      	bne.n	8002f5c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fe2c 	bl	8003bb2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f5a:	e032      	b.n	8002fc2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d02d      	beq.n	8002fc2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d028      	beq.n	8002fc2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fe5b 	bl	8003c2c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f76:	e024      	b.n	8002fc2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <HAL_I2C_EV_IRQHandler+0x27a>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_I2C_EV_IRQHandler+0x27a>
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fe69 	bl	8003c6e <I2C_SlaveReceive_RXNE>
 8002f9c:	e012      	b.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fe99 	bl	8003cea <I2C_SlaveReceive_BTF>
 8002fb8:	e004      	b.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002fba:	bf00      	nop
 8002fbc:	e002      	b.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
 8003026:	4613      	mov	r3, r2
 8003028:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d150      	bne.n	8003162 <I2C_MasterTransmit_TXE+0xc8>
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b21      	cmp	r3, #33	; 0x21
 80030c4:	d14d      	bne.n	8003162 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d01d      	beq.n	8003108 <I2C_MasterTransmit_TXE+0x6e>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d01a      	beq.n	8003108 <I2C_MasterTransmit_TXE+0x6e>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030d8:	d016      	beq.n	8003108 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2211      	movs	r2, #17
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ff62 	bl	8002fca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003106:	e060      	b.n	80031ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003116:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d107      	bne.n	8003152 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff7d 	bl	800304a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003150:	e03b      	b.n	80031ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ff35 	bl	8002fca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003160:	e033      	b.n	80031ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b21      	cmp	r3, #33	; 0x21
 8003166:	d005      	beq.n	8003174 <I2C_MasterTransmit_TXE+0xda>
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d12d      	bne.n	80031ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b22      	cmp	r3, #34	; 0x22
 8003172:	d12a      	bne.n	80031ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800318e:	e01c      	b.n	80031ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	d103      	bne.n	80031a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f88e 	bl	80032be <I2C_MemoryTransmit_TXE_BTF>
}
 80031a2:	e012      	b.n	80031ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031c8:	e7ff      	b.n	80031ca <I2C_MasterTransmit_TXE+0x130>
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b21      	cmp	r3, #33	; 0x21
 80031ea:	d164      	bne.n	80032b6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d012      	beq.n	800321c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800321a:	e04c      	b.n	80032b6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d01d      	beq.n	800325e <I2C_MasterTransmit_BTF+0x8c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b20      	cmp	r3, #32
 8003226:	d01a      	beq.n	800325e <I2C_MasterTransmit_BTF+0x8c>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800322e:	d016      	beq.n	800325e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800323e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2211      	movs	r2, #17
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff feb7 	bl	8002fca <HAL_I2C_MasterTxCpltCallback>
}
 800325c:	e02b      	b.n	80032b6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800326c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d107      	bne.n	80032a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fed2 	bl	800304a <HAL_I2C_MemTxCpltCallback>
}
 80032a6:	e006      	b.n	80032b6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fe8a 	bl	8002fca <HAL_I2C_MasterTxCpltCallback>
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11d      	bne.n	8003312 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10b      	bne.n	80032f6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	1c9a      	adds	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80032f4:	e073      	b.n	80033de <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	121b      	asrs	r3, r3, #8
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003310:	e065      	b.n	80033de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003316:	2b01      	cmp	r3, #1
 8003318:	d10b      	bne.n	8003332 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331e:	b2da      	uxtb	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003330:	e055      	b.n	80033de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	2b02      	cmp	r3, #2
 8003338:	d151      	bne.n	80033de <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b22      	cmp	r3, #34	; 0x22
 800333e:	d10d      	bne.n	800335c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	651a      	str	r2, [r3, #80]	; 0x50
}
 800335a:	e040      	b.n	80033de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d015      	beq.n	8003392 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b21      	cmp	r3, #33	; 0x21
 800336a:	d112      	bne.n	8003392 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003390:	e025      	b.n	80033de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d120      	bne.n	80033de <I2C_MemoryTransmit_TXE_BTF+0x120>
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b21      	cmp	r3, #33	; 0x21
 80033a0:	d11d      	bne.n	80033de <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fe36 	bl	800304a <HAL_I2C_MemTxCpltCallback>
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b22      	cmp	r3, #34	; 0x22
 80033f8:	f040 80ac 	bne.w	8003554 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b03      	cmp	r3, #3
 8003408:	d921      	bls.n	800344e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b03      	cmp	r3, #3
 8003438:	f040 808c 	bne.w	8003554 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800344c:	e082      	b.n	8003554 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	2b02      	cmp	r3, #2
 8003454:	d075      	beq.n	8003542 <I2C_MasterReceive_RXNE+0x15c>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d002      	beq.n	8003462 <I2C_MasterReceive_RXNE+0x7c>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d16f      	bne.n	8003542 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f001 faa2 	bl	80049ac <I2C_WaitOnSTOPRequestThroughIT>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d142      	bne.n	80034f4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800348c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d10a      	bne.n	80034de <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fdc1 	bl	800305e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034dc:	e03a      	b.n	8003554 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2212      	movs	r2, #18
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fd76 	bl	8002fde <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034f2:	e02f      	b.n	8003554 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003502:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fd99 	bl	8003072 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003540:	e008      	b.n	8003554 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003550:	605a      	str	r2, [r3, #4]
}
 8003552:	e7ff      	b.n	8003554 <I2C_MasterReceive_RXNE+0x16e>
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b04      	cmp	r3, #4
 8003572:	d11b      	bne.n	80035ac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003582:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80035aa:	e0bd      	b.n	8003728 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d129      	bne.n	800360a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d00a      	beq.n	80035e2 <I2C_MasterReceive_BTF+0x86>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d007      	beq.n	80035e2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003608:	e08e      	b.n	8003728 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d176      	bne.n	8003702 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d002      	beq.n	8003620 <I2C_MasterReceive_BTF+0xc4>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b10      	cmp	r3, #16
 800361e:	d108      	bne.n	8003632 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e019      	b.n	8003666 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d002      	beq.n	800363e <I2C_MasterReceive_BTF+0xe2>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d108      	bne.n	8003650 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e00a      	b.n	8003666 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b10      	cmp	r3, #16
 8003654:	d007      	beq.n	8003666 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003664:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036c0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d10a      	bne.n	80036ec <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff fcba 	bl	800305e <HAL_I2C_MemRxCpltCallback>
}
 80036ea:	e01d      	b.n	8003728 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2212      	movs	r2, #18
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fc6f 	bl	8002fde <HAL_I2C_MasterRxCpltCallback>
}
 8003700:	e012      	b.n	8003728 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d117      	bne.n	8003774 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800375c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800375e:	e067      	b.n	8003830 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	b2da      	uxtb	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]
}
 8003772:	e05d      	b.n	8003830 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377c:	d133      	bne.n	80037e6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b21      	cmp	r3, #33	; 0x21
 8003788:	d109      	bne.n	800379e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800379a:	611a      	str	r2, [r3, #16]
 800379c:	e008      	b.n	80037b0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <I2C_Master_SB+0x92>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d032      	beq.n	8003830 <I2C_Master_SB+0x100>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d02d      	beq.n	8003830 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e2:	605a      	str	r2, [r3, #4]
}
 80037e4:	e024      	b.n	8003830 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10e      	bne.n	800380c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	11db      	asrs	r3, r3, #7
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 0306 	and.w	r3, r3, #6
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f063 030f 	orn	r3, r3, #15
 8003802:	b2da      	uxtb	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]
}
 800380a:	e011      	b.n	8003830 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10d      	bne.n	8003830 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	b29b      	uxth	r3, r3
 800381a:	11db      	asrs	r3, r3, #7
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 0306 	and.w	r3, r3, #6
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f063 030e 	orn	r3, r3, #14
 8003828:	b2da      	uxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	b2da      	uxtb	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <I2C_Master_ADD10+0x26>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <I2C_Master_ADD10+0x48>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003882:	605a      	str	r2, [r3, #4]
  }
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003890:	b480      	push	{r7}
 8003892:	b091      	sub	sp, #68	; 0x44
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800389e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b22      	cmp	r3, #34	; 0x22
 80038b8:	f040 8169 	bne.w	8003b8e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10f      	bne.n	80038e4 <I2C_Master_ADDR+0x54>
 80038c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d10b      	bne.n	80038e4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038cc:	2300      	movs	r3, #0
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	e160      	b.n	8003ba6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11d      	bne.n	8003928 <I2C_Master_ADDR+0x98>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038f4:	d118      	bne.n	8003928 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	651a      	str	r2, [r3, #80]	; 0x50
 8003926:	e13e      	b.n	8003ba6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d113      	bne.n	800395a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003932:	2300      	movs	r3, #0
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e115      	b.n	8003b86 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	f040 808a 	bne.w	8003a7a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800396c:	d137      	bne.n	80039de <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398c:	d113      	bne.n	80039b6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	e0e7      	b.n	8003b86 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b6:	2300      	movs	r3, #0
 80039b8:	623b      	str	r3, [r7, #32]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	623b      	str	r3, [r7, #32]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e0d3      	b.n	8003b86 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d02e      	beq.n	8003a42 <I2C_Master_ADDR+0x1b2>
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d02b      	beq.n	8003a42 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	2b12      	cmp	r3, #18
 80039ee:	d102      	bne.n	80039f6 <I2C_Master_ADDR+0x166>
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d125      	bne.n	8003a42 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d00e      	beq.n	8003a1a <I2C_Master_ADDR+0x18a>
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d00b      	beq.n	8003a1a <I2C_Master_ADDR+0x18a>
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d008      	beq.n	8003a1a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	e007      	b.n	8003a2a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a28:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	e0a1      	b.n	8003b86 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a50:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e085      	b.n	8003b86 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d14d      	bne.n	8003b20 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d016      	beq.n	8003ab8 <I2C_Master_ADDR+0x228>
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d013      	beq.n	8003ab8 <I2C_Master_ADDR+0x228>
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d010      	beq.n	8003ab8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e007      	b.n	8003ac8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad6:	d117      	bne.n	8003b08 <I2C_Master_ADDR+0x278>
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ade:	d00b      	beq.n	8003af8 <I2C_Master_ADDR+0x268>
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d008      	beq.n	8003af8 <I2C_Master_ADDR+0x268>
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d005      	beq.n	8003af8 <I2C_Master_ADDR+0x268>
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d002      	beq.n	8003af8 <I2C_Master_ADDR+0x268>
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d107      	bne.n	8003b08 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b06:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	e032      	b.n	8003b86 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b2e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3e:	d117      	bne.n	8003b70 <I2C_Master_ADDR+0x2e0>
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b46:	d00b      	beq.n	8003b60 <I2C_Master_ADDR+0x2d0>
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d008      	beq.n	8003b60 <I2C_Master_ADDR+0x2d0>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d005      	beq.n	8003b60 <I2C_Master_ADDR+0x2d0>
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d002      	beq.n	8003b60 <I2C_Master_ADDR+0x2d0>
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d107      	bne.n	8003b70 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b6e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b8c:	e00b      	b.n	8003ba6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
}
 8003ba4:	e7ff      	b.n	8003ba6 <I2C_Master_ADDR+0x316>
 8003ba6:	bf00      	nop
 8003ba8:	3744      	adds	r7, #68	; 0x44
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02b      	beq.n	8003c24 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d114      	bne.n	8003c24 <I2C_SlaveTransmit_TXE+0x72>
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b29      	cmp	r3, #41	; 0x29
 8003bfe:	d111      	bne.n	8003c24 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2221      	movs	r2, #33	; 0x21
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2228      	movs	r2, #40	; 0x28
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff f9e7 	bl	8002ff2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d02c      	beq.n	8003ce2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d114      	bne.n	8003ce2 <I2C_SlaveReceive_RXNE+0x74>
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b2a      	cmp	r3, #42	; 0x2a
 8003cbc:	d111      	bne.n	8003ce2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ccc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2222      	movs	r2, #34	; 0x22
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2228      	movs	r2, #40	; 0x28
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff f992 	bl	8003006 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d012      	beq.n	8003d22 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d48:	2b28      	cmp	r3, #40	; 0x28
 8003d4a:	d125      	bne.n	8003d98 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	81bb      	strh	r3, [r7, #12]
 8003d7a:	e002      	b.n	8003d82 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d8a:	89ba      	ldrh	r2, [r7, #12]
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff f942 	bl	800301a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d96:	e00e      	b.n	8003db6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dde:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003de0:	2300      	movs	r3, #0
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1c:	d172      	bne.n	8003f04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b22      	cmp	r3, #34	; 0x22
 8003e22:	d002      	beq.n	8003e2a <I2C_Slave_STOPF+0x6a>
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b2a      	cmp	r3, #42	; 0x2a
 8003e28:	d135      	bne.n	8003e96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe f954 	bl	8002110 <HAL_DMA_GetState>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d049      	beq.n	8003f02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	4a69      	ldr	r2, [pc, #420]	; (8004018 <I2C_Slave_STOPF+0x258>)
 8003e74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd ff9c 	bl	8001db8 <HAL_DMA_Abort_IT>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d03d      	beq.n	8003f02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e90:	4610      	mov	r0, r2
 8003e92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e94:	e035      	b.n	8003f02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f043 0204 	orr.w	r2, r3, #4
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe f91e 	bl	8002110 <HAL_DMA_GetState>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d014      	beq.n	8003f04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	4a4e      	ldr	r2, [pc, #312]	; (8004018 <I2C_Slave_STOPF+0x258>)
 8003ee0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd ff66 	bl	8001db8 <HAL_DMA_Abort_IT>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003efc:	4610      	mov	r0, r2
 8003efe:	4798      	blx	r3
 8003f00:	e000      	b.n	8003f04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d03e      	beq.n	8003f8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d112      	bne.n	8003f42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d112      	bne.n	8003f76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f843 	bl	8004020 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f9a:	e039      	b.n	8004010 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa0:	d109      	bne.n	8003fb6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2228      	movs	r2, #40	; 0x28
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff f828 	bl	8003006 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b28      	cmp	r3, #40	; 0x28
 8003fc0:	d111      	bne.n	8003fe6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a15      	ldr	r2, [pc, #84]	; (800401c <I2C_Slave_STOPF+0x25c>)
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff f829 	bl	8003036 <HAL_I2C_ListenCpltCallback>
}
 8003fe4:	e014      	b.n	8004010 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	2b22      	cmp	r3, #34	; 0x22
 8003fec:	d002      	beq.n	8003ff4 <I2C_Slave_STOPF+0x234>
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b22      	cmp	r3, #34	; 0x22
 8003ff2:	d10d      	bne.n	8004010 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fe fffb 	bl	8003006 <HAL_I2C_SlaveRxCpltCallback>
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	080045ad 	.word	0x080045ad
 800401c:	ffff0000 	.word	0xffff0000

08004020 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004036:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004038:	7bbb      	ldrb	r3, [r7, #14]
 800403a:	2b10      	cmp	r3, #16
 800403c:	d002      	beq.n	8004044 <I2C_ITError+0x24>
 800403e:	7bbb      	ldrb	r3, [r7, #14]
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d10a      	bne.n	800405a <I2C_ITError+0x3a>
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b22      	cmp	r3, #34	; 0x22
 8004048:	d107      	bne.n	800405a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004058:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004060:	2b28      	cmp	r3, #40	; 0x28
 8004062:	d107      	bne.n	8004074 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2228      	movs	r2, #40	; 0x28
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004072:	e015      	b.n	80040a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004082:	d00a      	beq.n	800409a <I2C_ITError+0x7a>
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b60      	cmp	r3, #96	; 0x60
 8004088:	d007      	beq.n	800409a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ae:	d162      	bne.n	8004176 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d020      	beq.n	8004110 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	4a6a      	ldr	r2, [pc, #424]	; (800427c <I2C_ITError+0x25c>)
 80040d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd fe6c 	bl	8001db8 <HAL_DMA_Abort_IT>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8089 	beq.w	80041fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800410a:	4610      	mov	r0, r2
 800410c:	4798      	blx	r3
 800410e:	e074      	b.n	80041fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	4a59      	ldr	r2, [pc, #356]	; (800427c <I2C_ITError+0x25c>)
 8004116:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd fe4b 	bl	8001db8 <HAL_DMA_Abort_IT>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d068      	beq.n	80041fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d10b      	bne.n	800414e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004170:	4610      	mov	r0, r2
 8004172:	4798      	blx	r3
 8004174:	e041      	b.n	80041fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b60      	cmp	r3, #96	; 0x60
 8004180:	d125      	bne.n	80041ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d10b      	bne.n	80041b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe ff5d 	bl	8003086 <HAL_I2C_AbortCpltCallback>
 80041cc:	e015      	b.n	80041fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d10b      	bne.n	80041f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fe ff3c 	bl	8003072 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10e      	bne.n	8004228 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800421a:	2b00      	cmp	r3, #0
 800421c:	d104      	bne.n	8004228 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004236:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d113      	bne.n	8004274 <I2C_ITError+0x254>
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b28      	cmp	r3, #40	; 0x28
 8004250:	d110      	bne.n	8004274 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <I2C_ITError+0x260>)
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fe fee1 	bl	8003036 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	080045ad 	.word	0x080045ad
 8004280:	ffff0000 	.word	0xffff0000

08004284 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	460b      	mov	r3, r1
 8004292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d006      	beq.n	80042ae <I2C_MasterRequestWrite+0x2a>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d003      	beq.n	80042ae <I2C_MasterRequestWrite+0x2a>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ac:	d108      	bne.n	80042c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e00b      	b.n	80042d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	2b12      	cmp	r3, #18
 80042c6:	d107      	bne.n	80042d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fa09 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00d      	beq.n	800430c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d103      	bne.n	8004308 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e035      	b.n	8004378 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004314:	d108      	bne.n	8004328 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004316:	897b      	ldrh	r3, [r7, #10]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004324:	611a      	str	r2, [r3, #16]
 8004326:	e01b      	b.n	8004360 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004328:	897b      	ldrh	r3, [r7, #10]
 800432a:	11db      	asrs	r3, r3, #7
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0306 	and.w	r3, r3, #6
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f063 030f 	orn	r3, r3, #15
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	490e      	ldr	r1, [pc, #56]	; (8004380 <I2C_MasterRequestWrite+0xfc>)
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fa2f 	bl	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e010      	b.n	8004378 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004356:	897b      	ldrh	r3, [r7, #10]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <I2C_MasterRequestWrite+0x100>)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fa1f 	bl	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	00010008 	.word	0x00010008
 8004384:	00010002 	.word	0x00010002

08004388 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043ba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	2200      	movs	r2, #0
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	2200      	movs	r2, #0
 80043da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80043e2:	2b21      	cmp	r3, #33	; 0x21
 80043e4:	d007      	beq.n	80043f6 <I2C_DMAXferCplt+0x6e>
 80043e6:	7cfb      	ldrb	r3, [r7, #19]
 80043e8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80043ec:	2b22      	cmp	r3, #34	; 0x22
 80043ee:	d131      	bne.n	8004454 <I2C_DMAXferCplt+0xcc>
 80043f0:	7cbb      	ldrb	r3, [r7, #18]
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d12e      	bne.n	8004454 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004404:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b29      	cmp	r3, #41	; 0x29
 8004410:	d10a      	bne.n	8004428 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2221      	movs	r2, #33	; 0x21
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2228      	movs	r2, #40	; 0x28
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004420:	6978      	ldr	r0, [r7, #20]
 8004422:	f7fe fde6 	bl	8002ff2 <HAL_I2C_SlaveTxCpltCallback>
 8004426:	e00c      	b.n	8004442 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	2b2a      	cmp	r3, #42	; 0x2a
 800442c:	d109      	bne.n	8004442 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2222      	movs	r2, #34	; 0x22
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2228      	movs	r2, #40	; 0x28
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800443c:	6978      	ldr	r0, [r7, #20]
 800443e:	f7fe fde2 	bl	8003006 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004450:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004452:	e06a      	b.n	800452a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d064      	beq.n	800452a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004478:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004488:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004490:	d009      	beq.n	80044a6 <I2C_DMAXferCplt+0x11e>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d006      	beq.n	80044a6 <I2C_DMAXferCplt+0x11e>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800449e:	d002      	beq.n	80044a6 <I2C_DMAXferCplt+0x11e>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d107      	bne.n	80044b6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044c4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80044e4:	6978      	ldr	r0, [r7, #20]
 80044e6:	f7fe fdc4 	bl	8003072 <HAL_I2C_ErrorCallback>
}
 80044ea:	e01e      	b.n	800452a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d10a      	bne.n	8004516 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800450e:	6978      	ldr	r0, [r7, #20]
 8004510:	f7fe fda5 	bl	800305e <HAL_I2C_MemRxCpltCallback>
}
 8004514:	e009      	b.n	800452a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2212      	movs	r2, #18
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004524:	6978      	ldr	r0, [r7, #20]
 8004526:	f7fe fd5a 	bl	8002fde <HAL_I2C_MasterRxCpltCallback>
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	2200      	movs	r2, #0
 800454e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	2200      	movs	r2, #0
 800455e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fd fde3 	bl	800212c <HAL_DMA_GetError>
 8004566:	4603      	mov	r3, r0
 8004568:	2b02      	cmp	r3, #2
 800456a:	d01b      	beq.n	80045a4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0210 	orr.w	r2, r3, #16
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7fe fd67 	bl	8003072 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045c6:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <I2C_DMAAbort+0x148>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	4a4a      	ldr	r2, [pc, #296]	; (80046f8 <I2C_DMAAbort+0x14c>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	0a1a      	lsrs	r2, r3, #8
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	00da      	lsls	r2, r3, #3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80045f2:	e00a      	b.n	800460a <I2C_DMAAbort+0x5e>
    }
    count--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d0ea      	beq.n	80045e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	2200      	movs	r2, #0
 8004618:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	2200      	movs	r2, #0
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004638:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2200      	movs	r2, #0
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	2200      	movs	r2, #0
 800464e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	2200      	movs	r2, #0
 800465e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b60      	cmp	r3, #96	; 0x60
 800467a:	d10e      	bne.n	800469a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2200      	movs	r2, #0
 8004690:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7fe fcf7 	bl	8003086 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004698:	e027      	b.n	80046ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046a0:	2b28      	cmp	r3, #40	; 0x28
 80046a2:	d117      	bne.n	80046d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2228      	movs	r2, #40	; 0x28
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046d2:	e007      	b.n	80046e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80046e4:	6978      	ldr	r0, [r7, #20]
 80046e6:	f7fe fcc4 	bl	8003072 <HAL_I2C_ErrorCallback>
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000000 	.word	0x20000000
 80046f8:	14f8b589 	.word	0x14f8b589

080046fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470c:	e025      	b.n	800475a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d021      	beq.n	800475a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fd f92b 	bl	8001970 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d116      	bne.n	800475a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e023      	b.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10d      	bne.n	8004780 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	43da      	mvns	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	e00c      	b.n	800479a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	429a      	cmp	r2, r3
 800479e:	d0b6      	beq.n	800470e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047b8:	e051      	b.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c8:	d123      	bne.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f043 0204 	orr.w	r2, r3, #4
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e046      	b.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d021      	beq.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fd f8a9 	bl	8001970 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d116      	bne.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e020      	b.n	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10c      	bne.n	8004882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	43da      	mvns	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4013      	ands	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e00b      	b.n	800489a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d18d      	bne.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048b4:	e02d      	b.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f8aa 	bl	8004a10 <I2C_IsAcknowledgeFailed>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02d      	b.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d021      	beq.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7fd f84f 	bl	8001970 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d116      	bne.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e007      	b.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d1ca      	bne.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004936:	e02d      	b.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f869 	bl	8004a10 <I2C_IsAcknowledgeFailed>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e02d      	b.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d021      	beq.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004950:	f7fd f80e 	bl	8001970 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d302      	bcc.n	8004966 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f043 0220 	orr.w	r2, r3, #32
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e007      	b.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d1ca      	bne.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	08db      	lsrs	r3, r3, #3
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	0a1a      	lsrs	r2, r3, #8
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d107      	bne.n	80049ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e008      	b.n	80049fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f8:	d0e9      	beq.n	80049ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	14f8b589 	.word	0x14f8b589

08004a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d11b      	bne.n	8004a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	f043 0204 	orr.w	r2, r3, #4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a7e:	d103      	bne.n	8004a88 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a86:	e007      	b.n	8004a98 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a90:	d102      	bne.n	8004a98 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2208      	movs	r2, #8
 8004a96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e267      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d075      	beq.n	8004bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ac2:	4b88      	ldr	r3, [pc, #544]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d00c      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ace:	4b85      	ldr	r3, [pc, #532]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d112      	bne.n	8004b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ada:	4b82      	ldr	r3, [pc, #520]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae6:	d10b      	bne.n	8004b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	4b7e      	ldr	r3, [pc, #504]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d05b      	beq.n	8004bac <HAL_RCC_OscConfig+0x108>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d157      	bne.n	8004bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e242      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b08:	d106      	bne.n	8004b18 <HAL_RCC_OscConfig+0x74>
 8004b0a:	4b76      	ldr	r3, [pc, #472]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a75      	ldr	r2, [pc, #468]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e01d      	b.n	8004b54 <HAL_RCC_OscConfig+0xb0>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x98>
 8004b22:	4b70      	ldr	r3, [pc, #448]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6f      	ldr	r2, [pc, #444]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b6d      	ldr	r3, [pc, #436]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a6c      	ldr	r2, [pc, #432]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCC_OscConfig+0xb0>
 8004b3c:	4b69      	ldr	r3, [pc, #420]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a68      	ldr	r2, [pc, #416]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	4b66      	ldr	r3, [pc, #408]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a65      	ldr	r2, [pc, #404]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d013      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5c:	f7fc ff08 	bl	8001970 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fc ff04 	bl	8001970 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	; 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e207      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	4b5b      	ldr	r3, [pc, #364]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0xc0>
 8004b82:	e014      	b.n	8004bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fc fef4 	bl	8001970 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fc fef0 	bl	8001970 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e1f3      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9e:	4b51      	ldr	r3, [pc, #324]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0xe8>
 8004baa:	e000      	b.n	8004bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d063      	beq.n	8004c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bba:	4b4a      	ldr	r3, [pc, #296]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bc6:	4b47      	ldr	r3, [pc, #284]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d11c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b44      	ldr	r3, [pc, #272]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d116      	bne.n	8004c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bde:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x152>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e1c7      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf6:	4b3b      	ldr	r3, [pc, #236]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4937      	ldr	r1, [pc, #220]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0a:	e03a      	b.n	8004c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c14:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <HAL_RCC_OscConfig+0x244>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1a:	f7fc fea9 	bl	8001970 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c22:	f7fc fea5 	bl	8001970 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e1a8      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c34:	4b2b      	ldr	r3, [pc, #172]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c40:	4b28      	ldr	r3, [pc, #160]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4925      	ldr	r1, [pc, #148]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]
 8004c54:	e015      	b.n	8004c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_RCC_OscConfig+0x244>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fc fe88 	bl	8001970 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c64:	f7fc fe84 	bl	8001970 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e187      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c76:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d036      	beq.n	8004cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d016      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <HAL_RCC_OscConfig+0x248>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fc fe68 	bl	8001970 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ca4:	f7fc fe64 	bl	8001970 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e167      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x200>
 8004cc2:	e01b      	b.n	8004cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc4:	4b09      	ldr	r3, [pc, #36]	; (8004cec <HAL_RCC_OscConfig+0x248>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cca:	f7fc fe51 	bl	8001970 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd0:	e00e      	b.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd2:	f7fc fe4d 	bl	8001970 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d907      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e150      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	42470000 	.word	0x42470000
 8004cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf0:	4b88      	ldr	r3, [pc, #544]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1ea      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8097 	beq.w	8004e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d0e:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10f      	bne.n	8004d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	4b7d      	ldr	r3, [pc, #500]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	4a7c      	ldr	r2, [pc, #496]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2a:	4b7a      	ldr	r3, [pc, #488]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d36:	2301      	movs	r3, #1
 8004d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3a:	4b77      	ldr	r3, [pc, #476]	; (8004f18 <HAL_RCC_OscConfig+0x474>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d118      	bne.n	8004d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d46:	4b74      	ldr	r3, [pc, #464]	; (8004f18 <HAL_RCC_OscConfig+0x474>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a73      	ldr	r2, [pc, #460]	; (8004f18 <HAL_RCC_OscConfig+0x474>)
 8004d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d52:	f7fc fe0d 	bl	8001970 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5a:	f7fc fe09 	bl	8001970 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e10c      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6c:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_OscConfig+0x474>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d106      	bne.n	8004d8e <HAL_RCC_OscConfig+0x2ea>
 8004d80:	4b64      	ldr	r3, [pc, #400]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d84:	4a63      	ldr	r2, [pc, #396]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8c:	e01c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x324>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCC_OscConfig+0x30c>
 8004d96:	4b5f      	ldr	r3, [pc, #380]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	4a5e      	ldr	r2, [pc, #376]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	f043 0304 	orr.w	r3, r3, #4
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
 8004da2:	4b5c      	ldr	r3, [pc, #368]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a5b      	ldr	r2, [pc, #364]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCC_OscConfig+0x324>
 8004db0:	4b58      	ldr	r3, [pc, #352]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	4a57      	ldr	r2, [pc, #348]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	6713      	str	r3, [r2, #112]	; 0x70
 8004dbc:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a54      	ldr	r2, [pc, #336]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	f023 0304 	bic.w	r3, r3, #4
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d015      	beq.n	8004dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd0:	f7fc fdce 	bl	8001970 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd8:	f7fc fdca 	bl	8001970 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0cb      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dee:	4b49      	ldr	r3, [pc, #292]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0ee      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x334>
 8004dfa:	e014      	b.n	8004e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfc:	f7fc fdb8 	bl	8001970 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e04:	f7fc fdb4 	bl	8001970 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e0b5      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1a:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1ee      	bne.n	8004e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d105      	bne.n	8004e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2c:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	4a38      	ldr	r2, [pc, #224]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80a1 	beq.w	8004f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e42:	4b34      	ldr	r3, [pc, #208]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d05c      	beq.n	8004f08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d141      	bne.n	8004eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e56:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <HAL_RCC_OscConfig+0x478>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5c:	f7fc fd88 	bl	8001970 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fc fd84 	bl	8001970 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e087      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	491b      	ldr	r1, [pc, #108]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_RCC_OscConfig+0x478>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb2:	f7fc fd5d 	bl	8001970 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eba:	f7fc fd59 	bl	8001970 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e05c      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x416>
 8004ed8:	e054      	b.n	8004f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_RCC_OscConfig+0x478>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fc fd46 	bl	8001970 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fc fd42 	bl	8001970 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e045      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <HAL_RCC_OscConfig+0x470>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x444>
 8004f06:	e03d      	b.n	8004f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e038      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <HAL_RCC_OscConfig+0x4ec>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d028      	beq.n	8004f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d121      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d11a      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f50:	4013      	ands	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d111      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d107      	bne.n	8004f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800

08004f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0cc      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b68      	ldr	r3, [pc, #416]	; (800514c <HAL_RCC_ClockConfig+0x1b8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d90c      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b65      	ldr	r3, [pc, #404]	; (800514c <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b63      	ldr	r3, [pc, #396]	; (800514c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0b8      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d020      	beq.n	800501e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe8:	4b59      	ldr	r3, [pc, #356]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4a58      	ldr	r2, [pc, #352]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005000:	4b53      	ldr	r3, [pc, #332]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a52      	ldr	r2, [pc, #328]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800500a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800500c:	4b50      	ldr	r3, [pc, #320]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	494d      	ldr	r1, [pc, #308]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d044      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005032:	4b47      	ldr	r3, [pc, #284]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d119      	bne.n	8005072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e07f      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d003      	beq.n	8005052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800504e:	2b03      	cmp	r3, #3
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005052:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e06f      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005062:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e067      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005072:	4b37      	ldr	r3, [pc, #220]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f023 0203 	bic.w	r2, r3, #3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4934      	ldr	r1, [pc, #208]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	4313      	orrs	r3, r2
 8005082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005084:	f7fc fc74 	bl	8001970 <HAL_GetTick>
 8005088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508c:	f7fc fc70 	bl	8001970 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	; 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e04f      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 020c 	and.w	r2, r3, #12
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d1eb      	bne.n	800508c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <HAL_RCC_ClockConfig+0x1b8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d20c      	bcs.n	80050dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	4b22      	ldr	r3, [pc, #136]	; (800514c <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b20      	ldr	r3, [pc, #128]	; (800514c <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e032      	b.n	8005142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e8:	4b19      	ldr	r3, [pc, #100]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4916      	ldr	r1, [pc, #88]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	490e      	ldr	r1, [pc, #56]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800511a:	f000 f821 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800511e:	4602      	mov	r2, r0
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	490a      	ldr	r1, [pc, #40]	; (8005154 <HAL_RCC_ClockConfig+0x1c0>)
 800512c:	5ccb      	ldrb	r3, [r1, r3]
 800512e:	fa22 f303 	lsr.w	r3, r2, r3
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fc fbd4 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40023c00 	.word	0x40023c00
 8005150:	40023800 	.word	0x40023800
 8005154:	080082e8 	.word	0x080082e8
 8005158:	20000000 	.word	0x20000000
 800515c:	20000004 	.word	0x20000004

08005160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005164:	b094      	sub	sp, #80	; 0x50
 8005166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	647b      	str	r3, [r7, #68]	; 0x44
 800516c:	2300      	movs	r3, #0
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005170:	2300      	movs	r3, #0
 8005172:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005178:	4b79      	ldr	r3, [pc, #484]	; (8005360 <HAL_RCC_GetSysClockFreq+0x200>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 030c 	and.w	r3, r3, #12
 8005180:	2b08      	cmp	r3, #8
 8005182:	d00d      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005184:	2b08      	cmp	r3, #8
 8005186:	f200 80e1 	bhi.w	800534c <HAL_RCC_GetSysClockFreq+0x1ec>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_RCC_GetSysClockFreq+0x34>
 800518e:	2b04      	cmp	r3, #4
 8005190:	d003      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0x3a>
 8005192:	e0db      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005194:	4b73      	ldr	r3, [pc, #460]	; (8005364 <HAL_RCC_GetSysClockFreq+0x204>)
 8005196:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005198:	e0db      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800519a:	4b73      	ldr	r3, [pc, #460]	; (8005368 <HAL_RCC_GetSysClockFreq+0x208>)
 800519c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800519e:	e0d8      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a0:	4b6f      	ldr	r3, [pc, #444]	; (8005360 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051aa:	4b6d      	ldr	r3, [pc, #436]	; (8005360 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d063      	beq.n	800527e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b6:	4b6a      	ldr	r3, [pc, #424]	; (8005360 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	099b      	lsrs	r3, r3, #6
 80051bc:	2200      	movs	r2, #0
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38
 80051c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30
 80051ca:	2300      	movs	r3, #0
 80051cc:	637b      	str	r3, [r7, #52]	; 0x34
 80051ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051d2:	4622      	mov	r2, r4
 80051d4:	462b      	mov	r3, r5
 80051d6:	f04f 0000 	mov.w	r0, #0
 80051da:	f04f 0100 	mov.w	r1, #0
 80051de:	0159      	lsls	r1, r3, #5
 80051e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051e4:	0150      	lsls	r0, r2, #5
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4621      	mov	r1, r4
 80051ec:	1a51      	subs	r1, r2, r1
 80051ee:	6139      	str	r1, [r7, #16]
 80051f0:	4629      	mov	r1, r5
 80051f2:	eb63 0301 	sbc.w	r3, r3, r1
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005204:	4659      	mov	r1, fp
 8005206:	018b      	lsls	r3, r1, #6
 8005208:	4651      	mov	r1, sl
 800520a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800520e:	4651      	mov	r1, sl
 8005210:	018a      	lsls	r2, r1, #6
 8005212:	4651      	mov	r1, sl
 8005214:	ebb2 0801 	subs.w	r8, r2, r1
 8005218:	4659      	mov	r1, fp
 800521a:	eb63 0901 	sbc.w	r9, r3, r1
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800522a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800522e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005232:	4690      	mov	r8, r2
 8005234:	4699      	mov	r9, r3
 8005236:	4623      	mov	r3, r4
 8005238:	eb18 0303 	adds.w	r3, r8, r3
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	462b      	mov	r3, r5
 8005240:	eb49 0303 	adc.w	r3, r9, r3
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005252:	4629      	mov	r1, r5
 8005254:	024b      	lsls	r3, r1, #9
 8005256:	4621      	mov	r1, r4
 8005258:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800525c:	4621      	mov	r1, r4
 800525e:	024a      	lsls	r2, r1, #9
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005266:	2200      	movs	r2, #0
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
 800526a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800526c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005270:	f7fb fca2 	bl	8000bb8 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4613      	mov	r3, r2
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	e058      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527e:	4b38      	ldr	r3, [pc, #224]	; (8005360 <HAL_RCC_GetSysClockFreq+0x200>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	099b      	lsrs	r3, r3, #6
 8005284:	2200      	movs	r2, #0
 8005286:	4618      	mov	r0, r3
 8005288:	4611      	mov	r1, r2
 800528a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	2300      	movs	r3, #0
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
 8005294:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	f04f 0000 	mov.w	r0, #0
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	0159      	lsls	r1, r3, #5
 80052a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052aa:	0150      	lsls	r0, r2, #5
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4641      	mov	r1, r8
 80052b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052b6:	4649      	mov	r1, r9
 80052b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052d0:	ebb2 040a 	subs.w	r4, r2, sl
 80052d4:	eb63 050b 	sbc.w	r5, r3, fp
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	00eb      	lsls	r3, r5, #3
 80052e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052e6:	00e2      	lsls	r2, r4, #3
 80052e8:	4614      	mov	r4, r2
 80052ea:	461d      	mov	r5, r3
 80052ec:	4643      	mov	r3, r8
 80052ee:	18e3      	adds	r3, r4, r3
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	464b      	mov	r3, r9
 80052f4:	eb45 0303 	adc.w	r3, r5, r3
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005306:	4629      	mov	r1, r5
 8005308:	028b      	lsls	r3, r1, #10
 800530a:	4621      	mov	r1, r4
 800530c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005310:	4621      	mov	r1, r4
 8005312:	028a      	lsls	r2, r1, #10
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531a:	2200      	movs	r2, #0
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	61fa      	str	r2, [r7, #28]
 8005320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005324:	f7fb fc48 	bl	8000bb8 <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4613      	mov	r3, r2
 800532e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCC_GetSysClockFreq+0x200>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	3301      	adds	r3, #1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800534a:	e002      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_GetSysClockFreq+0x204>)
 800534e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005354:	4618      	mov	r0, r3
 8005356:	3750      	adds	r7, #80	; 0x50
 8005358:	46bd      	mov	sp, r7
 800535a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800
 8005364:	00f42400 	.word	0x00f42400
 8005368:	007a1200 	.word	0x007a1200

0800536c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <HAL_RCC_GetHCLKFreq+0x14>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000000 	.word	0x20000000

08005384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005388:	f7ff fff0 	bl	800536c <HAL_RCC_GetHCLKFreq>
 800538c:	4602      	mov	r2, r0
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	0a9b      	lsrs	r3, r3, #10
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	4903      	ldr	r1, [pc, #12]	; (80053a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800539a:	5ccb      	ldrb	r3, [r1, r3]
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40023800 	.word	0x40023800
 80053a8:	080082f8 	.word	0x080082f8

080053ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053b0:	f7ff ffdc 	bl	800536c <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0b5b      	lsrs	r3, r3, #13
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4903      	ldr	r1, [pc, #12]	; (80053d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40023800 	.word	0x40023800
 80053d0:	080082f8 	.word	0x080082f8

080053d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e03f      	b.n	8005466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc f8c0 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	; 0x24
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f829 	bl	8005470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800542c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800543c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800544c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005474:	b0c0      	sub	sp, #256	; 0x100
 8005476:	af00      	add	r7, sp, #0
 8005478:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548c:	68d9      	ldr	r1, [r3, #12]
 800548e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	ea40 0301 	orr.w	r3, r0, r1
 8005498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054c8:	f021 010c 	bic.w	r1, r1, #12
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054d6:	430b      	orrs	r3, r1
 80054d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	6999      	ldr	r1, [r3, #24]
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	ea40 0301 	orr.w	r3, r0, r1
 80054f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b8f      	ldr	r3, [pc, #572]	; (800573c <UART_SetConfig+0x2cc>)
 8005500:	429a      	cmp	r2, r3
 8005502:	d005      	beq.n	8005510 <UART_SetConfig+0xa0>
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b8d      	ldr	r3, [pc, #564]	; (8005740 <UART_SetConfig+0x2d0>)
 800550c:	429a      	cmp	r2, r3
 800550e:	d104      	bne.n	800551a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005510:	f7ff ff4c 	bl	80053ac <HAL_RCC_GetPCLK2Freq>
 8005514:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005518:	e003      	b.n	8005522 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800551a:	f7ff ff33 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 800551e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552c:	f040 810c 	bne.w	8005748 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005534:	2200      	movs	r2, #0
 8005536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800553a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800553e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005542:	4622      	mov	r2, r4
 8005544:	462b      	mov	r3, r5
 8005546:	1891      	adds	r1, r2, r2
 8005548:	65b9      	str	r1, [r7, #88]	; 0x58
 800554a:	415b      	adcs	r3, r3
 800554c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005552:	4621      	mov	r1, r4
 8005554:	eb12 0801 	adds.w	r8, r2, r1
 8005558:	4629      	mov	r1, r5
 800555a:	eb43 0901 	adc.w	r9, r3, r1
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800556a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800556e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005572:	4690      	mov	r8, r2
 8005574:	4699      	mov	r9, r3
 8005576:	4623      	mov	r3, r4
 8005578:	eb18 0303 	adds.w	r3, r8, r3
 800557c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005580:	462b      	mov	r3, r5
 8005582:	eb49 0303 	adc.w	r3, r9, r3
 8005586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005596:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800559a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800559e:	460b      	mov	r3, r1
 80055a0:	18db      	adds	r3, r3, r3
 80055a2:	653b      	str	r3, [r7, #80]	; 0x50
 80055a4:	4613      	mov	r3, r2
 80055a6:	eb42 0303 	adc.w	r3, r2, r3
 80055aa:	657b      	str	r3, [r7, #84]	; 0x54
 80055ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055b4:	f7fb fb00 	bl	8000bb8 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4b61      	ldr	r3, [pc, #388]	; (8005744 <UART_SetConfig+0x2d4>)
 80055be:	fba3 2302 	umull	r2, r3, r3, r2
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	011c      	lsls	r4, r3, #4
 80055c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	1891      	adds	r1, r2, r2
 80055de:	64b9      	str	r1, [r7, #72]	; 0x48
 80055e0:	415b      	adcs	r3, r3
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055e8:	4641      	mov	r1, r8
 80055ea:	eb12 0a01 	adds.w	sl, r2, r1
 80055ee:	4649      	mov	r1, r9
 80055f0:	eb43 0b01 	adc.w	fp, r3, r1
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005600:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005608:	4692      	mov	sl, r2
 800560a:	469b      	mov	fp, r3
 800560c:	4643      	mov	r3, r8
 800560e:	eb1a 0303 	adds.w	r3, sl, r3
 8005612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005616:	464b      	mov	r3, r9
 8005618:	eb4b 0303 	adc.w	r3, fp, r3
 800561c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800562c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005630:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005634:	460b      	mov	r3, r1
 8005636:	18db      	adds	r3, r3, r3
 8005638:	643b      	str	r3, [r7, #64]	; 0x40
 800563a:	4613      	mov	r3, r2
 800563c:	eb42 0303 	adc.w	r3, r2, r3
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
 8005642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005646:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800564a:	f7fb fab5 	bl	8000bb8 <__aeabi_uldivmod>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4611      	mov	r1, r2
 8005654:	4b3b      	ldr	r3, [pc, #236]	; (8005744 <UART_SetConfig+0x2d4>)
 8005656:	fba3 2301 	umull	r2, r3, r3, r1
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2264      	movs	r2, #100	; 0x64
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	1acb      	subs	r3, r1, r3
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <UART_SetConfig+0x2d4>)
 800566c:	fba3 2302 	umull	r2, r3, r3, r2
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005678:	441c      	add	r4, r3
 800567a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567e:	2200      	movs	r2, #0
 8005680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005684:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005688:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800568c:	4642      	mov	r2, r8
 800568e:	464b      	mov	r3, r9
 8005690:	1891      	adds	r1, r2, r2
 8005692:	63b9      	str	r1, [r7, #56]	; 0x38
 8005694:	415b      	adcs	r3, r3
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800569c:	4641      	mov	r1, r8
 800569e:	1851      	adds	r1, r2, r1
 80056a0:	6339      	str	r1, [r7, #48]	; 0x30
 80056a2:	4649      	mov	r1, r9
 80056a4:	414b      	adcs	r3, r1
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056b4:	4659      	mov	r1, fp
 80056b6:	00cb      	lsls	r3, r1, #3
 80056b8:	4651      	mov	r1, sl
 80056ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056be:	4651      	mov	r1, sl
 80056c0:	00ca      	lsls	r2, r1, #3
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	4603      	mov	r3, r0
 80056c8:	4642      	mov	r2, r8
 80056ca:	189b      	adds	r3, r3, r2
 80056cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056d0:	464b      	mov	r3, r9
 80056d2:	460a      	mov	r2, r1
 80056d4:	eb42 0303 	adc.w	r3, r2, r3
 80056d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056f0:	460b      	mov	r3, r1
 80056f2:	18db      	adds	r3, r3, r3
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f6:	4613      	mov	r3, r2
 80056f8:	eb42 0303 	adc.w	r3, r2, r3
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005702:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005706:	f7fb fa57 	bl	8000bb8 <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <UART_SetConfig+0x2d4>)
 8005710:	fba3 1302 	umull	r1, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2164      	movs	r1, #100	; 0x64
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	3332      	adds	r3, #50	; 0x32
 8005722:	4a08      	ldr	r2, [pc, #32]	; (8005744 <UART_SetConfig+0x2d4>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 0207 	and.w	r2, r3, #7
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4422      	add	r2, r4
 8005736:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005738:	e106      	b.n	8005948 <UART_SetConfig+0x4d8>
 800573a:	bf00      	nop
 800573c:	40011000 	.word	0x40011000
 8005740:	40011400 	.word	0x40011400
 8005744:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800574c:	2200      	movs	r2, #0
 800574e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005752:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005756:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800575a:	4642      	mov	r2, r8
 800575c:	464b      	mov	r3, r9
 800575e:	1891      	adds	r1, r2, r2
 8005760:	6239      	str	r1, [r7, #32]
 8005762:	415b      	adcs	r3, r3
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
 8005766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800576a:	4641      	mov	r1, r8
 800576c:	1854      	adds	r4, r2, r1
 800576e:	4649      	mov	r1, r9
 8005770:	eb43 0501 	adc.w	r5, r3, r1
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	00eb      	lsls	r3, r5, #3
 800577e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005782:	00e2      	lsls	r2, r4, #3
 8005784:	4614      	mov	r4, r2
 8005786:	461d      	mov	r5, r3
 8005788:	4643      	mov	r3, r8
 800578a:	18e3      	adds	r3, r4, r3
 800578c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005790:	464b      	mov	r3, r9
 8005792:	eb45 0303 	adc.w	r3, r5, r3
 8005796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057b6:	4629      	mov	r1, r5
 80057b8:	008b      	lsls	r3, r1, #2
 80057ba:	4621      	mov	r1, r4
 80057bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c0:	4621      	mov	r1, r4
 80057c2:	008a      	lsls	r2, r1, #2
 80057c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057c8:	f7fb f9f6 	bl	8000bb8 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4b60      	ldr	r3, [pc, #384]	; (8005954 <UART_SetConfig+0x4e4>)
 80057d2:	fba3 2302 	umull	r2, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	011c      	lsls	r4, r3, #4
 80057da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057ec:	4642      	mov	r2, r8
 80057ee:	464b      	mov	r3, r9
 80057f0:	1891      	adds	r1, r2, r2
 80057f2:	61b9      	str	r1, [r7, #24]
 80057f4:	415b      	adcs	r3, r3
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057fc:	4641      	mov	r1, r8
 80057fe:	1851      	adds	r1, r2, r1
 8005800:	6139      	str	r1, [r7, #16]
 8005802:	4649      	mov	r1, r9
 8005804:	414b      	adcs	r3, r1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005814:	4659      	mov	r1, fp
 8005816:	00cb      	lsls	r3, r1, #3
 8005818:	4651      	mov	r1, sl
 800581a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800581e:	4651      	mov	r1, sl
 8005820:	00ca      	lsls	r2, r1, #3
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	4603      	mov	r3, r0
 8005828:	4642      	mov	r2, r8
 800582a:	189b      	adds	r3, r3, r2
 800582c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005830:	464b      	mov	r3, r9
 8005832:	460a      	mov	r2, r1
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	67bb      	str	r3, [r7, #120]	; 0x78
 8005846:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005854:	4649      	mov	r1, r9
 8005856:	008b      	lsls	r3, r1, #2
 8005858:	4641      	mov	r1, r8
 800585a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585e:	4641      	mov	r1, r8
 8005860:	008a      	lsls	r2, r1, #2
 8005862:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005866:	f7fb f9a7 	bl	8000bb8 <__aeabi_uldivmod>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4611      	mov	r1, r2
 8005870:	4b38      	ldr	r3, [pc, #224]	; (8005954 <UART_SetConfig+0x4e4>)
 8005872:	fba3 2301 	umull	r2, r3, r3, r1
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	2264      	movs	r2, #100	; 0x64
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	1acb      	subs	r3, r1, r3
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	3332      	adds	r3, #50	; 0x32
 8005884:	4a33      	ldr	r2, [pc, #204]	; (8005954 <UART_SetConfig+0x4e4>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005890:	441c      	add	r4, r3
 8005892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005896:	2200      	movs	r2, #0
 8005898:	673b      	str	r3, [r7, #112]	; 0x70
 800589a:	677a      	str	r2, [r7, #116]	; 0x74
 800589c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058a0:	4642      	mov	r2, r8
 80058a2:	464b      	mov	r3, r9
 80058a4:	1891      	adds	r1, r2, r2
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	415b      	adcs	r3, r3
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058b0:	4641      	mov	r1, r8
 80058b2:	1851      	adds	r1, r2, r1
 80058b4:	6039      	str	r1, [r7, #0]
 80058b6:	4649      	mov	r1, r9
 80058b8:	414b      	adcs	r3, r1
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058c8:	4659      	mov	r1, fp
 80058ca:	00cb      	lsls	r3, r1, #3
 80058cc:	4651      	mov	r1, sl
 80058ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058d2:	4651      	mov	r1, sl
 80058d4:	00ca      	lsls	r2, r1, #3
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	4603      	mov	r3, r0
 80058dc:	4642      	mov	r2, r8
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e2:	464b      	mov	r3, r9
 80058e4:	460a      	mov	r2, r1
 80058e6:	eb42 0303 	adc.w	r3, r2, r3
 80058ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	663b      	str	r3, [r7, #96]	; 0x60
 80058f6:	667a      	str	r2, [r7, #100]	; 0x64
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005904:	4649      	mov	r1, r9
 8005906:	008b      	lsls	r3, r1, #2
 8005908:	4641      	mov	r1, r8
 800590a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590e:	4641      	mov	r1, r8
 8005910:	008a      	lsls	r2, r1, #2
 8005912:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005916:	f7fb f94f 	bl	8000bb8 <__aeabi_uldivmod>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <UART_SetConfig+0x4e4>)
 8005920:	fba3 1302 	umull	r1, r3, r3, r2
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	2164      	movs	r1, #100	; 0x64
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	3332      	adds	r3, #50	; 0x32
 8005932:	4a08      	ldr	r2, [pc, #32]	; (8005954 <UART_SetConfig+0x4e4>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	f003 020f 	and.w	r2, r3, #15
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4422      	add	r2, r4
 8005946:	609a      	str	r2, [r3, #8]
}
 8005948:	bf00      	nop
 800594a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800594e:	46bd      	mov	sp, r7
 8005950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005954:	51eb851f 	.word	0x51eb851f

08005958 <__cvt>:
 8005958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	ec55 4b10 	vmov	r4, r5, d0
 8005960:	2d00      	cmp	r5, #0
 8005962:	460e      	mov	r6, r1
 8005964:	4619      	mov	r1, r3
 8005966:	462b      	mov	r3, r5
 8005968:	bfbb      	ittet	lt
 800596a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800596e:	461d      	movlt	r5, r3
 8005970:	2300      	movge	r3, #0
 8005972:	232d      	movlt	r3, #45	; 0x2d
 8005974:	700b      	strb	r3, [r1, #0]
 8005976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005978:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800597c:	4691      	mov	r9, r2
 800597e:	f023 0820 	bic.w	r8, r3, #32
 8005982:	bfbc      	itt	lt
 8005984:	4622      	movlt	r2, r4
 8005986:	4614      	movlt	r4, r2
 8005988:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800598c:	d005      	beq.n	800599a <__cvt+0x42>
 800598e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005992:	d100      	bne.n	8005996 <__cvt+0x3e>
 8005994:	3601      	adds	r6, #1
 8005996:	2102      	movs	r1, #2
 8005998:	e000      	b.n	800599c <__cvt+0x44>
 800599a:	2103      	movs	r1, #3
 800599c:	ab03      	add	r3, sp, #12
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	ab02      	add	r3, sp, #8
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	ec45 4b10 	vmov	d0, r4, r5
 80059a8:	4653      	mov	r3, sl
 80059aa:	4632      	mov	r2, r6
 80059ac:	f000 fe48 	bl	8006640 <_dtoa_r>
 80059b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059b4:	4607      	mov	r7, r0
 80059b6:	d102      	bne.n	80059be <__cvt+0x66>
 80059b8:	f019 0f01 	tst.w	r9, #1
 80059bc:	d022      	beq.n	8005a04 <__cvt+0xac>
 80059be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059c2:	eb07 0906 	add.w	r9, r7, r6
 80059c6:	d110      	bne.n	80059ea <__cvt+0x92>
 80059c8:	783b      	ldrb	r3, [r7, #0]
 80059ca:	2b30      	cmp	r3, #48	; 0x30
 80059cc:	d10a      	bne.n	80059e4 <__cvt+0x8c>
 80059ce:	2200      	movs	r2, #0
 80059d0:	2300      	movs	r3, #0
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7fb f87f 	bl	8000ad8 <__aeabi_dcmpeq>
 80059da:	b918      	cbnz	r0, 80059e4 <__cvt+0x8c>
 80059dc:	f1c6 0601 	rsb	r6, r6, #1
 80059e0:	f8ca 6000 	str.w	r6, [sl]
 80059e4:	f8da 3000 	ldr.w	r3, [sl]
 80059e8:	4499      	add	r9, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	2300      	movs	r3, #0
 80059ee:	4620      	mov	r0, r4
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fb f871 	bl	8000ad8 <__aeabi_dcmpeq>
 80059f6:	b108      	cbz	r0, 80059fc <__cvt+0xa4>
 80059f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80059fc:	2230      	movs	r2, #48	; 0x30
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	454b      	cmp	r3, r9
 8005a02:	d307      	bcc.n	8005a14 <__cvt+0xbc>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a08:	1bdb      	subs	r3, r3, r7
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	b004      	add	sp, #16
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	9103      	str	r1, [sp, #12]
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e7f0      	b.n	80059fe <__cvt+0xa6>

08005a1c <__exponent>:
 8005a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2900      	cmp	r1, #0
 8005a22:	bfb8      	it	lt
 8005a24:	4249      	neglt	r1, r1
 8005a26:	f803 2b02 	strb.w	r2, [r3], #2
 8005a2a:	bfb4      	ite	lt
 8005a2c:	222d      	movlt	r2, #45	; 0x2d
 8005a2e:	222b      	movge	r2, #43	; 0x2b
 8005a30:	2909      	cmp	r1, #9
 8005a32:	7042      	strb	r2, [r0, #1]
 8005a34:	dd2a      	ble.n	8005a8c <__exponent+0x70>
 8005a36:	f10d 0207 	add.w	r2, sp, #7
 8005a3a:	4617      	mov	r7, r2
 8005a3c:	260a      	movs	r6, #10
 8005a3e:	4694      	mov	ip, r2
 8005a40:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a44:	fb06 1415 	mls	r4, r6, r5, r1
 8005a48:	3430      	adds	r4, #48	; 0x30
 8005a4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005a4e:	460c      	mov	r4, r1
 8005a50:	2c63      	cmp	r4, #99	; 0x63
 8005a52:	f102 32ff 	add.w	r2, r2, #4294967295
 8005a56:	4629      	mov	r1, r5
 8005a58:	dcf1      	bgt.n	8005a3e <__exponent+0x22>
 8005a5a:	3130      	adds	r1, #48	; 0x30
 8005a5c:	f1ac 0402 	sub.w	r4, ip, #2
 8005a60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a64:	1c41      	adds	r1, r0, #1
 8005a66:	4622      	mov	r2, r4
 8005a68:	42ba      	cmp	r2, r7
 8005a6a:	d30a      	bcc.n	8005a82 <__exponent+0x66>
 8005a6c:	f10d 0209 	add.w	r2, sp, #9
 8005a70:	eba2 020c 	sub.w	r2, r2, ip
 8005a74:	42bc      	cmp	r4, r7
 8005a76:	bf88      	it	hi
 8005a78:	2200      	movhi	r2, #0
 8005a7a:	4413      	add	r3, r2
 8005a7c:	1a18      	subs	r0, r3, r0
 8005a7e:	b003      	add	sp, #12
 8005a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005a86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005a8a:	e7ed      	b.n	8005a68 <__exponent+0x4c>
 8005a8c:	2330      	movs	r3, #48	; 0x30
 8005a8e:	3130      	adds	r1, #48	; 0x30
 8005a90:	7083      	strb	r3, [r0, #2]
 8005a92:	70c1      	strb	r1, [r0, #3]
 8005a94:	1d03      	adds	r3, r0, #4
 8005a96:	e7f1      	b.n	8005a7c <__exponent+0x60>

08005a98 <_printf_float>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	ed2d 8b02 	vpush	{d8}
 8005aa0:	b08d      	sub	sp, #52	; 0x34
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	461f      	mov	r7, r3
 8005aac:	4605      	mov	r5, r0
 8005aae:	f000 fcc7 	bl	8006440 <_localeconv_r>
 8005ab2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ab6:	4650      	mov	r0, sl
 8005ab8:	f7fa fbe2 	bl	8000280 <strlen>
 8005abc:	2300      	movs	r3, #0
 8005abe:	930a      	str	r3, [sp, #40]	; 0x28
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005acc:	3307      	adds	r3, #7
 8005ace:	f023 0307 	bic.w	r3, r3, #7
 8005ad2:	f103 0208 	add.w	r2, r3, #8
 8005ad6:	f8c8 2000 	str.w	r2, [r8]
 8005ada:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ade:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ae8:	ee08 0a10 	vmov	s16, r0
 8005aec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af4:	4b9e      	ldr	r3, [pc, #632]	; (8005d70 <_printf_float+0x2d8>)
 8005af6:	f04f 32ff 	mov.w	r2, #4294967295
 8005afa:	f7fb f81f 	bl	8000b3c <__aeabi_dcmpun>
 8005afe:	bb88      	cbnz	r0, 8005b64 <_printf_float+0xcc>
 8005b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b04:	4b9a      	ldr	r3, [pc, #616]	; (8005d70 <_printf_float+0x2d8>)
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	f7fa fff9 	bl	8000b00 <__aeabi_dcmple>
 8005b0e:	bb48      	cbnz	r0, 8005b64 <_printf_float+0xcc>
 8005b10:	2200      	movs	r2, #0
 8005b12:	2300      	movs	r3, #0
 8005b14:	4640      	mov	r0, r8
 8005b16:	4649      	mov	r1, r9
 8005b18:	f7fa ffe8 	bl	8000aec <__aeabi_dcmplt>
 8005b1c:	b110      	cbz	r0, 8005b24 <_printf_float+0x8c>
 8005b1e:	232d      	movs	r3, #45	; 0x2d
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b24:	4a93      	ldr	r2, [pc, #588]	; (8005d74 <_printf_float+0x2dc>)
 8005b26:	4b94      	ldr	r3, [pc, #592]	; (8005d78 <_printf_float+0x2e0>)
 8005b28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b2c:	bf94      	ite	ls
 8005b2e:	4690      	movls	r8, r2
 8005b30:	4698      	movhi	r8, r3
 8005b32:	2303      	movs	r3, #3
 8005b34:	6123      	str	r3, [r4, #16]
 8005b36:	9b05      	ldr	r3, [sp, #20]
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	f04f 0900 	mov.w	r9, #0
 8005b42:	9700      	str	r7, [sp, #0]
 8005b44:	4633      	mov	r3, r6
 8005b46:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f9da 	bl	8005f04 <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	f040 8090 	bne.w	8005c76 <_printf_float+0x1de>
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5a:	b00d      	add	sp, #52	; 0x34
 8005b5c:	ecbd 8b02 	vpop	{d8}
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	4640      	mov	r0, r8
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	f7fa ffe6 	bl	8000b3c <__aeabi_dcmpun>
 8005b70:	b140      	cbz	r0, 8005b84 <_printf_float+0xec>
 8005b72:	464b      	mov	r3, r9
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bfbc      	itt	lt
 8005b78:	232d      	movlt	r3, #45	; 0x2d
 8005b7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b7e:	4a7f      	ldr	r2, [pc, #508]	; (8005d7c <_printf_float+0x2e4>)
 8005b80:	4b7f      	ldr	r3, [pc, #508]	; (8005d80 <_printf_float+0x2e8>)
 8005b82:	e7d1      	b.n	8005b28 <_printf_float+0x90>
 8005b84:	6863      	ldr	r3, [r4, #4]
 8005b86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b8a:	9206      	str	r2, [sp, #24]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	d13f      	bne.n	8005c10 <_printf_float+0x178>
 8005b90:	2306      	movs	r3, #6
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	9b05      	ldr	r3, [sp, #20]
 8005b96:	6861      	ldr	r1, [r4, #4]
 8005b98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9303      	str	r3, [sp, #12]
 8005ba0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ba2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ba6:	ab09      	add	r3, sp, #36	; 0x24
 8005ba8:	ec49 8b10 	vmov	d0, r8, r9
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6022      	str	r2, [r4, #0]
 8005bb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f7ff fecf 	bl	8005958 <__cvt>
 8005bba:	9b06      	ldr	r3, [sp, #24]
 8005bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bbe:	2b47      	cmp	r3, #71	; 0x47
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	d108      	bne.n	8005bd6 <_printf_float+0x13e>
 8005bc4:	1cc8      	adds	r0, r1, #3
 8005bc6:	db02      	blt.n	8005bce <_printf_float+0x136>
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	4299      	cmp	r1, r3
 8005bcc:	dd41      	ble.n	8005c52 <_printf_float+0x1ba>
 8005bce:	f1ab 0302 	sub.w	r3, fp, #2
 8005bd2:	fa5f fb83 	uxtb.w	fp, r3
 8005bd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bda:	d820      	bhi.n	8005c1e <_printf_float+0x186>
 8005bdc:	3901      	subs	r1, #1
 8005bde:	465a      	mov	r2, fp
 8005be0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005be4:	9109      	str	r1, [sp, #36]	; 0x24
 8005be6:	f7ff ff19 	bl	8005a1c <__exponent>
 8005bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bec:	1813      	adds	r3, r2, r0
 8005bee:	2a01      	cmp	r2, #1
 8005bf0:	4681      	mov	r9, r0
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	dc02      	bgt.n	8005bfc <_printf_float+0x164>
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	07d2      	lsls	r2, r2, #31
 8005bfa:	d501      	bpl.n	8005c00 <_printf_float+0x168>
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d09c      	beq.n	8005b42 <_printf_float+0xaa>
 8005c08:	232d      	movs	r3, #45	; 0x2d
 8005c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0e:	e798      	b.n	8005b42 <_printf_float+0xaa>
 8005c10:	9a06      	ldr	r2, [sp, #24]
 8005c12:	2a47      	cmp	r2, #71	; 0x47
 8005c14:	d1be      	bne.n	8005b94 <_printf_float+0xfc>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1bc      	bne.n	8005b94 <_printf_float+0xfc>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e7b9      	b.n	8005b92 <_printf_float+0xfa>
 8005c1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c22:	d118      	bne.n	8005c56 <_printf_float+0x1be>
 8005c24:	2900      	cmp	r1, #0
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	dd0b      	ble.n	8005c42 <_printf_float+0x1aa>
 8005c2a:	6121      	str	r1, [r4, #16]
 8005c2c:	b913      	cbnz	r3, 8005c34 <_printf_float+0x19c>
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	07d0      	lsls	r0, r2, #31
 8005c32:	d502      	bpl.n	8005c3a <_printf_float+0x1a2>
 8005c34:	3301      	adds	r3, #1
 8005c36:	440b      	add	r3, r1
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c3c:	f04f 0900 	mov.w	r9, #0
 8005c40:	e7de      	b.n	8005c00 <_printf_float+0x168>
 8005c42:	b913      	cbnz	r3, 8005c4a <_printf_float+0x1b2>
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	07d2      	lsls	r2, r2, #31
 8005c48:	d501      	bpl.n	8005c4e <_printf_float+0x1b6>
 8005c4a:	3302      	adds	r3, #2
 8005c4c:	e7f4      	b.n	8005c38 <_printf_float+0x1a0>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e7f2      	b.n	8005c38 <_printf_float+0x1a0>
 8005c52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	db05      	blt.n	8005c68 <_printf_float+0x1d0>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	6121      	str	r1, [r4, #16]
 8005c60:	07d8      	lsls	r0, r3, #31
 8005c62:	d5ea      	bpl.n	8005c3a <_printf_float+0x1a2>
 8005c64:	1c4b      	adds	r3, r1, #1
 8005c66:	e7e7      	b.n	8005c38 <_printf_float+0x1a0>
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	bfd4      	ite	le
 8005c6c:	f1c1 0202 	rsble	r2, r1, #2
 8005c70:	2201      	movgt	r2, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	e7e0      	b.n	8005c38 <_printf_float+0x1a0>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	055a      	lsls	r2, r3, #21
 8005c7a:	d407      	bmi.n	8005c8c <_printf_float+0x1f4>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	4642      	mov	r2, r8
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	d12c      	bne.n	8005ce4 <_printf_float+0x24c>
 8005c8a:	e764      	b.n	8005b56 <_printf_float+0xbe>
 8005c8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c90:	f240 80e0 	bls.w	8005e54 <_printf_float+0x3bc>
 8005c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f7fa ff1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d034      	beq.n	8005d0e <_printf_float+0x276>
 8005ca4:	4a37      	ldr	r2, [pc, #220]	; (8005d84 <_printf_float+0x2ec>)
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b8      	blx	r7
 8005cae:	3001      	adds	r0, #1
 8005cb0:	f43f af51 	beq.w	8005b56 <_printf_float+0xbe>
 8005cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	db02      	blt.n	8005cc2 <_printf_float+0x22a>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	07d8      	lsls	r0, r3, #31
 8005cc0:	d510      	bpl.n	8005ce4 <_printf_float+0x24c>
 8005cc2:	ee18 3a10 	vmov	r3, s16
 8005cc6:	4652      	mov	r2, sl
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4628      	mov	r0, r5
 8005ccc:	47b8      	blx	r7
 8005cce:	3001      	adds	r0, #1
 8005cd0:	f43f af41 	beq.w	8005b56 <_printf_float+0xbe>
 8005cd4:	f04f 0800 	mov.w	r8, #0
 8005cd8:	f104 091a 	add.w	r9, r4, #26
 8005cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	4543      	cmp	r3, r8
 8005ce2:	dc09      	bgt.n	8005cf8 <_printf_float+0x260>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	079b      	lsls	r3, r3, #30
 8005ce8:	f100 8107 	bmi.w	8005efa <_printf_float+0x462>
 8005cec:	68e0      	ldr	r0, [r4, #12]
 8005cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf0:	4298      	cmp	r0, r3
 8005cf2:	bfb8      	it	lt
 8005cf4:	4618      	movlt	r0, r3
 8005cf6:	e730      	b.n	8005b5a <_printf_float+0xc2>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	464a      	mov	r2, r9
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f af27 	beq.w	8005b56 <_printf_float+0xbe>
 8005d08:	f108 0801 	add.w	r8, r8, #1
 8005d0c:	e7e6      	b.n	8005cdc <_printf_float+0x244>
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	dc39      	bgt.n	8005d88 <_printf_float+0x2f0>
 8005d14:	4a1b      	ldr	r2, [pc, #108]	; (8005d84 <_printf_float+0x2ec>)
 8005d16:	2301      	movs	r3, #1
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f43f af19 	beq.w	8005b56 <_printf_float+0xbe>
 8005d24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d102      	bne.n	8005d32 <_printf_float+0x29a>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	07d9      	lsls	r1, r3, #31
 8005d30:	d5d8      	bpl.n	8005ce4 <_printf_float+0x24c>
 8005d32:	ee18 3a10 	vmov	r3, s16
 8005d36:	4652      	mov	r2, sl
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f af09 	beq.w	8005b56 <_printf_float+0xbe>
 8005d44:	f04f 0900 	mov.w	r9, #0
 8005d48:	f104 0a1a 	add.w	sl, r4, #26
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	425b      	negs	r3, r3
 8005d50:	454b      	cmp	r3, r9
 8005d52:	dc01      	bgt.n	8005d58 <_printf_float+0x2c0>
 8005d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d56:	e792      	b.n	8005c7e <_printf_float+0x1e6>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4652      	mov	r2, sl
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4628      	mov	r0, r5
 8005d60:	47b8      	blx	r7
 8005d62:	3001      	adds	r0, #1
 8005d64:	f43f aef7 	beq.w	8005b56 <_printf_float+0xbe>
 8005d68:	f109 0901 	add.w	r9, r9, #1
 8005d6c:	e7ee      	b.n	8005d4c <_printf_float+0x2b4>
 8005d6e:	bf00      	nop
 8005d70:	7fefffff 	.word	0x7fefffff
 8005d74:	08008308 	.word	0x08008308
 8005d78:	0800830c 	.word	0x0800830c
 8005d7c:	08008310 	.word	0x08008310
 8005d80:	08008314 	.word	0x08008314
 8005d84:	08008318 	.word	0x08008318
 8005d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	bfa8      	it	ge
 8005d90:	461a      	movge	r2, r3
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	4691      	mov	r9, r2
 8005d96:	dc37      	bgt.n	8005e08 <_printf_float+0x370>
 8005d98:	f04f 0b00 	mov.w	fp, #0
 8005d9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005da0:	f104 021a 	add.w	r2, r4, #26
 8005da4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005da6:	9305      	str	r3, [sp, #20]
 8005da8:	eba3 0309 	sub.w	r3, r3, r9
 8005dac:	455b      	cmp	r3, fp
 8005dae:	dc33      	bgt.n	8005e18 <_printf_float+0x380>
 8005db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005db4:	429a      	cmp	r2, r3
 8005db6:	db3b      	blt.n	8005e30 <_printf_float+0x398>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	07da      	lsls	r2, r3, #31
 8005dbc:	d438      	bmi.n	8005e30 <_printf_float+0x398>
 8005dbe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005dc2:	eba2 0903 	sub.w	r9, r2, r3
 8005dc6:	9b05      	ldr	r3, [sp, #20]
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	4591      	cmp	r9, r2
 8005dcc:	bfa8      	it	ge
 8005dce:	4691      	movge	r9, r2
 8005dd0:	f1b9 0f00 	cmp.w	r9, #0
 8005dd4:	dc35      	bgt.n	8005e42 <_printf_float+0x3aa>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dde:	f104 0a1a 	add.w	sl, r4, #26
 8005de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	eba3 0309 	sub.w	r3, r3, r9
 8005dec:	4543      	cmp	r3, r8
 8005dee:	f77f af79 	ble.w	8005ce4 <_printf_float+0x24c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4652      	mov	r2, sl
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f aeaa 	beq.w	8005b56 <_printf_float+0xbe>
 8005e02:	f108 0801 	add.w	r8, r8, #1
 8005e06:	e7ec      	b.n	8005de2 <_printf_float+0x34a>
 8005e08:	4613      	mov	r3, r2
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	d1c0      	bne.n	8005d98 <_printf_float+0x300>
 8005e16:	e69e      	b.n	8005b56 <_printf_float+0xbe>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	9205      	str	r2, [sp, #20]
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f43f ae97 	beq.w	8005b56 <_printf_float+0xbe>
 8005e28:	9a05      	ldr	r2, [sp, #20]
 8005e2a:	f10b 0b01 	add.w	fp, fp, #1
 8005e2e:	e7b9      	b.n	8005da4 <_printf_float+0x30c>
 8005e30:	ee18 3a10 	vmov	r3, s16
 8005e34:	4652      	mov	r2, sl
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d1be      	bne.n	8005dbe <_printf_float+0x326>
 8005e40:	e689      	b.n	8005b56 <_printf_float+0xbe>
 8005e42:	9a05      	ldr	r2, [sp, #20]
 8005e44:	464b      	mov	r3, r9
 8005e46:	4442      	add	r2, r8
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d1c1      	bne.n	8005dd6 <_printf_float+0x33e>
 8005e52:	e680      	b.n	8005b56 <_printf_float+0xbe>
 8005e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e56:	2a01      	cmp	r2, #1
 8005e58:	dc01      	bgt.n	8005e5e <_printf_float+0x3c6>
 8005e5a:	07db      	lsls	r3, r3, #31
 8005e5c:	d53a      	bpl.n	8005ed4 <_printf_float+0x43c>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4642      	mov	r2, r8
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f ae74 	beq.w	8005b56 <_printf_float+0xbe>
 8005e6e:	ee18 3a10 	vmov	r3, s16
 8005e72:	4652      	mov	r2, sl
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f ae6b 	beq.w	8005b56 <_printf_float+0xbe>
 8005e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e84:	2200      	movs	r2, #0
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005e8c:	f7fa fe24 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e90:	b9d8      	cbnz	r0, 8005eca <_printf_float+0x432>
 8005e92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005e96:	f108 0201 	add.w	r2, r8, #1
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d10e      	bne.n	8005ec2 <_printf_float+0x42a>
 8005ea4:	e657      	b.n	8005b56 <_printf_float+0xbe>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	f43f ae50 	beq.w	8005b56 <_printf_float+0xbe>
 8005eb6:	f108 0801 	add.w	r8, r8, #1
 8005eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4543      	cmp	r3, r8
 8005ec0:	dcf1      	bgt.n	8005ea6 <_printf_float+0x40e>
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ec8:	e6da      	b.n	8005c80 <_printf_float+0x1e8>
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	f104 0a1a 	add.w	sl, r4, #26
 8005ed2:	e7f2      	b.n	8005eba <_printf_float+0x422>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	e7df      	b.n	8005e9a <_printf_float+0x402>
 8005eda:	2301      	movs	r3, #1
 8005edc:	464a      	mov	r2, r9
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f ae36 	beq.w	8005b56 <_printf_float+0xbe>
 8005eea:	f108 0801 	add.w	r8, r8, #1
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	4543      	cmp	r3, r8
 8005ef6:	dcf0      	bgt.n	8005eda <_printf_float+0x442>
 8005ef8:	e6f8      	b.n	8005cec <_printf_float+0x254>
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	f104 0919 	add.w	r9, r4, #25
 8005f02:	e7f4      	b.n	8005eee <_printf_float+0x456>

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bfb8      	it	lt
 8005f18:	4613      	movlt	r3, r2
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f20:	4607      	mov	r7, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc26      	bgt.n	8005f9a <_printf_common+0x96>
 8005f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f50:	1e13      	subs	r3, r2, #0
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42b      	bmi.n	8005fb4 <_printf_common+0xb0>
 8005f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f60:	4649      	mov	r1, r9
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d01e      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	bf02      	ittt	eq
 8005f76:	68e5      	ldreq	r5, [r4, #12]
 8005f78:	6833      	ldreq	r3, [r6, #0]
 8005f7a:	1aed      	subeq	r5, r5, r3
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	bf0c      	ite	eq
 8005f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f84:	2500      	movne	r5, #0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfc4      	itt	gt
 8005f8a:	1a9b      	subgt	r3, r3, r2
 8005f8c:	18ed      	addgt	r5, r5, r3
 8005f8e:	2600      	movs	r6, #0
 8005f90:	341a      	adds	r4, #26
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d11a      	bne.n	8005fcc <_printf_common+0xc8>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e008      	b.n	8005fac <_printf_common+0xa8>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	47c0      	blx	r8
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_printf_common+0xac>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7c6      	b.n	8005f42 <_printf_common+0x3e>
 8005fb4:	18e1      	adds	r1, r4, r3
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	2030      	movs	r0, #48	; 0x30
 8005fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fbe:	4422      	add	r2, r4
 8005fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc8:	3302      	adds	r3, #2
 8005fca:	e7c7      	b.n	8005f5c <_printf_common+0x58>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7d9      	b.n	8005f92 <_printf_common+0x8e>
	...

08005fe0 <_printf_i>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	7e0f      	ldrb	r7, [r1, #24]
 8005fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fe8:	2f78      	cmp	r7, #120	; 0x78
 8005fea:	4691      	mov	r9, r2
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ff6:	d807      	bhi.n	8006008 <_printf_i+0x28>
 8005ff8:	2f62      	cmp	r7, #98	; 0x62
 8005ffa:	d80a      	bhi.n	8006012 <_printf_i+0x32>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f000 80d4 	beq.w	80061aa <_printf_i+0x1ca>
 8006002:	2f58      	cmp	r7, #88	; 0x58
 8006004:	f000 80c0 	beq.w	8006188 <_printf_i+0x1a8>
 8006008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800600c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006010:	e03a      	b.n	8006088 <_printf_i+0xa8>
 8006012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006016:	2b15      	cmp	r3, #21
 8006018:	d8f6      	bhi.n	8006008 <_printf_i+0x28>
 800601a:	a101      	add	r1, pc, #4	; (adr r1, 8006020 <_printf_i+0x40>)
 800601c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006009 	.word	0x08006009
 800602c:	08006009 	.word	0x08006009
 8006030:	08006009 	.word	0x08006009
 8006034:	08006009 	.word	0x08006009
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006009 	.word	0x08006009
 8006040:	08006009 	.word	0x08006009
 8006044:	08006009 	.word	0x08006009
 8006048:	08006009 	.word	0x08006009
 800604c:	08006191 	.word	0x08006191
 8006050:	080060b9 	.word	0x080060b9
 8006054:	0800614b 	.word	0x0800614b
 8006058:	08006009 	.word	0x08006009
 800605c:	08006009 	.word	0x08006009
 8006060:	080061b3 	.word	0x080061b3
 8006064:	08006009 	.word	0x08006009
 8006068:	080060b9 	.word	0x080060b9
 800606c:	08006009 	.word	0x08006009
 8006070:	08006009 	.word	0x08006009
 8006074:	08006153 	.word	0x08006153
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e09f      	b.n	80061cc <_printf_i+0x1ec>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	0607      	lsls	r7, r0, #24
 8006092:	f103 0104 	add.w	r1, r3, #4
 8006096:	6029      	str	r1, [r5, #0]
 8006098:	d501      	bpl.n	800609e <_printf_i+0xbe>
 800609a:	681e      	ldr	r6, [r3, #0]
 800609c:	e003      	b.n	80060a6 <_printf_i+0xc6>
 800609e:	0646      	lsls	r6, r0, #25
 80060a0:	d5fb      	bpl.n	800609a <_printf_i+0xba>
 80060a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80060a6:	2e00      	cmp	r6, #0
 80060a8:	da03      	bge.n	80060b2 <_printf_i+0xd2>
 80060aa:	232d      	movs	r3, #45	; 0x2d
 80060ac:	4276      	negs	r6, r6
 80060ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b2:	485a      	ldr	r0, [pc, #360]	; (800621c <_printf_i+0x23c>)
 80060b4:	230a      	movs	r3, #10
 80060b6:	e012      	b.n	80060de <_printf_i+0xfe>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	6820      	ldr	r0, [r4, #0]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	6029      	str	r1, [r5, #0]
 80060c0:	0605      	lsls	r5, r0, #24
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0xe8>
 80060c4:	681e      	ldr	r6, [r3, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0xee>
 80060c8:	0641      	lsls	r1, r0, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0xe4>
 80060cc:	881e      	ldrh	r6, [r3, #0]
 80060ce:	4853      	ldr	r0, [pc, #332]	; (800621c <_printf_i+0x23c>)
 80060d0:	2f6f      	cmp	r7, #111	; 0x6f
 80060d2:	bf0c      	ite	eq
 80060d4:	2308      	moveq	r3, #8
 80060d6:	230a      	movne	r3, #10
 80060d8:	2100      	movs	r1, #0
 80060da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060de:	6865      	ldr	r5, [r4, #4]
 80060e0:	60a5      	str	r5, [r4, #8]
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	bfa2      	ittt	ge
 80060e6:	6821      	ldrge	r1, [r4, #0]
 80060e8:	f021 0104 	bicge.w	r1, r1, #4
 80060ec:	6021      	strge	r1, [r4, #0]
 80060ee:	b90e      	cbnz	r6, 80060f4 <_printf_i+0x114>
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	d04b      	beq.n	800618c <_printf_i+0x1ac>
 80060f4:	4615      	mov	r5, r2
 80060f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80060fa:	fb03 6711 	mls	r7, r3, r1, r6
 80060fe:	5dc7      	ldrb	r7, [r0, r7]
 8006100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006104:	4637      	mov	r7, r6
 8006106:	42bb      	cmp	r3, r7
 8006108:	460e      	mov	r6, r1
 800610a:	d9f4      	bls.n	80060f6 <_printf_i+0x116>
 800610c:	2b08      	cmp	r3, #8
 800610e:	d10b      	bne.n	8006128 <_printf_i+0x148>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	07de      	lsls	r6, r3, #31
 8006114:	d508      	bpl.n	8006128 <_printf_i+0x148>
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	6861      	ldr	r1, [r4, #4]
 800611a:	4299      	cmp	r1, r3
 800611c:	bfde      	ittt	le
 800611e:	2330      	movle	r3, #48	; 0x30
 8006120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006128:	1b52      	subs	r2, r2, r5
 800612a:	6122      	str	r2, [r4, #16]
 800612c:	f8cd a000 	str.w	sl, [sp]
 8006130:	464b      	mov	r3, r9
 8006132:	aa03      	add	r2, sp, #12
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f7ff fee4 	bl	8005f04 <_printf_common>
 800613c:	3001      	adds	r0, #1
 800613e:	d14a      	bne.n	80061d6 <_printf_i+0x1f6>
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	b004      	add	sp, #16
 8006146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f043 0320 	orr.w	r3, r3, #32
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	4833      	ldr	r0, [pc, #204]	; (8006220 <_printf_i+0x240>)
 8006154:	2778      	movs	r7, #120	; 0x78
 8006156:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	6829      	ldr	r1, [r5, #0]
 800615e:	061f      	lsls	r7, r3, #24
 8006160:	f851 6b04 	ldr.w	r6, [r1], #4
 8006164:	d402      	bmi.n	800616c <_printf_i+0x18c>
 8006166:	065f      	lsls	r7, r3, #25
 8006168:	bf48      	it	mi
 800616a:	b2b6      	uxthmi	r6, r6
 800616c:	07df      	lsls	r7, r3, #31
 800616e:	bf48      	it	mi
 8006170:	f043 0320 	orrmi.w	r3, r3, #32
 8006174:	6029      	str	r1, [r5, #0]
 8006176:	bf48      	it	mi
 8006178:	6023      	strmi	r3, [r4, #0]
 800617a:	b91e      	cbnz	r6, 8006184 <_printf_i+0x1a4>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	f023 0320 	bic.w	r3, r3, #32
 8006182:	6023      	str	r3, [r4, #0]
 8006184:	2310      	movs	r3, #16
 8006186:	e7a7      	b.n	80060d8 <_printf_i+0xf8>
 8006188:	4824      	ldr	r0, [pc, #144]	; (800621c <_printf_i+0x23c>)
 800618a:	e7e4      	b.n	8006156 <_printf_i+0x176>
 800618c:	4615      	mov	r5, r2
 800618e:	e7bd      	b.n	800610c <_printf_i+0x12c>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	6826      	ldr	r6, [r4, #0]
 8006194:	6961      	ldr	r1, [r4, #20]
 8006196:	1d18      	adds	r0, r3, #4
 8006198:	6028      	str	r0, [r5, #0]
 800619a:	0635      	lsls	r5, r6, #24
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	d501      	bpl.n	80061a4 <_printf_i+0x1c4>
 80061a0:	6019      	str	r1, [r3, #0]
 80061a2:	e002      	b.n	80061aa <_printf_i+0x1ca>
 80061a4:	0670      	lsls	r0, r6, #25
 80061a6:	d5fb      	bpl.n	80061a0 <_printf_i+0x1c0>
 80061a8:	8019      	strh	r1, [r3, #0]
 80061aa:	2300      	movs	r3, #0
 80061ac:	6123      	str	r3, [r4, #16]
 80061ae:	4615      	mov	r5, r2
 80061b0:	e7bc      	b.n	800612c <_printf_i+0x14c>
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	1d1a      	adds	r2, r3, #4
 80061b6:	602a      	str	r2, [r5, #0]
 80061b8:	681d      	ldr	r5, [r3, #0]
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	2100      	movs	r1, #0
 80061be:	4628      	mov	r0, r5
 80061c0:	f7fa f80e 	bl	80001e0 <memchr>
 80061c4:	b108      	cbz	r0, 80061ca <_printf_i+0x1ea>
 80061c6:	1b40      	subs	r0, r0, r5
 80061c8:	6060      	str	r0, [r4, #4]
 80061ca:	6863      	ldr	r3, [r4, #4]
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	2300      	movs	r3, #0
 80061d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d4:	e7aa      	b.n	800612c <_printf_i+0x14c>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	462a      	mov	r2, r5
 80061da:	4649      	mov	r1, r9
 80061dc:	4640      	mov	r0, r8
 80061de:	47d0      	blx	sl
 80061e0:	3001      	adds	r0, #1
 80061e2:	d0ad      	beq.n	8006140 <_printf_i+0x160>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	079b      	lsls	r3, r3, #30
 80061e8:	d413      	bmi.n	8006212 <_printf_i+0x232>
 80061ea:	68e0      	ldr	r0, [r4, #12]
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	4298      	cmp	r0, r3
 80061f0:	bfb8      	it	lt
 80061f2:	4618      	movlt	r0, r3
 80061f4:	e7a6      	b.n	8006144 <_printf_i+0x164>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4632      	mov	r2, r6
 80061fa:	4649      	mov	r1, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	47d0      	blx	sl
 8006200:	3001      	adds	r0, #1
 8006202:	d09d      	beq.n	8006140 <_printf_i+0x160>
 8006204:	3501      	adds	r5, #1
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	9903      	ldr	r1, [sp, #12]
 800620a:	1a5b      	subs	r3, r3, r1
 800620c:	42ab      	cmp	r3, r5
 800620e:	dcf2      	bgt.n	80061f6 <_printf_i+0x216>
 8006210:	e7eb      	b.n	80061ea <_printf_i+0x20a>
 8006212:	2500      	movs	r5, #0
 8006214:	f104 0619 	add.w	r6, r4, #25
 8006218:	e7f5      	b.n	8006206 <_printf_i+0x226>
 800621a:	bf00      	nop
 800621c:	0800831a 	.word	0x0800831a
 8006220:	0800832b 	.word	0x0800832b

08006224 <std>:
 8006224:	2300      	movs	r3, #0
 8006226:	b510      	push	{r4, lr}
 8006228:	4604      	mov	r4, r0
 800622a:	e9c0 3300 	strd	r3, r3, [r0]
 800622e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006232:	6083      	str	r3, [r0, #8]
 8006234:	8181      	strh	r1, [r0, #12]
 8006236:	6643      	str	r3, [r0, #100]	; 0x64
 8006238:	81c2      	strh	r2, [r0, #14]
 800623a:	6183      	str	r3, [r0, #24]
 800623c:	4619      	mov	r1, r3
 800623e:	2208      	movs	r2, #8
 8006240:	305c      	adds	r0, #92	; 0x5c
 8006242:	f000 f8f4 	bl	800642e <memset>
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <std+0x58>)
 8006248:	6263      	str	r3, [r4, #36]	; 0x24
 800624a:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <std+0x5c>)
 800624c:	62a3      	str	r3, [r4, #40]	; 0x28
 800624e:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <std+0x60>)
 8006250:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006252:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <std+0x64>)
 8006254:	6323      	str	r3, [r4, #48]	; 0x30
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <std+0x68>)
 8006258:	6224      	str	r4, [r4, #32]
 800625a:	429c      	cmp	r4, r3
 800625c:	d006      	beq.n	800626c <std+0x48>
 800625e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006262:	4294      	cmp	r4, r2
 8006264:	d002      	beq.n	800626c <std+0x48>
 8006266:	33d0      	adds	r3, #208	; 0xd0
 8006268:	429c      	cmp	r4, r3
 800626a:	d105      	bne.n	8006278 <std+0x54>
 800626c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	f000 b958 	b.w	8006528 <__retarget_lock_init_recursive>
 8006278:	bd10      	pop	{r4, pc}
 800627a:	bf00      	nop
 800627c:	080063a9 	.word	0x080063a9
 8006280:	080063cb 	.word	0x080063cb
 8006284:	08006403 	.word	0x08006403
 8006288:	08006427 	.word	0x08006427
 800628c:	2000035c 	.word	0x2000035c

08006290 <stdio_exit_handler>:
 8006290:	4a02      	ldr	r2, [pc, #8]	; (800629c <stdio_exit_handler+0xc>)
 8006292:	4903      	ldr	r1, [pc, #12]	; (80062a0 <stdio_exit_handler+0x10>)
 8006294:	4803      	ldr	r0, [pc, #12]	; (80062a4 <stdio_exit_handler+0x14>)
 8006296:	f000 b869 	b.w	800636c <_fwalk_sglue>
 800629a:	bf00      	nop
 800629c:	2000000c 	.word	0x2000000c
 80062a0:	08007c29 	.word	0x08007c29
 80062a4:	20000018 	.word	0x20000018

080062a8 <cleanup_stdio>:
 80062a8:	6841      	ldr	r1, [r0, #4]
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <cleanup_stdio+0x34>)
 80062ac:	4299      	cmp	r1, r3
 80062ae:	b510      	push	{r4, lr}
 80062b0:	4604      	mov	r4, r0
 80062b2:	d001      	beq.n	80062b8 <cleanup_stdio+0x10>
 80062b4:	f001 fcb8 	bl	8007c28 <_fflush_r>
 80062b8:	68a1      	ldr	r1, [r4, #8]
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <cleanup_stdio+0x38>)
 80062bc:	4299      	cmp	r1, r3
 80062be:	d002      	beq.n	80062c6 <cleanup_stdio+0x1e>
 80062c0:	4620      	mov	r0, r4
 80062c2:	f001 fcb1 	bl	8007c28 <_fflush_r>
 80062c6:	68e1      	ldr	r1, [r4, #12]
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <cleanup_stdio+0x3c>)
 80062ca:	4299      	cmp	r1, r3
 80062cc:	d004      	beq.n	80062d8 <cleanup_stdio+0x30>
 80062ce:	4620      	mov	r0, r4
 80062d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d4:	f001 bca8 	b.w	8007c28 <_fflush_r>
 80062d8:	bd10      	pop	{r4, pc}
 80062da:	bf00      	nop
 80062dc:	2000035c 	.word	0x2000035c
 80062e0:	200003c4 	.word	0x200003c4
 80062e4:	2000042c 	.word	0x2000042c

080062e8 <global_stdio_init.part.0>:
 80062e8:	b510      	push	{r4, lr}
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <global_stdio_init.part.0+0x30>)
 80062ec:	4c0b      	ldr	r4, [pc, #44]	; (800631c <global_stdio_init.part.0+0x34>)
 80062ee:	4a0c      	ldr	r2, [pc, #48]	; (8006320 <global_stdio_init.part.0+0x38>)
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	4620      	mov	r0, r4
 80062f4:	2200      	movs	r2, #0
 80062f6:	2104      	movs	r1, #4
 80062f8:	f7ff ff94 	bl	8006224 <std>
 80062fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006300:	2201      	movs	r2, #1
 8006302:	2109      	movs	r1, #9
 8006304:	f7ff ff8e 	bl	8006224 <std>
 8006308:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800630c:	2202      	movs	r2, #2
 800630e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006312:	2112      	movs	r1, #18
 8006314:	f7ff bf86 	b.w	8006224 <std>
 8006318:	20000494 	.word	0x20000494
 800631c:	2000035c 	.word	0x2000035c
 8006320:	08006291 	.word	0x08006291

08006324 <__sfp_lock_acquire>:
 8006324:	4801      	ldr	r0, [pc, #4]	; (800632c <__sfp_lock_acquire+0x8>)
 8006326:	f000 b900 	b.w	800652a <__retarget_lock_acquire_recursive>
 800632a:	bf00      	nop
 800632c:	2000049d 	.word	0x2000049d

08006330 <__sfp_lock_release>:
 8006330:	4801      	ldr	r0, [pc, #4]	; (8006338 <__sfp_lock_release+0x8>)
 8006332:	f000 b8fb 	b.w	800652c <__retarget_lock_release_recursive>
 8006336:	bf00      	nop
 8006338:	2000049d 	.word	0x2000049d

0800633c <__sinit>:
 800633c:	b510      	push	{r4, lr}
 800633e:	4604      	mov	r4, r0
 8006340:	f7ff fff0 	bl	8006324 <__sfp_lock_acquire>
 8006344:	6a23      	ldr	r3, [r4, #32]
 8006346:	b11b      	cbz	r3, 8006350 <__sinit+0x14>
 8006348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800634c:	f7ff bff0 	b.w	8006330 <__sfp_lock_release>
 8006350:	4b04      	ldr	r3, [pc, #16]	; (8006364 <__sinit+0x28>)
 8006352:	6223      	str	r3, [r4, #32]
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <__sinit+0x2c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f5      	bne.n	8006348 <__sinit+0xc>
 800635c:	f7ff ffc4 	bl	80062e8 <global_stdio_init.part.0>
 8006360:	e7f2      	b.n	8006348 <__sinit+0xc>
 8006362:	bf00      	nop
 8006364:	080062a9 	.word	0x080062a9
 8006368:	20000494 	.word	0x20000494

0800636c <_fwalk_sglue>:
 800636c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006370:	4607      	mov	r7, r0
 8006372:	4688      	mov	r8, r1
 8006374:	4614      	mov	r4, r2
 8006376:	2600      	movs	r6, #0
 8006378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800637c:	f1b9 0901 	subs.w	r9, r9, #1
 8006380:	d505      	bpl.n	800638e <_fwalk_sglue+0x22>
 8006382:	6824      	ldr	r4, [r4, #0]
 8006384:	2c00      	cmp	r4, #0
 8006386:	d1f7      	bne.n	8006378 <_fwalk_sglue+0xc>
 8006388:	4630      	mov	r0, r6
 800638a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638e:	89ab      	ldrh	r3, [r5, #12]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d907      	bls.n	80063a4 <_fwalk_sglue+0x38>
 8006394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006398:	3301      	adds	r3, #1
 800639a:	d003      	beq.n	80063a4 <_fwalk_sglue+0x38>
 800639c:	4629      	mov	r1, r5
 800639e:	4638      	mov	r0, r7
 80063a0:	47c0      	blx	r8
 80063a2:	4306      	orrs	r6, r0
 80063a4:	3568      	adds	r5, #104	; 0x68
 80063a6:	e7e9      	b.n	800637c <_fwalk_sglue+0x10>

080063a8 <__sread>:
 80063a8:	b510      	push	{r4, lr}
 80063aa:	460c      	mov	r4, r1
 80063ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b0:	f000 f86c 	bl	800648c <_read_r>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	bfab      	itete	ge
 80063b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063ba:	89a3      	ldrhlt	r3, [r4, #12]
 80063bc:	181b      	addge	r3, r3, r0
 80063be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063c2:	bfac      	ite	ge
 80063c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80063c6:	81a3      	strhlt	r3, [r4, #12]
 80063c8:	bd10      	pop	{r4, pc}

080063ca <__swrite>:
 80063ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ce:	461f      	mov	r7, r3
 80063d0:	898b      	ldrh	r3, [r1, #12]
 80063d2:	05db      	lsls	r3, r3, #23
 80063d4:	4605      	mov	r5, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	4616      	mov	r6, r2
 80063da:	d505      	bpl.n	80063e8 <__swrite+0x1e>
 80063dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e0:	2302      	movs	r3, #2
 80063e2:	2200      	movs	r2, #0
 80063e4:	f000 f840 	bl	8006468 <_lseek_r>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	4632      	mov	r2, r6
 80063f6:	463b      	mov	r3, r7
 80063f8:	4628      	mov	r0, r5
 80063fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fe:	f000 b857 	b.w	80064b0 <_write_r>

08006402 <__sseek>:
 8006402:	b510      	push	{r4, lr}
 8006404:	460c      	mov	r4, r1
 8006406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640a:	f000 f82d 	bl	8006468 <_lseek_r>
 800640e:	1c43      	adds	r3, r0, #1
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	bf15      	itete	ne
 8006414:	6560      	strne	r0, [r4, #84]	; 0x54
 8006416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800641a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800641e:	81a3      	strheq	r3, [r4, #12]
 8006420:	bf18      	it	ne
 8006422:	81a3      	strhne	r3, [r4, #12]
 8006424:	bd10      	pop	{r4, pc}

08006426 <__sclose>:
 8006426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642a:	f000 b80d 	b.w	8006448 <_close_r>

0800642e <memset>:
 800642e:	4402      	add	r2, r0
 8006430:	4603      	mov	r3, r0
 8006432:	4293      	cmp	r3, r2
 8006434:	d100      	bne.n	8006438 <memset+0xa>
 8006436:	4770      	bx	lr
 8006438:	f803 1b01 	strb.w	r1, [r3], #1
 800643c:	e7f9      	b.n	8006432 <memset+0x4>
	...

08006440 <_localeconv_r>:
 8006440:	4800      	ldr	r0, [pc, #0]	; (8006444 <_localeconv_r+0x4>)
 8006442:	4770      	bx	lr
 8006444:	20000158 	.word	0x20000158

08006448 <_close_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d06      	ldr	r5, [pc, #24]	; (8006464 <_close_r+0x1c>)
 800644c:	2300      	movs	r3, #0
 800644e:	4604      	mov	r4, r0
 8006450:	4608      	mov	r0, r1
 8006452:	602b      	str	r3, [r5, #0]
 8006454:	f7fb f97f 	bl	8001756 <_close>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_close_r+0x1a>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_close_r+0x1a>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	20000498 	.word	0x20000498

08006468 <_lseek_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4d07      	ldr	r5, [pc, #28]	; (8006488 <_lseek_r+0x20>)
 800646c:	4604      	mov	r4, r0
 800646e:	4608      	mov	r0, r1
 8006470:	4611      	mov	r1, r2
 8006472:	2200      	movs	r2, #0
 8006474:	602a      	str	r2, [r5, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	f7fb f994 	bl	80017a4 <_lseek>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_lseek_r+0x1e>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_lseek_r+0x1e>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	20000498 	.word	0x20000498

0800648c <_read_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d07      	ldr	r5, [pc, #28]	; (80064ac <_read_r+0x20>)
 8006490:	4604      	mov	r4, r0
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	2200      	movs	r2, #0
 8006498:	602a      	str	r2, [r5, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	f7fb f922 	bl	80016e4 <_read>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_read_r+0x1e>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_read_r+0x1e>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000498 	.word	0x20000498

080064b0 <_write_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	; (80064d0 <_write_r+0x20>)
 80064b4:	4604      	mov	r4, r0
 80064b6:	4608      	mov	r0, r1
 80064b8:	4611      	mov	r1, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fb f92d 	bl	800171e <_write>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_write_r+0x1e>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_write_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	20000498 	.word	0x20000498

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	; (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000064 	.word	0x20000064

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4d0d      	ldr	r5, [pc, #52]	; (8006518 <__libc_init_array+0x38>)
 80064e4:	4c0d      	ldr	r4, [pc, #52]	; (800651c <__libc_init_array+0x3c>)
 80064e6:	1b64      	subs	r4, r4, r5
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	2600      	movs	r6, #0
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	4d0b      	ldr	r5, [pc, #44]	; (8006520 <__libc_init_array+0x40>)
 80064f2:	4c0c      	ldr	r4, [pc, #48]	; (8006524 <__libc_init_array+0x44>)
 80064f4:	f001 feec 	bl	80082d0 <_init>
 80064f8:	1b64      	subs	r4, r4, r5
 80064fa:	10a4      	asrs	r4, r4, #2
 80064fc:	2600      	movs	r6, #0
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	08008684 	.word	0x08008684
 800651c:	08008684 	.word	0x08008684
 8006520:	08008684 	.word	0x08008684
 8006524:	08008688 	.word	0x08008688

08006528 <__retarget_lock_init_recursive>:
 8006528:	4770      	bx	lr

0800652a <__retarget_lock_acquire_recursive>:
 800652a:	4770      	bx	lr

0800652c <__retarget_lock_release_recursive>:
 800652c:	4770      	bx	lr

0800652e <quorem>:
 800652e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006532:	6903      	ldr	r3, [r0, #16]
 8006534:	690c      	ldr	r4, [r1, #16]
 8006536:	42a3      	cmp	r3, r4
 8006538:	4607      	mov	r7, r0
 800653a:	db7e      	blt.n	800663a <quorem+0x10c>
 800653c:	3c01      	subs	r4, #1
 800653e:	f101 0814 	add.w	r8, r1, #20
 8006542:	f100 0514 	add.w	r5, r0, #20
 8006546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006554:	3301      	adds	r3, #1
 8006556:	429a      	cmp	r2, r3
 8006558:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800655c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006560:	fbb2 f6f3 	udiv	r6, r2, r3
 8006564:	d331      	bcc.n	80065ca <quorem+0x9c>
 8006566:	f04f 0e00 	mov.w	lr, #0
 800656a:	4640      	mov	r0, r8
 800656c:	46ac      	mov	ip, r5
 800656e:	46f2      	mov	sl, lr
 8006570:	f850 2b04 	ldr.w	r2, [r0], #4
 8006574:	b293      	uxth	r3, r2
 8006576:	fb06 e303 	mla	r3, r6, r3, lr
 800657a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800657e:	0c1a      	lsrs	r2, r3, #16
 8006580:	b29b      	uxth	r3, r3
 8006582:	ebaa 0303 	sub.w	r3, sl, r3
 8006586:	f8dc a000 	ldr.w	sl, [ip]
 800658a:	fa13 f38a 	uxtah	r3, r3, sl
 800658e:	fb06 220e 	mla	r2, r6, lr, r2
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800659a:	b292      	uxth	r2, r2
 800659c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80065a8:	4581      	cmp	r9, r0
 80065aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065ae:	f84c 3b04 	str.w	r3, [ip], #4
 80065b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065b6:	d2db      	bcs.n	8006570 <quorem+0x42>
 80065b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80065bc:	b92b      	cbnz	r3, 80065ca <quorem+0x9c>
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	3b04      	subs	r3, #4
 80065c2:	429d      	cmp	r5, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	d32c      	bcc.n	8006622 <quorem+0xf4>
 80065c8:	613c      	str	r4, [r7, #16]
 80065ca:	4638      	mov	r0, r7
 80065cc:	f001 f9a6 	bl	800791c <__mcmp>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	db22      	blt.n	800661a <quorem+0xec>
 80065d4:	3601      	adds	r6, #1
 80065d6:	4629      	mov	r1, r5
 80065d8:	2000      	movs	r0, #0
 80065da:	f858 2b04 	ldr.w	r2, [r8], #4
 80065de:	f8d1 c000 	ldr.w	ip, [r1]
 80065e2:	b293      	uxth	r3, r2
 80065e4:	1ac3      	subs	r3, r0, r3
 80065e6:	0c12      	lsrs	r2, r2, #16
 80065e8:	fa13 f38c 	uxtah	r3, r3, ip
 80065ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065fa:	45c1      	cmp	r9, r8
 80065fc:	f841 3b04 	str.w	r3, [r1], #4
 8006600:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006604:	d2e9      	bcs.n	80065da <quorem+0xac>
 8006606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800660a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800660e:	b922      	cbnz	r2, 800661a <quorem+0xec>
 8006610:	3b04      	subs	r3, #4
 8006612:	429d      	cmp	r5, r3
 8006614:	461a      	mov	r2, r3
 8006616:	d30a      	bcc.n	800662e <quorem+0x100>
 8006618:	613c      	str	r4, [r7, #16]
 800661a:	4630      	mov	r0, r6
 800661c:	b003      	add	sp, #12
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	3b04      	subs	r3, #4
 8006626:	2a00      	cmp	r2, #0
 8006628:	d1ce      	bne.n	80065c8 <quorem+0x9a>
 800662a:	3c01      	subs	r4, #1
 800662c:	e7c9      	b.n	80065c2 <quorem+0x94>
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	3b04      	subs	r3, #4
 8006632:	2a00      	cmp	r2, #0
 8006634:	d1f0      	bne.n	8006618 <quorem+0xea>
 8006636:	3c01      	subs	r4, #1
 8006638:	e7eb      	b.n	8006612 <quorem+0xe4>
 800663a:	2000      	movs	r0, #0
 800663c:	e7ee      	b.n	800661c <quorem+0xee>
	...

08006640 <_dtoa_r>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	ed2d 8b04 	vpush	{d8-d9}
 8006648:	69c5      	ldr	r5, [r0, #28]
 800664a:	b093      	sub	sp, #76	; 0x4c
 800664c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006650:	ec57 6b10 	vmov	r6, r7, d0
 8006654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006658:	9107      	str	r1, [sp, #28]
 800665a:	4604      	mov	r4, r0
 800665c:	920a      	str	r2, [sp, #40]	; 0x28
 800665e:	930d      	str	r3, [sp, #52]	; 0x34
 8006660:	b975      	cbnz	r5, 8006680 <_dtoa_r+0x40>
 8006662:	2010      	movs	r0, #16
 8006664:	f000 fe2a 	bl	80072bc <malloc>
 8006668:	4602      	mov	r2, r0
 800666a:	61e0      	str	r0, [r4, #28]
 800666c:	b920      	cbnz	r0, 8006678 <_dtoa_r+0x38>
 800666e:	4bae      	ldr	r3, [pc, #696]	; (8006928 <_dtoa_r+0x2e8>)
 8006670:	21ef      	movs	r1, #239	; 0xef
 8006672:	48ae      	ldr	r0, [pc, #696]	; (800692c <_dtoa_r+0x2ec>)
 8006674:	f001 fb1e 	bl	8007cb4 <__assert_func>
 8006678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800667c:	6005      	str	r5, [r0, #0]
 800667e:	60c5      	str	r5, [r0, #12]
 8006680:	69e3      	ldr	r3, [r4, #28]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	b151      	cbz	r1, 800669c <_dtoa_r+0x5c>
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	604a      	str	r2, [r1, #4]
 800668a:	2301      	movs	r3, #1
 800668c:	4093      	lsls	r3, r2
 800668e:	608b      	str	r3, [r1, #8]
 8006690:	4620      	mov	r0, r4
 8006692:	f000 ff07 	bl	80074a4 <_Bfree>
 8006696:	69e3      	ldr	r3, [r4, #28]
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	1e3b      	subs	r3, r7, #0
 800669e:	bfbb      	ittet	lt
 80066a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066a4:	9303      	strlt	r3, [sp, #12]
 80066a6:	2300      	movge	r3, #0
 80066a8:	2201      	movlt	r2, #1
 80066aa:	bfac      	ite	ge
 80066ac:	f8c8 3000 	strge.w	r3, [r8]
 80066b0:	f8c8 2000 	strlt.w	r2, [r8]
 80066b4:	4b9e      	ldr	r3, [pc, #632]	; (8006930 <_dtoa_r+0x2f0>)
 80066b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80066ba:	ea33 0308 	bics.w	r3, r3, r8
 80066be:	d11b      	bne.n	80066f8 <_dtoa_r+0xb8>
 80066c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066cc:	4333      	orrs	r3, r6
 80066ce:	f000 8593 	beq.w	80071f8 <_dtoa_r+0xbb8>
 80066d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066d4:	b963      	cbnz	r3, 80066f0 <_dtoa_r+0xb0>
 80066d6:	4b97      	ldr	r3, [pc, #604]	; (8006934 <_dtoa_r+0x2f4>)
 80066d8:	e027      	b.n	800672a <_dtoa_r+0xea>
 80066da:	4b97      	ldr	r3, [pc, #604]	; (8006938 <_dtoa_r+0x2f8>)
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	9800      	ldr	r0, [sp, #0]
 80066e6:	b013      	add	sp, #76	; 0x4c
 80066e8:	ecbd 8b04 	vpop	{d8-d9}
 80066ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f0:	4b90      	ldr	r3, [pc, #576]	; (8006934 <_dtoa_r+0x2f4>)
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	3303      	adds	r3, #3
 80066f6:	e7f3      	b.n	80066e0 <_dtoa_r+0xa0>
 80066f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066fc:	2200      	movs	r2, #0
 80066fe:	ec51 0b17 	vmov	r0, r1, d7
 8006702:	eeb0 8a47 	vmov.f32	s16, s14
 8006706:	eef0 8a67 	vmov.f32	s17, s15
 800670a:	2300      	movs	r3, #0
 800670c:	f7fa f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006710:	4681      	mov	r9, r0
 8006712:	b160      	cbz	r0, 800672e <_dtoa_r+0xee>
 8006714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006716:	2301      	movs	r3, #1
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8568 	beq.w	80071f2 <_dtoa_r+0xbb2>
 8006722:	4b86      	ldr	r3, [pc, #536]	; (800693c <_dtoa_r+0x2fc>)
 8006724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	3b01      	subs	r3, #1
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	e7da      	b.n	80066e4 <_dtoa_r+0xa4>
 800672e:	aa10      	add	r2, sp, #64	; 0x40
 8006730:	a911      	add	r1, sp, #68	; 0x44
 8006732:	4620      	mov	r0, r4
 8006734:	eeb0 0a48 	vmov.f32	s0, s16
 8006738:	eef0 0a68 	vmov.f32	s1, s17
 800673c:	f001 f994 	bl	8007a68 <__d2b>
 8006740:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006744:	4682      	mov	sl, r0
 8006746:	2d00      	cmp	r5, #0
 8006748:	d07f      	beq.n	800684a <_dtoa_r+0x20a>
 800674a:	ee18 3a90 	vmov	r3, s17
 800674e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006752:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006756:	ec51 0b18 	vmov	r0, r1, d8
 800675a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800675e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006762:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006766:	4619      	mov	r1, r3
 8006768:	2200      	movs	r2, #0
 800676a:	4b75      	ldr	r3, [pc, #468]	; (8006940 <_dtoa_r+0x300>)
 800676c:	f7f9 fd94 	bl	8000298 <__aeabi_dsub>
 8006770:	a367      	add	r3, pc, #412	; (adr r3, 8006910 <_dtoa_r+0x2d0>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 ff47 	bl	8000608 <__aeabi_dmul>
 800677a:	a367      	add	r3, pc, #412	; (adr r3, 8006918 <_dtoa_r+0x2d8>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f7f9 fd8c 	bl	800029c <__adddf3>
 8006784:	4606      	mov	r6, r0
 8006786:	4628      	mov	r0, r5
 8006788:	460f      	mov	r7, r1
 800678a:	f7f9 fed3 	bl	8000534 <__aeabi_i2d>
 800678e:	a364      	add	r3, pc, #400	; (adr r3, 8006920 <_dtoa_r+0x2e0>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f7f9 ff38 	bl	8000608 <__aeabi_dmul>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f7f9 fd7c 	bl	800029c <__adddf3>
 80067a4:	4606      	mov	r6, r0
 80067a6:	460f      	mov	r7, r1
 80067a8:	f7fa f9de 	bl	8000b68 <__aeabi_d2iz>
 80067ac:	2200      	movs	r2, #0
 80067ae:	4683      	mov	fp, r0
 80067b0:	2300      	movs	r3, #0
 80067b2:	4630      	mov	r0, r6
 80067b4:	4639      	mov	r1, r7
 80067b6:	f7fa f999 	bl	8000aec <__aeabi_dcmplt>
 80067ba:	b148      	cbz	r0, 80067d0 <_dtoa_r+0x190>
 80067bc:	4658      	mov	r0, fp
 80067be:	f7f9 feb9 	bl	8000534 <__aeabi_i2d>
 80067c2:	4632      	mov	r2, r6
 80067c4:	463b      	mov	r3, r7
 80067c6:	f7fa f987 	bl	8000ad8 <__aeabi_dcmpeq>
 80067ca:	b908      	cbnz	r0, 80067d0 <_dtoa_r+0x190>
 80067cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067d0:	f1bb 0f16 	cmp.w	fp, #22
 80067d4:	d857      	bhi.n	8006886 <_dtoa_r+0x246>
 80067d6:	4b5b      	ldr	r3, [pc, #364]	; (8006944 <_dtoa_r+0x304>)
 80067d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	ec51 0b18 	vmov	r0, r1, d8
 80067e4:	f7fa f982 	bl	8000aec <__aeabi_dcmplt>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d04e      	beq.n	800688a <_dtoa_r+0x24a>
 80067ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067f0:	2300      	movs	r3, #0
 80067f2:	930c      	str	r3, [sp, #48]	; 0x30
 80067f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067f6:	1b5b      	subs	r3, r3, r5
 80067f8:	1e5a      	subs	r2, r3, #1
 80067fa:	bf45      	ittet	mi
 80067fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006800:	9305      	strmi	r3, [sp, #20]
 8006802:	2300      	movpl	r3, #0
 8006804:	2300      	movmi	r3, #0
 8006806:	9206      	str	r2, [sp, #24]
 8006808:	bf54      	ite	pl
 800680a:	9305      	strpl	r3, [sp, #20]
 800680c:	9306      	strmi	r3, [sp, #24]
 800680e:	f1bb 0f00 	cmp.w	fp, #0
 8006812:	db3c      	blt.n	800688e <_dtoa_r+0x24e>
 8006814:	9b06      	ldr	r3, [sp, #24]
 8006816:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800681a:	445b      	add	r3, fp
 800681c:	9306      	str	r3, [sp, #24]
 800681e:	2300      	movs	r3, #0
 8006820:	9308      	str	r3, [sp, #32]
 8006822:	9b07      	ldr	r3, [sp, #28]
 8006824:	2b09      	cmp	r3, #9
 8006826:	d868      	bhi.n	80068fa <_dtoa_r+0x2ba>
 8006828:	2b05      	cmp	r3, #5
 800682a:	bfc4      	itt	gt
 800682c:	3b04      	subgt	r3, #4
 800682e:	9307      	strgt	r3, [sp, #28]
 8006830:	9b07      	ldr	r3, [sp, #28]
 8006832:	f1a3 0302 	sub.w	r3, r3, #2
 8006836:	bfcc      	ite	gt
 8006838:	2500      	movgt	r5, #0
 800683a:	2501      	movle	r5, #1
 800683c:	2b03      	cmp	r3, #3
 800683e:	f200 8085 	bhi.w	800694c <_dtoa_r+0x30c>
 8006842:	e8df f003 	tbb	[pc, r3]
 8006846:	3b2e      	.short	0x3b2e
 8006848:	5839      	.short	0x5839
 800684a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800684e:	441d      	add	r5, r3
 8006850:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006854:	2b20      	cmp	r3, #32
 8006856:	bfc1      	itttt	gt
 8006858:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800685c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006860:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006864:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006868:	bfd6      	itet	le
 800686a:	f1c3 0320 	rsble	r3, r3, #32
 800686e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006872:	fa06 f003 	lslle.w	r0, r6, r3
 8006876:	f7f9 fe4d 	bl	8000514 <__aeabi_ui2d>
 800687a:	2201      	movs	r2, #1
 800687c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006880:	3d01      	subs	r5, #1
 8006882:	920e      	str	r2, [sp, #56]	; 0x38
 8006884:	e76f      	b.n	8006766 <_dtoa_r+0x126>
 8006886:	2301      	movs	r3, #1
 8006888:	e7b3      	b.n	80067f2 <_dtoa_r+0x1b2>
 800688a:	900c      	str	r0, [sp, #48]	; 0x30
 800688c:	e7b2      	b.n	80067f4 <_dtoa_r+0x1b4>
 800688e:	9b05      	ldr	r3, [sp, #20]
 8006890:	eba3 030b 	sub.w	r3, r3, fp
 8006894:	9305      	str	r3, [sp, #20]
 8006896:	f1cb 0300 	rsb	r3, fp, #0
 800689a:	9308      	str	r3, [sp, #32]
 800689c:	2300      	movs	r3, #0
 800689e:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a0:	e7bf      	b.n	8006822 <_dtoa_r+0x1e2>
 80068a2:	2300      	movs	r3, #0
 80068a4:	9309      	str	r3, [sp, #36]	; 0x24
 80068a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	dc52      	bgt.n	8006952 <_dtoa_r+0x312>
 80068ac:	2301      	movs	r3, #1
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	9304      	str	r3, [sp, #16]
 80068b2:	461a      	mov	r2, r3
 80068b4:	920a      	str	r2, [sp, #40]	; 0x28
 80068b6:	e00b      	b.n	80068d0 <_dtoa_r+0x290>
 80068b8:	2301      	movs	r3, #1
 80068ba:	e7f3      	b.n	80068a4 <_dtoa_r+0x264>
 80068bc:	2300      	movs	r3, #0
 80068be:	9309      	str	r3, [sp, #36]	; 0x24
 80068c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c2:	445b      	add	r3, fp
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	3301      	adds	r3, #1
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	bfb8      	it	lt
 80068ce:	2301      	movlt	r3, #1
 80068d0:	69e0      	ldr	r0, [r4, #28]
 80068d2:	2100      	movs	r1, #0
 80068d4:	2204      	movs	r2, #4
 80068d6:	f102 0614 	add.w	r6, r2, #20
 80068da:	429e      	cmp	r6, r3
 80068dc:	d93d      	bls.n	800695a <_dtoa_r+0x31a>
 80068de:	6041      	str	r1, [r0, #4]
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fd9f 	bl	8007424 <_Balloc>
 80068e6:	9000      	str	r0, [sp, #0]
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d139      	bne.n	8006960 <_dtoa_r+0x320>
 80068ec:	4b16      	ldr	r3, [pc, #88]	; (8006948 <_dtoa_r+0x308>)
 80068ee:	4602      	mov	r2, r0
 80068f0:	f240 11af 	movw	r1, #431	; 0x1af
 80068f4:	e6bd      	b.n	8006672 <_dtoa_r+0x32>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e7e1      	b.n	80068be <_dtoa_r+0x27e>
 80068fa:	2501      	movs	r5, #1
 80068fc:	2300      	movs	r3, #0
 80068fe:	9307      	str	r3, [sp, #28]
 8006900:	9509      	str	r5, [sp, #36]	; 0x24
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	2200      	movs	r2, #0
 800690c:	2312      	movs	r3, #18
 800690e:	e7d1      	b.n	80068b4 <_dtoa_r+0x274>
 8006910:	636f4361 	.word	0x636f4361
 8006914:	3fd287a7 	.word	0x3fd287a7
 8006918:	8b60c8b3 	.word	0x8b60c8b3
 800691c:	3fc68a28 	.word	0x3fc68a28
 8006920:	509f79fb 	.word	0x509f79fb
 8006924:	3fd34413 	.word	0x3fd34413
 8006928:	08008349 	.word	0x08008349
 800692c:	08008360 	.word	0x08008360
 8006930:	7ff00000 	.word	0x7ff00000
 8006934:	08008345 	.word	0x08008345
 8006938:	0800833c 	.word	0x0800833c
 800693c:	08008319 	.word	0x08008319
 8006940:	3ff80000 	.word	0x3ff80000
 8006944:	08008450 	.word	0x08008450
 8006948:	080083b8 	.word	0x080083b8
 800694c:	2301      	movs	r3, #1
 800694e:	9309      	str	r3, [sp, #36]	; 0x24
 8006950:	e7d7      	b.n	8006902 <_dtoa_r+0x2c2>
 8006952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	9304      	str	r3, [sp, #16]
 8006958:	e7ba      	b.n	80068d0 <_dtoa_r+0x290>
 800695a:	3101      	adds	r1, #1
 800695c:	0052      	lsls	r2, r2, #1
 800695e:	e7ba      	b.n	80068d6 <_dtoa_r+0x296>
 8006960:	69e3      	ldr	r3, [r4, #28]
 8006962:	9a00      	ldr	r2, [sp, #0]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	2b0e      	cmp	r3, #14
 800696a:	f200 80a8 	bhi.w	8006abe <_dtoa_r+0x47e>
 800696e:	2d00      	cmp	r5, #0
 8006970:	f000 80a5 	beq.w	8006abe <_dtoa_r+0x47e>
 8006974:	f1bb 0f00 	cmp.w	fp, #0
 8006978:	dd38      	ble.n	80069ec <_dtoa_r+0x3ac>
 800697a:	4bc0      	ldr	r3, [pc, #768]	; (8006c7c <_dtoa_r+0x63c>)
 800697c:	f00b 020f 	and.w	r2, fp, #15
 8006980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006988:	e9d3 6700 	ldrd	r6, r7, [r3]
 800698c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006990:	d019      	beq.n	80069c6 <_dtoa_r+0x386>
 8006992:	4bbb      	ldr	r3, [pc, #748]	; (8006c80 <_dtoa_r+0x640>)
 8006994:	ec51 0b18 	vmov	r0, r1, d8
 8006998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800699c:	f7f9 ff5e 	bl	800085c <__aeabi_ddiv>
 80069a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a4:	f008 080f 	and.w	r8, r8, #15
 80069a8:	2503      	movs	r5, #3
 80069aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c80 <_dtoa_r+0x640>
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	d10a      	bne.n	80069ca <_dtoa_r+0x38a>
 80069b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b8:	4632      	mov	r2, r6
 80069ba:	463b      	mov	r3, r7
 80069bc:	f7f9 ff4e 	bl	800085c <__aeabi_ddiv>
 80069c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c4:	e02b      	b.n	8006a1e <_dtoa_r+0x3de>
 80069c6:	2502      	movs	r5, #2
 80069c8:	e7ef      	b.n	80069aa <_dtoa_r+0x36a>
 80069ca:	f018 0f01 	tst.w	r8, #1
 80069ce:	d008      	beq.n	80069e2 <_dtoa_r+0x3a2>
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069d8:	f7f9 fe16 	bl	8000608 <__aeabi_dmul>
 80069dc:	3501      	adds	r5, #1
 80069de:	4606      	mov	r6, r0
 80069e0:	460f      	mov	r7, r1
 80069e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069e6:	f109 0908 	add.w	r9, r9, #8
 80069ea:	e7e0      	b.n	80069ae <_dtoa_r+0x36e>
 80069ec:	f000 809f 	beq.w	8006b2e <_dtoa_r+0x4ee>
 80069f0:	f1cb 0600 	rsb	r6, fp, #0
 80069f4:	4ba1      	ldr	r3, [pc, #644]	; (8006c7c <_dtoa_r+0x63c>)
 80069f6:	4fa2      	ldr	r7, [pc, #648]	; (8006c80 <_dtoa_r+0x640>)
 80069f8:	f006 020f 	and.w	r2, r6, #15
 80069fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	ec51 0b18 	vmov	r0, r1, d8
 8006a08:	f7f9 fdfe 	bl	8000608 <__aeabi_dmul>
 8006a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a10:	1136      	asrs	r6, r6, #4
 8006a12:	2300      	movs	r3, #0
 8006a14:	2502      	movs	r5, #2
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	d17e      	bne.n	8006b18 <_dtoa_r+0x4d8>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1d0      	bne.n	80069c0 <_dtoa_r+0x380>
 8006a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8084 	beq.w	8006b32 <_dtoa_r+0x4f2>
 8006a2a:	4b96      	ldr	r3, [pc, #600]	; (8006c84 <_dtoa_r+0x644>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4649      	mov	r1, r9
 8006a32:	f7fa f85b 	bl	8000aec <__aeabi_dcmplt>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d07b      	beq.n	8006b32 <_dtoa_r+0x4f2>
 8006a3a:	9b04      	ldr	r3, [sp, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d078      	beq.n	8006b32 <_dtoa_r+0x4f2>
 8006a40:	9b01      	ldr	r3, [sp, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dd39      	ble.n	8006aba <_dtoa_r+0x47a>
 8006a46:	4b90      	ldr	r3, [pc, #576]	; (8006c88 <_dtoa_r+0x648>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fddb 	bl	8000608 <__aeabi_dmul>
 8006a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a56:	9e01      	ldr	r6, [sp, #4]
 8006a58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006a5c:	3501      	adds	r5, #1
 8006a5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a62:	4628      	mov	r0, r5
 8006a64:	f7f9 fd66 	bl	8000534 <__aeabi_i2d>
 8006a68:	4642      	mov	r2, r8
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	f7f9 fdcc 	bl	8000608 <__aeabi_dmul>
 8006a70:	4b86      	ldr	r3, [pc, #536]	; (8006c8c <_dtoa_r+0x64c>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	f7f9 fc12 	bl	800029c <__adddf3>
 8006a78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d158      	bne.n	8006b38 <_dtoa_r+0x4f8>
 8006a86:	4b82      	ldr	r3, [pc, #520]	; (8006c90 <_dtoa_r+0x650>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7f9 fc03 	bl	8000298 <__aeabi_dsub>
 8006a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a96:	4680      	mov	r8, r0
 8006a98:	4689      	mov	r9, r1
 8006a9a:	f7fa f845 	bl	8000b28 <__aeabi_dcmpgt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f040 8296 	bne.w	8006fd0 <_dtoa_r+0x990>
 8006aa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006aae:	4649      	mov	r1, r9
 8006ab0:	f7fa f81c 	bl	8000aec <__aeabi_dcmplt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f040 8289 	bne.w	8006fcc <_dtoa_r+0x98c>
 8006aba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f2c0 814e 	blt.w	8006d62 <_dtoa_r+0x722>
 8006ac6:	f1bb 0f0e 	cmp.w	fp, #14
 8006aca:	f300 814a 	bgt.w	8006d62 <_dtoa_r+0x722>
 8006ace:	4b6b      	ldr	r3, [pc, #428]	; (8006c7c <_dtoa_r+0x63c>)
 8006ad0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f280 80dc 	bge.w	8006c98 <_dtoa_r+0x658>
 8006ae0:	9b04      	ldr	r3, [sp, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f300 80d8 	bgt.w	8006c98 <_dtoa_r+0x658>
 8006ae8:	f040 826f 	bne.w	8006fca <_dtoa_r+0x98a>
 8006aec:	4b68      	ldr	r3, [pc, #416]	; (8006c90 <_dtoa_r+0x650>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	f7f9 fd88 	bl	8000608 <__aeabi_dmul>
 8006af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006afc:	f7fa f80a 	bl	8000b14 <__aeabi_dcmpge>
 8006b00:	9e04      	ldr	r6, [sp, #16]
 8006b02:	4637      	mov	r7, r6
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f040 8245 	bne.w	8006f94 <_dtoa_r+0x954>
 8006b0a:	9d00      	ldr	r5, [sp, #0]
 8006b0c:	2331      	movs	r3, #49	; 0x31
 8006b0e:	f805 3b01 	strb.w	r3, [r5], #1
 8006b12:	f10b 0b01 	add.w	fp, fp, #1
 8006b16:	e241      	b.n	8006f9c <_dtoa_r+0x95c>
 8006b18:	07f2      	lsls	r2, r6, #31
 8006b1a:	d505      	bpl.n	8006b28 <_dtoa_r+0x4e8>
 8006b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b20:	f7f9 fd72 	bl	8000608 <__aeabi_dmul>
 8006b24:	3501      	adds	r5, #1
 8006b26:	2301      	movs	r3, #1
 8006b28:	1076      	asrs	r6, r6, #1
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	e773      	b.n	8006a16 <_dtoa_r+0x3d6>
 8006b2e:	2502      	movs	r5, #2
 8006b30:	e775      	b.n	8006a1e <_dtoa_r+0x3de>
 8006b32:	9e04      	ldr	r6, [sp, #16]
 8006b34:	465f      	mov	r7, fp
 8006b36:	e792      	b.n	8006a5e <_dtoa_r+0x41e>
 8006b38:	9900      	ldr	r1, [sp, #0]
 8006b3a:	4b50      	ldr	r3, [pc, #320]	; (8006c7c <_dtoa_r+0x63c>)
 8006b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b40:	4431      	add	r1, r6
 8006b42:	9102      	str	r1, [sp, #8]
 8006b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b46:	eeb0 9a47 	vmov.f32	s18, s14
 8006b4a:	eef0 9a67 	vmov.f32	s19, s15
 8006b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b56:	2900      	cmp	r1, #0
 8006b58:	d044      	beq.n	8006be4 <_dtoa_r+0x5a4>
 8006b5a:	494e      	ldr	r1, [pc, #312]	; (8006c94 <_dtoa_r+0x654>)
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	f7f9 fe7d 	bl	800085c <__aeabi_ddiv>
 8006b62:	ec53 2b19 	vmov	r2, r3, d9
 8006b66:	f7f9 fb97 	bl	8000298 <__aeabi_dsub>
 8006b6a:	9d00      	ldr	r5, [sp, #0]
 8006b6c:	ec41 0b19 	vmov	d9, r0, r1
 8006b70:	4649      	mov	r1, r9
 8006b72:	4640      	mov	r0, r8
 8006b74:	f7f9 fff8 	bl	8000b68 <__aeabi_d2iz>
 8006b78:	4606      	mov	r6, r0
 8006b7a:	f7f9 fcdb 	bl	8000534 <__aeabi_i2d>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 fb87 	bl	8000298 <__aeabi_dsub>
 8006b8a:	3630      	adds	r6, #48	; 0x30
 8006b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b90:	ec53 2b19 	vmov	r2, r3, d9
 8006b94:	4680      	mov	r8, r0
 8006b96:	4689      	mov	r9, r1
 8006b98:	f7f9 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d164      	bne.n	8006c6a <_dtoa_r+0x62a>
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	4937      	ldr	r1, [pc, #220]	; (8006c84 <_dtoa_r+0x644>)
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	f7f9 fb76 	bl	8000298 <__aeabi_dsub>
 8006bac:	ec53 2b19 	vmov	r2, r3, d9
 8006bb0:	f7f9 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f040 80b6 	bne.w	8006d26 <_dtoa_r+0x6e6>
 8006bba:	9b02      	ldr	r3, [sp, #8]
 8006bbc:	429d      	cmp	r5, r3
 8006bbe:	f43f af7c 	beq.w	8006aba <_dtoa_r+0x47a>
 8006bc2:	4b31      	ldr	r3, [pc, #196]	; (8006c88 <_dtoa_r+0x648>)
 8006bc4:	ec51 0b19 	vmov	r0, r1, d9
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f7f9 fd1d 	bl	8000608 <__aeabi_dmul>
 8006bce:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <_dtoa_r+0x648>)
 8006bd0:	ec41 0b19 	vmov	d9, r0, r1
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	f7f9 fd15 	bl	8000608 <__aeabi_dmul>
 8006bde:	4680      	mov	r8, r0
 8006be0:	4689      	mov	r9, r1
 8006be2:	e7c5      	b.n	8006b70 <_dtoa_r+0x530>
 8006be4:	ec51 0b17 	vmov	r0, r1, d7
 8006be8:	f7f9 fd0e 	bl	8000608 <__aeabi_dmul>
 8006bec:	9b02      	ldr	r3, [sp, #8]
 8006bee:	9d00      	ldr	r5, [sp, #0]
 8006bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bf2:	ec41 0b19 	vmov	d9, r0, r1
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	f7f9 ffb5 	bl	8000b68 <__aeabi_d2iz>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	f7f9 fc98 	bl	8000534 <__aeabi_i2d>
 8006c04:	3630      	adds	r6, #48	; 0x30
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 fb43 	bl	8000298 <__aeabi_dsub>
 8006c12:	f805 6b01 	strb.w	r6, [r5], #1
 8006c16:	9b02      	ldr	r3, [sp, #8]
 8006c18:	429d      	cmp	r5, r3
 8006c1a:	4680      	mov	r8, r0
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	d124      	bne.n	8006c6e <_dtoa_r+0x62e>
 8006c24:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <_dtoa_r+0x654>)
 8006c26:	ec51 0b19 	vmov	r0, r1, d9
 8006c2a:	f7f9 fb37 	bl	800029c <__adddf3>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4640      	mov	r0, r8
 8006c34:	4649      	mov	r1, r9
 8006c36:	f7f9 ff77 	bl	8000b28 <__aeabi_dcmpgt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d173      	bne.n	8006d26 <_dtoa_r+0x6e6>
 8006c3e:	ec53 2b19 	vmov	r2, r3, d9
 8006c42:	4914      	ldr	r1, [pc, #80]	; (8006c94 <_dtoa_r+0x654>)
 8006c44:	2000      	movs	r0, #0
 8006c46:	f7f9 fb27 	bl	8000298 <__aeabi_dsub>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4640      	mov	r0, r8
 8006c50:	4649      	mov	r1, r9
 8006c52:	f7f9 ff4b 	bl	8000aec <__aeabi_dcmplt>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f43f af2f 	beq.w	8006aba <_dtoa_r+0x47a>
 8006c5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c5e:	1e6b      	subs	r3, r5, #1
 8006c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c66:	2b30      	cmp	r3, #48	; 0x30
 8006c68:	d0f8      	beq.n	8006c5c <_dtoa_r+0x61c>
 8006c6a:	46bb      	mov	fp, r7
 8006c6c:	e04a      	b.n	8006d04 <_dtoa_r+0x6c4>
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <_dtoa_r+0x648>)
 8006c70:	f7f9 fcca 	bl	8000608 <__aeabi_dmul>
 8006c74:	4680      	mov	r8, r0
 8006c76:	4689      	mov	r9, r1
 8006c78:	e7bd      	b.n	8006bf6 <_dtoa_r+0x5b6>
 8006c7a:	bf00      	nop
 8006c7c:	08008450 	.word	0x08008450
 8006c80:	08008428 	.word	0x08008428
 8006c84:	3ff00000 	.word	0x3ff00000
 8006c88:	40240000 	.word	0x40240000
 8006c8c:	401c0000 	.word	0x401c0000
 8006c90:	40140000 	.word	0x40140000
 8006c94:	3fe00000 	.word	0x3fe00000
 8006c98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c9c:	9d00      	ldr	r5, [sp, #0]
 8006c9e:	4642      	mov	r2, r8
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	f7f9 fdd9 	bl	800085c <__aeabi_ddiv>
 8006caa:	f7f9 ff5d 	bl	8000b68 <__aeabi_d2iz>
 8006cae:	9001      	str	r0, [sp, #4]
 8006cb0:	f7f9 fc40 	bl	8000534 <__aeabi_i2d>
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	f7f9 fca6 	bl	8000608 <__aeabi_dmul>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 fae8 	bl	8000298 <__aeabi_dsub>
 8006cc8:	9e01      	ldr	r6, [sp, #4]
 8006cca:	9f04      	ldr	r7, [sp, #16]
 8006ccc:	3630      	adds	r6, #48	; 0x30
 8006cce:	f805 6b01 	strb.w	r6, [r5], #1
 8006cd2:	9e00      	ldr	r6, [sp, #0]
 8006cd4:	1bae      	subs	r6, r5, r6
 8006cd6:	42b7      	cmp	r7, r6
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	d134      	bne.n	8006d48 <_dtoa_r+0x708>
 8006cde:	f7f9 fadd 	bl	800029c <__adddf3>
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	f7f9 ff1d 	bl	8000b28 <__aeabi_dcmpgt>
 8006cee:	b9c8      	cbnz	r0, 8006d24 <_dtoa_r+0x6e4>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cfc:	b110      	cbz	r0, 8006d04 <_dtoa_r+0x6c4>
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	07db      	lsls	r3, r3, #31
 8006d02:	d40f      	bmi.n	8006d24 <_dtoa_r+0x6e4>
 8006d04:	4651      	mov	r1, sl
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fbcc 	bl	80074a4 <_Bfree>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d10:	702b      	strb	r3, [r5, #0]
 8006d12:	f10b 0301 	add.w	r3, fp, #1
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f43f ace2 	beq.w	80066e4 <_dtoa_r+0xa4>
 8006d20:	601d      	str	r5, [r3, #0]
 8006d22:	e4df      	b.n	80066e4 <_dtoa_r+0xa4>
 8006d24:	465f      	mov	r7, fp
 8006d26:	462b      	mov	r3, r5
 8006d28:	461d      	mov	r5, r3
 8006d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d2e:	2a39      	cmp	r2, #57	; 0x39
 8006d30:	d106      	bne.n	8006d40 <_dtoa_r+0x700>
 8006d32:	9a00      	ldr	r2, [sp, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d1f7      	bne.n	8006d28 <_dtoa_r+0x6e8>
 8006d38:	9900      	ldr	r1, [sp, #0]
 8006d3a:	2230      	movs	r2, #48	; 0x30
 8006d3c:	3701      	adds	r7, #1
 8006d3e:	700a      	strb	r2, [r1, #0]
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	3201      	adds	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e790      	b.n	8006c6a <_dtoa_r+0x62a>
 8006d48:	4ba3      	ldr	r3, [pc, #652]	; (8006fd8 <_dtoa_r+0x998>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f7f9 fc5c 	bl	8000608 <__aeabi_dmul>
 8006d50:	2200      	movs	r2, #0
 8006d52:	2300      	movs	r3, #0
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
 8006d58:	f7f9 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d09e      	beq.n	8006c9e <_dtoa_r+0x65e>
 8006d60:	e7d0      	b.n	8006d04 <_dtoa_r+0x6c4>
 8006d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	f000 80ca 	beq.w	8006efe <_dtoa_r+0x8be>
 8006d6a:	9a07      	ldr	r2, [sp, #28]
 8006d6c:	2a01      	cmp	r2, #1
 8006d6e:	f300 80ad 	bgt.w	8006ecc <_dtoa_r+0x88c>
 8006d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	f000 80a5 	beq.w	8006ec4 <_dtoa_r+0x884>
 8006d7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d7e:	9e08      	ldr	r6, [sp, #32]
 8006d80:	9d05      	ldr	r5, [sp, #20]
 8006d82:	9a05      	ldr	r2, [sp, #20]
 8006d84:	441a      	add	r2, r3
 8006d86:	9205      	str	r2, [sp, #20]
 8006d88:	9a06      	ldr	r2, [sp, #24]
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	441a      	add	r2, r3
 8006d8e:	4620      	mov	r0, r4
 8006d90:	9206      	str	r2, [sp, #24]
 8006d92:	f000 fc3d 	bl	8007610 <__i2b>
 8006d96:	4607      	mov	r7, r0
 8006d98:	b165      	cbz	r5, 8006db4 <_dtoa_r+0x774>
 8006d9a:	9b06      	ldr	r3, [sp, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd09      	ble.n	8006db4 <_dtoa_r+0x774>
 8006da0:	42ab      	cmp	r3, r5
 8006da2:	9a05      	ldr	r2, [sp, #20]
 8006da4:	bfa8      	it	ge
 8006da6:	462b      	movge	r3, r5
 8006da8:	1ad2      	subs	r2, r2, r3
 8006daa:	9205      	str	r2, [sp, #20]
 8006dac:	9a06      	ldr	r2, [sp, #24]
 8006dae:	1aed      	subs	r5, r5, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	9306      	str	r3, [sp, #24]
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	b1f3      	cbz	r3, 8006df6 <_dtoa_r+0x7b6>
 8006db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80a3 	beq.w	8006f06 <_dtoa_r+0x8c6>
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	dd10      	ble.n	8006de6 <_dtoa_r+0x7a6>
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fce1 	bl	8007790 <__pow5mult>
 8006dce:	4652      	mov	r2, sl
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fc31 	bl	800763c <__multiply>
 8006dda:	4651      	mov	r1, sl
 8006ddc:	4680      	mov	r8, r0
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 fb60 	bl	80074a4 <_Bfree>
 8006de4:	46c2      	mov	sl, r8
 8006de6:	9b08      	ldr	r3, [sp, #32]
 8006de8:	1b9a      	subs	r2, r3, r6
 8006dea:	d004      	beq.n	8006df6 <_dtoa_r+0x7b6>
 8006dec:	4651      	mov	r1, sl
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fcce 	bl	8007790 <__pow5mult>
 8006df4:	4682      	mov	sl, r0
 8006df6:	2101      	movs	r1, #1
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fc09 	bl	8007610 <__i2b>
 8006dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	4606      	mov	r6, r0
 8006e04:	f340 8081 	ble.w	8006f0a <_dtoa_r+0x8ca>
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fcbf 	bl	8007790 <__pow5mult>
 8006e12:	9b07      	ldr	r3, [sp, #28]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	4606      	mov	r6, r0
 8006e18:	dd7a      	ble.n	8006f10 <_dtoa_r+0x8d0>
 8006e1a:	f04f 0800 	mov.w	r8, #0
 8006e1e:	6933      	ldr	r3, [r6, #16]
 8006e20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e24:	6918      	ldr	r0, [r3, #16]
 8006e26:	f000 fba5 	bl	8007574 <__hi0bits>
 8006e2a:	f1c0 0020 	rsb	r0, r0, #32
 8006e2e:	9b06      	ldr	r3, [sp, #24]
 8006e30:	4418      	add	r0, r3
 8006e32:	f010 001f 	ands.w	r0, r0, #31
 8006e36:	f000 8094 	beq.w	8006f62 <_dtoa_r+0x922>
 8006e3a:	f1c0 0320 	rsb	r3, r0, #32
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	f340 8085 	ble.w	8006f4e <_dtoa_r+0x90e>
 8006e44:	9b05      	ldr	r3, [sp, #20]
 8006e46:	f1c0 001c 	rsb	r0, r0, #28
 8006e4a:	4403      	add	r3, r0
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	4403      	add	r3, r0
 8006e52:	4405      	add	r5, r0
 8006e54:	9306      	str	r3, [sp, #24]
 8006e56:	9b05      	ldr	r3, [sp, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dd05      	ble.n	8006e68 <_dtoa_r+0x828>
 8006e5c:	4651      	mov	r1, sl
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fcef 	bl	8007844 <__lshift>
 8006e66:	4682      	mov	sl, r0
 8006e68:	9b06      	ldr	r3, [sp, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	dd05      	ble.n	8006e7a <_dtoa_r+0x83a>
 8006e6e:	4631      	mov	r1, r6
 8006e70:	461a      	mov	r2, r3
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 fce6 	bl	8007844 <__lshift>
 8006e78:	4606      	mov	r6, r0
 8006e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d072      	beq.n	8006f66 <_dtoa_r+0x926>
 8006e80:	4631      	mov	r1, r6
 8006e82:	4650      	mov	r0, sl
 8006e84:	f000 fd4a 	bl	800791c <__mcmp>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	da6c      	bge.n	8006f66 <_dtoa_r+0x926>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4651      	mov	r1, sl
 8006e90:	220a      	movs	r2, #10
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fb28 	bl	80074e8 <__multadd>
 8006e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e9e:	4682      	mov	sl, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 81b0 	beq.w	8007206 <_dtoa_r+0xbc6>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	220a      	movs	r2, #10
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 fb1b 	bl	80074e8 <__multadd>
 8006eb2:	9b01      	ldr	r3, [sp, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	f300 8096 	bgt.w	8006fe8 <_dtoa_r+0x9a8>
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	dc59      	bgt.n	8006f76 <_dtoa_r+0x936>
 8006ec2:	e091      	b.n	8006fe8 <_dtoa_r+0x9a8>
 8006ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eca:	e758      	b.n	8006d7e <_dtoa_r+0x73e>
 8006ecc:	9b04      	ldr	r3, [sp, #16]
 8006ece:	1e5e      	subs	r6, r3, #1
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	42b3      	cmp	r3, r6
 8006ed4:	bfbf      	itttt	lt
 8006ed6:	9b08      	ldrlt	r3, [sp, #32]
 8006ed8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006eda:	9608      	strlt	r6, [sp, #32]
 8006edc:	1af3      	sublt	r3, r6, r3
 8006ede:	bfb4      	ite	lt
 8006ee0:	18d2      	addlt	r2, r2, r3
 8006ee2:	1b9e      	subge	r6, r3, r6
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	bfbc      	itt	lt
 8006ee8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006eea:	2600      	movlt	r6, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfb7      	itett	lt
 8006ef0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ef4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ef8:	1a9d      	sublt	r5, r3, r2
 8006efa:	2300      	movlt	r3, #0
 8006efc:	e741      	b.n	8006d82 <_dtoa_r+0x742>
 8006efe:	9e08      	ldr	r6, [sp, #32]
 8006f00:	9d05      	ldr	r5, [sp, #20]
 8006f02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f04:	e748      	b.n	8006d98 <_dtoa_r+0x758>
 8006f06:	9a08      	ldr	r2, [sp, #32]
 8006f08:	e770      	b.n	8006dec <_dtoa_r+0x7ac>
 8006f0a:	9b07      	ldr	r3, [sp, #28]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	dc19      	bgt.n	8006f44 <_dtoa_r+0x904>
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	b9bb      	cbnz	r3, 8006f44 <_dtoa_r+0x904>
 8006f14:	9b03      	ldr	r3, [sp, #12]
 8006f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f1a:	b99b      	cbnz	r3, 8006f44 <_dtoa_r+0x904>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f22:	0d1b      	lsrs	r3, r3, #20
 8006f24:	051b      	lsls	r3, r3, #20
 8006f26:	b183      	cbz	r3, 8006f4a <_dtoa_r+0x90a>
 8006f28:	9b05      	ldr	r3, [sp, #20]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	9305      	str	r3, [sp, #20]
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	3301      	adds	r3, #1
 8006f32:	9306      	str	r3, [sp, #24]
 8006f34:	f04f 0801 	mov.w	r8, #1
 8006f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f47f af6f 	bne.w	8006e1e <_dtoa_r+0x7de>
 8006f40:	2001      	movs	r0, #1
 8006f42:	e774      	b.n	8006e2e <_dtoa_r+0x7ee>
 8006f44:	f04f 0800 	mov.w	r8, #0
 8006f48:	e7f6      	b.n	8006f38 <_dtoa_r+0x8f8>
 8006f4a:	4698      	mov	r8, r3
 8006f4c:	e7f4      	b.n	8006f38 <_dtoa_r+0x8f8>
 8006f4e:	d082      	beq.n	8006e56 <_dtoa_r+0x816>
 8006f50:	9a05      	ldr	r2, [sp, #20]
 8006f52:	331c      	adds	r3, #28
 8006f54:	441a      	add	r2, r3
 8006f56:	9205      	str	r2, [sp, #20]
 8006f58:	9a06      	ldr	r2, [sp, #24]
 8006f5a:	441a      	add	r2, r3
 8006f5c:	441d      	add	r5, r3
 8006f5e:	9206      	str	r2, [sp, #24]
 8006f60:	e779      	b.n	8006e56 <_dtoa_r+0x816>
 8006f62:	4603      	mov	r3, r0
 8006f64:	e7f4      	b.n	8006f50 <_dtoa_r+0x910>
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc37      	bgt.n	8006fdc <_dtoa_r+0x99c>
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	dd34      	ble.n	8006fdc <_dtoa_r+0x99c>
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	b963      	cbnz	r3, 8006f94 <_dtoa_r+0x954>
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	2205      	movs	r2, #5
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 fab2 	bl	80074e8 <__multadd>
 8006f84:	4601      	mov	r1, r0
 8006f86:	4606      	mov	r6, r0
 8006f88:	4650      	mov	r0, sl
 8006f8a:	f000 fcc7 	bl	800791c <__mcmp>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f73f adbb 	bgt.w	8006b0a <_dtoa_r+0x4ca>
 8006f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f96:	9d00      	ldr	r5, [sp, #0]
 8006f98:	ea6f 0b03 	mvn.w	fp, r3
 8006f9c:	f04f 0800 	mov.w	r8, #0
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fa7e 	bl	80074a4 <_Bfree>
 8006fa8:	2f00      	cmp	r7, #0
 8006faa:	f43f aeab 	beq.w	8006d04 <_dtoa_r+0x6c4>
 8006fae:	f1b8 0f00 	cmp.w	r8, #0
 8006fb2:	d005      	beq.n	8006fc0 <_dtoa_r+0x980>
 8006fb4:	45b8      	cmp	r8, r7
 8006fb6:	d003      	beq.n	8006fc0 <_dtoa_r+0x980>
 8006fb8:	4641      	mov	r1, r8
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 fa72 	bl	80074a4 <_Bfree>
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fa6e 	bl	80074a4 <_Bfree>
 8006fc8:	e69c      	b.n	8006d04 <_dtoa_r+0x6c4>
 8006fca:	2600      	movs	r6, #0
 8006fcc:	4637      	mov	r7, r6
 8006fce:	e7e1      	b.n	8006f94 <_dtoa_r+0x954>
 8006fd0:	46bb      	mov	fp, r7
 8006fd2:	4637      	mov	r7, r6
 8006fd4:	e599      	b.n	8006b0a <_dtoa_r+0x4ca>
 8006fd6:	bf00      	nop
 8006fd8:	40240000 	.word	0x40240000
 8006fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 80c8 	beq.w	8007174 <_dtoa_r+0xb34>
 8006fe4:	9b04      	ldr	r3, [sp, #16]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	dd05      	ble.n	8006ff8 <_dtoa_r+0x9b8>
 8006fec:	4639      	mov	r1, r7
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 fc27 	bl	8007844 <__lshift>
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	f1b8 0f00 	cmp.w	r8, #0
 8006ffc:	d05b      	beq.n	80070b6 <_dtoa_r+0xa76>
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4620      	mov	r0, r4
 8007002:	f000 fa0f 	bl	8007424 <_Balloc>
 8007006:	4605      	mov	r5, r0
 8007008:	b928      	cbnz	r0, 8007016 <_dtoa_r+0x9d6>
 800700a:	4b83      	ldr	r3, [pc, #524]	; (8007218 <_dtoa_r+0xbd8>)
 800700c:	4602      	mov	r2, r0
 800700e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007012:	f7ff bb2e 	b.w	8006672 <_dtoa_r+0x32>
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	3202      	adds	r2, #2
 800701a:	0092      	lsls	r2, r2, #2
 800701c:	f107 010c 	add.w	r1, r7, #12
 8007020:	300c      	adds	r0, #12
 8007022:	f000 fe39 	bl	8007c98 <memcpy>
 8007026:	2201      	movs	r2, #1
 8007028:	4629      	mov	r1, r5
 800702a:	4620      	mov	r0, r4
 800702c:	f000 fc0a 	bl	8007844 <__lshift>
 8007030:	9b00      	ldr	r3, [sp, #0]
 8007032:	3301      	adds	r3, #1
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800703a:	4413      	add	r3, r2
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	9b02      	ldr	r3, [sp, #8]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	46b8      	mov	r8, r7
 8007046:	9306      	str	r3, [sp, #24]
 8007048:	4607      	mov	r7, r0
 800704a:	9b04      	ldr	r3, [sp, #16]
 800704c:	4631      	mov	r1, r6
 800704e:	3b01      	subs	r3, #1
 8007050:	4650      	mov	r0, sl
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	f7ff fa6b 	bl	800652e <quorem>
 8007058:	4641      	mov	r1, r8
 800705a:	9002      	str	r0, [sp, #8]
 800705c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007060:	4650      	mov	r0, sl
 8007062:	f000 fc5b 	bl	800791c <__mcmp>
 8007066:	463a      	mov	r2, r7
 8007068:	9005      	str	r0, [sp, #20]
 800706a:	4631      	mov	r1, r6
 800706c:	4620      	mov	r0, r4
 800706e:	f000 fc71 	bl	8007954 <__mdiff>
 8007072:	68c2      	ldr	r2, [r0, #12]
 8007074:	4605      	mov	r5, r0
 8007076:	bb02      	cbnz	r2, 80070ba <_dtoa_r+0xa7a>
 8007078:	4601      	mov	r1, r0
 800707a:	4650      	mov	r0, sl
 800707c:	f000 fc4e 	bl	800791c <__mcmp>
 8007080:	4602      	mov	r2, r0
 8007082:	4629      	mov	r1, r5
 8007084:	4620      	mov	r0, r4
 8007086:	9209      	str	r2, [sp, #36]	; 0x24
 8007088:	f000 fa0c 	bl	80074a4 <_Bfree>
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007090:	9d04      	ldr	r5, [sp, #16]
 8007092:	ea43 0102 	orr.w	r1, r3, r2
 8007096:	9b06      	ldr	r3, [sp, #24]
 8007098:	4319      	orrs	r1, r3
 800709a:	d110      	bne.n	80070be <_dtoa_r+0xa7e>
 800709c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070a0:	d029      	beq.n	80070f6 <_dtoa_r+0xab6>
 80070a2:	9b05      	ldr	r3, [sp, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dd02      	ble.n	80070ae <_dtoa_r+0xa6e>
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80070ae:	9b01      	ldr	r3, [sp, #4]
 80070b0:	f883 9000 	strb.w	r9, [r3]
 80070b4:	e774      	b.n	8006fa0 <_dtoa_r+0x960>
 80070b6:	4638      	mov	r0, r7
 80070b8:	e7ba      	b.n	8007030 <_dtoa_r+0x9f0>
 80070ba:	2201      	movs	r2, #1
 80070bc:	e7e1      	b.n	8007082 <_dtoa_r+0xa42>
 80070be:	9b05      	ldr	r3, [sp, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	db04      	blt.n	80070ce <_dtoa_r+0xa8e>
 80070c4:	9907      	ldr	r1, [sp, #28]
 80070c6:	430b      	orrs	r3, r1
 80070c8:	9906      	ldr	r1, [sp, #24]
 80070ca:	430b      	orrs	r3, r1
 80070cc:	d120      	bne.n	8007110 <_dtoa_r+0xad0>
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	dded      	ble.n	80070ae <_dtoa_r+0xa6e>
 80070d2:	4651      	mov	r1, sl
 80070d4:	2201      	movs	r2, #1
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fbb4 	bl	8007844 <__lshift>
 80070dc:	4631      	mov	r1, r6
 80070de:	4682      	mov	sl, r0
 80070e0:	f000 fc1c 	bl	800791c <__mcmp>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	dc03      	bgt.n	80070f0 <_dtoa_r+0xab0>
 80070e8:	d1e1      	bne.n	80070ae <_dtoa_r+0xa6e>
 80070ea:	f019 0f01 	tst.w	r9, #1
 80070ee:	d0de      	beq.n	80070ae <_dtoa_r+0xa6e>
 80070f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070f4:	d1d8      	bne.n	80070a8 <_dtoa_r+0xa68>
 80070f6:	9a01      	ldr	r2, [sp, #4]
 80070f8:	2339      	movs	r3, #57	; 0x39
 80070fa:	7013      	strb	r3, [r2, #0]
 80070fc:	462b      	mov	r3, r5
 80070fe:	461d      	mov	r5, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007106:	2a39      	cmp	r2, #57	; 0x39
 8007108:	d06c      	beq.n	80071e4 <_dtoa_r+0xba4>
 800710a:	3201      	adds	r2, #1
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	e747      	b.n	8006fa0 <_dtoa_r+0x960>
 8007110:	2a00      	cmp	r2, #0
 8007112:	dd07      	ble.n	8007124 <_dtoa_r+0xae4>
 8007114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007118:	d0ed      	beq.n	80070f6 <_dtoa_r+0xab6>
 800711a:	9a01      	ldr	r2, [sp, #4]
 800711c:	f109 0301 	add.w	r3, r9, #1
 8007120:	7013      	strb	r3, [r2, #0]
 8007122:	e73d      	b.n	8006fa0 <_dtoa_r+0x960>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	9a08      	ldr	r2, [sp, #32]
 8007128:	f803 9c01 	strb.w	r9, [r3, #-1]
 800712c:	4293      	cmp	r3, r2
 800712e:	d043      	beq.n	80071b8 <_dtoa_r+0xb78>
 8007130:	4651      	mov	r1, sl
 8007132:	2300      	movs	r3, #0
 8007134:	220a      	movs	r2, #10
 8007136:	4620      	mov	r0, r4
 8007138:	f000 f9d6 	bl	80074e8 <__multadd>
 800713c:	45b8      	cmp	r8, r7
 800713e:	4682      	mov	sl, r0
 8007140:	f04f 0300 	mov.w	r3, #0
 8007144:	f04f 020a 	mov.w	r2, #10
 8007148:	4641      	mov	r1, r8
 800714a:	4620      	mov	r0, r4
 800714c:	d107      	bne.n	800715e <_dtoa_r+0xb1e>
 800714e:	f000 f9cb 	bl	80074e8 <__multadd>
 8007152:	4680      	mov	r8, r0
 8007154:	4607      	mov	r7, r0
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	e775      	b.n	800704a <_dtoa_r+0xa0a>
 800715e:	f000 f9c3 	bl	80074e8 <__multadd>
 8007162:	4639      	mov	r1, r7
 8007164:	4680      	mov	r8, r0
 8007166:	2300      	movs	r3, #0
 8007168:	220a      	movs	r2, #10
 800716a:	4620      	mov	r0, r4
 800716c:	f000 f9bc 	bl	80074e8 <__multadd>
 8007170:	4607      	mov	r7, r0
 8007172:	e7f0      	b.n	8007156 <_dtoa_r+0xb16>
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	9301      	str	r3, [sp, #4]
 8007178:	9d00      	ldr	r5, [sp, #0]
 800717a:	4631      	mov	r1, r6
 800717c:	4650      	mov	r0, sl
 800717e:	f7ff f9d6 	bl	800652e <quorem>
 8007182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	f805 9b01 	strb.w	r9, [r5], #1
 800718c:	1aea      	subs	r2, r5, r3
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	4293      	cmp	r3, r2
 8007192:	dd07      	ble.n	80071a4 <_dtoa_r+0xb64>
 8007194:	4651      	mov	r1, sl
 8007196:	2300      	movs	r3, #0
 8007198:	220a      	movs	r2, #10
 800719a:	4620      	mov	r0, r4
 800719c:	f000 f9a4 	bl	80074e8 <__multadd>
 80071a0:	4682      	mov	sl, r0
 80071a2:	e7ea      	b.n	800717a <_dtoa_r+0xb3a>
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bfc8      	it	gt
 80071aa:	461d      	movgt	r5, r3
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	bfd8      	it	le
 80071b0:	2501      	movle	r5, #1
 80071b2:	441d      	add	r5, r3
 80071b4:	f04f 0800 	mov.w	r8, #0
 80071b8:	4651      	mov	r1, sl
 80071ba:	2201      	movs	r2, #1
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 fb41 	bl	8007844 <__lshift>
 80071c2:	4631      	mov	r1, r6
 80071c4:	4682      	mov	sl, r0
 80071c6:	f000 fba9 	bl	800791c <__mcmp>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	dc96      	bgt.n	80070fc <_dtoa_r+0xabc>
 80071ce:	d102      	bne.n	80071d6 <_dtoa_r+0xb96>
 80071d0:	f019 0f01 	tst.w	r9, #1
 80071d4:	d192      	bne.n	80070fc <_dtoa_r+0xabc>
 80071d6:	462b      	mov	r3, r5
 80071d8:	461d      	mov	r5, r3
 80071da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071de:	2a30      	cmp	r2, #48	; 0x30
 80071e0:	d0fa      	beq.n	80071d8 <_dtoa_r+0xb98>
 80071e2:	e6dd      	b.n	8006fa0 <_dtoa_r+0x960>
 80071e4:	9a00      	ldr	r2, [sp, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d189      	bne.n	80070fe <_dtoa_r+0xabe>
 80071ea:	f10b 0b01 	add.w	fp, fp, #1
 80071ee:	2331      	movs	r3, #49	; 0x31
 80071f0:	e796      	b.n	8007120 <_dtoa_r+0xae0>
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <_dtoa_r+0xbdc>)
 80071f4:	f7ff ba99 	b.w	800672a <_dtoa_r+0xea>
 80071f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f47f aa6d 	bne.w	80066da <_dtoa_r+0x9a>
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <_dtoa_r+0xbe0>)
 8007202:	f7ff ba92 	b.w	800672a <_dtoa_r+0xea>
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	dcb5      	bgt.n	8007178 <_dtoa_r+0xb38>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	2b02      	cmp	r3, #2
 8007210:	f73f aeb1 	bgt.w	8006f76 <_dtoa_r+0x936>
 8007214:	e7b0      	b.n	8007178 <_dtoa_r+0xb38>
 8007216:	bf00      	nop
 8007218:	080083b8 	.word	0x080083b8
 800721c:	08008318 	.word	0x08008318
 8007220:	0800833c 	.word	0x0800833c

08007224 <_free_r>:
 8007224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007226:	2900      	cmp	r1, #0
 8007228:	d044      	beq.n	80072b4 <_free_r+0x90>
 800722a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800722e:	9001      	str	r0, [sp, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f1a1 0404 	sub.w	r4, r1, #4
 8007236:	bfb8      	it	lt
 8007238:	18e4      	addlt	r4, r4, r3
 800723a:	f000 f8e7 	bl	800740c <__malloc_lock>
 800723e:	4a1e      	ldr	r2, [pc, #120]	; (80072b8 <_free_r+0x94>)
 8007240:	9801      	ldr	r0, [sp, #4]
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	b933      	cbnz	r3, 8007254 <_free_r+0x30>
 8007246:	6063      	str	r3, [r4, #4]
 8007248:	6014      	str	r4, [r2, #0]
 800724a:	b003      	add	sp, #12
 800724c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007250:	f000 b8e2 	b.w	8007418 <__malloc_unlock>
 8007254:	42a3      	cmp	r3, r4
 8007256:	d908      	bls.n	800726a <_free_r+0x46>
 8007258:	6825      	ldr	r5, [r4, #0]
 800725a:	1961      	adds	r1, r4, r5
 800725c:	428b      	cmp	r3, r1
 800725e:	bf01      	itttt	eq
 8007260:	6819      	ldreq	r1, [r3, #0]
 8007262:	685b      	ldreq	r3, [r3, #4]
 8007264:	1949      	addeq	r1, r1, r5
 8007266:	6021      	streq	r1, [r4, #0]
 8007268:	e7ed      	b.n	8007246 <_free_r+0x22>
 800726a:	461a      	mov	r2, r3
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	b10b      	cbz	r3, 8007274 <_free_r+0x50>
 8007270:	42a3      	cmp	r3, r4
 8007272:	d9fa      	bls.n	800726a <_free_r+0x46>
 8007274:	6811      	ldr	r1, [r2, #0]
 8007276:	1855      	adds	r5, r2, r1
 8007278:	42a5      	cmp	r5, r4
 800727a:	d10b      	bne.n	8007294 <_free_r+0x70>
 800727c:	6824      	ldr	r4, [r4, #0]
 800727e:	4421      	add	r1, r4
 8007280:	1854      	adds	r4, r2, r1
 8007282:	42a3      	cmp	r3, r4
 8007284:	6011      	str	r1, [r2, #0]
 8007286:	d1e0      	bne.n	800724a <_free_r+0x26>
 8007288:	681c      	ldr	r4, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	6053      	str	r3, [r2, #4]
 800728e:	440c      	add	r4, r1
 8007290:	6014      	str	r4, [r2, #0]
 8007292:	e7da      	b.n	800724a <_free_r+0x26>
 8007294:	d902      	bls.n	800729c <_free_r+0x78>
 8007296:	230c      	movs	r3, #12
 8007298:	6003      	str	r3, [r0, #0]
 800729a:	e7d6      	b.n	800724a <_free_r+0x26>
 800729c:	6825      	ldr	r5, [r4, #0]
 800729e:	1961      	adds	r1, r4, r5
 80072a0:	428b      	cmp	r3, r1
 80072a2:	bf04      	itt	eq
 80072a4:	6819      	ldreq	r1, [r3, #0]
 80072a6:	685b      	ldreq	r3, [r3, #4]
 80072a8:	6063      	str	r3, [r4, #4]
 80072aa:	bf04      	itt	eq
 80072ac:	1949      	addeq	r1, r1, r5
 80072ae:	6021      	streq	r1, [r4, #0]
 80072b0:	6054      	str	r4, [r2, #4]
 80072b2:	e7ca      	b.n	800724a <_free_r+0x26>
 80072b4:	b003      	add	sp, #12
 80072b6:	bd30      	pop	{r4, r5, pc}
 80072b8:	200004a0 	.word	0x200004a0

080072bc <malloc>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <malloc+0xc>)
 80072be:	4601      	mov	r1, r0
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f000 b823 	b.w	800730c <_malloc_r>
 80072c6:	bf00      	nop
 80072c8:	20000064 	.word	0x20000064

080072cc <sbrk_aligned>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4e0e      	ldr	r6, [pc, #56]	; (8007308 <sbrk_aligned+0x3c>)
 80072d0:	460c      	mov	r4, r1
 80072d2:	6831      	ldr	r1, [r6, #0]
 80072d4:	4605      	mov	r5, r0
 80072d6:	b911      	cbnz	r1, 80072de <sbrk_aligned+0x12>
 80072d8:	f000 fcce 	bl	8007c78 <_sbrk_r>
 80072dc:	6030      	str	r0, [r6, #0]
 80072de:	4621      	mov	r1, r4
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 fcc9 	bl	8007c78 <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d00a      	beq.n	8007300 <sbrk_aligned+0x34>
 80072ea:	1cc4      	adds	r4, r0, #3
 80072ec:	f024 0403 	bic.w	r4, r4, #3
 80072f0:	42a0      	cmp	r0, r4
 80072f2:	d007      	beq.n	8007304 <sbrk_aligned+0x38>
 80072f4:	1a21      	subs	r1, r4, r0
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fcbe 	bl	8007c78 <_sbrk_r>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d101      	bne.n	8007304 <sbrk_aligned+0x38>
 8007300:	f04f 34ff 	mov.w	r4, #4294967295
 8007304:	4620      	mov	r0, r4
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	200004a4 	.word	0x200004a4

0800730c <_malloc_r>:
 800730c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007310:	1ccd      	adds	r5, r1, #3
 8007312:	f025 0503 	bic.w	r5, r5, #3
 8007316:	3508      	adds	r5, #8
 8007318:	2d0c      	cmp	r5, #12
 800731a:	bf38      	it	cc
 800731c:	250c      	movcc	r5, #12
 800731e:	2d00      	cmp	r5, #0
 8007320:	4607      	mov	r7, r0
 8007322:	db01      	blt.n	8007328 <_malloc_r+0x1c>
 8007324:	42a9      	cmp	r1, r5
 8007326:	d905      	bls.n	8007334 <_malloc_r+0x28>
 8007328:	230c      	movs	r3, #12
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	2600      	movs	r6, #0
 800732e:	4630      	mov	r0, r6
 8007330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007408 <_malloc_r+0xfc>
 8007338:	f000 f868 	bl	800740c <__malloc_lock>
 800733c:	f8d8 3000 	ldr.w	r3, [r8]
 8007340:	461c      	mov	r4, r3
 8007342:	bb5c      	cbnz	r4, 800739c <_malloc_r+0x90>
 8007344:	4629      	mov	r1, r5
 8007346:	4638      	mov	r0, r7
 8007348:	f7ff ffc0 	bl	80072cc <sbrk_aligned>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	4604      	mov	r4, r0
 8007350:	d155      	bne.n	80073fe <_malloc_r+0xf2>
 8007352:	f8d8 4000 	ldr.w	r4, [r8]
 8007356:	4626      	mov	r6, r4
 8007358:	2e00      	cmp	r6, #0
 800735a:	d145      	bne.n	80073e8 <_malloc_r+0xdc>
 800735c:	2c00      	cmp	r4, #0
 800735e:	d048      	beq.n	80073f2 <_malloc_r+0xe6>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	4631      	mov	r1, r6
 8007364:	4638      	mov	r0, r7
 8007366:	eb04 0903 	add.w	r9, r4, r3
 800736a:	f000 fc85 	bl	8007c78 <_sbrk_r>
 800736e:	4581      	cmp	r9, r0
 8007370:	d13f      	bne.n	80073f2 <_malloc_r+0xe6>
 8007372:	6821      	ldr	r1, [r4, #0]
 8007374:	1a6d      	subs	r5, r5, r1
 8007376:	4629      	mov	r1, r5
 8007378:	4638      	mov	r0, r7
 800737a:	f7ff ffa7 	bl	80072cc <sbrk_aligned>
 800737e:	3001      	adds	r0, #1
 8007380:	d037      	beq.n	80073f2 <_malloc_r+0xe6>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	442b      	add	r3, r5
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	f8d8 3000 	ldr.w	r3, [r8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d038      	beq.n	8007402 <_malloc_r+0xf6>
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	42a2      	cmp	r2, r4
 8007394:	d12b      	bne.n	80073ee <_malloc_r+0xe2>
 8007396:	2200      	movs	r2, #0
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	e00f      	b.n	80073bc <_malloc_r+0xb0>
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	1b52      	subs	r2, r2, r5
 80073a0:	d41f      	bmi.n	80073e2 <_malloc_r+0xd6>
 80073a2:	2a0b      	cmp	r2, #11
 80073a4:	d917      	bls.n	80073d6 <_malloc_r+0xca>
 80073a6:	1961      	adds	r1, r4, r5
 80073a8:	42a3      	cmp	r3, r4
 80073aa:	6025      	str	r5, [r4, #0]
 80073ac:	bf18      	it	ne
 80073ae:	6059      	strne	r1, [r3, #4]
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	bf08      	it	eq
 80073b4:	f8c8 1000 	streq.w	r1, [r8]
 80073b8:	5162      	str	r2, [r4, r5]
 80073ba:	604b      	str	r3, [r1, #4]
 80073bc:	4638      	mov	r0, r7
 80073be:	f104 060b 	add.w	r6, r4, #11
 80073c2:	f000 f829 	bl	8007418 <__malloc_unlock>
 80073c6:	f026 0607 	bic.w	r6, r6, #7
 80073ca:	1d23      	adds	r3, r4, #4
 80073cc:	1af2      	subs	r2, r6, r3
 80073ce:	d0ae      	beq.n	800732e <_malloc_r+0x22>
 80073d0:	1b9b      	subs	r3, r3, r6
 80073d2:	50a3      	str	r3, [r4, r2]
 80073d4:	e7ab      	b.n	800732e <_malloc_r+0x22>
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	6862      	ldr	r2, [r4, #4]
 80073da:	d1dd      	bne.n	8007398 <_malloc_r+0x8c>
 80073dc:	f8c8 2000 	str.w	r2, [r8]
 80073e0:	e7ec      	b.n	80073bc <_malloc_r+0xb0>
 80073e2:	4623      	mov	r3, r4
 80073e4:	6864      	ldr	r4, [r4, #4]
 80073e6:	e7ac      	b.n	8007342 <_malloc_r+0x36>
 80073e8:	4634      	mov	r4, r6
 80073ea:	6876      	ldr	r6, [r6, #4]
 80073ec:	e7b4      	b.n	8007358 <_malloc_r+0x4c>
 80073ee:	4613      	mov	r3, r2
 80073f0:	e7cc      	b.n	800738c <_malloc_r+0x80>
 80073f2:	230c      	movs	r3, #12
 80073f4:	603b      	str	r3, [r7, #0]
 80073f6:	4638      	mov	r0, r7
 80073f8:	f000 f80e 	bl	8007418 <__malloc_unlock>
 80073fc:	e797      	b.n	800732e <_malloc_r+0x22>
 80073fe:	6025      	str	r5, [r4, #0]
 8007400:	e7dc      	b.n	80073bc <_malloc_r+0xb0>
 8007402:	605b      	str	r3, [r3, #4]
 8007404:	deff      	udf	#255	; 0xff
 8007406:	bf00      	nop
 8007408:	200004a0 	.word	0x200004a0

0800740c <__malloc_lock>:
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <__malloc_lock+0x8>)
 800740e:	f7ff b88c 	b.w	800652a <__retarget_lock_acquire_recursive>
 8007412:	bf00      	nop
 8007414:	2000049c 	.word	0x2000049c

08007418 <__malloc_unlock>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__malloc_unlock+0x8>)
 800741a:	f7ff b887 	b.w	800652c <__retarget_lock_release_recursive>
 800741e:	bf00      	nop
 8007420:	2000049c 	.word	0x2000049c

08007424 <_Balloc>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	69c6      	ldr	r6, [r0, #28]
 8007428:	4604      	mov	r4, r0
 800742a:	460d      	mov	r5, r1
 800742c:	b976      	cbnz	r6, 800744c <_Balloc+0x28>
 800742e:	2010      	movs	r0, #16
 8007430:	f7ff ff44 	bl	80072bc <malloc>
 8007434:	4602      	mov	r2, r0
 8007436:	61e0      	str	r0, [r4, #28]
 8007438:	b920      	cbnz	r0, 8007444 <_Balloc+0x20>
 800743a:	4b18      	ldr	r3, [pc, #96]	; (800749c <_Balloc+0x78>)
 800743c:	4818      	ldr	r0, [pc, #96]	; (80074a0 <_Balloc+0x7c>)
 800743e:	216b      	movs	r1, #107	; 0x6b
 8007440:	f000 fc38 	bl	8007cb4 <__assert_func>
 8007444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007448:	6006      	str	r6, [r0, #0]
 800744a:	60c6      	str	r6, [r0, #12]
 800744c:	69e6      	ldr	r6, [r4, #28]
 800744e:	68f3      	ldr	r3, [r6, #12]
 8007450:	b183      	cbz	r3, 8007474 <_Balloc+0x50>
 8007452:	69e3      	ldr	r3, [r4, #28]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800745a:	b9b8      	cbnz	r0, 800748c <_Balloc+0x68>
 800745c:	2101      	movs	r1, #1
 800745e:	fa01 f605 	lsl.w	r6, r1, r5
 8007462:	1d72      	adds	r2, r6, #5
 8007464:	0092      	lsls	r2, r2, #2
 8007466:	4620      	mov	r0, r4
 8007468:	f000 fc42 	bl	8007cf0 <_calloc_r>
 800746c:	b160      	cbz	r0, 8007488 <_Balloc+0x64>
 800746e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007472:	e00e      	b.n	8007492 <_Balloc+0x6e>
 8007474:	2221      	movs	r2, #33	; 0x21
 8007476:	2104      	movs	r1, #4
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fc39 	bl	8007cf0 <_calloc_r>
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	60f0      	str	r0, [r6, #12]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e4      	bne.n	8007452 <_Balloc+0x2e>
 8007488:	2000      	movs	r0, #0
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	6802      	ldr	r2, [r0, #0]
 800748e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007492:	2300      	movs	r3, #0
 8007494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007498:	e7f7      	b.n	800748a <_Balloc+0x66>
 800749a:	bf00      	nop
 800749c:	08008349 	.word	0x08008349
 80074a0:	080083c9 	.word	0x080083c9

080074a4 <_Bfree>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	69c6      	ldr	r6, [r0, #28]
 80074a8:	4605      	mov	r5, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	b976      	cbnz	r6, 80074cc <_Bfree+0x28>
 80074ae:	2010      	movs	r0, #16
 80074b0:	f7ff ff04 	bl	80072bc <malloc>
 80074b4:	4602      	mov	r2, r0
 80074b6:	61e8      	str	r0, [r5, #28]
 80074b8:	b920      	cbnz	r0, 80074c4 <_Bfree+0x20>
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <_Bfree+0x3c>)
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <_Bfree+0x40>)
 80074be:	218f      	movs	r1, #143	; 0x8f
 80074c0:	f000 fbf8 	bl	8007cb4 <__assert_func>
 80074c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c8:	6006      	str	r6, [r0, #0]
 80074ca:	60c6      	str	r6, [r0, #12]
 80074cc:	b13c      	cbz	r4, 80074de <_Bfree+0x3a>
 80074ce:	69eb      	ldr	r3, [r5, #28]
 80074d0:	6862      	ldr	r2, [r4, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074d8:	6021      	str	r1, [r4, #0]
 80074da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	08008349 	.word	0x08008349
 80074e4:	080083c9 	.word	0x080083c9

080074e8 <__multadd>:
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	690d      	ldr	r5, [r1, #16]
 80074ee:	4607      	mov	r7, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	461e      	mov	r6, r3
 80074f4:	f101 0c14 	add.w	ip, r1, #20
 80074f8:	2000      	movs	r0, #0
 80074fa:	f8dc 3000 	ldr.w	r3, [ip]
 80074fe:	b299      	uxth	r1, r3
 8007500:	fb02 6101 	mla	r1, r2, r1, r6
 8007504:	0c1e      	lsrs	r6, r3, #16
 8007506:	0c0b      	lsrs	r3, r1, #16
 8007508:	fb02 3306 	mla	r3, r2, r6, r3
 800750c:	b289      	uxth	r1, r1
 800750e:	3001      	adds	r0, #1
 8007510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007514:	4285      	cmp	r5, r0
 8007516:	f84c 1b04 	str.w	r1, [ip], #4
 800751a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800751e:	dcec      	bgt.n	80074fa <__multadd+0x12>
 8007520:	b30e      	cbz	r6, 8007566 <__multadd+0x7e>
 8007522:	68a3      	ldr	r3, [r4, #8]
 8007524:	42ab      	cmp	r3, r5
 8007526:	dc19      	bgt.n	800755c <__multadd+0x74>
 8007528:	6861      	ldr	r1, [r4, #4]
 800752a:	4638      	mov	r0, r7
 800752c:	3101      	adds	r1, #1
 800752e:	f7ff ff79 	bl	8007424 <_Balloc>
 8007532:	4680      	mov	r8, r0
 8007534:	b928      	cbnz	r0, 8007542 <__multadd+0x5a>
 8007536:	4602      	mov	r2, r0
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <__multadd+0x84>)
 800753a:	480d      	ldr	r0, [pc, #52]	; (8007570 <__multadd+0x88>)
 800753c:	21ba      	movs	r1, #186	; 0xba
 800753e:	f000 fbb9 	bl	8007cb4 <__assert_func>
 8007542:	6922      	ldr	r2, [r4, #16]
 8007544:	3202      	adds	r2, #2
 8007546:	f104 010c 	add.w	r1, r4, #12
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	300c      	adds	r0, #12
 800754e:	f000 fba3 	bl	8007c98 <memcpy>
 8007552:	4621      	mov	r1, r4
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff ffa5 	bl	80074a4 <_Bfree>
 800755a:	4644      	mov	r4, r8
 800755c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007560:	3501      	adds	r5, #1
 8007562:	615e      	str	r6, [r3, #20]
 8007564:	6125      	str	r5, [r4, #16]
 8007566:	4620      	mov	r0, r4
 8007568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800756c:	080083b8 	.word	0x080083b8
 8007570:	080083c9 	.word	0x080083c9

08007574 <__hi0bits>:
 8007574:	0c03      	lsrs	r3, r0, #16
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	b9d3      	cbnz	r3, 80075b0 <__hi0bits+0x3c>
 800757a:	0400      	lsls	r0, r0, #16
 800757c:	2310      	movs	r3, #16
 800757e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007582:	bf04      	itt	eq
 8007584:	0200      	lsleq	r0, r0, #8
 8007586:	3308      	addeq	r3, #8
 8007588:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800758c:	bf04      	itt	eq
 800758e:	0100      	lsleq	r0, r0, #4
 8007590:	3304      	addeq	r3, #4
 8007592:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007596:	bf04      	itt	eq
 8007598:	0080      	lsleq	r0, r0, #2
 800759a:	3302      	addeq	r3, #2
 800759c:	2800      	cmp	r0, #0
 800759e:	db05      	blt.n	80075ac <__hi0bits+0x38>
 80075a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075a4:	f103 0301 	add.w	r3, r3, #1
 80075a8:	bf08      	it	eq
 80075aa:	2320      	moveq	r3, #32
 80075ac:	4618      	mov	r0, r3
 80075ae:	4770      	bx	lr
 80075b0:	2300      	movs	r3, #0
 80075b2:	e7e4      	b.n	800757e <__hi0bits+0xa>

080075b4 <__lo0bits>:
 80075b4:	6803      	ldr	r3, [r0, #0]
 80075b6:	f013 0207 	ands.w	r2, r3, #7
 80075ba:	d00c      	beq.n	80075d6 <__lo0bits+0x22>
 80075bc:	07d9      	lsls	r1, r3, #31
 80075be:	d422      	bmi.n	8007606 <__lo0bits+0x52>
 80075c0:	079a      	lsls	r2, r3, #30
 80075c2:	bf49      	itett	mi
 80075c4:	085b      	lsrmi	r3, r3, #1
 80075c6:	089b      	lsrpl	r3, r3, #2
 80075c8:	6003      	strmi	r3, [r0, #0]
 80075ca:	2201      	movmi	r2, #1
 80075cc:	bf5c      	itt	pl
 80075ce:	6003      	strpl	r3, [r0, #0]
 80075d0:	2202      	movpl	r2, #2
 80075d2:	4610      	mov	r0, r2
 80075d4:	4770      	bx	lr
 80075d6:	b299      	uxth	r1, r3
 80075d8:	b909      	cbnz	r1, 80075de <__lo0bits+0x2a>
 80075da:	0c1b      	lsrs	r3, r3, #16
 80075dc:	2210      	movs	r2, #16
 80075de:	b2d9      	uxtb	r1, r3
 80075e0:	b909      	cbnz	r1, 80075e6 <__lo0bits+0x32>
 80075e2:	3208      	adds	r2, #8
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	0719      	lsls	r1, r3, #28
 80075e8:	bf04      	itt	eq
 80075ea:	091b      	lsreq	r3, r3, #4
 80075ec:	3204      	addeq	r2, #4
 80075ee:	0799      	lsls	r1, r3, #30
 80075f0:	bf04      	itt	eq
 80075f2:	089b      	lsreq	r3, r3, #2
 80075f4:	3202      	addeq	r2, #2
 80075f6:	07d9      	lsls	r1, r3, #31
 80075f8:	d403      	bmi.n	8007602 <__lo0bits+0x4e>
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	f102 0201 	add.w	r2, r2, #1
 8007600:	d003      	beq.n	800760a <__lo0bits+0x56>
 8007602:	6003      	str	r3, [r0, #0]
 8007604:	e7e5      	b.n	80075d2 <__lo0bits+0x1e>
 8007606:	2200      	movs	r2, #0
 8007608:	e7e3      	b.n	80075d2 <__lo0bits+0x1e>
 800760a:	2220      	movs	r2, #32
 800760c:	e7e1      	b.n	80075d2 <__lo0bits+0x1e>
	...

08007610 <__i2b>:
 8007610:	b510      	push	{r4, lr}
 8007612:	460c      	mov	r4, r1
 8007614:	2101      	movs	r1, #1
 8007616:	f7ff ff05 	bl	8007424 <_Balloc>
 800761a:	4602      	mov	r2, r0
 800761c:	b928      	cbnz	r0, 800762a <__i2b+0x1a>
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <__i2b+0x24>)
 8007620:	4805      	ldr	r0, [pc, #20]	; (8007638 <__i2b+0x28>)
 8007622:	f240 1145 	movw	r1, #325	; 0x145
 8007626:	f000 fb45 	bl	8007cb4 <__assert_func>
 800762a:	2301      	movs	r3, #1
 800762c:	6144      	str	r4, [r0, #20]
 800762e:	6103      	str	r3, [r0, #16]
 8007630:	bd10      	pop	{r4, pc}
 8007632:	bf00      	nop
 8007634:	080083b8 	.word	0x080083b8
 8007638:	080083c9 	.word	0x080083c9

0800763c <__multiply>:
 800763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	4691      	mov	r9, r2
 8007642:	690a      	ldr	r2, [r1, #16]
 8007644:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007648:	429a      	cmp	r2, r3
 800764a:	bfb8      	it	lt
 800764c:	460b      	movlt	r3, r1
 800764e:	460c      	mov	r4, r1
 8007650:	bfbc      	itt	lt
 8007652:	464c      	movlt	r4, r9
 8007654:	4699      	movlt	r9, r3
 8007656:	6927      	ldr	r7, [r4, #16]
 8007658:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	6861      	ldr	r1, [r4, #4]
 8007660:	eb07 060a 	add.w	r6, r7, sl
 8007664:	42b3      	cmp	r3, r6
 8007666:	b085      	sub	sp, #20
 8007668:	bfb8      	it	lt
 800766a:	3101      	addlt	r1, #1
 800766c:	f7ff feda 	bl	8007424 <_Balloc>
 8007670:	b930      	cbnz	r0, 8007680 <__multiply+0x44>
 8007672:	4602      	mov	r2, r0
 8007674:	4b44      	ldr	r3, [pc, #272]	; (8007788 <__multiply+0x14c>)
 8007676:	4845      	ldr	r0, [pc, #276]	; (800778c <__multiply+0x150>)
 8007678:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800767c:	f000 fb1a 	bl	8007cb4 <__assert_func>
 8007680:	f100 0514 	add.w	r5, r0, #20
 8007684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007688:	462b      	mov	r3, r5
 800768a:	2200      	movs	r2, #0
 800768c:	4543      	cmp	r3, r8
 800768e:	d321      	bcc.n	80076d4 <__multiply+0x98>
 8007690:	f104 0314 	add.w	r3, r4, #20
 8007694:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007698:	f109 0314 	add.w	r3, r9, #20
 800769c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076a0:	9202      	str	r2, [sp, #8]
 80076a2:	1b3a      	subs	r2, r7, r4
 80076a4:	3a15      	subs	r2, #21
 80076a6:	f022 0203 	bic.w	r2, r2, #3
 80076aa:	3204      	adds	r2, #4
 80076ac:	f104 0115 	add.w	r1, r4, #21
 80076b0:	428f      	cmp	r7, r1
 80076b2:	bf38      	it	cc
 80076b4:	2204      	movcc	r2, #4
 80076b6:	9201      	str	r2, [sp, #4]
 80076b8:	9a02      	ldr	r2, [sp, #8]
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d80c      	bhi.n	80076da <__multiply+0x9e>
 80076c0:	2e00      	cmp	r6, #0
 80076c2:	dd03      	ble.n	80076cc <__multiply+0x90>
 80076c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d05b      	beq.n	8007784 <__multiply+0x148>
 80076cc:	6106      	str	r6, [r0, #16]
 80076ce:	b005      	add	sp, #20
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	f843 2b04 	str.w	r2, [r3], #4
 80076d8:	e7d8      	b.n	800768c <__multiply+0x50>
 80076da:	f8b3 a000 	ldrh.w	sl, [r3]
 80076de:	f1ba 0f00 	cmp.w	sl, #0
 80076e2:	d024      	beq.n	800772e <__multiply+0xf2>
 80076e4:	f104 0e14 	add.w	lr, r4, #20
 80076e8:	46a9      	mov	r9, r5
 80076ea:	f04f 0c00 	mov.w	ip, #0
 80076ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076f2:	f8d9 1000 	ldr.w	r1, [r9]
 80076f6:	fa1f fb82 	uxth.w	fp, r2
 80076fa:	b289      	uxth	r1, r1
 80076fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007700:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007704:	f8d9 2000 	ldr.w	r2, [r9]
 8007708:	4461      	add	r1, ip
 800770a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800770e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007716:	b289      	uxth	r1, r1
 8007718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800771c:	4577      	cmp	r7, lr
 800771e:	f849 1b04 	str.w	r1, [r9], #4
 8007722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007726:	d8e2      	bhi.n	80076ee <__multiply+0xb2>
 8007728:	9a01      	ldr	r2, [sp, #4]
 800772a:	f845 c002 	str.w	ip, [r5, r2]
 800772e:	9a03      	ldr	r2, [sp, #12]
 8007730:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007734:	3304      	adds	r3, #4
 8007736:	f1b9 0f00 	cmp.w	r9, #0
 800773a:	d021      	beq.n	8007780 <__multiply+0x144>
 800773c:	6829      	ldr	r1, [r5, #0]
 800773e:	f104 0c14 	add.w	ip, r4, #20
 8007742:	46ae      	mov	lr, r5
 8007744:	f04f 0a00 	mov.w	sl, #0
 8007748:	f8bc b000 	ldrh.w	fp, [ip]
 800774c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007750:	fb09 220b 	mla	r2, r9, fp, r2
 8007754:	4452      	add	r2, sl
 8007756:	b289      	uxth	r1, r1
 8007758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800775c:	f84e 1b04 	str.w	r1, [lr], #4
 8007760:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007764:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007768:	f8be 1000 	ldrh.w	r1, [lr]
 800776c:	fb09 110a 	mla	r1, r9, sl, r1
 8007770:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007774:	4567      	cmp	r7, ip
 8007776:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800777a:	d8e5      	bhi.n	8007748 <__multiply+0x10c>
 800777c:	9a01      	ldr	r2, [sp, #4]
 800777e:	50a9      	str	r1, [r5, r2]
 8007780:	3504      	adds	r5, #4
 8007782:	e799      	b.n	80076b8 <__multiply+0x7c>
 8007784:	3e01      	subs	r6, #1
 8007786:	e79b      	b.n	80076c0 <__multiply+0x84>
 8007788:	080083b8 	.word	0x080083b8
 800778c:	080083c9 	.word	0x080083c9

08007790 <__pow5mult>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	4615      	mov	r5, r2
 8007796:	f012 0203 	ands.w	r2, r2, #3
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	d007      	beq.n	80077b0 <__pow5mult+0x20>
 80077a0:	4c25      	ldr	r4, [pc, #148]	; (8007838 <__pow5mult+0xa8>)
 80077a2:	3a01      	subs	r2, #1
 80077a4:	2300      	movs	r3, #0
 80077a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077aa:	f7ff fe9d 	bl	80074e8 <__multadd>
 80077ae:	4607      	mov	r7, r0
 80077b0:	10ad      	asrs	r5, r5, #2
 80077b2:	d03d      	beq.n	8007830 <__pow5mult+0xa0>
 80077b4:	69f4      	ldr	r4, [r6, #28]
 80077b6:	b97c      	cbnz	r4, 80077d8 <__pow5mult+0x48>
 80077b8:	2010      	movs	r0, #16
 80077ba:	f7ff fd7f 	bl	80072bc <malloc>
 80077be:	4602      	mov	r2, r0
 80077c0:	61f0      	str	r0, [r6, #28]
 80077c2:	b928      	cbnz	r0, 80077d0 <__pow5mult+0x40>
 80077c4:	4b1d      	ldr	r3, [pc, #116]	; (800783c <__pow5mult+0xac>)
 80077c6:	481e      	ldr	r0, [pc, #120]	; (8007840 <__pow5mult+0xb0>)
 80077c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077cc:	f000 fa72 	bl	8007cb4 <__assert_func>
 80077d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d4:	6004      	str	r4, [r0, #0]
 80077d6:	60c4      	str	r4, [r0, #12]
 80077d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e0:	b94c      	cbnz	r4, 80077f6 <__pow5mult+0x66>
 80077e2:	f240 2171 	movw	r1, #625	; 0x271
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ff12 	bl	8007610 <__i2b>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f2:	4604      	mov	r4, r0
 80077f4:	6003      	str	r3, [r0, #0]
 80077f6:	f04f 0900 	mov.w	r9, #0
 80077fa:	07eb      	lsls	r3, r5, #31
 80077fc:	d50a      	bpl.n	8007814 <__pow5mult+0x84>
 80077fe:	4639      	mov	r1, r7
 8007800:	4622      	mov	r2, r4
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ff1a 	bl	800763c <__multiply>
 8007808:	4639      	mov	r1, r7
 800780a:	4680      	mov	r8, r0
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff fe49 	bl	80074a4 <_Bfree>
 8007812:	4647      	mov	r7, r8
 8007814:	106d      	asrs	r5, r5, #1
 8007816:	d00b      	beq.n	8007830 <__pow5mult+0xa0>
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	b938      	cbnz	r0, 800782c <__pow5mult+0x9c>
 800781c:	4622      	mov	r2, r4
 800781e:	4621      	mov	r1, r4
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff ff0b 	bl	800763c <__multiply>
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	f8c0 9000 	str.w	r9, [r0]
 800782c:	4604      	mov	r4, r0
 800782e:	e7e4      	b.n	80077fa <__pow5mult+0x6a>
 8007830:	4638      	mov	r0, r7
 8007832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007836:	bf00      	nop
 8007838:	08008518 	.word	0x08008518
 800783c:	08008349 	.word	0x08008349
 8007840:	080083c9 	.word	0x080083c9

08007844 <__lshift>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	460c      	mov	r4, r1
 800784a:	6849      	ldr	r1, [r1, #4]
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	4607      	mov	r7, r0
 8007856:	4691      	mov	r9, r2
 8007858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800785c:	f108 0601 	add.w	r6, r8, #1
 8007860:	42b3      	cmp	r3, r6
 8007862:	db0b      	blt.n	800787c <__lshift+0x38>
 8007864:	4638      	mov	r0, r7
 8007866:	f7ff fddd 	bl	8007424 <_Balloc>
 800786a:	4605      	mov	r5, r0
 800786c:	b948      	cbnz	r0, 8007882 <__lshift+0x3e>
 800786e:	4602      	mov	r2, r0
 8007870:	4b28      	ldr	r3, [pc, #160]	; (8007914 <__lshift+0xd0>)
 8007872:	4829      	ldr	r0, [pc, #164]	; (8007918 <__lshift+0xd4>)
 8007874:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007878:	f000 fa1c 	bl	8007cb4 <__assert_func>
 800787c:	3101      	adds	r1, #1
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	e7ee      	b.n	8007860 <__lshift+0x1c>
 8007882:	2300      	movs	r3, #0
 8007884:	f100 0114 	add.w	r1, r0, #20
 8007888:	f100 0210 	add.w	r2, r0, #16
 800788c:	4618      	mov	r0, r3
 800788e:	4553      	cmp	r3, sl
 8007890:	db33      	blt.n	80078fa <__lshift+0xb6>
 8007892:	6920      	ldr	r0, [r4, #16]
 8007894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007898:	f104 0314 	add.w	r3, r4, #20
 800789c:	f019 091f 	ands.w	r9, r9, #31
 80078a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078a8:	d02b      	beq.n	8007902 <__lshift+0xbe>
 80078aa:	f1c9 0e20 	rsb	lr, r9, #32
 80078ae:	468a      	mov	sl, r1
 80078b0:	2200      	movs	r2, #0
 80078b2:	6818      	ldr	r0, [r3, #0]
 80078b4:	fa00 f009 	lsl.w	r0, r0, r9
 80078b8:	4310      	orrs	r0, r2
 80078ba:	f84a 0b04 	str.w	r0, [sl], #4
 80078be:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c2:	459c      	cmp	ip, r3
 80078c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80078c8:	d8f3      	bhi.n	80078b2 <__lshift+0x6e>
 80078ca:	ebac 0304 	sub.w	r3, ip, r4
 80078ce:	3b15      	subs	r3, #21
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	3304      	adds	r3, #4
 80078d6:	f104 0015 	add.w	r0, r4, #21
 80078da:	4584      	cmp	ip, r0
 80078dc:	bf38      	it	cc
 80078de:	2304      	movcc	r3, #4
 80078e0:	50ca      	str	r2, [r1, r3]
 80078e2:	b10a      	cbz	r2, 80078e8 <__lshift+0xa4>
 80078e4:	f108 0602 	add.w	r6, r8, #2
 80078e8:	3e01      	subs	r6, #1
 80078ea:	4638      	mov	r0, r7
 80078ec:	612e      	str	r6, [r5, #16]
 80078ee:	4621      	mov	r1, r4
 80078f0:	f7ff fdd8 	bl	80074a4 <_Bfree>
 80078f4:	4628      	mov	r0, r5
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80078fe:	3301      	adds	r3, #1
 8007900:	e7c5      	b.n	800788e <__lshift+0x4a>
 8007902:	3904      	subs	r1, #4
 8007904:	f853 2b04 	ldr.w	r2, [r3], #4
 8007908:	f841 2f04 	str.w	r2, [r1, #4]!
 800790c:	459c      	cmp	ip, r3
 800790e:	d8f9      	bhi.n	8007904 <__lshift+0xc0>
 8007910:	e7ea      	b.n	80078e8 <__lshift+0xa4>
 8007912:	bf00      	nop
 8007914:	080083b8 	.word	0x080083b8
 8007918:	080083c9 	.word	0x080083c9

0800791c <__mcmp>:
 800791c:	b530      	push	{r4, r5, lr}
 800791e:	6902      	ldr	r2, [r0, #16]
 8007920:	690c      	ldr	r4, [r1, #16]
 8007922:	1b12      	subs	r2, r2, r4
 8007924:	d10e      	bne.n	8007944 <__mcmp+0x28>
 8007926:	f100 0314 	add.w	r3, r0, #20
 800792a:	3114      	adds	r1, #20
 800792c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007934:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007938:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800793c:	42a5      	cmp	r5, r4
 800793e:	d003      	beq.n	8007948 <__mcmp+0x2c>
 8007940:	d305      	bcc.n	800794e <__mcmp+0x32>
 8007942:	2201      	movs	r2, #1
 8007944:	4610      	mov	r0, r2
 8007946:	bd30      	pop	{r4, r5, pc}
 8007948:	4283      	cmp	r3, r0
 800794a:	d3f3      	bcc.n	8007934 <__mcmp+0x18>
 800794c:	e7fa      	b.n	8007944 <__mcmp+0x28>
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	e7f7      	b.n	8007944 <__mcmp+0x28>

08007954 <__mdiff>:
 8007954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	460c      	mov	r4, r1
 800795a:	4606      	mov	r6, r0
 800795c:	4611      	mov	r1, r2
 800795e:	4620      	mov	r0, r4
 8007960:	4690      	mov	r8, r2
 8007962:	f7ff ffdb 	bl	800791c <__mcmp>
 8007966:	1e05      	subs	r5, r0, #0
 8007968:	d110      	bne.n	800798c <__mdiff+0x38>
 800796a:	4629      	mov	r1, r5
 800796c:	4630      	mov	r0, r6
 800796e:	f7ff fd59 	bl	8007424 <_Balloc>
 8007972:	b930      	cbnz	r0, 8007982 <__mdiff+0x2e>
 8007974:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <__mdiff+0x10c>)
 8007976:	4602      	mov	r2, r0
 8007978:	f240 2137 	movw	r1, #567	; 0x237
 800797c:	4839      	ldr	r0, [pc, #228]	; (8007a64 <__mdiff+0x110>)
 800797e:	f000 f999 	bl	8007cb4 <__assert_func>
 8007982:	2301      	movs	r3, #1
 8007984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798c:	bfa4      	itt	ge
 800798e:	4643      	movge	r3, r8
 8007990:	46a0      	movge	r8, r4
 8007992:	4630      	mov	r0, r6
 8007994:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007998:	bfa6      	itte	ge
 800799a:	461c      	movge	r4, r3
 800799c:	2500      	movge	r5, #0
 800799e:	2501      	movlt	r5, #1
 80079a0:	f7ff fd40 	bl	8007424 <_Balloc>
 80079a4:	b920      	cbnz	r0, 80079b0 <__mdiff+0x5c>
 80079a6:	4b2e      	ldr	r3, [pc, #184]	; (8007a60 <__mdiff+0x10c>)
 80079a8:	4602      	mov	r2, r0
 80079aa:	f240 2145 	movw	r1, #581	; 0x245
 80079ae:	e7e5      	b.n	800797c <__mdiff+0x28>
 80079b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079b4:	6926      	ldr	r6, [r4, #16]
 80079b6:	60c5      	str	r5, [r0, #12]
 80079b8:	f104 0914 	add.w	r9, r4, #20
 80079bc:	f108 0514 	add.w	r5, r8, #20
 80079c0:	f100 0e14 	add.w	lr, r0, #20
 80079c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80079c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079cc:	f108 0210 	add.w	r2, r8, #16
 80079d0:	46f2      	mov	sl, lr
 80079d2:	2100      	movs	r1, #0
 80079d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80079d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079dc:	fa11 f88b 	uxtah	r8, r1, fp
 80079e0:	b299      	uxth	r1, r3
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	eba8 0801 	sub.w	r8, r8, r1
 80079e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079f0:	fa1f f888 	uxth.w	r8, r8
 80079f4:	1419      	asrs	r1, r3, #16
 80079f6:	454e      	cmp	r6, r9
 80079f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079fc:	f84a 3b04 	str.w	r3, [sl], #4
 8007a00:	d8e8      	bhi.n	80079d4 <__mdiff+0x80>
 8007a02:	1b33      	subs	r3, r6, r4
 8007a04:	3b15      	subs	r3, #21
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	3415      	adds	r4, #21
 8007a0e:	42a6      	cmp	r6, r4
 8007a10:	bf38      	it	cc
 8007a12:	2304      	movcc	r3, #4
 8007a14:	441d      	add	r5, r3
 8007a16:	4473      	add	r3, lr
 8007a18:	469e      	mov	lr, r3
 8007a1a:	462e      	mov	r6, r5
 8007a1c:	4566      	cmp	r6, ip
 8007a1e:	d30e      	bcc.n	8007a3e <__mdiff+0xea>
 8007a20:	f10c 0203 	add.w	r2, ip, #3
 8007a24:	1b52      	subs	r2, r2, r5
 8007a26:	f022 0203 	bic.w	r2, r2, #3
 8007a2a:	3d03      	subs	r5, #3
 8007a2c:	45ac      	cmp	ip, r5
 8007a2e:	bf38      	it	cc
 8007a30:	2200      	movcc	r2, #0
 8007a32:	4413      	add	r3, r2
 8007a34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a38:	b17a      	cbz	r2, 8007a5a <__mdiff+0x106>
 8007a3a:	6107      	str	r7, [r0, #16]
 8007a3c:	e7a4      	b.n	8007988 <__mdiff+0x34>
 8007a3e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a42:	fa11 f288 	uxtah	r2, r1, r8
 8007a46:	1414      	asrs	r4, r2, #16
 8007a48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a4c:	b292      	uxth	r2, r2
 8007a4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a52:	f84e 2b04 	str.w	r2, [lr], #4
 8007a56:	1421      	asrs	r1, r4, #16
 8007a58:	e7e0      	b.n	8007a1c <__mdiff+0xc8>
 8007a5a:	3f01      	subs	r7, #1
 8007a5c:	e7ea      	b.n	8007a34 <__mdiff+0xe0>
 8007a5e:	bf00      	nop
 8007a60:	080083b8 	.word	0x080083b8
 8007a64:	080083c9 	.word	0x080083c9

08007a68 <__d2b>:
 8007a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	2101      	movs	r1, #1
 8007a70:	ec59 8b10 	vmov	r8, r9, d0
 8007a74:	4616      	mov	r6, r2
 8007a76:	f7ff fcd5 	bl	8007424 <_Balloc>
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	b930      	cbnz	r0, 8007a8c <__d2b+0x24>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <__d2b+0xac>)
 8007a82:	4825      	ldr	r0, [pc, #148]	; (8007b18 <__d2b+0xb0>)
 8007a84:	f240 310f 	movw	r1, #783	; 0x30f
 8007a88:	f000 f914 	bl	8007cb4 <__assert_func>
 8007a8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a94:	bb2d      	cbnz	r5, 8007ae2 <__d2b+0x7a>
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f1b8 0300 	subs.w	r3, r8, #0
 8007a9c:	d026      	beq.n	8007aec <__d2b+0x84>
 8007a9e:	4668      	mov	r0, sp
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	f7ff fd87 	bl	80075b4 <__lo0bits>
 8007aa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007aaa:	b1e8      	cbz	r0, 8007ae8 <__d2b+0x80>
 8007aac:	f1c0 0320 	rsb	r3, r0, #32
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	40c2      	lsrs	r2, r0
 8007ab8:	6163      	str	r3, [r4, #20]
 8007aba:	9201      	str	r2, [sp, #4]
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	61a3      	str	r3, [r4, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf14      	ite	ne
 8007ac4:	2202      	movne	r2, #2
 8007ac6:	2201      	moveq	r2, #1
 8007ac8:	6122      	str	r2, [r4, #16]
 8007aca:	b1bd      	cbz	r5, 8007afc <__d2b+0x94>
 8007acc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ad0:	4405      	add	r5, r0
 8007ad2:	603d      	str	r5, [r7, #0]
 8007ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ad8:	6030      	str	r0, [r6, #0]
 8007ada:	4620      	mov	r0, r4
 8007adc:	b003      	add	sp, #12
 8007ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ae6:	e7d6      	b.n	8007a96 <__d2b+0x2e>
 8007ae8:	6161      	str	r1, [r4, #20]
 8007aea:	e7e7      	b.n	8007abc <__d2b+0x54>
 8007aec:	a801      	add	r0, sp, #4
 8007aee:	f7ff fd61 	bl	80075b4 <__lo0bits>
 8007af2:	9b01      	ldr	r3, [sp, #4]
 8007af4:	6163      	str	r3, [r4, #20]
 8007af6:	3020      	adds	r0, #32
 8007af8:	2201      	movs	r2, #1
 8007afa:	e7e5      	b.n	8007ac8 <__d2b+0x60>
 8007afc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b04:	6038      	str	r0, [r7, #0]
 8007b06:	6918      	ldr	r0, [r3, #16]
 8007b08:	f7ff fd34 	bl	8007574 <__hi0bits>
 8007b0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b10:	e7e2      	b.n	8007ad8 <__d2b+0x70>
 8007b12:	bf00      	nop
 8007b14:	080083b8 	.word	0x080083b8
 8007b18:	080083c9 	.word	0x080083c9

08007b1c <__sflush_r>:
 8007b1c:	898a      	ldrh	r2, [r1, #12]
 8007b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b22:	4605      	mov	r5, r0
 8007b24:	0710      	lsls	r0, r2, #28
 8007b26:	460c      	mov	r4, r1
 8007b28:	d458      	bmi.n	8007bdc <__sflush_r+0xc0>
 8007b2a:	684b      	ldr	r3, [r1, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dc05      	bgt.n	8007b3c <__sflush_r+0x20>
 8007b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	dc02      	bgt.n	8007b3c <__sflush_r+0x20>
 8007b36:	2000      	movs	r0, #0
 8007b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	d0f9      	beq.n	8007b36 <__sflush_r+0x1a>
 8007b42:	2300      	movs	r3, #0
 8007b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b48:	682f      	ldr	r7, [r5, #0]
 8007b4a:	6a21      	ldr	r1, [r4, #32]
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	d032      	beq.n	8007bb6 <__sflush_r+0x9a>
 8007b50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b52:	89a3      	ldrh	r3, [r4, #12]
 8007b54:	075a      	lsls	r2, r3, #29
 8007b56:	d505      	bpl.n	8007b64 <__sflush_r+0x48>
 8007b58:	6863      	ldr	r3, [r4, #4]
 8007b5a:	1ac0      	subs	r0, r0, r3
 8007b5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b5e:	b10b      	cbz	r3, 8007b64 <__sflush_r+0x48>
 8007b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b62:	1ac0      	subs	r0, r0, r3
 8007b64:	2300      	movs	r3, #0
 8007b66:	4602      	mov	r2, r0
 8007b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b6a:	6a21      	ldr	r1, [r4, #32]
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b0      	blx	r6
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	d106      	bne.n	8007b84 <__sflush_r+0x68>
 8007b76:	6829      	ldr	r1, [r5, #0]
 8007b78:	291d      	cmp	r1, #29
 8007b7a:	d82b      	bhi.n	8007bd4 <__sflush_r+0xb8>
 8007b7c:	4a29      	ldr	r2, [pc, #164]	; (8007c24 <__sflush_r+0x108>)
 8007b7e:	410a      	asrs	r2, r1
 8007b80:	07d6      	lsls	r6, r2, #31
 8007b82:	d427      	bmi.n	8007bd4 <__sflush_r+0xb8>
 8007b84:	2200      	movs	r2, #0
 8007b86:	6062      	str	r2, [r4, #4]
 8007b88:	04d9      	lsls	r1, r3, #19
 8007b8a:	6922      	ldr	r2, [r4, #16]
 8007b8c:	6022      	str	r2, [r4, #0]
 8007b8e:	d504      	bpl.n	8007b9a <__sflush_r+0x7e>
 8007b90:	1c42      	adds	r2, r0, #1
 8007b92:	d101      	bne.n	8007b98 <__sflush_r+0x7c>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b903      	cbnz	r3, 8007b9a <__sflush_r+0x7e>
 8007b98:	6560      	str	r0, [r4, #84]	; 0x54
 8007b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9c:	602f      	str	r7, [r5, #0]
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d0c9      	beq.n	8007b36 <__sflush_r+0x1a>
 8007ba2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	d002      	beq.n	8007bb0 <__sflush_r+0x94>
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7ff fb3a 	bl	8007224 <_free_r>
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	6360      	str	r0, [r4, #52]	; 0x34
 8007bb4:	e7c0      	b.n	8007b38 <__sflush_r+0x1c>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b0      	blx	r6
 8007bbc:	1c41      	adds	r1, r0, #1
 8007bbe:	d1c8      	bne.n	8007b52 <__sflush_r+0x36>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0c5      	beq.n	8007b52 <__sflush_r+0x36>
 8007bc6:	2b1d      	cmp	r3, #29
 8007bc8:	d001      	beq.n	8007bce <__sflush_r+0xb2>
 8007bca:	2b16      	cmp	r3, #22
 8007bcc:	d101      	bne.n	8007bd2 <__sflush_r+0xb6>
 8007bce:	602f      	str	r7, [r5, #0]
 8007bd0:	e7b1      	b.n	8007b36 <__sflush_r+0x1a>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd8:	81a3      	strh	r3, [r4, #12]
 8007bda:	e7ad      	b.n	8007b38 <__sflush_r+0x1c>
 8007bdc:	690f      	ldr	r7, [r1, #16]
 8007bde:	2f00      	cmp	r7, #0
 8007be0:	d0a9      	beq.n	8007b36 <__sflush_r+0x1a>
 8007be2:	0793      	lsls	r3, r2, #30
 8007be4:	680e      	ldr	r6, [r1, #0]
 8007be6:	bf08      	it	eq
 8007be8:	694b      	ldreq	r3, [r1, #20]
 8007bea:	600f      	str	r7, [r1, #0]
 8007bec:	bf18      	it	ne
 8007bee:	2300      	movne	r3, #0
 8007bf0:	eba6 0807 	sub.w	r8, r6, r7
 8007bf4:	608b      	str	r3, [r1, #8]
 8007bf6:	f1b8 0f00 	cmp.w	r8, #0
 8007bfa:	dd9c      	ble.n	8007b36 <__sflush_r+0x1a>
 8007bfc:	6a21      	ldr	r1, [r4, #32]
 8007bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c00:	4643      	mov	r3, r8
 8007c02:	463a      	mov	r2, r7
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b0      	blx	r6
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	dc06      	bgt.n	8007c1a <__sflush_r+0xfe>
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	e78e      	b.n	8007b38 <__sflush_r+0x1c>
 8007c1a:	4407      	add	r7, r0
 8007c1c:	eba8 0800 	sub.w	r8, r8, r0
 8007c20:	e7e9      	b.n	8007bf6 <__sflush_r+0xda>
 8007c22:	bf00      	nop
 8007c24:	dfbffffe 	.word	0xdfbffffe

08007c28 <_fflush_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	690b      	ldr	r3, [r1, #16]
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	b913      	cbnz	r3, 8007c38 <_fflush_r+0x10>
 8007c32:	2500      	movs	r5, #0
 8007c34:	4628      	mov	r0, r5
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	b118      	cbz	r0, 8007c42 <_fflush_r+0x1a>
 8007c3a:	6a03      	ldr	r3, [r0, #32]
 8007c3c:	b90b      	cbnz	r3, 8007c42 <_fflush_r+0x1a>
 8007c3e:	f7fe fb7d 	bl	800633c <__sinit>
 8007c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0f3      	beq.n	8007c32 <_fflush_r+0xa>
 8007c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c4c:	07d0      	lsls	r0, r2, #31
 8007c4e:	d404      	bmi.n	8007c5a <_fflush_r+0x32>
 8007c50:	0599      	lsls	r1, r3, #22
 8007c52:	d402      	bmi.n	8007c5a <_fflush_r+0x32>
 8007c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c56:	f7fe fc68 	bl	800652a <__retarget_lock_acquire_recursive>
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	f7ff ff5d 	bl	8007b1c <__sflush_r>
 8007c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c64:	07da      	lsls	r2, r3, #31
 8007c66:	4605      	mov	r5, r0
 8007c68:	d4e4      	bmi.n	8007c34 <_fflush_r+0xc>
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	059b      	lsls	r3, r3, #22
 8007c6e:	d4e1      	bmi.n	8007c34 <_fflush_r+0xc>
 8007c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c72:	f7fe fc5b 	bl	800652c <__retarget_lock_release_recursive>
 8007c76:	e7dd      	b.n	8007c34 <_fflush_r+0xc>

08007c78 <_sbrk_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d06      	ldr	r5, [pc, #24]	; (8007c94 <_sbrk_r+0x1c>)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	602b      	str	r3, [r5, #0]
 8007c84:	f7f9 fd9c 	bl	80017c0 <_sbrk>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_sbrk_r+0x1a>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_sbrk_r+0x1a>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	20000498 	.word	0x20000498

08007c98 <memcpy>:
 8007c98:	440a      	add	r2, r1
 8007c9a:	4291      	cmp	r1, r2
 8007c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ca0:	d100      	bne.n	8007ca4 <memcpy+0xc>
 8007ca2:	4770      	bx	lr
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cae:	4291      	cmp	r1, r2
 8007cb0:	d1f9      	bne.n	8007ca6 <memcpy+0xe>
 8007cb2:	bd10      	pop	{r4, pc}

08007cb4 <__assert_func>:
 8007cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <__assert_func+0x2c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	68d8      	ldr	r0, [r3, #12]
 8007cc2:	b14c      	cbz	r4, 8007cd8 <__assert_func+0x24>
 8007cc4:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <__assert_func+0x30>)
 8007cc6:	9100      	str	r1, [sp, #0]
 8007cc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ccc:	4906      	ldr	r1, [pc, #24]	; (8007ce8 <__assert_func+0x34>)
 8007cce:	462b      	mov	r3, r5
 8007cd0:	f000 f844 	bl	8007d5c <fiprintf>
 8007cd4:	f000 f854 	bl	8007d80 <abort>
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <__assert_func+0x38>)
 8007cda:	461c      	mov	r4, r3
 8007cdc:	e7f3      	b.n	8007cc6 <__assert_func+0x12>
 8007cde:	bf00      	nop
 8007ce0:	20000064 	.word	0x20000064
 8007ce4:	0800852e 	.word	0x0800852e
 8007ce8:	0800853b 	.word	0x0800853b
 8007cec:	08008569 	.word	0x08008569

08007cf0 <_calloc_r>:
 8007cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cf2:	fba1 2402 	umull	r2, r4, r1, r2
 8007cf6:	b94c      	cbnz	r4, 8007d0c <_calloc_r+0x1c>
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	9201      	str	r2, [sp, #4]
 8007cfc:	f7ff fb06 	bl	800730c <_malloc_r>
 8007d00:	9a01      	ldr	r2, [sp, #4]
 8007d02:	4605      	mov	r5, r0
 8007d04:	b930      	cbnz	r0, 8007d14 <_calloc_r+0x24>
 8007d06:	4628      	mov	r0, r5
 8007d08:	b003      	add	sp, #12
 8007d0a:	bd30      	pop	{r4, r5, pc}
 8007d0c:	220c      	movs	r2, #12
 8007d0e:	6002      	str	r2, [r0, #0]
 8007d10:	2500      	movs	r5, #0
 8007d12:	e7f8      	b.n	8007d06 <_calloc_r+0x16>
 8007d14:	4621      	mov	r1, r4
 8007d16:	f7fe fb8a 	bl	800642e <memset>
 8007d1a:	e7f4      	b.n	8007d06 <_calloc_r+0x16>

08007d1c <__ascii_mbtowc>:
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	b901      	cbnz	r1, 8007d22 <__ascii_mbtowc+0x6>
 8007d20:	a901      	add	r1, sp, #4
 8007d22:	b142      	cbz	r2, 8007d36 <__ascii_mbtowc+0x1a>
 8007d24:	b14b      	cbz	r3, 8007d3a <__ascii_mbtowc+0x1e>
 8007d26:	7813      	ldrb	r3, [r2, #0]
 8007d28:	600b      	str	r3, [r1, #0]
 8007d2a:	7812      	ldrb	r2, [r2, #0]
 8007d2c:	1e10      	subs	r0, r2, #0
 8007d2e:	bf18      	it	ne
 8007d30:	2001      	movne	r0, #1
 8007d32:	b002      	add	sp, #8
 8007d34:	4770      	bx	lr
 8007d36:	4610      	mov	r0, r2
 8007d38:	e7fb      	b.n	8007d32 <__ascii_mbtowc+0x16>
 8007d3a:	f06f 0001 	mvn.w	r0, #1
 8007d3e:	e7f8      	b.n	8007d32 <__ascii_mbtowc+0x16>

08007d40 <__ascii_wctomb>:
 8007d40:	b149      	cbz	r1, 8007d56 <__ascii_wctomb+0x16>
 8007d42:	2aff      	cmp	r2, #255	; 0xff
 8007d44:	bf85      	ittet	hi
 8007d46:	238a      	movhi	r3, #138	; 0x8a
 8007d48:	6003      	strhi	r3, [r0, #0]
 8007d4a:	700a      	strbls	r2, [r1, #0]
 8007d4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d50:	bf98      	it	ls
 8007d52:	2001      	movls	r0, #1
 8007d54:	4770      	bx	lr
 8007d56:	4608      	mov	r0, r1
 8007d58:	4770      	bx	lr
	...

08007d5c <fiprintf>:
 8007d5c:	b40e      	push	{r1, r2, r3}
 8007d5e:	b503      	push	{r0, r1, lr}
 8007d60:	4601      	mov	r1, r0
 8007d62:	ab03      	add	r3, sp, #12
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <fiprintf+0x20>)
 8007d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6a:	6800      	ldr	r0, [r0, #0]
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	f000 f837 	bl	8007de0 <_vfiprintf_r>
 8007d72:	b002      	add	sp, #8
 8007d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d78:	b003      	add	sp, #12
 8007d7a:	4770      	bx	lr
 8007d7c:	20000064 	.word	0x20000064

08007d80 <abort>:
 8007d80:	b508      	push	{r3, lr}
 8007d82:	2006      	movs	r0, #6
 8007d84:	f000 fa04 	bl	8008190 <raise>
 8007d88:	2001      	movs	r0, #1
 8007d8a:	f7f9 fca1 	bl	80016d0 <_exit>

08007d8e <__sfputc_r>:
 8007d8e:	6893      	ldr	r3, [r2, #8]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	b410      	push	{r4}
 8007d96:	6093      	str	r3, [r2, #8]
 8007d98:	da08      	bge.n	8007dac <__sfputc_r+0x1e>
 8007d9a:	6994      	ldr	r4, [r2, #24]
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	db01      	blt.n	8007da4 <__sfputc_r+0x16>
 8007da0:	290a      	cmp	r1, #10
 8007da2:	d103      	bne.n	8007dac <__sfputc_r+0x1e>
 8007da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da8:	f000 b934 	b.w	8008014 <__swbuf_r>
 8007dac:	6813      	ldr	r3, [r2, #0]
 8007dae:	1c58      	adds	r0, r3, #1
 8007db0:	6010      	str	r0, [r2, #0]
 8007db2:	7019      	strb	r1, [r3, #0]
 8007db4:	4608      	mov	r0, r1
 8007db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <__sfputs_r>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	460f      	mov	r7, r1
 8007dc2:	4614      	mov	r4, r2
 8007dc4:	18d5      	adds	r5, r2, r3
 8007dc6:	42ac      	cmp	r4, r5
 8007dc8:	d101      	bne.n	8007dce <__sfputs_r+0x12>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	e007      	b.n	8007dde <__sfputs_r+0x22>
 8007dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd2:	463a      	mov	r2, r7
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7ff ffda 	bl	8007d8e <__sfputc_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d1f3      	bne.n	8007dc6 <__sfputs_r+0xa>
 8007dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007de0 <_vfiprintf_r>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	460d      	mov	r5, r1
 8007de6:	b09d      	sub	sp, #116	; 0x74
 8007de8:	4614      	mov	r4, r2
 8007dea:	4698      	mov	r8, r3
 8007dec:	4606      	mov	r6, r0
 8007dee:	b118      	cbz	r0, 8007df8 <_vfiprintf_r+0x18>
 8007df0:	6a03      	ldr	r3, [r0, #32]
 8007df2:	b90b      	cbnz	r3, 8007df8 <_vfiprintf_r+0x18>
 8007df4:	f7fe faa2 	bl	800633c <__sinit>
 8007df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dfa:	07d9      	lsls	r1, r3, #31
 8007dfc:	d405      	bmi.n	8007e0a <_vfiprintf_r+0x2a>
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	059a      	lsls	r2, r3, #22
 8007e02:	d402      	bmi.n	8007e0a <_vfiprintf_r+0x2a>
 8007e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e06:	f7fe fb90 	bl	800652a <__retarget_lock_acquire_recursive>
 8007e0a:	89ab      	ldrh	r3, [r5, #12]
 8007e0c:	071b      	lsls	r3, r3, #28
 8007e0e:	d501      	bpl.n	8007e14 <_vfiprintf_r+0x34>
 8007e10:	692b      	ldr	r3, [r5, #16]
 8007e12:	b99b      	cbnz	r3, 8007e3c <_vfiprintf_r+0x5c>
 8007e14:	4629      	mov	r1, r5
 8007e16:	4630      	mov	r0, r6
 8007e18:	f000 f93a 	bl	8008090 <__swsetup_r>
 8007e1c:	b170      	cbz	r0, 8007e3c <_vfiprintf_r+0x5c>
 8007e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e20:	07dc      	lsls	r4, r3, #31
 8007e22:	d504      	bpl.n	8007e2e <_vfiprintf_r+0x4e>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	b01d      	add	sp, #116	; 0x74
 8007e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2e:	89ab      	ldrh	r3, [r5, #12]
 8007e30:	0598      	lsls	r0, r3, #22
 8007e32:	d4f7      	bmi.n	8007e24 <_vfiprintf_r+0x44>
 8007e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e36:	f7fe fb79 	bl	800652c <__retarget_lock_release_recursive>
 8007e3a:	e7f3      	b.n	8007e24 <_vfiprintf_r+0x44>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e40:	2320      	movs	r3, #32
 8007e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e4a:	2330      	movs	r3, #48	; 0x30
 8007e4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008000 <_vfiprintf_r+0x220>
 8007e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e54:	f04f 0901 	mov.w	r9, #1
 8007e58:	4623      	mov	r3, r4
 8007e5a:	469a      	mov	sl, r3
 8007e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e60:	b10a      	cbz	r2, 8007e66 <_vfiprintf_r+0x86>
 8007e62:	2a25      	cmp	r2, #37	; 0x25
 8007e64:	d1f9      	bne.n	8007e5a <_vfiprintf_r+0x7a>
 8007e66:	ebba 0b04 	subs.w	fp, sl, r4
 8007e6a:	d00b      	beq.n	8007e84 <_vfiprintf_r+0xa4>
 8007e6c:	465b      	mov	r3, fp
 8007e6e:	4622      	mov	r2, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ffa2 	bl	8007dbc <__sfputs_r>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	f000 80a9 	beq.w	8007fd0 <_vfiprintf_r+0x1f0>
 8007e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e80:	445a      	add	r2, fp
 8007e82:	9209      	str	r2, [sp, #36]	; 0x24
 8007e84:	f89a 3000 	ldrb.w	r3, [sl]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80a1 	beq.w	8007fd0 <_vfiprintf_r+0x1f0>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f04f 32ff 	mov.w	r2, #4294967295
 8007e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e98:	f10a 0a01 	add.w	sl, sl, #1
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	9307      	str	r3, [sp, #28]
 8007ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ea6:	4654      	mov	r4, sl
 8007ea8:	2205      	movs	r2, #5
 8007eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eae:	4854      	ldr	r0, [pc, #336]	; (8008000 <_vfiprintf_r+0x220>)
 8007eb0:	f7f8 f996 	bl	80001e0 <memchr>
 8007eb4:	9a04      	ldr	r2, [sp, #16]
 8007eb6:	b9d8      	cbnz	r0, 8007ef0 <_vfiprintf_r+0x110>
 8007eb8:	06d1      	lsls	r1, r2, #27
 8007eba:	bf44      	itt	mi
 8007ebc:	2320      	movmi	r3, #32
 8007ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec2:	0713      	lsls	r3, r2, #28
 8007ec4:	bf44      	itt	mi
 8007ec6:	232b      	movmi	r3, #43	; 0x2b
 8007ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed2:	d015      	beq.n	8007f00 <_vfiprintf_r+0x120>
 8007ed4:	9a07      	ldr	r2, [sp, #28]
 8007ed6:	4654      	mov	r4, sl
 8007ed8:	2000      	movs	r0, #0
 8007eda:	f04f 0c0a 	mov.w	ip, #10
 8007ede:	4621      	mov	r1, r4
 8007ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee4:	3b30      	subs	r3, #48	; 0x30
 8007ee6:	2b09      	cmp	r3, #9
 8007ee8:	d94d      	bls.n	8007f86 <_vfiprintf_r+0x1a6>
 8007eea:	b1b0      	cbz	r0, 8007f1a <_vfiprintf_r+0x13a>
 8007eec:	9207      	str	r2, [sp, #28]
 8007eee:	e014      	b.n	8007f1a <_vfiprintf_r+0x13a>
 8007ef0:	eba0 0308 	sub.w	r3, r0, r8
 8007ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	46a2      	mov	sl, r4
 8007efe:	e7d2      	b.n	8007ea6 <_vfiprintf_r+0xc6>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	1d19      	adds	r1, r3, #4
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	9103      	str	r1, [sp, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfbb      	ittet	lt
 8007f0c:	425b      	neglt	r3, r3
 8007f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f12:	9307      	strge	r3, [sp, #28]
 8007f14:	9307      	strlt	r3, [sp, #28]
 8007f16:	bfb8      	it	lt
 8007f18:	9204      	strlt	r2, [sp, #16]
 8007f1a:	7823      	ldrb	r3, [r4, #0]
 8007f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f1e:	d10c      	bne.n	8007f3a <_vfiprintf_r+0x15a>
 8007f20:	7863      	ldrb	r3, [r4, #1]
 8007f22:	2b2a      	cmp	r3, #42	; 0x2a
 8007f24:	d134      	bne.n	8007f90 <_vfiprintf_r+0x1b0>
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	1d1a      	adds	r2, r3, #4
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	9203      	str	r2, [sp, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bfb8      	it	lt
 8007f32:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f36:	3402      	adds	r4, #2
 8007f38:	9305      	str	r3, [sp, #20]
 8007f3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008010 <_vfiprintf_r+0x230>
 8007f3e:	7821      	ldrb	r1, [r4, #0]
 8007f40:	2203      	movs	r2, #3
 8007f42:	4650      	mov	r0, sl
 8007f44:	f7f8 f94c 	bl	80001e0 <memchr>
 8007f48:	b138      	cbz	r0, 8007f5a <_vfiprintf_r+0x17a>
 8007f4a:	9b04      	ldr	r3, [sp, #16]
 8007f4c:	eba0 000a 	sub.w	r0, r0, sl
 8007f50:	2240      	movs	r2, #64	; 0x40
 8007f52:	4082      	lsls	r2, r0
 8007f54:	4313      	orrs	r3, r2
 8007f56:	3401      	adds	r4, #1
 8007f58:	9304      	str	r3, [sp, #16]
 8007f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5e:	4829      	ldr	r0, [pc, #164]	; (8008004 <_vfiprintf_r+0x224>)
 8007f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f64:	2206      	movs	r2, #6
 8007f66:	f7f8 f93b 	bl	80001e0 <memchr>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d03f      	beq.n	8007fee <_vfiprintf_r+0x20e>
 8007f6e:	4b26      	ldr	r3, [pc, #152]	; (8008008 <_vfiprintf_r+0x228>)
 8007f70:	bb1b      	cbnz	r3, 8007fba <_vfiprintf_r+0x1da>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	3307      	adds	r3, #7
 8007f76:	f023 0307 	bic.w	r3, r3, #7
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	9303      	str	r3, [sp, #12]
 8007f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f80:	443b      	add	r3, r7
 8007f82:	9309      	str	r3, [sp, #36]	; 0x24
 8007f84:	e768      	b.n	8007e58 <_vfiprintf_r+0x78>
 8007f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	e7a6      	b.n	8007ede <_vfiprintf_r+0xfe>
 8007f90:	2300      	movs	r3, #0
 8007f92:	3401      	adds	r4, #1
 8007f94:	9305      	str	r3, [sp, #20]
 8007f96:	4619      	mov	r1, r3
 8007f98:	f04f 0c0a 	mov.w	ip, #10
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa2:	3a30      	subs	r2, #48	; 0x30
 8007fa4:	2a09      	cmp	r2, #9
 8007fa6:	d903      	bls.n	8007fb0 <_vfiprintf_r+0x1d0>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0c6      	beq.n	8007f3a <_vfiprintf_r+0x15a>
 8007fac:	9105      	str	r1, [sp, #20]
 8007fae:	e7c4      	b.n	8007f3a <_vfiprintf_r+0x15a>
 8007fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e7f0      	b.n	8007f9c <_vfiprintf_r+0x1bc>
 8007fba:	ab03      	add	r3, sp, #12
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	462a      	mov	r2, r5
 8007fc0:	4b12      	ldr	r3, [pc, #72]	; (800800c <_vfiprintf_r+0x22c>)
 8007fc2:	a904      	add	r1, sp, #16
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7fd fd67 	bl	8005a98 <_printf_float>
 8007fca:	4607      	mov	r7, r0
 8007fcc:	1c78      	adds	r0, r7, #1
 8007fce:	d1d6      	bne.n	8007f7e <_vfiprintf_r+0x19e>
 8007fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fd2:	07d9      	lsls	r1, r3, #31
 8007fd4:	d405      	bmi.n	8007fe2 <_vfiprintf_r+0x202>
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	059a      	lsls	r2, r3, #22
 8007fda:	d402      	bmi.n	8007fe2 <_vfiprintf_r+0x202>
 8007fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fde:	f7fe faa5 	bl	800652c <__retarget_lock_release_recursive>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	065b      	lsls	r3, r3, #25
 8007fe6:	f53f af1d 	bmi.w	8007e24 <_vfiprintf_r+0x44>
 8007fea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fec:	e71c      	b.n	8007e28 <_vfiprintf_r+0x48>
 8007fee:	ab03      	add	r3, sp, #12
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	462a      	mov	r2, r5
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <_vfiprintf_r+0x22c>)
 8007ff6:	a904      	add	r1, sp, #16
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f7fd fff1 	bl	8005fe0 <_printf_i>
 8007ffe:	e7e4      	b.n	8007fca <_vfiprintf_r+0x1ea>
 8008000:	0800866b 	.word	0x0800866b
 8008004:	08008675 	.word	0x08008675
 8008008:	08005a99 	.word	0x08005a99
 800800c:	08007dbd 	.word	0x08007dbd
 8008010:	08008671 	.word	0x08008671

08008014 <__swbuf_r>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	460e      	mov	r6, r1
 8008018:	4614      	mov	r4, r2
 800801a:	4605      	mov	r5, r0
 800801c:	b118      	cbz	r0, 8008026 <__swbuf_r+0x12>
 800801e:	6a03      	ldr	r3, [r0, #32]
 8008020:	b90b      	cbnz	r3, 8008026 <__swbuf_r+0x12>
 8008022:	f7fe f98b 	bl	800633c <__sinit>
 8008026:	69a3      	ldr	r3, [r4, #24]
 8008028:	60a3      	str	r3, [r4, #8]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	071a      	lsls	r2, r3, #28
 800802e:	d525      	bpl.n	800807c <__swbuf_r+0x68>
 8008030:	6923      	ldr	r3, [r4, #16]
 8008032:	b31b      	cbz	r3, 800807c <__swbuf_r+0x68>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	6922      	ldr	r2, [r4, #16]
 8008038:	1a98      	subs	r0, r3, r2
 800803a:	6963      	ldr	r3, [r4, #20]
 800803c:	b2f6      	uxtb	r6, r6
 800803e:	4283      	cmp	r3, r0
 8008040:	4637      	mov	r7, r6
 8008042:	dc04      	bgt.n	800804e <__swbuf_r+0x3a>
 8008044:	4621      	mov	r1, r4
 8008046:	4628      	mov	r0, r5
 8008048:	f7ff fdee 	bl	8007c28 <_fflush_r>
 800804c:	b9e0      	cbnz	r0, 8008088 <__swbuf_r+0x74>
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	3b01      	subs	r3, #1
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	6022      	str	r2, [r4, #0]
 800805a:	701e      	strb	r6, [r3, #0]
 800805c:	6962      	ldr	r2, [r4, #20]
 800805e:	1c43      	adds	r3, r0, #1
 8008060:	429a      	cmp	r2, r3
 8008062:	d004      	beq.n	800806e <__swbuf_r+0x5a>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	07db      	lsls	r3, r3, #31
 8008068:	d506      	bpl.n	8008078 <__swbuf_r+0x64>
 800806a:	2e0a      	cmp	r6, #10
 800806c:	d104      	bne.n	8008078 <__swbuf_r+0x64>
 800806e:	4621      	mov	r1, r4
 8008070:	4628      	mov	r0, r5
 8008072:	f7ff fdd9 	bl	8007c28 <_fflush_r>
 8008076:	b938      	cbnz	r0, 8008088 <__swbuf_r+0x74>
 8008078:	4638      	mov	r0, r7
 800807a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800807c:	4621      	mov	r1, r4
 800807e:	4628      	mov	r0, r5
 8008080:	f000 f806 	bl	8008090 <__swsetup_r>
 8008084:	2800      	cmp	r0, #0
 8008086:	d0d5      	beq.n	8008034 <__swbuf_r+0x20>
 8008088:	f04f 37ff 	mov.w	r7, #4294967295
 800808c:	e7f4      	b.n	8008078 <__swbuf_r+0x64>
	...

08008090 <__swsetup_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4b2a      	ldr	r3, [pc, #168]	; (800813c <__swsetup_r+0xac>)
 8008094:	4605      	mov	r5, r0
 8008096:	6818      	ldr	r0, [r3, #0]
 8008098:	460c      	mov	r4, r1
 800809a:	b118      	cbz	r0, 80080a4 <__swsetup_r+0x14>
 800809c:	6a03      	ldr	r3, [r0, #32]
 800809e:	b90b      	cbnz	r3, 80080a4 <__swsetup_r+0x14>
 80080a0:	f7fe f94c 	bl	800633c <__sinit>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080aa:	0718      	lsls	r0, r3, #28
 80080ac:	d422      	bmi.n	80080f4 <__swsetup_r+0x64>
 80080ae:	06d9      	lsls	r1, r3, #27
 80080b0:	d407      	bmi.n	80080c2 <__swsetup_r+0x32>
 80080b2:	2309      	movs	r3, #9
 80080b4:	602b      	str	r3, [r5, #0]
 80080b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	f04f 30ff 	mov.w	r0, #4294967295
 80080c0:	e034      	b.n	800812c <__swsetup_r+0x9c>
 80080c2:	0758      	lsls	r0, r3, #29
 80080c4:	d512      	bpl.n	80080ec <__swsetup_r+0x5c>
 80080c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080c8:	b141      	cbz	r1, 80080dc <__swsetup_r+0x4c>
 80080ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ce:	4299      	cmp	r1, r3
 80080d0:	d002      	beq.n	80080d8 <__swsetup_r+0x48>
 80080d2:	4628      	mov	r0, r5
 80080d4:	f7ff f8a6 	bl	8007224 <_free_r>
 80080d8:	2300      	movs	r3, #0
 80080da:	6363      	str	r3, [r4, #52]	; 0x34
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	2300      	movs	r3, #0
 80080e6:	6063      	str	r3, [r4, #4]
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	6023      	str	r3, [r4, #0]
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f043 0308 	orr.w	r3, r3, #8
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	6923      	ldr	r3, [r4, #16]
 80080f6:	b94b      	cbnz	r3, 800810c <__swsetup_r+0x7c>
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008102:	d003      	beq.n	800810c <__swsetup_r+0x7c>
 8008104:	4621      	mov	r1, r4
 8008106:	4628      	mov	r0, r5
 8008108:	f000 f884 	bl	8008214 <__smakebuf_r>
 800810c:	89a0      	ldrh	r0, [r4, #12]
 800810e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008112:	f010 0301 	ands.w	r3, r0, #1
 8008116:	d00a      	beq.n	800812e <__swsetup_r+0x9e>
 8008118:	2300      	movs	r3, #0
 800811a:	60a3      	str	r3, [r4, #8]
 800811c:	6963      	ldr	r3, [r4, #20]
 800811e:	425b      	negs	r3, r3
 8008120:	61a3      	str	r3, [r4, #24]
 8008122:	6923      	ldr	r3, [r4, #16]
 8008124:	b943      	cbnz	r3, 8008138 <__swsetup_r+0xa8>
 8008126:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800812a:	d1c4      	bne.n	80080b6 <__swsetup_r+0x26>
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	0781      	lsls	r1, r0, #30
 8008130:	bf58      	it	pl
 8008132:	6963      	ldrpl	r3, [r4, #20]
 8008134:	60a3      	str	r3, [r4, #8]
 8008136:	e7f4      	b.n	8008122 <__swsetup_r+0x92>
 8008138:	2000      	movs	r0, #0
 800813a:	e7f7      	b.n	800812c <__swsetup_r+0x9c>
 800813c:	20000064 	.word	0x20000064

08008140 <_raise_r>:
 8008140:	291f      	cmp	r1, #31
 8008142:	b538      	push	{r3, r4, r5, lr}
 8008144:	4604      	mov	r4, r0
 8008146:	460d      	mov	r5, r1
 8008148:	d904      	bls.n	8008154 <_raise_r+0x14>
 800814a:	2316      	movs	r3, #22
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	f04f 30ff 	mov.w	r0, #4294967295
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008156:	b112      	cbz	r2, 800815e <_raise_r+0x1e>
 8008158:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800815c:	b94b      	cbnz	r3, 8008172 <_raise_r+0x32>
 800815e:	4620      	mov	r0, r4
 8008160:	f000 f830 	bl	80081c4 <_getpid_r>
 8008164:	462a      	mov	r2, r5
 8008166:	4601      	mov	r1, r0
 8008168:	4620      	mov	r0, r4
 800816a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800816e:	f000 b817 	b.w	80081a0 <_kill_r>
 8008172:	2b01      	cmp	r3, #1
 8008174:	d00a      	beq.n	800818c <_raise_r+0x4c>
 8008176:	1c59      	adds	r1, r3, #1
 8008178:	d103      	bne.n	8008182 <_raise_r+0x42>
 800817a:	2316      	movs	r3, #22
 800817c:	6003      	str	r3, [r0, #0]
 800817e:	2001      	movs	r0, #1
 8008180:	e7e7      	b.n	8008152 <_raise_r+0x12>
 8008182:	2400      	movs	r4, #0
 8008184:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008188:	4628      	mov	r0, r5
 800818a:	4798      	blx	r3
 800818c:	2000      	movs	r0, #0
 800818e:	e7e0      	b.n	8008152 <_raise_r+0x12>

08008190 <raise>:
 8008190:	4b02      	ldr	r3, [pc, #8]	; (800819c <raise+0xc>)
 8008192:	4601      	mov	r1, r0
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	f7ff bfd3 	b.w	8008140 <_raise_r>
 800819a:	bf00      	nop
 800819c:	20000064 	.word	0x20000064

080081a0 <_kill_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d07      	ldr	r5, [pc, #28]	; (80081c0 <_kill_r+0x20>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	4611      	mov	r1, r2
 80081ac:	602b      	str	r3, [r5, #0]
 80081ae:	f7f9 fa7f 	bl	80016b0 <_kill>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	d102      	bne.n	80081bc <_kill_r+0x1c>
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	b103      	cbz	r3, 80081bc <_kill_r+0x1c>
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	bf00      	nop
 80081c0:	20000498 	.word	0x20000498

080081c4 <_getpid_r>:
 80081c4:	f7f9 ba6c 	b.w	80016a0 <_getpid>

080081c8 <__swhatbuf_r>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	460c      	mov	r4, r1
 80081cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d0:	2900      	cmp	r1, #0
 80081d2:	b096      	sub	sp, #88	; 0x58
 80081d4:	4615      	mov	r5, r2
 80081d6:	461e      	mov	r6, r3
 80081d8:	da0d      	bge.n	80081f6 <__swhatbuf_r+0x2e>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081e0:	f04f 0100 	mov.w	r1, #0
 80081e4:	bf0c      	ite	eq
 80081e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081ea:	2340      	movne	r3, #64	; 0x40
 80081ec:	2000      	movs	r0, #0
 80081ee:	6031      	str	r1, [r6, #0]
 80081f0:	602b      	str	r3, [r5, #0]
 80081f2:	b016      	add	sp, #88	; 0x58
 80081f4:	bd70      	pop	{r4, r5, r6, pc}
 80081f6:	466a      	mov	r2, sp
 80081f8:	f000 f848 	bl	800828c <_fstat_r>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	dbec      	blt.n	80081da <__swhatbuf_r+0x12>
 8008200:	9901      	ldr	r1, [sp, #4]
 8008202:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008206:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800820a:	4259      	negs	r1, r3
 800820c:	4159      	adcs	r1, r3
 800820e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008212:	e7eb      	b.n	80081ec <__swhatbuf_r+0x24>

08008214 <__smakebuf_r>:
 8008214:	898b      	ldrh	r3, [r1, #12]
 8008216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008218:	079d      	lsls	r5, r3, #30
 800821a:	4606      	mov	r6, r0
 800821c:	460c      	mov	r4, r1
 800821e:	d507      	bpl.n	8008230 <__smakebuf_r+0x1c>
 8008220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	6123      	str	r3, [r4, #16]
 8008228:	2301      	movs	r3, #1
 800822a:	6163      	str	r3, [r4, #20]
 800822c:	b002      	add	sp, #8
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	ab01      	add	r3, sp, #4
 8008232:	466a      	mov	r2, sp
 8008234:	f7ff ffc8 	bl	80081c8 <__swhatbuf_r>
 8008238:	9900      	ldr	r1, [sp, #0]
 800823a:	4605      	mov	r5, r0
 800823c:	4630      	mov	r0, r6
 800823e:	f7ff f865 	bl	800730c <_malloc_r>
 8008242:	b948      	cbnz	r0, 8008258 <__smakebuf_r+0x44>
 8008244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008248:	059a      	lsls	r2, r3, #22
 800824a:	d4ef      	bmi.n	800822c <__smakebuf_r+0x18>
 800824c:	f023 0303 	bic.w	r3, r3, #3
 8008250:	f043 0302 	orr.w	r3, r3, #2
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	e7e3      	b.n	8008220 <__smakebuf_r+0xc>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	6020      	str	r0, [r4, #0]
 800825c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008260:	81a3      	strh	r3, [r4, #12]
 8008262:	9b00      	ldr	r3, [sp, #0]
 8008264:	6163      	str	r3, [r4, #20]
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	6120      	str	r0, [r4, #16]
 800826a:	b15b      	cbz	r3, 8008284 <__smakebuf_r+0x70>
 800826c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008270:	4630      	mov	r0, r6
 8008272:	f000 f81d 	bl	80082b0 <_isatty_r>
 8008276:	b128      	cbz	r0, 8008284 <__smakebuf_r+0x70>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	81a3      	strh	r3, [r4, #12]
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	431d      	orrs	r5, r3
 8008288:	81a5      	strh	r5, [r4, #12]
 800828a:	e7cf      	b.n	800822c <__smakebuf_r+0x18>

0800828c <_fstat_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	4d07      	ldr	r5, [pc, #28]	; (80082ac <_fstat_r+0x20>)
 8008290:	2300      	movs	r3, #0
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	4611      	mov	r1, r2
 8008298:	602b      	str	r3, [r5, #0]
 800829a:	f7f9 fa68 	bl	800176e <_fstat>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	d102      	bne.n	80082a8 <_fstat_r+0x1c>
 80082a2:	682b      	ldr	r3, [r5, #0]
 80082a4:	b103      	cbz	r3, 80082a8 <_fstat_r+0x1c>
 80082a6:	6023      	str	r3, [r4, #0]
 80082a8:	bd38      	pop	{r3, r4, r5, pc}
 80082aa:	bf00      	nop
 80082ac:	20000498 	.word	0x20000498

080082b0 <_isatty_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d06      	ldr	r5, [pc, #24]	; (80082cc <_isatty_r+0x1c>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7f9 fa67 	bl	800178e <_isatty>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_isatty_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_isatty_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20000498 	.word	0x20000498

080082d0 <_init>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr

080082dc <_fini>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	bf00      	nop
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr
