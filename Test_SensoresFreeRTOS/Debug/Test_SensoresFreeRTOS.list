
Test_SensoresFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f234  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800f3d8  0800f3d8  0001f3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f84c  0800f84c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f84c  0800f84c  0001f84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f854  0800f854  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f854  0800f854  0001f854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f858  0800f858  0001f858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000495c  200001e0  0800fa3c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b3c  0800fa3c  00024b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1f8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041df  00000000  00000000  0003d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  000415e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  00042f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000063ba  00000000  00000000  00044728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f025  00000000  00000000  0004aae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a77a2  00000000  00000000  00069b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001112a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad0  00000000  00000000  001112fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3bc 	.word	0x0800f3bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800f3bc 	.word	0x0800f3bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	3301      	adds	r3, #1
 800100e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001012:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	429a      	cmp	r2, r3
 800101c:	d007      	beq.n	800102e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	79f9      	ldrb	r1, [r7, #7]
 8001026:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <Uart_isr>:
	else return -1;
}


void Uart_isr (UART_HandleTypeDef *huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	2b00      	cmp	r3, #0
 800105c:	d013      	beq.n	8001086 <Uart_isr+0x4a>
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00e      	beq.n	8001086 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <Uart_isr+0xac>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffbc 	bl	8000ffc <store_char>
        return;
 8001084:	e02c      	b.n	80010e0 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108c:	2b00      	cmp	r3, #0
 800108e:	d027      	beq.n	80010e0 <Uart_isr+0xa4>
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	2b00      	cmp	r3, #0
 8001098:	d022      	beq.n	80010e0 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <Uart_isr+0xb0>)
 800109c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <Uart_isr+0xb0>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d108      	bne.n	80010b8 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80010b6:	e012      	b.n	80010de <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <Uart_isr+0xb0>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <Uart_isr+0xb0>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <Uart_isr+0xb0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	3301      	adds	r3, #1
 80010c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <Uart_isr+0xb0>)
 80010ce:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	7bba      	ldrb	r2, [r7, #14]
 80010dc:	605a      	str	r2, [r3, #4]
    	return;
 80010de:	bf00      	nop
    }
}
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000244 	.word	0x20000244
 80010ec:	200001fc 	.word	0x200001fc

080010f0 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <BH1750_Init+0x34>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 80010fe:	f000 f813 	bl	8001128 <BH1750_Reset>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8001108:	2045      	movs	r0, #69	; 0x45
 800110a:	f000 f859 	bl	80011c0 <BH1750_SetMtreg>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <BH1750_Init+0x28>
			return BH1750_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	e000      	b.n	800111a <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000248 	.word	0x20000248

08001128 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 800112e:	2307      	movs	r3, #7
 8001130:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <BH1750_Reset+0x30>)
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	1dfa      	adds	r2, r7, #7
 8001138:	230a      	movs	r3, #10
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	2146      	movs	r1, #70	; 0x46
 8001140:	f003 fbd0 	bl	80048e4 <HAL_I2C_Master_Transmit>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <BH1750_Reset+0x26>
	//if(HAL_OK == HAL_I2C_Master_Transmit_DMA(bh1750_i2c, BH1750_ADDRESS, &tmp, 1))
		return BH1750_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000248 	.word	0x20000248

0800115c <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_MODE Mode)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af02      	add	r7, sp, #8
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <BH1750_SetMode+0x22>
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <BH1750_SetMode+0x22>
 800117a:	2301      	movs	r3, #1
 800117c:	e018      	b.n	80011b0 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <BH1750_SetMode+0x30>
 8001188:	2301      	movs	r3, #1
 800118a:	e011      	b.n	80011b0 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <BH1750_SetMode+0x5c>)
 8001190:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <BH1750_SetMode+0x60>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	230a      	movs	r3, #10
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	2146      	movs	r1, #70	; 0x46
 80011a0:	f003 fba0 	bl	80048e4 <HAL_I2C_Master_Transmit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <BH1750_SetMode+0x52>
		return BH1750_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000024c 	.word	0x2000024c
 80011bc:	20000248 	.word	0x20000248

080011c0 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b1e      	cmp	r3, #30
 80011ce:	d902      	bls.n	80011d6 <BH1750_SetMtreg+0x16>
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2bff      	cmp	r3, #255	; 0xff
 80011d4:	d101      	bne.n	80011da <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e037      	b.n	800124a <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <BH1750_SetMtreg+0x94>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <BH1750_SetMtreg+0x98>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	230a      	movs	r3, #10
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	2146      	movs	r1, #70	; 0x46
 8001212:	f003 fb67 	bl	80048e4 <HAL_I2C_Master_Transmit>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e012      	b.n	800124a <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <BH1750_SetMtreg+0x98>)
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	230a      	movs	r3, #10
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2146      	movs	r1, #70	; 0x46
 8001236:	f003 fb55 	bl	80048e4 <HAL_I2C_Master_Transmit>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	e000      	b.n	800124a <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000024d 	.word	0x2000024d
 8001258:	20000248 	.word	0x20000248

0800125c <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	float result;

	//if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))

	if(HAL_OK == HAL_I2C_Master_Receive_IT(bh1750_i2c, BH1750_ADDRESS, tmp, 2));
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <BH1750_ReadLight+0x20>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	2302      	movs	r3, #2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <BH1750_ReadLight+0x24>)
 800126c:	2146      	movs	r1, #70	; 0x46
 800126e:	f003 fc37 	bl	8004ae0 <HAL_I2C_Master_Receive_IT>

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
		return BH1750_OK;
	}
	return BH1750_ERROR;*/
	return BH1750_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000248 	.word	0x20000248
 8001280:	20000250 	.word	0x20000250

08001284 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	2319      	movs	r3, #25
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	463b      	mov	r3, r7
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	2288      	movs	r2, #136	; 0x88
 800129c:	21ec      	movs	r1, #236	; 0xec
 800129e:	483a      	ldr	r0, [pc, #232]	; (8001388 <TrimRead+0x104>)
 80012a0:	f003 fdc6 	bl	8004e30 <HAL_I2C_Mem_Read>

	//	// Read NVM from 0xE1 to 0xE7
	//	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	783b      	ldrb	r3, [r7, #0]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b35      	ldr	r3, [pc, #212]	; (800138c <TrimRead+0x108>)
 80012b6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	78bb      	ldrb	r3, [r7, #2]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <TrimRead+0x10c>)
 80012c8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	793b      	ldrb	r3, [r7, #4]
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <TrimRead+0x110>)
 80012da:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <TrimRead+0x114>)
 80012ee:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80012f0:	7a7b      	ldrb	r3, [r7, #9]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <TrimRead+0x118>)
 8001300:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	7abb      	ldrb	r3, [r7, #10]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <TrimRead+0x11c>)
 8001312:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001314:	7b7b      	ldrb	r3, [r7, #13]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21a      	sxth	r2, r3
 800131a:	7b3b      	ldrb	r3, [r7, #12]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <TrimRead+0x120>)
 8001324:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <TrimRead+0x124>)
 8001336:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001338:	7c7b      	ldrb	r3, [r7, #17]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	7c3b      	ldrb	r3, [r7, #16]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21a      	sxth	r2, r3
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <TrimRead+0x128>)
 8001348:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	7cbb      	ldrb	r3, [r7, #18]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <TrimRead+0x12c>)
 800135a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800135c:	7d7b      	ldrb	r3, [r7, #21]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	7d3b      	ldrb	r3, [r7, #20]
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21a      	sxth	r2, r3
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <TrimRead+0x130>)
 800136c:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	7dbb      	ldrb	r3, [r7, #22]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <TrimRead+0x134>)
 800137e:	801a      	strh	r2, [r3, #0]
	//	dig_H2 = (trimdata[26]<<8) | trimdata[25];
	//	dig_H3 = (trimdata[27]);
	//	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
	//	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
	//	dig_H6 = (trimdata[31]);
}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200009e8 	.word	0x200009e8
 800138c:	20000268 	.word	0x20000268
 8001390:	20000270 	.word	0x20000270
 8001394:	20000272 	.word	0x20000272
 8001398:	2000026a 	.word	0x2000026a
 800139c:	20000274 	.word	0x20000274
 80013a0:	20000276 	.word	0x20000276
 80013a4:	20000278 	.word	0x20000278
 80013a8:	2000027a 	.word	0x2000027a
 80013ac:	2000027c 	.word	0x2000027c
 80013b0:	2000027e 	.word	0x2000027e
 80013b4:	20000280 	.word	0x20000280
 80013b8:	20000282 	.word	0x20000282

080013bc <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af04      	add	r7, sp, #16
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	4603      	mov	r3, r0
 80013d0:	71bb      	strb	r3, [r7, #6]
 80013d2:	460b      	mov	r3, r1
 80013d4:	717b      	strb	r3, [r7, #5]
 80013d6:	4613      	mov	r3, r2
 80013d8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80013da:	f7ff ff53 	bl	8001284 <TrimRead>


	uint8_t datatowrite = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80013e6:	23b6      	movs	r3, #182	; 0xb6
 80013e8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	2301      	movs	r3, #1
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	f107 030f 	add.w	r3, r7, #15
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	22e0      	movs	r2, #224	; 0xe0
 80013fe:	21ec      	movs	r1, #236	; 0xec
 8001400:	4841      	ldr	r0, [pc, #260]	; (8001508 <BME280_Config+0x14c>)
 8001402:	f003 fc1b 	bl	8004c3c <HAL_I2C_Mem_Write>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <BME280_Config+0x56>
	{
		return -1;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	e075      	b.n	80014fe <BME280_Config+0x142>
	}

	HAL_Delay (100);
 8001412:	2064      	movs	r0, #100	; 0x64
 8001414:	f001 fe7c 	bl	8003110 <HAL_Delay>
		return -1;
	}
	*/ //BMP280 no sensa humedad

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800141c:	015b      	lsls	r3, r3, #5
 800141e:	b25a      	sxtb	r2, r3
 8001420:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	b25b      	sxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2301      	movs	r3, #1
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	f107 030f 	add.w	r3, r7, #15
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	22f5      	movs	r2, #245	; 0xf5
 8001444:	21ec      	movs	r1, #236	; 0xec
 8001446:	4830      	ldr	r0, [pc, #192]	; (8001508 <BME280_Config+0x14c>)
 8001448:	f003 fbf8 	bl	8004c3c <HAL_I2C_Mem_Write>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <BME280_Config+0x9c>
	{
		return -1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e052      	b.n	80014fe <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8001458:	2064      	movs	r0, #100	; 0x64
 800145a:	f001 fe59 	bl	8003110 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	2301      	movs	r3, #1
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	f107 030e 	add.w	r3, r7, #14
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	22f5      	movs	r2, #245	; 0xf5
 8001472:	21ec      	movs	r1, #236	; 0xec
 8001474:	4824      	ldr	r0, [pc, #144]	; (8001508 <BME280_Config+0x14c>)
 8001476:	f003 fcdb 	bl	8004e30 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800147a:	7bba      	ldrb	r2, [r7, #14]
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	429a      	cmp	r2, r3
 8001480:	d002      	beq.n	8001488 <BME280_Config+0xcc>
	{
		return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e03a      	b.n	80014fe <BME280_Config+0x142>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	015b      	lsls	r3, r3, #5
 800148c:	b25a      	sxtb	r2, r3
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	b25b      	sxtb	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b25a      	sxtb	r2, r3
 8001498:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80014a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	f107 030f 	add.w	r3, r7, #15
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	22f4      	movs	r2, #244	; 0xf4
 80014b8:	21ec      	movs	r1, #236	; 0xec
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <BME280_Config+0x14c>)
 80014bc:	f003 fbbe 	bl	8004c3c <HAL_I2C_Mem_Write>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <BME280_Config+0x110>
	{
		return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e018      	b.n	80014fe <BME280_Config+0x142>
	}
	HAL_Delay (100);
 80014cc:	2064      	movs	r0, #100	; 0x64
 80014ce:	f001 fe1f 	bl	8003110 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2301      	movs	r3, #1
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	f107 030e 	add.w	r3, r7, #14
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	22f4      	movs	r2, #244	; 0xf4
 80014e6:	21ec      	movs	r1, #236	; 0xec
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <BME280_Config+0x14c>)
 80014ea:	f003 fca1 	bl	8004e30 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80014ee:	7bba      	ldrb	r2, [r7, #14]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d002      	beq.n	80014fc <BME280_Config+0x140>
	{
		return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e000      	b.n	80014fe <BME280_Config+0x142>
	}

	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	200009e8 	.word	0x200009e8

0800150c <BMEReadRaw>:


int BMEReadRaw(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af02      	add	r7, sp, #8
	 * Si trato de leer el chip ID de alguna forma no bloqueante (IT, DMA, ...) no lee bien
	 * despues los datos, no se porque. Entonces hardcodeo que estoy comunicandome bien con el
	 * chip para poder levantar los datos crudos y anda bien.
	 */

	chipID = 0x58;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <BMEReadRaw+0x38>)
 8001514:	2258      	movs	r2, #88	; 0x58
 8001516:	701a      	strb	r2, [r3, #0]
	if (chipID == 0x58) // original era 0x60 pero en BMP280 es 0x58
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <BMEReadRaw+0x38>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b58      	cmp	r3, #88	; 0x58
 800151e:	d10b      	bne.n	8001538 <BMEReadRaw+0x2c>
	{
		// Read the Registers 0xF7 to 0xFE
		//HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
		//MemRxCallback_Function= READ_RAW_DATA;
		HAL_I2C_Mem_Read_IT(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8);
 8001520:	2308      	movs	r3, #8
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <BMEReadRaw+0x3c>)
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	22f7      	movs	r2, #247	; 0xf7
 800152c:	21ec      	movs	r1, #236	; 0xec
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <BMEReadRaw+0x40>)
 8001530:	f003 fea4 	bl	800527c <HAL_I2C_Mem_Read_IT>
		 *//*
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
		hRaw = (RawData[6]<<8)|(RawData[7]);
*/
		return 0;
 8001534:	2300      	movs	r3, #0
 8001536:	e001      	b.n	800153c <BMEReadRaw+0x30>
	}

	else return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000252 	.word	0x20000252
 8001548:	20000260 	.word	0x20000260
 800154c:	200009e8 	.word	0x200009e8

08001550 <BMP280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
//BMP280_S32_t t_fine;
BMP280_S32_t BMP280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	10da      	asrs	r2, r3, #3
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <BMP280_compensate_T_int32+0x74>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <BMP280_compensate_T_int32+0x78>)
 8001566:	f9b2 2000 	ldrsh.w	r2, [r2]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	12db      	asrs	r3, r3, #11
 8001570:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	111b      	asrs	r3, r3, #4
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <BMP280_compensate_T_int32+0x74>)
 8001578:	8812      	ldrh	r2, [r2, #0]
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	1112      	asrs	r2, r2, #4
 8001580:	4910      	ldr	r1, [pc, #64]	; (80015c4 <BMP280_compensate_T_int32+0x74>)
 8001582:	8809      	ldrh	r1, [r1, #0]
 8001584:	1a52      	subs	r2, r2, r1
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	131b      	asrs	r3, r3, #12
 800158c:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <BMP280_compensate_T_int32+0x7c>)
 800158e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	139b      	asrs	r3, r3, #14
 8001598:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4413      	add	r3, r2
 80015a0:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <BMP280_compensate_T_int32+0x80>)
 80015a2:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <BMP280_compensate_T_int32+0x80>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3380      	adds	r3, #128	; 0x80
 80015b0:	121b      	asrs	r3, r3, #8
 80015b2:	60fb      	str	r3, [r7, #12]
	return T;
 80015b4:	68fb      	ldr	r3, [r7, #12]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000268 	.word	0x20000268
 80015c8:	20000270 	.word	0x20000270
 80015cc:	20000272 	.word	0x20000272
 80015d0:	2000028c 	.word	0x2000028c

080015d4 <BMP280_compensate_P_int64>:
}

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t BMP280_compensate_P_int64(BMP280_S32_t adc_P)
{
 80015d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015d8:	b0ca      	sub	sp, #296	; 0x128
 80015da:	af00      	add	r7, sp, #0
 80015dc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 80015e0:	4baf      	ldr	r3, [pc, #700]	; (80018a0 <BMP280_compensate_P_int64+0x2cc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	17da      	asrs	r2, r3, #31
 80015e6:	461c      	mov	r4, r3
 80015e8:	4615      	mov	r5, r2
 80015ea:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015ee:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015f2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 80015f6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015fe:	fb03 f102 	mul.w	r1, r3, r2
 8001602:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001606:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	18ca      	adds	r2, r1, r3
 8001610:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001614:	fba3 8903 	umull	r8, r9, r3, r3
 8001618:	eb02 0309 	add.w	r3, r2, r9
 800161c:	4699      	mov	r9, r3
 800161e:	4ba1      	ldr	r3, [pc, #644]	; (80018a4 <BMP280_compensate_P_int64+0x2d0>)
 8001620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001624:	b21b      	sxth	r3, r3
 8001626:	17da      	asrs	r2, r3, #31
 8001628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800162c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001630:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001634:	4603      	mov	r3, r0
 8001636:	fb03 f209 	mul.w	r2, r3, r9
 800163a:	460b      	mov	r3, r1
 800163c:	fb08 f303 	mul.w	r3, r8, r3
 8001640:	4413      	add	r3, r2
 8001642:	4602      	mov	r2, r0
 8001644:	fba8 1202 	umull	r1, r2, r8, r2
 8001648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800164c:	460a      	mov	r2, r1
 800164e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001656:	4413      	add	r3, r2
 8001658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800165c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001660:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001664:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 8001668:	4b8f      	ldr	r3, [pc, #572]	; (80018a8 <BMP280_compensate_P_int64+0x2d4>)
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	b21b      	sxth	r3, r3
 8001670:	17da      	asrs	r2, r3, #31
 8001672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001676:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800167a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800167e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001682:	462a      	mov	r2, r5
 8001684:	fb02 f203 	mul.w	r2, r2, r3
 8001688:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800168c:	4621      	mov	r1, r4
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	441a      	add	r2, r3
 8001694:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001698:	4621      	mov	r1, r4
 800169a:	fba3 1301 	umull	r1, r3, r3, r1
 800169e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016a2:	460b      	mov	r3, r1
 80016a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80016a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80016be:	462b      	mov	r3, r5
 80016c0:	0459      	lsls	r1, r3, #17
 80016c2:	4623      	mov	r3, r4
 80016c4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80016c8:	4623      	mov	r3, r4
 80016ca:	0458      	lsls	r0, r3, #17
 80016cc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016d0:	1814      	adds	r4, r2, r0
 80016d2:	643c      	str	r4, [r7, #64]	; 0x40
 80016d4:	414b      	adcs	r3, r1
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
 80016d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 80016e0:	4b72      	ldr	r3, [pc, #456]	; (80018ac <BMP280_compensate_P_int64+0x2d8>)
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	17da      	asrs	r2, r3, #31
 80016ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016ee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016f2:	f04f 0000 	mov.w	r0, #0
 80016f6:	f04f 0100 	mov.w	r1, #0
 80016fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016fe:	00d9      	lsls	r1, r3, #3
 8001700:	2000      	movs	r0, #0
 8001702:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001706:	1814      	adds	r4, r2, r0
 8001708:	63bc      	str	r4, [r7, #56]	; 0x38
 800170a:	414b      	adcs	r3, r1
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800170e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001712:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 8001716:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800171a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800171e:	fb03 f102 	mul.w	r1, r3, r2
 8001722:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001726:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	18ca      	adds	r2, r1, r3
 8001730:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001734:	fba3 1303 	umull	r1, r3, r3, r3
 8001738:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800173c:	460b      	mov	r3, r1
 800173e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001746:	18d3      	adds	r3, r2, r3
 8001748:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800174c:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <BMP280_compensate_P_int64+0x2dc>)
 800174e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001752:	b21b      	sxth	r3, r3
 8001754:	17da      	asrs	r2, r3, #31
 8001756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800175a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800175e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001762:	462b      	mov	r3, r5
 8001764:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001768:	4642      	mov	r2, r8
 800176a:	fb02 f203 	mul.w	r2, r2, r3
 800176e:	464b      	mov	r3, r9
 8001770:	4621      	mov	r1, r4
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	4622      	mov	r2, r4
 800177a:	4641      	mov	r1, r8
 800177c:	fba2 1201 	umull	r1, r2, r2, r1
 8001780:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001784:	460a      	mov	r2, r1
 8001786:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800178a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800178e:	4413      	add	r3, r2
 8001790:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	f04f 0100 	mov.w	r1, #0
 800179c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80017a0:	4623      	mov	r3, r4
 80017a2:	0a18      	lsrs	r0, r3, #8
 80017a4:	462b      	mov	r3, r5
 80017a6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017aa:	462b      	mov	r3, r5
 80017ac:	1219      	asrs	r1, r3, #8
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <BMP280_compensate_P_int64+0x2e0>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	17da      	asrs	r2, r3, #31
 80017b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017c4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80017c8:	464a      	mov	r2, r9
 80017ca:	fb02 f203 	mul.w	r2, r2, r3
 80017ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017d2:	4644      	mov	r4, r8
 80017d4:	fb04 f303 	mul.w	r3, r4, r3
 80017d8:	441a      	add	r2, r3
 80017da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017de:	4644      	mov	r4, r8
 80017e0:	fba3 4304 	umull	r4, r3, r3, r4
 80017e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017e8:	4623      	mov	r3, r4
 80017ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001804:	464c      	mov	r4, r9
 8001806:	0323      	lsls	r3, r4, #12
 8001808:	4644      	mov	r4, r8
 800180a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800180e:	4644      	mov	r4, r8
 8001810:	0322      	lsls	r2, r4, #12
 8001812:	1884      	adds	r4, r0, r2
 8001814:	633c      	str	r4, [r7, #48]	; 0x30
 8001816:	eb41 0303 	adc.w	r3, r1, r3
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
 800181c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001820:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8001824:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001828:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800182c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001830:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <BMP280_compensate_P_int64+0x2e4>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	2200      	movs	r2, #0
 800183c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001844:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001848:	462b      	mov	r3, r5
 800184a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800184e:	4642      	mov	r2, r8
 8001850:	fb02 f203 	mul.w	r2, r2, r3
 8001854:	464b      	mov	r3, r9
 8001856:	4621      	mov	r1, r4
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	4622      	mov	r2, r4
 8001860:	4641      	mov	r1, r8
 8001862:	fba2 1201 	umull	r1, r2, r2, r1
 8001866:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800186a:	460a      	mov	r2, r1
 800186c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001870:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001874:	4413      	add	r3, r2
 8001876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001886:	4629      	mov	r1, r5
 8001888:	104a      	asrs	r2, r1, #1
 800188a:	4629      	mov	r1, r5
 800188c:	17cb      	asrs	r3, r1, #31
 800188e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 8001892:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001896:	4313      	orrs	r3, r2
 8001898:	d110      	bne.n	80018bc <BMP280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 800189a:	2300      	movs	r3, #0
 800189c:	e154      	b.n	8001b48 <BMP280_compensate_P_int64+0x574>
 800189e:	bf00      	nop
 80018a0:	2000028c 	.word	0x2000028c
 80018a4:	2000027c 	.word	0x2000027c
 80018a8:	2000027a 	.word	0x2000027a
 80018ac:	20000278 	.word	0x20000278
 80018b0:	20000276 	.word	0x20000276
 80018b4:	20000274 	.word	0x20000274
 80018b8:	2000026a 	.word	0x2000026a

	p = 1048576-adc_P;
 80018bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018c0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018c4:	17da      	asrs	r2, r3, #31
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80018ce:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80018d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018d6:	105b      	asrs	r3, r3, #1
 80018d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018e0:	07db      	lsls	r3, r3, #31
 80018e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018ea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018ee:	4621      	mov	r1, r4
 80018f0:	1a89      	subs	r1, r1, r2
 80018f2:	67b9      	str	r1, [r7, #120]	; 0x78
 80018f4:	4629      	mov	r1, r5
 80018f6:	eb61 0303 	sbc.w	r3, r1, r3
 80018fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018fc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001900:	4622      	mov	r2, r4
 8001902:	462b      	mov	r3, r5
 8001904:	1891      	adds	r1, r2, r2
 8001906:	6239      	str	r1, [r7, #32]
 8001908:	415b      	adcs	r3, r3
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
 800190c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001910:	4621      	mov	r1, r4
 8001912:	1851      	adds	r1, r2, r1
 8001914:	61b9      	str	r1, [r7, #24]
 8001916:	4629      	mov	r1, r5
 8001918:	414b      	adcs	r3, r1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001928:	4649      	mov	r1, r9
 800192a:	018b      	lsls	r3, r1, #6
 800192c:	4641      	mov	r1, r8
 800192e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001932:	4641      	mov	r1, r8
 8001934:	018a      	lsls	r2, r1, #6
 8001936:	4641      	mov	r1, r8
 8001938:	1889      	adds	r1, r1, r2
 800193a:	6139      	str	r1, [r7, #16]
 800193c:	4649      	mov	r1, r9
 800193e:	eb43 0101 	adc.w	r1, r3, r1
 8001942:	6179      	str	r1, [r7, #20]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001950:	4649      	mov	r1, r9
 8001952:	008b      	lsls	r3, r1, #2
 8001954:	4641      	mov	r1, r8
 8001956:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800195a:	4641      	mov	r1, r8
 800195c:	008a      	lsls	r2, r1, #2
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	4603      	mov	r3, r0
 8001964:	4622      	mov	r2, r4
 8001966:	189b      	adds	r3, r3, r2
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	460b      	mov	r3, r1
 800196c:	462a      	mov	r2, r5
 800196e:	eb42 0303 	adc.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001980:	4649      	mov	r1, r9
 8001982:	008b      	lsls	r3, r1, #2
 8001984:	4641      	mov	r1, r8
 8001986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800198a:	4641      	mov	r1, r8
 800198c:	008a      	lsls	r2, r1, #2
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	4603      	mov	r3, r0
 8001994:	4622      	mov	r2, r4
 8001996:	189b      	adds	r3, r3, r2
 8001998:	673b      	str	r3, [r7, #112]	; 0x70
 800199a:	462b      	mov	r3, r5
 800199c:	460a      	mov	r2, r1
 800199e:	eb42 0303 	adc.w	r3, r2, r3
 80019a2:	677b      	str	r3, [r7, #116]	; 0x74
 80019a4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80019ac:	f7ff f954 	bl	8000c58 <__aeabi_ldivmod>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80019b8:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <BMP280_compensate_P_int64+0x580>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	17da      	asrs	r2, r3, #31
 80019c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80019c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019c6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	0b50      	lsrs	r0, r2, #13
 80019d4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019d8:	1359      	asrs	r1, r3, #13
 80019da:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019de:	462b      	mov	r3, r5
 80019e0:	fb00 f203 	mul.w	r2, r0, r3
 80019e4:	4623      	mov	r3, r4
 80019e6:	fb03 f301 	mul.w	r3, r3, r1
 80019ea:	4413      	add	r3, r2
 80019ec:	4622      	mov	r2, r4
 80019ee:	fba2 1200 	umull	r1, r2, r2, r0
 80019f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019f6:	460a      	mov	r2, r1
 80019f8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001a00:	4413      	add	r3, r2
 8001a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001a0a:	f04f 0000 	mov.w	r0, #0
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	0b50      	lsrs	r0, r2, #13
 8001a14:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a18:	1359      	asrs	r1, r3, #13
 8001a1a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001a1e:	462b      	mov	r3, r5
 8001a20:	fb00 f203 	mul.w	r2, r0, r3
 8001a24:	4623      	mov	r3, r4
 8001a26:	fb03 f301 	mul.w	r3, r3, r1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	fba2 1200 	umull	r1, r2, r2, r0
 8001a32:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001a36:	460a      	mov	r2, r1
 8001a38:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a3c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a40:	4413      	add	r3, r2
 8001a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a52:	4621      	mov	r1, r4
 8001a54:	0e4a      	lsrs	r2, r1, #25
 8001a56:	4629      	mov	r1, r5
 8001a58:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	164b      	asrs	r3, r1, #25
 8001a60:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 8001a64:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <BMP280_compensate_P_int64+0x584>)
 8001a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	17da      	asrs	r2, r3, #31
 8001a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a70:	667a      	str	r2, [r7, #100]	; 0x64
 8001a72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a7a:	462a      	mov	r2, r5
 8001a7c:	fb02 f203 	mul.w	r2, r2, r3
 8001a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a84:	4621      	mov	r1, r4
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a90:	4621      	mov	r1, r4
 8001a92:	fba2 1201 	umull	r1, r2, r2, r1
 8001a96:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001aa0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	0cca      	lsrs	r2, r1, #19
 8001aba:	4629      	mov	r1, r5
 8001abc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	14cb      	asrs	r3, r1, #19
 8001ac4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 8001ac8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001acc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ad0:	1884      	adds	r4, r0, r2
 8001ad2:	65bc      	str	r4, [r7, #88]	; 0x58
 8001ad4:	eb41 0303 	adc.w	r3, r1, r3
 8001ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ada:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ade:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	1889      	adds	r1, r1, r2
 8001ae6:	6539      	str	r1, [r7, #80]	; 0x50
 8001ae8:	4629      	mov	r1, r5
 8001aea:	eb43 0101 	adc.w	r1, r3, r1
 8001aee:	6579      	str	r1, [r7, #84]	; 0x54
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001afc:	4623      	mov	r3, r4
 8001afe:	0a18      	lsrs	r0, r3, #8
 8001b00:	462b      	mov	r3, r5
 8001b02:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b06:	462b      	mov	r3, r5
 8001b08:	1219      	asrs	r1, r3, #8
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <BMP280_compensate_P_int64+0x588>)
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	17da      	asrs	r2, r3, #31
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001b24:	464c      	mov	r4, r9
 8001b26:	0123      	lsls	r3, r4, #4
 8001b28:	4644      	mov	r4, r8
 8001b2a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b2e:	4644      	mov	r4, r8
 8001b30:	0122      	lsls	r2, r4, #4
 8001b32:	1884      	adds	r4, r0, r2
 8001b34:	603c      	str	r4, [r7, #0]
 8001b36:	eb41 0303 	adc.w	r3, r1, r3
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b40:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110

	return (BMP280_U32_t)p;
 8001b44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b54:	20000282 	.word	0x20000282
 8001b58:	20000280 	.word	0x20000280
 8001b5c:	2000027e 	.word	0x2000027e

08001b60 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <bme280_compensate_H_int32+0xbc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b70:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	039a      	lsls	r2, r3, #14
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <bme280_compensate_H_int32+0xc0>)
 8001b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7c:	051b      	lsls	r3, r3, #20
 8001b7e:	1ad2      	subs	r2, r2, r3
 8001b80:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <bme280_compensate_H_int32+0xc4>)
 8001b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b86:	4619      	mov	r1, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b94:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b96:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <bme280_compensate_H_int32+0xc8>)
 8001b98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b9c:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001ba4:	1292      	asrs	r2, r2, #10
 8001ba6:	4921      	ldr	r1, [pc, #132]	; (8001c2c <bme280_compensate_H_int32+0xcc>)
 8001ba8:	8809      	ldrh	r1, [r1, #0]
 8001baa:	4608      	mov	r0, r1
 8001bac:	68f9      	ldr	r1, [r7, #12]
 8001bae:	fb00 f101 	mul.w	r1, r0, r1
 8001bb2:	12c9      	asrs	r1, r1, #11
 8001bb4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001bb8:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001bbc:	1292      	asrs	r2, r2, #10
 8001bbe:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001bc2:	491b      	ldr	r1, [pc, #108]	; (8001c30 <bme280_compensate_H_int32+0xd0>)
 8001bc4:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001bc8:	fb01 f202 	mul.w	r2, r1, r2
 8001bcc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001bd0:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	13db      	asrs	r3, r3, #15
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	13d2      	asrs	r2, r2, #15
 8001be0:	fb02 f303 	mul.w	r3, r2, r3
 8001be4:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <bme280_compensate_H_int32+0xd4>)
 8001be8:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001bee:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bfc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001c04:	bfa8      	it	ge
 8001c06:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001c0a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	131b      	asrs	r3, r3, #12
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	2000028c 	.word	0x2000028c
 8001c20:	20000286 	.word	0x20000286
 8001c24:	20000288 	.word	0x20000288
 8001c28:	2000028a 	.word	0x2000028a
 8001c2c:	2000026e 	.word	0x2000026e
 8001c30:	20000284 	.word	0x20000284
 8001c34:	2000026c 	.word	0x2000026c

08001c38 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c3c:	f7ff fc66 	bl	800150c <BMEReadRaw>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d163      	bne.n	8001d0e <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <BME280_Measure+0xf4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c4e:	d104      	bne.n	8001c5a <BME280_Measure+0x22>
 8001c50:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <BME280_Measure+0xf8>)
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e016      	b.n	8001c88 <BME280_Measure+0x50>
		  else
		  {
			  //Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
			  Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <BME280_Measure+0xf4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fc76 	bl	8001550 <BMP280_compensate_T_int32>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc64 	bl	8000534 <__aeabi_i2d>
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <BME280_Measure+0xfc>)
 8001c72:	f7fe fdf3 	bl	800085c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff9b 	bl	8000bb8 <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <BME280_Measure+0xf8>)
 8001c86:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <BME280_Measure+0x100>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c90:	d104      	bne.n	8001c9c <BME280_Measure+0x64>
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <BME280_Measure+0x104>)
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e016      	b.n	8001cca <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  //Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
			  Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <BME280_Measure+0x100>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc97 	bl	80015d4 <BMP280_compensate_P_int64>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc33 	bl	8000514 <__aeabi_ui2d>
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <BME280_Measure+0x108>)
 8001cb4:	f7fe fdd2 	bl	800085c <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff7a 	bl	8000bb8 <__aeabi_d2f>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <BME280_Measure+0x104>)
 8001cc8:	6013      	str	r3, [r2, #0]
			  //Pressure = (BMP280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <BME280_Measure+0x10c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd2:	d104      	bne.n	8001cde <BME280_Measure+0xa6>
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <BME280_Measure+0x110>)
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001cdc:	e023      	b.n	8001d26 <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <BME280_Measure+0x10c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff3c 	bl	8001b60 <bme280_compensate_H_int32>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc12 	bl	8000514 <__aeabi_ui2d>
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <BME280_Measure+0x114>)
 8001cf6:	f7fe fdb1 	bl	800085c <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe ff59 	bl	8000bb8 <__aeabi_d2f>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <BME280_Measure+0x110>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	e00b      	b.n	8001d26 <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <BME280_Measure+0x110>)
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <BME280_Measure+0x110>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <BME280_Measure+0x104>)
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <BME280_Measure+0x104>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <BME280_Measure+0xf8>)
 8001d24:	6013      	str	r3, [r2, #0]
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000254 	.word	0x20000254
 8001d30:	20000c3c 	.word	0x20000c3c
 8001d34:	40590000 	.word	0x40590000
 8001d38:	20000258 	.word	0x20000258
 8001d3c:	20000c40 	.word	0x20000c40
 8001d40:	40700000 	.word	0x40700000
 8001d44:	2000025c 	.word	0x2000025c
 8001d48:	20000c44 	.word	0x20000c44
 8001d4c:	40900000 	.word	0x40900000

08001d50 <CNY70_TIM_Callback>:
uint32_t flancosLeidosCNY70;
uint32_t rpmCNY70;
float windSpeed;

void CNY70_TIM_Callback(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
	rpmCNY70= flancosLeidosCNY70; //Guardo el valor de las rpm en el ultimo minuto
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <CNY70_TIM_Callback+0x1c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <CNY70_TIM_Callback+0x20>)
 8001d5a:	6013      	str	r3, [r2, #0]
	flancosLeidosCNY70= 0; //Reinicio el contador de flancos
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <CNY70_TIM_Callback+0x1c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	20000290 	.word	0x20000290
 8001d70:	20000294 	.word	0x20000294

08001d74 <CNY70_FlancosUp>:

void CNY70_FlancosUp(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	flancosLeidosCNY70++; //Cuento cada revolucion del sensor
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <CNY70_FlancosUp+0x18>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <CNY70_FlancosUp+0x18>)
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	20000290 	.word	0x20000290

08001d90 <CNY70_MedicionVelocidad>:

float CNY70_MedicionVelocidad(uint32_t rpm)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	return ( PI * DIAMETRO_EJE * rpm ) * 3.6/60; //Velocidad en m/s
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe fbbb 	bl	8000514 <__aeabi_ui2d>
 8001d9e:	a313      	add	r3, pc, #76	; (adr r3, 8001dec <CNY70_MedicionVelocidad+0x5c>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc30 	bl	8000608 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	a310      	add	r3, pc, #64	; (adr r3, 8001df4 <CNY70_MedicionVelocidad+0x64>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fc27 	bl	8000608 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <CNY70_MedicionVelocidad+0x58>)
 8001dc8:	f7fe fd48 	bl	800085c <__aeabi_ddiv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe fef0 	bl	8000bb8 <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	ee07 3a90 	vmov	s15, r3
}
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	404e0000 	.word	0x404e0000
 8001dec:	74bc6a80 	.word	0x74bc6a80
 8001df0:	3fd41893 	.word	0x3fd41893
 8001df4:	cccccccd 	.word	0xcccccccd
 8001df8:	400ccccc 	.word	0x400ccccc

08001dfc <MQ135_NivelContaminacion>:

	GasesDetectados[0]= SCA_CO2 * pow(Rs_R0, EXP_CO2); //Concentracion CO2
}

uint32_t MQ135_NivelContaminacion(uint32_t cuentas)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	return cuentas * 100/4095;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2264      	movs	r2, #100	; 0x64
 8001e08:	fb03 f202 	mul.w	r2, r3, r2
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MQ135_NivelContaminacion+0x2c>)
 8001e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e12:	1ad2      	subs	r2, r2, r3
 8001e14:	0852      	lsrs	r2, r2, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	0adb      	lsrs	r3, r3, #11
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	00100101 	.word	0x00100101

08001e2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <vApplicationGetIdleTaskMemory+0x30>)
 8001e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000298 	.word	0x20000298
 8001e5c:	200002ec 	.word	0x200002ec

08001e60 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <vApplicationGetTimerTaskMemory+0x2c>)
 8001e70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <vApplicationGetTimerTaskMemory+0x30>)
 8001e76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	200004ec 	.word	0x200004ec
 8001e90:	20000540 	.word	0x20000540

08001e94 <HAL_I2C_MemRxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	BaseType_t CambioContexto= pdFALSE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
	if(hi2c == &hi2c1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_I2C_MemRxCpltCallback+0x88>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d134      	bne.n	8001f12 <HAL_I2C_MemRxCpltCallback+0x7e>
	{
		/* Calculate the Raw data for the parameters
		* Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		*/
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	031a      	lsls	r2, r3, #12
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8001eb0:	785b      	ldrb	r3, [r3, #1]
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8001eb8:	7892      	ldrb	r2, [r2, #2]
 8001eba:	0912      	lsrs	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <HAL_I2C_MemRxCpltCallback+0x90>)
 8001ec2:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8001ec6:	78db      	ldrb	r3, [r3, #3]
 8001ec8:	031a      	lsls	r2, r3, #12
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8001ecc:	791b      	ldrb	r3, [r3, #4]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8001ed4:	7952      	ldrb	r2, [r2, #5]
 8001ed6:	0912      	lsrs	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	4313      	orrs	r3, r2
 8001edc:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_I2C_MemRxCpltCallback+0x94>)
 8001ede:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8001ee2:	799b      	ldrb	r3, [r3, #6]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8001ee8:	79d2      	ldrb	r2, [r2, #7]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_I2C_MemRxCpltCallback+0x98>)
 8001eee:	6013      	str	r3, [r2, #0]

		xSemaphoreGiveFromISR(SEM_I2C, pdFALSE);
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_I2C_MemRxCpltCallback+0x9c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f008 f981 	bl	800a1fe <xQueueGiveFromISR>
		portYIELD_FROM_ISR(CambioContexto);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_I2C_MemRxCpltCallback+0x7e>
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_I2C_MemRxCpltCallback+0xa0>)
 8001f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f3bf 8f4f 	dsb	sy
 8001f0e:	f3bf 8f6f 	isb	sy
	}
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200009e8 	.word	0x200009e8
 8001f20:	20000260 	.word	0x20000260
 8001f24:	20000258 	.word	0x20000258
 8001f28:	20000254 	.word	0x20000254
 8001f2c:	2000025c 	.word	0x2000025c
 8001f30:	20000c1c 	.word	0x20000c1c
 8001f34:	e000ed04 	.word	0xe000ed04

08001f38 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	float result;
	BaseType_t CambioContexto= pdFALSE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]

	result = (tmp[0] << 8) | (tmp[1]);
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <HAL_I2C_MasterRxCpltCallback+0x60>)
 8001f4c:	7852      	ldrb	r2, [r2, #1]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f58:	edc7 7a02 	vstr	s15, [r7, #8]

	LuzDetectada = result / (float)BH1750_CONVERSION_FACTOR;
 8001f5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f60:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001f9c <HAL_I2C_MasterRxCpltCallback+0x64>
 8001f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_I2C_MasterRxCpltCallback+0x68>)
 8001f6a:	edc3 7a00 	vstr	s15, [r3]

	xSemaphoreGiveFromISR(SEM_I2C, pdFALSE);
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_I2C_MasterRxCpltCallback+0x6c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f008 f942 	bl	800a1fe <xQueueGiveFromISR>
	portYIELD_FROM_ISR(CambioContexto);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_I2C_MasterRxCpltCallback+0x58>
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_I2C_MasterRxCpltCallback+0x70>)
 8001f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f3bf 8f4f 	dsb	sy
 8001f8c:	f3bf 8f6f 	isb	sy

}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000250 	.word	0x20000250
 8001f9c:	3f99999a 	.word	0x3f99999a
 8001fa0:	20000c48 	.word	0x20000c48
 8001fa4:	20000c1c 	.word	0x20000c1c
 8001fa8:	e000ed04 	.word	0xe000ed04

08001fac <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	CNY70_FlancosUp();
 8001fb4:	f7ff fede 	bl	8001d74 <CNY70_FlancosUp>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <Task_ReadSensors>:

void Task_ReadSensors(void *pvParam)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, &ConversionGasADC, 1);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	491e      	ldr	r1, [pc, #120]	; (8002044 <Task_ReadSensors+0x84>)
 8001fcc:	481e      	ldr	r0, [pc, #120]	; (8002048 <Task_ReadSensors+0x88>)
 8001fce:	f001 f907 	bl	80031e0 <HAL_ADC_Start_DMA>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001fd2:	2108      	movs	r1, #8
 8001fd4:	481d      	ldr	r0, [pc, #116]	; (800204c <Task_ReadSensors+0x8c>)
 8001fd6:	f005 ff73 	bl	8007ec0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001fda:	481d      	ldr	r0, [pc, #116]	; (8002050 <Task_ReadSensors+0x90>)
 8001fdc:	f005 feb4 	bl	8007d48 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <Task_ReadSensors+0x94>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f008 fa75 	bl	800a4d8 <xQueueSemaphoreTake>
		//BH1750_ReadLight(&MedicionesEstacion.Light);
		//BME280_Measure();
		MedicionesEstacion.Temperature = Temperature;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <Task_ReadSensors+0x98>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	; (800205c <Task_ReadSensors+0x9c>)
 8001ff4:	6013      	str	r3, [r2, #0]
		MedicionesEstacion.Pressure = Pressure;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <Task_ReadSensors+0xa0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <Task_ReadSensors+0x9c>)
 8001ffc:	6053      	str	r3, [r2, #4]
		MedicionesEstacion.Light= LuzDetectada;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <Task_ReadSensors+0xa4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <Task_ReadSensors+0x9c>)
 8002004:	60d3      	str	r3, [r2, #12]
		MedicionesEstacion.AirQuality= MQ135_NivelContaminacion(ConversionGasADC);
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <Task_ReadSensors+0x84>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fef6 	bl	8001dfc <MQ135_NivelContaminacion>
 8002010:	4603      	mov	r3, r0
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <Task_ReadSensors+0x9c>)
 8002014:	6113      	str	r3, [r2, #16]
		MedicionesEstacion.WindSpeed= CNY70_MedicionVelocidad(rpmCNY70);
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <Task_ReadSensors+0xa8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff feb8 	bl	8001d90 <CNY70_MedicionVelocidad>
 8002020:	eef0 7a40 	vmov.f32	s15, s0
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <Task_ReadSensors+0x9c>)
 8002026:	edc3 7a05 	vstr	s15, [r3, #20]

		xSemaphoreGive(SEM_Mediciones);
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <Task_ReadSensors+0x94>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	2300      	movs	r3, #0
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	f007 ff4a 	bl	8009ecc <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800203c:	f008 fe72 	bl	800ad24 <vTaskDelay>
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8002040:	e7ce      	b.n	8001fe0 <Task_ReadSensors+0x20>
 8002042:	bf00      	nop
 8002044:	20000c38 	.word	0x20000c38
 8002048:	20000940 	.word	0x20000940
 800204c:	20000afc 	.word	0x20000afc
 8002050:	20000b44 	.word	0x20000b44
 8002054:	20000c18 	.word	0x20000c18
 8002058:	20000c3c 	.word	0x20000c3c
 800205c:	20000c20 	.word	0x20000c20
 8002060:	20000c40 	.word	0x20000c40
 8002064:	20000c48 	.word	0x20000c48
 8002068:	20000294 	.word	0x20000294

0800206c <Task_Light>:
	}
}

void Task_Light(void *pvParam)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <Task_Light+0x20>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	4618      	mov	r0, r3
 800207e:	f008 fa2b 	bl	800a4d8 <xQueueSemaphoreTake>
		BH1750_ReadLight(&MedicionesEstacion.Light);
 8002082:	4803      	ldr	r0, [pc, #12]	; (8002090 <Task_Light+0x24>)
 8002084:	f7ff f8ea 	bl	800125c <BH1750_ReadLight>
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 8002088:	e7f4      	b.n	8002074 <Task_Light+0x8>
 800208a:	bf00      	nop
 800208c:	20000c1c 	.word	0x20000c1c
 8002090:	20000c2c 	.word	0x20000c2c

08002094 <Task_Pressure>:
		//vTaskDelay(pdMS_TO_TICKS(1000));
	}
}

void Task_Pressure(void *pvParam)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <Task_Pressure+0x1c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	4618      	mov	r0, r3
 80020a6:	f008 fa17 	bl	800a4d8 <xQueueSemaphoreTake>
		BME280_Measure();
 80020aa:	f7ff fdc5 	bl	8001c38 <BME280_Measure>
		xSemaphoreTake(SEM_I2C, portMAX_DELAY);
 80020ae:	e7f5      	b.n	800209c <Task_Pressure+0x8>
 80020b0:	20000c1c 	.word	0x20000c1c

080020b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ba:	f000 ffe7 	bl	800308c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020be:	f000 f895 	bl	80021ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c2:	f000 fb25 	bl	8002710 <MX_GPIO_Init>
  MX_DMA_Init();
 80020c6:	f000 fae5 	bl	8002694 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020ca:	f000 fab9 	bl	8002640 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80020ce:	f000 f99d 	bl	800240c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80020d2:	f000 fa8b 	bl	80025ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80020d6:	f000 f8f3 	bl	80022c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80020da:	f000 f9c5 	bl	8002468 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020de:	f000 fa35 	bl	800254c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Inicializacion BH1750
  BH1750_Init(&hi2c1);
 80020e2:	4837      	ldr	r0, [pc, #220]	; (80021c0 <main+0x10c>)
 80020e4:	f7ff f804 	bl	80010f0 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE);
 80020e8:	2010      	movs	r0, #16
 80020ea:	f7ff f837 	bl	800115c <BH1750_SetMode>

  //Inicializacion BMP280
  BME280_Config(OSRS_1, OSRS_4, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80020ee:	2304      	movs	r3, #4
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	2300      	movs	r3, #0
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2303      	movs	r3, #3
 80020f8:	2201      	movs	r2, #1
 80020fa:	2103      	movs	r1, #3
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff f95d 	bl	80013bc <BME280_Config>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  SEM_Mediciones= xSemaphoreCreateBinary();
 8002102:	2203      	movs	r2, #3
 8002104:	2100      	movs	r1, #0
 8002106:	2001      	movs	r0, #1
 8002108:	f007 fe86 	bl	8009e18 <xQueueGenericCreate>
 800210c:	4603      	mov	r3, r0
 800210e:	4a2d      	ldr	r2, [pc, #180]	; (80021c4 <main+0x110>)
 8002110:	6013      	str	r3, [r2, #0]
  SEM_I2C= xSemaphoreCreateBinary();
 8002112:	2203      	movs	r2, #3
 8002114:	2100      	movs	r1, #0
 8002116:	2001      	movs	r0, #1
 8002118:	f007 fe7e 	bl	8009e18 <xQueueGenericCreate>
 800211c:	4603      	mov	r3, r0
 800211e:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <main+0x114>)
 8002120:	6013      	str	r3, [r2, #0]

  xSemaphoreTake(SEM_Mediciones, 0);
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <main+0x110>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f008 f9d5 	bl	800a4d8 <xQueueSemaphoreTake>
  xSemaphoreGive(SEM_Mediciones);
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <main+0x110>)
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	f007 fec8 	bl	8009ecc <xQueueGenericSend>

  xSemaphoreTake(SEM_I2C, 0);
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <main+0x114>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f008 f9c8 	bl	800a4d8 <xQueueSemaphoreTake>
  xSemaphoreGive(SEM_I2C);
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <main+0x114>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	2300      	movs	r3, #0
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	f007 febb 	bl	8009ecc <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <main+0x118>)
 8002158:	1d3c      	adds	r4, r7, #4
 800215a:	461d      	mov	r5, r3
 800215c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800215e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002160:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002164:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f007 fc5e 	bl	8009a2e <osThreadCreate>
 8002172:	4603      	mov	r3, r0
 8002174:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <main+0x11c>)
 8002176:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(Task_ReadSensors, "ReadSensors", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8002178:	2300      	movs	r3, #0
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2301      	movs	r3, #1
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	4913      	ldr	r1, [pc, #76]	; (80021d4 <main+0x120>)
 8002186:	4814      	ldr	r0, [pc, #80]	; (80021d8 <main+0x124>)
 8002188:	f008 fc95 	bl	800aab6 <xTaskCreate>
  xTaskCreate(Task_Light, "Task_Light", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800218c:	2300      	movs	r3, #0
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2301      	movs	r3, #1
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2300      	movs	r3, #0
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	4910      	ldr	r1, [pc, #64]	; (80021dc <main+0x128>)
 800219a:	4811      	ldr	r0, [pc, #68]	; (80021e0 <main+0x12c>)
 800219c:	f008 fc8b 	bl	800aab6 <xTaskCreate>
  xTaskCreate(Task_Pressure, "Task_Pressure", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2301      	movs	r3, #1
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2300      	movs	r3, #0
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	490d      	ldr	r1, [pc, #52]	; (80021e4 <main+0x130>)
 80021ae:	480e      	ldr	r0, [pc, #56]	; (80021e8 <main+0x134>)
 80021b0:	f008 fc81 	bl	800aab6 <xTaskCreate>
  //xTaskCreate(Task_SendDataToThingspeak, "SendDataToThingspeak", configMINIMAL_STACK_SIZE*5, NULL, tskIDLE_PRIORITY + 2, NULL);

  vTaskStartScheduler();
 80021b4:	f008 fdea 	bl	800ad8c <vTaskStartScheduler>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80021b8:	f007 fc32 	bl	8009a20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <main+0x108>
 80021be:	bf00      	nop
 80021c0:	200009e8 	.word	0x200009e8
 80021c4:	20000c18 	.word	0x20000c18
 80021c8:	20000c1c 	.word	0x20000c1c
 80021cc:	0800f420 	.word	0x0800f420
 80021d0:	20000c14 	.word	0x20000c14
 80021d4:	0800f3f8 	.word	0x0800f3f8
 80021d8:	08001fc1 	.word	0x08001fc1
 80021dc:	0800f404 	.word	0x0800f404
 80021e0:	0800206d 	.word	0x0800206d
 80021e4:	0800f410 	.word	0x0800f410
 80021e8:	08002095 	.word	0x08002095

080021ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b094      	sub	sp, #80	; 0x50
 80021f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f2:	f107 0320 	add.w	r3, r7, #32
 80021f6:	2230      	movs	r2, #48	; 0x30
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f00a fbce 	bl	800c99c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <SystemClock_Config+0xcc>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	4a27      	ldr	r2, [pc, #156]	; (80022b8 <SystemClock_Config+0xcc>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6413      	str	r3, [r2, #64]	; 0x40
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <SystemClock_Config+0xcc>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	4b22      	ldr	r3, [pc, #136]	; (80022bc <SystemClock_Config+0xd0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002238:	4a20      	ldr	r2, [pc, #128]	; (80022bc <SystemClock_Config+0xd0>)
 800223a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <SystemClock_Config+0xd0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800224c:	2301      	movs	r3, #1
 800224e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002250:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002256:	2302      	movs	r3, #2
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800225a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002260:	2304      	movs	r3, #4
 8002262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002264:	2354      	movs	r3, #84	; 0x54
 8002266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002268:	2302      	movs	r3, #2
 800226a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800226c:	2307      	movs	r3, #7
 800226e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	4618      	mov	r0, r3
 8002276:	f005 f84d 	bl	8007314 <HAL_RCC_OscConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002280:	f000 fad6 	bl	8002830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002284:	230f      	movs	r3, #15
 8002286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002288:	2302      	movs	r3, #2
 800228a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	2102      	movs	r1, #2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f005 faaf 	bl	8007804 <HAL_RCC_ClockConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80022ac:	f000 fac0 	bl	8002830 <Error_Handler>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3750      	adds	r7, #80	; 0x50
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000

080022c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022c6:	463b      	mov	r3, r7
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022d2:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <MX_ADC1_Init+0x140>)
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <MX_ADC1_Init+0x144>)
 80022d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80022d8:	4b49      	ldr	r3, [pc, #292]	; (8002400 <MX_ADC1_Init+0x140>)
 80022da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022e0:	4b47      	ldr	r3, [pc, #284]	; (8002400 <MX_ADC1_Init+0x140>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022e6:	4b46      	ldr	r3, [pc, #280]	; (8002400 <MX_ADC1_Init+0x140>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022ec:	4b44      	ldr	r3, [pc, #272]	; (8002400 <MX_ADC1_Init+0x140>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022f2:	4b43      	ldr	r3, [pc, #268]	; (8002400 <MX_ADC1_Init+0x140>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <MX_ADC1_Init+0x140>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <MX_ADC1_Init+0x140>)
 8002302:	4a41      	ldr	r2, [pc, #260]	; (8002408 <MX_ADC1_Init+0x148>)
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002306:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <MX_ADC1_Init+0x140>)
 8002308:	2200      	movs	r2, #0
 800230a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800230c:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <MX_ADC1_Init+0x140>)
 800230e:	2208      	movs	r2, #8
 8002310:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <MX_ADC1_Init+0x140>)
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <MX_ADC1_Init+0x140>)
 800231c:	2200      	movs	r2, #0
 800231e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002320:	4837      	ldr	r0, [pc, #220]	; (8002400 <MX_ADC1_Init+0x140>)
 8002322:	f000 ff19 	bl	8003158 <HAL_ADC_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800232c:	f000 fa80 	bl	8002830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002330:	2300      	movs	r3, #0
 8002332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002334:	2301      	movs	r3, #1
 8002336:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002338:	2307      	movs	r3, #7
 800233a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233c:	463b      	mov	r3, r7
 800233e:	4619      	mov	r1, r3
 8002340:	482f      	ldr	r0, [pc, #188]	; (8002400 <MX_ADC1_Init+0x140>)
 8002342:	f001 f85b 	bl	80033fc <HAL_ADC_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800234c:	f000 fa70 	bl	8002830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8002350:	2302      	movs	r3, #2
 8002352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002354:	463b      	mov	r3, r7
 8002356:	4619      	mov	r1, r3
 8002358:	4829      	ldr	r0, [pc, #164]	; (8002400 <MX_ADC1_Init+0x140>)
 800235a:	f001 f84f 	bl	80033fc <HAL_ADC_ConfigChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8002364:	f000 fa64 	bl	8002830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8002368:	2303      	movs	r3, #3
 800236a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800236c:	463b      	mov	r3, r7
 800236e:	4619      	mov	r1, r3
 8002370:	4823      	ldr	r0, [pc, #140]	; (8002400 <MX_ADC1_Init+0x140>)
 8002372:	f001 f843 	bl	80033fc <HAL_ADC_ConfigChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800237c:	f000 fa58 	bl	8002830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8002380:	2304      	movs	r3, #4
 8002382:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	4619      	mov	r1, r3
 8002388:	481d      	ldr	r0, [pc, #116]	; (8002400 <MX_ADC1_Init+0x140>)
 800238a:	f001 f837 	bl	80033fc <HAL_ADC_ConfigChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002394:	f000 fa4c 	bl	8002830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8002398:	2305      	movs	r3, #5
 800239a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800239c:	463b      	mov	r3, r7
 800239e:	4619      	mov	r1, r3
 80023a0:	4817      	ldr	r0, [pc, #92]	; (8002400 <MX_ADC1_Init+0x140>)
 80023a2:	f001 f82b 	bl	80033fc <HAL_ADC_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80023ac:	f000 fa40 	bl	8002830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 80023b0:	2306      	movs	r3, #6
 80023b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b4:	463b      	mov	r3, r7
 80023b6:	4619      	mov	r1, r3
 80023b8:	4811      	ldr	r0, [pc, #68]	; (8002400 <MX_ADC1_Init+0x140>)
 80023ba:	f001 f81f 	bl	80033fc <HAL_ADC_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80023c4:	f000 fa34 	bl	8002830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 80023c8:	2307      	movs	r3, #7
 80023ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	480b      	ldr	r0, [pc, #44]	; (8002400 <MX_ADC1_Init+0x140>)
 80023d2:	f001 f813 	bl	80033fc <HAL_ADC_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80023dc:	f000 fa28 	bl	8002830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 80023e0:	2308      	movs	r3, #8
 80023e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_ADC1_Init+0x140>)
 80023ea:	f001 f807 	bl	80033fc <HAL_ADC_ConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80023f4:	f000 fa1c 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000940 	.word	0x20000940
 8002404:	40012000 	.word	0x40012000
 8002408:	0f000001 	.word	0x0f000001

0800240c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <MX_I2C1_Init+0x50>)
 8002412:	4a13      	ldr	r2, [pc, #76]	; (8002460 <MX_I2C1_Init+0x54>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_I2C1_Init+0x50>)
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <MX_I2C1_Init+0x58>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_I2C1_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_I2C1_Init+0x50>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <MX_I2C1_Init+0x50>)
 800242a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800242e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <MX_I2C1_Init+0x50>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_I2C1_Init+0x50>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <MX_I2C1_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_I2C1_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <MX_I2C1_Init+0x50>)
 800244a:	f002 f907 	bl	800465c <HAL_I2C_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002454:	f000 f9ec 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200009e8 	.word	0x200009e8
 8002460:	40005400 	.word	0x40005400
 8002464:	000186a0 	.word	0x000186a0

08002468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246e:	f107 0318 	add.w	r3, r7, #24
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002486:	463b      	mov	r3, r7
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <MX_TIM2_Init+0xe0>)
 8002494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002498:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <MX_TIM2_Init+0xe0>)
 800249c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80024a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <MX_TIM2_Init+0xe0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <MX_TIM2_Init+0xe0>)
 80024aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80024ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <MX_TIM2_Init+0xe0>)
 80024b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <MX_TIM2_Init+0xe0>)
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024be:	4822      	ldr	r0, [pc, #136]	; (8002548 <MX_TIM2_Init+0xe0>)
 80024c0:	f005 fbf2 	bl	8007ca8 <HAL_TIM_Base_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80024ca:	f000 f9b1 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024d4:	f107 0318 	add.w	r3, r7, #24
 80024d8:	4619      	mov	r1, r3
 80024da:	481b      	ldr	r0, [pc, #108]	; (8002548 <MX_TIM2_Init+0xe0>)
 80024dc:	f005 ffae 	bl	800843c <HAL_TIM_ConfigClockSource>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80024e6:	f000 f9a3 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80024ea:	4817      	ldr	r0, [pc, #92]	; (8002548 <MX_TIM2_Init+0xe0>)
 80024ec:	f005 fc8e 	bl	8007e0c <HAL_TIM_IC_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80024f6:	f000 f99b 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002502:	f107 0310 	add.w	r3, r7, #16
 8002506:	4619      	mov	r1, r3
 8002508:	480f      	ldr	r0, [pc, #60]	; (8002548 <MX_TIM2_Init+0xe0>)
 800250a:	f006 fadb 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002514:	f000 f98c 	bl	8002830 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002518:	2300      	movs	r3, #0
 800251a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800251c:	2301      	movs	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	2208      	movs	r2, #8
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <MX_TIM2_Init+0xe0>)
 8002530:	f005 fee8 	bl	8008304 <HAL_TIM_IC_ConfigChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800253a:	f000 f979 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000afc 	.word	0x20000afc

0800254c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002560:	463b      	mov	r3, r7
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <MX_TIM3_Init+0x98>)
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <MX_TIM3_Init+0x9c>)
 800256c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <MX_TIM3_Init+0x98>)
 8002570:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002574:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <MX_TIM3_Init+0x98>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <MX_TIM3_Init+0x98>)
 800257e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002582:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <MX_TIM3_Init+0x98>)
 8002586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <MX_TIM3_Init+0x98>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002592:	4814      	ldr	r0, [pc, #80]	; (80025e4 <MX_TIM3_Init+0x98>)
 8002594:	f005 fb88 	bl	8007ca8 <HAL_TIM_Base_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800259e:	f000 f947 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	4619      	mov	r1, r3
 80025ae:	480d      	ldr	r0, [pc, #52]	; (80025e4 <MX_TIM3_Init+0x98>)
 80025b0:	f005 ff44 	bl	800843c <HAL_TIM_ConfigClockSource>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80025ba:	f000 f939 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025c6:	463b      	mov	r3, r7
 80025c8:	4619      	mov	r1, r3
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <MX_TIM3_Init+0x98>)
 80025cc:	f006 fa7a 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80025d6:	f000 f92b 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000b44 	.word	0x20000b44
 80025e8:	40000400 	.word	0x40000400

080025ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <MX_USART1_UART_Init+0x50>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002624:	f006 fad0 	bl	8008bc8 <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800262e:	f000 f8ff 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000b8c 	.word	0x20000b8c
 800263c:	40011000 	.word	0x40011000

08002640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_USART2_UART_Init+0x4c>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <MX_USART2_UART_Init+0x50>)
 8002648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <MX_USART2_UART_Init+0x4c>)
 800264c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <MX_USART2_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_USART2_UART_Init+0x4c>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <MX_USART2_UART_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_USART2_UART_Init+0x4c>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <MX_USART2_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_USART2_UART_Init+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_USART2_UART_Init+0x4c>)
 8002678:	f006 faa6 	bl	8008bc8 <HAL_UART_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002682:	f000 f8d5 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000bd0 	.word	0x20000bd0
 8002690:	40004400 	.word	0x40004400

08002694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <MX_DMA_Init+0x78>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <MX_DMA_Init+0x78>)
 80026a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <MX_DMA_Init+0x78>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <MX_DMA_Init+0x78>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a13      	ldr	r2, [pc, #76]	; (800270c <MX_DMA_Init+0x78>)
 80026c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_DMA_Init+0x78>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2105      	movs	r1, #5
 80026d6:	200b      	movs	r0, #11
 80026d8:	f001 f9e8 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026dc:	200b      	movs	r0, #11
 80026de:	f001 fa01 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2105      	movs	r1, #5
 80026e6:	2011      	movs	r0, #17
 80026e8:	f001 f9e0 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026ec:	2011      	movs	r0, #17
 80026ee:	f001 f9f9 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2105      	movs	r1, #5
 80026f6:	2038      	movs	r0, #56	; 0x38
 80026f8:	f001 f9d8 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026fc:	2038      	movs	r0, #56	; 0x38
 80026fe:	f001 f9f1 	bl	8003ae4 <HAL_NVIC_EnableIRQ>

}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <MX_GPIO_Init+0xd0>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a2c      	ldr	r2, [pc, #176]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a25      	ldr	r2, [pc, #148]	; (80027e0 <MX_GPIO_Init+0xd0>)
 800274c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <MX_GPIO_Init+0xd0>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <MX_GPIO_Init+0xd0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	2120      	movs	r1, #32
 800279a:	4812      	ldr	r0, [pc, #72]	; (80027e4 <MX_GPIO_Init+0xd4>)
 800279c:	f001 ff44 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80027aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	480c      	ldr	r0, [pc, #48]	; (80027e8 <MX_GPIO_Init+0xd8>)
 80027b8:	f001 fdb2 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027bc:	2320      	movs	r3, #32
 80027be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	4804      	ldr	r0, [pc, #16]	; (80027e4 <MX_GPIO_Init+0xd4>)
 80027d4:	f001 fda4 	bl	8004320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d8:	bf00      	nop
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40020800 	.word	0x40020800

080027ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f007 f966 	bl	8009ac6 <osDelay>
 80027fa:	e7fb      	b.n	80027f4 <StartDefaultTask+0x8>

080027fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim == &htim3)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d101      	bne.n	8002810 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		CNY70_TIM_Callback();
 800280c:	f7ff faa0 	bl	8001d50 <CNY70_TIM_Callback>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a05      	ldr	r2, [pc, #20]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 800281a:	f000 fc59 	bl	80030d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000b44 	.word	0x20000b44
 800282c:	40010000 	.word	0x40010000

08002830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002834:	b672      	cpsid	i
}
 8002836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002838:	e7fe      	b.n	8002838 <Error_Handler+0x8>
	...

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_MspInit+0x54>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_MspInit+0x54>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_MspInit+0x54>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_MspInit+0x54>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_MspInit+0x54>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_MspInit+0x54>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	210f      	movs	r1, #15
 800287e:	f06f 0001 	mvn.w	r0, #1
 8002882:	f001 f913 	bl	8003aac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2f      	ldr	r2, [pc, #188]	; (8002970 <HAL_ADC_MspInit+0xdc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d157      	bne.n	8002966 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <HAL_ADC_MspInit+0xe0>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a2d      	ldr	r2, [pc, #180]	; (8002974 <HAL_ADC_MspInit+0xe0>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_ADC_MspInit+0xe0>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_ADC_MspInit+0xe0>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <HAL_ADC_MspInit+0xe0>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_ADC_MspInit+0xe0>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028ee:	2301      	movs	r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f2:	2303      	movs	r3, #3
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	481d      	ldr	r0, [pc, #116]	; (8002978 <HAL_ADC_MspInit+0xe4>)
 8002902:	f001 fd0d 	bl	8004320 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002908:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_ADC_MspInit+0xec>)
 800290a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_ADC_MspInit+0xe8>)
 800290e:	2200      	movs	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_ADC_MspInit+0xe8>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002924:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002928:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800292c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002930:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002934:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800293c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800294a:	480c      	ldr	r0, [pc, #48]	; (800297c <HAL_ADC_MspInit+0xe8>)
 800294c:	f001 f8d8 	bl	8003b00 <HAL_DMA_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002956:	f7ff ff6b 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <HAL_ADC_MspInit+0xe8>)
 800295e:	639a      	str	r2, [r3, #56]	; 0x38
 8002960:	4a06      	ldr	r2, [pc, #24]	; (800297c <HAL_ADC_MspInit+0xe8>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002966:	bf00      	nop
 8002968:	3728      	adds	r7, #40	; 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40012000 	.word	0x40012000
 8002974:	40023800 	.word	0x40023800
 8002978:	40020000 	.word	0x40020000
 800297c:	20000988 	.word	0x20000988
 8002980:	40026410 	.word	0x40026410

08002984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_I2C_MspInit+0x154>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	f040 8093 	bne.w	8002ace <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_I2C_MspInit+0x158>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4a4a      	ldr	r2, [pc, #296]	; (8002adc <HAL_I2C_MspInit+0x158>)
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	6313      	str	r3, [r2, #48]	; 0x30
 80029b8:	4b48      	ldr	r3, [pc, #288]	; (8002adc <HAL_I2C_MspInit+0x158>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ca:	2312      	movs	r3, #18
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029d6:	2304      	movs	r3, #4
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	483f      	ldr	r0, [pc, #252]	; (8002ae0 <HAL_I2C_MspInit+0x15c>)
 80029e2:	f001 fc9d 	bl	8004320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_I2C_MspInit+0x158>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <HAL_I2C_MspInit+0x158>)
 80029f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_I2C_MspInit+0x158>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002a02:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a04:	4a38      	ldr	r2, [pc, #224]	; (8002ae8 <HAL_I2C_MspInit+0x164>)
 8002a06:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a10:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a16:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a1c:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a22:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a24:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a36:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a38:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a3e:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a44:	4827      	ldr	r0, [pc, #156]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a46:	f001 f85b 	bl	8003b00 <HAL_DMA_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8002a50:	f7ff feee 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a58:	639a      	str	r2, [r3, #56]	; 0x38
 8002a5a:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HAL_I2C_MspInit+0x160>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002a60:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a62:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <HAL_I2C_MspInit+0x16c>)
 8002a64:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a6c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a80:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002aa2:	4812      	ldr	r0, [pc, #72]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002aa4:	f001 f82c 	bl	8003b00 <HAL_DMA_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8002aae:	f7ff febf 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002ab6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_I2C_MspInit+0x168>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2105      	movs	r1, #5
 8002ac2:	201f      	movs	r0, #31
 8002ac4:	f000 fff2 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002ac8:	201f      	movs	r0, #31
 8002aca:	f001 f80b 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ace:	bf00      	nop
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	20000a3c 	.word	0x20000a3c
 8002ae8:	40026010 	.word	0x40026010
 8002aec:	20000a9c 	.word	0x20000a9c
 8002af0:	400260a0 	.word	0x400260a0

08002af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d135      	bne.n	8002b82 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a28      	ldr	r2, [pc, #160]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = CNY70_Pin;
 8002b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CNY70_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4816      	ldr	r0, [pc, #88]	; (8002bc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002b6c:	f001 fbd8 	bl	8004320 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2105      	movs	r1, #5
 8002b74:	201c      	movs	r0, #28
 8002b76:	f000 ff99 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b7a:	201c      	movs	r0, #28
 8002b7c:	f000 ffb2 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b80:	e01a      	b.n	8002bb8 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM3)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d115      	bne.n	8002bb8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2105      	movs	r1, #5
 8002bac:	201d      	movs	r0, #29
 8002bae:	f000 ff7d 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bb2:	201d      	movs	r0, #29
 8002bb4:	f000 ff96 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002bb8:	bf00      	nop
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40000400 	.word	0x40000400

08002bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08c      	sub	sp, #48	; 0x30
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a36      	ldr	r2, [pc, #216]	; (8002cc4 <HAL_UART_MspInit+0xf8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d135      	bne.n	8002c5a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002bf8:	f043 0310 	orr.w	r3, r3, #16
 8002bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfe:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	4619      	mov	r1, r3
 8002c42:	4822      	ldr	r0, [pc, #136]	; (8002ccc <HAL_UART_MspInit+0x100>)
 8002c44:	f001 fb6c 	bl	8004320 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	2025      	movs	r0, #37	; 0x25
 8002c4e:	f000 ff2d 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c52:	2025      	movs	r0, #37	; 0x25
 8002c54:	f000 ff46 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c58:	e030      	b.n	8002cbc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_UART_MspInit+0x104>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d12b      	bne.n	8002cbc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	4a0f      	ldr	r2, [pc, #60]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c90:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_UART_MspInit+0xfc>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cac:	2307      	movs	r3, #7
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 031c 	add.w	r3, r7, #28
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4805      	ldr	r0, [pc, #20]	; (8002ccc <HAL_UART_MspInit+0x100>)
 8002cb8:	f001 fb32 	bl	8004320 <HAL_GPIO_Init>
}
 8002cbc:	bf00      	nop
 8002cbe:	3730      	adds	r7, #48	; 0x30
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40011000 	.word	0x40011000
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	40004400 	.word	0x40004400

08002cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	; 0x30
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_InitTick+0xd0>)
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	4a2d      	ldr	r2, [pc, #180]	; (8002da4 <HAL_InitTick+0xd0>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_InitTick+0xd0>)
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d00:	f107 020c 	add.w	r2, r7, #12
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 ff9a 	bl	8007c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d10:	f004 ff84 	bl	8007c1c <HAL_RCC_GetPCLK2Freq>
 8002d14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_InitTick+0xd4>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	3b01      	subs	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_InitTick+0xd8>)
 8002d26:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <HAL_InitTick+0xdc>)
 8002d28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_InitTick+0xd8>)
 8002d2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_InitTick+0xd8>)
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d38:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_InitTick+0xd8>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_InitTick+0xd8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_InitTick+0xd8>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d4a:	4818      	ldr	r0, [pc, #96]	; (8002dac <HAL_InitTick+0xd8>)
 8002d4c:	f004 ffac 	bl	8007ca8 <HAL_TIM_Base_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d11b      	bne.n	8002d96 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002d5e:	4813      	ldr	r0, [pc, #76]	; (8002dac <HAL_InitTick+0xd8>)
 8002d60:	f004 fff2 	bl	8007d48 <HAL_TIM_Base_Start_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d111      	bne.n	8002d96 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d72:	2019      	movs	r0, #25
 8002d74:	f000 feb6 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	d808      	bhi.n	8002d90 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	2019      	movs	r0, #25
 8002d84:	f000 fe92 	bl	8003aac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <HAL_InitTick+0xe0>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e002      	b.n	8002d96 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3730      	adds	r7, #48	; 0x30
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	431bde83 	.word	0x431bde83
 8002dac:	20000c4c 	.word	0x20000c4c
 8002db0:	40010000 	.word	0x40010000
 8002db4:	20000004 	.word	0x20000004

08002db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <NMI_Handler+0x4>

08002dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <BusFault_Handler+0x4>

08002dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <UsageFault_Handler+0x4>

08002dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <DMA1_Stream0_IRQHandler+0x10>)
 8002dea:	f001 f821 	bl	8003e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000a3c 	.word	0x20000a3c

08002df8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <DMA1_Stream6_IRQHandler+0x10>)
 8002dfe:	f001 f817 	bl	8003e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000a9c 	.word	0x20000a9c

08002e0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e12:	f005 f96f 	bl	80080f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000c4c 	.word	0x20000c4c

08002e20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <TIM2_IRQHandler+0x10>)
 8002e26:	f005 f965 	bl	80080f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000afc 	.word	0x20000afc

08002e34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <TIM3_IRQHandler+0x10>)
 8002e3a:	f005 f95b 	bl	80080f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000b44 	.word	0x20000b44

08002e48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <I2C1_EV_IRQHandler+0x10>)
 8002e4e:	f002 fad3 	bl	80053f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200009e8 	.word	0x200009e8

08002e5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 8002e60:	4803      	ldr	r0, [pc, #12]	; (8002e70 <USART1_IRQHandler+0x14>)
 8002e62:	f7fe f8eb 	bl	800103c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <USART1_IRQHandler+0x14>)
 8002e68:	f005 fefc 	bl	8008c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000b8c 	.word	0x20000b8c

08002e74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <DMA2_Stream0_IRQHandler+0x10>)
 8002e7a:	f000 ffd9 	bl	8003e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000988 	.word	0x20000988

08002e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return 1;
 8002e8c:	2301      	movs	r3, #1
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_kill>:

int _kill(int pid, int sig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ea2:	f009 fd43 	bl	800c92c <__errno>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2216      	movs	r2, #22
 8002eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_exit>:

void _exit (int status)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ffe7 	bl	8002e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eca:	e7fe      	b.n	8002eca <_exit+0x12>

08002ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e00a      	b.n	8002ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ede:	f3af 8000 	nop.w
 8002ee2:	4601      	mov	r1, r0
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	60ba      	str	r2, [r7, #8]
 8002eea:	b2ca      	uxtb	r2, r1
 8002eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	dbf0      	blt.n	8002ede <_read+0x12>
  }

  return len;
 8002efc:	687b      	ldr	r3, [r7, #4]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e009      	b.n	8002f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	60ba      	str	r2, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dbf1      	blt.n	8002f18 <_write+0x12>
  }
  return len;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_close>:

int _close(int file)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f66:	605a      	str	r2, [r3, #4]
  return 0;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <_isatty>:

int _isatty(int file)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <_sbrk+0x5c>)
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <_sbrk+0x60>)
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <_sbrk+0x64>)
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <_sbrk+0x68>)
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <_sbrk+0x64>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d207      	bcs.n	8002fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd8:	f009 fca8 	bl	800c92c <__errno>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	220c      	movs	r2, #12
 8002fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	e009      	b.n	8002ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <_sbrk+0x64>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4a05      	ldr	r2, [pc, #20]	; (800300c <_sbrk+0x64>)
 8002ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20018000 	.word	0x20018000
 8003008:	00000400 	.word	0x00000400
 800300c:	20000c94 	.word	0x20000c94
 8003010:	20004b40 	.word	0x20004b40

08003014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <SystemInit+0x20>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	4a05      	ldr	r2, [pc, #20]	; (8003034 <SystemInit+0x20>)
 8003020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003070 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800303c:	480d      	ldr	r0, [pc, #52]	; (8003074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800303e:	490e      	ldr	r1, [pc, #56]	; (8003078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003040:	4a0e      	ldr	r2, [pc, #56]	; (800307c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003044:	e002      	b.n	800304c <LoopCopyDataInit>

08003046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800304a:	3304      	adds	r3, #4

0800304c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800304c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800304e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003050:	d3f9      	bcc.n	8003046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003052:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003054:	4c0b      	ldr	r4, [pc, #44]	; (8003084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003058:	e001      	b.n	800305e <LoopFillZerobss>

0800305a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800305a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800305c:	3204      	adds	r2, #4

0800305e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800305e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003060:	d3fb      	bcc.n	800305a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003062:	f7ff ffd7 	bl	8003014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003066:	f009 fc67 	bl	800c938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306a:	f7ff f823 	bl	80020b4 <main>
  bx  lr    
 800306e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003070:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003078:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800307c:	0800f85c 	.word	0x0800f85c
  ldr r2, =_sbss
 8003080:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003084:	20004b3c 	.word	0x20004b3c

08003088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003088:	e7fe      	b.n	8003088 <ADC_IRQHandler>
	...

0800308c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003090:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0d      	ldr	r2, [pc, #52]	; (80030cc <HAL_Init+0x40>)
 8003096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800309a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_Init+0x40>)
 80030a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a07      	ldr	r2, [pc, #28]	; (80030cc <HAL_Init+0x40>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b4:	2003      	movs	r0, #3
 80030b6:	f000 fcee 	bl	8003a96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ba:	200f      	movs	r0, #15
 80030bc:	f7ff fe0a 	bl	8002cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c0:	f7ff fbbc 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023c00 	.word	0x40023c00

080030d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_IncTick+0x20>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_IncTick+0x24>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <HAL_IncTick+0x24>)
 80030e2:	6013      	str	r3, [r2, #0]
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000008 	.word	0x20000008
 80030f4:	20000c98 	.word	0x20000c98

080030f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return uwTick;
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_GetTick+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000c98 	.word	0x20000c98

08003110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7ff ffee 	bl	80030f8 <HAL_GetTick>
 800311c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d005      	beq.n	8003136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_Delay+0x44>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003136:	bf00      	nop
 8003138:	f7ff ffde 	bl	80030f8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	429a      	cmp	r2, r3
 8003146:	d8f7      	bhi.n	8003138 <HAL_Delay+0x28>
  {
  }
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000008 	.word	0x20000008

08003158 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e033      	b.n	80031d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff fb8c 	bl	8002894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d118      	bne.n	80031c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800319e:	f023 0302 	bic.w	r3, r3, #2
 80031a2:	f043 0202 	orr.w	r2, r3, #2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa48 	bl	8003640 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
 80031c6:	e001      	b.n	80031cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Start_DMA+0x1e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e0ce      	b.n	800339c <HAL_ADC_Start_DMA+0x1bc>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d018      	beq.n	8003246 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003224:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_ADC_Start_DMA+0x1c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5f      	ldr	r2, [pc, #380]	; (80033a8 <HAL_ADC_Start_DMA+0x1c8>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0c9a      	lsrs	r2, r3, #18
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003238:	e002      	b.n	8003240 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	3b01      	subs	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f9      	bne.n	800323a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003254:	d107      	bne.n	8003266 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003264:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 8086 	bne.w	8003382 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b4:	d106      	bne.n	80032c4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f023 0206 	bic.w	r2, r3, #6
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
 80032c2:	e002      	b.n	80032ca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032d2:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_ADC_Start_DMA+0x1cc>)
 80032d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <HAL_ADC_Start_DMA+0x1d0>)
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <HAL_ADC_Start_DMA+0x1d4>)
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	4a33      	ldr	r2, [pc, #204]	; (80033b8 <HAL_ADC_Start_DMA+0x1d8>)
 80032ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003306:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003316:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	334c      	adds	r3, #76	; 0x4c
 8003322:	4619      	mov	r1, r3
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f000 fc98 	bl	8003c5c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10f      	bne.n	8003358 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d129      	bne.n	800339a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	e020      	b.n	800339a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_ADC_Start_DMA+0x1dc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d11b      	bne.n	800339a <HAL_ADC_Start_DMA+0x1ba>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d114      	bne.n	800339a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	e00b      	b.n	800339a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0210 	orr.w	r2, r3, #16
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000000 	.word	0x20000000
 80033a8:	431bde83 	.word	0x431bde83
 80033ac:	40012300 	.word	0x40012300
 80033b0:	08003839 	.word	0x08003839
 80033b4:	080038f3 	.word	0x080038f3
 80033b8:	0800390f 	.word	0x0800390f
 80033bc:	40012000 	.word	0x40012000

080033c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x1c>
 8003414:	2302      	movs	r3, #2
 8003416:	e105      	b.n	8003624 <HAL_ADC_ConfigChannel+0x228>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b09      	cmp	r3, #9
 8003426:	d925      	bls.n	8003474 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68d9      	ldr	r1, [r3, #12]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	3b1e      	subs	r3, #30
 800343e:	2207      	movs	r2, #7
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43da      	mvns	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	400a      	ands	r2, r1
 800344c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68d9      	ldr	r1, [r3, #12]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	4618      	mov	r0, r3
 8003460:	4603      	mov	r3, r0
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4403      	add	r3, r0
 8003466:	3b1e      	subs	r3, #30
 8003468:	409a      	lsls	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e022      	b.n	80034ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	2207      	movs	r2, #7
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	400a      	ands	r2, r1
 8003496:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6919      	ldr	r1, [r3, #16]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4618      	mov	r0, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4403      	add	r3, r0
 80034b0:	409a      	lsls	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d824      	bhi.n	800350c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b05      	subs	r3, #5
 80034d4:	221f      	movs	r2, #31
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	400a      	ands	r2, r1
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4618      	mov	r0, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	3b05      	subs	r3, #5
 80034fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	635a      	str	r2, [r3, #52]	; 0x34
 800350a:	e04c      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d824      	bhi.n	800355e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	3b23      	subs	r3, #35	; 0x23
 8003526:	221f      	movs	r2, #31
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43da      	mvns	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	400a      	ands	r2, r1
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	4618      	mov	r0, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	3b23      	subs	r3, #35	; 0x23
 8003550:	fa00 f203 	lsl.w	r2, r0, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
 800355c:	e023      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	3b41      	subs	r3, #65	; 0x41
 8003570:	221f      	movs	r2, #31
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	400a      	ands	r2, r1
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	4618      	mov	r0, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	3b41      	subs	r3, #65	; 0x41
 800359a:	fa00 f203 	lsl.w	r2, r0, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035a6:	4b22      	ldr	r3, [pc, #136]	; (8003630 <HAL_ADC_ConfigChannel+0x234>)
 80035a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <HAL_ADC_ConfigChannel+0x238>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d109      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1cc>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b12      	cmp	r3, #18
 80035ba:	d105      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_ADC_ConfigChannel+0x238>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d123      	bne.n	800361a <HAL_ADC_ConfigChannel+0x21e>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d003      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x1e6>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b11      	cmp	r3, #17
 80035e0:	d11b      	bne.n	800361a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d111      	bne.n	800361a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035f6:	4b10      	ldr	r3, [pc, #64]	; (8003638 <HAL_ADC_ConfigChannel+0x23c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_ADC_ConfigChannel+0x240>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	0c9a      	lsrs	r2, r3, #18
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800360c:	e002      	b.n	8003614 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3b01      	subs	r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f9      	bne.n	800360e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40012300 	.word	0x40012300
 8003634:	40012000 	.word	0x40012000
 8003638:	20000000 	.word	0x20000000
 800363c:	431bde83 	.word	0x431bde83

08003640 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003648:	4b79      	ldr	r3, [pc, #484]	; (8003830 <ADC_Init+0x1f0>)
 800364a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	021a      	lsls	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6899      	ldr	r1, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	4a58      	ldr	r2, [pc, #352]	; (8003834 <ADC_Init+0x1f4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6899      	ldr	r1, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6899      	ldr	r1, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	e00f      	b.n	800373e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800372c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800373c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0202 	bic.w	r2, r2, #2
 800374c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6899      	ldr	r1, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7e1b      	ldrb	r3, [r3, #24]
 8003758:	005a      	lsls	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01b      	beq.n	80037a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800378a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6859      	ldr	r1, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	3b01      	subs	r3, #1
 8003798:	035a      	lsls	r2, r3, #13
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e007      	b.n	80037b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	051a      	lsls	r2, r3, #20
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6899      	ldr	r1, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037f6:	025a      	lsls	r2, r3, #9
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	029a      	lsls	r2, r3, #10
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40012300 	.word	0x40012300
 8003834:	0f000001 	.word	0x0f000001

08003838 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800384e:	2b00      	cmp	r3, #0
 8003850:	d13c      	bne.n	80038cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d12b      	bne.n	80038c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003870:	2b00      	cmp	r3, #0
 8003872:	d127      	bne.n	80038c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800388c:	2b00      	cmp	r3, #0
 800388e:	d119      	bne.n	80038c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0220 	bic.w	r2, r2, #32
 800389e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff fd7b 	bl	80033c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038ca:	e00e      	b.n	80038ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fd85 	bl	80033e8 <HAL_ADC_ErrorCallback>
}
 80038de:	e004      	b.n	80038ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fd67 	bl	80033d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f043 0204 	orr.w	r2, r3, #4
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff fd5a 	bl	80033e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	60d3      	str	r3, [r2, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__NVIC_GetPriorityGrouping+0x18>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0307 	and.w	r3, r3, #7
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db0b      	blt.n	80039ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4907      	ldr	r1, [pc, #28]	; (80039d8 <__NVIC_EnableIRQ+0x38>)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2001      	movs	r0, #1
 80039c2:	fa00 f202 	lsl.w	r2, r0, r2
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100

080039dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	; (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f1c3 0307 	rsb	r3, r3, #7
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf28      	it	cs
 8003a4e:	2304      	movcs	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d902      	bls.n	8003a60 <NVIC_EncodePriority+0x30>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b03      	subs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <NVIC_EncodePriority+0x32>
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43d9      	mvns	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	4313      	orrs	r3, r2
         );
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff4c 	bl	800393c <__NVIC_SetPriorityGrouping>
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003abe:	f7ff ff61 	bl	8003984 <__NVIC_GetPriorityGrouping>
 8003ac2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	6978      	ldr	r0, [r7, #20]
 8003aca:	f7ff ffb1 	bl	8003a30 <NVIC_EncodePriority>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff80 	bl	80039dc <__NVIC_SetPriority>
}
 8003adc:	bf00      	nop
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff54 	bl	80039a0 <__NVIC_EnableIRQ>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7ff faf4 	bl	80030f8 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e099      	b.n	8003c50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b3c:	e00f      	b.n	8003b5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b3e:	f7ff fadb 	bl	80030f8 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d908      	bls.n	8003b5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2203      	movs	r2, #3
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e078      	b.n	8003c50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e8      	bne.n	8003b3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_DMA_Init+0x158>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d107      	bne.n	8003bc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d117      	bne.n	8003c22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00e      	beq.n	8003c22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fb0f 	bl	8004228 <DMA_CheckFifoParam>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2240      	movs	r2, #64	; 0x40
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e016      	b.n	8003c50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fac6 	bl	80041bc <DMA_CalcBaseAndBitshift>
 8003c30:	4603      	mov	r3, r0
 8003c32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	223f      	movs	r2, #63	; 0x3f
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	f010803f 	.word	0xf010803f

08003c5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_DMA_Start_IT+0x26>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e040      	b.n	8003d04 <HAL_DMA_Start_IT+0xa8>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d12f      	bne.n	8003cf6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fa58 	bl	8004160 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	223f      	movs	r2, #63	; 0x3f
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0216 	orr.w	r2, r2, #22
 8003cca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0208 	orr.w	r2, r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e005      	b.n	8003d02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d1a:	f7ff f9ed 	bl	80030f8 <HAL_GetTick>
 8003d1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d008      	beq.n	8003d3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e052      	b.n	8003de4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0216 	bic.w	r2, r2, #22
 8003d4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_DMA_Abort+0x62>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0208 	bic.w	r2, r2, #8
 8003d7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d8e:	e013      	b.n	8003db8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d90:	f7ff f9b2 	bl	80030f8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d90c      	bls.n	8003db8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2203      	movs	r2, #3
 8003da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e015      	b.n	8003de4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e4      	bne.n	8003d90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	223f      	movs	r2, #63	; 0x3f
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d004      	beq.n	8003e0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e00c      	b.n	8003e24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2205      	movs	r2, #5
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e3c:	4b8e      	ldr	r3, [pc, #568]	; (8004078 <HAL_DMA_IRQHandler+0x248>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a8e      	ldr	r2, [pc, #568]	; (800407c <HAL_DMA_IRQHandler+0x24c>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	0a9b      	lsrs	r3, r3, #10
 8003e48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01a      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d013      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0204 	bic.w	r2, r2, #4
 8003e82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	2208      	movs	r2, #8
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d012      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f043 0202 	orr.w	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d012      	beq.n	8003f08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00b      	beq.n	8003f08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	f043 0204 	orr.w	r2, r3, #4
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d043      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d03c      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d018      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d108      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d024      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
 8003f5e:	e01f      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
 8003f70:	e016      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d107      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0208 	bic.w	r2, r2, #8
 8003f8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 808f 	beq.w	80040d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8087 	beq.w	80040d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d136      	bne.n	8004048 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0216 	bic.w	r2, r2, #22
 8003fe8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <HAL_DMA_IRQHandler+0x1da>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0208 	bic.w	r2, r2, #8
 8004018:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401e:	223f      	movs	r2, #63	; 0x3f
 8004020:	409a      	lsls	r2, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	d07e      	beq.n	800413c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
        }
        return;
 8004046:	e079      	b.n	800413c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01d      	beq.n	8004092 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	2b00      	cmp	r3, #0
 800406a:	d031      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	4798      	blx	r3
 8004074:	e02c      	b.n	80040d0 <HAL_DMA_IRQHandler+0x2a0>
 8004076:	bf00      	nop
 8004078:	20000000 	.word	0x20000000
 800407c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d023      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
 8004090:	e01e      	b.n	80040d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10f      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0210 	bic.w	r2, r2, #16
 80040ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d032      	beq.n	800413e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d022      	beq.n	800412a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2205      	movs	r2, #5
 80040e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	3301      	adds	r3, #1
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	429a      	cmp	r2, r3
 8004106:	d307      	bcc.n	8004118 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f2      	bne.n	80040fc <HAL_DMA_IRQHandler+0x2cc>
 8004116:	e000      	b.n	800411a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004118:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
 800413a:	e000      	b.n	800413e <HAL_DMA_IRQHandler+0x30e>
        return;
 800413c:	bf00      	nop
    }
  }
}
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004152:	b2db      	uxtb	r3, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800417c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d108      	bne.n	80041a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800419e:	e007      	b.n	80041b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	3b10      	subs	r3, #16
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <DMA_CalcBaseAndBitshift+0x64>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041d6:	4a13      	ldr	r2, [pc, #76]	; (8004224 <DMA_CalcBaseAndBitshift+0x68>)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d909      	bls.n	80041fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	659a      	str	r2, [r3, #88]	; 0x58
 80041fc:	e007      	b.n	800420e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	aaaaaaab 	.word	0xaaaaaaab
 8004224:	0800f46c 	.word	0x0800f46c

08004228 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11f      	bne.n	8004282 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d856      	bhi.n	80042f6 <DMA_CheckFifoParam+0xce>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <DMA_CheckFifoParam+0x28>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004261 	.word	0x08004261
 8004254:	08004273 	.word	0x08004273
 8004258:	08004261 	.word	0x08004261
 800425c:	080042f7 	.word	0x080042f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d046      	beq.n	80042fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004270:	e043      	b.n	80042fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800427a:	d140      	bne.n	80042fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004280:	e03d      	b.n	80042fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428a:	d121      	bne.n	80042d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d837      	bhi.n	8004302 <DMA_CheckFifoParam+0xda>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <DMA_CheckFifoParam+0x70>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042af 	.word	0x080042af
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	080042c1 	.word	0x080042c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e030      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d025      	beq.n	8004306 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042be:	e022      	b.n	8004306 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c8:	d11f      	bne.n	800430a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ce:	e01c      	b.n	800430a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d903      	bls.n	80042de <DMA_CheckFifoParam+0xb6>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d003      	beq.n	80042e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042dc:	e018      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
      break;
 80042e2:	e015      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00e      	beq.n	800430e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      break;
 80042f4:	e00b      	b.n	800430e <DMA_CheckFifoParam+0xe6>
      break;
 80042f6:	bf00      	nop
 80042f8:	e00a      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
 80042fc:	e008      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
      break;
 80042fe:	bf00      	nop
 8004300:	e006      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
      break;
 8004302:	bf00      	nop
 8004304:	e004      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
 8004308:	e002      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
      break;   
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <DMA_CheckFifoParam+0xe8>
      break;
 800430e:	bf00      	nop
    }
  } 
  
  return status; 
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop

08004320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e159      	b.n	80045f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800433c:	2201      	movs	r2, #1
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	429a      	cmp	r2, r3
 8004356:	f040 8148 	bne.w	80045ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d005      	beq.n	8004372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436e:	2b02      	cmp	r3, #2
 8004370:	d130      	bne.n	80043d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a8:	2201      	movs	r2, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d017      	beq.n	8004410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d123      	bne.n	8004464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	08da      	lsrs	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3208      	adds	r2, #8
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	08da      	lsrs	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3208      	adds	r2, #8
 800445e:	69b9      	ldr	r1, [r7, #24]
 8004460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0203 	and.w	r2, r3, #3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a2 	beq.w	80045ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	4b57      	ldr	r3, [pc, #348]	; (8004608 <HAL_GPIO_Init+0x2e8>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	4a56      	ldr	r2, [pc, #344]	; (8004608 <HAL_GPIO_Init+0x2e8>)
 80044b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b4:	6453      	str	r3, [r2, #68]	; 0x44
 80044b6:	4b54      	ldr	r3, [pc, #336]	; (8004608 <HAL_GPIO_Init+0x2e8>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c2:	4a52      	ldr	r2, [pc, #328]	; (800460c <HAL_GPIO_Init+0x2ec>)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3302      	adds	r3, #2
 80044ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a49      	ldr	r2, [pc, #292]	; (8004610 <HAL_GPIO_Init+0x2f0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_Init+0x202>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a48      	ldr	r2, [pc, #288]	; (8004614 <HAL_GPIO_Init+0x2f4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_Init+0x1fe>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a47      	ldr	r2, [pc, #284]	; (8004618 <HAL_GPIO_Init+0x2f8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_Init+0x1fa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a46      	ldr	r2, [pc, #280]	; (800461c <HAL_GPIO_Init+0x2fc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_Init+0x1f6>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a45      	ldr	r2, [pc, #276]	; (8004620 <HAL_GPIO_Init+0x300>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_Init+0x1f2>
 800450e:	2304      	movs	r3, #4
 8004510:	e008      	b.n	8004524 <HAL_GPIO_Init+0x204>
 8004512:	2307      	movs	r3, #7
 8004514:	e006      	b.n	8004524 <HAL_GPIO_Init+0x204>
 8004516:	2303      	movs	r3, #3
 8004518:	e004      	b.n	8004524 <HAL_GPIO_Init+0x204>
 800451a:	2302      	movs	r3, #2
 800451c:	e002      	b.n	8004524 <HAL_GPIO_Init+0x204>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_GPIO_Init+0x204>
 8004522:	2300      	movs	r3, #0
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	f002 0203 	and.w	r2, r2, #3
 800452a:	0092      	lsls	r2, r2, #2
 800452c:	4093      	lsls	r3, r2
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004534:	4935      	ldr	r1, [pc, #212]	; (800460c <HAL_GPIO_Init+0x2ec>)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	3302      	adds	r3, #2
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004542:	4b38      	ldr	r3, [pc, #224]	; (8004624 <HAL_GPIO_Init+0x304>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004566:	4a2f      	ldr	r2, [pc, #188]	; (8004624 <HAL_GPIO_Init+0x304>)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800456c:	4b2d      	ldr	r3, [pc, #180]	; (8004624 <HAL_GPIO_Init+0x304>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004590:	4a24      	ldr	r2, [pc, #144]	; (8004624 <HAL_GPIO_Init+0x304>)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <HAL_GPIO_Init+0x304>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	43db      	mvns	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ba:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <HAL_GPIO_Init+0x304>)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045c0:	4b18      	ldr	r3, [pc, #96]	; (8004624 <HAL_GPIO_Init+0x304>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045e4:	4a0f      	ldr	r2, [pc, #60]	; (8004624 <HAL_GPIO_Init+0x304>)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3301      	adds	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	f67f aea2 	bls.w	800433c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	3724      	adds	r7, #36	; 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	40013800 	.word	0x40013800
 8004610:	40020000 	.word	0x40020000
 8004614:	40020400 	.word	0x40020400
 8004618:	40020800 	.word	0x40020800
 800461c:	40020c00 	.word	0x40020c00
 8004620:	40021000 	.word	0x40021000
 8004624:	40013c00 	.word	0x40013c00

08004628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004638:	787b      	ldrb	r3, [r7, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004644:	e003      	b.n	800464e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004646:	887b      	ldrh	r3, [r7, #2]
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	619a      	str	r2, [r3, #24]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e12b      	b.n	80048c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fe f97e 	bl	8002984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046c0:	f003 fa98 	bl	8007bf4 <HAL_RCC_GetPCLK1Freq>
 80046c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4a81      	ldr	r2, [pc, #516]	; (80048d0 <HAL_I2C_Init+0x274>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d807      	bhi.n	80046e0 <HAL_I2C_Init+0x84>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a80      	ldr	r2, [pc, #512]	; (80048d4 <HAL_I2C_Init+0x278>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bf94      	ite	ls
 80046d8:	2301      	movls	r3, #1
 80046da:	2300      	movhi	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e006      	b.n	80046ee <HAL_I2C_Init+0x92>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a7d      	ldr	r2, [pc, #500]	; (80048d8 <HAL_I2C_Init+0x27c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bf94      	ite	ls
 80046e8:	2301      	movls	r3, #1
 80046ea:	2300      	movhi	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0e7      	b.n	80048c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a78      	ldr	r2, [pc, #480]	; (80048dc <HAL_I2C_Init+0x280>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	0c9b      	lsrs	r3, r3, #18
 8004700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <HAL_I2C_Init+0x274>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d802      	bhi.n	8004730 <HAL_I2C_Init+0xd4>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3301      	adds	r3, #1
 800472e:	e009      	b.n	8004744 <HAL_I2C_Init+0xe8>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	4a69      	ldr	r2, [pc, #420]	; (80048e0 <HAL_I2C_Init+0x284>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	099b      	lsrs	r3, r3, #6
 8004742:	3301      	adds	r3, #1
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	430b      	orrs	r3, r1
 800474a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004756:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	495c      	ldr	r1, [pc, #368]	; (80048d0 <HAL_I2C_Init+0x274>)
 8004760:	428b      	cmp	r3, r1
 8004762:	d819      	bhi.n	8004798 <HAL_I2C_Init+0x13c>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1e59      	subs	r1, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004778:	400b      	ands	r3, r1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_I2C_Init+0x138>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1e59      	subs	r1, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fbb1 f3f3 	udiv	r3, r1, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	e051      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004794:	2304      	movs	r3, #4
 8004796:	e04f      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d111      	bne.n	80047c4 <HAL_I2C_Init+0x168>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	440b      	add	r3, r1
 80047ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b2:	3301      	adds	r3, #1
 80047b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e012      	b.n	80047ea <HAL_I2C_Init+0x18e>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	1e58      	subs	r0, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	0099      	lsls	r1, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047da:	3301      	adds	r3, #1
 80047dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Init+0x196>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e022      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10e      	bne.n	8004818 <HAL_I2C_Init+0x1bc>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1e58      	subs	r0, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	440b      	add	r3, r1
 8004808:	fbb0 f3f3 	udiv	r3, r0, r3
 800480c:	3301      	adds	r3, #1
 800480e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	e00f      	b.n	8004838 <HAL_I2C_Init+0x1dc>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1e58      	subs	r0, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	0099      	lsls	r1, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	fbb0 f3f3 	udiv	r3, r0, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	6809      	ldr	r1, [r1, #0]
 800483c:	4313      	orrs	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6911      	ldr	r1, [r2, #16]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68d2      	ldr	r2, [r2, #12]
 8004872:	4311      	orrs	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	430b      	orrs	r3, r1
 800487a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	000186a0 	.word	0x000186a0
 80048d4:	001e847f 	.word	0x001e847f
 80048d8:	003d08ff 	.word	0x003d08ff
 80048dc:	431bde83 	.word	0x431bde83
 80048e0:	10624dd3 	.word	0x10624dd3

080048e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	461a      	mov	r2, r3
 80048f0:	460b      	mov	r3, r1
 80048f2:	817b      	strh	r3, [r7, #10]
 80048f4:	4613      	mov	r3, r2
 80048f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f8:	f7fe fbfe 	bl	80030f8 <HAL_GetTick>
 80048fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b20      	cmp	r3, #32
 8004908:	f040 80e0 	bne.w	8004acc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	2319      	movs	r3, #25
 8004912:	2201      	movs	r2, #1
 8004914:	4970      	ldr	r1, [pc, #448]	; (8004ad8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f002 fad2 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004922:	2302      	movs	r3, #2
 8004924:	e0d3      	b.n	8004ace <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_I2C_Master_Transmit+0x50>
 8004930:	2302      	movs	r3, #2
 8004932:	e0cc      	b.n	8004ace <HAL_I2C_Master_Transmit+0x1ea>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b01      	cmp	r3, #1
 8004948:	d007      	beq.n	800495a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2221      	movs	r2, #33	; 0x21
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2210      	movs	r2, #16
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	893a      	ldrh	r2, [r7, #8]
 800498a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a50      	ldr	r2, [pc, #320]	; (8004adc <HAL_I2C_Master_Transmit+0x1f8>)
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800499c:	8979      	ldrh	r1, [r7, #10]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f001 ffe4 	bl	8006970 <I2C_MasterRequestWrite>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e08d      	b.n	8004ace <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049c8:	e066      	b.n	8004a98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	6a39      	ldr	r1, [r7, #32]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f002 fb4c 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d107      	bne.n	80049f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e06b      	b.n	8004ace <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	781a      	ldrb	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d11b      	bne.n	8004a6c <HAL_I2C_Master_Transmit+0x188>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d017      	beq.n	8004a6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	6a39      	ldr	r1, [r7, #32]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f002 fb3c 	bl	80070ee <I2C_WaitOnBTFFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d107      	bne.n	8004a94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e01a      	b.n	8004ace <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d194      	bne.n	80049ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	00100002 	.word	0x00100002
 8004adc:	ffff0000 	.word	0xffff0000

08004ae0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	461a      	mov	r2, r3
 8004aec:	460b      	mov	r3, r1
 8004aee:	817b      	strh	r3, [r7, #10]
 8004af0:	4613      	mov	r3, r2
 8004af2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	f040 808d 	bne.w	8004c20 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b06:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_I2C_Master_Receive_IT+0x150>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	08db      	lsrs	r3, r3, #3
 8004b0c:	4a49      	ldr	r2, [pc, #292]	; (8004c34 <HAL_I2C_Master_Receive_IT+0x154>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	0a1a      	lsrs	r2, r3, #8
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e063      	b.n	8004c22 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d0db      	beq.n	8004b20 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Master_Receive_IT+0x96>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e055      	b.n	8004c22 <HAL_I2C_Master_Receive_IT+0x142>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d007      	beq.n	8004b9c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2222      	movs	r2, #34	; 0x22
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	893a      	ldrh	r2, [r7, #8]
 8004bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <HAL_I2C_Master_Receive_IT+0x158>)
 8004bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004bde:	897a      	ldrh	r2, [r7, #10]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004bfa:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000
 8004c34:	14f8b589 	.word	0x14f8b589
 8004c38:	ffff0000 	.word	0xffff0000

08004c3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	4608      	mov	r0, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	817b      	strh	r3, [r7, #10]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	813b      	strh	r3, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c56:	f7fe fa4f 	bl	80030f8 <HAL_GetTick>
 8004c5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	f040 80d9 	bne.w	8004e1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	2319      	movs	r3, #25
 8004c70:	2201      	movs	r2, #1
 8004c72:	496d      	ldr	r1, [pc, #436]	; (8004e28 <HAL_I2C_Mem_Write+0x1ec>)
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f002 f923 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c80:	2302      	movs	r3, #2
 8004c82:	e0cc      	b.n	8004e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_I2C_Mem_Write+0x56>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e0c5      	b.n	8004e1e <HAL_I2C_Mem_Write+0x1e2>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d007      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2221      	movs	r2, #33	; 0x21
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2240      	movs	r2, #64	; 0x40
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a4d      	ldr	r2, [pc, #308]	; (8004e2c <HAL_I2C_Mem_Write+0x1f0>)
 8004cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cfa:	88f8      	ldrh	r0, [r7, #6]
 8004cfc:	893a      	ldrh	r2, [r7, #8]
 8004cfe:	8979      	ldrh	r1, [r7, #10]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4603      	mov	r3, r0
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f001 feb2 	bl	8006a74 <I2C_RequestMemoryWrite>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d052      	beq.n	8004dbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e081      	b.n	8004e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f002 f9a4 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d107      	bne.n	8004d42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e06b      	b.n	8004e1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d11b      	bne.n	8004dbc <HAL_I2C_Mem_Write+0x180>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d017      	beq.n	8004dbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1aa      	bne.n	8004d1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f002 f990 	bl	80070ee <I2C_WaitOnBTFFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d107      	bne.n	8004dec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e016      	b.n	8004e1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e000      	b.n	8004e1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
  }
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	00100002 	.word	0x00100002
 8004e2c:	ffff0000 	.word	0xffff0000

08004e30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	; 0x30
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	817b      	strh	r3, [r7, #10]
 8004e42:	460b      	mov	r3, r1
 8004e44:	813b      	strh	r3, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e4a:	f7fe f955 	bl	80030f8 <HAL_GetTick>
 8004e4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	f040 8208 	bne.w	800526e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2319      	movs	r3, #25
 8004e64:	2201      	movs	r2, #1
 8004e66:	497b      	ldr	r1, [pc, #492]	; (8005054 <HAL_I2C_Mem_Read+0x224>)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f002 f829 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
 8004e76:	e1fb      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_I2C_Mem_Read+0x56>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e1f4      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d007      	beq.n	8004eac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2222      	movs	r2, #34	; 0x22
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a5b      	ldr	r2, [pc, #364]	; (8005058 <HAL_I2C_Mem_Read+0x228>)
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eee:	88f8      	ldrh	r0, [r7, #6]
 8004ef0:	893a      	ldrh	r2, [r7, #8]
 8004ef2:	8979      	ldrh	r1, [r7, #10]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	4603      	mov	r3, r0
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f001 fe4e 	bl	8006ba0 <I2C_RequestMemoryRead>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e1b0      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d113      	bne.n	8004f3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f16:	2300      	movs	r3, #0
 8004f18:	623b      	str	r3, [r7, #32]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	623b      	str	r3, [r7, #32]
 8004f2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e184      	b.n	8005248 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d11b      	bne.n	8004f7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	e164      	b.n	8005248 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d11b      	bne.n	8004fbe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	e144      	b.n	8005248 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fd4:	e138      	b.n	8005248 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	f200 80f1 	bhi.w	80051c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d123      	bne.n	8005030 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f002 f8f1 	bl	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e139      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800502e:	e10b      	b.n	8005248 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	2b02      	cmp	r3, #2
 8005036:	d14e      	bne.n	80050d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	2200      	movs	r2, #0
 8005040:	4906      	ldr	r1, [pc, #24]	; (800505c <HAL_I2C_Mem_Read+0x22c>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f001 ff3c 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e10e      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
 8005052:	bf00      	nop
 8005054:	00100002 	.word	0x00100002
 8005058:	ffff0000 	.word	0xffff0000
 800505c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050d4:	e0b8      	b.n	8005248 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	2200      	movs	r2, #0
 80050de:	4966      	ldr	r1, [pc, #408]	; (8005278 <HAL_I2C_Mem_Read+0x448>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f001 feed 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0bf      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2200      	movs	r2, #0
 800513a:	494f      	ldr	r1, [pc, #316]	; (8005278 <HAL_I2C_Mem_Read+0x448>)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f001 febf 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e091      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051c0:	e042      	b.n	8005248 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f002 f804 	bl	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e04c      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b04      	cmp	r3, #4
 8005214:	d118      	bne.n	8005248 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	2b00      	cmp	r3, #0
 800524e:	f47f aec2 	bne.w	8004fd6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
  }
}
 8005270:	4618      	mov	r0, r3
 8005272:	3728      	adds	r7, #40	; 0x28
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	00010004 	.word	0x00010004

0800527c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	4608      	mov	r0, r1
 8005286:	4611      	mov	r1, r2
 8005288:	461a      	mov	r2, r3
 800528a:	4603      	mov	r3, r0
 800528c:	817b      	strh	r3, [r7, #10]
 800528e:	460b      	mov	r3, r1
 8005290:	813b      	strh	r3, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	f040 809a 	bne.w	80053dc <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80052a8:	4b50      	ldr	r3, [pc, #320]	; (80053ec <HAL_I2C_Mem_Read_IT+0x170>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	08db      	lsrs	r3, r3, #3
 80052ae:	4a50      	ldr	r2, [pc, #320]	; (80053f0 <HAL_I2C_Mem_Read_IT+0x174>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	0a1a      	lsrs	r2, r3, #8
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009a      	lsls	r2, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d116      	bne.n	80052fc <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e070      	b.n	80053de <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d0db      	beq.n	80052c2 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_I2C_Mem_Read_IT+0x9c>
 8005314:	2302      	movs	r3, #2
 8005316:	e062      	b.n	80053de <HAL_I2C_Mem_Read_IT+0x162>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b01      	cmp	r3, #1
 800532c:	d007      	beq.n	800533e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800534c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2222      	movs	r2, #34	; 0x22
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2240      	movs	r2, #64	; 0x40
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a3a      	ldr	r2, [r7, #32]
 8005368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800536e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <HAL_I2C_Mem_Read_IT+0x178>)
 800537e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005380:	897a      	ldrh	r2, [r7, #10]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005386:	893a      	ldrh	r2, [r7, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800538c:	88fa      	ldrh	r2, [r7, #6]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80053d6:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e000      	b.n	80053de <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000000 	.word	0x20000000
 80053f0:	14f8b589 	.word	0x14f8b589
 80053f4:	ffff0000 	.word	0xffff0000

080053f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005418:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b10      	cmp	r3, #16
 8005426:	d003      	beq.n	8005430 <HAL_I2C_EV_IRQHandler+0x38>
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	f040 80c1 	bne.w	80055b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <HAL_I2C_EV_IRQHandler+0x6e>
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005450:	d003      	beq.n	800545a <HAL_I2C_EV_IRQHandler+0x62>
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005458:	d101      	bne.n	800545e <HAL_I2C_EV_IRQHandler+0x66>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <HAL_I2C_EV_IRQHandler+0x68>
 800545e:	2300      	movs	r3, #0
 8005460:	2b01      	cmp	r3, #1
 8005462:	f000 8132 	beq.w	80056ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0x92>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	0a5b      	lsrs	r3, r3, #9
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d006      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 ff2e 	bl	80072de <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fcc8 	bl	8005e18 <I2C_Master_SB>
 8005488:	e092      	b.n	80055b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	08db      	lsrs	r3, r3, #3
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <HAL_I2C_EV_IRQHandler+0xb2>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	0a5b      	lsrs	r3, r3, #9
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fd3e 	bl	8005f24 <I2C_Master_ADD10>
 80054a8:	e082      	b.n	80055b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <HAL_I2C_EV_IRQHandler+0xd2>
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	0a5b      	lsrs	r3, r3, #9
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fd58 	bl	8005f78 <I2C_Master_ADDR>
 80054c8:	e072      	b.n	80055b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d03b      	beq.n	800554e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e4:	f000 80f3 	beq.w	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	09db      	lsrs	r3, r3, #7
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00f      	beq.n	8005514 <HAL_I2C_EV_IRQHandler+0x11c>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	0a9b      	lsrs	r3, r3, #10
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <HAL_I2C_EV_IRQHandler+0x11c>
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	089b      	lsrs	r3, r3, #2
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f938 	bl	8005782 <I2C_MasterTransmit_TXE>
 8005512:	e04d      	b.n	80055b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80d6 	beq.w	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	0a5b      	lsrs	r3, r3, #9
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80cf 	beq.w	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005530:	7bbb      	ldrb	r3, [r7, #14]
 8005532:	2b21      	cmp	r3, #33	; 0x21
 8005534:	d103      	bne.n	800553e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f9bf 	bl	80058ba <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800553c:	e0c7      	b.n	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	f040 80c4 	bne.w	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa2d 	bl	80059a6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800554c:	e0bf      	b.n	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555c:	f000 80b7 	beq.w	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	099b      	lsrs	r3, r3, #6
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00f      	beq.n	800558c <HAL_I2C_EV_IRQHandler+0x194>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	0a9b      	lsrs	r3, r3, #10
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <HAL_I2C_EV_IRQHandler+0x194>
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	089b      	lsrs	r3, r3, #2
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d103      	bne.n	800558c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 faa2 	bl	8005ace <I2C_MasterReceive_RXNE>
 800558a:	e011      	b.n	80055b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	089b      	lsrs	r3, r3, #2
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 809a 	beq.w	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	0a5b      	lsrs	r3, r3, #9
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8093 	beq.w	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fb4b 	bl	8005c44 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055ae:	e08e      	b.n	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80055b0:	e08d      	b.n	80056ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	e007      	b.n	80055d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d012      	beq.n	8005606 <HAL_I2C_EV_IRQHandler+0x20e>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	0a5b      	lsrs	r3, r3, #9
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00c      	beq.n	8005606 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 ff09 	bl	8006416 <I2C_Slave_ADDR>
 8005604:	e066      	b.n	80056d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_I2C_EV_IRQHandler+0x22e>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	0a5b      	lsrs	r3, r3, #9
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 ff44 	bl	80064ac <I2C_Slave_STOPF>
 8005624:	e056      	b.n	80056d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	2b21      	cmp	r3, #33	; 0x21
 800562a:	d002      	beq.n	8005632 <HAL_I2C_EV_IRQHandler+0x23a>
 800562c:	7bbb      	ldrb	r3, [r7, #14]
 800562e:	2b29      	cmp	r3, #41	; 0x29
 8005630:	d125      	bne.n	800567e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	09db      	lsrs	r3, r3, #7
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00f      	beq.n	800565e <HAL_I2C_EV_IRQHandler+0x266>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	0a9b      	lsrs	r3, r3, #10
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_I2C_EV_IRQHandler+0x266>
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	089b      	lsrs	r3, r3, #2
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fe1f 	bl	800629a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800565c:	e039      	b.n	80056d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d033      	beq.n	80056d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	0a5b      	lsrs	r3, r3, #9
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d02d      	beq.n	80056d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fe4c 	bl	8006314 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800567c:	e029      	b.n	80056d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	099b      	lsrs	r3, r3, #6
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00f      	beq.n	80056aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	0a9b      	lsrs	r3, r3, #10
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fe57 	bl	8006356 <I2C_SlaveReceive_RXNE>
 80056a8:	e014      	b.n	80056d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	089b      	lsrs	r3, r3, #2
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	0a5b      	lsrs	r3, r3, #9
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fe85 	bl	80063d2 <I2C_SlaveReceive_BTF>
 80056c8:	e004      	b.n	80056d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	70fb      	strb	r3, [r7, #3]
 8005722:	4613      	mov	r3, r2
 8005724:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005798:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d150      	bne.n	800584a <I2C_MasterTransmit_TXE+0xc8>
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b21      	cmp	r3, #33	; 0x21
 80057ac:	d14d      	bne.n	800584a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d01d      	beq.n	80057f0 <I2C_MasterTransmit_TXE+0x6e>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d01a      	beq.n	80057f0 <I2C_MasterTransmit_TXE+0x6e>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057c0:	d016      	beq.n	80057f0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057d0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2211      	movs	r2, #17
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff76 	bl	80056da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057ee:	e060      	b.n	80058b2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057fe:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d107      	bne.n	800583a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff ff87 	bl	8005746 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005838:	e03b      	b.n	80058b2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff ff49 	bl	80056da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005848:	e033      	b.n	80058b2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b21      	cmp	r3, #33	; 0x21
 800584e:	d005      	beq.n	800585c <I2C_MasterTransmit_TXE+0xda>
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d12d      	bne.n	80058b2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2b22      	cmp	r3, #34	; 0x22
 800585a:	d12a      	bne.n	80058b2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d108      	bne.n	8005878 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005874:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005876:	e01c      	b.n	80058b2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d103      	bne.n	800588c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f88e 	bl	80059a6 <I2C_MemoryTransmit_TXE_BTF>
}
 800588a:	e012      	b.n	80058b2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058b0:	e7ff      	b.n	80058b2 <I2C_MasterTransmit_TXE+0x130>
 80058b2:	bf00      	nop
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b21      	cmp	r3, #33	; 0x21
 80058d2:	d164      	bne.n	800599e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d012      	beq.n	8005904 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005902:	e04c      	b.n	800599e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b08      	cmp	r3, #8
 8005908:	d01d      	beq.n	8005946 <I2C_MasterTransmit_BTF+0x8c>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b20      	cmp	r3, #32
 800590e:	d01a      	beq.n	8005946 <I2C_MasterTransmit_BTF+0x8c>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005916:	d016      	beq.n	8005946 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005926:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2211      	movs	r2, #17
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fecb 	bl	80056da <HAL_I2C_MasterTxCpltCallback>
}
 8005944:	e02b      	b.n	800599e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005954:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005964:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d107      	bne.n	8005990 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fedc 	bl	8005746 <HAL_I2C_MemTxCpltCallback>
}
 800598e:	e006      	b.n	800599e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff fe9e 	bl	80056da <HAL_I2C_MasterTxCpltCallback>
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d11d      	bne.n	80059fa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10b      	bne.n	80059de <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d6:	1c9a      	adds	r2, r3, #2
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80059dc:	e073      	b.n	8005ac6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	121b      	asrs	r3, r3, #8
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059f8:	e065      	b.n	8005ac6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10b      	bne.n	8005a1a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a18:	e055      	b.n	8005ac6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d151      	bne.n	8005ac6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b22      	cmp	r3, #34	; 0x22
 8005a26:	d10d      	bne.n	8005a44 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a36:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a42:	e040      	b.n	8005ac6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d015      	beq.n	8005a7a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b21      	cmp	r3, #33	; 0x21
 8005a52:	d112      	bne.n	8005a7a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a78:	e025      	b.n	8005ac6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d120      	bne.n	8005ac6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b21      	cmp	r3, #33	; 0x21
 8005a88:	d11d      	bne.n	8005ac6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a98:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fe40 	bl	8005746 <HAL_I2C_MemTxCpltCallback>
}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b22      	cmp	r3, #34	; 0x22
 8005ae0:	f040 80ac 	bne.w	8005c3c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d921      	bls.n	8005b36 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	f040 808c 	bne.w	8005c3c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b32:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005b34:	e082      	b.n	8005c3c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d075      	beq.n	8005c2a <I2C_MasterReceive_RXNE+0x15c>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d002      	beq.n	8005b4a <I2C_MasterReceive_RXNE+0x7c>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d16f      	bne.n	8005c2a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fb10 	bl	8007170 <I2C_WaitOnSTOPRequestThroughIT>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d142      	bne.n	8005bdc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b64:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b74:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d10a      	bne.n	8005bc6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc f968 	bl	8001e94 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bc4:	e03a      	b.n	8005c3c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2212      	movs	r2, #18
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fc f9af 	bl	8001f38 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bda:	e02f      	b.n	8005c3c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fd99 	bl	800575a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c28:	e008      	b.n	8005c3c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c38:	605a      	str	r2, [r3, #4]
}
 8005c3a:	e7ff      	b.n	8005c3c <I2C_MasterReceive_RXNE+0x16e>
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d11b      	bne.n	8005c94 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c92:	e0bd      	b.n	8005e10 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d129      	bne.n	8005cf2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d00a      	beq.n	8005cca <I2C_MasterReceive_BTF+0x86>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d007      	beq.n	8005cca <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cf0:	e08e      	b.n	8005e10 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d176      	bne.n	8005dea <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d002      	beq.n	8005d08 <I2C_MasterReceive_BTF+0xc4>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d108      	bne.n	8005d1a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e019      	b.n	8005d4e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d002      	beq.n	8005d26 <I2C_MasterReceive_BTF+0xe2>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d108      	bne.n	8005d38 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e00a      	b.n	8005d4e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d007      	beq.n	8005d4e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005da8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d10a      	bne.n	8005dd4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fc f861 	bl	8001e94 <HAL_I2C_MemRxCpltCallback>
}
 8005dd2:	e01d      	b.n	8005e10 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2212      	movs	r2, #18
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fc f8a8 	bl	8001f38 <HAL_I2C_MasterRxCpltCallback>
}
 8005de8:	e012      	b.n	8005e10 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d117      	bne.n	8005e5c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e44:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005e46:	e067      	b.n	8005f18 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	611a      	str	r2, [r3, #16]
}
 8005e5a:	e05d      	b.n	8005f18 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e64:	d133      	bne.n	8005ece <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b21      	cmp	r3, #33	; 0x21
 8005e70:	d109      	bne.n	8005e86 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e82:	611a      	str	r2, [r3, #16]
 8005e84:	e008      	b.n	8005e98 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <I2C_Master_SB+0x92>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d108      	bne.n	8005ebc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d032      	beq.n	8005f18 <I2C_Master_SB+0x100>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02d      	beq.n	8005f18 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eca:	605a      	str	r2, [r3, #4]
}
 8005ecc:	e024      	b.n	8005f18 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10e      	bne.n	8005ef4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	11db      	asrs	r3, r3, #7
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f003 0306 	and.w	r3, r3, #6
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	f063 030f 	orn	r3, r3, #15
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	611a      	str	r2, [r3, #16]
}
 8005ef2:	e011      	b.n	8005f18 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d10d      	bne.n	8005f18 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	11db      	asrs	r3, r3, #7
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f003 0306 	and.w	r3, r3, #6
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f063 030e 	orn	r3, r3, #14
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <I2C_Master_ADD10+0x26>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00c      	beq.n	8005f6c <I2C_Master_ADD10+0x48>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f6a:	605a      	str	r2, [r3, #4]
  }
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b091      	sub	sp, #68	; 0x44
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b22      	cmp	r3, #34	; 0x22
 8005fa0:	f040 8169 	bne.w	8006276 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10f      	bne.n	8005fcc <I2C_Master_ADDR+0x54>
 8005fac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d10b      	bne.n	8005fcc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	e160      	b.n	800628e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d11d      	bne.n	8006010 <I2C_Master_ADDR+0x98>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fdc:	d118      	bne.n	8006010 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006002:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	651a      	str	r2, [r3, #80]	; 0x50
 800600e:	e13e      	b.n	800628e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d113      	bne.n	8006042 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601a:	2300      	movs	r3, #0
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e115      	b.n	800626e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	f040 808a 	bne.w	8006162 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006054:	d137      	bne.n	80060c6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006064:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006074:	d113      	bne.n	800609e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006086:	2300      	movs	r3, #0
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	e0e7      	b.n	800626e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609e:	2300      	movs	r3, #0
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	623b      	str	r3, [r7, #32]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e0d3      	b.n	800626e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d02e      	beq.n	800612a <I2C_Master_ADDR+0x1b2>
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d02b      	beq.n	800612a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d4:	2b12      	cmp	r3, #18
 80060d6:	d102      	bne.n	80060de <I2C_Master_ADDR+0x166>
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d125      	bne.n	800612a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d00e      	beq.n	8006102 <I2C_Master_ADDR+0x18a>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d00b      	beq.n	8006102 <I2C_Master_ADDR+0x18a>
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d008      	beq.n	8006102 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e007      	b.n	8006112 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006110:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	61fb      	str	r3, [r7, #28]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	e0a1      	b.n	800626e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006138:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613a:	2300      	movs	r3, #0
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	e085      	b.n	800626e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d14d      	bne.n	8006208 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	2b04      	cmp	r3, #4
 8006170:	d016      	beq.n	80061a0 <I2C_Master_ADDR+0x228>
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b02      	cmp	r3, #2
 8006176:	d013      	beq.n	80061a0 <I2C_Master_ADDR+0x228>
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	2b10      	cmp	r3, #16
 800617c:	d010      	beq.n	80061a0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e007      	b.n	80061b0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ae:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061be:	d117      	bne.n	80061f0 <I2C_Master_ADDR+0x278>
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061c6:	d00b      	beq.n	80061e0 <I2C_Master_ADDR+0x268>
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d008      	beq.n	80061e0 <I2C_Master_ADDR+0x268>
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d005      	beq.n	80061e0 <I2C_Master_ADDR+0x268>
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	d002      	beq.n	80061e0 <I2C_Master_ADDR+0x268>
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d107      	bne.n	80061f0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061ee:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	e032      	b.n	800626e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006216:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006226:	d117      	bne.n	8006258 <I2C_Master_ADDR+0x2e0>
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800622e:	d00b      	beq.n	8006248 <I2C_Master_ADDR+0x2d0>
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	2b01      	cmp	r3, #1
 8006234:	d008      	beq.n	8006248 <I2C_Master_ADDR+0x2d0>
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	2b08      	cmp	r3, #8
 800623a:	d005      	beq.n	8006248 <I2C_Master_ADDR+0x2d0>
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	2b10      	cmp	r3, #16
 8006240:	d002      	beq.n	8006248 <I2C_Master_ADDR+0x2d0>
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	2b20      	cmp	r3, #32
 8006246:	d107      	bne.n	8006258 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006256:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006274:	e00b      	b.n	800628e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
}
 800628c:	e7ff      	b.n	800628e <I2C_Master_ADDR+0x316>
 800628e:	bf00      	nop
 8006290:	3744      	adds	r7, #68	; 0x44
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d02b      	beq.n	800630c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d114      	bne.n	800630c <I2C_SlaveTransmit_TXE+0x72>
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b29      	cmp	r3, #41	; 0x29
 80062e6:	d111      	bne.n	800630c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2221      	movs	r2, #33	; 0x21
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2228      	movs	r2, #40	; 0x28
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff f9f1 	bl	80056ee <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d011      	beq.n	800634a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	781a      	ldrb	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006364:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d02c      	beq.n	80063ca <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d114      	bne.n	80063ca <I2C_SlaveReceive_RXNE+0x74>
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b2a      	cmp	r3, #42	; 0x2a
 80063a4:	d111      	bne.n	80063ca <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2222      	movs	r2, #34	; 0x22
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2228      	movs	r2, #40	; 0x28
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff f99c 	bl	8005702 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d012      	beq.n	800640a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006420:	2300      	movs	r3, #0
 8006422:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006430:	2b28      	cmp	r3, #40	; 0x28
 8006432:	d127      	bne.n	8006484 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006442:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	089b      	lsrs	r3, r3, #2
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	09db      	lsrs	r3, r3, #7
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	81bb      	strh	r3, [r7, #12]
 8006466:	e002      	b.n	800646e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006476:	89ba      	ldrh	r2, [r7, #12]
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff f94a 	bl	8005716 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006482:	e00e      	b.n	80064a2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006484:	2300      	movs	r3, #0
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006508:	d172      	bne.n	80065f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	2b22      	cmp	r3, #34	; 0x22
 800650e:	d002      	beq.n	8006516 <I2C_Slave_STOPF+0x6a>
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b2a      	cmp	r3, #42	; 0x2a
 8006514:	d135      	bne.n	8006582 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0204 	orr.w	r2, r3, #4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006548:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd fdf8 	bl	8004144 <HAL_DMA_GetState>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d049      	beq.n	80065ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	4a69      	ldr	r2, [pc, #420]	; (8006704 <I2C_Slave_STOPF+0x258>)
 8006560:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	4618      	mov	r0, r3
 8006568:	f7fd fc40 	bl	8003dec <HAL_DMA_Abort_IT>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d03d      	beq.n	80065ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006580:	e035      	b.n	80065ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b29a      	uxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fd fdc2 	bl	8004144 <HAL_DMA_GetState>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d014      	beq.n	80065f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ca:	4a4e      	ldr	r2, [pc, #312]	; (8006704 <I2C_Slave_STOPF+0x258>)
 80065cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fc0a 	bl	8003dec <HAL_DMA_Abort_IT>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	e000      	b.n	80065f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d03e      	beq.n	8006678 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b04      	cmp	r3, #4
 8006606:	d112      	bne.n	800662e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d112      	bne.n	8006662 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	f043 0204 	orr.w	r2, r3, #4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f843 	bl	800670c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006686:	e039      	b.n	80066fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	2b2a      	cmp	r3, #42	; 0x2a
 800668c:	d109      	bne.n	80066a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2228      	movs	r2, #40	; 0x28
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff f830 	bl	8005702 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b28      	cmp	r3, #40	; 0x28
 80066ac:	d111      	bne.n	80066d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a15      	ldr	r2, [pc, #84]	; (8006708 <I2C_Slave_STOPF+0x25c>)
 80066b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff f831 	bl	8005732 <HAL_I2C_ListenCpltCallback>
}
 80066d0:	e014      	b.n	80066fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	2b22      	cmp	r3, #34	; 0x22
 80066d8:	d002      	beq.n	80066e0 <I2C_Slave_STOPF+0x234>
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b22      	cmp	r3, #34	; 0x22
 80066de:	d10d      	bne.n	80066fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff f803 	bl	8005702 <HAL_I2C_SlaveRxCpltCallback>
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	08006d71 	.word	0x08006d71
 8006708:	ffff0000 	.word	0xffff0000

0800670c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006722:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	2b10      	cmp	r3, #16
 8006728:	d002      	beq.n	8006730 <I2C_ITError+0x24>
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d10a      	bne.n	8006746 <I2C_ITError+0x3a>
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2b22      	cmp	r3, #34	; 0x22
 8006734:	d107      	bne.n	8006746 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006744:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800674c:	2b28      	cmp	r3, #40	; 0x28
 800674e:	d107      	bne.n	8006760 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2228      	movs	r2, #40	; 0x28
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800675e:	e015      	b.n	800678c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676e:	d00a      	beq.n	8006786 <I2C_ITError+0x7a>
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b60      	cmp	r3, #96	; 0x60
 8006774:	d007      	beq.n	8006786 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800679a:	d162      	bne.n	8006862 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d020      	beq.n	80067fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	4a6a      	ldr	r2, [pc, #424]	; (8006968 <I2C_ITError+0x25c>)
 80067c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fd fb10 	bl	8003dec <HAL_DMA_Abort_IT>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 8089 	beq.w	80068e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067f6:	4610      	mov	r0, r2
 80067f8:	4798      	blx	r3
 80067fa:	e074      	b.n	80068e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	4a59      	ldr	r2, [pc, #356]	; (8006968 <I2C_ITError+0x25c>)
 8006802:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	4618      	mov	r0, r3
 800680a:	f7fd faef 	bl	8003dec <HAL_DMA_Abort_IT>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d068      	beq.n	80068e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d10b      	bne.n	800683a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
 8006860:	e041      	b.n	80068e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b60      	cmp	r3, #96	; 0x60
 800686c:	d125      	bne.n	80068ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d10b      	bne.n	80068a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fe ff5b 	bl	800576e <HAL_I2C_AbortCpltCallback>
 80068b8:	e015      	b.n	80068e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d10b      	bne.n	80068e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7fe ff3a 	bl	800575a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10e      	bne.n	8006914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d109      	bne.n	8006914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006910:	2b00      	cmp	r3, #0
 8006912:	d007      	beq.n	8006924 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006922:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b04      	cmp	r3, #4
 8006936:	d113      	bne.n	8006960 <I2C_ITError+0x254>
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b28      	cmp	r3, #40	; 0x28
 800693c:	d110      	bne.n	8006960 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a0a      	ldr	r2, [pc, #40]	; (800696c <I2C_ITError+0x260>)
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fe fee9 	bl	8005732 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	08006d71 	.word	0x08006d71
 800696c:	ffff0000 	.word	0xffff0000

08006970 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	460b      	mov	r3, r1
 800697e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b08      	cmp	r3, #8
 800698a:	d006      	beq.n	800699a <I2C_MasterRequestWrite+0x2a>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d003      	beq.n	800699a <I2C_MasterRequestWrite+0x2a>
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006998:	d108      	bne.n	80069ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e00b      	b.n	80069c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	2b12      	cmp	r3, #18
 80069b2:	d107      	bne.n	80069c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fa75 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00d      	beq.n	80069f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ea:	d103      	bne.n	80069f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e035      	b.n	8006a64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a00:	d108      	bne.n	8006a14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a02:	897b      	ldrh	r3, [r7, #10]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a10:	611a      	str	r2, [r3, #16]
 8006a12:	e01b      	b.n	8006a4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a14:	897b      	ldrh	r3, [r7, #10]
 8006a16:	11db      	asrs	r3, r3, #7
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f003 0306 	and.w	r3, r3, #6
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f063 030f 	orn	r3, r3, #15
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	490e      	ldr	r1, [pc, #56]	; (8006a6c <I2C_MasterRequestWrite+0xfc>)
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fa9b 	bl	8006f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e010      	b.n	8006a64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a42:	897b      	ldrh	r3, [r7, #10]
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	4907      	ldr	r1, [pc, #28]	; (8006a70 <I2C_MasterRequestWrite+0x100>)
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fa8b 	bl	8006f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	00010008 	.word	0x00010008
 8006a70:	00010002 	.word	0x00010002

08006a74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	4611      	mov	r1, r2
 8006a80:	461a      	mov	r2, r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	817b      	strh	r3, [r7, #10]
 8006a86:	460b      	mov	r3, r1
 8006a88:	813b      	strh	r3, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fa08 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac4:	d103      	bne.n	8006ace <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e05f      	b.n	8006b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ad2:	897b      	ldrh	r3, [r7, #10]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	492d      	ldr	r1, [pc, #180]	; (8006b9c <I2C_RequestMemoryWrite+0x128>)
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fa40 	bl	8006f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e04c      	b.n	8006b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b10:	6a39      	ldr	r1, [r7, #32]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 faaa 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00d      	beq.n	8006b3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d107      	bne.n	8006b36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e02b      	b.n	8006b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d105      	bne.n	8006b4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b40:	893b      	ldrh	r3, [r7, #8]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	611a      	str	r2, [r3, #16]
 8006b4a:	e021      	b.n	8006b90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b4c:	893b      	ldrh	r3, [r7, #8]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5c:	6a39      	ldr	r1, [r7, #32]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 fa84 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d107      	bne.n	8006b82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e005      	b.n	8006b92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b86:	893b      	ldrh	r3, [r7, #8]
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	00010002 	.word	0x00010002

08006ba0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	817b      	strh	r3, [r7, #10]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	813b      	strh	r3, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f96a 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c00:	d103      	bne.n	8006c0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e0aa      	b.n	8006d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c0e:	897b      	ldrh	r3, [r7, #10]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	6a3a      	ldr	r2, [r7, #32]
 8006c22:	4952      	ldr	r1, [pc, #328]	; (8006d6c <I2C_RequestMemoryRead+0x1cc>)
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f9a2 	bl	8006f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e097      	b.n	8006d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c4c:	6a39      	ldr	r1, [r7, #32]
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fa0c 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00d      	beq.n	8006c76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d107      	bne.n	8006c72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e076      	b.n	8006d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d105      	bne.n	8006c88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c7c:	893b      	ldrh	r3, [r7, #8]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	611a      	str	r2, [r3, #16]
 8006c86:	e021      	b.n	8006ccc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c88:	893b      	ldrh	r3, [r7, #8]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c98:	6a39      	ldr	r1, [r7, #32]
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f9e6 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00d      	beq.n	8006cc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d107      	bne.n	8006cbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e050      	b.n	8006d64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc2:	893b      	ldrh	r3, [r7, #8]
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cce:	6a39      	ldr	r1, [r7, #32]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f9cb 	bl	800706c <I2C_WaitOnTXEFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00d      	beq.n	8006cf8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d107      	bne.n	8006cf4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e035      	b.n	8006d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f8d3 	bl	8006ec0 <I2C_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00d      	beq.n	8006d3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2e:	d103      	bne.n	8006d38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e013      	b.n	8006d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d3c:	897b      	ldrh	r3, [r7, #10]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	f043 0301 	orr.w	r3, r3, #1
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	6a3a      	ldr	r2, [r7, #32]
 8006d50:	4906      	ldr	r1, [pc, #24]	; (8006d6c <I2C_RequestMemoryRead+0x1cc>)
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f90b 	bl	8006f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	00010002 	.word	0x00010002

08006d70 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d88:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d8a:	4b4b      	ldr	r3, [pc, #300]	; (8006eb8 <I2C_DMAAbort+0x148>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	4a4a      	ldr	r2, [pc, #296]	; (8006ebc <I2C_DMAAbort+0x14c>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	0a1a      	lsrs	r2, r3, #8
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	00da      	lsls	r2, r3, #3
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f043 0220 	orr.w	r2, r3, #32
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006db6:	e00a      	b.n	8006dce <I2C_DMAAbort+0x5e>
    }
    count--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dcc:	d0ea      	beq.n	8006da4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dda:	2200      	movs	r2, #0
 8006ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	2200      	movs	r2, #0
 8006dec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2200      	movs	r2, #0
 8006e02:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e10:	2200      	movs	r2, #0
 8006e12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	2200      	movs	r2, #0
 8006e22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b60      	cmp	r3, #96	; 0x60
 8006e3e:	d10e      	bne.n	8006e5e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2200      	movs	r2, #0
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e56:	6978      	ldr	r0, [r7, #20]
 8006e58:	f7fe fc89 	bl	800576e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e5c:	e027      	b.n	8006eae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e5e:	7cfb      	ldrb	r3, [r7, #19]
 8006e60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e64:	2b28      	cmp	r3, #40	; 0x28
 8006e66:	d117      	bne.n	8006e98 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2228      	movs	r2, #40	; 0x28
 8006e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e96:	e007      	b.n	8006ea8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006ea8:	6978      	ldr	r0, [r7, #20]
 8006eaa:	f7fe fc56 	bl	800575a <HAL_I2C_ErrorCallback>
}
 8006eae:	bf00      	nop
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000000 	.word	0x20000000
 8006ebc:	14f8b589 	.word	0x14f8b589

08006ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ed0:	e025      	b.n	8006f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed8:	d021      	beq.n	8006f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eda:	f7fc f90d 	bl	80030f8 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d302      	bcc.n	8006ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d116      	bne.n	8006f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	f043 0220 	orr.w	r2, r3, #32
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e023      	b.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d10d      	bne.n	8006f44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	43da      	mvns	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4013      	ands	r3, r2
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bf0c      	ite	eq
 8006f3a:	2301      	moveq	r3, #1
 8006f3c:	2300      	movne	r3, #0
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	e00c      	b.n	8006f5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	43da      	mvns	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bf0c      	ite	eq
 8006f56:	2301      	moveq	r3, #1
 8006f58:	2300      	movne	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d0b6      	beq.n	8006ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f7c:	e051      	b.n	8007022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8c:	d123      	bne.n	8006fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f043 0204 	orr.w	r2, r3, #4
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e046      	b.n	8007064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d021      	beq.n	8007022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fde:	f7fc f88b 	bl	80030f8 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d302      	bcc.n	8006ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d116      	bne.n	8007022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f043 0220 	orr.w	r2, r3, #32
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e020      	b.n	8007064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10c      	bne.n	8007046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	43da      	mvns	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf14      	ite	ne
 800703e:	2301      	movne	r3, #1
 8007040:	2300      	moveq	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	e00b      	b.n	800705e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	43da      	mvns	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4013      	ands	r3, r2
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	bf14      	ite	ne
 8007058:	2301      	movne	r3, #1
 800705a:	2300      	moveq	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d18d      	bne.n	8006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007078:	e02d      	b.n	80070d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 f900 	bl	8007280 <I2C_IsAcknowledgeFailed>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e02d      	b.n	80070e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007090:	d021      	beq.n	80070d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007092:	f7fc f831 	bl	80030f8 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d302      	bcc.n	80070a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d116      	bne.n	80070d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	f043 0220 	orr.w	r2, r3, #32
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e007      	b.n	80070e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d1ca      	bne.n	800707a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070fa:	e02d      	b.n	8007158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f8bf 	bl	8007280 <I2C_IsAcknowledgeFailed>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e02d      	b.n	8007168 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d021      	beq.n	8007158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007114:	f7fb fff0 	bl	80030f8 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	429a      	cmp	r2, r3
 8007122:	d302      	bcc.n	800712a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d116      	bne.n	8007158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	f043 0220 	orr.w	r2, r3, #32
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e007      	b.n	8007168 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b04      	cmp	r3, #4
 8007164:	d1ca      	bne.n	80070fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800717c:	4b13      	ldr	r3, [pc, #76]	; (80071cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007184:	fba2 2303 	umull	r2, r3, r2, r3
 8007188:	0a1a      	lsrs	r2, r3, #8
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b01      	subs	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d107      	bne.n	80071ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f043 0220 	orr.w	r2, r3, #32
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e008      	b.n	80071c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071bc:	d0e9      	beq.n	8007192 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	20000000 	.word	0x20000000
 80071d0:	14f8b589 	.word	0x14f8b589

080071d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071e0:	e042      	b.n	8007268 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d119      	bne.n	8007224 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0210 	mvn.w	r2, #16
 80071f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e029      	b.n	8007278 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007224:	f7fb ff68 	bl	80030f8 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	429a      	cmp	r2, r3
 8007232:	d302      	bcc.n	800723a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d116      	bne.n	8007268 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	f043 0220 	orr.w	r2, r3, #32
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e007      	b.n	8007278 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d1b5      	bne.n	80071e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007296:	d11b      	bne.n	80072d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	f043 0204 	orr.w	r2, r3, #4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80072ee:	d103      	bne.n	80072f8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80072f6:	e007      	b.n	8007308 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007300:	d102      	bne.n	8007308 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2208      	movs	r2, #8
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e267      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d075      	beq.n	800741e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007332:	4b88      	ldr	r3, [pc, #544]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 030c 	and.w	r3, r3, #12
 800733a:	2b04      	cmp	r3, #4
 800733c:	d00c      	beq.n	8007358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800733e:	4b85      	ldr	r3, [pc, #532]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007346:	2b08      	cmp	r3, #8
 8007348:	d112      	bne.n	8007370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800734a:	4b82      	ldr	r3, [pc, #520]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007356:	d10b      	bne.n	8007370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007358:	4b7e      	ldr	r3, [pc, #504]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d05b      	beq.n	800741c <HAL_RCC_OscConfig+0x108>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d157      	bne.n	800741c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e242      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007378:	d106      	bne.n	8007388 <HAL_RCC_OscConfig+0x74>
 800737a:	4b76      	ldr	r3, [pc, #472]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a75      	ldr	r2, [pc, #468]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e01d      	b.n	80073c4 <HAL_RCC_OscConfig+0xb0>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007390:	d10c      	bne.n	80073ac <HAL_RCC_OscConfig+0x98>
 8007392:	4b70      	ldr	r3, [pc, #448]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a6f      	ldr	r2, [pc, #444]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	4b6d      	ldr	r3, [pc, #436]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a6c      	ldr	r2, [pc, #432]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80073a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e00b      	b.n	80073c4 <HAL_RCC_OscConfig+0xb0>
 80073ac:	4b69      	ldr	r3, [pc, #420]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a68      	ldr	r2, [pc, #416]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80073b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	4b66      	ldr	r3, [pc, #408]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a65      	ldr	r2, [pc, #404]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80073be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d013      	beq.n	80073f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073cc:	f7fb fe94 	bl	80030f8 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d4:	f7fb fe90 	bl	80030f8 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b64      	cmp	r3, #100	; 0x64
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e207      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e6:	4b5b      	ldr	r3, [pc, #364]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0f0      	beq.n	80073d4 <HAL_RCC_OscConfig+0xc0>
 80073f2:	e014      	b.n	800741e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f4:	f7fb fe80 	bl	80030f8 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073fc:	f7fb fe7c 	bl	80030f8 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b64      	cmp	r3, #100	; 0x64
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e1f3      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800740e:	4b51      	ldr	r3, [pc, #324]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f0      	bne.n	80073fc <HAL_RCC_OscConfig+0xe8>
 800741a:	e000      	b.n	800741e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800741c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d063      	beq.n	80074f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800742a:	4b4a      	ldr	r3, [pc, #296]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f003 030c 	and.w	r3, r3, #12
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00b      	beq.n	800744e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007436:	4b47      	ldr	r3, [pc, #284]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800743e:	2b08      	cmp	r3, #8
 8007440:	d11c      	bne.n	800747c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007442:	4b44      	ldr	r3, [pc, #272]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d116      	bne.n	800747c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800744e:	4b41      	ldr	r3, [pc, #260]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <HAL_RCC_OscConfig+0x152>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d001      	beq.n	8007466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e1c7      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007466:	4b3b      	ldr	r3, [pc, #236]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	4937      	ldr	r1, [pc, #220]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007476:	4313      	orrs	r3, r2
 8007478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800747a:	e03a      	b.n	80074f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d020      	beq.n	80074c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007484:	4b34      	ldr	r3, [pc, #208]	; (8007558 <HAL_RCC_OscConfig+0x244>)
 8007486:	2201      	movs	r2, #1
 8007488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748a:	f7fb fe35 	bl	80030f8 <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007492:	f7fb fe31 	bl	80030f8 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e1a8      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a4:	4b2b      	ldr	r3, [pc, #172]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0f0      	beq.n	8007492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b0:	4b28      	ldr	r3, [pc, #160]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	4925      	ldr	r1, [pc, #148]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	600b      	str	r3, [r1, #0]
 80074c4:	e015      	b.n	80074f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <HAL_RCC_OscConfig+0x244>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fb fe14 	bl	80030f8 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d4:	f7fb fe10 	bl	80030f8 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e187      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e6:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f0      	bne.n	80074d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d036      	beq.n	800756c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d016      	beq.n	8007534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007506:	4b15      	ldr	r3, [pc, #84]	; (800755c <HAL_RCC_OscConfig+0x248>)
 8007508:	2201      	movs	r2, #1
 800750a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750c:	f7fb fdf4 	bl	80030f8 <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007514:	f7fb fdf0 	bl	80030f8 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e167      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007526:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <HAL_RCC_OscConfig+0x240>)
 8007528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0f0      	beq.n	8007514 <HAL_RCC_OscConfig+0x200>
 8007532:	e01b      	b.n	800756c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007534:	4b09      	ldr	r3, [pc, #36]	; (800755c <HAL_RCC_OscConfig+0x248>)
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800753a:	f7fb fddd 	bl	80030f8 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007540:	e00e      	b.n	8007560 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007542:	f7fb fdd9 	bl	80030f8 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d907      	bls.n	8007560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e150      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
 8007554:	40023800 	.word	0x40023800
 8007558:	42470000 	.word	0x42470000
 800755c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007560:	4b88      	ldr	r3, [pc, #544]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1ea      	bne.n	8007542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8097 	beq.w	80076a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800757a:	2300      	movs	r3, #0
 800757c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800757e:	4b81      	ldr	r3, [pc, #516]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10f      	bne.n	80075aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800758a:	2300      	movs	r3, #0
 800758c:	60bb      	str	r3, [r7, #8]
 800758e:	4b7d      	ldr	r3, [pc, #500]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	4a7c      	ldr	r2, [pc, #496]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007598:	6413      	str	r3, [r2, #64]	; 0x40
 800759a:	4b7a      	ldr	r3, [pc, #488]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a2:	60bb      	str	r3, [r7, #8]
 80075a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075a6:	2301      	movs	r3, #1
 80075a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075aa:	4b77      	ldr	r3, [pc, #476]	; (8007788 <HAL_RCC_OscConfig+0x474>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d118      	bne.n	80075e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075b6:	4b74      	ldr	r3, [pc, #464]	; (8007788 <HAL_RCC_OscConfig+0x474>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a73      	ldr	r2, [pc, #460]	; (8007788 <HAL_RCC_OscConfig+0x474>)
 80075bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075c2:	f7fb fd99 	bl	80030f8 <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c8:	e008      	b.n	80075dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ca:	f7fb fd95 	bl	80030f8 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e10c      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075dc:	4b6a      	ldr	r3, [pc, #424]	; (8007788 <HAL_RCC_OscConfig+0x474>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d106      	bne.n	80075fe <HAL_RCC_OscConfig+0x2ea>
 80075f0:	4b64      	ldr	r3, [pc, #400]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 80075f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f4:	4a63      	ldr	r2, [pc, #396]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	6713      	str	r3, [r2, #112]	; 0x70
 80075fc:	e01c      	b.n	8007638 <HAL_RCC_OscConfig+0x324>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	2b05      	cmp	r3, #5
 8007604:	d10c      	bne.n	8007620 <HAL_RCC_OscConfig+0x30c>
 8007606:	4b5f      	ldr	r3, [pc, #380]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760a:	4a5e      	ldr	r2, [pc, #376]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 800760c:	f043 0304 	orr.w	r3, r3, #4
 8007610:	6713      	str	r3, [r2, #112]	; 0x70
 8007612:	4b5c      	ldr	r3, [pc, #368]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	4a5b      	ldr	r2, [pc, #364]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007618:	f043 0301 	orr.w	r3, r3, #1
 800761c:	6713      	str	r3, [r2, #112]	; 0x70
 800761e:	e00b      	b.n	8007638 <HAL_RCC_OscConfig+0x324>
 8007620:	4b58      	ldr	r3, [pc, #352]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007624:	4a57      	ldr	r2, [pc, #348]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	6713      	str	r3, [r2, #112]	; 0x70
 800762c:	4b55      	ldr	r3, [pc, #340]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 800762e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007630:	4a54      	ldr	r2, [pc, #336]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007632:	f023 0304 	bic.w	r3, r3, #4
 8007636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d015      	beq.n	800766c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007640:	f7fb fd5a 	bl	80030f8 <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007646:	e00a      	b.n	800765e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007648:	f7fb fd56 	bl	80030f8 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	f241 3288 	movw	r2, #5000	; 0x1388
 8007656:	4293      	cmp	r3, r2
 8007658:	d901      	bls.n	800765e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e0cb      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800765e:	4b49      	ldr	r3, [pc, #292]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0ee      	beq.n	8007648 <HAL_RCC_OscConfig+0x334>
 800766a:	e014      	b.n	8007696 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800766c:	f7fb fd44 	bl	80030f8 <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007672:	e00a      	b.n	800768a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007674:	f7fb fd40 	bl	80030f8 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007682:	4293      	cmp	r3, r2
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e0b5      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800768a:	4b3e      	ldr	r3, [pc, #248]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 800768c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1ee      	bne.n	8007674 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d105      	bne.n	80076a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800769c:	4b39      	ldr	r3, [pc, #228]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	4a38      	ldr	r2, [pc, #224]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 80076a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80a1 	beq.w	80077f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076b2:	4b34      	ldr	r3, [pc, #208]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 030c 	and.w	r3, r3, #12
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d05c      	beq.n	8007778 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d141      	bne.n	800774a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c6:	4b31      	ldr	r3, [pc, #196]	; (800778c <HAL_RCC_OscConfig+0x478>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076cc:	f7fb fd14 	bl	80030f8 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d4:	f7fb fd10 	bl	80030f8 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e087      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076e6:	4b27      	ldr	r3, [pc, #156]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f0      	bne.n	80076d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69da      	ldr	r2, [r3, #28]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	019b      	lsls	r3, r3, #6
 8007702:	431a      	orrs	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	3b01      	subs	r3, #1
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	061b      	lsls	r3, r3, #24
 8007716:	491b      	ldr	r1, [pc, #108]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 8007718:	4313      	orrs	r3, r2
 800771a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800771c:	4b1b      	ldr	r3, [pc, #108]	; (800778c <HAL_RCC_OscConfig+0x478>)
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007722:	f7fb fce9 	bl	80030f8 <HAL_GetTick>
 8007726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007728:	e008      	b.n	800773c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800772a:	f7fb fce5 	bl	80030f8 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d901      	bls.n	800773c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e05c      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800773c:	4b11      	ldr	r3, [pc, #68]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0f0      	beq.n	800772a <HAL_RCC_OscConfig+0x416>
 8007748:	e054      	b.n	80077f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800774a:	4b10      	ldr	r3, [pc, #64]	; (800778c <HAL_RCC_OscConfig+0x478>)
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007750:	f7fb fcd2 	bl	80030f8 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007758:	f7fb fcce 	bl	80030f8 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e045      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800776a:	4b06      	ldr	r3, [pc, #24]	; (8007784 <HAL_RCC_OscConfig+0x470>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1f0      	bne.n	8007758 <HAL_RCC_OscConfig+0x444>
 8007776:	e03d      	b.n	80077f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d107      	bne.n	8007790 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e038      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
 8007784:	40023800 	.word	0x40023800
 8007788:	40007000 	.word	0x40007000
 800778c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007790:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <HAL_RCC_OscConfig+0x4ec>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d028      	beq.n	80077f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d121      	bne.n	80077f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d11a      	bne.n	80077f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077c0:	4013      	ands	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d111      	bne.n	80077f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	3b01      	subs	r3, #1
 80077da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077dc:	429a      	cmp	r2, r3
 80077de:	d107      	bne.n	80077f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d001      	beq.n	80077f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	40023800 	.word	0x40023800

08007804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0cc      	b.n	80079b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007818:	4b68      	ldr	r3, [pc, #416]	; (80079bc <HAL_RCC_ClockConfig+0x1b8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d90c      	bls.n	8007840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007826:	4b65      	ldr	r3, [pc, #404]	; (80079bc <HAL_RCC_ClockConfig+0x1b8>)
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800782e:	4b63      	ldr	r3, [pc, #396]	; (80079bc <HAL_RCC_ClockConfig+0x1b8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d001      	beq.n	8007840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e0b8      	b.n	80079b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d020      	beq.n	800788e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007858:	4b59      	ldr	r3, [pc, #356]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	4a58      	ldr	r2, [pc, #352]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 800785e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007870:	4b53      	ldr	r3, [pc, #332]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	4a52      	ldr	r2, [pc, #328]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800787a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800787c:	4b50      	ldr	r3, [pc, #320]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	494d      	ldr	r1, [pc, #308]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 800788a:	4313      	orrs	r3, r2
 800788c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d044      	beq.n	8007924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d107      	bne.n	80078b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a2:	4b47      	ldr	r3, [pc, #284]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d119      	bne.n	80078e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e07f      	b.n	80079b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d003      	beq.n	80078c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d107      	bne.n	80078d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c2:	4b3f      	ldr	r3, [pc, #252]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e06f      	b.n	80079b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d2:	4b3b      	ldr	r3, [pc, #236]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e067      	b.n	80079b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078e2:	4b37      	ldr	r3, [pc, #220]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f023 0203 	bic.w	r2, r3, #3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	4934      	ldr	r1, [pc, #208]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078f4:	f7fb fc00 	bl	80030f8 <HAL_GetTick>
 80078f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fa:	e00a      	b.n	8007912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078fc:	f7fb fbfc 	bl	80030f8 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	f241 3288 	movw	r2, #5000	; 0x1388
 800790a:	4293      	cmp	r3, r2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e04f      	b.n	80079b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007912:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 020c 	and.w	r2, r3, #12
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	429a      	cmp	r2, r3
 8007922:	d1eb      	bne.n	80078fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007924:	4b25      	ldr	r3, [pc, #148]	; (80079bc <HAL_RCC_ClockConfig+0x1b8>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d20c      	bcs.n	800794c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007932:	4b22      	ldr	r3, [pc, #136]	; (80079bc <HAL_RCC_ClockConfig+0x1b8>)
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793a:	4b20      	ldr	r3, [pc, #128]	; (80079bc <HAL_RCC_ClockConfig+0x1b8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d001      	beq.n	800794c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e032      	b.n	80079b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d008      	beq.n	800796a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007958:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	4916      	ldr	r1, [pc, #88]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007966:	4313      	orrs	r3, r2
 8007968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0308 	and.w	r3, r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007976:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	490e      	ldr	r1, [pc, #56]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007986:	4313      	orrs	r3, r2
 8007988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800798a:	f000 f821 	bl	80079d0 <HAL_RCC_GetSysClockFreq>
 800798e:	4602      	mov	r2, r0
 8007990:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	091b      	lsrs	r3, r3, #4
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	490a      	ldr	r1, [pc, #40]	; (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 800799c:	5ccb      	ldrb	r3, [r1, r3]
 800799e:	fa22 f303 	lsr.w	r3, r2, r3
 80079a2:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 80079a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <HAL_RCC_ClockConfig+0x1c8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fb f992 	bl	8002cd4 <HAL_InitTick>

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40023c00 	.word	0x40023c00
 80079c0:	40023800 	.word	0x40023800
 80079c4:	0800f454 	.word	0x0800f454
 80079c8:	20000000 	.word	0x20000000
 80079cc:	20000004 	.word	0x20000004

080079d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d4:	b094      	sub	sp, #80	; 0x50
 80079d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	647b      	str	r3, [r7, #68]	; 0x44
 80079dc:	2300      	movs	r3, #0
 80079de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079e0:	2300      	movs	r3, #0
 80079e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079e8:	4b79      	ldr	r3, [pc, #484]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 030c 	and.w	r3, r3, #12
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d00d      	beq.n	8007a10 <HAL_RCC_GetSysClockFreq+0x40>
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	f200 80e1 	bhi.w	8007bbc <HAL_RCC_GetSysClockFreq+0x1ec>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_RCC_GetSysClockFreq+0x34>
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d003      	beq.n	8007a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8007a02:	e0db      	b.n	8007bbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a04:	4b73      	ldr	r3, [pc, #460]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007a08:	e0db      	b.n	8007bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a0a:	4b73      	ldr	r3, [pc, #460]	; (8007bd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a0e:	e0d8      	b.n	8007bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a10:	4b6f      	ldr	r3, [pc, #444]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a1a:	4b6d      	ldr	r3, [pc, #436]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d063      	beq.n	8007aee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a26:	4b6a      	ldr	r3, [pc, #424]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	099b      	lsrs	r3, r3, #6
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a42:	4622      	mov	r2, r4
 8007a44:	462b      	mov	r3, r5
 8007a46:	f04f 0000 	mov.w	r0, #0
 8007a4a:	f04f 0100 	mov.w	r1, #0
 8007a4e:	0159      	lsls	r1, r3, #5
 8007a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a54:	0150      	lsls	r0, r2, #5
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	1a51      	subs	r1, r2, r1
 8007a5e:	6139      	str	r1, [r7, #16]
 8007a60:	4629      	mov	r1, r5
 8007a62:	eb63 0301 	sbc.w	r3, r3, r1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a74:	4659      	mov	r1, fp
 8007a76:	018b      	lsls	r3, r1, #6
 8007a78:	4651      	mov	r1, sl
 8007a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a7e:	4651      	mov	r1, sl
 8007a80:	018a      	lsls	r2, r1, #6
 8007a82:	4651      	mov	r1, sl
 8007a84:	ebb2 0801 	subs.w	r8, r2, r1
 8007a88:	4659      	mov	r1, fp
 8007a8a:	eb63 0901 	sbc.w	r9, r3, r1
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aa2:	4690      	mov	r8, r2
 8007aa4:	4699      	mov	r9, r3
 8007aa6:	4623      	mov	r3, r4
 8007aa8:	eb18 0303 	adds.w	r3, r8, r3
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	462b      	mov	r3, r5
 8007ab0:	eb49 0303 	adc.w	r3, r9, r3
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	f04f 0300 	mov.w	r3, #0
 8007abe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	024b      	lsls	r3, r1, #9
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007acc:	4621      	mov	r1, r4
 8007ace:	024a      	lsls	r2, r1, #9
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ae0:	f7f9 f90a 	bl	8000cf8 <__aeabi_uldivmod>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4613      	mov	r3, r2
 8007aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aec:	e058      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aee:	4b38      	ldr	r3, [pc, #224]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	099b      	lsrs	r3, r3, #6
 8007af4:	2200      	movs	r2, #0
 8007af6:	4618      	mov	r0, r3
 8007af8:	4611      	mov	r1, r2
 8007afa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007afe:	623b      	str	r3, [r7, #32]
 8007b00:	2300      	movs	r3, #0
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
 8007b04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b08:	4642      	mov	r2, r8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	f04f 0000 	mov.w	r0, #0
 8007b10:	f04f 0100 	mov.w	r1, #0
 8007b14:	0159      	lsls	r1, r3, #5
 8007b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b1a:	0150      	lsls	r0, r2, #5
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4641      	mov	r1, r8
 8007b22:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b26:	4649      	mov	r1, r9
 8007b28:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b40:	ebb2 040a 	subs.w	r4, r2, sl
 8007b44:	eb63 050b 	sbc.w	r5, r3, fp
 8007b48:	f04f 0200 	mov.w	r2, #0
 8007b4c:	f04f 0300 	mov.w	r3, #0
 8007b50:	00eb      	lsls	r3, r5, #3
 8007b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b56:	00e2      	lsls	r2, r4, #3
 8007b58:	4614      	mov	r4, r2
 8007b5a:	461d      	mov	r5, r3
 8007b5c:	4643      	mov	r3, r8
 8007b5e:	18e3      	adds	r3, r4, r3
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	464b      	mov	r3, r9
 8007b64:	eb45 0303 	adc.w	r3, r5, r3
 8007b68:	607b      	str	r3, [r7, #4]
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b76:	4629      	mov	r1, r5
 8007b78:	028b      	lsls	r3, r1, #10
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b80:	4621      	mov	r1, r4
 8007b82:	028a      	lsls	r2, r1, #10
 8007b84:	4610      	mov	r0, r2
 8007b86:	4619      	mov	r1, r3
 8007b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	61bb      	str	r3, [r7, #24]
 8007b8e:	61fa      	str	r2, [r7, #28]
 8007b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b94:	f7f9 f8b0 	bl	8000cf8 <__aeabi_uldivmod>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	0c1b      	lsrs	r3, r3, #16
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	3301      	adds	r3, #1
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007bba:	e002      	b.n	8007bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007bbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3750      	adds	r7, #80	; 0x50
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bce:	bf00      	nop
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	00f42400 	.word	0x00f42400
 8007bd8:	007a1200 	.word	0x007a1200

08007bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007be0:	4b03      	ldr	r3, [pc, #12]	; (8007bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007be2:	681b      	ldr	r3, [r3, #0]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000000 	.word	0x20000000

08007bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bf8:	f7ff fff0 	bl	8007bdc <HAL_RCC_GetHCLKFreq>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	0a9b      	lsrs	r3, r3, #10
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	4903      	ldr	r1, [pc, #12]	; (8007c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c0a:	5ccb      	ldrb	r3, [r1, r3]
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40023800 	.word	0x40023800
 8007c18:	0800f464 	.word	0x0800f464

08007c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c20:	f7ff ffdc 	bl	8007bdc <HAL_RCC_GetHCLKFreq>
 8007c24:	4602      	mov	r2, r0
 8007c26:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	0b5b      	lsrs	r3, r3, #13
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	4903      	ldr	r1, [pc, #12]	; (8007c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c32:	5ccb      	ldrb	r3, [r1, r3]
 8007c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	0800f464 	.word	0x0800f464

08007c44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	220f      	movs	r2, #15
 8007c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c54:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 0203 	and.w	r2, r3, #3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c60:	4b0f      	ldr	r3, [pc, #60]	; (8007ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007c78:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	08db      	lsrs	r3, r3, #3
 8007c7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <HAL_RCC_GetClockConfig+0x60>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0207 	and.w	r2, r3, #7
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	601a      	str	r2, [r3, #0]
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	40023c00 	.word	0x40023c00

08007ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e041      	b.n	8007d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7fa ff10 	bl	8002af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	f000 fc8e 	bl	8008608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d001      	beq.n	8007d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e044      	b.n	8007dea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1e      	ldr	r2, [pc, #120]	; (8007df8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d018      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d013      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1a      	ldr	r2, [pc, #104]	; (8007dfc <HAL_TIM_Base_Start_IT+0xb4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00e      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a19      	ldr	r2, [pc, #100]	; (8007e00 <HAL_TIM_Base_Start_IT+0xb8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d009      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <HAL_TIM_Base_Start_IT+0xbc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d004      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a16      	ldr	r2, [pc, #88]	; (8007e08 <HAL_TIM_Base_Start_IT+0xc0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d111      	bne.n	8007dd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b06      	cmp	r3, #6
 8007dc4:	d010      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd6:	e007      	b.n	8007de8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	40014000 	.word	0x40014000

08007e0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e041      	b.n	8007ea2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f839 	bl	8007eaa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f000 fbdc 	bl	8008608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <HAL_TIM_IC_Start_IT+0x1e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	e013      	b.n	8007f06 <HAL_TIM_IC_Start_IT+0x46>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d104      	bne.n	8007eee <HAL_TIM_IC_Start_IT+0x2e>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	e00b      	b.n	8007f06 <HAL_TIM_IC_Start_IT+0x46>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d104      	bne.n	8007efe <HAL_TIM_IC_Start_IT+0x3e>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	e003      	b.n	8007f06 <HAL_TIM_IC_Start_IT+0x46>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <HAL_TIM_IC_Start_IT+0x58>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	e013      	b.n	8007f40 <HAL_TIM_IC_Start_IT+0x80>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d104      	bne.n	8007f28 <HAL_TIM_IC_Start_IT+0x68>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	e00b      	b.n	8007f40 <HAL_TIM_IC_Start_IT+0x80>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d104      	bne.n	8007f38 <HAL_TIM_IC_Start_IT+0x78>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	e003      	b.n	8007f40 <HAL_TIM_IC_Start_IT+0x80>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d102      	bne.n	8007f4e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f48:	7b7b      	ldrb	r3, [r7, #13]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d001      	beq.n	8007f52 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e0c2      	b.n	80080d8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d104      	bne.n	8007f62 <HAL_TIM_IC_Start_IT+0xa2>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f60:	e013      	b.n	8007f8a <HAL_TIM_IC_Start_IT+0xca>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d104      	bne.n	8007f72 <HAL_TIM_IC_Start_IT+0xb2>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f70:	e00b      	b.n	8007f8a <HAL_TIM_IC_Start_IT+0xca>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d104      	bne.n	8007f82 <HAL_TIM_IC_Start_IT+0xc2>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f80:	e003      	b.n	8007f8a <HAL_TIM_IC_Start_IT+0xca>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2202      	movs	r2, #2
 8007f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d104      	bne.n	8007f9a <HAL_TIM_IC_Start_IT+0xda>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f98:	e013      	b.n	8007fc2 <HAL_TIM_IC_Start_IT+0x102>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d104      	bne.n	8007faa <HAL_TIM_IC_Start_IT+0xea>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fa8:	e00b      	b.n	8007fc2 <HAL_TIM_IC_Start_IT+0x102>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d104      	bne.n	8007fba <HAL_TIM_IC_Start_IT+0xfa>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb8:	e003      	b.n	8007fc2 <HAL_TIM_IC_Start_IT+0x102>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b0c      	cmp	r3, #12
 8007fc6:	d841      	bhi.n	800804c <HAL_TIM_IC_Start_IT+0x18c>
 8007fc8:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <HAL_TIM_IC_Start_IT+0x110>)
 8007fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fce:	bf00      	nop
 8007fd0:	08008005 	.word	0x08008005
 8007fd4:	0800804d 	.word	0x0800804d
 8007fd8:	0800804d 	.word	0x0800804d
 8007fdc:	0800804d 	.word	0x0800804d
 8007fe0:	08008017 	.word	0x08008017
 8007fe4:	0800804d 	.word	0x0800804d
 8007fe8:	0800804d 	.word	0x0800804d
 8007fec:	0800804d 	.word	0x0800804d
 8007ff0:	08008029 	.word	0x08008029
 8007ff4:	0800804d 	.word	0x0800804d
 8007ff8:	0800804d 	.word	0x0800804d
 8007ffc:	0800804d 	.word	0x0800804d
 8008000:	0800803b 	.word	0x0800803b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0202 	orr.w	r2, r2, #2
 8008012:	60da      	str	r2, [r3, #12]
      break;
 8008014:	e01d      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0204 	orr.w	r2, r2, #4
 8008024:	60da      	str	r2, [r3, #12]
      break;
 8008026:	e014      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0208 	orr.w	r2, r2, #8
 8008036:	60da      	str	r2, [r3, #12]
      break;
 8008038:	e00b      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68da      	ldr	r2, [r3, #12]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0210 	orr.w	r2, r2, #16
 8008048:	60da      	str	r2, [r3, #12]
      break;
 800804a:	e002      	b.n	8008052 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]
      break;
 8008050:	bf00      	nop
  }

  if (status == HAL_OK)
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d13e      	bne.n	80080d6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2201      	movs	r2, #1
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fd09 	bl	8008a78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1d      	ldr	r2, [pc, #116]	; (80080e0 <HAL_TIM_IC_Start_IT+0x220>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d018      	beq.n	80080a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008078:	d013      	beq.n	80080a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a19      	ldr	r2, [pc, #100]	; (80080e4 <HAL_TIM_IC_Start_IT+0x224>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00e      	beq.n	80080a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a17      	ldr	r2, [pc, #92]	; (80080e8 <HAL_TIM_IC_Start_IT+0x228>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d009      	beq.n	80080a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a16      	ldr	r2, [pc, #88]	; (80080ec <HAL_TIM_IC_Start_IT+0x22c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d004      	beq.n	80080a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a14      	ldr	r2, [pc, #80]	; (80080f0 <HAL_TIM_IC_Start_IT+0x230>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d111      	bne.n	80080c6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b06      	cmp	r3, #6
 80080b2:	d010      	beq.n	80080d6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0201 	orr.w	r2, r2, #1
 80080c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c4:	e007      	b.n	80080d6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0201 	orr.w	r2, r2, #1
 80080d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40010000 	.word	0x40010000
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800
 80080ec:	40000c00 	.word	0x40000c00
 80080f0:	40014000 	.word	0x40014000

080080f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b02      	cmp	r3, #2
 8008108:	d122      	bne.n	8008150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b02      	cmp	r3, #2
 8008116:	d11b      	bne.n	8008150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0202 	mvn.w	r2, #2
 8008120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7f9 ff38 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 800813c:	e005      	b.n	800814a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa43 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fa4a 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b04      	cmp	r3, #4
 800815c:	d122      	bne.n	80081a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d11b      	bne.n	80081a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0204 	mvn.w	r2, #4
 8008174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2202      	movs	r2, #2
 800817a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7f9 ff0e 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8008190:	e005      	b.n	800819e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa19 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fa20 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0308 	and.w	r3, r3, #8
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d122      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d11b      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0208 	mvn.w	r2, #8
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2204      	movs	r2, #4
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7f9 fee4 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f9ef 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f9f6 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0310 	and.w	r3, r3, #16
 8008202:	2b10      	cmp	r3, #16
 8008204:	d122      	bne.n	800824c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	2b10      	cmp	r3, #16
 8008212:	d11b      	bne.n	800824c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0210 	mvn.w	r2, #16
 800821c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2208      	movs	r2, #8
 8008222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7f9 feba 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8008238:	e005      	b.n	8008246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f9c5 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f9cc 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b01      	cmp	r3, #1
 8008258:	d10e      	bne.n	8008278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b01      	cmp	r3, #1
 8008266:	d107      	bne.n	8008278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0201 	mvn.w	r2, #1
 8008270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fa fac2 	bl	80027fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008282:	2b80      	cmp	r3, #128	; 0x80
 8008284:	d10e      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d107      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800829c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fc88 	bl	8008bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ae:	2b40      	cmp	r3, #64	; 0x40
 80082b0:	d10e      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b40      	cmp	r3, #64	; 0x40
 80082be:	d107      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f991 	bl	80085f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d10e      	bne.n	80082fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0320 	and.w	r3, r3, #32
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d107      	bne.n	80082fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0220 	mvn.w	r2, #32
 80082f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fc52 	bl	8008ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800831a:	2b01      	cmp	r3, #1
 800831c:	d101      	bne.n	8008322 <HAL_TIM_IC_ConfigChannel+0x1e>
 800831e:	2302      	movs	r3, #2
 8008320:	e088      	b.n	8008434 <HAL_TIM_IC_ConfigChannel+0x130>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d11b      	bne.n	8008368 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6819      	ldr	r1, [r3, #0]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f000 f9e2 	bl	8008708 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 020c 	bic.w	r2, r2, #12
 8008352:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6999      	ldr	r1, [r3, #24]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	619a      	str	r2, [r3, #24]
 8008366:	e060      	b.n	800842a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b04      	cmp	r3, #4
 800836c:	d11c      	bne.n	80083a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6819      	ldr	r1, [r3, #0]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f000 fa5a 	bl	8008836 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	699a      	ldr	r2, [r3, #24]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008390:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6999      	ldr	r1, [r3, #24]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	021a      	lsls	r2, r3, #8
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	619a      	str	r2, [r3, #24]
 80083a6:	e040      	b.n	800842a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b08      	cmp	r3, #8
 80083ac:	d11b      	bne.n	80083e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6819      	ldr	r1, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f000 faa7 	bl	8008910 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 020c 	bic.w	r2, r2, #12
 80083d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69d9      	ldr	r1, [r3, #28]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	61da      	str	r2, [r3, #28]
 80083e4:	e021      	b.n	800842a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b0c      	cmp	r3, #12
 80083ea:	d11c      	bne.n	8008426 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f000 fac4 	bl	8008988 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69da      	ldr	r2, [r3, #28]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800840e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	69d9      	ldr	r1, [r3, #28]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	021a      	lsls	r2, r3, #8
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	61da      	str	r2, [r3, #28]
 8008424:	e001      	b.n	800842a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008432:	7dfb      	ldrb	r3, [r7, #23]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_TIM_ConfigClockSource+0x1c>
 8008454:	2302      	movs	r3, #2
 8008456:	e0b4      	b.n	80085c2 <HAL_TIM_ConfigClockSource+0x186>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800847e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008490:	d03e      	beq.n	8008510 <HAL_TIM_ConfigClockSource+0xd4>
 8008492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008496:	f200 8087 	bhi.w	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849e:	f000 8086 	beq.w	80085ae <HAL_TIM_ConfigClockSource+0x172>
 80084a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a6:	d87f      	bhi.n	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
 80084a8:	2b70      	cmp	r3, #112	; 0x70
 80084aa:	d01a      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0xa6>
 80084ac:	2b70      	cmp	r3, #112	; 0x70
 80084ae:	d87b      	bhi.n	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
 80084b0:	2b60      	cmp	r3, #96	; 0x60
 80084b2:	d050      	beq.n	8008556 <HAL_TIM_ConfigClockSource+0x11a>
 80084b4:	2b60      	cmp	r3, #96	; 0x60
 80084b6:	d877      	bhi.n	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
 80084b8:	2b50      	cmp	r3, #80	; 0x50
 80084ba:	d03c      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0xfa>
 80084bc:	2b50      	cmp	r3, #80	; 0x50
 80084be:	d873      	bhi.n	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	d058      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x13a>
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d86f      	bhi.n	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
 80084c8:	2b30      	cmp	r3, #48	; 0x30
 80084ca:	d064      	beq.n	8008596 <HAL_TIM_ConfigClockSource+0x15a>
 80084cc:	2b30      	cmp	r3, #48	; 0x30
 80084ce:	d86b      	bhi.n	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
 80084d0:	2b20      	cmp	r3, #32
 80084d2:	d060      	beq.n	8008596 <HAL_TIM_ConfigClockSource+0x15a>
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d867      	bhi.n	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d05c      	beq.n	8008596 <HAL_TIM_ConfigClockSource+0x15a>
 80084dc:	2b10      	cmp	r3, #16
 80084de:	d05a      	beq.n	8008596 <HAL_TIM_ConfigClockSource+0x15a>
 80084e0:	e062      	b.n	80085a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6899      	ldr	r1, [r3, #8]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f000 faa1 	bl	8008a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	609a      	str	r2, [r3, #8]
      break;
 800850e:	e04f      	b.n	80085b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	6899      	ldr	r1, [r3, #8]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f000 fa8a 	bl	8008a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008532:	609a      	str	r2, [r3, #8]
      break;
 8008534:	e03c      	b.n	80085b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	6859      	ldr	r1, [r3, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	461a      	mov	r2, r3
 8008544:	f000 f948 	bl	80087d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2150      	movs	r1, #80	; 0x50
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fa57 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 8008554:	e02c      	b.n	80085b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	6859      	ldr	r1, [r3, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	461a      	mov	r2, r3
 8008564:	f000 f9a4 	bl	80088b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2160      	movs	r1, #96	; 0x60
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fa47 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 8008574:	e01c      	b.n	80085b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	6859      	ldr	r1, [r3, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	461a      	mov	r2, r3
 8008584:	f000 f928 	bl	80087d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2140      	movs	r1, #64	; 0x40
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fa37 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 8008594:	e00c      	b.n	80085b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f000 fa2e 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 80085a6:	e003      	b.n	80085b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]
      break;
 80085ac:	e000      	b.n	80085b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a34      	ldr	r2, [pc, #208]	; (80086ec <TIM_Base_SetConfig+0xe4>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00f      	beq.n	8008640 <TIM_Base_SetConfig+0x38>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008626:	d00b      	beq.n	8008640 <TIM_Base_SetConfig+0x38>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a31      	ldr	r2, [pc, #196]	; (80086f0 <TIM_Base_SetConfig+0xe8>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_Base_SetConfig+0x38>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a30      	ldr	r2, [pc, #192]	; (80086f4 <TIM_Base_SetConfig+0xec>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_Base_SetConfig+0x38>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a2f      	ldr	r2, [pc, #188]	; (80086f8 <TIM_Base_SetConfig+0xf0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d108      	bne.n	8008652 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a25      	ldr	r2, [pc, #148]	; (80086ec <TIM_Base_SetConfig+0xe4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d01b      	beq.n	8008692 <TIM_Base_SetConfig+0x8a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008660:	d017      	beq.n	8008692 <TIM_Base_SetConfig+0x8a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a22      	ldr	r2, [pc, #136]	; (80086f0 <TIM_Base_SetConfig+0xe8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d013      	beq.n	8008692 <TIM_Base_SetConfig+0x8a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a21      	ldr	r2, [pc, #132]	; (80086f4 <TIM_Base_SetConfig+0xec>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00f      	beq.n	8008692 <TIM_Base_SetConfig+0x8a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a20      	ldr	r2, [pc, #128]	; (80086f8 <TIM_Base_SetConfig+0xf0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00b      	beq.n	8008692 <TIM_Base_SetConfig+0x8a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a1f      	ldr	r2, [pc, #124]	; (80086fc <TIM_Base_SetConfig+0xf4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d007      	beq.n	8008692 <TIM_Base_SetConfig+0x8a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1e      	ldr	r2, [pc, #120]	; (8008700 <TIM_Base_SetConfig+0xf8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d003      	beq.n	8008692 <TIM_Base_SetConfig+0x8a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <TIM_Base_SetConfig+0xfc>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d108      	bne.n	80086a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a08      	ldr	r2, [pc, #32]	; (80086ec <TIM_Base_SetConfig+0xe4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d103      	bne.n	80086d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	615a      	str	r2, [r3, #20]
}
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40000400 	.word	0x40000400
 80086f4:	40000800 	.word	0x40000800
 80086f8:	40000c00 	.word	0x40000c00
 80086fc:	40014000 	.word	0x40014000
 8008700:	40014400 	.word	0x40014400
 8008704:	40014800 	.word	0x40014800

08008708 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	f023 0201 	bic.w	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4a24      	ldr	r2, [pc, #144]	; (80087c4 <TIM_TI1_SetConfig+0xbc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <TIM_TI1_SetConfig+0x56>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873c:	d00f      	beq.n	800875e <TIM_TI1_SetConfig+0x56>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4a21      	ldr	r2, [pc, #132]	; (80087c8 <TIM_TI1_SetConfig+0xc0>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00b      	beq.n	800875e <TIM_TI1_SetConfig+0x56>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4a20      	ldr	r2, [pc, #128]	; (80087cc <TIM_TI1_SetConfig+0xc4>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d007      	beq.n	800875e <TIM_TI1_SetConfig+0x56>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <TIM_TI1_SetConfig+0xc8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_TI1_SetConfig+0x56>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4a1e      	ldr	r2, [pc, #120]	; (80087d4 <TIM_TI1_SetConfig+0xcc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d101      	bne.n	8008762 <TIM_TI1_SetConfig+0x5a>
 800875e:	2301      	movs	r3, #1
 8008760:	e000      	b.n	8008764 <TIM_TI1_SetConfig+0x5c>
 8008762:	2300      	movs	r3, #0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d008      	beq.n	800877a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f023 0303 	bic.w	r3, r3, #3
 800876e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	e003      	b.n	8008782 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f043 0301 	orr.w	r3, r3, #1
 8008780:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	b2db      	uxtb	r3, r3
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f023 030a 	bic.w	r3, r3, #10
 800879c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f003 030a 	and.w	r3, r3, #10
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	621a      	str	r2, [r3, #32]
}
 80087b6:	bf00      	nop
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	40010000 	.word	0x40010000
 80087c8:	40000400 	.word	0x40000400
 80087cc:	40000800 	.word	0x40000800
 80087d0:	40000c00 	.word	0x40000c00
 80087d4:	40014000 	.word	0x40014000

080087d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f023 0201 	bic.w	r2, r3, #1
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4313      	orrs	r3, r2
 800880c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f023 030a 	bic.w	r3, r3, #10
 8008814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4313      	orrs	r3, r2
 800881c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008836:	b480      	push	{r7}
 8008838:	b087      	sub	sp, #28
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	607a      	str	r2, [r7, #4]
 8008842:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	f023 0210 	bic.w	r2, r3, #16
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	031b      	lsls	r3, r3, #12
 800887a:	b29b      	uxth	r3, r3
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	4313      	orrs	r3, r2
 8008880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	621a      	str	r2, [r3, #32]
}
 80088a4:	bf00      	nop
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	f023 0210 	bic.w	r2, r3, #16
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	031b      	lsls	r3, r3, #12
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	621a      	str	r2, [r3, #32]
}
 8008904:	bf00      	nop
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f023 0303 	bic.w	r3, r3, #3
 800893c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800894c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	b2db      	uxtb	r3, r3
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008960:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	021b      	lsls	r3, r3, #8
 8008966:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	621a      	str	r2, [r3, #32]
}
 800897c:	bf00      	nop
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	031b      	lsls	r3, r3, #12
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80089da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	031b      	lsls	r3, r3, #12
 80089e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	621a      	str	r2, [r3, #32]
}
 80089f6:	bf00      	nop
 80089f8:	371c      	adds	r7, #28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b085      	sub	sp, #20
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f043 0307 	orr.w	r3, r3, #7
 8008a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	609a      	str	r2, [r3, #8]
}
 8008a2c:	bf00      	nop
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	021a      	lsls	r2, r3, #8
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	609a      	str	r2, [r3, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f003 031f 	and.w	r3, r3, #31
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1a      	ldr	r2, [r3, #32]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	43db      	mvns	r3, r3
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a1a      	ldr	r2, [r3, #32]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 031f 	and.w	r3, r3, #31
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	621a      	str	r2, [r3, #32]
}
 8008ab6:	bf00      	nop
 8008ab8:	371c      	adds	r7, #28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e050      	b.n	8008b7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1c      	ldr	r2, [pc, #112]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d018      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b28:	d013      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00e      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a16      	ldr	r2, [pc, #88]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d009      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a15      	ldr	r2, [pc, #84]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a13      	ldr	r2, [pc, #76]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10c      	bne.n	8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	40010000 	.word	0x40010000
 8008b90:	40000400 	.word	0x40000400
 8008b94:	40000800 	.word	0x40000800
 8008b98:	40000c00 	.word	0x40000c00
 8008b9c:	40014000 	.word	0x40014000

08008ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e03f      	b.n	8008c5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7f9 ffec 	bl	8002bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2224      	movs	r2, #36	; 0x24
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fc7b 	bl	8009508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695a      	ldr	r2, [r3, #20]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
	...

08008c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b0ba      	sub	sp, #232	; 0xe8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10f      	bne.n	8008cca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cae:	f003 0320 	and.w	r3, r3, #32
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <HAL_UART_IRQHandler+0x66>
 8008cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fb65 	bl	8009392 <UART_Receive_IT>
      return;
 8008cc8:	e256      	b.n	8009178 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 80de 	beq.w	8008e90 <HAL_UART_IRQHandler+0x22c>
 8008cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 80d1 	beq.w	8008e90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00b      	beq.n	8008d12 <HAL_UART_IRQHandler+0xae>
 8008cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	f043 0201 	orr.w	r2, r3, #1
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d16:	f003 0304 	and.w	r3, r3, #4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00b      	beq.n	8008d36 <HAL_UART_IRQHandler+0xd2>
 8008d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	f043 0202 	orr.w	r2, r3, #2
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <HAL_UART_IRQHandler+0xf6>
 8008d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d52:	f043 0204 	orr.w	r2, r3, #4
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d5e:	f003 0308 	and.w	r3, r3, #8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d011      	beq.n	8008d8a <HAL_UART_IRQHandler+0x126>
 8008d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d105      	bne.n	8008d7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d005      	beq.n	8008d8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	f043 0208 	orr.w	r2, r3, #8
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 81ed 	beq.w	800916e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d008      	beq.n	8008db2 <HAL_UART_IRQHandler+0x14e>
 8008da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 faf0 	bl	8009392 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbc:	2b40      	cmp	r3, #64	; 0x40
 8008dbe:	bf0c      	ite	eq
 8008dc0:	2301      	moveq	r3, #1
 8008dc2:	2300      	movne	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d103      	bne.n	8008dde <HAL_UART_IRQHandler+0x17a>
 8008dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d04f      	beq.n	8008e7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f9f8 	bl	80091d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dee:	2b40      	cmp	r3, #64	; 0x40
 8008df0:	d141      	bne.n	8008e76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3314      	adds	r3, #20
 8008df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3314      	adds	r3, #20
 8008e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e2e:	e841 2300 	strex	r3, r2, [r1]
 8008e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1d9      	bne.n	8008df2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d013      	beq.n	8008e6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4a:	4a7d      	ldr	r2, [pc, #500]	; (8009040 <HAL_UART_IRQHandler+0x3dc>)
 8008e4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fa ffca 	bl	8003dec <HAL_DMA_Abort_IT>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d016      	beq.n	8008e8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e68:	4610      	mov	r0, r2
 8008e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e6c:	e00e      	b.n	8008e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f99a 	bl	80091a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e74:	e00a      	b.n	8008e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f996 	bl	80091a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	e006      	b.n	8008e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f992 	bl	80091a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e8a:	e170      	b.n	800916e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8c:	bf00      	nop
    return;
 8008e8e:	e16e      	b.n	800916e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	f040 814a 	bne.w	800912e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8143 	beq.w	800912e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eac:	f003 0310 	and.w	r3, r3, #16
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 813c 	beq.w	800912e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60bb      	str	r3, [r7, #8]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	60bb      	str	r3, [r7, #8]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	f040 80b4 	bne.w	8009044 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8140 	beq.w	8009172 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008efa:	429a      	cmp	r2, r3
 8008efc:	f080 8139 	bcs.w	8009172 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f12:	f000 8088 	beq.w	8009026 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	330c      	adds	r3, #12
 8008f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	330c      	adds	r3, #12
 8008f3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1d9      	bne.n	8008f16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3314      	adds	r3, #20
 8008f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3314      	adds	r3, #20
 8008f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e1      	bne.n	8008f62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3314      	adds	r3, #20
 8008fa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3314      	adds	r3, #20
 8008fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e3      	bne.n	8008f9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	330c      	adds	r3, #12
 8008fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff6:	f023 0310 	bic.w	r3, r3, #16
 8008ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	330c      	adds	r3, #12
 8009004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009008:	65ba      	str	r2, [r7, #88]	; 0x58
 800900a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800900e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e3      	bne.n	8008fe4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	4618      	mov	r0, r3
 8009022:	f7fa fe73 	bl	8003d0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800902e:	b29b      	uxth	r3, r3
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	b29b      	uxth	r3, r3
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f8c0 	bl	80091bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800903c:	e099      	b.n	8009172 <HAL_UART_IRQHandler+0x50e>
 800903e:	bf00      	nop
 8009040:	0800929b 	.word	0x0800929b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800904c:	b29b      	uxth	r3, r3
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009058:	b29b      	uxth	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 808b 	beq.w	8009176 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 8086 	beq.w	8009176 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	330c      	adds	r3, #12
 8009070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800907a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	330c      	adds	r3, #12
 800908a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800908e:	647a      	str	r2, [r7, #68]	; 0x44
 8009090:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800909c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e3      	bne.n	800906a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3314      	adds	r3, #20
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	623b      	str	r3, [r7, #32]
   return(result);
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	f023 0301 	bic.w	r3, r3, #1
 80090b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3314      	adds	r3, #20
 80090c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090c6:	633a      	str	r2, [r7, #48]	; 0x30
 80090c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e3      	bne.n	80090a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	330c      	adds	r3, #12
 80090ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	e853 3f00 	ldrex	r3, [r3]
 80090f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0310 	bic.w	r3, r3, #16
 80090fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	330c      	adds	r3, #12
 8009108:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800910c:	61fa      	str	r2, [r7, #28]
 800910e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	69b9      	ldr	r1, [r7, #24]
 8009112:	69fa      	ldr	r2, [r7, #28]
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	617b      	str	r3, [r7, #20]
   return(result);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e3      	bne.n	80090e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f848 	bl	80091bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800912c:	e023      	b.n	8009176 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800912e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009136:	2b00      	cmp	r3, #0
 8009138:	d009      	beq.n	800914e <HAL_UART_IRQHandler+0x4ea>
 800913a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800913e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f8bb 	bl	80092c2 <UART_Transmit_IT>
    return;
 800914c:	e014      	b.n	8009178 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00e      	beq.n	8009178 <HAL_UART_IRQHandler+0x514>
 800915a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800915e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f8fb 	bl	8009362 <UART_EndTransmit_IT>
    return;
 800916c:	e004      	b.n	8009178 <HAL_UART_IRQHandler+0x514>
    return;
 800916e:	bf00      	nop
 8009170:	e002      	b.n	8009178 <HAL_UART_IRQHandler+0x514>
      return;
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <HAL_UART_IRQHandler+0x514>
      return;
 8009176:	bf00      	nop
  }
}
 8009178:	37e8      	adds	r7, #232	; 0xe8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop

08009180 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b095      	sub	sp, #84	; 0x54
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	330c      	adds	r3, #12
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	330c      	adds	r3, #12
 80091fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091fc:	643a      	str	r2, [r7, #64]	; 0x40
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e5      	bne.n	80091dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3314      	adds	r3, #20
 8009216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	f023 0301 	bic.w	r3, r3, #1
 8009226:	64bb      	str	r3, [r7, #72]	; 0x48
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3314      	adds	r3, #20
 800922e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e5      	bne.n	8009210 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009248:	2b01      	cmp	r3, #1
 800924a:	d119      	bne.n	8009280 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	330c      	adds	r3, #12
 8009252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	60bb      	str	r3, [r7, #8]
   return(result);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f023 0310 	bic.w	r3, r3, #16
 8009262:	647b      	str	r3, [r7, #68]	; 0x44
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	330c      	adds	r3, #12
 800926a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800926c:	61ba      	str	r2, [r7, #24]
 800926e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6979      	ldr	r1, [r7, #20]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	613b      	str	r3, [r7, #16]
   return(result);
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e5      	bne.n	800924c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800928e:	bf00      	nop
 8009290:	3754      	adds	r7, #84	; 0x54
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff ff77 	bl	80091a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b085      	sub	sp, #20
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b21      	cmp	r3, #33	; 0x21
 80092d4:	d13e      	bne.n	8009354 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092de:	d114      	bne.n	800930a <UART_Transmit_IT+0x48>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d110      	bne.n	800930a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	1c9a      	adds	r2, r3, #2
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	621a      	str	r2, [r3, #32]
 8009308:	e008      	b.n	800931c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	1c59      	adds	r1, r3, #1
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	6211      	str	r1, [r2, #32]
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29b      	uxth	r3, r3
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	4619      	mov	r1, r3
 800932a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10f      	bne.n	8009350 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800933e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800934e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	e000      	b.n	8009356 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009354:	2302      	movs	r3, #2
  }
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68da      	ldr	r2, [r3, #12]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009378:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff fefc 	bl	8009180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b08c      	sub	sp, #48	; 0x30
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b22      	cmp	r3, #34	; 0x22
 80093a4:	f040 80ab 	bne.w	80094fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b0:	d117      	bne.n	80093e2 <UART_Receive_IT+0x50>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d113      	bne.n	80093e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	1c9a      	adds	r2, r3, #2
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	629a      	str	r2, [r3, #40]	; 0x28
 80093e0:	e026      	b.n	8009430 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093e8:	2300      	movs	r3, #0
 80093ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f4:	d007      	beq.n	8009406 <UART_Receive_IT+0x74>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <UART_Receive_IT+0x82>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d106      	bne.n	8009414 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	b2da      	uxtb	r2, r3
 800940e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	e008      	b.n	8009426 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009420:	b2da      	uxtb	r2, r3
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29b      	uxth	r3, r3
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	4619      	mov	r1, r3
 800943e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009440:	2b00      	cmp	r3, #0
 8009442:	d15a      	bne.n	80094fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0220 	bic.w	r2, r2, #32
 8009452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68da      	ldr	r2, [r3, #12]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	695a      	ldr	r2, [r3, #20]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0201 	bic.w	r2, r2, #1
 8009472:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	2b01      	cmp	r3, #1
 8009482:	d135      	bne.n	80094f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	330c      	adds	r3, #12
 8009490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	613b      	str	r3, [r7, #16]
   return(result);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f023 0310 	bic.w	r3, r3, #16
 80094a0:	627b      	str	r3, [r7, #36]	; 0x24
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	330c      	adds	r3, #12
 80094a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094aa:	623a      	str	r2, [r7, #32]
 80094ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	69f9      	ldr	r1, [r7, #28]
 80094b0:	6a3a      	ldr	r2, [r7, #32]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e5      	bne.n	800948a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	d10a      	bne.n	80094e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff fe67 	bl	80091bc <HAL_UARTEx_RxEventCallback>
 80094ee:	e002      	b.n	80094f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fe4f 	bl	8009194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e002      	b.n	8009500 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	e000      	b.n	8009500 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094fe:	2302      	movs	r3, #2
  }
}
 8009500:	4618      	mov	r0, r3
 8009502:	3730      	adds	r7, #48	; 0x30
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800950c:	b0c0      	sub	sp, #256	; 0x100
 800950e:	af00      	add	r7, sp, #0
 8009510:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009524:	68d9      	ldr	r1, [r3, #12]
 8009526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	ea40 0301 	orr.w	r3, r0, r1
 8009530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	431a      	orrs	r2, r3
 8009540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	431a      	orrs	r2, r3
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	4313      	orrs	r3, r2
 8009550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009560:	f021 010c 	bic.w	r1, r1, #12
 8009564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800956e:	430b      	orrs	r3, r1
 8009570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800957e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009582:	6999      	ldr	r1, [r3, #24]
 8009584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	ea40 0301 	orr.w	r3, r0, r1
 800958e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	4b8f      	ldr	r3, [pc, #572]	; (80097d4 <UART_SetConfig+0x2cc>)
 8009598:	429a      	cmp	r2, r3
 800959a:	d005      	beq.n	80095a8 <UART_SetConfig+0xa0>
 800959c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	4b8d      	ldr	r3, [pc, #564]	; (80097d8 <UART_SetConfig+0x2d0>)
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d104      	bne.n	80095b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095a8:	f7fe fb38 	bl	8007c1c <HAL_RCC_GetPCLK2Freq>
 80095ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095b0:	e003      	b.n	80095ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095b2:	f7fe fb1f 	bl	8007bf4 <HAL_RCC_GetPCLK1Freq>
 80095b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c4:	f040 810c 	bne.w	80097e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095da:	4622      	mov	r2, r4
 80095dc:	462b      	mov	r3, r5
 80095de:	1891      	adds	r1, r2, r2
 80095e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80095e2:	415b      	adcs	r3, r3
 80095e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095ea:	4621      	mov	r1, r4
 80095ec:	eb12 0801 	adds.w	r8, r2, r1
 80095f0:	4629      	mov	r1, r5
 80095f2:	eb43 0901 	adc.w	r9, r3, r1
 80095f6:	f04f 0200 	mov.w	r2, #0
 80095fa:	f04f 0300 	mov.w	r3, #0
 80095fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800960a:	4690      	mov	r8, r2
 800960c:	4699      	mov	r9, r3
 800960e:	4623      	mov	r3, r4
 8009610:	eb18 0303 	adds.w	r3, r8, r3
 8009614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009618:	462b      	mov	r3, r5
 800961a:	eb49 0303 	adc.w	r3, r9, r3
 800961e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800962e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009636:	460b      	mov	r3, r1
 8009638:	18db      	adds	r3, r3, r3
 800963a:	653b      	str	r3, [r7, #80]	; 0x50
 800963c:	4613      	mov	r3, r2
 800963e:	eb42 0303 	adc.w	r3, r2, r3
 8009642:	657b      	str	r3, [r7, #84]	; 0x54
 8009644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800964c:	f7f7 fb54 	bl	8000cf8 <__aeabi_uldivmod>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	4b61      	ldr	r3, [pc, #388]	; (80097dc <UART_SetConfig+0x2d4>)
 8009656:	fba3 2302 	umull	r2, r3, r3, r2
 800965a:	095b      	lsrs	r3, r3, #5
 800965c:	011c      	lsls	r4, r3, #4
 800965e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009662:	2200      	movs	r2, #0
 8009664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009668:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800966c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009670:	4642      	mov	r2, r8
 8009672:	464b      	mov	r3, r9
 8009674:	1891      	adds	r1, r2, r2
 8009676:	64b9      	str	r1, [r7, #72]	; 0x48
 8009678:	415b      	adcs	r3, r3
 800967a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800967c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009680:	4641      	mov	r1, r8
 8009682:	eb12 0a01 	adds.w	sl, r2, r1
 8009686:	4649      	mov	r1, r9
 8009688:	eb43 0b01 	adc.w	fp, r3, r1
 800968c:	f04f 0200 	mov.w	r2, #0
 8009690:	f04f 0300 	mov.w	r3, #0
 8009694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800969c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096a0:	4692      	mov	sl, r2
 80096a2:	469b      	mov	fp, r3
 80096a4:	4643      	mov	r3, r8
 80096a6:	eb1a 0303 	adds.w	r3, sl, r3
 80096aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096ae:	464b      	mov	r3, r9
 80096b0:	eb4b 0303 	adc.w	r3, fp, r3
 80096b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096cc:	460b      	mov	r3, r1
 80096ce:	18db      	adds	r3, r3, r3
 80096d0:	643b      	str	r3, [r7, #64]	; 0x40
 80096d2:	4613      	mov	r3, r2
 80096d4:	eb42 0303 	adc.w	r3, r2, r3
 80096d8:	647b      	str	r3, [r7, #68]	; 0x44
 80096da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096e2:	f7f7 fb09 	bl	8000cf8 <__aeabi_uldivmod>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4611      	mov	r1, r2
 80096ec:	4b3b      	ldr	r3, [pc, #236]	; (80097dc <UART_SetConfig+0x2d4>)
 80096ee:	fba3 2301 	umull	r2, r3, r3, r1
 80096f2:	095b      	lsrs	r3, r3, #5
 80096f4:	2264      	movs	r2, #100	; 0x64
 80096f6:	fb02 f303 	mul.w	r3, r2, r3
 80096fa:	1acb      	subs	r3, r1, r3
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009702:	4b36      	ldr	r3, [pc, #216]	; (80097dc <UART_SetConfig+0x2d4>)
 8009704:	fba3 2302 	umull	r2, r3, r3, r2
 8009708:	095b      	lsrs	r3, r3, #5
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009710:	441c      	add	r4, r3
 8009712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009716:	2200      	movs	r2, #0
 8009718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800971c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009724:	4642      	mov	r2, r8
 8009726:	464b      	mov	r3, r9
 8009728:	1891      	adds	r1, r2, r2
 800972a:	63b9      	str	r1, [r7, #56]	; 0x38
 800972c:	415b      	adcs	r3, r3
 800972e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009734:	4641      	mov	r1, r8
 8009736:	1851      	adds	r1, r2, r1
 8009738:	6339      	str	r1, [r7, #48]	; 0x30
 800973a:	4649      	mov	r1, r9
 800973c:	414b      	adcs	r3, r1
 800973e:	637b      	str	r3, [r7, #52]	; 0x34
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800974c:	4659      	mov	r1, fp
 800974e:	00cb      	lsls	r3, r1, #3
 8009750:	4651      	mov	r1, sl
 8009752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009756:	4651      	mov	r1, sl
 8009758:	00ca      	lsls	r2, r1, #3
 800975a:	4610      	mov	r0, r2
 800975c:	4619      	mov	r1, r3
 800975e:	4603      	mov	r3, r0
 8009760:	4642      	mov	r2, r8
 8009762:	189b      	adds	r3, r3, r2
 8009764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009768:	464b      	mov	r3, r9
 800976a:	460a      	mov	r2, r1
 800976c:	eb42 0303 	adc.w	r3, r2, r3
 8009770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009780:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009788:	460b      	mov	r3, r1
 800978a:	18db      	adds	r3, r3, r3
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28
 800978e:	4613      	mov	r3, r2
 8009790:	eb42 0303 	adc.w	r3, r2, r3
 8009794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800979a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800979e:	f7f7 faab 	bl	8000cf8 <__aeabi_uldivmod>
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <UART_SetConfig+0x2d4>)
 80097a8:	fba3 1302 	umull	r1, r3, r3, r2
 80097ac:	095b      	lsrs	r3, r3, #5
 80097ae:	2164      	movs	r1, #100	; 0x64
 80097b0:	fb01 f303 	mul.w	r3, r1, r3
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	00db      	lsls	r3, r3, #3
 80097b8:	3332      	adds	r3, #50	; 0x32
 80097ba:	4a08      	ldr	r2, [pc, #32]	; (80097dc <UART_SetConfig+0x2d4>)
 80097bc:	fba2 2303 	umull	r2, r3, r2, r3
 80097c0:	095b      	lsrs	r3, r3, #5
 80097c2:	f003 0207 	and.w	r2, r3, #7
 80097c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4422      	add	r2, r4
 80097ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097d0:	e105      	b.n	80099de <UART_SetConfig+0x4d6>
 80097d2:	bf00      	nop
 80097d4:	40011000 	.word	0x40011000
 80097d8:	40011400 	.word	0x40011400
 80097dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097f2:	4642      	mov	r2, r8
 80097f4:	464b      	mov	r3, r9
 80097f6:	1891      	adds	r1, r2, r2
 80097f8:	6239      	str	r1, [r7, #32]
 80097fa:	415b      	adcs	r3, r3
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
 80097fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009802:	4641      	mov	r1, r8
 8009804:	1854      	adds	r4, r2, r1
 8009806:	4649      	mov	r1, r9
 8009808:	eb43 0501 	adc.w	r5, r3, r1
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	00eb      	lsls	r3, r5, #3
 8009816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800981a:	00e2      	lsls	r2, r4, #3
 800981c:	4614      	mov	r4, r2
 800981e:	461d      	mov	r5, r3
 8009820:	4643      	mov	r3, r8
 8009822:	18e3      	adds	r3, r4, r3
 8009824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009828:	464b      	mov	r3, r9
 800982a:	eb45 0303 	adc.w	r3, r5, r3
 800982e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800983e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009842:	f04f 0200 	mov.w	r2, #0
 8009846:	f04f 0300 	mov.w	r3, #0
 800984a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800984e:	4629      	mov	r1, r5
 8009850:	008b      	lsls	r3, r1, #2
 8009852:	4621      	mov	r1, r4
 8009854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009858:	4621      	mov	r1, r4
 800985a:	008a      	lsls	r2, r1, #2
 800985c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009860:	f7f7 fa4a 	bl	8000cf8 <__aeabi_uldivmod>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4b60      	ldr	r3, [pc, #384]	; (80099ec <UART_SetConfig+0x4e4>)
 800986a:	fba3 2302 	umull	r2, r3, r3, r2
 800986e:	095b      	lsrs	r3, r3, #5
 8009870:	011c      	lsls	r4, r3, #4
 8009872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009876:	2200      	movs	r2, #0
 8009878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800987c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009884:	4642      	mov	r2, r8
 8009886:	464b      	mov	r3, r9
 8009888:	1891      	adds	r1, r2, r2
 800988a:	61b9      	str	r1, [r7, #24]
 800988c:	415b      	adcs	r3, r3
 800988e:	61fb      	str	r3, [r7, #28]
 8009890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009894:	4641      	mov	r1, r8
 8009896:	1851      	adds	r1, r2, r1
 8009898:	6139      	str	r1, [r7, #16]
 800989a:	4649      	mov	r1, r9
 800989c:	414b      	adcs	r3, r1
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	f04f 0300 	mov.w	r3, #0
 80098a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098ac:	4659      	mov	r1, fp
 80098ae:	00cb      	lsls	r3, r1, #3
 80098b0:	4651      	mov	r1, sl
 80098b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098b6:	4651      	mov	r1, sl
 80098b8:	00ca      	lsls	r2, r1, #3
 80098ba:	4610      	mov	r0, r2
 80098bc:	4619      	mov	r1, r3
 80098be:	4603      	mov	r3, r0
 80098c0:	4642      	mov	r2, r8
 80098c2:	189b      	adds	r3, r3, r2
 80098c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098c8:	464b      	mov	r3, r9
 80098ca:	460a      	mov	r2, r1
 80098cc:	eb42 0303 	adc.w	r3, r2, r3
 80098d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80098de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098e0:	f04f 0200 	mov.w	r2, #0
 80098e4:	f04f 0300 	mov.w	r3, #0
 80098e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098ec:	4649      	mov	r1, r9
 80098ee:	008b      	lsls	r3, r1, #2
 80098f0:	4641      	mov	r1, r8
 80098f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098f6:	4641      	mov	r1, r8
 80098f8:	008a      	lsls	r2, r1, #2
 80098fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098fe:	f7f7 f9fb 	bl	8000cf8 <__aeabi_uldivmod>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4b39      	ldr	r3, [pc, #228]	; (80099ec <UART_SetConfig+0x4e4>)
 8009908:	fba3 1302 	umull	r1, r3, r3, r2
 800990c:	095b      	lsrs	r3, r3, #5
 800990e:	2164      	movs	r1, #100	; 0x64
 8009910:	fb01 f303 	mul.w	r3, r1, r3
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	3332      	adds	r3, #50	; 0x32
 800991a:	4a34      	ldr	r2, [pc, #208]	; (80099ec <UART_SetConfig+0x4e4>)
 800991c:	fba2 2303 	umull	r2, r3, r2, r3
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009926:	441c      	add	r4, r3
 8009928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800992c:	2200      	movs	r2, #0
 800992e:	673b      	str	r3, [r7, #112]	; 0x70
 8009930:	677a      	str	r2, [r7, #116]	; 0x74
 8009932:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009936:	4642      	mov	r2, r8
 8009938:	464b      	mov	r3, r9
 800993a:	1891      	adds	r1, r2, r2
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	415b      	adcs	r3, r3
 8009940:	60fb      	str	r3, [r7, #12]
 8009942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009946:	4641      	mov	r1, r8
 8009948:	1851      	adds	r1, r2, r1
 800994a:	6039      	str	r1, [r7, #0]
 800994c:	4649      	mov	r1, r9
 800994e:	414b      	adcs	r3, r1
 8009950:	607b      	str	r3, [r7, #4]
 8009952:	f04f 0200 	mov.w	r2, #0
 8009956:	f04f 0300 	mov.w	r3, #0
 800995a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800995e:	4659      	mov	r1, fp
 8009960:	00cb      	lsls	r3, r1, #3
 8009962:	4651      	mov	r1, sl
 8009964:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009968:	4651      	mov	r1, sl
 800996a:	00ca      	lsls	r2, r1, #3
 800996c:	4610      	mov	r0, r2
 800996e:	4619      	mov	r1, r3
 8009970:	4603      	mov	r3, r0
 8009972:	4642      	mov	r2, r8
 8009974:	189b      	adds	r3, r3, r2
 8009976:	66bb      	str	r3, [r7, #104]	; 0x68
 8009978:	464b      	mov	r3, r9
 800997a:	460a      	mov	r2, r1
 800997c:	eb42 0303 	adc.w	r3, r2, r3
 8009980:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	663b      	str	r3, [r7, #96]	; 0x60
 800998c:	667a      	str	r2, [r7, #100]	; 0x64
 800998e:	f04f 0200 	mov.w	r2, #0
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800999a:	4649      	mov	r1, r9
 800999c:	008b      	lsls	r3, r1, #2
 800999e:	4641      	mov	r1, r8
 80099a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099a4:	4641      	mov	r1, r8
 80099a6:	008a      	lsls	r2, r1, #2
 80099a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099ac:	f7f7 f9a4 	bl	8000cf8 <__aeabi_uldivmod>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <UART_SetConfig+0x4e4>)
 80099b6:	fba3 1302 	umull	r1, r3, r3, r2
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	2164      	movs	r1, #100	; 0x64
 80099be:	fb01 f303 	mul.w	r3, r1, r3
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	3332      	adds	r3, #50	; 0x32
 80099c8:	4a08      	ldr	r2, [pc, #32]	; (80099ec <UART_SetConfig+0x4e4>)
 80099ca:	fba2 2303 	umull	r2, r3, r2, r3
 80099ce:	095b      	lsrs	r3, r3, #5
 80099d0:	f003 020f 	and.w	r2, r3, #15
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4422      	add	r2, r4
 80099dc:	609a      	str	r2, [r3, #8]
}
 80099de:	bf00      	nop
 80099e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099e4:	46bd      	mov	sp, r7
 80099e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ea:	bf00      	nop
 80099ec:	51eb851f 	.word	0x51eb851f

080099f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80099fa:	2300      	movs	r3, #0
 80099fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80099fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a02:	2b84      	cmp	r3, #132	; 0x84
 8009a04:	d005      	beq.n	8009a12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009a06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3303      	adds	r3, #3
 8009a10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a12:	68fb      	ldr	r3, [r7, #12]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009a24:	f001 f9b2 	bl	800ad8c <vTaskStartScheduler>
  
  return osOK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a30:	b089      	sub	sp, #36	; 0x24
 8009a32:	af04      	add	r7, sp, #16
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d020      	beq.n	8009a82 <osThreadCreate+0x54>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d01c      	beq.n	8009a82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685c      	ldr	r4, [r3, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681d      	ldr	r5, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691e      	ldr	r6, [r3, #16]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7ff ffc8 	bl	80099f0 <makeFreeRtosPriority>
 8009a60:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a6a:	9202      	str	r2, [sp, #8]
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	9100      	str	r1, [sp, #0]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	4632      	mov	r2, r6
 8009a74:	4629      	mov	r1, r5
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 ffc0 	bl	800a9fc <xTaskCreateStatic>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	e01c      	b.n	8009abc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685c      	ldr	r4, [r3, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a8e:	b29e      	uxth	r6, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff ffaa 	bl	80099f0 <makeFreeRtosPriority>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	9200      	str	r2, [sp, #0]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	4629      	mov	r1, r5
 8009aac:	4620      	mov	r0, r4
 8009aae:	f001 f802 	bl	800aab6 <xTaskCreate>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d001      	beq.n	8009abc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e000      	b.n	8009abe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009abc:	68fb      	ldr	r3, [r7, #12]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ac6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <osDelay+0x16>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	e000      	b.n	8009ade <osDelay+0x18>
 8009adc:	2301      	movs	r3, #1
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 f920 	bl	800ad24 <vTaskDelay>
  
  return osOK;
 8009ae4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f103 0208 	add.w	r2, r3, #8
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f04f 32ff 	mov.w	r2, #4294967295
 8009b06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f103 0208 	add.w	r2, r3, #8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f103 0208 	add.w	r2, r3, #8
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b22:	bf00      	nop
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	601a      	str	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba6:	d103      	bne.n	8009bb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	60fb      	str	r3, [r7, #12]
 8009bae:	e00c      	b.n	8009bca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	e002      	b.n	8009bbe <vListInsert+0x2e>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d2f6      	bcs.n	8009bb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	601a      	str	r2, [r3, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	6892      	ldr	r2, [r2, #8]
 8009c18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6852      	ldr	r2, [r2, #4]
 8009c22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d103      	bne.n	8009c36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	1e5a      	subs	r2, r3, #1
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c82:	f002 fb47 	bl	800c314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8e:	68f9      	ldr	r1, [r7, #12]
 8009c90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c92:	fb01 f303 	mul.w	r3, r1, r3
 8009c96:	441a      	add	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	68f9      	ldr	r1, [r7, #12]
 8009cb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cb8:	fb01 f303 	mul.w	r3, r1, r3
 8009cbc:	441a      	add	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	22ff      	movs	r2, #255	; 0xff
 8009cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	22ff      	movs	r2, #255	; 0xff
 8009cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d114      	bne.n	8009d02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01a      	beq.n	8009d16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3310      	adds	r3, #16
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f001 fad5 	bl	800b294 <xTaskRemoveFromEventList>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d012      	beq.n	8009d16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cf0:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <xQueueGenericReset+0xcc>)
 8009cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	e009      	b.n	8009d16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3310      	adds	r3, #16
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7ff fef1 	bl	8009aee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3324      	adds	r3, #36	; 0x24
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff feec 	bl	8009aee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d16:	f002 fb2d 	bl	800c374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d1a:	2301      	movs	r3, #1
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	e000ed04 	.word	0xe000ed04

08009d28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08e      	sub	sp, #56	; 0x38
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10a      	bne.n	8009d52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <xQueueGenericCreateStatic+0x52>
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <xQueueGenericCreateStatic+0x56>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e000      	b.n	8009d80 <xQueueGenericCreateStatic+0x58>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	623b      	str	r3, [r7, #32]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d102      	bne.n	8009da6 <xQueueGenericCreateStatic+0x7e>
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <xQueueGenericCreateStatic+0x82>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e000      	b.n	8009dac <xQueueGenericCreateStatic+0x84>
 8009daa:	2300      	movs	r3, #0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10a      	bne.n	8009dc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	61fb      	str	r3, [r7, #28]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dc6:	2348      	movs	r3, #72	; 0x48
 8009dc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2b48      	cmp	r3, #72	; 0x48
 8009dce:	d00a      	beq.n	8009de6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	61bb      	str	r3, [r7, #24]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009de6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00d      	beq.n	8009e0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009dfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	4613      	mov	r3, r2
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	68b9      	ldr	r1, [r7, #8]
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 f83f 	bl	8009e8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3730      	adds	r7, #48	; 0x30
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	; 0x28
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	4613      	mov	r3, r2
 8009e24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	613b      	str	r3, [r7, #16]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	fb02 f303 	mul.w	r3, r2, r3
 8009e4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	3348      	adds	r3, #72	; 0x48
 8009e50:	4618      	mov	r0, r3
 8009e52:	f002 fb81 	bl	800c558 <pvPortMalloc>
 8009e56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d011      	beq.n	8009e82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	3348      	adds	r3, #72	; 0x48
 8009e66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e70:	79fa      	ldrb	r2, [r7, #7]
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	4613      	mov	r3, r2
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	68b9      	ldr	r1, [r7, #8]
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 f805 	bl	8009e8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e82:	69bb      	ldr	r3, [r7, #24]
	}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3720      	adds	r7, #32
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d103      	bne.n	8009ea8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	e002      	b.n	8009eae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009eba:	2101      	movs	r1, #1
 8009ebc:	69b8      	ldr	r0, [r7, #24]
 8009ebe:	f7ff fecb 	bl	8009c58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08e      	sub	sp, #56	; 0x38
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009eda:	2300      	movs	r3, #0
 8009edc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <xQueueGenericSend+0x32>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d103      	bne.n	8009f0c <xQueueGenericSend+0x40>
 8009f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <xQueueGenericSend+0x44>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <xQueueGenericSend+0x46>
 8009f10:	2300      	movs	r3, #0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <xQueueGenericSend+0x60>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d103      	bne.n	8009f3a <xQueueGenericSend+0x6e>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d101      	bne.n	8009f3e <xQueueGenericSend+0x72>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e000      	b.n	8009f40 <xQueueGenericSend+0x74>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <xQueueGenericSend+0x8e>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	623b      	str	r3, [r7, #32]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f5a:	f001 fb57 	bl	800b60c <xTaskGetSchedulerState>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <xQueueGenericSend+0x9e>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <xQueueGenericSend+0xa2>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <xQueueGenericSend+0xa4>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xQueueGenericSend+0xbe>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	61fb      	str	r3, [r7, #28]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f8a:	f002 f9c3 	bl	800c314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d302      	bcc.n	8009fa0 <xQueueGenericSend+0xd4>
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d129      	bne.n	8009ff4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	68b9      	ldr	r1, [r7, #8]
 8009fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa6:	f000 fbbb 	bl	800a720 <prvCopyDataToQueue>
 8009faa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d010      	beq.n	8009fd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb6:	3324      	adds	r3, #36	; 0x24
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f001 f96b 	bl	800b294 <xTaskRemoveFromEventList>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d013      	beq.n	8009fec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fc4:	4b3f      	ldr	r3, [pc, #252]	; (800a0c4 <xQueueGenericSend+0x1f8>)
 8009fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	e00a      	b.n	8009fec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d007      	beq.n	8009fec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fdc:	4b39      	ldr	r3, [pc, #228]	; (800a0c4 <xQueueGenericSend+0x1f8>)
 8009fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fec:	f002 f9c2 	bl	800c374 <vPortExitCritical>
				return pdPASS;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e063      	b.n	800a0bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ffa:	f002 f9bb 	bl	800c374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e05c      	b.n	800a0bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a004:	2b00      	cmp	r3, #0
 800a006:	d106      	bne.n	800a016 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a008:	f107 0314 	add.w	r3, r7, #20
 800a00c:	4618      	mov	r0, r3
 800a00e:	f001 f9a3 	bl	800b358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a012:	2301      	movs	r3, #1
 800a014:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a016:	f002 f9ad 	bl	800c374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a01a:	f000 ff1d 	bl	800ae58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a01e:	f002 f979 	bl	800c314 <vPortEnterCritical>
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a028:	b25b      	sxtb	r3, r3
 800a02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02e:	d103      	bne.n	800a038 <xQueueGenericSend+0x16c>
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a03e:	b25b      	sxtb	r3, r3
 800a040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a044:	d103      	bne.n	800a04e <xQueueGenericSend+0x182>
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a04e:	f002 f991 	bl	800c374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a052:	1d3a      	adds	r2, r7, #4
 800a054:	f107 0314 	add.w	r3, r7, #20
 800a058:	4611      	mov	r1, r2
 800a05a:	4618      	mov	r0, r3
 800a05c:	f001 f992 	bl	800b384 <xTaskCheckForTimeOut>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d124      	bne.n	800a0b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a068:	f000 fc52 	bl	800a910 <prvIsQueueFull>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d018      	beq.n	800a0a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	3310      	adds	r3, #16
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	4611      	mov	r1, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f001 f8ba 	bl	800b1f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a082:	f000 fbdd 	bl	800a840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a086:	f000 fef5 	bl	800ae74 <xTaskResumeAll>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f47f af7c 	bne.w	8009f8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a092:	4b0c      	ldr	r3, [pc, #48]	; (800a0c4 <xQueueGenericSend+0x1f8>)
 800a094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	e772      	b.n	8009f8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0a6:	f000 fbcb 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0aa:	f000 fee3 	bl	800ae74 <xTaskResumeAll>
 800a0ae:	e76c      	b.n	8009f8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0b2:	f000 fbc5 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0b6:	f000 fedd 	bl	800ae74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3738      	adds	r7, #56	; 0x38
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	e000ed04 	.word	0xe000ed04

0800a0c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b090      	sub	sp, #64	; 0x40
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d103      	bne.n	800a104 <xQueueGenericSendFromISR+0x3c>
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <xQueueGenericSendFromISR+0x40>
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <xQueueGenericSendFromISR+0x42>
 800a108:	2300      	movs	r3, #0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d103      	bne.n	800a132 <xQueueGenericSendFromISR+0x6a>
 800a12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d101      	bne.n	800a136 <xQueueGenericSendFromISR+0x6e>
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <xQueueGenericSendFromISR+0x70>
 800a136:	2300      	movs	r3, #0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	623b      	str	r3, [r7, #32]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a152:	f002 f9c1 	bl	800c4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a156:	f3ef 8211 	mrs	r2, BASEPRI
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	61fa      	str	r2, [r7, #28]
 800a16c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a16e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a170:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d302      	bcc.n	800a184 <xQueueGenericSendFromISR+0xbc>
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b02      	cmp	r3, #2
 800a182:	d12f      	bne.n	800a1e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	68b9      	ldr	r1, [r7, #8]
 800a198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a19a:	f000 fac1 	bl	800a720 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a19e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d112      	bne.n	800a1ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d016      	beq.n	800a1de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	3324      	adds	r3, #36	; 0x24
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f001 f86d 	bl	800b294 <xTaskRemoveFromEventList>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00e      	beq.n	800a1de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	e007      	b.n	800a1de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	b25a      	sxtb	r2, r3
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a1e2:	e001      	b.n	800a1e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3740      	adds	r7, #64	; 0x40
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b08e      	sub	sp, #56	; 0x38
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10a      	bne.n	800a228 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	623b      	str	r3, [r7, #32]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00a      	beq.n	800a246 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	61fb      	str	r3, [r7, #28]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <xQueueGiveFromISR+0x58>
 800a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <xQueueGiveFromISR+0x5c>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <xQueueGiveFromISR+0x5e>
 800a25a:	2300      	movs	r3, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	61bb      	str	r3, [r7, #24]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a276:	f002 f92f 	bl	800c4d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a27a:	f3ef 8211 	mrs	r2, BASEPRI
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	617a      	str	r2, [r7, #20]
 800a290:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a292:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a294:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d22b      	bcs.n	800a2fe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c0:	d112      	bne.n	800a2e8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d016      	beq.n	800a2f8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	3324      	adds	r3, #36	; 0x24
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 ffe0 	bl	800b294 <xTaskRemoveFromEventList>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00e      	beq.n	800a2f8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	e007      	b.n	800a2f8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	b25a      	sxtb	r2, r3
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	637b      	str	r3, [r7, #52]	; 0x34
 800a2fc:	e001      	b.n	800a302 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	637b      	str	r3, [r7, #52]	; 0x34
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f383 8811 	msr	BASEPRI, r3
}
 800a30c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a310:	4618      	mov	r0, r3
 800a312:	3738      	adds	r7, #56	; 0x38
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08c      	sub	sp, #48	; 0x30
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a324:	2300      	movs	r3, #0
 800a326:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <xQueueReceive+0x30>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	623b      	str	r3, [r7, #32]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d103      	bne.n	800a356 <xQueueReceive+0x3e>
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <xQueueReceive+0x42>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueReceive+0x44>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xQueueReceive+0x5e>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	61fb      	str	r3, [r7, #28]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a376:	f001 f949 	bl	800b60c <xTaskGetSchedulerState>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <xQueueReceive+0x6e>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <xQueueReceive+0x72>
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <xQueueReceive+0x74>
 800a38a:	2300      	movs	r3, #0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10a      	bne.n	800a3a6 <xQueueReceive+0x8e>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	61bb      	str	r3, [r7, #24]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3a6:	f001 ffb5 	bl	800c314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d01f      	beq.n	800a3f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ba:	f000 fa1b 	bl	800a7f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	1e5a      	subs	r2, r3, #1
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00f      	beq.n	800a3ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	3310      	adds	r3, #16
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 ff5e 	bl	800b294 <xTaskRemoveFromEventList>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d007      	beq.n	800a3ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3de:	4b3d      	ldr	r3, [pc, #244]	; (800a4d4 <xQueueReceive+0x1bc>)
 800a3e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3ee:	f001 ffc1 	bl	800c374 <vPortExitCritical>
				return pdPASS;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e069      	b.n	800a4ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d103      	bne.n	800a404 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3fc:	f001 ffba 	bl	800c374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a400:	2300      	movs	r3, #0
 800a402:	e062      	b.n	800a4ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a40a:	f107 0310 	add.w	r3, r7, #16
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 ffa2 	bl	800b358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a418:	f001 ffac 	bl	800c374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a41c:	f000 fd1c 	bl	800ae58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a420:	f001 ff78 	bl	800c314 <vPortEnterCritical>
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a42a:	b25b      	sxtb	r3, r3
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a430:	d103      	bne.n	800a43a <xQueueReceive+0x122>
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a440:	b25b      	sxtb	r3, r3
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d103      	bne.n	800a450 <xQueueReceive+0x138>
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a450:	f001 ff90 	bl	800c374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a454:	1d3a      	adds	r2, r7, #4
 800a456:	f107 0310 	add.w	r3, r7, #16
 800a45a:	4611      	mov	r1, r2
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 ff91 	bl	800b384 <xTaskCheckForTimeOut>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d123      	bne.n	800a4b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a46a:	f000 fa3b 	bl	800a8e4 <prvIsQueueEmpty>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d017      	beq.n	800a4a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	3324      	adds	r3, #36	; 0x24
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	4611      	mov	r1, r2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 feb9 	bl	800b1f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a484:	f000 f9dc 	bl	800a840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a488:	f000 fcf4 	bl	800ae74 <xTaskResumeAll>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d189      	bne.n	800a3a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a492:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <xQueueReceive+0x1bc>)
 800a494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	e780      	b.n	800a3a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4a6:	f000 f9cb 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4aa:	f000 fce3 	bl	800ae74 <xTaskResumeAll>
 800a4ae:	e77a      	b.n	800a3a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b2:	f000 f9c5 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4b6:	f000 fcdd 	bl	800ae74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4bc:	f000 fa12 	bl	800a8e4 <prvIsQueueEmpty>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f43f af6f 	beq.w	800a3a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3730      	adds	r7, #48	; 0x30
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	e000ed04 	.word	0xe000ed04

0800a4d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08e      	sub	sp, #56	; 0x38
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10a      	bne.n	800a50a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	623b      	str	r3, [r7, #32]
}
 800a506:	bf00      	nop
 800a508:	e7fe      	b.n	800a508 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	61fb      	str	r3, [r7, #28]
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a528:	f001 f870 	bl	800b60c <xTaskGetSchedulerState>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d102      	bne.n	800a538 <xQueueSemaphoreTake+0x60>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <xQueueSemaphoreTake+0x64>
 800a538:	2301      	movs	r3, #1
 800a53a:	e000      	b.n	800a53e <xQueueSemaphoreTake+0x66>
 800a53c:	2300      	movs	r3, #0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10a      	bne.n	800a558 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	61bb      	str	r3, [r7, #24]
}
 800a554:	bf00      	nop
 800a556:	e7fe      	b.n	800a556 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a558:	f001 fedc 	bl	800c314 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a560:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	2b00      	cmp	r3, #0
 800a566:	d024      	beq.n	800a5b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	1e5a      	subs	r2, r3, #1
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a578:	f001 f9f0 	bl	800b95c <pvTaskIncrementMutexHeldCount>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00f      	beq.n	800a5aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	3310      	adds	r3, #16
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fe80 	bl	800b294 <xTaskRemoveFromEventList>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d007      	beq.n	800a5aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a59a:	4b54      	ldr	r3, [pc, #336]	; (800a6ec <xQueueSemaphoreTake+0x214>)
 800a59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5aa:	f001 fee3 	bl	800c374 <vPortExitCritical>
				return pdPASS;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e097      	b.n	800a6e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d111      	bne.n	800a5dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	617b      	str	r3, [r7, #20]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5d4:	f001 fece 	bl	800c374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e082      	b.n	800a6e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5e2:	f107 030c 	add.w	r3, r7, #12
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 feb6 	bl	800b358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5f0:	f001 fec0 	bl	800c374 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5f4:	f000 fc30 	bl	800ae58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5f8:	f001 fe8c 	bl	800c314 <vPortEnterCritical>
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a602:	b25b      	sxtb	r3, r3
 800a604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a608:	d103      	bne.n	800a612 <xQueueSemaphoreTake+0x13a>
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a618:	b25b      	sxtb	r3, r3
 800a61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61e:	d103      	bne.n	800a628 <xQueueSemaphoreTake+0x150>
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a628:	f001 fea4 	bl	800c374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a62c:	463a      	mov	r2, r7
 800a62e:	f107 030c 	add.w	r3, r7, #12
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fea5 	bl	800b384 <xTaskCheckForTimeOut>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d132      	bne.n	800a6a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a642:	f000 f94f 	bl	800a8e4 <prvIsQueueEmpty>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d026      	beq.n	800a69a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d109      	bne.n	800a668 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a654:	f001 fe5e 	bl	800c314 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 fff3 	bl	800b648 <xTaskPriorityInherit>
 800a662:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a664:	f001 fe86 	bl	800c374 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	3324      	adds	r3, #36	; 0x24
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f000 fdbf 	bl	800b1f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a678:	f000 f8e2 	bl	800a840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a67c:	f000 fbfa 	bl	800ae74 <xTaskResumeAll>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	f47f af68 	bne.w	800a558 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a688:	4b18      	ldr	r3, [pc, #96]	; (800a6ec <xQueueSemaphoreTake+0x214>)
 800a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	e75e      	b.n	800a558 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a69a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a69c:	f000 f8d0 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6a0:	f000 fbe8 	bl	800ae74 <xTaskResumeAll>
 800a6a4:	e758      	b.n	800a558 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a6a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6a8:	f000 f8ca 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ac:	f000 fbe2 	bl	800ae74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6b2:	f000 f917 	bl	800a8e4 <prvIsQueueEmpty>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f43f af4d 	beq.w	800a558 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00d      	beq.n	800a6e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a6c4:	f001 fe26 	bl	800c314 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6ca:	f000 f811 	bl	800a6f0 <prvGetDisinheritPriorityAfterTimeout>
 800a6ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f001 f8b2 	bl	800b840 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6dc:	f001 fe4a 	bl	800c374 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3738      	adds	r7, #56	; 0x38
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	e000ed04 	.word	0xe000ed04

0800a6f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d006      	beq.n	800a70e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f1c3 0307 	rsb	r3, r3, #7
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	e001      	b.n	800a712 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a70e:	2300      	movs	r3, #0
 800a710:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a712:	68fb      	ldr	r3, [r7, #12]
	}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a72c:	2300      	movs	r3, #0
 800a72e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10d      	bne.n	800a75a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d14d      	bne.n	800a7e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fff2 	bl	800b734 <xTaskPriorityDisinherit>
 800a750:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	609a      	str	r2, [r3, #8]
 800a758:	e043      	b.n	800a7e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d119      	bne.n	800a794 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6858      	ldr	r0, [r3, #4]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	461a      	mov	r2, r3
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	f002 f908 	bl	800c980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	441a      	add	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	429a      	cmp	r2, r3
 800a788:	d32b      	bcc.n	800a7e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	e026      	b.n	800a7e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	68d8      	ldr	r0, [r3, #12]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	461a      	mov	r2, r3
 800a79e:	68b9      	ldr	r1, [r7, #8]
 800a7a0:	f002 f8ee 	bl	800c980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	425b      	negs	r3, r3
 800a7ae:	441a      	add	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d207      	bcs.n	800a7d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	689a      	ldr	r2, [r3, #8]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c8:	425b      	negs	r3, r3
 800a7ca:	441a      	add	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d105      	bne.n	800a7e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a7ea:	697b      	ldr	r3, [r7, #20]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	d018      	beq.n	800a838 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	441a      	add	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d303      	bcc.n	800a828 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68d9      	ldr	r1, [r3, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	461a      	mov	r2, r3
 800a832:	6838      	ldr	r0, [r7, #0]
 800a834:	f002 f8a4 	bl	800c980 <memcpy>
	}
}
 800a838:	bf00      	nop
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a848:	f001 fd64 	bl	800c314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a852:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a854:	e011      	b.n	800a87a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d012      	beq.n	800a884 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3324      	adds	r3, #36	; 0x24
 800a862:	4618      	mov	r0, r3
 800a864:	f000 fd16 	bl	800b294 <xTaskRemoveFromEventList>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a86e:	f000 fdeb 	bl	800b448 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	3b01      	subs	r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a87a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	dce9      	bgt.n	800a856 <prvUnlockQueue+0x16>
 800a882:	e000      	b.n	800a886 <prvUnlockQueue+0x46>
					break;
 800a884:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	22ff      	movs	r2, #255	; 0xff
 800a88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a88e:	f001 fd71 	bl	800c374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a892:	f001 fd3f 	bl	800c314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a89c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a89e:	e011      	b.n	800a8c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d012      	beq.n	800a8ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3310      	adds	r3, #16
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fcf1 	bl	800b294 <xTaskRemoveFromEventList>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8b8:	f000 fdc6 	bl	800b448 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dce9      	bgt.n	800a8a0 <prvUnlockQueue+0x60>
 800a8cc:	e000      	b.n	800a8d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	22ff      	movs	r2, #255	; 0xff
 800a8d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8d8:	f001 fd4c 	bl	800c374 <vPortExitCritical>
}
 800a8dc:	bf00      	nop
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8ec:	f001 fd12 	bl	800c314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	e001      	b.n	800a902 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a902:	f001 fd37 	bl	800c374 <vPortExitCritical>

	return xReturn;
 800a906:	68fb      	ldr	r3, [r7, #12]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a918:	f001 fcfc 	bl	800c314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a924:	429a      	cmp	r2, r3
 800a926:	d102      	bne.n	800a92e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a928:	2301      	movs	r3, #1
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	e001      	b.n	800a932 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a932:	f001 fd1f 	bl	800c374 <vPortExitCritical>

	return xReturn;
 800a936:	68fb      	ldr	r3, [r7, #12]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
 800a94e:	e014      	b.n	800a97a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a950:	4a0f      	ldr	r2, [pc, #60]	; (800a990 <vQueueAddToRegistry+0x50>)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10b      	bne.n	800a974 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a95c:	490c      	ldr	r1, [pc, #48]	; (800a990 <vQueueAddToRegistry+0x50>)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a966:	4a0a      	ldr	r2, [pc, #40]	; (800a990 <vQueueAddToRegistry+0x50>)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	4413      	add	r3, r2
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a972:	e006      	b.n	800a982 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3301      	adds	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b07      	cmp	r3, #7
 800a97e:	d9e7      	bls.n	800a950 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	20000c9c 	.word	0x20000c9c

0800a994 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9a4:	f001 fcb6 	bl	800c314 <vPortEnterCritical>
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ae:	b25b      	sxtb	r3, r3
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d103      	bne.n	800a9be <vQueueWaitForMessageRestricted+0x2a>
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9c4:	b25b      	sxtb	r3, r3
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ca:	d103      	bne.n	800a9d4 <vQueueWaitForMessageRestricted+0x40>
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9d4:	f001 fcce 	bl	800c374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d106      	bne.n	800a9ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	3324      	adds	r3, #36	; 0x24
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	68b9      	ldr	r1, [r7, #8]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fc27 	bl	800b23c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9ee:	6978      	ldr	r0, [r7, #20]
 800a9f0:	f7ff ff26 	bl	800a840 <prvUnlockQueue>
	}
 800a9f4:	bf00      	nop
 800a9f6:	3718      	adds	r7, #24
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b08e      	sub	sp, #56	; 0x38
 800aa00:	af04      	add	r7, sp, #16
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
 800aa08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	623b      	str	r3, [r7, #32]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10a      	bne.n	800aa42 <xTaskCreateStatic+0x46>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	61fb      	str	r3, [r7, #28]
}
 800aa3e:	bf00      	nop
 800aa40:	e7fe      	b.n	800aa40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa42:	2354      	movs	r3, #84	; 0x54
 800aa44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	2b54      	cmp	r3, #84	; 0x54
 800aa4a:	d00a      	beq.n	800aa62 <xTaskCreateStatic+0x66>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	61bb      	str	r3, [r7, #24]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d01e      	beq.n	800aaa8 <xTaskCreateStatic+0xac>
 800aa6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01b      	beq.n	800aaa8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa82:	2300      	movs	r3, #0
 800aa84:	9303      	str	r3, [sp, #12]
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	9302      	str	r3, [sp, #8]
 800aa8a:	f107 0314 	add.w	r3, r7, #20
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	68b9      	ldr	r1, [r7, #8]
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 f850 	bl	800ab40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaa2:	f000 f8d5 	bl	800ac50 <prvAddNewTaskToReadyList>
 800aaa6:	e001      	b.n	800aaac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aaac:	697b      	ldr	r3, [r7, #20]
	}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b08c      	sub	sp, #48	; 0x30
 800aaba:	af04      	add	r7, sp, #16
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	603b      	str	r3, [r7, #0]
 800aac2:	4613      	mov	r3, r2
 800aac4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aac6:	88fb      	ldrh	r3, [r7, #6]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 fd44 	bl	800c558 <pvPortMalloc>
 800aad0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00e      	beq.n	800aaf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aad8:	2054      	movs	r0, #84	; 0x54
 800aada:	f001 fd3d 	bl	800c558 <pvPortMalloc>
 800aade:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	631a      	str	r2, [r3, #48]	; 0x30
 800aaec:	e005      	b.n	800aafa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aaee:	6978      	ldr	r0, [r7, #20]
 800aaf0:	f001 fdfe 	bl	800c6f0 <vPortFree>
 800aaf4:	e001      	b.n	800aafa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d017      	beq.n	800ab30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab08:	88fa      	ldrh	r2, [r7, #6]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9303      	str	r3, [sp, #12]
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	9302      	str	r3, [sp, #8]
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	68b9      	ldr	r1, [r7, #8]
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 f80e 	bl	800ab40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab24:	69f8      	ldr	r0, [r7, #28]
 800ab26:	f000 f893 	bl	800ac50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	61bb      	str	r3, [r7, #24]
 800ab2e:	e002      	b.n	800ab36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab30:	f04f 33ff 	mov.w	r3, #4294967295
 800ab34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab36:	69bb      	ldr	r3, [r7, #24]
	}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3720      	adds	r7, #32
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b088      	sub	sp, #32
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f023 0307 	bic.w	r3, r3, #7
 800ab66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	617b      	str	r3, [r7, #20]
}
 800ab84:	bf00      	nop
 800ab86:	e7fe      	b.n	800ab86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d01f      	beq.n	800abce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab8e:	2300      	movs	r3, #0
 800ab90:	61fb      	str	r3, [r7, #28]
 800ab92:	e012      	b.n	800abba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4413      	add	r3, r2
 800ab9a:	7819      	ldrb	r1, [r3, #0]
 800ab9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	4413      	add	r3, r2
 800aba2:	3334      	adds	r3, #52	; 0x34
 800aba4:	460a      	mov	r2, r1
 800aba6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4413      	add	r3, r2
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d006      	beq.n	800abc2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	3301      	adds	r3, #1
 800abb8:	61fb      	str	r3, [r7, #28]
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	2b0f      	cmp	r3, #15
 800abbe:	d9e9      	bls.n	800ab94 <prvInitialiseNewTask+0x54>
 800abc0:	e000      	b.n	800abc4 <prvInitialiseNewTask+0x84>
			{
				break;
 800abc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abcc:	e003      	b.n	800abd6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	2b06      	cmp	r3, #6
 800abda:	d901      	bls.n	800abe0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abdc:	2306      	movs	r3, #6
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abe4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	2200      	movs	r2, #0
 800abf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	3304      	adds	r3, #4
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe ff99 	bl	8009b2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	3318      	adds	r3, #24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe ff94 	bl	8009b2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	f1c3 0207 	rsb	r2, r3, #7
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	2200      	movs	r2, #0
 800ac20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac2a:	683a      	ldr	r2, [r7, #0]
 800ac2c:	68f9      	ldr	r1, [r7, #12]
 800ac2e:	69b8      	ldr	r0, [r7, #24]
 800ac30:	f001 fa40 	bl	800c0b4 <pxPortInitialiseStack>
 800ac34:	4602      	mov	r2, r0
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac46:	bf00      	nop
 800ac48:	3720      	adds	r7, #32
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac58:	f001 fb5c 	bl	800c314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac5c:	4b2a      	ldr	r3, [pc, #168]	; (800ad08 <prvAddNewTaskToReadyList+0xb8>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	4a29      	ldr	r2, [pc, #164]	; (800ad08 <prvAddNewTaskToReadyList+0xb8>)
 800ac64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac66:	4b29      	ldr	r3, [pc, #164]	; (800ad0c <prvAddNewTaskToReadyList+0xbc>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d109      	bne.n	800ac82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac6e:	4a27      	ldr	r2, [pc, #156]	; (800ad0c <prvAddNewTaskToReadyList+0xbc>)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac74:	4b24      	ldr	r3, [pc, #144]	; (800ad08 <prvAddNewTaskToReadyList+0xb8>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d110      	bne.n	800ac9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac7c:	f000 fc08 	bl	800b490 <prvInitialiseTaskLists>
 800ac80:	e00d      	b.n	800ac9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac82:	4b23      	ldr	r3, [pc, #140]	; (800ad10 <prvAddNewTaskToReadyList+0xc0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac8a:	4b20      	ldr	r3, [pc, #128]	; (800ad0c <prvAddNewTaskToReadyList+0xbc>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d802      	bhi.n	800ac9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac98:	4a1c      	ldr	r2, [pc, #112]	; (800ad0c <prvAddNewTaskToReadyList+0xbc>)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac9e:	4b1d      	ldr	r3, [pc, #116]	; (800ad14 <prvAddNewTaskToReadyList+0xc4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	3301      	adds	r3, #1
 800aca4:	4a1b      	ldr	r2, [pc, #108]	; (800ad14 <prvAddNewTaskToReadyList+0xc4>)
 800aca6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acac:	2201      	movs	r2, #1
 800acae:	409a      	lsls	r2, r3
 800acb0:	4b19      	ldr	r3, [pc, #100]	; (800ad18 <prvAddNewTaskToReadyList+0xc8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	4a18      	ldr	r2, [pc, #96]	; (800ad18 <prvAddNewTaskToReadyList+0xc8>)
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbe:	4613      	mov	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4a15      	ldr	r2, [pc, #84]	; (800ad1c <prvAddNewTaskToReadyList+0xcc>)
 800acc8:	441a      	add	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3304      	adds	r3, #4
 800acce:	4619      	mov	r1, r3
 800acd0:	4610      	mov	r0, r2
 800acd2:	f7fe ff39 	bl	8009b48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acd6:	f001 fb4d 	bl	800c374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acda:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <prvAddNewTaskToReadyList+0xc0>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00e      	beq.n	800ad00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ace2:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <prvAddNewTaskToReadyList+0xbc>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	429a      	cmp	r2, r3
 800acee:	d207      	bcs.n	800ad00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <prvAddNewTaskToReadyList+0xd0>)
 800acf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20000ddc 	.word	0x20000ddc
 800ad0c:	20000cdc 	.word	0x20000cdc
 800ad10:	20000de8 	.word	0x20000de8
 800ad14:	20000df8 	.word	0x20000df8
 800ad18:	20000de4 	.word	0x20000de4
 800ad1c:	20000ce0 	.word	0x20000ce0
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d017      	beq.n	800ad66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad36:	4b13      	ldr	r3, [pc, #76]	; (800ad84 <vTaskDelay+0x60>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <vTaskDelay+0x30>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60bb      	str	r3, [r7, #8]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad54:	f000 f880 	bl	800ae58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad58:	2100      	movs	r1, #0
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fe12 	bl	800b984 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad60:	f000 f888 	bl	800ae74 <xTaskResumeAll>
 800ad64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d107      	bne.n	800ad7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad6c:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <vTaskDelay+0x64>)
 800ad6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad7c:	bf00      	nop
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	20000e04 	.word	0x20000e04
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08a      	sub	sp, #40	; 0x28
 800ad90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	1d39      	adds	r1, r7, #4
 800ad9e:	f107 0308 	add.w	r3, r7, #8
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7f7 f842 	bl	8001e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	9202      	str	r2, [sp, #8]
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	2300      	movs	r3, #0
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	2300      	movs	r3, #0
 800adb8:	460a      	mov	r2, r1
 800adba:	4921      	ldr	r1, [pc, #132]	; (800ae40 <vTaskStartScheduler+0xb4>)
 800adbc:	4821      	ldr	r0, [pc, #132]	; (800ae44 <vTaskStartScheduler+0xb8>)
 800adbe:	f7ff fe1d 	bl	800a9fc <xTaskCreateStatic>
 800adc2:	4603      	mov	r3, r0
 800adc4:	4a20      	ldr	r2, [pc, #128]	; (800ae48 <vTaskStartScheduler+0xbc>)
 800adc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adc8:	4b1f      	ldr	r3, [pc, #124]	; (800ae48 <vTaskStartScheduler+0xbc>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800add0:	2301      	movs	r3, #1
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	e001      	b.n	800adda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800add6:	2300      	movs	r3, #0
 800add8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d102      	bne.n	800ade6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ade0:	f000 fe36 	bl	800ba50 <xTimerCreateTimerTask>
 800ade4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d116      	bne.n	800ae1a <vTaskStartScheduler+0x8e>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	613b      	str	r3, [r7, #16]
}
 800adfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae00:	4b12      	ldr	r3, [pc, #72]	; (800ae4c <vTaskStartScheduler+0xc0>)
 800ae02:	f04f 32ff 	mov.w	r2, #4294967295
 800ae06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae08:	4b11      	ldr	r3, [pc, #68]	; (800ae50 <vTaskStartScheduler+0xc4>)
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae0e:	4b11      	ldr	r3, [pc, #68]	; (800ae54 <vTaskStartScheduler+0xc8>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae14:	f001 f9dc 	bl	800c1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae18:	e00e      	b.n	800ae38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae20:	d10a      	bne.n	800ae38 <vTaskStartScheduler+0xac>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	60fb      	str	r3, [r7, #12]
}
 800ae34:	bf00      	nop
 800ae36:	e7fe      	b.n	800ae36 <vTaskStartScheduler+0xaa>
}
 800ae38:	bf00      	nop
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	0800f43c 	.word	0x0800f43c
 800ae44:	0800b461 	.word	0x0800b461
 800ae48:	20000e00 	.word	0x20000e00
 800ae4c:	20000dfc 	.word	0x20000dfc
 800ae50:	20000de8 	.word	0x20000de8
 800ae54:	20000de0 	.word	0x20000de0

0800ae58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae5c:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <vTaskSuspendAll+0x18>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	4a03      	ldr	r2, [pc, #12]	; (800ae70 <vTaskSuspendAll+0x18>)
 800ae64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae66:	bf00      	nop
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20000e04 	.word	0x20000e04

0800ae74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae82:	4b41      	ldr	r3, [pc, #260]	; (800af88 <xTaskResumeAll+0x114>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	603b      	str	r3, [r7, #0]
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aea0:	f001 fa38 	bl	800c314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aea4:	4b38      	ldr	r3, [pc, #224]	; (800af88 <xTaskResumeAll+0x114>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	4a37      	ldr	r2, [pc, #220]	; (800af88 <xTaskResumeAll+0x114>)
 800aeac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeae:	4b36      	ldr	r3, [pc, #216]	; (800af88 <xTaskResumeAll+0x114>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d161      	bne.n	800af7a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aeb6:	4b35      	ldr	r3, [pc, #212]	; (800af8c <xTaskResumeAll+0x118>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d05d      	beq.n	800af7a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aebe:	e02e      	b.n	800af1e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aec0:	4b33      	ldr	r3, [pc, #204]	; (800af90 <xTaskResumeAll+0x11c>)
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	3318      	adds	r3, #24
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fe98 	bl	8009c02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3304      	adds	r3, #4
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fe93 	bl	8009c02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	2201      	movs	r2, #1
 800aee2:	409a      	lsls	r2, r3
 800aee4:	4b2b      	ldr	r3, [pc, #172]	; (800af94 <xTaskResumeAll+0x120>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	4a2a      	ldr	r2, [pc, #168]	; (800af94 <xTaskResumeAll+0x120>)
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef2:	4613      	mov	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4a27      	ldr	r2, [pc, #156]	; (800af98 <xTaskResumeAll+0x124>)
 800aefc:	441a      	add	r2, r3
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3304      	adds	r3, #4
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7fe fe1f 	bl	8009b48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0e:	4b23      	ldr	r3, [pc, #140]	; (800af9c <xTaskResumeAll+0x128>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af14:	429a      	cmp	r2, r3
 800af16:	d302      	bcc.n	800af1e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800af18:	4b21      	ldr	r3, [pc, #132]	; (800afa0 <xTaskResumeAll+0x12c>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af1e:	4b1c      	ldr	r3, [pc, #112]	; (800af90 <xTaskResumeAll+0x11c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1cc      	bne.n	800aec0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af2c:	f000 fb4e 	bl	800b5cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af30:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <xTaskResumeAll+0x130>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d010      	beq.n	800af5e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af3c:	f000 f846 	bl	800afcc <xTaskIncrementTick>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800af46:	4b16      	ldr	r3, [pc, #88]	; (800afa0 <xTaskResumeAll+0x12c>)
 800af48:	2201      	movs	r2, #1
 800af4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3b01      	subs	r3, #1
 800af50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1f1      	bne.n	800af3c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800af58:	4b12      	ldr	r3, [pc, #72]	; (800afa4 <xTaskResumeAll+0x130>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af5e:	4b10      	ldr	r3, [pc, #64]	; (800afa0 <xTaskResumeAll+0x12c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d009      	beq.n	800af7a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af66:	2301      	movs	r3, #1
 800af68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af6a:	4b0f      	ldr	r3, [pc, #60]	; (800afa8 <xTaskResumeAll+0x134>)
 800af6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af7a:	f001 f9fb 	bl	800c374 <vPortExitCritical>

	return xAlreadyYielded;
 800af7e:	68bb      	ldr	r3, [r7, #8]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	20000e04 	.word	0x20000e04
 800af8c:	20000ddc 	.word	0x20000ddc
 800af90:	20000d9c 	.word	0x20000d9c
 800af94:	20000de4 	.word	0x20000de4
 800af98:	20000ce0 	.word	0x20000ce0
 800af9c:	20000cdc 	.word	0x20000cdc
 800afa0:	20000df0 	.word	0x20000df0
 800afa4:	20000dec 	.word	0x20000dec
 800afa8:	e000ed04 	.word	0xe000ed04

0800afac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <xTaskGetTickCount+0x1c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afb8:	687b      	ldr	r3, [r7, #4]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	20000de0 	.word	0x20000de0

0800afcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd6:	4b4e      	ldr	r3, [pc, #312]	; (800b110 <xTaskIncrementTick+0x144>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f040 808e 	bne.w	800b0fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afe0:	4b4c      	ldr	r3, [pc, #304]	; (800b114 <xTaskIncrementTick+0x148>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afe8:	4a4a      	ldr	r2, [pc, #296]	; (800b114 <xTaskIncrementTick+0x148>)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d120      	bne.n	800b036 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aff4:	4b48      	ldr	r3, [pc, #288]	; (800b118 <xTaskIncrementTick+0x14c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00a      	beq.n	800b014 <xTaskIncrementTick+0x48>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	603b      	str	r3, [r7, #0]
}
 800b010:	bf00      	nop
 800b012:	e7fe      	b.n	800b012 <xTaskIncrementTick+0x46>
 800b014:	4b40      	ldr	r3, [pc, #256]	; (800b118 <xTaskIncrementTick+0x14c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	60fb      	str	r3, [r7, #12]
 800b01a:	4b40      	ldr	r3, [pc, #256]	; (800b11c <xTaskIncrementTick+0x150>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a3e      	ldr	r2, [pc, #248]	; (800b118 <xTaskIncrementTick+0x14c>)
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	4a3e      	ldr	r2, [pc, #248]	; (800b11c <xTaskIncrementTick+0x150>)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6013      	str	r3, [r2, #0]
 800b028:	4b3d      	ldr	r3, [pc, #244]	; (800b120 <xTaskIncrementTick+0x154>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3301      	adds	r3, #1
 800b02e:	4a3c      	ldr	r2, [pc, #240]	; (800b120 <xTaskIncrementTick+0x154>)
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	f000 facb 	bl	800b5cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b036:	4b3b      	ldr	r3, [pc, #236]	; (800b124 <xTaskIncrementTick+0x158>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d348      	bcc.n	800b0d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b040:	4b35      	ldr	r3, [pc, #212]	; (800b118 <xTaskIncrementTick+0x14c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d104      	bne.n	800b054 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b04a:	4b36      	ldr	r3, [pc, #216]	; (800b124 <xTaskIncrementTick+0x158>)
 800b04c:	f04f 32ff 	mov.w	r2, #4294967295
 800b050:	601a      	str	r2, [r3, #0]
					break;
 800b052:	e03e      	b.n	800b0d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b054:	4b30      	ldr	r3, [pc, #192]	; (800b118 <xTaskIncrementTick+0x14c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d203      	bcs.n	800b074 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b06c:	4a2d      	ldr	r2, [pc, #180]	; (800b124 <xTaskIncrementTick+0x158>)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b072:	e02e      	b.n	800b0d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	3304      	adds	r3, #4
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fe fdc2 	bl	8009c02 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b082:	2b00      	cmp	r3, #0
 800b084:	d004      	beq.n	800b090 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	3318      	adds	r3, #24
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fe fdb9 	bl	8009c02 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	2201      	movs	r2, #1
 800b096:	409a      	lsls	r2, r3
 800b098:	4b23      	ldr	r3, [pc, #140]	; (800b128 <xTaskIncrementTick+0x15c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	4a22      	ldr	r2, [pc, #136]	; (800b128 <xTaskIncrementTick+0x15c>)
 800b0a0:	6013      	str	r3, [r2, #0]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4a1f      	ldr	r2, [pc, #124]	; (800b12c <xTaskIncrementTick+0x160>)
 800b0b0:	441a      	add	r2, r3
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f7fe fd45 	bl	8009b48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c2:	4b1b      	ldr	r3, [pc, #108]	; (800b130 <xTaskIncrementTick+0x164>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d3b9      	bcc.n	800b040 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0d0:	e7b6      	b.n	800b040 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0d2:	4b17      	ldr	r3, [pc, #92]	; (800b130 <xTaskIncrementTick+0x164>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d8:	4914      	ldr	r1, [pc, #80]	; (800b12c <xTaskIncrementTick+0x160>)
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	440b      	add	r3, r1
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d901      	bls.n	800b0ee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0ee:	4b11      	ldr	r3, [pc, #68]	; (800b134 <xTaskIncrementTick+0x168>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d007      	beq.n	800b106 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	e004      	b.n	800b106 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0fc:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <xTaskIncrementTick+0x16c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3301      	adds	r3, #1
 800b102:	4a0d      	ldr	r2, [pc, #52]	; (800b138 <xTaskIncrementTick+0x16c>)
 800b104:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b106:	697b      	ldr	r3, [r7, #20]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	20000e04 	.word	0x20000e04
 800b114:	20000de0 	.word	0x20000de0
 800b118:	20000d94 	.word	0x20000d94
 800b11c:	20000d98 	.word	0x20000d98
 800b120:	20000df4 	.word	0x20000df4
 800b124:	20000dfc 	.word	0x20000dfc
 800b128:	20000de4 	.word	0x20000de4
 800b12c:	20000ce0 	.word	0x20000ce0
 800b130:	20000cdc 	.word	0x20000cdc
 800b134:	20000df0 	.word	0x20000df0
 800b138:	20000dec 	.word	0x20000dec

0800b13c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b142:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <vTaskSwitchContext+0xa4>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b14a:	4b26      	ldr	r3, [pc, #152]	; (800b1e4 <vTaskSwitchContext+0xa8>)
 800b14c:	2201      	movs	r2, #1
 800b14e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b150:	e03f      	b.n	800b1d2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b152:	4b24      	ldr	r3, [pc, #144]	; (800b1e4 <vTaskSwitchContext+0xa8>)
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b158:	4b23      	ldr	r3, [pc, #140]	; (800b1e8 <vTaskSwitchContext+0xac>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	fab3 f383 	clz	r3, r3
 800b164:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b166:	7afb      	ldrb	r3, [r7, #11]
 800b168:	f1c3 031f 	rsb	r3, r3, #31
 800b16c:	617b      	str	r3, [r7, #20]
 800b16e:	491f      	ldr	r1, [pc, #124]	; (800b1ec <vTaskSwitchContext+0xb0>)
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	440b      	add	r3, r1
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	607b      	str	r3, [r7, #4]
}
 800b194:	bf00      	nop
 800b196:	e7fe      	b.n	800b196 <vTaskSwitchContext+0x5a>
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4a12      	ldr	r2, [pc, #72]	; (800b1ec <vTaskSwitchContext+0xb0>)
 800b1a4:	4413      	add	r3, r2
 800b1a6:	613b      	str	r3, [r7, #16]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	605a      	str	r2, [r3, #4]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d104      	bne.n	800b1c8 <vTaskSwitchContext+0x8c>
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	605a      	str	r2, [r3, #4]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	4a08      	ldr	r2, [pc, #32]	; (800b1f0 <vTaskSwitchContext+0xb4>)
 800b1d0:	6013      	str	r3, [r2, #0]
}
 800b1d2:	bf00      	nop
 800b1d4:	371c      	adds	r7, #28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	20000e04 	.word	0x20000e04
 800b1e4:	20000df0 	.word	0x20000df0
 800b1e8:	20000de4 	.word	0x20000de4
 800b1ec:	20000ce0 	.word	0x20000ce0
 800b1f0:	20000cdc 	.word	0x20000cdc

0800b1f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10a      	bne.n	800b21a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	60fb      	str	r3, [r7, #12]
}
 800b216:	bf00      	nop
 800b218:	e7fe      	b.n	800b218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b21a:	4b07      	ldr	r3, [pc, #28]	; (800b238 <vTaskPlaceOnEventList+0x44>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3318      	adds	r3, #24
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7fe fcb4 	bl	8009b90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b228:	2101      	movs	r1, #1
 800b22a:	6838      	ldr	r0, [r7, #0]
 800b22c:	f000 fbaa 	bl	800b984 <prvAddCurrentTaskToDelayedList>
}
 800b230:	bf00      	nop
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	20000cdc 	.word	0x20000cdc

0800b23c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	617b      	str	r3, [r7, #20]
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b264:	4b0a      	ldr	r3, [pc, #40]	; (800b290 <vTaskPlaceOnEventListRestricted+0x54>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3318      	adds	r3, #24
 800b26a:	4619      	mov	r1, r3
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7fe fc6b 	bl	8009b48 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b278:	f04f 33ff 	mov.w	r3, #4294967295
 800b27c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f000 fb7f 	bl	800b984 <prvAddCurrentTaskToDelayedList>
	}
 800b286:	bf00      	nop
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	20000cdc 	.word	0x20000cdc

0800b294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10a      	bne.n	800b2c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	60fb      	str	r3, [r7, #12]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	3318      	adds	r3, #24
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe fc9c 	bl	8009c02 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ca:	4b1d      	ldr	r3, [pc, #116]	; (800b340 <xTaskRemoveFromEventList+0xac>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d11c      	bne.n	800b30c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe fc93 	bl	8009c02 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	409a      	lsls	r2, r3
 800b2e4:	4b17      	ldr	r3, [pc, #92]	; (800b344 <xTaskRemoveFromEventList+0xb0>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	4a16      	ldr	r2, [pc, #88]	; (800b344 <xTaskRemoveFromEventList+0xb0>)
 800b2ec:	6013      	str	r3, [r2, #0]
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4a13      	ldr	r2, [pc, #76]	; (800b348 <xTaskRemoveFromEventList+0xb4>)
 800b2fc:	441a      	add	r2, r3
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	3304      	adds	r3, #4
 800b302:	4619      	mov	r1, r3
 800b304:	4610      	mov	r0, r2
 800b306:	f7fe fc1f 	bl	8009b48 <vListInsertEnd>
 800b30a:	e005      	b.n	800b318 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	3318      	adds	r3, #24
 800b310:	4619      	mov	r1, r3
 800b312:	480e      	ldr	r0, [pc, #56]	; (800b34c <xTaskRemoveFromEventList+0xb8>)
 800b314:	f7fe fc18 	bl	8009b48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31c:	4b0c      	ldr	r3, [pc, #48]	; (800b350 <xTaskRemoveFromEventList+0xbc>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	429a      	cmp	r2, r3
 800b324:	d905      	bls.n	800b332 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b326:	2301      	movs	r3, #1
 800b328:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b32a:	4b0a      	ldr	r3, [pc, #40]	; (800b354 <xTaskRemoveFromEventList+0xc0>)
 800b32c:	2201      	movs	r2, #1
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	e001      	b.n	800b336 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b332:	2300      	movs	r3, #0
 800b334:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b336:	697b      	ldr	r3, [r7, #20]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20000e04 	.word	0x20000e04
 800b344:	20000de4 	.word	0x20000de4
 800b348:	20000ce0 	.word	0x20000ce0
 800b34c:	20000d9c 	.word	0x20000d9c
 800b350:	20000cdc 	.word	0x20000cdc
 800b354:	20000df0 	.word	0x20000df0

0800b358 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b360:	4b06      	ldr	r3, [pc, #24]	; (800b37c <vTaskInternalSetTimeOutState+0x24>)
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b368:	4b05      	ldr	r3, [pc, #20]	; (800b380 <vTaskInternalSetTimeOutState+0x28>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	605a      	str	r2, [r3, #4]
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	20000df4 	.word	0x20000df4
 800b380:	20000de0 	.word	0x20000de0

0800b384 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	613b      	str	r3, [r7, #16]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	60fb      	str	r3, [r7, #12]
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3c6:	f000 ffa5 	bl	800c314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3ca:	4b1d      	ldr	r3, [pc, #116]	; (800b440 <xTaskCheckForTimeOut+0xbc>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e2:	d102      	bne.n	800b3ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	61fb      	str	r3, [r7, #28]
 800b3e8:	e023      	b.n	800b432 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	4b15      	ldr	r3, [pc, #84]	; (800b444 <xTaskCheckForTimeOut+0xc0>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d007      	beq.n	800b406 <xTaskCheckForTimeOut+0x82>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d302      	bcc.n	800b406 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b400:	2301      	movs	r3, #1
 800b402:	61fb      	str	r3, [r7, #28]
 800b404:	e015      	b.n	800b432 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d20b      	bcs.n	800b428 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	1ad2      	subs	r2, r2, r3
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff ff9b 	bl	800b358 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b422:	2300      	movs	r3, #0
 800b424:	61fb      	str	r3, [r7, #28]
 800b426:	e004      	b.n	800b432 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	2200      	movs	r2, #0
 800b42c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b42e:	2301      	movs	r3, #1
 800b430:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b432:	f000 ff9f 	bl	800c374 <vPortExitCritical>

	return xReturn;
 800b436:	69fb      	ldr	r3, [r7, #28]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3720      	adds	r7, #32
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	20000de0 	.word	0x20000de0
 800b444:	20000df4 	.word	0x20000df4

0800b448 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b448:	b480      	push	{r7}
 800b44a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b44c:	4b03      	ldr	r3, [pc, #12]	; (800b45c <vTaskMissedYield+0x14>)
 800b44e:	2201      	movs	r2, #1
 800b450:	601a      	str	r2, [r3, #0]
}
 800b452:	bf00      	nop
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	20000df0 	.word	0x20000df0

0800b460 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b468:	f000 f852 	bl	800b510 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <prvIdleTask+0x28>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d9f9      	bls.n	800b468 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b474:	4b05      	ldr	r3, [pc, #20]	; (800b48c <prvIdleTask+0x2c>)
 800b476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b484:	e7f0      	b.n	800b468 <prvIdleTask+0x8>
 800b486:	bf00      	nop
 800b488:	20000ce0 	.word	0x20000ce0
 800b48c:	e000ed04 	.word	0xe000ed04

0800b490 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b496:	2300      	movs	r3, #0
 800b498:	607b      	str	r3, [r7, #4]
 800b49a:	e00c      	b.n	800b4b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4413      	add	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4a12      	ldr	r2, [pc, #72]	; (800b4f0 <prvInitialiseTaskLists+0x60>)
 800b4a8:	4413      	add	r3, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fe fb1f 	bl	8009aee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	607b      	str	r3, [r7, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b06      	cmp	r3, #6
 800b4ba:	d9ef      	bls.n	800b49c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4bc:	480d      	ldr	r0, [pc, #52]	; (800b4f4 <prvInitialiseTaskLists+0x64>)
 800b4be:	f7fe fb16 	bl	8009aee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4c2:	480d      	ldr	r0, [pc, #52]	; (800b4f8 <prvInitialiseTaskLists+0x68>)
 800b4c4:	f7fe fb13 	bl	8009aee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4c8:	480c      	ldr	r0, [pc, #48]	; (800b4fc <prvInitialiseTaskLists+0x6c>)
 800b4ca:	f7fe fb10 	bl	8009aee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4ce:	480c      	ldr	r0, [pc, #48]	; (800b500 <prvInitialiseTaskLists+0x70>)
 800b4d0:	f7fe fb0d 	bl	8009aee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4d4:	480b      	ldr	r0, [pc, #44]	; (800b504 <prvInitialiseTaskLists+0x74>)
 800b4d6:	f7fe fb0a 	bl	8009aee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4da:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <prvInitialiseTaskLists+0x78>)
 800b4dc:	4a05      	ldr	r2, [pc, #20]	; (800b4f4 <prvInitialiseTaskLists+0x64>)
 800b4de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <prvInitialiseTaskLists+0x7c>)
 800b4e2:	4a05      	ldr	r2, [pc, #20]	; (800b4f8 <prvInitialiseTaskLists+0x68>)
 800b4e4:	601a      	str	r2, [r3, #0]
}
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20000ce0 	.word	0x20000ce0
 800b4f4:	20000d6c 	.word	0x20000d6c
 800b4f8:	20000d80 	.word	0x20000d80
 800b4fc:	20000d9c 	.word	0x20000d9c
 800b500:	20000db0 	.word	0x20000db0
 800b504:	20000dc8 	.word	0x20000dc8
 800b508:	20000d94 	.word	0x20000d94
 800b50c:	20000d98 	.word	0x20000d98

0800b510 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b516:	e019      	b.n	800b54c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b518:	f000 fefc 	bl	800c314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <prvCheckTasksWaitingTermination+0x50>)
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3304      	adds	r3, #4
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe fb6a 	bl	8009c02 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b52e:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <prvCheckTasksWaitingTermination+0x54>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3b01      	subs	r3, #1
 800b534:	4a0b      	ldr	r2, [pc, #44]	; (800b564 <prvCheckTasksWaitingTermination+0x54>)
 800b536:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b538:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <prvCheckTasksWaitingTermination+0x58>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	4a0a      	ldr	r2, [pc, #40]	; (800b568 <prvCheckTasksWaitingTermination+0x58>)
 800b540:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b542:	f000 ff17 	bl	800c374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f810 	bl	800b56c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <prvCheckTasksWaitingTermination+0x58>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e1      	bne.n	800b518 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	20000db0 	.word	0x20000db0
 800b564:	20000ddc 	.word	0x20000ddc
 800b568:	20000dc4 	.word	0x20000dc4

0800b56c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d108      	bne.n	800b590 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b582:	4618      	mov	r0, r3
 800b584:	f001 f8b4 	bl	800c6f0 <vPortFree>
				vPortFree( pxTCB );
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 f8b1 	bl	800c6f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b58e:	e018      	b.n	800b5c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b596:	2b01      	cmp	r3, #1
 800b598:	d103      	bne.n	800b5a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f001 f8a8 	bl	800c6f0 <vPortFree>
	}
 800b5a0:	e00f      	b.n	800b5c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d00a      	beq.n	800b5c2 <prvDeleteTCB+0x56>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	60fb      	str	r3, [r7, #12]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <prvDeleteTCB+0x54>
	}
 800b5c2:	bf00      	nop
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
	...

0800b5cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5d2:	4b0c      	ldr	r3, [pc, #48]	; (800b604 <prvResetNextTaskUnblockTime+0x38>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d104      	bne.n	800b5e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5dc:	4b0a      	ldr	r3, [pc, #40]	; (800b608 <prvResetNextTaskUnblockTime+0x3c>)
 800b5de:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5e4:	e008      	b.n	800b5f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e6:	4b07      	ldr	r3, [pc, #28]	; (800b604 <prvResetNextTaskUnblockTime+0x38>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	4a04      	ldr	r2, [pc, #16]	; (800b608 <prvResetNextTaskUnblockTime+0x3c>)
 800b5f6:	6013      	str	r3, [r2, #0]
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	20000d94 	.word	0x20000d94
 800b608:	20000dfc 	.word	0x20000dfc

0800b60c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b612:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <xTaskGetSchedulerState+0x34>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d102      	bne.n	800b620 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b61a:	2301      	movs	r3, #1
 800b61c:	607b      	str	r3, [r7, #4]
 800b61e:	e008      	b.n	800b632 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b620:	4b08      	ldr	r3, [pc, #32]	; (800b644 <xTaskGetSchedulerState+0x38>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d102      	bne.n	800b62e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b628:	2302      	movs	r3, #2
 800b62a:	607b      	str	r3, [r7, #4]
 800b62c:	e001      	b.n	800b632 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b62e:	2300      	movs	r3, #0
 800b630:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b632:	687b      	ldr	r3, [r7, #4]
	}
 800b634:	4618      	mov	r0, r3
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	20000de8 	.word	0x20000de8
 800b644:	20000e04 	.word	0x20000e04

0800b648 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b654:	2300      	movs	r3, #0
 800b656:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d05e      	beq.n	800b71c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b662:	4b31      	ldr	r3, [pc, #196]	; (800b728 <xTaskPriorityInherit+0xe0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	429a      	cmp	r2, r3
 800b66a:	d24e      	bcs.n	800b70a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	db06      	blt.n	800b682 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b674:	4b2c      	ldr	r3, [pc, #176]	; (800b728 <xTaskPriorityInherit+0xe0>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67a:	f1c3 0207 	rsb	r2, r3, #7
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	6959      	ldr	r1, [r3, #20]
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68a:	4613      	mov	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4a26      	ldr	r2, [pc, #152]	; (800b72c <xTaskPriorityInherit+0xe4>)
 800b694:	4413      	add	r3, r2
 800b696:	4299      	cmp	r1, r3
 800b698:	d12f      	bne.n	800b6fa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	3304      	adds	r3, #4
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe faaf 	bl	8009c02 <uxListRemove>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10a      	bne.n	800b6c0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b4:	43da      	mvns	r2, r3
 800b6b6:	4b1e      	ldr	r3, [pc, #120]	; (800b730 <xTaskPriorityInherit+0xe8>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	4a1c      	ldr	r2, [pc, #112]	; (800b730 <xTaskPriorityInherit+0xe8>)
 800b6be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6c0:	4b19      	ldr	r3, [pc, #100]	; (800b728 <xTaskPriorityInherit+0xe0>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	409a      	lsls	r2, r3
 800b6d2:	4b17      	ldr	r3, [pc, #92]	; (800b730 <xTaskPriorityInherit+0xe8>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	4a15      	ldr	r2, [pc, #84]	; (800b730 <xTaskPriorityInherit+0xe8>)
 800b6da:	6013      	str	r3, [r2, #0]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4413      	add	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4a10      	ldr	r2, [pc, #64]	; (800b72c <xTaskPriorityInherit+0xe4>)
 800b6ea:	441a      	add	r2, r3
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4610      	mov	r0, r2
 800b6f4:	f7fe fa28 	bl	8009b48 <vListInsertEnd>
 800b6f8:	e004      	b.n	800b704 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6fa:	4b0b      	ldr	r3, [pc, #44]	; (800b728 <xTaskPriorityInherit+0xe0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b704:	2301      	movs	r3, #1
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e008      	b.n	800b71c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b70e:	4b06      	ldr	r3, [pc, #24]	; (800b728 <xTaskPriorityInherit+0xe0>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b714:	429a      	cmp	r2, r3
 800b716:	d201      	bcs.n	800b71c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b718:	2301      	movs	r3, #1
 800b71a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b71c:	68fb      	ldr	r3, [r7, #12]
	}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20000cdc 	.word	0x20000cdc
 800b72c:	20000ce0 	.word	0x20000ce0
 800b730:	20000de4 	.word	0x20000de4

0800b734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b740:	2300      	movs	r3, #0
 800b742:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d06e      	beq.n	800b828 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b74a:	4b3a      	ldr	r3, [pc, #232]	; (800b834 <xTaskPriorityDisinherit+0x100>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	429a      	cmp	r2, r3
 800b752:	d00a      	beq.n	800b76a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	60fb      	str	r3, [r7, #12]
}
 800b766:	bf00      	nop
 800b768:	e7fe      	b.n	800b768 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10a      	bne.n	800b788 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	60bb      	str	r3, [r7, #8]
}
 800b784:	bf00      	nop
 800b786:	e7fe      	b.n	800b786 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b78c:	1e5a      	subs	r2, r3, #1
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d044      	beq.n	800b828 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d140      	bne.n	800b828 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe fa29 	bl	8009c02 <uxListRemove>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d115      	bne.n	800b7e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ba:	491f      	ldr	r1, [pc, #124]	; (800b838 <xTaskPriorityDisinherit+0x104>)
 800b7bc:	4613      	mov	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	440b      	add	r3, r1
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10a      	bne.n	800b7e2 <xTaskPriorityDisinherit+0xae>
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d6:	43da      	mvns	r2, r3
 800b7d8:	4b18      	ldr	r3, [pc, #96]	; (800b83c <xTaskPriorityDisinherit+0x108>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4013      	ands	r3, r2
 800b7de:	4a17      	ldr	r2, [pc, #92]	; (800b83c <xTaskPriorityDisinherit+0x108>)
 800b7e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ee:	f1c3 0207 	rsb	r2, r3, #7
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	409a      	lsls	r2, r3
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <xTaskPriorityDisinherit+0x108>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4313      	orrs	r3, r2
 800b804:	4a0d      	ldr	r2, [pc, #52]	; (800b83c <xTaskPriorityDisinherit+0x108>)
 800b806:	6013      	str	r3, [r2, #0]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4a08      	ldr	r2, [pc, #32]	; (800b838 <xTaskPriorityDisinherit+0x104>)
 800b816:	441a      	add	r2, r3
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	3304      	adds	r3, #4
 800b81c:	4619      	mov	r1, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	f7fe f992 	bl	8009b48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b824:	2301      	movs	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b828:	697b      	ldr	r3, [r7, #20]
	}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3718      	adds	r7, #24
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20000cdc 	.word	0x20000cdc
 800b838:	20000ce0 	.word	0x20000ce0
 800b83c:	20000de4 	.word	0x20000de4

0800b840 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b84e:	2301      	movs	r3, #1
 800b850:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d077      	beq.n	800b948 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10a      	bne.n	800b876 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b864:	f383 8811 	msr	BASEPRI, r3
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	60fb      	str	r3, [r7, #12]
}
 800b872:	bf00      	nop
 800b874:	e7fe      	b.n	800b874 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d902      	bls.n	800b886 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	61fb      	str	r3, [r7, #28]
 800b884:	e002      	b.n	800b88c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b88a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	69fa      	ldr	r2, [r7, #28]
 800b892:	429a      	cmp	r2, r3
 800b894:	d058      	beq.n	800b948 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d153      	bne.n	800b948 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b8a0:	4b2b      	ldr	r3, [pc, #172]	; (800b950 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	69ba      	ldr	r2, [r7, #24]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d10a      	bne.n	800b8c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	60bb      	str	r3, [r7, #8]
}
 800b8bc:	bf00      	nop
 800b8be:	e7fe      	b.n	800b8be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	69fa      	ldr	r2, [r7, #28]
 800b8ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	699b      	ldr	r3, [r3, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	db04      	blt.n	800b8de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f1c3 0207 	rsb	r2, r3, #7
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	6959      	ldr	r1, [r3, #20]
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4a19      	ldr	r2, [pc, #100]	; (800b954 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b8ee:	4413      	add	r3, r2
 800b8f0:	4299      	cmp	r1, r3
 800b8f2:	d129      	bne.n	800b948 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe f982 	bl	8009c02 <uxListRemove>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	2201      	movs	r2, #1
 800b90a:	fa02 f303 	lsl.w	r3, r2, r3
 800b90e:	43da      	mvns	r2, r3
 800b910:	4b11      	ldr	r3, [pc, #68]	; (800b958 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4013      	ands	r3, r2
 800b916:	4a10      	ldr	r2, [pc, #64]	; (800b958 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b918:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91e:	2201      	movs	r2, #1
 800b920:	409a      	lsls	r2, r3
 800b922:	4b0d      	ldr	r3, [pc, #52]	; (800b958 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4313      	orrs	r3, r2
 800b928:	4a0b      	ldr	r2, [pc, #44]	; (800b958 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b930:	4613      	mov	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4413      	add	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4a06      	ldr	r2, [pc, #24]	; (800b954 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b93a:	441a      	add	r2, r3
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	3304      	adds	r3, #4
 800b940:	4619      	mov	r1, r3
 800b942:	4610      	mov	r0, r2
 800b944:	f7fe f900 	bl	8009b48 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b948:	bf00      	nop
 800b94a:	3720      	adds	r7, #32
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20000cdc 	.word	0x20000cdc
 800b954:	20000ce0 	.word	0x20000ce0
 800b958:	20000de4 	.word	0x20000de4

0800b95c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b95c:	b480      	push	{r7}
 800b95e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b960:	4b07      	ldr	r3, [pc, #28]	; (800b980 <pvTaskIncrementMutexHeldCount+0x24>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d004      	beq.n	800b972 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b968:	4b05      	ldr	r3, [pc, #20]	; (800b980 <pvTaskIncrementMutexHeldCount+0x24>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b96e:	3201      	adds	r2, #1
 800b970:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b972:	4b03      	ldr	r3, [pc, #12]	; (800b980 <pvTaskIncrementMutexHeldCount+0x24>)
 800b974:	681b      	ldr	r3, [r3, #0]
	}
 800b976:	4618      	mov	r0, r3
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20000cdc 	.word	0x20000cdc

0800b984 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b98e:	4b29      	ldr	r3, [pc, #164]	; (800ba34 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b994:	4b28      	ldr	r3, [pc, #160]	; (800ba38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3304      	adds	r3, #4
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe f931 	bl	8009c02 <uxListRemove>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10b      	bne.n	800b9be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b9a6:	4b24      	ldr	r3, [pc, #144]	; (800ba38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b2:	43da      	mvns	r2, r3
 800b9b4:	4b21      	ldr	r3, [pc, #132]	; (800ba3c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	4a20      	ldr	r2, [pc, #128]	; (800ba3c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c4:	d10a      	bne.n	800b9dc <prvAddCurrentTaskToDelayedList+0x58>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d007      	beq.n	800b9dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9cc:	4b1a      	ldr	r3, [pc, #104]	; (800ba38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	481a      	ldr	r0, [pc, #104]	; (800ba40 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b9d6:	f7fe f8b7 	bl	8009b48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9da:	e026      	b.n	800ba2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9e4:	4b14      	ldr	r3, [pc, #80]	; (800ba38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d209      	bcs.n	800ba08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9f4:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ba38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4610      	mov	r0, r2
 800ba02:	f7fe f8c5 	bl	8009b90 <vListInsert>
}
 800ba06:	e010      	b.n	800ba2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba08:	4b0f      	ldr	r3, [pc, #60]	; (800ba48 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3304      	adds	r3, #4
 800ba12:	4619      	mov	r1, r3
 800ba14:	4610      	mov	r0, r2
 800ba16:	f7fe f8bb 	bl	8009b90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba1a:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d202      	bcs.n	800ba2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ba24:	4a09      	ldr	r2, [pc, #36]	; (800ba4c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	6013      	str	r3, [r2, #0]
}
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	20000de0 	.word	0x20000de0
 800ba38:	20000cdc 	.word	0x20000cdc
 800ba3c:	20000de4 	.word	0x20000de4
 800ba40:	20000dc8 	.word	0x20000dc8
 800ba44:	20000d98 	.word	0x20000d98
 800ba48:	20000d94 	.word	0x20000d94
 800ba4c:	20000dfc 	.word	0x20000dfc

0800ba50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08a      	sub	sp, #40	; 0x28
 800ba54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba5a:	f000 faeb 	bl	800c034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba5e:	4b1c      	ldr	r3, [pc, #112]	; (800bad0 <xTimerCreateTimerTask+0x80>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d021      	beq.n	800baaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba6e:	1d3a      	adds	r2, r7, #4
 800ba70:	f107 0108 	add.w	r1, r7, #8
 800ba74:	f107 030c 	add.w	r3, r7, #12
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f6 f9f1 	bl	8001e60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	9202      	str	r2, [sp, #8]
 800ba86:	9301      	str	r3, [sp, #4]
 800ba88:	2302      	movs	r3, #2
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	460a      	mov	r2, r1
 800ba90:	4910      	ldr	r1, [pc, #64]	; (800bad4 <xTimerCreateTimerTask+0x84>)
 800ba92:	4811      	ldr	r0, [pc, #68]	; (800bad8 <xTimerCreateTimerTask+0x88>)
 800ba94:	f7fe ffb2 	bl	800a9fc <xTaskCreateStatic>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	4a10      	ldr	r2, [pc, #64]	; (800badc <xTimerCreateTimerTask+0x8c>)
 800ba9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba9e:	4b0f      	ldr	r3, [pc, #60]	; (800badc <xTimerCreateTimerTask+0x8c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800baa6:	2301      	movs	r3, #1
 800baa8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10a      	bne.n	800bac6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	613b      	str	r3, [r7, #16]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bac6:	697b      	ldr	r3, [r7, #20]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20000e38 	.word	0x20000e38
 800bad4:	0800f444 	.word	0x0800f444
 800bad8:	0800bc15 	.word	0x0800bc15
 800badc:	20000e3c 	.word	0x20000e3c

0800bae0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b08a      	sub	sp, #40	; 0x28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800baee:	2300      	movs	r3, #0
 800baf0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10a      	bne.n	800bb0e <xTimerGenericCommand+0x2e>
	__asm volatile
 800baf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafc:	f383 8811 	msr	BASEPRI, r3
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	623b      	str	r3, [r7, #32]
}
 800bb0a:	bf00      	nop
 800bb0c:	e7fe      	b.n	800bb0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb0e:	4b1a      	ldr	r3, [pc, #104]	; (800bb78 <xTimerGenericCommand+0x98>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d02a      	beq.n	800bb6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	2b05      	cmp	r3, #5
 800bb26:	dc18      	bgt.n	800bb5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb28:	f7ff fd70 	bl	800b60c <xTaskGetSchedulerState>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d109      	bne.n	800bb46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb32:	4b11      	ldr	r3, [pc, #68]	; (800bb78 <xTimerGenericCommand+0x98>)
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	f107 0114 	add.w	r1, r7, #20
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb3e:	f7fe f9c5 	bl	8009ecc <xQueueGenericSend>
 800bb42:	6278      	str	r0, [r7, #36]	; 0x24
 800bb44:	e012      	b.n	800bb6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb46:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <xTimerGenericCommand+0x98>)
 800bb48:	6818      	ldr	r0, [r3, #0]
 800bb4a:	f107 0114 	add.w	r1, r7, #20
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2200      	movs	r2, #0
 800bb52:	f7fe f9bb 	bl	8009ecc <xQueueGenericSend>
 800bb56:	6278      	str	r0, [r7, #36]	; 0x24
 800bb58:	e008      	b.n	800bb6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb5a:	4b07      	ldr	r3, [pc, #28]	; (800bb78 <xTimerGenericCommand+0x98>)
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	f107 0114 	add.w	r1, r7, #20
 800bb62:	2300      	movs	r3, #0
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	f7fe faaf 	bl	800a0c8 <xQueueGenericSendFromISR>
 800bb6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3728      	adds	r7, #40	; 0x28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20000e38 	.word	0x20000e38

0800bb7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af02      	add	r7, sp, #8
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb86:	4b22      	ldr	r3, [pc, #136]	; (800bc10 <prvProcessExpiredTimer+0x94>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	3304      	adds	r3, #4
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe f834 	bl	8009c02 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bba0:	f003 0304 	and.w	r3, r3, #4
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d022      	beq.n	800bbee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	699a      	ldr	r2, [r3, #24]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	18d1      	adds	r1, r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	6978      	ldr	r0, [r7, #20]
 800bbb6:	f000 f8d1 	bl	800bd5c <prvInsertTimerInActiveList>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d01f      	beq.n	800bc00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	2100      	movs	r1, #0
 800bbca:	6978      	ldr	r0, [r7, #20]
 800bbcc:	f7ff ff88 	bl	800bae0 <xTimerGenericCommand>
 800bbd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d113      	bne.n	800bc00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	60fb      	str	r3, [r7, #12]
}
 800bbea:	bf00      	nop
 800bbec:	e7fe      	b.n	800bbec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bbf4:	f023 0301 	bic.w	r3, r3, #1
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	6a1b      	ldr	r3, [r3, #32]
 800bc04:	6978      	ldr	r0, [r7, #20]
 800bc06:	4798      	blx	r3
}
 800bc08:	bf00      	nop
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000e30 	.word	0x20000e30

0800bc14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc1c:	f107 0308 	add.w	r3, r7, #8
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 f857 	bl	800bcd4 <prvGetNextExpireTime>
 800bc26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 f803 	bl	800bc38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc32:	f000 f8d5 	bl	800bde0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc36:	e7f1      	b.n	800bc1c <prvTimerTask+0x8>

0800bc38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc42:	f7ff f909 	bl	800ae58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc46:	f107 0308 	add.w	r3, r7, #8
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 f866 	bl	800bd1c <prvSampleTimeNow>
 800bc50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d130      	bne.n	800bcba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10a      	bne.n	800bc74 <prvProcessTimerOrBlockTask+0x3c>
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d806      	bhi.n	800bc74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc66:	f7ff f905 	bl	800ae74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc6a:	68f9      	ldr	r1, [r7, #12]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff ff85 	bl	800bb7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc72:	e024      	b.n	800bcbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d008      	beq.n	800bc8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc7a:	4b13      	ldr	r3, [pc, #76]	; (800bcc8 <prvProcessTimerOrBlockTask+0x90>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <prvProcessTimerOrBlockTask+0x50>
 800bc84:	2301      	movs	r3, #1
 800bc86:	e000      	b.n	800bc8a <prvProcessTimerOrBlockTask+0x52>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc8c:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <prvProcessTimerOrBlockTask+0x94>)
 800bc8e:	6818      	ldr	r0, [r3, #0]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	f7fe fe7b 	bl	800a994 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc9e:	f7ff f8e9 	bl	800ae74 <xTaskResumeAll>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10a      	bne.n	800bcbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bca8:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <prvProcessTimerOrBlockTask+0x98>)
 800bcaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcae:	601a      	str	r2, [r3, #0]
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	f3bf 8f6f 	isb	sy
}
 800bcb8:	e001      	b.n	800bcbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bcba:	f7ff f8db 	bl	800ae74 <xTaskResumeAll>
}
 800bcbe:	bf00      	nop
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20000e34 	.word	0x20000e34
 800bccc:	20000e38 	.word	0x20000e38
 800bcd0:	e000ed04 	.word	0xe000ed04

0800bcd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bcdc:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <prvGetNextExpireTime+0x44>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d101      	bne.n	800bcea <prvGetNextExpireTime+0x16>
 800bce6:	2201      	movs	r2, #1
 800bce8:	e000      	b.n	800bcec <prvGetNextExpireTime+0x18>
 800bcea:	2200      	movs	r2, #0
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d105      	bne.n	800bd04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcf8:	4b07      	ldr	r3, [pc, #28]	; (800bd18 <prvGetNextExpireTime+0x44>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e001      	b.n	800bd08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd08:	68fb      	ldr	r3, [r7, #12]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3714      	adds	r7, #20
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	20000e30 	.word	0x20000e30

0800bd1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd24:	f7ff f942 	bl	800afac <xTaskGetTickCount>
 800bd28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <prvSampleTimeNow+0x3c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d205      	bcs.n	800bd40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd34:	f000 f91a 	bl	800bf6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	e002      	b.n	800bd46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd46:	4a04      	ldr	r2, [pc, #16]	; (800bd58 <prvSampleTimeNow+0x3c>)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20000e40 	.word	0x20000e40

0800bd5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d812      	bhi.n	800bda8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	1ad2      	subs	r2, r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d302      	bcc.n	800bd96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd90:	2301      	movs	r3, #1
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	e01b      	b.n	800bdce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd96:	4b10      	ldr	r3, [pc, #64]	; (800bdd8 <prvInsertTimerInActiveList+0x7c>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	4619      	mov	r1, r3
 800bda0:	4610      	mov	r0, r2
 800bda2:	f7fd fef5 	bl	8009b90 <vListInsert>
 800bda6:	e012      	b.n	800bdce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d206      	bcs.n	800bdbe <prvInsertTimerInActiveList+0x62>
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d302      	bcc.n	800bdbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	617b      	str	r3, [r7, #20]
 800bdbc:	e007      	b.n	800bdce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdbe:	4b07      	ldr	r3, [pc, #28]	; (800bddc <prvInsertTimerInActiveList+0x80>)
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	4610      	mov	r0, r2
 800bdca:	f7fd fee1 	bl	8009b90 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bdce:	697b      	ldr	r3, [r7, #20]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	20000e34 	.word	0x20000e34
 800bddc:	20000e30 	.word	0x20000e30

0800bde0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08c      	sub	sp, #48	; 0x30
 800bde4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bde6:	e0ae      	b.n	800bf46 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f2c0 80aa 	blt.w	800bf44 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d004      	beq.n	800be06 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	3304      	adds	r3, #4
 800be00:	4618      	mov	r0, r3
 800be02:	f7fd fefe 	bl	8009c02 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be06:	1d3b      	adds	r3, r7, #4
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff ff87 	bl	800bd1c <prvSampleTimeNow>
 800be0e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	2b09      	cmp	r3, #9
 800be14:	f200 8097 	bhi.w	800bf46 <prvProcessReceivedCommands+0x166>
 800be18:	a201      	add	r2, pc, #4	; (adr r2, 800be20 <prvProcessReceivedCommands+0x40>)
 800be1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1e:	bf00      	nop
 800be20:	0800be49 	.word	0x0800be49
 800be24:	0800be49 	.word	0x0800be49
 800be28:	0800be49 	.word	0x0800be49
 800be2c:	0800bebd 	.word	0x0800bebd
 800be30:	0800bed1 	.word	0x0800bed1
 800be34:	0800bf1b 	.word	0x0800bf1b
 800be38:	0800be49 	.word	0x0800be49
 800be3c:	0800be49 	.word	0x0800be49
 800be40:	0800bebd 	.word	0x0800bebd
 800be44:	0800bed1 	.word	0x0800bed1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800be4e:	f043 0301 	orr.w	r3, r3, #1
 800be52:	b2da      	uxtb	r2, r3
 800be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	18d1      	adds	r1, r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6a3a      	ldr	r2, [r7, #32]
 800be66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be68:	f7ff ff78 	bl	800bd5c <prvInsertTimerInActiveList>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d069      	beq.n	800bf46 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800be80:	f003 0304 	and.w	r3, r3, #4
 800be84:	2b00      	cmp	r3, #0
 800be86:	d05e      	beq.n	800bf46 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	441a      	add	r2, r3
 800be90:	2300      	movs	r3, #0
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	2300      	movs	r3, #0
 800be96:	2100      	movs	r1, #0
 800be98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be9a:	f7ff fe21 	bl	800bae0 <xTimerGenericCommand>
 800be9e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d14f      	bne.n	800bf46 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	61bb      	str	r3, [r7, #24]
}
 800beb8:	bf00      	nop
 800beba:	e7fe      	b.n	800beba <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bec2:	f023 0301 	bic.w	r3, r3, #1
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800bece:	e03a      	b.n	800bf46 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bed6:	f043 0301 	orr.w	r3, r3, #1
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10a      	bne.n	800bf06 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	617b      	str	r3, [r7, #20]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf08:	699a      	ldr	r2, [r3, #24]
 800bf0a:	6a3b      	ldr	r3, [r7, #32]
 800bf0c:	18d1      	adds	r1, r2, r3
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	6a3a      	ldr	r2, [r7, #32]
 800bf12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf14:	f7ff ff22 	bl	800bd5c <prvInsertTimerInActiveList>
					break;
 800bf18:	e015      	b.n	800bf46 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf20:	f003 0302 	and.w	r3, r3, #2
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d103      	bne.n	800bf30 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800bf28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf2a:	f000 fbe1 	bl	800c6f0 <vPortFree>
 800bf2e:	e00a      	b.n	800bf46 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf36:	f023 0301 	bic.w	r3, r3, #1
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf42:	e000      	b.n	800bf46 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bf44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf46:	4b08      	ldr	r3, [pc, #32]	; (800bf68 <prvProcessReceivedCommands+0x188>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f107 0108 	add.w	r1, r7, #8
 800bf4e:	2200      	movs	r2, #0
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe f9e1 	bl	800a318 <xQueueReceive>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f47f af45 	bne.w	800bde8 <prvProcessReceivedCommands+0x8>
	}
}
 800bf5e:	bf00      	nop
 800bf60:	bf00      	nop
 800bf62:	3728      	adds	r7, #40	; 0x28
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	20000e38 	.word	0x20000e38

0800bf6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b088      	sub	sp, #32
 800bf70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf72:	e048      	b.n	800c006 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf74:	4b2d      	ldr	r3, [pc, #180]	; (800c02c <prvSwitchTimerLists+0xc0>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf7e:	4b2b      	ldr	r3, [pc, #172]	; (800c02c <prvSwitchTimerLists+0xc0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fd fe38 	bl	8009c02 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bfa0:	f003 0304 	and.w	r3, r3, #4
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d02e      	beq.n	800c006 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	699b      	ldr	r3, [r3, #24]
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	4413      	add	r3, r2
 800bfb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d90e      	bls.n	800bfd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfc6:	4b19      	ldr	r3, [pc, #100]	; (800c02c <prvSwitchTimerLists+0xc0>)
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3304      	adds	r3, #4
 800bfce:	4619      	mov	r1, r3
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	f7fd fddd 	bl	8009b90 <vListInsert>
 800bfd6:	e016      	b.n	800c006 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfd8:	2300      	movs	r3, #0
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	2300      	movs	r3, #0
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff fd7c 	bl	800bae0 <xTimerGenericCommand>
 800bfe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10a      	bne.n	800c006 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	603b      	str	r3, [r7, #0]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c006:	4b09      	ldr	r3, [pc, #36]	; (800c02c <prvSwitchTimerLists+0xc0>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1b1      	bne.n	800bf74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c010:	4b06      	ldr	r3, [pc, #24]	; (800c02c <prvSwitchTimerLists+0xc0>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c016:	4b06      	ldr	r3, [pc, #24]	; (800c030 <prvSwitchTimerLists+0xc4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a04      	ldr	r2, [pc, #16]	; (800c02c <prvSwitchTimerLists+0xc0>)
 800c01c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c01e:	4a04      	ldr	r2, [pc, #16]	; (800c030 <prvSwitchTimerLists+0xc4>)
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	6013      	str	r3, [r2, #0]
}
 800c024:	bf00      	nop
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20000e30 	.word	0x20000e30
 800c030:	20000e34 	.word	0x20000e34

0800c034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c03a:	f000 f96b 	bl	800c314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c03e:	4b15      	ldr	r3, [pc, #84]	; (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d120      	bne.n	800c088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c046:	4814      	ldr	r0, [pc, #80]	; (800c098 <prvCheckForValidListAndQueue+0x64>)
 800c048:	f7fd fd51 	bl	8009aee <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c04c:	4813      	ldr	r0, [pc, #76]	; (800c09c <prvCheckForValidListAndQueue+0x68>)
 800c04e:	f7fd fd4e 	bl	8009aee <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c052:	4b13      	ldr	r3, [pc, #76]	; (800c0a0 <prvCheckForValidListAndQueue+0x6c>)
 800c054:	4a10      	ldr	r2, [pc, #64]	; (800c098 <prvCheckForValidListAndQueue+0x64>)
 800c056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c058:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <prvCheckForValidListAndQueue+0x70>)
 800c05a:	4a10      	ldr	r2, [pc, #64]	; (800c09c <prvCheckForValidListAndQueue+0x68>)
 800c05c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c05e:	2300      	movs	r3, #0
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	4b11      	ldr	r3, [pc, #68]	; (800c0a8 <prvCheckForValidListAndQueue+0x74>)
 800c064:	4a11      	ldr	r2, [pc, #68]	; (800c0ac <prvCheckForValidListAndQueue+0x78>)
 800c066:	210c      	movs	r1, #12
 800c068:	200a      	movs	r0, #10
 800c06a:	f7fd fe5d 	bl	8009d28 <xQueueGenericCreateStatic>
 800c06e:	4603      	mov	r3, r0
 800c070:	4a08      	ldr	r2, [pc, #32]	; (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c074:	4b07      	ldr	r3, [pc, #28]	; (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c07c:	4b05      	ldr	r3, [pc, #20]	; (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	490b      	ldr	r1, [pc, #44]	; (800c0b0 <prvCheckForValidListAndQueue+0x7c>)
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe fc5c 	bl	800a940 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c088:	f000 f974 	bl	800c374 <vPortExitCritical>
}
 800c08c:	bf00      	nop
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20000e38 	.word	0x20000e38
 800c098:	20000e08 	.word	0x20000e08
 800c09c:	20000e1c 	.word	0x20000e1c
 800c0a0:	20000e30 	.word	0x20000e30
 800c0a4:	20000e34 	.word	0x20000e34
 800c0a8:	20000ebc 	.word	0x20000ebc
 800c0ac:	20000e44 	.word	0x20000e44
 800c0b0:	0800f44c 	.word	0x0800f44c

0800c0b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3b04      	subs	r3, #4
 800c0c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b04      	subs	r3, #4
 800c0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f023 0201 	bic.w	r2, r3, #1
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3b04      	subs	r3, #4
 800c0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0e4:	4a0c      	ldr	r2, [pc, #48]	; (800c118 <pxPortInitialiseStack+0x64>)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3b14      	subs	r3, #20
 800c0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f06f 0202 	mvn.w	r2, #2
 800c102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3b20      	subs	r3, #32
 800c108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c10a:	68fb      	ldr	r3, [r7, #12]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	0800c11d 	.word	0x0800c11d

0800c11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c126:	4b12      	ldr	r3, [pc, #72]	; (800c170 <prvTaskExitError+0x54>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12e:	d00a      	beq.n	800c146 <prvTaskExitError+0x2a>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <prvTaskExitError+0x28>
	__asm volatile
 800c146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	60bb      	str	r3, [r7, #8]
}
 800c158:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c15a:	bf00      	nop
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0fc      	beq.n	800c15c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c162:	bf00      	nop
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	2000000c 	.word	0x2000000c
	...

0800c180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <pxCurrentTCBConst2>)
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	6808      	ldr	r0, [r1, #0]
 800c186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18a:	f380 8809 	msr	PSP, r0
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8811 	msr	BASEPRI, r0
 800c19a:	4770      	bx	lr
 800c19c:	f3af 8000 	nop.w

0800c1a0 <pxCurrentTCBConst2>:
 800c1a0:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop

0800c1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1a8:	4808      	ldr	r0, [pc, #32]	; (800c1cc <prvPortStartFirstTask+0x24>)
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	6800      	ldr	r0, [r0, #0]
 800c1ae:	f380 8808 	msr	MSP, r0
 800c1b2:	f04f 0000 	mov.w	r0, #0
 800c1b6:	f380 8814 	msr	CONTROL, r0
 800c1ba:	b662      	cpsie	i
 800c1bc:	b661      	cpsie	f
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	df00      	svc	0
 800c1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ca:	bf00      	nop
 800c1cc:	e000ed08 	.word	0xe000ed08

0800c1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1d6:	4b46      	ldr	r3, [pc, #280]	; (800c2f0 <xPortStartScheduler+0x120>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a46      	ldr	r2, [pc, #280]	; (800c2f4 <xPortStartScheduler+0x124>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d10a      	bne.n	800c1f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	613b      	str	r3, [r7, #16]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1f6:	4b3e      	ldr	r3, [pc, #248]	; (800c2f0 <xPortStartScheduler+0x120>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a3f      	ldr	r2, [pc, #252]	; (800c2f8 <xPortStartScheduler+0x128>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d10a      	bne.n	800c216 <xPortStartScheduler+0x46>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	60fb      	str	r3, [r7, #12]
}
 800c212:	bf00      	nop
 800c214:	e7fe      	b.n	800c214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c216:	4b39      	ldr	r3, [pc, #228]	; (800c2fc <xPortStartScheduler+0x12c>)
 800c218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	22ff      	movs	r2, #255	; 0xff
 800c226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	b2db      	uxtb	r3, r3
 800c234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	4b31      	ldr	r3, [pc, #196]	; (800c300 <xPortStartScheduler+0x130>)
 800c23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c23e:	4b31      	ldr	r3, [pc, #196]	; (800c304 <xPortStartScheduler+0x134>)
 800c240:	2207      	movs	r2, #7
 800c242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c244:	e009      	b.n	800c25a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c246:	4b2f      	ldr	r3, [pc, #188]	; (800c304 <xPortStartScheduler+0x134>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	4a2d      	ldr	r2, [pc, #180]	; (800c304 <xPortStartScheduler+0x134>)
 800c24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c250:	78fb      	ldrb	r3, [r7, #3]
 800c252:	b2db      	uxtb	r3, r3
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	b2db      	uxtb	r3, r3
 800c258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c25a:	78fb      	ldrb	r3, [r7, #3]
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c262:	2b80      	cmp	r3, #128	; 0x80
 800c264:	d0ef      	beq.n	800c246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c266:	4b27      	ldr	r3, [pc, #156]	; (800c304 <xPortStartScheduler+0x134>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f1c3 0307 	rsb	r3, r3, #7
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d00a      	beq.n	800c288 <xPortStartScheduler+0xb8>
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	60bb      	str	r3, [r7, #8]
}
 800c284:	bf00      	nop
 800c286:	e7fe      	b.n	800c286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c288:	4b1e      	ldr	r3, [pc, #120]	; (800c304 <xPortStartScheduler+0x134>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	021b      	lsls	r3, r3, #8
 800c28e:	4a1d      	ldr	r2, [pc, #116]	; (800c304 <xPortStartScheduler+0x134>)
 800c290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c292:	4b1c      	ldr	r3, [pc, #112]	; (800c304 <xPortStartScheduler+0x134>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c29a:	4a1a      	ldr	r2, [pc, #104]	; (800c304 <xPortStartScheduler+0x134>)
 800c29c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2a6:	4b18      	ldr	r3, [pc, #96]	; (800c308 <xPortStartScheduler+0x138>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a17      	ldr	r2, [pc, #92]	; (800c308 <xPortStartScheduler+0x138>)
 800c2ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c2b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2b2:	4b15      	ldr	r3, [pc, #84]	; (800c308 <xPortStartScheduler+0x138>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a14      	ldr	r2, [pc, #80]	; (800c308 <xPortStartScheduler+0x138>)
 800c2b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c2bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2be:	f000 f8dd 	bl	800c47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2c2:	4b12      	ldr	r3, [pc, #72]	; (800c30c <xPortStartScheduler+0x13c>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2c8:	f000 f8fc 	bl	800c4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2cc:	4b10      	ldr	r3, [pc, #64]	; (800c310 <xPortStartScheduler+0x140>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a0f      	ldr	r2, [pc, #60]	; (800c310 <xPortStartScheduler+0x140>)
 800c2d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c2d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2d8:	f7ff ff66 	bl	800c1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2dc:	f7fe ff2e 	bl	800b13c <vTaskSwitchContext>
	prvTaskExitError();
 800c2e0:	f7ff ff1c 	bl	800c11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	e000ed00 	.word	0xe000ed00
 800c2f4:	410fc271 	.word	0x410fc271
 800c2f8:	410fc270 	.word	0x410fc270
 800c2fc:	e000e400 	.word	0xe000e400
 800c300:	20000f04 	.word	0x20000f04
 800c304:	20000f08 	.word	0x20000f08
 800c308:	e000ed20 	.word	0xe000ed20
 800c30c:	2000000c 	.word	0x2000000c
 800c310:	e000ef34 	.word	0xe000ef34

0800c314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	607b      	str	r3, [r7, #4]
}
 800c32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <vPortEnterCritical+0x58>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3301      	adds	r3, #1
 800c334:	4a0d      	ldr	r2, [pc, #52]	; (800c36c <vPortEnterCritical+0x58>)
 800c336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c338:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <vPortEnterCritical+0x58>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d10f      	bne.n	800c360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c340:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <vPortEnterCritical+0x5c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00a      	beq.n	800c360 <vPortEnterCritical+0x4c>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	603b      	str	r3, [r7, #0]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <vPortEnterCritical+0x4a>
	}
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	2000000c 	.word	0x2000000c
 800c370:	e000ed04 	.word	0xe000ed04

0800c374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c37a:	4b12      	ldr	r3, [pc, #72]	; (800c3c4 <vPortExitCritical+0x50>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10a      	bne.n	800c398 <vPortExitCritical+0x24>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	607b      	str	r3, [r7, #4]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c398:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <vPortExitCritical+0x50>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	4a09      	ldr	r2, [pc, #36]	; (800c3c4 <vPortExitCritical+0x50>)
 800c3a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3a2:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <vPortExitCritical+0x50>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d105      	bne.n	800c3b6 <vPortExitCritical+0x42>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	f383 8811 	msr	BASEPRI, r3
}
 800c3b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3b6:	bf00      	nop
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	2000000c 	.word	0x2000000c
	...

0800c3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3d0:	f3ef 8009 	mrs	r0, PSP
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	4b15      	ldr	r3, [pc, #84]	; (800c430 <pxCurrentTCBConst>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	f01e 0f10 	tst.w	lr, #16
 800c3e0:	bf08      	it	eq
 800c3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ea:	6010      	str	r0, [r2, #0]
 800c3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3f4:	f380 8811 	msr	BASEPRI, r0
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f7fe fe9c 	bl	800b13c <vTaskSwitchContext>
 800c404:	f04f 0000 	mov.w	r0, #0
 800c408:	f380 8811 	msr	BASEPRI, r0
 800c40c:	bc09      	pop	{r0, r3}
 800c40e:	6819      	ldr	r1, [r3, #0]
 800c410:	6808      	ldr	r0, [r1, #0]
 800c412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c416:	f01e 0f10 	tst.w	lr, #16
 800c41a:	bf08      	it	eq
 800c41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c420:	f380 8809 	msr	PSP, r0
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	f3af 8000 	nop.w

0800c430 <pxCurrentTCBConst>:
 800c430:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop

0800c438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	607b      	str	r3, [r7, #4]
}
 800c450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c452:	f7fe fdbb 	bl	800afcc <xTaskIncrementTick>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c45c:	4b06      	ldr	r3, [pc, #24]	; (800c478 <SysTick_Handler+0x40>)
 800c45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	2300      	movs	r3, #0
 800c466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f383 8811 	msr	BASEPRI, r3
}
 800c46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c480:	4b0b      	ldr	r3, [pc, #44]	; (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c486:	4b0b      	ldr	r3, [pc, #44]	; (800c4b4 <vPortSetupTimerInterrupt+0x38>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c48c:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <vPortSetupTimerInterrupt+0x3c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a0a      	ldr	r2, [pc, #40]	; (800c4bc <vPortSetupTimerInterrupt+0x40>)
 800c492:	fba2 2303 	umull	r2, r3, r2, r3
 800c496:	099b      	lsrs	r3, r3, #6
 800c498:	4a09      	ldr	r2, [pc, #36]	; (800c4c0 <vPortSetupTimerInterrupt+0x44>)
 800c49a:	3b01      	subs	r3, #1
 800c49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c49e:	4b04      	ldr	r3, [pc, #16]	; (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c4a0:	2207      	movs	r2, #7
 800c4a2:	601a      	str	r2, [r3, #0]
}
 800c4a4:	bf00      	nop
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	e000e010 	.word	0xe000e010
 800c4b4:	e000e018 	.word	0xe000e018
 800c4b8:	20000000 	.word	0x20000000
 800c4bc:	10624dd3 	.word	0x10624dd3
 800c4c0:	e000e014 	.word	0xe000e014

0800c4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c4d4 <vPortEnableVFP+0x10>
 800c4c8:	6801      	ldr	r1, [r0, #0]
 800c4ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c4ce:	6001      	str	r1, [r0, #0]
 800c4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4d2:	bf00      	nop
 800c4d4:	e000ed88 	.word	0xe000ed88

0800c4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b0f      	cmp	r3, #15
 800c4e8:	d914      	bls.n	800c514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4ea:	4a17      	ldr	r2, [pc, #92]	; (800c548 <vPortValidateInterruptPriority+0x70>)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4f4:	4b15      	ldr	r3, [pc, #84]	; (800c54c <vPortValidateInterruptPriority+0x74>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	7afa      	ldrb	r2, [r7, #11]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d20a      	bcs.n	800c514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
 800c512:	e7fe      	b.n	800c512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c514:	4b0e      	ldr	r3, [pc, #56]	; (800c550 <vPortValidateInterruptPriority+0x78>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c51c:	4b0d      	ldr	r3, [pc, #52]	; (800c554 <vPortValidateInterruptPriority+0x7c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	429a      	cmp	r2, r3
 800c522:	d90a      	bls.n	800c53a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	603b      	str	r3, [r7, #0]
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <vPortValidateInterruptPriority+0x60>
	}
 800c53a:	bf00      	nop
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	e000e3f0 	.word	0xe000e3f0
 800c54c:	20000f04 	.word	0x20000f04
 800c550:	e000ed0c 	.word	0xe000ed0c
 800c554:	20000f08 	.word	0x20000f08

0800c558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08a      	sub	sp, #40	; 0x28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c560:	2300      	movs	r3, #0
 800c562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c564:	f7fe fc78 	bl	800ae58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c568:	4b5b      	ldr	r3, [pc, #364]	; (800c6d8 <pvPortMalloc+0x180>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d101      	bne.n	800c574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c570:	f000 f920 	bl	800c7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c574:	4b59      	ldr	r3, [pc, #356]	; (800c6dc <pvPortMalloc+0x184>)
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4013      	ands	r3, r2
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f040 8093 	bne.w	800c6a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01d      	beq.n	800c5c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c588:	2208      	movs	r2, #8
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4413      	add	r3, r2
 800c58e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f003 0307 	and.w	r3, r3, #7
 800c596:	2b00      	cmp	r3, #0
 800c598:	d014      	beq.n	800c5c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f023 0307 	bic.w	r3, r3, #7
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00a      	beq.n	800c5c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	617b      	str	r3, [r7, #20]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d06e      	beq.n	800c6a8 <pvPortMalloc+0x150>
 800c5ca:	4b45      	ldr	r3, [pc, #276]	; (800c6e0 <pvPortMalloc+0x188>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d869      	bhi.n	800c6a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5d4:	4b43      	ldr	r3, [pc, #268]	; (800c6e4 <pvPortMalloc+0x18c>)
 800c5d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5d8:	4b42      	ldr	r3, [pc, #264]	; (800c6e4 <pvPortMalloc+0x18c>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5de:	e004      	b.n	800c5ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d903      	bls.n	800c5fc <pvPortMalloc+0xa4>
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1f1      	bne.n	800c5e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5fc:	4b36      	ldr	r3, [pc, #216]	; (800c6d8 <pvPortMalloc+0x180>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c602:	429a      	cmp	r2, r3
 800c604:	d050      	beq.n	800c6a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2208      	movs	r2, #8
 800c60c:	4413      	add	r3, r2
 800c60e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	1ad2      	subs	r2, r2, r3
 800c620:	2308      	movs	r3, #8
 800c622:	005b      	lsls	r3, r3, #1
 800c624:	429a      	cmp	r2, r3
 800c626:	d91f      	bls.n	800c668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4413      	add	r3, r2
 800c62e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	f003 0307 	and.w	r3, r3, #7
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00a      	beq.n	800c650 <pvPortMalloc+0xf8>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	613b      	str	r3, [r7, #16]
}
 800c64c:	bf00      	nop
 800c64e:	e7fe      	b.n	800c64e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	685a      	ldr	r2, [r3, #4]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	1ad2      	subs	r2, r2, r3
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c662:	69b8      	ldr	r0, [r7, #24]
 800c664:	f000 f908 	bl	800c878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c668:	4b1d      	ldr	r3, [pc, #116]	; (800c6e0 <pvPortMalloc+0x188>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	4a1b      	ldr	r2, [pc, #108]	; (800c6e0 <pvPortMalloc+0x188>)
 800c674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c676:	4b1a      	ldr	r3, [pc, #104]	; (800c6e0 <pvPortMalloc+0x188>)
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	4b1b      	ldr	r3, [pc, #108]	; (800c6e8 <pvPortMalloc+0x190>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d203      	bcs.n	800c68a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c682:	4b17      	ldr	r3, [pc, #92]	; (800c6e0 <pvPortMalloc+0x188>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a18      	ldr	r2, [pc, #96]	; (800c6e8 <pvPortMalloc+0x190>)
 800c688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <pvPortMalloc+0x184>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	431a      	orrs	r2, r3
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	2200      	movs	r2, #0
 800c69c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <pvPortMalloc+0x194>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	4a11      	ldr	r2, [pc, #68]	; (800c6ec <pvPortMalloc+0x194>)
 800c6a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6a8:	f7fe fbe4 	bl	800ae74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	f003 0307 	and.w	r3, r3, #7
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00a      	beq.n	800c6cc <pvPortMalloc+0x174>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	60fb      	str	r3, [r7, #12]
}
 800c6c8:	bf00      	nop
 800c6ca:	e7fe      	b.n	800c6ca <pvPortMalloc+0x172>
	return pvReturn;
 800c6cc:	69fb      	ldr	r3, [r7, #28]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3728      	adds	r7, #40	; 0x28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20004b14 	.word	0x20004b14
 800c6dc:	20004b28 	.word	0x20004b28
 800c6e0:	20004b18 	.word	0x20004b18
 800c6e4:	20004b0c 	.word	0x20004b0c
 800c6e8:	20004b1c 	.word	0x20004b1c
 800c6ec:	20004b20 	.word	0x20004b20

0800c6f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d04d      	beq.n	800c79e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c702:	2308      	movs	r3, #8
 800c704:	425b      	negs	r3, r3
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	4413      	add	r3, r2
 800c70a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	4b24      	ldr	r3, [pc, #144]	; (800c7a8 <vPortFree+0xb8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4013      	ands	r3, r2
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <vPortFree+0x44>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	60fb      	str	r3, [r7, #12]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00a      	beq.n	800c752 <vPortFree+0x62>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	60bb      	str	r3, [r7, #8]
}
 800c74e:	bf00      	nop
 800c750:	e7fe      	b.n	800c750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <vPortFree+0xb8>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d01e      	beq.n	800c79e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d11a      	bne.n	800c79e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	4b0e      	ldr	r3, [pc, #56]	; (800c7a8 <vPortFree+0xb8>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	43db      	mvns	r3, r3
 800c772:	401a      	ands	r2, r3
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c778:	f7fe fb6e 	bl	800ae58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	4b0a      	ldr	r3, [pc, #40]	; (800c7ac <vPortFree+0xbc>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4413      	add	r3, r2
 800c786:	4a09      	ldr	r2, [pc, #36]	; (800c7ac <vPortFree+0xbc>)
 800c788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c78a:	6938      	ldr	r0, [r7, #16]
 800c78c:	f000 f874 	bl	800c878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c790:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <vPortFree+0xc0>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3301      	adds	r3, #1
 800c796:	4a06      	ldr	r2, [pc, #24]	; (800c7b0 <vPortFree+0xc0>)
 800c798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c79a:	f7fe fb6b 	bl	800ae74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c79e:	bf00      	nop
 800c7a0:	3718      	adds	r7, #24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20004b28 	.word	0x20004b28
 800c7ac:	20004b18 	.word	0x20004b18
 800c7b0:	20004b24 	.word	0x20004b24

0800c7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7c0:	4b27      	ldr	r3, [pc, #156]	; (800c860 <prvHeapInit+0xac>)
 800c7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00c      	beq.n	800c7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	3307      	adds	r3, #7
 800c7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f023 0307 	bic.w	r3, r3, #7
 800c7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	4a1f      	ldr	r2, [pc, #124]	; (800c860 <prvHeapInit+0xac>)
 800c7e4:	4413      	add	r3, r2
 800c7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7ec:	4a1d      	ldr	r2, [pc, #116]	; (800c864 <prvHeapInit+0xb0>)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <prvHeapInit+0xb0>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c800:	2208      	movs	r2, #8
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	1a9b      	subs	r3, r3, r2
 800c806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f023 0307 	bic.w	r3, r3, #7
 800c80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4a15      	ldr	r2, [pc, #84]	; (800c868 <prvHeapInit+0xb4>)
 800c814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c816:	4b14      	ldr	r3, [pc, #80]	; (800c868 <prvHeapInit+0xb4>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2200      	movs	r2, #0
 800c81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c81e:	4b12      	ldr	r3, [pc, #72]	; (800c868 <prvHeapInit+0xb4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c834:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <prvHeapInit+0xb4>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	4a0a      	ldr	r2, [pc, #40]	; (800c86c <prvHeapInit+0xb8>)
 800c842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	4a09      	ldr	r2, [pc, #36]	; (800c870 <prvHeapInit+0xbc>)
 800c84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c84c:	4b09      	ldr	r3, [pc, #36]	; (800c874 <prvHeapInit+0xc0>)
 800c84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c852:	601a      	str	r2, [r3, #0]
}
 800c854:	bf00      	nop
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	20000f0c 	.word	0x20000f0c
 800c864:	20004b0c 	.word	0x20004b0c
 800c868:	20004b14 	.word	0x20004b14
 800c86c:	20004b1c 	.word	0x20004b1c
 800c870:	20004b18 	.word	0x20004b18
 800c874:	20004b28 	.word	0x20004b28

0800c878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c880:	4b28      	ldr	r3, [pc, #160]	; (800c924 <prvInsertBlockIntoFreeList+0xac>)
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	e002      	b.n	800c88c <prvInsertBlockIntoFreeList+0x14>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	60fb      	str	r3, [r7, #12]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	429a      	cmp	r2, r3
 800c894:	d8f7      	bhi.n	800c886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d108      	bne.n	800c8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	441a      	add	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	441a      	add	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d118      	bne.n	800c900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <prvInsertBlockIntoFreeList+0xb0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d00d      	beq.n	800c8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	441a      	add	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	e008      	b.n	800c908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8f6:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <prvInsertBlockIntoFreeList+0xb0>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	e003      	b.n	800c908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d002      	beq.n	800c916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c916:	bf00      	nop
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20004b0c 	.word	0x20004b0c
 800c928:	20004b14 	.word	0x20004b14

0800c92c <__errno>:
 800c92c:	4b01      	ldr	r3, [pc, #4]	; (800c934 <__errno+0x8>)
 800c92e:	6818      	ldr	r0, [r3, #0]
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	20000010 	.word	0x20000010

0800c938 <__libc_init_array>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	4d0d      	ldr	r5, [pc, #52]	; (800c970 <__libc_init_array+0x38>)
 800c93c:	4c0d      	ldr	r4, [pc, #52]	; (800c974 <__libc_init_array+0x3c>)
 800c93e:	1b64      	subs	r4, r4, r5
 800c940:	10a4      	asrs	r4, r4, #2
 800c942:	2600      	movs	r6, #0
 800c944:	42a6      	cmp	r6, r4
 800c946:	d109      	bne.n	800c95c <__libc_init_array+0x24>
 800c948:	4d0b      	ldr	r5, [pc, #44]	; (800c978 <__libc_init_array+0x40>)
 800c94a:	4c0c      	ldr	r4, [pc, #48]	; (800c97c <__libc_init_array+0x44>)
 800c94c:	f002 fd36 	bl	800f3bc <_init>
 800c950:	1b64      	subs	r4, r4, r5
 800c952:	10a4      	asrs	r4, r4, #2
 800c954:	2600      	movs	r6, #0
 800c956:	42a6      	cmp	r6, r4
 800c958:	d105      	bne.n	800c966 <__libc_init_array+0x2e>
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c960:	4798      	blx	r3
 800c962:	3601      	adds	r6, #1
 800c964:	e7ee      	b.n	800c944 <__libc_init_array+0xc>
 800c966:	f855 3b04 	ldr.w	r3, [r5], #4
 800c96a:	4798      	blx	r3
 800c96c:	3601      	adds	r6, #1
 800c96e:	e7f2      	b.n	800c956 <__libc_init_array+0x1e>
 800c970:	0800f854 	.word	0x0800f854
 800c974:	0800f854 	.word	0x0800f854
 800c978:	0800f854 	.word	0x0800f854
 800c97c:	0800f858 	.word	0x0800f858

0800c980 <memcpy>:
 800c980:	440a      	add	r2, r1
 800c982:	4291      	cmp	r1, r2
 800c984:	f100 33ff 	add.w	r3, r0, #4294967295
 800c988:	d100      	bne.n	800c98c <memcpy+0xc>
 800c98a:	4770      	bx	lr
 800c98c:	b510      	push	{r4, lr}
 800c98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c992:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c996:	4291      	cmp	r1, r2
 800c998:	d1f9      	bne.n	800c98e <memcpy+0xe>
 800c99a:	bd10      	pop	{r4, pc}

0800c99c <memset>:
 800c99c:	4402      	add	r2, r0
 800c99e:	4603      	mov	r3, r0
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d100      	bne.n	800c9a6 <memset+0xa>
 800c9a4:	4770      	bx	lr
 800c9a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9aa:	e7f9      	b.n	800c9a0 <memset+0x4>

0800c9ac <__cvt>:
 800c9ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b0:	ec55 4b10 	vmov	r4, r5, d0
 800c9b4:	2d00      	cmp	r5, #0
 800c9b6:	460e      	mov	r6, r1
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	bfbb      	ittet	lt
 800c9be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c9c2:	461d      	movlt	r5, r3
 800c9c4:	2300      	movge	r3, #0
 800c9c6:	232d      	movlt	r3, #45	; 0x2d
 800c9c8:	700b      	strb	r3, [r1, #0]
 800c9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c9d0:	4691      	mov	r9, r2
 800c9d2:	f023 0820 	bic.w	r8, r3, #32
 800c9d6:	bfbc      	itt	lt
 800c9d8:	4622      	movlt	r2, r4
 800c9da:	4614      	movlt	r4, r2
 800c9dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c9e0:	d005      	beq.n	800c9ee <__cvt+0x42>
 800c9e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c9e6:	d100      	bne.n	800c9ea <__cvt+0x3e>
 800c9e8:	3601      	adds	r6, #1
 800c9ea:	2102      	movs	r1, #2
 800c9ec:	e000      	b.n	800c9f0 <__cvt+0x44>
 800c9ee:	2103      	movs	r1, #3
 800c9f0:	ab03      	add	r3, sp, #12
 800c9f2:	9301      	str	r3, [sp, #4]
 800c9f4:	ab02      	add	r3, sp, #8
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	ec45 4b10 	vmov	d0, r4, r5
 800c9fc:	4653      	mov	r3, sl
 800c9fe:	4632      	mov	r2, r6
 800ca00:	f000 fcca 	bl	800d398 <_dtoa_r>
 800ca04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca08:	4607      	mov	r7, r0
 800ca0a:	d102      	bne.n	800ca12 <__cvt+0x66>
 800ca0c:	f019 0f01 	tst.w	r9, #1
 800ca10:	d022      	beq.n	800ca58 <__cvt+0xac>
 800ca12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca16:	eb07 0906 	add.w	r9, r7, r6
 800ca1a:	d110      	bne.n	800ca3e <__cvt+0x92>
 800ca1c:	783b      	ldrb	r3, [r7, #0]
 800ca1e:	2b30      	cmp	r3, #48	; 0x30
 800ca20:	d10a      	bne.n	800ca38 <__cvt+0x8c>
 800ca22:	2200      	movs	r2, #0
 800ca24:	2300      	movs	r3, #0
 800ca26:	4620      	mov	r0, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	f7f4 f855 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca2e:	b918      	cbnz	r0, 800ca38 <__cvt+0x8c>
 800ca30:	f1c6 0601 	rsb	r6, r6, #1
 800ca34:	f8ca 6000 	str.w	r6, [sl]
 800ca38:	f8da 3000 	ldr.w	r3, [sl]
 800ca3c:	4499      	add	r9, r3
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2300      	movs	r3, #0
 800ca42:	4620      	mov	r0, r4
 800ca44:	4629      	mov	r1, r5
 800ca46:	f7f4 f847 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca4a:	b108      	cbz	r0, 800ca50 <__cvt+0xa4>
 800ca4c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca50:	2230      	movs	r2, #48	; 0x30
 800ca52:	9b03      	ldr	r3, [sp, #12]
 800ca54:	454b      	cmp	r3, r9
 800ca56:	d307      	bcc.n	800ca68 <__cvt+0xbc>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca5c:	1bdb      	subs	r3, r3, r7
 800ca5e:	4638      	mov	r0, r7
 800ca60:	6013      	str	r3, [r2, #0]
 800ca62:	b004      	add	sp, #16
 800ca64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca68:	1c59      	adds	r1, r3, #1
 800ca6a:	9103      	str	r1, [sp, #12]
 800ca6c:	701a      	strb	r2, [r3, #0]
 800ca6e:	e7f0      	b.n	800ca52 <__cvt+0xa6>

0800ca70 <__exponent>:
 800ca70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca72:	4603      	mov	r3, r0
 800ca74:	2900      	cmp	r1, #0
 800ca76:	bfb8      	it	lt
 800ca78:	4249      	neglt	r1, r1
 800ca7a:	f803 2b02 	strb.w	r2, [r3], #2
 800ca7e:	bfb4      	ite	lt
 800ca80:	222d      	movlt	r2, #45	; 0x2d
 800ca82:	222b      	movge	r2, #43	; 0x2b
 800ca84:	2909      	cmp	r1, #9
 800ca86:	7042      	strb	r2, [r0, #1]
 800ca88:	dd2a      	ble.n	800cae0 <__exponent+0x70>
 800ca8a:	f10d 0407 	add.w	r4, sp, #7
 800ca8e:	46a4      	mov	ip, r4
 800ca90:	270a      	movs	r7, #10
 800ca92:	46a6      	mov	lr, r4
 800ca94:	460a      	mov	r2, r1
 800ca96:	fb91 f6f7 	sdiv	r6, r1, r7
 800ca9a:	fb07 1516 	mls	r5, r7, r6, r1
 800ca9e:	3530      	adds	r5, #48	; 0x30
 800caa0:	2a63      	cmp	r2, #99	; 0x63
 800caa2:	f104 34ff 	add.w	r4, r4, #4294967295
 800caa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800caaa:	4631      	mov	r1, r6
 800caac:	dcf1      	bgt.n	800ca92 <__exponent+0x22>
 800caae:	3130      	adds	r1, #48	; 0x30
 800cab0:	f1ae 0502 	sub.w	r5, lr, #2
 800cab4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cab8:	1c44      	adds	r4, r0, #1
 800caba:	4629      	mov	r1, r5
 800cabc:	4561      	cmp	r1, ip
 800cabe:	d30a      	bcc.n	800cad6 <__exponent+0x66>
 800cac0:	f10d 0209 	add.w	r2, sp, #9
 800cac4:	eba2 020e 	sub.w	r2, r2, lr
 800cac8:	4565      	cmp	r5, ip
 800caca:	bf88      	it	hi
 800cacc:	2200      	movhi	r2, #0
 800cace:	4413      	add	r3, r2
 800cad0:	1a18      	subs	r0, r3, r0
 800cad2:	b003      	add	sp, #12
 800cad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cada:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cade:	e7ed      	b.n	800cabc <__exponent+0x4c>
 800cae0:	2330      	movs	r3, #48	; 0x30
 800cae2:	3130      	adds	r1, #48	; 0x30
 800cae4:	7083      	strb	r3, [r0, #2]
 800cae6:	70c1      	strb	r1, [r0, #3]
 800cae8:	1d03      	adds	r3, r0, #4
 800caea:	e7f1      	b.n	800cad0 <__exponent+0x60>

0800caec <_printf_float>:
 800caec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf0:	ed2d 8b02 	vpush	{d8}
 800caf4:	b08d      	sub	sp, #52	; 0x34
 800caf6:	460c      	mov	r4, r1
 800caf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cafc:	4616      	mov	r6, r2
 800cafe:	461f      	mov	r7, r3
 800cb00:	4605      	mov	r5, r0
 800cb02:	f001 fa37 	bl	800df74 <_localeconv_r>
 800cb06:	f8d0 a000 	ldr.w	sl, [r0]
 800cb0a:	4650      	mov	r0, sl
 800cb0c:	f7f3 fb68 	bl	80001e0 <strlen>
 800cb10:	2300      	movs	r3, #0
 800cb12:	930a      	str	r3, [sp, #40]	; 0x28
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	9305      	str	r3, [sp, #20]
 800cb18:	f8d8 3000 	ldr.w	r3, [r8]
 800cb1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cb20:	3307      	adds	r3, #7
 800cb22:	f023 0307 	bic.w	r3, r3, #7
 800cb26:	f103 0208 	add.w	r2, r3, #8
 800cb2a:	f8c8 2000 	str.w	r2, [r8]
 800cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cb36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cb3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb3e:	9307      	str	r3, [sp, #28]
 800cb40:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb44:	ee08 0a10 	vmov	s16, r0
 800cb48:	4b9f      	ldr	r3, [pc, #636]	; (800cdc8 <_printf_float+0x2dc>)
 800cb4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb52:	f7f3 fff3 	bl	8000b3c <__aeabi_dcmpun>
 800cb56:	bb88      	cbnz	r0, 800cbbc <_printf_float+0xd0>
 800cb58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb5c:	4b9a      	ldr	r3, [pc, #616]	; (800cdc8 <_printf_float+0x2dc>)
 800cb5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb62:	f7f3 ffcd 	bl	8000b00 <__aeabi_dcmple>
 800cb66:	bb48      	cbnz	r0, 800cbbc <_printf_float+0xd0>
 800cb68:	2200      	movs	r2, #0
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4640      	mov	r0, r8
 800cb6e:	4649      	mov	r1, r9
 800cb70:	f7f3 ffbc 	bl	8000aec <__aeabi_dcmplt>
 800cb74:	b110      	cbz	r0, 800cb7c <_printf_float+0x90>
 800cb76:	232d      	movs	r3, #45	; 0x2d
 800cb78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb7c:	4b93      	ldr	r3, [pc, #588]	; (800cdcc <_printf_float+0x2e0>)
 800cb7e:	4894      	ldr	r0, [pc, #592]	; (800cdd0 <_printf_float+0x2e4>)
 800cb80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cb84:	bf94      	ite	ls
 800cb86:	4698      	movls	r8, r3
 800cb88:	4680      	movhi	r8, r0
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	6123      	str	r3, [r4, #16]
 800cb8e:	9b05      	ldr	r3, [sp, #20]
 800cb90:	f023 0204 	bic.w	r2, r3, #4
 800cb94:	6022      	str	r2, [r4, #0]
 800cb96:	f04f 0900 	mov.w	r9, #0
 800cb9a:	9700      	str	r7, [sp, #0]
 800cb9c:	4633      	mov	r3, r6
 800cb9e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cba0:	4621      	mov	r1, r4
 800cba2:	4628      	mov	r0, r5
 800cba4:	f000 f9d8 	bl	800cf58 <_printf_common>
 800cba8:	3001      	adds	r0, #1
 800cbaa:	f040 8090 	bne.w	800ccce <_printf_float+0x1e2>
 800cbae:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb2:	b00d      	add	sp, #52	; 0x34
 800cbb4:	ecbd 8b02 	vpop	{d8}
 800cbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbbc:	4642      	mov	r2, r8
 800cbbe:	464b      	mov	r3, r9
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	4649      	mov	r1, r9
 800cbc4:	f7f3 ffba 	bl	8000b3c <__aeabi_dcmpun>
 800cbc8:	b140      	cbz	r0, 800cbdc <_printf_float+0xf0>
 800cbca:	464b      	mov	r3, r9
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bfbc      	itt	lt
 800cbd0:	232d      	movlt	r3, #45	; 0x2d
 800cbd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cbd6:	487f      	ldr	r0, [pc, #508]	; (800cdd4 <_printf_float+0x2e8>)
 800cbd8:	4b7f      	ldr	r3, [pc, #508]	; (800cdd8 <_printf_float+0x2ec>)
 800cbda:	e7d1      	b.n	800cb80 <_printf_float+0x94>
 800cbdc:	6863      	ldr	r3, [r4, #4]
 800cbde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cbe2:	9206      	str	r2, [sp, #24]
 800cbe4:	1c5a      	adds	r2, r3, #1
 800cbe6:	d13f      	bne.n	800cc68 <_printf_float+0x17c>
 800cbe8:	2306      	movs	r3, #6
 800cbea:	6063      	str	r3, [r4, #4]
 800cbec:	9b05      	ldr	r3, [sp, #20]
 800cbee:	6861      	ldr	r1, [r4, #4]
 800cbf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	9303      	str	r3, [sp, #12]
 800cbf8:	ab0a      	add	r3, sp, #40	; 0x28
 800cbfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cbfe:	ab09      	add	r3, sp, #36	; 0x24
 800cc00:	ec49 8b10 	vmov	d0, r8, r9
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	6022      	str	r2, [r4, #0]
 800cc08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f7ff fecd 	bl	800c9ac <__cvt>
 800cc12:	9b06      	ldr	r3, [sp, #24]
 800cc14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc16:	2b47      	cmp	r3, #71	; 0x47
 800cc18:	4680      	mov	r8, r0
 800cc1a:	d108      	bne.n	800cc2e <_printf_float+0x142>
 800cc1c:	1cc8      	adds	r0, r1, #3
 800cc1e:	db02      	blt.n	800cc26 <_printf_float+0x13a>
 800cc20:	6863      	ldr	r3, [r4, #4]
 800cc22:	4299      	cmp	r1, r3
 800cc24:	dd41      	ble.n	800ccaa <_printf_float+0x1be>
 800cc26:	f1ab 0b02 	sub.w	fp, fp, #2
 800cc2a:	fa5f fb8b 	uxtb.w	fp, fp
 800cc2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc32:	d820      	bhi.n	800cc76 <_printf_float+0x18a>
 800cc34:	3901      	subs	r1, #1
 800cc36:	465a      	mov	r2, fp
 800cc38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cc3c:	9109      	str	r1, [sp, #36]	; 0x24
 800cc3e:	f7ff ff17 	bl	800ca70 <__exponent>
 800cc42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc44:	1813      	adds	r3, r2, r0
 800cc46:	2a01      	cmp	r2, #1
 800cc48:	4681      	mov	r9, r0
 800cc4a:	6123      	str	r3, [r4, #16]
 800cc4c:	dc02      	bgt.n	800cc54 <_printf_float+0x168>
 800cc4e:	6822      	ldr	r2, [r4, #0]
 800cc50:	07d2      	lsls	r2, r2, #31
 800cc52:	d501      	bpl.n	800cc58 <_printf_float+0x16c>
 800cc54:	3301      	adds	r3, #1
 800cc56:	6123      	str	r3, [r4, #16]
 800cc58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d09c      	beq.n	800cb9a <_printf_float+0xae>
 800cc60:	232d      	movs	r3, #45	; 0x2d
 800cc62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc66:	e798      	b.n	800cb9a <_printf_float+0xae>
 800cc68:	9a06      	ldr	r2, [sp, #24]
 800cc6a:	2a47      	cmp	r2, #71	; 0x47
 800cc6c:	d1be      	bne.n	800cbec <_printf_float+0x100>
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1bc      	bne.n	800cbec <_printf_float+0x100>
 800cc72:	2301      	movs	r3, #1
 800cc74:	e7b9      	b.n	800cbea <_printf_float+0xfe>
 800cc76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cc7a:	d118      	bne.n	800ccae <_printf_float+0x1c2>
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	6863      	ldr	r3, [r4, #4]
 800cc80:	dd0b      	ble.n	800cc9a <_printf_float+0x1ae>
 800cc82:	6121      	str	r1, [r4, #16]
 800cc84:	b913      	cbnz	r3, 800cc8c <_printf_float+0x1a0>
 800cc86:	6822      	ldr	r2, [r4, #0]
 800cc88:	07d0      	lsls	r0, r2, #31
 800cc8a:	d502      	bpl.n	800cc92 <_printf_float+0x1a6>
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	440b      	add	r3, r1
 800cc90:	6123      	str	r3, [r4, #16]
 800cc92:	65a1      	str	r1, [r4, #88]	; 0x58
 800cc94:	f04f 0900 	mov.w	r9, #0
 800cc98:	e7de      	b.n	800cc58 <_printf_float+0x16c>
 800cc9a:	b913      	cbnz	r3, 800cca2 <_printf_float+0x1b6>
 800cc9c:	6822      	ldr	r2, [r4, #0]
 800cc9e:	07d2      	lsls	r2, r2, #31
 800cca0:	d501      	bpl.n	800cca6 <_printf_float+0x1ba>
 800cca2:	3302      	adds	r3, #2
 800cca4:	e7f4      	b.n	800cc90 <_printf_float+0x1a4>
 800cca6:	2301      	movs	r3, #1
 800cca8:	e7f2      	b.n	800cc90 <_printf_float+0x1a4>
 800ccaa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ccae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb0:	4299      	cmp	r1, r3
 800ccb2:	db05      	blt.n	800ccc0 <_printf_float+0x1d4>
 800ccb4:	6823      	ldr	r3, [r4, #0]
 800ccb6:	6121      	str	r1, [r4, #16]
 800ccb8:	07d8      	lsls	r0, r3, #31
 800ccba:	d5ea      	bpl.n	800cc92 <_printf_float+0x1a6>
 800ccbc:	1c4b      	adds	r3, r1, #1
 800ccbe:	e7e7      	b.n	800cc90 <_printf_float+0x1a4>
 800ccc0:	2900      	cmp	r1, #0
 800ccc2:	bfd4      	ite	le
 800ccc4:	f1c1 0202 	rsble	r2, r1, #2
 800ccc8:	2201      	movgt	r2, #1
 800ccca:	4413      	add	r3, r2
 800cccc:	e7e0      	b.n	800cc90 <_printf_float+0x1a4>
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	055a      	lsls	r2, r3, #21
 800ccd2:	d407      	bmi.n	800cce4 <_printf_float+0x1f8>
 800ccd4:	6923      	ldr	r3, [r4, #16]
 800ccd6:	4642      	mov	r2, r8
 800ccd8:	4631      	mov	r1, r6
 800ccda:	4628      	mov	r0, r5
 800ccdc:	47b8      	blx	r7
 800ccde:	3001      	adds	r0, #1
 800cce0:	d12c      	bne.n	800cd3c <_printf_float+0x250>
 800cce2:	e764      	b.n	800cbae <_printf_float+0xc2>
 800cce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cce8:	f240 80e0 	bls.w	800ceac <_printf_float+0x3c0>
 800ccec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f7f3 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d034      	beq.n	800cd66 <_printf_float+0x27a>
 800ccfc:	4a37      	ldr	r2, [pc, #220]	; (800cddc <_printf_float+0x2f0>)
 800ccfe:	2301      	movs	r3, #1
 800cd00:	4631      	mov	r1, r6
 800cd02:	4628      	mov	r0, r5
 800cd04:	47b8      	blx	r7
 800cd06:	3001      	adds	r0, #1
 800cd08:	f43f af51 	beq.w	800cbae <_printf_float+0xc2>
 800cd0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd10:	429a      	cmp	r2, r3
 800cd12:	db02      	blt.n	800cd1a <_printf_float+0x22e>
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	07d8      	lsls	r0, r3, #31
 800cd18:	d510      	bpl.n	800cd3c <_printf_float+0x250>
 800cd1a:	ee18 3a10 	vmov	r3, s16
 800cd1e:	4652      	mov	r2, sl
 800cd20:	4631      	mov	r1, r6
 800cd22:	4628      	mov	r0, r5
 800cd24:	47b8      	blx	r7
 800cd26:	3001      	adds	r0, #1
 800cd28:	f43f af41 	beq.w	800cbae <_printf_float+0xc2>
 800cd2c:	f04f 0800 	mov.w	r8, #0
 800cd30:	f104 091a 	add.w	r9, r4, #26
 800cd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd36:	3b01      	subs	r3, #1
 800cd38:	4543      	cmp	r3, r8
 800cd3a:	dc09      	bgt.n	800cd50 <_printf_float+0x264>
 800cd3c:	6823      	ldr	r3, [r4, #0]
 800cd3e:	079b      	lsls	r3, r3, #30
 800cd40:	f100 8105 	bmi.w	800cf4e <_printf_float+0x462>
 800cd44:	68e0      	ldr	r0, [r4, #12]
 800cd46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd48:	4298      	cmp	r0, r3
 800cd4a:	bfb8      	it	lt
 800cd4c:	4618      	movlt	r0, r3
 800cd4e:	e730      	b.n	800cbb2 <_printf_float+0xc6>
 800cd50:	2301      	movs	r3, #1
 800cd52:	464a      	mov	r2, r9
 800cd54:	4631      	mov	r1, r6
 800cd56:	4628      	mov	r0, r5
 800cd58:	47b8      	blx	r7
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	f43f af27 	beq.w	800cbae <_printf_float+0xc2>
 800cd60:	f108 0801 	add.w	r8, r8, #1
 800cd64:	e7e6      	b.n	800cd34 <_printf_float+0x248>
 800cd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	dc39      	bgt.n	800cde0 <_printf_float+0x2f4>
 800cd6c:	4a1b      	ldr	r2, [pc, #108]	; (800cddc <_printf_float+0x2f0>)
 800cd6e:	2301      	movs	r3, #1
 800cd70:	4631      	mov	r1, r6
 800cd72:	4628      	mov	r0, r5
 800cd74:	47b8      	blx	r7
 800cd76:	3001      	adds	r0, #1
 800cd78:	f43f af19 	beq.w	800cbae <_printf_float+0xc2>
 800cd7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd80:	4313      	orrs	r3, r2
 800cd82:	d102      	bne.n	800cd8a <_printf_float+0x29e>
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	07d9      	lsls	r1, r3, #31
 800cd88:	d5d8      	bpl.n	800cd3c <_printf_float+0x250>
 800cd8a:	ee18 3a10 	vmov	r3, s16
 800cd8e:	4652      	mov	r2, sl
 800cd90:	4631      	mov	r1, r6
 800cd92:	4628      	mov	r0, r5
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	f43f af09 	beq.w	800cbae <_printf_float+0xc2>
 800cd9c:	f04f 0900 	mov.w	r9, #0
 800cda0:	f104 0a1a 	add.w	sl, r4, #26
 800cda4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cda6:	425b      	negs	r3, r3
 800cda8:	454b      	cmp	r3, r9
 800cdaa:	dc01      	bgt.n	800cdb0 <_printf_float+0x2c4>
 800cdac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdae:	e792      	b.n	800ccd6 <_printf_float+0x1ea>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	4652      	mov	r2, sl
 800cdb4:	4631      	mov	r1, r6
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	47b8      	blx	r7
 800cdba:	3001      	adds	r0, #1
 800cdbc:	f43f aef7 	beq.w	800cbae <_printf_float+0xc2>
 800cdc0:	f109 0901 	add.w	r9, r9, #1
 800cdc4:	e7ee      	b.n	800cda4 <_printf_float+0x2b8>
 800cdc6:	bf00      	nop
 800cdc8:	7fefffff 	.word	0x7fefffff
 800cdcc:	0800f478 	.word	0x0800f478
 800cdd0:	0800f47c 	.word	0x0800f47c
 800cdd4:	0800f484 	.word	0x0800f484
 800cdd8:	0800f480 	.word	0x0800f480
 800cddc:	0800f488 	.word	0x0800f488
 800cde0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cde2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cde4:	429a      	cmp	r2, r3
 800cde6:	bfa8      	it	ge
 800cde8:	461a      	movge	r2, r3
 800cdea:	2a00      	cmp	r2, #0
 800cdec:	4691      	mov	r9, r2
 800cdee:	dc37      	bgt.n	800ce60 <_printf_float+0x374>
 800cdf0:	f04f 0b00 	mov.w	fp, #0
 800cdf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cdf8:	f104 021a 	add.w	r2, r4, #26
 800cdfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdfe:	9305      	str	r3, [sp, #20]
 800ce00:	eba3 0309 	sub.w	r3, r3, r9
 800ce04:	455b      	cmp	r3, fp
 800ce06:	dc33      	bgt.n	800ce70 <_printf_float+0x384>
 800ce08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	db3b      	blt.n	800ce88 <_printf_float+0x39c>
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	07da      	lsls	r2, r3, #31
 800ce14:	d438      	bmi.n	800ce88 <_printf_float+0x39c>
 800ce16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce18:	9a05      	ldr	r2, [sp, #20]
 800ce1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce1c:	1a9a      	subs	r2, r3, r2
 800ce1e:	eba3 0901 	sub.w	r9, r3, r1
 800ce22:	4591      	cmp	r9, r2
 800ce24:	bfa8      	it	ge
 800ce26:	4691      	movge	r9, r2
 800ce28:	f1b9 0f00 	cmp.w	r9, #0
 800ce2c:	dc35      	bgt.n	800ce9a <_printf_float+0x3ae>
 800ce2e:	f04f 0800 	mov.w	r8, #0
 800ce32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce36:	f104 0a1a 	add.w	sl, r4, #26
 800ce3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce3e:	1a9b      	subs	r3, r3, r2
 800ce40:	eba3 0309 	sub.w	r3, r3, r9
 800ce44:	4543      	cmp	r3, r8
 800ce46:	f77f af79 	ble.w	800cd3c <_printf_float+0x250>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	4652      	mov	r2, sl
 800ce4e:	4631      	mov	r1, r6
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b8      	blx	r7
 800ce54:	3001      	adds	r0, #1
 800ce56:	f43f aeaa 	beq.w	800cbae <_printf_float+0xc2>
 800ce5a:	f108 0801 	add.w	r8, r8, #1
 800ce5e:	e7ec      	b.n	800ce3a <_printf_float+0x34e>
 800ce60:	4613      	mov	r3, r2
 800ce62:	4631      	mov	r1, r6
 800ce64:	4642      	mov	r2, r8
 800ce66:	4628      	mov	r0, r5
 800ce68:	47b8      	blx	r7
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	d1c0      	bne.n	800cdf0 <_printf_float+0x304>
 800ce6e:	e69e      	b.n	800cbae <_printf_float+0xc2>
 800ce70:	2301      	movs	r3, #1
 800ce72:	4631      	mov	r1, r6
 800ce74:	4628      	mov	r0, r5
 800ce76:	9205      	str	r2, [sp, #20]
 800ce78:	47b8      	blx	r7
 800ce7a:	3001      	adds	r0, #1
 800ce7c:	f43f ae97 	beq.w	800cbae <_printf_float+0xc2>
 800ce80:	9a05      	ldr	r2, [sp, #20]
 800ce82:	f10b 0b01 	add.w	fp, fp, #1
 800ce86:	e7b9      	b.n	800cdfc <_printf_float+0x310>
 800ce88:	ee18 3a10 	vmov	r3, s16
 800ce8c:	4652      	mov	r2, sl
 800ce8e:	4631      	mov	r1, r6
 800ce90:	4628      	mov	r0, r5
 800ce92:	47b8      	blx	r7
 800ce94:	3001      	adds	r0, #1
 800ce96:	d1be      	bne.n	800ce16 <_printf_float+0x32a>
 800ce98:	e689      	b.n	800cbae <_printf_float+0xc2>
 800ce9a:	9a05      	ldr	r2, [sp, #20]
 800ce9c:	464b      	mov	r3, r9
 800ce9e:	4442      	add	r2, r8
 800cea0:	4631      	mov	r1, r6
 800cea2:	4628      	mov	r0, r5
 800cea4:	47b8      	blx	r7
 800cea6:	3001      	adds	r0, #1
 800cea8:	d1c1      	bne.n	800ce2e <_printf_float+0x342>
 800ceaa:	e680      	b.n	800cbae <_printf_float+0xc2>
 800ceac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceae:	2a01      	cmp	r2, #1
 800ceb0:	dc01      	bgt.n	800ceb6 <_printf_float+0x3ca>
 800ceb2:	07db      	lsls	r3, r3, #31
 800ceb4:	d538      	bpl.n	800cf28 <_printf_float+0x43c>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	4642      	mov	r2, r8
 800ceba:	4631      	mov	r1, r6
 800cebc:	4628      	mov	r0, r5
 800cebe:	47b8      	blx	r7
 800cec0:	3001      	adds	r0, #1
 800cec2:	f43f ae74 	beq.w	800cbae <_printf_float+0xc2>
 800cec6:	ee18 3a10 	vmov	r3, s16
 800ceca:	4652      	mov	r2, sl
 800cecc:	4631      	mov	r1, r6
 800cece:	4628      	mov	r0, r5
 800ced0:	47b8      	blx	r7
 800ced2:	3001      	adds	r0, #1
 800ced4:	f43f ae6b 	beq.w	800cbae <_printf_float+0xc2>
 800ced8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cedc:	2200      	movs	r2, #0
 800cede:	2300      	movs	r3, #0
 800cee0:	f7f3 fdfa 	bl	8000ad8 <__aeabi_dcmpeq>
 800cee4:	b9d8      	cbnz	r0, 800cf1e <_printf_float+0x432>
 800cee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee8:	f108 0201 	add.w	r2, r8, #1
 800ceec:	3b01      	subs	r3, #1
 800ceee:	4631      	mov	r1, r6
 800cef0:	4628      	mov	r0, r5
 800cef2:	47b8      	blx	r7
 800cef4:	3001      	adds	r0, #1
 800cef6:	d10e      	bne.n	800cf16 <_printf_float+0x42a>
 800cef8:	e659      	b.n	800cbae <_printf_float+0xc2>
 800cefa:	2301      	movs	r3, #1
 800cefc:	4652      	mov	r2, sl
 800cefe:	4631      	mov	r1, r6
 800cf00:	4628      	mov	r0, r5
 800cf02:	47b8      	blx	r7
 800cf04:	3001      	adds	r0, #1
 800cf06:	f43f ae52 	beq.w	800cbae <_printf_float+0xc2>
 800cf0a:	f108 0801 	add.w	r8, r8, #1
 800cf0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf10:	3b01      	subs	r3, #1
 800cf12:	4543      	cmp	r3, r8
 800cf14:	dcf1      	bgt.n	800cefa <_printf_float+0x40e>
 800cf16:	464b      	mov	r3, r9
 800cf18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf1c:	e6dc      	b.n	800ccd8 <_printf_float+0x1ec>
 800cf1e:	f04f 0800 	mov.w	r8, #0
 800cf22:	f104 0a1a 	add.w	sl, r4, #26
 800cf26:	e7f2      	b.n	800cf0e <_printf_float+0x422>
 800cf28:	2301      	movs	r3, #1
 800cf2a:	4642      	mov	r2, r8
 800cf2c:	e7df      	b.n	800ceee <_printf_float+0x402>
 800cf2e:	2301      	movs	r3, #1
 800cf30:	464a      	mov	r2, r9
 800cf32:	4631      	mov	r1, r6
 800cf34:	4628      	mov	r0, r5
 800cf36:	47b8      	blx	r7
 800cf38:	3001      	adds	r0, #1
 800cf3a:	f43f ae38 	beq.w	800cbae <_printf_float+0xc2>
 800cf3e:	f108 0801 	add.w	r8, r8, #1
 800cf42:	68e3      	ldr	r3, [r4, #12]
 800cf44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf46:	1a5b      	subs	r3, r3, r1
 800cf48:	4543      	cmp	r3, r8
 800cf4a:	dcf0      	bgt.n	800cf2e <_printf_float+0x442>
 800cf4c:	e6fa      	b.n	800cd44 <_printf_float+0x258>
 800cf4e:	f04f 0800 	mov.w	r8, #0
 800cf52:	f104 0919 	add.w	r9, r4, #25
 800cf56:	e7f4      	b.n	800cf42 <_printf_float+0x456>

0800cf58 <_printf_common>:
 800cf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf5c:	4616      	mov	r6, r2
 800cf5e:	4699      	mov	r9, r3
 800cf60:	688a      	ldr	r2, [r1, #8]
 800cf62:	690b      	ldr	r3, [r1, #16]
 800cf64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	bfb8      	it	lt
 800cf6c:	4613      	movlt	r3, r2
 800cf6e:	6033      	str	r3, [r6, #0]
 800cf70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf74:	4607      	mov	r7, r0
 800cf76:	460c      	mov	r4, r1
 800cf78:	b10a      	cbz	r2, 800cf7e <_printf_common+0x26>
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	6033      	str	r3, [r6, #0]
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	0699      	lsls	r1, r3, #26
 800cf82:	bf42      	ittt	mi
 800cf84:	6833      	ldrmi	r3, [r6, #0]
 800cf86:	3302      	addmi	r3, #2
 800cf88:	6033      	strmi	r3, [r6, #0]
 800cf8a:	6825      	ldr	r5, [r4, #0]
 800cf8c:	f015 0506 	ands.w	r5, r5, #6
 800cf90:	d106      	bne.n	800cfa0 <_printf_common+0x48>
 800cf92:	f104 0a19 	add.w	sl, r4, #25
 800cf96:	68e3      	ldr	r3, [r4, #12]
 800cf98:	6832      	ldr	r2, [r6, #0]
 800cf9a:	1a9b      	subs	r3, r3, r2
 800cf9c:	42ab      	cmp	r3, r5
 800cf9e:	dc26      	bgt.n	800cfee <_printf_common+0x96>
 800cfa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfa4:	1e13      	subs	r3, r2, #0
 800cfa6:	6822      	ldr	r2, [r4, #0]
 800cfa8:	bf18      	it	ne
 800cfaa:	2301      	movne	r3, #1
 800cfac:	0692      	lsls	r2, r2, #26
 800cfae:	d42b      	bmi.n	800d008 <_printf_common+0xb0>
 800cfb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfb4:	4649      	mov	r1, r9
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	47c0      	blx	r8
 800cfba:	3001      	adds	r0, #1
 800cfbc:	d01e      	beq.n	800cffc <_printf_common+0xa4>
 800cfbe:	6823      	ldr	r3, [r4, #0]
 800cfc0:	68e5      	ldr	r5, [r4, #12]
 800cfc2:	6832      	ldr	r2, [r6, #0]
 800cfc4:	f003 0306 	and.w	r3, r3, #6
 800cfc8:	2b04      	cmp	r3, #4
 800cfca:	bf08      	it	eq
 800cfcc:	1aad      	subeq	r5, r5, r2
 800cfce:	68a3      	ldr	r3, [r4, #8]
 800cfd0:	6922      	ldr	r2, [r4, #16]
 800cfd2:	bf0c      	ite	eq
 800cfd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfd8:	2500      	movne	r5, #0
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	bfc4      	itt	gt
 800cfde:	1a9b      	subgt	r3, r3, r2
 800cfe0:	18ed      	addgt	r5, r5, r3
 800cfe2:	2600      	movs	r6, #0
 800cfe4:	341a      	adds	r4, #26
 800cfe6:	42b5      	cmp	r5, r6
 800cfe8:	d11a      	bne.n	800d020 <_printf_common+0xc8>
 800cfea:	2000      	movs	r0, #0
 800cfec:	e008      	b.n	800d000 <_printf_common+0xa8>
 800cfee:	2301      	movs	r3, #1
 800cff0:	4652      	mov	r2, sl
 800cff2:	4649      	mov	r1, r9
 800cff4:	4638      	mov	r0, r7
 800cff6:	47c0      	blx	r8
 800cff8:	3001      	adds	r0, #1
 800cffa:	d103      	bne.n	800d004 <_printf_common+0xac>
 800cffc:	f04f 30ff 	mov.w	r0, #4294967295
 800d000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d004:	3501      	adds	r5, #1
 800d006:	e7c6      	b.n	800cf96 <_printf_common+0x3e>
 800d008:	18e1      	adds	r1, r4, r3
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	2030      	movs	r0, #48	; 0x30
 800d00e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d012:	4422      	add	r2, r4
 800d014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d01c:	3302      	adds	r3, #2
 800d01e:	e7c7      	b.n	800cfb0 <_printf_common+0x58>
 800d020:	2301      	movs	r3, #1
 800d022:	4622      	mov	r2, r4
 800d024:	4649      	mov	r1, r9
 800d026:	4638      	mov	r0, r7
 800d028:	47c0      	blx	r8
 800d02a:	3001      	adds	r0, #1
 800d02c:	d0e6      	beq.n	800cffc <_printf_common+0xa4>
 800d02e:	3601      	adds	r6, #1
 800d030:	e7d9      	b.n	800cfe6 <_printf_common+0x8e>
	...

0800d034 <_printf_i>:
 800d034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d038:	7e0f      	ldrb	r7, [r1, #24]
 800d03a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d03c:	2f78      	cmp	r7, #120	; 0x78
 800d03e:	4691      	mov	r9, r2
 800d040:	4680      	mov	r8, r0
 800d042:	460c      	mov	r4, r1
 800d044:	469a      	mov	sl, r3
 800d046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d04a:	d807      	bhi.n	800d05c <_printf_i+0x28>
 800d04c:	2f62      	cmp	r7, #98	; 0x62
 800d04e:	d80a      	bhi.n	800d066 <_printf_i+0x32>
 800d050:	2f00      	cmp	r7, #0
 800d052:	f000 80d8 	beq.w	800d206 <_printf_i+0x1d2>
 800d056:	2f58      	cmp	r7, #88	; 0x58
 800d058:	f000 80a3 	beq.w	800d1a2 <_printf_i+0x16e>
 800d05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d064:	e03a      	b.n	800d0dc <_printf_i+0xa8>
 800d066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d06a:	2b15      	cmp	r3, #21
 800d06c:	d8f6      	bhi.n	800d05c <_printf_i+0x28>
 800d06e:	a101      	add	r1, pc, #4	; (adr r1, 800d074 <_printf_i+0x40>)
 800d070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d074:	0800d0cd 	.word	0x0800d0cd
 800d078:	0800d0e1 	.word	0x0800d0e1
 800d07c:	0800d05d 	.word	0x0800d05d
 800d080:	0800d05d 	.word	0x0800d05d
 800d084:	0800d05d 	.word	0x0800d05d
 800d088:	0800d05d 	.word	0x0800d05d
 800d08c:	0800d0e1 	.word	0x0800d0e1
 800d090:	0800d05d 	.word	0x0800d05d
 800d094:	0800d05d 	.word	0x0800d05d
 800d098:	0800d05d 	.word	0x0800d05d
 800d09c:	0800d05d 	.word	0x0800d05d
 800d0a0:	0800d1ed 	.word	0x0800d1ed
 800d0a4:	0800d111 	.word	0x0800d111
 800d0a8:	0800d1cf 	.word	0x0800d1cf
 800d0ac:	0800d05d 	.word	0x0800d05d
 800d0b0:	0800d05d 	.word	0x0800d05d
 800d0b4:	0800d20f 	.word	0x0800d20f
 800d0b8:	0800d05d 	.word	0x0800d05d
 800d0bc:	0800d111 	.word	0x0800d111
 800d0c0:	0800d05d 	.word	0x0800d05d
 800d0c4:	0800d05d 	.word	0x0800d05d
 800d0c8:	0800d1d7 	.word	0x0800d1d7
 800d0cc:	682b      	ldr	r3, [r5, #0]
 800d0ce:	1d1a      	adds	r2, r3, #4
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	602a      	str	r2, [r5, #0]
 800d0d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e0a3      	b.n	800d228 <_printf_i+0x1f4>
 800d0e0:	6820      	ldr	r0, [r4, #0]
 800d0e2:	6829      	ldr	r1, [r5, #0]
 800d0e4:	0606      	lsls	r6, r0, #24
 800d0e6:	f101 0304 	add.w	r3, r1, #4
 800d0ea:	d50a      	bpl.n	800d102 <_printf_i+0xce>
 800d0ec:	680e      	ldr	r6, [r1, #0]
 800d0ee:	602b      	str	r3, [r5, #0]
 800d0f0:	2e00      	cmp	r6, #0
 800d0f2:	da03      	bge.n	800d0fc <_printf_i+0xc8>
 800d0f4:	232d      	movs	r3, #45	; 0x2d
 800d0f6:	4276      	negs	r6, r6
 800d0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0fc:	485e      	ldr	r0, [pc, #376]	; (800d278 <_printf_i+0x244>)
 800d0fe:	230a      	movs	r3, #10
 800d100:	e019      	b.n	800d136 <_printf_i+0x102>
 800d102:	680e      	ldr	r6, [r1, #0]
 800d104:	602b      	str	r3, [r5, #0]
 800d106:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d10a:	bf18      	it	ne
 800d10c:	b236      	sxthne	r6, r6
 800d10e:	e7ef      	b.n	800d0f0 <_printf_i+0xbc>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	6820      	ldr	r0, [r4, #0]
 800d114:	1d19      	adds	r1, r3, #4
 800d116:	6029      	str	r1, [r5, #0]
 800d118:	0601      	lsls	r1, r0, #24
 800d11a:	d501      	bpl.n	800d120 <_printf_i+0xec>
 800d11c:	681e      	ldr	r6, [r3, #0]
 800d11e:	e002      	b.n	800d126 <_printf_i+0xf2>
 800d120:	0646      	lsls	r6, r0, #25
 800d122:	d5fb      	bpl.n	800d11c <_printf_i+0xe8>
 800d124:	881e      	ldrh	r6, [r3, #0]
 800d126:	4854      	ldr	r0, [pc, #336]	; (800d278 <_printf_i+0x244>)
 800d128:	2f6f      	cmp	r7, #111	; 0x6f
 800d12a:	bf0c      	ite	eq
 800d12c:	2308      	moveq	r3, #8
 800d12e:	230a      	movne	r3, #10
 800d130:	2100      	movs	r1, #0
 800d132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d136:	6865      	ldr	r5, [r4, #4]
 800d138:	60a5      	str	r5, [r4, #8]
 800d13a:	2d00      	cmp	r5, #0
 800d13c:	bfa2      	ittt	ge
 800d13e:	6821      	ldrge	r1, [r4, #0]
 800d140:	f021 0104 	bicge.w	r1, r1, #4
 800d144:	6021      	strge	r1, [r4, #0]
 800d146:	b90e      	cbnz	r6, 800d14c <_printf_i+0x118>
 800d148:	2d00      	cmp	r5, #0
 800d14a:	d04d      	beq.n	800d1e8 <_printf_i+0x1b4>
 800d14c:	4615      	mov	r5, r2
 800d14e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d152:	fb03 6711 	mls	r7, r3, r1, r6
 800d156:	5dc7      	ldrb	r7, [r0, r7]
 800d158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d15c:	4637      	mov	r7, r6
 800d15e:	42bb      	cmp	r3, r7
 800d160:	460e      	mov	r6, r1
 800d162:	d9f4      	bls.n	800d14e <_printf_i+0x11a>
 800d164:	2b08      	cmp	r3, #8
 800d166:	d10b      	bne.n	800d180 <_printf_i+0x14c>
 800d168:	6823      	ldr	r3, [r4, #0]
 800d16a:	07de      	lsls	r6, r3, #31
 800d16c:	d508      	bpl.n	800d180 <_printf_i+0x14c>
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	6861      	ldr	r1, [r4, #4]
 800d172:	4299      	cmp	r1, r3
 800d174:	bfde      	ittt	le
 800d176:	2330      	movle	r3, #48	; 0x30
 800d178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d17c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d180:	1b52      	subs	r2, r2, r5
 800d182:	6122      	str	r2, [r4, #16]
 800d184:	f8cd a000 	str.w	sl, [sp]
 800d188:	464b      	mov	r3, r9
 800d18a:	aa03      	add	r2, sp, #12
 800d18c:	4621      	mov	r1, r4
 800d18e:	4640      	mov	r0, r8
 800d190:	f7ff fee2 	bl	800cf58 <_printf_common>
 800d194:	3001      	adds	r0, #1
 800d196:	d14c      	bne.n	800d232 <_printf_i+0x1fe>
 800d198:	f04f 30ff 	mov.w	r0, #4294967295
 800d19c:	b004      	add	sp, #16
 800d19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a2:	4835      	ldr	r0, [pc, #212]	; (800d278 <_printf_i+0x244>)
 800d1a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d1a8:	6829      	ldr	r1, [r5, #0]
 800d1aa:	6823      	ldr	r3, [r4, #0]
 800d1ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1b0:	6029      	str	r1, [r5, #0]
 800d1b2:	061d      	lsls	r5, r3, #24
 800d1b4:	d514      	bpl.n	800d1e0 <_printf_i+0x1ac>
 800d1b6:	07df      	lsls	r7, r3, #31
 800d1b8:	bf44      	itt	mi
 800d1ba:	f043 0320 	orrmi.w	r3, r3, #32
 800d1be:	6023      	strmi	r3, [r4, #0]
 800d1c0:	b91e      	cbnz	r6, 800d1ca <_printf_i+0x196>
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	f023 0320 	bic.w	r3, r3, #32
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	2310      	movs	r3, #16
 800d1cc:	e7b0      	b.n	800d130 <_printf_i+0xfc>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	f043 0320 	orr.w	r3, r3, #32
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	2378      	movs	r3, #120	; 0x78
 800d1d8:	4828      	ldr	r0, [pc, #160]	; (800d27c <_printf_i+0x248>)
 800d1da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1de:	e7e3      	b.n	800d1a8 <_printf_i+0x174>
 800d1e0:	0659      	lsls	r1, r3, #25
 800d1e2:	bf48      	it	mi
 800d1e4:	b2b6      	uxthmi	r6, r6
 800d1e6:	e7e6      	b.n	800d1b6 <_printf_i+0x182>
 800d1e8:	4615      	mov	r5, r2
 800d1ea:	e7bb      	b.n	800d164 <_printf_i+0x130>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	6826      	ldr	r6, [r4, #0]
 800d1f0:	6961      	ldr	r1, [r4, #20]
 800d1f2:	1d18      	adds	r0, r3, #4
 800d1f4:	6028      	str	r0, [r5, #0]
 800d1f6:	0635      	lsls	r5, r6, #24
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	d501      	bpl.n	800d200 <_printf_i+0x1cc>
 800d1fc:	6019      	str	r1, [r3, #0]
 800d1fe:	e002      	b.n	800d206 <_printf_i+0x1d2>
 800d200:	0670      	lsls	r0, r6, #25
 800d202:	d5fb      	bpl.n	800d1fc <_printf_i+0x1c8>
 800d204:	8019      	strh	r1, [r3, #0]
 800d206:	2300      	movs	r3, #0
 800d208:	6123      	str	r3, [r4, #16]
 800d20a:	4615      	mov	r5, r2
 800d20c:	e7ba      	b.n	800d184 <_printf_i+0x150>
 800d20e:	682b      	ldr	r3, [r5, #0]
 800d210:	1d1a      	adds	r2, r3, #4
 800d212:	602a      	str	r2, [r5, #0]
 800d214:	681d      	ldr	r5, [r3, #0]
 800d216:	6862      	ldr	r2, [r4, #4]
 800d218:	2100      	movs	r1, #0
 800d21a:	4628      	mov	r0, r5
 800d21c:	f7f2 ffe8 	bl	80001f0 <memchr>
 800d220:	b108      	cbz	r0, 800d226 <_printf_i+0x1f2>
 800d222:	1b40      	subs	r0, r0, r5
 800d224:	6060      	str	r0, [r4, #4]
 800d226:	6863      	ldr	r3, [r4, #4]
 800d228:	6123      	str	r3, [r4, #16]
 800d22a:	2300      	movs	r3, #0
 800d22c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d230:	e7a8      	b.n	800d184 <_printf_i+0x150>
 800d232:	6923      	ldr	r3, [r4, #16]
 800d234:	462a      	mov	r2, r5
 800d236:	4649      	mov	r1, r9
 800d238:	4640      	mov	r0, r8
 800d23a:	47d0      	blx	sl
 800d23c:	3001      	adds	r0, #1
 800d23e:	d0ab      	beq.n	800d198 <_printf_i+0x164>
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	079b      	lsls	r3, r3, #30
 800d244:	d413      	bmi.n	800d26e <_printf_i+0x23a>
 800d246:	68e0      	ldr	r0, [r4, #12]
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	4298      	cmp	r0, r3
 800d24c:	bfb8      	it	lt
 800d24e:	4618      	movlt	r0, r3
 800d250:	e7a4      	b.n	800d19c <_printf_i+0x168>
 800d252:	2301      	movs	r3, #1
 800d254:	4632      	mov	r2, r6
 800d256:	4649      	mov	r1, r9
 800d258:	4640      	mov	r0, r8
 800d25a:	47d0      	blx	sl
 800d25c:	3001      	adds	r0, #1
 800d25e:	d09b      	beq.n	800d198 <_printf_i+0x164>
 800d260:	3501      	adds	r5, #1
 800d262:	68e3      	ldr	r3, [r4, #12]
 800d264:	9903      	ldr	r1, [sp, #12]
 800d266:	1a5b      	subs	r3, r3, r1
 800d268:	42ab      	cmp	r3, r5
 800d26a:	dcf2      	bgt.n	800d252 <_printf_i+0x21e>
 800d26c:	e7eb      	b.n	800d246 <_printf_i+0x212>
 800d26e:	2500      	movs	r5, #0
 800d270:	f104 0619 	add.w	r6, r4, #25
 800d274:	e7f5      	b.n	800d262 <_printf_i+0x22e>
 800d276:	bf00      	nop
 800d278:	0800f48a 	.word	0x0800f48a
 800d27c:	0800f49b 	.word	0x0800f49b

0800d280 <quorem>:
 800d280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d284:	6903      	ldr	r3, [r0, #16]
 800d286:	690c      	ldr	r4, [r1, #16]
 800d288:	42a3      	cmp	r3, r4
 800d28a:	4607      	mov	r7, r0
 800d28c:	f2c0 8081 	blt.w	800d392 <quorem+0x112>
 800d290:	3c01      	subs	r4, #1
 800d292:	f101 0814 	add.w	r8, r1, #20
 800d296:	f100 0514 	add.w	r5, r0, #20
 800d29a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2b8:	d331      	bcc.n	800d31e <quorem+0x9e>
 800d2ba:	f04f 0e00 	mov.w	lr, #0
 800d2be:	4640      	mov	r0, r8
 800d2c0:	46ac      	mov	ip, r5
 800d2c2:	46f2      	mov	sl, lr
 800d2c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2c8:	b293      	uxth	r3, r2
 800d2ca:	fb06 e303 	mla	r3, r6, r3, lr
 800d2ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	ebaa 0303 	sub.w	r3, sl, r3
 800d2d8:	f8dc a000 	ldr.w	sl, [ip]
 800d2dc:	0c12      	lsrs	r2, r2, #16
 800d2de:	fa13 f38a 	uxtah	r3, r3, sl
 800d2e2:	fb06 e202 	mla	r2, r6, r2, lr
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	9b00      	ldr	r3, [sp, #0]
 800d2ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2ee:	b292      	uxth	r2, r2
 800d2f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d2f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800d2fc:	4581      	cmp	r9, r0
 800d2fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d302:	f84c 3b04 	str.w	r3, [ip], #4
 800d306:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d30a:	d2db      	bcs.n	800d2c4 <quorem+0x44>
 800d30c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d310:	b92b      	cbnz	r3, 800d31e <quorem+0x9e>
 800d312:	9b01      	ldr	r3, [sp, #4]
 800d314:	3b04      	subs	r3, #4
 800d316:	429d      	cmp	r5, r3
 800d318:	461a      	mov	r2, r3
 800d31a:	d32e      	bcc.n	800d37a <quorem+0xfa>
 800d31c:	613c      	str	r4, [r7, #16]
 800d31e:	4638      	mov	r0, r7
 800d320:	f001 f8b6 	bl	800e490 <__mcmp>
 800d324:	2800      	cmp	r0, #0
 800d326:	db24      	blt.n	800d372 <quorem+0xf2>
 800d328:	3601      	adds	r6, #1
 800d32a:	4628      	mov	r0, r5
 800d32c:	f04f 0c00 	mov.w	ip, #0
 800d330:	f858 2b04 	ldr.w	r2, [r8], #4
 800d334:	f8d0 e000 	ldr.w	lr, [r0]
 800d338:	b293      	uxth	r3, r2
 800d33a:	ebac 0303 	sub.w	r3, ip, r3
 800d33e:	0c12      	lsrs	r2, r2, #16
 800d340:	fa13 f38e 	uxtah	r3, r3, lr
 800d344:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d352:	45c1      	cmp	r9, r8
 800d354:	f840 3b04 	str.w	r3, [r0], #4
 800d358:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d35c:	d2e8      	bcs.n	800d330 <quorem+0xb0>
 800d35e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d366:	b922      	cbnz	r2, 800d372 <quorem+0xf2>
 800d368:	3b04      	subs	r3, #4
 800d36a:	429d      	cmp	r5, r3
 800d36c:	461a      	mov	r2, r3
 800d36e:	d30a      	bcc.n	800d386 <quorem+0x106>
 800d370:	613c      	str	r4, [r7, #16]
 800d372:	4630      	mov	r0, r6
 800d374:	b003      	add	sp, #12
 800d376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37a:	6812      	ldr	r2, [r2, #0]
 800d37c:	3b04      	subs	r3, #4
 800d37e:	2a00      	cmp	r2, #0
 800d380:	d1cc      	bne.n	800d31c <quorem+0x9c>
 800d382:	3c01      	subs	r4, #1
 800d384:	e7c7      	b.n	800d316 <quorem+0x96>
 800d386:	6812      	ldr	r2, [r2, #0]
 800d388:	3b04      	subs	r3, #4
 800d38a:	2a00      	cmp	r2, #0
 800d38c:	d1f0      	bne.n	800d370 <quorem+0xf0>
 800d38e:	3c01      	subs	r4, #1
 800d390:	e7eb      	b.n	800d36a <quorem+0xea>
 800d392:	2000      	movs	r0, #0
 800d394:	e7ee      	b.n	800d374 <quorem+0xf4>
	...

0800d398 <_dtoa_r>:
 800d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	ed2d 8b04 	vpush	{d8-d9}
 800d3a0:	ec57 6b10 	vmov	r6, r7, d0
 800d3a4:	b093      	sub	sp, #76	; 0x4c
 800d3a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3ac:	9106      	str	r1, [sp, #24]
 800d3ae:	ee10 aa10 	vmov	sl, s0
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d3b6:	930c      	str	r3, [sp, #48]	; 0x30
 800d3b8:	46bb      	mov	fp, r7
 800d3ba:	b975      	cbnz	r5, 800d3da <_dtoa_r+0x42>
 800d3bc:	2010      	movs	r0, #16
 800d3be:	f000 fddd 	bl	800df7c <malloc>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	6260      	str	r0, [r4, #36]	; 0x24
 800d3c6:	b920      	cbnz	r0, 800d3d2 <_dtoa_r+0x3a>
 800d3c8:	4ba7      	ldr	r3, [pc, #668]	; (800d668 <_dtoa_r+0x2d0>)
 800d3ca:	21ea      	movs	r1, #234	; 0xea
 800d3cc:	48a7      	ldr	r0, [pc, #668]	; (800d66c <_dtoa_r+0x2d4>)
 800d3ce:	f001 fa67 	bl	800e8a0 <__assert_func>
 800d3d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3d6:	6005      	str	r5, [r0, #0]
 800d3d8:	60c5      	str	r5, [r0, #12]
 800d3da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3dc:	6819      	ldr	r1, [r3, #0]
 800d3de:	b151      	cbz	r1, 800d3f6 <_dtoa_r+0x5e>
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	604a      	str	r2, [r1, #4]
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	4093      	lsls	r3, r2
 800d3e8:	608b      	str	r3, [r1, #8]
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f000 fe0e 	bl	800e00c <_Bfree>
 800d3f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	1e3b      	subs	r3, r7, #0
 800d3f8:	bfaa      	itet	ge
 800d3fa:	2300      	movge	r3, #0
 800d3fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d400:	f8c8 3000 	strge.w	r3, [r8]
 800d404:	4b9a      	ldr	r3, [pc, #616]	; (800d670 <_dtoa_r+0x2d8>)
 800d406:	bfbc      	itt	lt
 800d408:	2201      	movlt	r2, #1
 800d40a:	f8c8 2000 	strlt.w	r2, [r8]
 800d40e:	ea33 030b 	bics.w	r3, r3, fp
 800d412:	d11b      	bne.n	800d44c <_dtoa_r+0xb4>
 800d414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d416:	f242 730f 	movw	r3, #9999	; 0x270f
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d420:	4333      	orrs	r3, r6
 800d422:	f000 8592 	beq.w	800df4a <_dtoa_r+0xbb2>
 800d426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d428:	b963      	cbnz	r3, 800d444 <_dtoa_r+0xac>
 800d42a:	4b92      	ldr	r3, [pc, #584]	; (800d674 <_dtoa_r+0x2dc>)
 800d42c:	e022      	b.n	800d474 <_dtoa_r+0xdc>
 800d42e:	4b92      	ldr	r3, [pc, #584]	; (800d678 <_dtoa_r+0x2e0>)
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	3308      	adds	r3, #8
 800d434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d436:	6013      	str	r3, [r2, #0]
 800d438:	9801      	ldr	r0, [sp, #4]
 800d43a:	b013      	add	sp, #76	; 0x4c
 800d43c:	ecbd 8b04 	vpop	{d8-d9}
 800d440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d444:	4b8b      	ldr	r3, [pc, #556]	; (800d674 <_dtoa_r+0x2dc>)
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	3303      	adds	r3, #3
 800d44a:	e7f3      	b.n	800d434 <_dtoa_r+0x9c>
 800d44c:	2200      	movs	r2, #0
 800d44e:	2300      	movs	r3, #0
 800d450:	4650      	mov	r0, sl
 800d452:	4659      	mov	r1, fp
 800d454:	f7f3 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 800d458:	ec4b ab19 	vmov	d9, sl, fp
 800d45c:	4680      	mov	r8, r0
 800d45e:	b158      	cbz	r0, 800d478 <_dtoa_r+0xe0>
 800d460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d462:	2301      	movs	r3, #1
 800d464:	6013      	str	r3, [r2, #0]
 800d466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f000 856b 	beq.w	800df44 <_dtoa_r+0xbac>
 800d46e:	4883      	ldr	r0, [pc, #524]	; (800d67c <_dtoa_r+0x2e4>)
 800d470:	6018      	str	r0, [r3, #0]
 800d472:	1e43      	subs	r3, r0, #1
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	e7df      	b.n	800d438 <_dtoa_r+0xa0>
 800d478:	ec4b ab10 	vmov	d0, sl, fp
 800d47c:	aa10      	add	r2, sp, #64	; 0x40
 800d47e:	a911      	add	r1, sp, #68	; 0x44
 800d480:	4620      	mov	r0, r4
 800d482:	f001 f8ab 	bl	800e5dc <__d2b>
 800d486:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d48a:	ee08 0a10 	vmov	s16, r0
 800d48e:	2d00      	cmp	r5, #0
 800d490:	f000 8084 	beq.w	800d59c <_dtoa_r+0x204>
 800d494:	ee19 3a90 	vmov	r3, s19
 800d498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d49c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d4a0:	4656      	mov	r6, sl
 800d4a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d4a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d4ae:	4b74      	ldr	r3, [pc, #464]	; (800d680 <_dtoa_r+0x2e8>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	4639      	mov	r1, r7
 800d4b6:	f7f2 feef 	bl	8000298 <__aeabi_dsub>
 800d4ba:	a365      	add	r3, pc, #404	; (adr r3, 800d650 <_dtoa_r+0x2b8>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	f7f3 f8a2 	bl	8000608 <__aeabi_dmul>
 800d4c4:	a364      	add	r3, pc, #400	; (adr r3, 800d658 <_dtoa_r+0x2c0>)
 800d4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ca:	f7f2 fee7 	bl	800029c <__adddf3>
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	460f      	mov	r7, r1
 800d4d4:	f7f3 f82e 	bl	8000534 <__aeabi_i2d>
 800d4d8:	a361      	add	r3, pc, #388	; (adr r3, 800d660 <_dtoa_r+0x2c8>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	f7f3 f893 	bl	8000608 <__aeabi_dmul>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	f7f2 fed7 	bl	800029c <__adddf3>
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	460f      	mov	r7, r1
 800d4f2:	f7f3 fb39 	bl	8000b68 <__aeabi_d2iz>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	9000      	str	r0, [sp, #0]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	4639      	mov	r1, r7
 800d500:	f7f3 faf4 	bl	8000aec <__aeabi_dcmplt>
 800d504:	b150      	cbz	r0, 800d51c <_dtoa_r+0x184>
 800d506:	9800      	ldr	r0, [sp, #0]
 800d508:	f7f3 f814 	bl	8000534 <__aeabi_i2d>
 800d50c:	4632      	mov	r2, r6
 800d50e:	463b      	mov	r3, r7
 800d510:	f7f3 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d514:	b910      	cbnz	r0, 800d51c <_dtoa_r+0x184>
 800d516:	9b00      	ldr	r3, [sp, #0]
 800d518:	3b01      	subs	r3, #1
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	9b00      	ldr	r3, [sp, #0]
 800d51e:	2b16      	cmp	r3, #22
 800d520:	d85a      	bhi.n	800d5d8 <_dtoa_r+0x240>
 800d522:	9a00      	ldr	r2, [sp, #0]
 800d524:	4b57      	ldr	r3, [pc, #348]	; (800d684 <_dtoa_r+0x2ec>)
 800d526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	ec51 0b19 	vmov	r0, r1, d9
 800d532:	f7f3 fadb 	bl	8000aec <__aeabi_dcmplt>
 800d536:	2800      	cmp	r0, #0
 800d538:	d050      	beq.n	800d5dc <_dtoa_r+0x244>
 800d53a:	9b00      	ldr	r3, [sp, #0]
 800d53c:	3b01      	subs	r3, #1
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	2300      	movs	r3, #0
 800d542:	930b      	str	r3, [sp, #44]	; 0x2c
 800d544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d546:	1b5d      	subs	r5, r3, r5
 800d548:	1e6b      	subs	r3, r5, #1
 800d54a:	9305      	str	r3, [sp, #20]
 800d54c:	bf45      	ittet	mi
 800d54e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d552:	9304      	strmi	r3, [sp, #16]
 800d554:	2300      	movpl	r3, #0
 800d556:	2300      	movmi	r3, #0
 800d558:	bf4c      	ite	mi
 800d55a:	9305      	strmi	r3, [sp, #20]
 800d55c:	9304      	strpl	r3, [sp, #16]
 800d55e:	9b00      	ldr	r3, [sp, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	db3d      	blt.n	800d5e0 <_dtoa_r+0x248>
 800d564:	9b05      	ldr	r3, [sp, #20]
 800d566:	9a00      	ldr	r2, [sp, #0]
 800d568:	920a      	str	r2, [sp, #40]	; 0x28
 800d56a:	4413      	add	r3, r2
 800d56c:	9305      	str	r3, [sp, #20]
 800d56e:	2300      	movs	r3, #0
 800d570:	9307      	str	r3, [sp, #28]
 800d572:	9b06      	ldr	r3, [sp, #24]
 800d574:	2b09      	cmp	r3, #9
 800d576:	f200 8089 	bhi.w	800d68c <_dtoa_r+0x2f4>
 800d57a:	2b05      	cmp	r3, #5
 800d57c:	bfc4      	itt	gt
 800d57e:	3b04      	subgt	r3, #4
 800d580:	9306      	strgt	r3, [sp, #24]
 800d582:	9b06      	ldr	r3, [sp, #24]
 800d584:	f1a3 0302 	sub.w	r3, r3, #2
 800d588:	bfcc      	ite	gt
 800d58a:	2500      	movgt	r5, #0
 800d58c:	2501      	movle	r5, #1
 800d58e:	2b03      	cmp	r3, #3
 800d590:	f200 8087 	bhi.w	800d6a2 <_dtoa_r+0x30a>
 800d594:	e8df f003 	tbb	[pc, r3]
 800d598:	59383a2d 	.word	0x59383a2d
 800d59c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d5a0:	441d      	add	r5, r3
 800d5a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d5a6:	2b20      	cmp	r3, #32
 800d5a8:	bfc1      	itttt	gt
 800d5aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d5b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d5b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d5ba:	bfda      	itte	le
 800d5bc:	f1c3 0320 	rsble	r3, r3, #32
 800d5c0:	fa06 f003 	lslle.w	r0, r6, r3
 800d5c4:	4318      	orrgt	r0, r3
 800d5c6:	f7f2 ffa5 	bl	8000514 <__aeabi_ui2d>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	4606      	mov	r6, r0
 800d5ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d5d2:	3d01      	subs	r5, #1
 800d5d4:	930e      	str	r3, [sp, #56]	; 0x38
 800d5d6:	e76a      	b.n	800d4ae <_dtoa_r+0x116>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e7b2      	b.n	800d542 <_dtoa_r+0x1aa>
 800d5dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5de:	e7b1      	b.n	800d544 <_dtoa_r+0x1ac>
 800d5e0:	9b04      	ldr	r3, [sp, #16]
 800d5e2:	9a00      	ldr	r2, [sp, #0]
 800d5e4:	1a9b      	subs	r3, r3, r2
 800d5e6:	9304      	str	r3, [sp, #16]
 800d5e8:	4253      	negs	r3, r2
 800d5ea:	9307      	str	r3, [sp, #28]
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d5f0:	e7bf      	b.n	800d572 <_dtoa_r+0x1da>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9308      	str	r3, [sp, #32]
 800d5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dc55      	bgt.n	800d6a8 <_dtoa_r+0x310>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d602:	461a      	mov	r2, r3
 800d604:	9209      	str	r2, [sp, #36]	; 0x24
 800d606:	e00c      	b.n	800d622 <_dtoa_r+0x28a>
 800d608:	2301      	movs	r3, #1
 800d60a:	e7f3      	b.n	800d5f4 <_dtoa_r+0x25c>
 800d60c:	2300      	movs	r3, #0
 800d60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d610:	9308      	str	r3, [sp, #32]
 800d612:	9b00      	ldr	r3, [sp, #0]
 800d614:	4413      	add	r3, r2
 800d616:	9302      	str	r3, [sp, #8]
 800d618:	3301      	adds	r3, #1
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	9303      	str	r3, [sp, #12]
 800d61e:	bfb8      	it	lt
 800d620:	2301      	movlt	r3, #1
 800d622:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d624:	2200      	movs	r2, #0
 800d626:	6042      	str	r2, [r0, #4]
 800d628:	2204      	movs	r2, #4
 800d62a:	f102 0614 	add.w	r6, r2, #20
 800d62e:	429e      	cmp	r6, r3
 800d630:	6841      	ldr	r1, [r0, #4]
 800d632:	d93d      	bls.n	800d6b0 <_dtoa_r+0x318>
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fca9 	bl	800df8c <_Balloc>
 800d63a:	9001      	str	r0, [sp, #4]
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d13b      	bne.n	800d6b8 <_dtoa_r+0x320>
 800d640:	4b11      	ldr	r3, [pc, #68]	; (800d688 <_dtoa_r+0x2f0>)
 800d642:	4602      	mov	r2, r0
 800d644:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d648:	e6c0      	b.n	800d3cc <_dtoa_r+0x34>
 800d64a:	2301      	movs	r3, #1
 800d64c:	e7df      	b.n	800d60e <_dtoa_r+0x276>
 800d64e:	bf00      	nop
 800d650:	636f4361 	.word	0x636f4361
 800d654:	3fd287a7 	.word	0x3fd287a7
 800d658:	8b60c8b3 	.word	0x8b60c8b3
 800d65c:	3fc68a28 	.word	0x3fc68a28
 800d660:	509f79fb 	.word	0x509f79fb
 800d664:	3fd34413 	.word	0x3fd34413
 800d668:	0800f4b9 	.word	0x0800f4b9
 800d66c:	0800f4d0 	.word	0x0800f4d0
 800d670:	7ff00000 	.word	0x7ff00000
 800d674:	0800f4b5 	.word	0x0800f4b5
 800d678:	0800f4ac 	.word	0x0800f4ac
 800d67c:	0800f489 	.word	0x0800f489
 800d680:	3ff80000 	.word	0x3ff80000
 800d684:	0800f5c0 	.word	0x0800f5c0
 800d688:	0800f52b 	.word	0x0800f52b
 800d68c:	2501      	movs	r5, #1
 800d68e:	2300      	movs	r3, #0
 800d690:	9306      	str	r3, [sp, #24]
 800d692:	9508      	str	r5, [sp, #32]
 800d694:	f04f 33ff 	mov.w	r3, #4294967295
 800d698:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d69c:	2200      	movs	r2, #0
 800d69e:	2312      	movs	r3, #18
 800d6a0:	e7b0      	b.n	800d604 <_dtoa_r+0x26c>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	9308      	str	r3, [sp, #32]
 800d6a6:	e7f5      	b.n	800d694 <_dtoa_r+0x2fc>
 800d6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6ae:	e7b8      	b.n	800d622 <_dtoa_r+0x28a>
 800d6b0:	3101      	adds	r1, #1
 800d6b2:	6041      	str	r1, [r0, #4]
 800d6b4:	0052      	lsls	r2, r2, #1
 800d6b6:	e7b8      	b.n	800d62a <_dtoa_r+0x292>
 800d6b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ba:	9a01      	ldr	r2, [sp, #4]
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	2b0e      	cmp	r3, #14
 800d6c2:	f200 809d 	bhi.w	800d800 <_dtoa_r+0x468>
 800d6c6:	2d00      	cmp	r5, #0
 800d6c8:	f000 809a 	beq.w	800d800 <_dtoa_r+0x468>
 800d6cc:	9b00      	ldr	r3, [sp, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	dd32      	ble.n	800d738 <_dtoa_r+0x3a0>
 800d6d2:	4ab7      	ldr	r2, [pc, #732]	; (800d9b0 <_dtoa_r+0x618>)
 800d6d4:	f003 030f 	and.w	r3, r3, #15
 800d6d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d6dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6e0:	9b00      	ldr	r3, [sp, #0]
 800d6e2:	05d8      	lsls	r0, r3, #23
 800d6e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d6e8:	d516      	bpl.n	800d718 <_dtoa_r+0x380>
 800d6ea:	4bb2      	ldr	r3, [pc, #712]	; (800d9b4 <_dtoa_r+0x61c>)
 800d6ec:	ec51 0b19 	vmov	r0, r1, d9
 800d6f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6f4:	f7f3 f8b2 	bl	800085c <__aeabi_ddiv>
 800d6f8:	f007 070f 	and.w	r7, r7, #15
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	468b      	mov	fp, r1
 800d700:	2503      	movs	r5, #3
 800d702:	4eac      	ldr	r6, [pc, #688]	; (800d9b4 <_dtoa_r+0x61c>)
 800d704:	b957      	cbnz	r7, 800d71c <_dtoa_r+0x384>
 800d706:	4642      	mov	r2, r8
 800d708:	464b      	mov	r3, r9
 800d70a:	4650      	mov	r0, sl
 800d70c:	4659      	mov	r1, fp
 800d70e:	f7f3 f8a5 	bl	800085c <__aeabi_ddiv>
 800d712:	4682      	mov	sl, r0
 800d714:	468b      	mov	fp, r1
 800d716:	e028      	b.n	800d76a <_dtoa_r+0x3d2>
 800d718:	2502      	movs	r5, #2
 800d71a:	e7f2      	b.n	800d702 <_dtoa_r+0x36a>
 800d71c:	07f9      	lsls	r1, r7, #31
 800d71e:	d508      	bpl.n	800d732 <_dtoa_r+0x39a>
 800d720:	4640      	mov	r0, r8
 800d722:	4649      	mov	r1, r9
 800d724:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d728:	f7f2 ff6e 	bl	8000608 <__aeabi_dmul>
 800d72c:	3501      	adds	r5, #1
 800d72e:	4680      	mov	r8, r0
 800d730:	4689      	mov	r9, r1
 800d732:	107f      	asrs	r7, r7, #1
 800d734:	3608      	adds	r6, #8
 800d736:	e7e5      	b.n	800d704 <_dtoa_r+0x36c>
 800d738:	f000 809b 	beq.w	800d872 <_dtoa_r+0x4da>
 800d73c:	9b00      	ldr	r3, [sp, #0]
 800d73e:	4f9d      	ldr	r7, [pc, #628]	; (800d9b4 <_dtoa_r+0x61c>)
 800d740:	425e      	negs	r6, r3
 800d742:	4b9b      	ldr	r3, [pc, #620]	; (800d9b0 <_dtoa_r+0x618>)
 800d744:	f006 020f 	and.w	r2, r6, #15
 800d748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d750:	ec51 0b19 	vmov	r0, r1, d9
 800d754:	f7f2 ff58 	bl	8000608 <__aeabi_dmul>
 800d758:	1136      	asrs	r6, r6, #4
 800d75a:	4682      	mov	sl, r0
 800d75c:	468b      	mov	fp, r1
 800d75e:	2300      	movs	r3, #0
 800d760:	2502      	movs	r5, #2
 800d762:	2e00      	cmp	r6, #0
 800d764:	d17a      	bne.n	800d85c <_dtoa_r+0x4c4>
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1d3      	bne.n	800d712 <_dtoa_r+0x37a>
 800d76a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f000 8082 	beq.w	800d876 <_dtoa_r+0x4de>
 800d772:	4b91      	ldr	r3, [pc, #580]	; (800d9b8 <_dtoa_r+0x620>)
 800d774:	2200      	movs	r2, #0
 800d776:	4650      	mov	r0, sl
 800d778:	4659      	mov	r1, fp
 800d77a:	f7f3 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d079      	beq.n	800d876 <_dtoa_r+0x4de>
 800d782:	9b03      	ldr	r3, [sp, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d076      	beq.n	800d876 <_dtoa_r+0x4de>
 800d788:	9b02      	ldr	r3, [sp, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	dd36      	ble.n	800d7fc <_dtoa_r+0x464>
 800d78e:	9b00      	ldr	r3, [sp, #0]
 800d790:	4650      	mov	r0, sl
 800d792:	4659      	mov	r1, fp
 800d794:	1e5f      	subs	r7, r3, #1
 800d796:	2200      	movs	r2, #0
 800d798:	4b88      	ldr	r3, [pc, #544]	; (800d9bc <_dtoa_r+0x624>)
 800d79a:	f7f2 ff35 	bl	8000608 <__aeabi_dmul>
 800d79e:	9e02      	ldr	r6, [sp, #8]
 800d7a0:	4682      	mov	sl, r0
 800d7a2:	468b      	mov	fp, r1
 800d7a4:	3501      	adds	r5, #1
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f7f2 fec4 	bl	8000534 <__aeabi_i2d>
 800d7ac:	4652      	mov	r2, sl
 800d7ae:	465b      	mov	r3, fp
 800d7b0:	f7f2 ff2a 	bl	8000608 <__aeabi_dmul>
 800d7b4:	4b82      	ldr	r3, [pc, #520]	; (800d9c0 <_dtoa_r+0x628>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f7f2 fd70 	bl	800029c <__adddf3>
 800d7bc:	46d0      	mov	r8, sl
 800d7be:	46d9      	mov	r9, fp
 800d7c0:	4682      	mov	sl, r0
 800d7c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d7c6:	2e00      	cmp	r6, #0
 800d7c8:	d158      	bne.n	800d87c <_dtoa_r+0x4e4>
 800d7ca:	4b7e      	ldr	r3, [pc, #504]	; (800d9c4 <_dtoa_r+0x62c>)
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4640      	mov	r0, r8
 800d7d0:	4649      	mov	r1, r9
 800d7d2:	f7f2 fd61 	bl	8000298 <__aeabi_dsub>
 800d7d6:	4652      	mov	r2, sl
 800d7d8:	465b      	mov	r3, fp
 800d7da:	4680      	mov	r8, r0
 800d7dc:	4689      	mov	r9, r1
 800d7de:	f7f3 f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	f040 8295 	bne.w	800dd12 <_dtoa_r+0x97a>
 800d7e8:	4652      	mov	r2, sl
 800d7ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d7ee:	4640      	mov	r0, r8
 800d7f0:	4649      	mov	r1, r9
 800d7f2:	f7f3 f97b 	bl	8000aec <__aeabi_dcmplt>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f040 8289 	bne.w	800dd0e <_dtoa_r+0x976>
 800d7fc:	ec5b ab19 	vmov	sl, fp, d9
 800d800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d802:	2b00      	cmp	r3, #0
 800d804:	f2c0 8148 	blt.w	800da98 <_dtoa_r+0x700>
 800d808:	9a00      	ldr	r2, [sp, #0]
 800d80a:	2a0e      	cmp	r2, #14
 800d80c:	f300 8144 	bgt.w	800da98 <_dtoa_r+0x700>
 800d810:	4b67      	ldr	r3, [pc, #412]	; (800d9b0 <_dtoa_r+0x618>)
 800d812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f280 80d5 	bge.w	800d9cc <_dtoa_r+0x634>
 800d822:	9b03      	ldr	r3, [sp, #12]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f300 80d1 	bgt.w	800d9cc <_dtoa_r+0x634>
 800d82a:	f040 826f 	bne.w	800dd0c <_dtoa_r+0x974>
 800d82e:	4b65      	ldr	r3, [pc, #404]	; (800d9c4 <_dtoa_r+0x62c>)
 800d830:	2200      	movs	r2, #0
 800d832:	4640      	mov	r0, r8
 800d834:	4649      	mov	r1, r9
 800d836:	f7f2 fee7 	bl	8000608 <__aeabi_dmul>
 800d83a:	4652      	mov	r2, sl
 800d83c:	465b      	mov	r3, fp
 800d83e:	f7f3 f969 	bl	8000b14 <__aeabi_dcmpge>
 800d842:	9e03      	ldr	r6, [sp, #12]
 800d844:	4637      	mov	r7, r6
 800d846:	2800      	cmp	r0, #0
 800d848:	f040 8245 	bne.w	800dcd6 <_dtoa_r+0x93e>
 800d84c:	9d01      	ldr	r5, [sp, #4]
 800d84e:	2331      	movs	r3, #49	; 0x31
 800d850:	f805 3b01 	strb.w	r3, [r5], #1
 800d854:	9b00      	ldr	r3, [sp, #0]
 800d856:	3301      	adds	r3, #1
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	e240      	b.n	800dcde <_dtoa_r+0x946>
 800d85c:	07f2      	lsls	r2, r6, #31
 800d85e:	d505      	bpl.n	800d86c <_dtoa_r+0x4d4>
 800d860:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d864:	f7f2 fed0 	bl	8000608 <__aeabi_dmul>
 800d868:	3501      	adds	r5, #1
 800d86a:	2301      	movs	r3, #1
 800d86c:	1076      	asrs	r6, r6, #1
 800d86e:	3708      	adds	r7, #8
 800d870:	e777      	b.n	800d762 <_dtoa_r+0x3ca>
 800d872:	2502      	movs	r5, #2
 800d874:	e779      	b.n	800d76a <_dtoa_r+0x3d2>
 800d876:	9f00      	ldr	r7, [sp, #0]
 800d878:	9e03      	ldr	r6, [sp, #12]
 800d87a:	e794      	b.n	800d7a6 <_dtoa_r+0x40e>
 800d87c:	9901      	ldr	r1, [sp, #4]
 800d87e:	4b4c      	ldr	r3, [pc, #304]	; (800d9b0 <_dtoa_r+0x618>)
 800d880:	4431      	add	r1, r6
 800d882:	910d      	str	r1, [sp, #52]	; 0x34
 800d884:	9908      	ldr	r1, [sp, #32]
 800d886:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d88a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d88e:	2900      	cmp	r1, #0
 800d890:	d043      	beq.n	800d91a <_dtoa_r+0x582>
 800d892:	494d      	ldr	r1, [pc, #308]	; (800d9c8 <_dtoa_r+0x630>)
 800d894:	2000      	movs	r0, #0
 800d896:	f7f2 ffe1 	bl	800085c <__aeabi_ddiv>
 800d89a:	4652      	mov	r2, sl
 800d89c:	465b      	mov	r3, fp
 800d89e:	f7f2 fcfb 	bl	8000298 <__aeabi_dsub>
 800d8a2:	9d01      	ldr	r5, [sp, #4]
 800d8a4:	4682      	mov	sl, r0
 800d8a6:	468b      	mov	fp, r1
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	f7f3 f95c 	bl	8000b68 <__aeabi_d2iz>
 800d8b0:	4606      	mov	r6, r0
 800d8b2:	f7f2 fe3f 	bl	8000534 <__aeabi_i2d>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	4649      	mov	r1, r9
 800d8be:	f7f2 fceb 	bl	8000298 <__aeabi_dsub>
 800d8c2:	3630      	adds	r6, #48	; 0x30
 800d8c4:	f805 6b01 	strb.w	r6, [r5], #1
 800d8c8:	4652      	mov	r2, sl
 800d8ca:	465b      	mov	r3, fp
 800d8cc:	4680      	mov	r8, r0
 800d8ce:	4689      	mov	r9, r1
 800d8d0:	f7f3 f90c 	bl	8000aec <__aeabi_dcmplt>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d163      	bne.n	800d9a0 <_dtoa_r+0x608>
 800d8d8:	4642      	mov	r2, r8
 800d8da:	464b      	mov	r3, r9
 800d8dc:	4936      	ldr	r1, [pc, #216]	; (800d9b8 <_dtoa_r+0x620>)
 800d8de:	2000      	movs	r0, #0
 800d8e0:	f7f2 fcda 	bl	8000298 <__aeabi_dsub>
 800d8e4:	4652      	mov	r2, sl
 800d8e6:	465b      	mov	r3, fp
 800d8e8:	f7f3 f900 	bl	8000aec <__aeabi_dcmplt>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	f040 80b5 	bne.w	800da5c <_dtoa_r+0x6c4>
 800d8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8f4:	429d      	cmp	r5, r3
 800d8f6:	d081      	beq.n	800d7fc <_dtoa_r+0x464>
 800d8f8:	4b30      	ldr	r3, [pc, #192]	; (800d9bc <_dtoa_r+0x624>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	4650      	mov	r0, sl
 800d8fe:	4659      	mov	r1, fp
 800d900:	f7f2 fe82 	bl	8000608 <__aeabi_dmul>
 800d904:	4b2d      	ldr	r3, [pc, #180]	; (800d9bc <_dtoa_r+0x624>)
 800d906:	4682      	mov	sl, r0
 800d908:	468b      	mov	fp, r1
 800d90a:	4640      	mov	r0, r8
 800d90c:	4649      	mov	r1, r9
 800d90e:	2200      	movs	r2, #0
 800d910:	f7f2 fe7a 	bl	8000608 <__aeabi_dmul>
 800d914:	4680      	mov	r8, r0
 800d916:	4689      	mov	r9, r1
 800d918:	e7c6      	b.n	800d8a8 <_dtoa_r+0x510>
 800d91a:	4650      	mov	r0, sl
 800d91c:	4659      	mov	r1, fp
 800d91e:	f7f2 fe73 	bl	8000608 <__aeabi_dmul>
 800d922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d924:	9d01      	ldr	r5, [sp, #4]
 800d926:	930f      	str	r3, [sp, #60]	; 0x3c
 800d928:	4682      	mov	sl, r0
 800d92a:	468b      	mov	fp, r1
 800d92c:	4649      	mov	r1, r9
 800d92e:	4640      	mov	r0, r8
 800d930:	f7f3 f91a 	bl	8000b68 <__aeabi_d2iz>
 800d934:	4606      	mov	r6, r0
 800d936:	f7f2 fdfd 	bl	8000534 <__aeabi_i2d>
 800d93a:	3630      	adds	r6, #48	; 0x30
 800d93c:	4602      	mov	r2, r0
 800d93e:	460b      	mov	r3, r1
 800d940:	4640      	mov	r0, r8
 800d942:	4649      	mov	r1, r9
 800d944:	f7f2 fca8 	bl	8000298 <__aeabi_dsub>
 800d948:	f805 6b01 	strb.w	r6, [r5], #1
 800d94c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d94e:	429d      	cmp	r5, r3
 800d950:	4680      	mov	r8, r0
 800d952:	4689      	mov	r9, r1
 800d954:	f04f 0200 	mov.w	r2, #0
 800d958:	d124      	bne.n	800d9a4 <_dtoa_r+0x60c>
 800d95a:	4b1b      	ldr	r3, [pc, #108]	; (800d9c8 <_dtoa_r+0x630>)
 800d95c:	4650      	mov	r0, sl
 800d95e:	4659      	mov	r1, fp
 800d960:	f7f2 fc9c 	bl	800029c <__adddf3>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	4640      	mov	r0, r8
 800d96a:	4649      	mov	r1, r9
 800d96c:	f7f3 f8dc 	bl	8000b28 <__aeabi_dcmpgt>
 800d970:	2800      	cmp	r0, #0
 800d972:	d173      	bne.n	800da5c <_dtoa_r+0x6c4>
 800d974:	4652      	mov	r2, sl
 800d976:	465b      	mov	r3, fp
 800d978:	4913      	ldr	r1, [pc, #76]	; (800d9c8 <_dtoa_r+0x630>)
 800d97a:	2000      	movs	r0, #0
 800d97c:	f7f2 fc8c 	bl	8000298 <__aeabi_dsub>
 800d980:	4602      	mov	r2, r0
 800d982:	460b      	mov	r3, r1
 800d984:	4640      	mov	r0, r8
 800d986:	4649      	mov	r1, r9
 800d988:	f7f3 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	f43f af35 	beq.w	800d7fc <_dtoa_r+0x464>
 800d992:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d994:	1e6b      	subs	r3, r5, #1
 800d996:	930f      	str	r3, [sp, #60]	; 0x3c
 800d998:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d99c:	2b30      	cmp	r3, #48	; 0x30
 800d99e:	d0f8      	beq.n	800d992 <_dtoa_r+0x5fa>
 800d9a0:	9700      	str	r7, [sp, #0]
 800d9a2:	e049      	b.n	800da38 <_dtoa_r+0x6a0>
 800d9a4:	4b05      	ldr	r3, [pc, #20]	; (800d9bc <_dtoa_r+0x624>)
 800d9a6:	f7f2 fe2f 	bl	8000608 <__aeabi_dmul>
 800d9aa:	4680      	mov	r8, r0
 800d9ac:	4689      	mov	r9, r1
 800d9ae:	e7bd      	b.n	800d92c <_dtoa_r+0x594>
 800d9b0:	0800f5c0 	.word	0x0800f5c0
 800d9b4:	0800f598 	.word	0x0800f598
 800d9b8:	3ff00000 	.word	0x3ff00000
 800d9bc:	40240000 	.word	0x40240000
 800d9c0:	401c0000 	.word	0x401c0000
 800d9c4:	40140000 	.word	0x40140000
 800d9c8:	3fe00000 	.word	0x3fe00000
 800d9cc:	9d01      	ldr	r5, [sp, #4]
 800d9ce:	4656      	mov	r6, sl
 800d9d0:	465f      	mov	r7, fp
 800d9d2:	4642      	mov	r2, r8
 800d9d4:	464b      	mov	r3, r9
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	4639      	mov	r1, r7
 800d9da:	f7f2 ff3f 	bl	800085c <__aeabi_ddiv>
 800d9de:	f7f3 f8c3 	bl	8000b68 <__aeabi_d2iz>
 800d9e2:	4682      	mov	sl, r0
 800d9e4:	f7f2 fda6 	bl	8000534 <__aeabi_i2d>
 800d9e8:	4642      	mov	r2, r8
 800d9ea:	464b      	mov	r3, r9
 800d9ec:	f7f2 fe0c 	bl	8000608 <__aeabi_dmul>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d9fc:	f7f2 fc4c 	bl	8000298 <__aeabi_dsub>
 800da00:	f805 6b01 	strb.w	r6, [r5], #1
 800da04:	9e01      	ldr	r6, [sp, #4]
 800da06:	9f03      	ldr	r7, [sp, #12]
 800da08:	1bae      	subs	r6, r5, r6
 800da0a:	42b7      	cmp	r7, r6
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	d135      	bne.n	800da7e <_dtoa_r+0x6e6>
 800da12:	f7f2 fc43 	bl	800029c <__adddf3>
 800da16:	4642      	mov	r2, r8
 800da18:	464b      	mov	r3, r9
 800da1a:	4606      	mov	r6, r0
 800da1c:	460f      	mov	r7, r1
 800da1e:	f7f3 f883 	bl	8000b28 <__aeabi_dcmpgt>
 800da22:	b9d0      	cbnz	r0, 800da5a <_dtoa_r+0x6c2>
 800da24:	4642      	mov	r2, r8
 800da26:	464b      	mov	r3, r9
 800da28:	4630      	mov	r0, r6
 800da2a:	4639      	mov	r1, r7
 800da2c:	f7f3 f854 	bl	8000ad8 <__aeabi_dcmpeq>
 800da30:	b110      	cbz	r0, 800da38 <_dtoa_r+0x6a0>
 800da32:	f01a 0f01 	tst.w	sl, #1
 800da36:	d110      	bne.n	800da5a <_dtoa_r+0x6c2>
 800da38:	4620      	mov	r0, r4
 800da3a:	ee18 1a10 	vmov	r1, s16
 800da3e:	f000 fae5 	bl	800e00c <_Bfree>
 800da42:	2300      	movs	r3, #0
 800da44:	9800      	ldr	r0, [sp, #0]
 800da46:	702b      	strb	r3, [r5, #0]
 800da48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da4a:	3001      	adds	r0, #1
 800da4c:	6018      	str	r0, [r3, #0]
 800da4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da50:	2b00      	cmp	r3, #0
 800da52:	f43f acf1 	beq.w	800d438 <_dtoa_r+0xa0>
 800da56:	601d      	str	r5, [r3, #0]
 800da58:	e4ee      	b.n	800d438 <_dtoa_r+0xa0>
 800da5a:	9f00      	ldr	r7, [sp, #0]
 800da5c:	462b      	mov	r3, r5
 800da5e:	461d      	mov	r5, r3
 800da60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da64:	2a39      	cmp	r2, #57	; 0x39
 800da66:	d106      	bne.n	800da76 <_dtoa_r+0x6de>
 800da68:	9a01      	ldr	r2, [sp, #4]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d1f7      	bne.n	800da5e <_dtoa_r+0x6c6>
 800da6e:	9901      	ldr	r1, [sp, #4]
 800da70:	2230      	movs	r2, #48	; 0x30
 800da72:	3701      	adds	r7, #1
 800da74:	700a      	strb	r2, [r1, #0]
 800da76:	781a      	ldrb	r2, [r3, #0]
 800da78:	3201      	adds	r2, #1
 800da7a:	701a      	strb	r2, [r3, #0]
 800da7c:	e790      	b.n	800d9a0 <_dtoa_r+0x608>
 800da7e:	4ba6      	ldr	r3, [pc, #664]	; (800dd18 <_dtoa_r+0x980>)
 800da80:	2200      	movs	r2, #0
 800da82:	f7f2 fdc1 	bl	8000608 <__aeabi_dmul>
 800da86:	2200      	movs	r2, #0
 800da88:	2300      	movs	r3, #0
 800da8a:	4606      	mov	r6, r0
 800da8c:	460f      	mov	r7, r1
 800da8e:	f7f3 f823 	bl	8000ad8 <__aeabi_dcmpeq>
 800da92:	2800      	cmp	r0, #0
 800da94:	d09d      	beq.n	800d9d2 <_dtoa_r+0x63a>
 800da96:	e7cf      	b.n	800da38 <_dtoa_r+0x6a0>
 800da98:	9a08      	ldr	r2, [sp, #32]
 800da9a:	2a00      	cmp	r2, #0
 800da9c:	f000 80d7 	beq.w	800dc4e <_dtoa_r+0x8b6>
 800daa0:	9a06      	ldr	r2, [sp, #24]
 800daa2:	2a01      	cmp	r2, #1
 800daa4:	f300 80ba 	bgt.w	800dc1c <_dtoa_r+0x884>
 800daa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800daaa:	2a00      	cmp	r2, #0
 800daac:	f000 80b2 	beq.w	800dc14 <_dtoa_r+0x87c>
 800dab0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dab4:	9e07      	ldr	r6, [sp, #28]
 800dab6:	9d04      	ldr	r5, [sp, #16]
 800dab8:	9a04      	ldr	r2, [sp, #16]
 800daba:	441a      	add	r2, r3
 800dabc:	9204      	str	r2, [sp, #16]
 800dabe:	9a05      	ldr	r2, [sp, #20]
 800dac0:	2101      	movs	r1, #1
 800dac2:	441a      	add	r2, r3
 800dac4:	4620      	mov	r0, r4
 800dac6:	9205      	str	r2, [sp, #20]
 800dac8:	f000 fb58 	bl	800e17c <__i2b>
 800dacc:	4607      	mov	r7, r0
 800dace:	2d00      	cmp	r5, #0
 800dad0:	dd0c      	ble.n	800daec <_dtoa_r+0x754>
 800dad2:	9b05      	ldr	r3, [sp, #20]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	dd09      	ble.n	800daec <_dtoa_r+0x754>
 800dad8:	42ab      	cmp	r3, r5
 800dada:	9a04      	ldr	r2, [sp, #16]
 800dadc:	bfa8      	it	ge
 800dade:	462b      	movge	r3, r5
 800dae0:	1ad2      	subs	r2, r2, r3
 800dae2:	9204      	str	r2, [sp, #16]
 800dae4:	9a05      	ldr	r2, [sp, #20]
 800dae6:	1aed      	subs	r5, r5, r3
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	9305      	str	r3, [sp, #20]
 800daec:	9b07      	ldr	r3, [sp, #28]
 800daee:	b31b      	cbz	r3, 800db38 <_dtoa_r+0x7a0>
 800daf0:	9b08      	ldr	r3, [sp, #32]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f000 80af 	beq.w	800dc56 <_dtoa_r+0x8be>
 800daf8:	2e00      	cmp	r6, #0
 800dafa:	dd13      	ble.n	800db24 <_dtoa_r+0x78c>
 800dafc:	4639      	mov	r1, r7
 800dafe:	4632      	mov	r2, r6
 800db00:	4620      	mov	r0, r4
 800db02:	f000 fbfb 	bl	800e2fc <__pow5mult>
 800db06:	ee18 2a10 	vmov	r2, s16
 800db0a:	4601      	mov	r1, r0
 800db0c:	4607      	mov	r7, r0
 800db0e:	4620      	mov	r0, r4
 800db10:	f000 fb4a 	bl	800e1a8 <__multiply>
 800db14:	ee18 1a10 	vmov	r1, s16
 800db18:	4680      	mov	r8, r0
 800db1a:	4620      	mov	r0, r4
 800db1c:	f000 fa76 	bl	800e00c <_Bfree>
 800db20:	ee08 8a10 	vmov	s16, r8
 800db24:	9b07      	ldr	r3, [sp, #28]
 800db26:	1b9a      	subs	r2, r3, r6
 800db28:	d006      	beq.n	800db38 <_dtoa_r+0x7a0>
 800db2a:	ee18 1a10 	vmov	r1, s16
 800db2e:	4620      	mov	r0, r4
 800db30:	f000 fbe4 	bl	800e2fc <__pow5mult>
 800db34:	ee08 0a10 	vmov	s16, r0
 800db38:	2101      	movs	r1, #1
 800db3a:	4620      	mov	r0, r4
 800db3c:	f000 fb1e 	bl	800e17c <__i2b>
 800db40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db42:	2b00      	cmp	r3, #0
 800db44:	4606      	mov	r6, r0
 800db46:	f340 8088 	ble.w	800dc5a <_dtoa_r+0x8c2>
 800db4a:	461a      	mov	r2, r3
 800db4c:	4601      	mov	r1, r0
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 fbd4 	bl	800e2fc <__pow5mult>
 800db54:	9b06      	ldr	r3, [sp, #24]
 800db56:	2b01      	cmp	r3, #1
 800db58:	4606      	mov	r6, r0
 800db5a:	f340 8081 	ble.w	800dc60 <_dtoa_r+0x8c8>
 800db5e:	f04f 0800 	mov.w	r8, #0
 800db62:	6933      	ldr	r3, [r6, #16]
 800db64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800db68:	6918      	ldr	r0, [r3, #16]
 800db6a:	f000 fab7 	bl	800e0dc <__hi0bits>
 800db6e:	f1c0 0020 	rsb	r0, r0, #32
 800db72:	9b05      	ldr	r3, [sp, #20]
 800db74:	4418      	add	r0, r3
 800db76:	f010 001f 	ands.w	r0, r0, #31
 800db7a:	f000 8092 	beq.w	800dca2 <_dtoa_r+0x90a>
 800db7e:	f1c0 0320 	rsb	r3, r0, #32
 800db82:	2b04      	cmp	r3, #4
 800db84:	f340 808a 	ble.w	800dc9c <_dtoa_r+0x904>
 800db88:	f1c0 001c 	rsb	r0, r0, #28
 800db8c:	9b04      	ldr	r3, [sp, #16]
 800db8e:	4403      	add	r3, r0
 800db90:	9304      	str	r3, [sp, #16]
 800db92:	9b05      	ldr	r3, [sp, #20]
 800db94:	4403      	add	r3, r0
 800db96:	4405      	add	r5, r0
 800db98:	9305      	str	r3, [sp, #20]
 800db9a:	9b04      	ldr	r3, [sp, #16]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	dd07      	ble.n	800dbb0 <_dtoa_r+0x818>
 800dba0:	ee18 1a10 	vmov	r1, s16
 800dba4:	461a      	mov	r2, r3
 800dba6:	4620      	mov	r0, r4
 800dba8:	f000 fc02 	bl	800e3b0 <__lshift>
 800dbac:	ee08 0a10 	vmov	s16, r0
 800dbb0:	9b05      	ldr	r3, [sp, #20]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	dd05      	ble.n	800dbc2 <_dtoa_r+0x82a>
 800dbb6:	4631      	mov	r1, r6
 800dbb8:	461a      	mov	r2, r3
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 fbf8 	bl	800e3b0 <__lshift>
 800dbc0:	4606      	mov	r6, r0
 800dbc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d06e      	beq.n	800dca6 <_dtoa_r+0x90e>
 800dbc8:	ee18 0a10 	vmov	r0, s16
 800dbcc:	4631      	mov	r1, r6
 800dbce:	f000 fc5f 	bl	800e490 <__mcmp>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	da67      	bge.n	800dca6 <_dtoa_r+0x90e>
 800dbd6:	9b00      	ldr	r3, [sp, #0]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	ee18 1a10 	vmov	r1, s16
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	220a      	movs	r2, #10
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 fa33 	bl	800e050 <__multadd>
 800dbea:	9b08      	ldr	r3, [sp, #32]
 800dbec:	ee08 0a10 	vmov	s16, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f000 81b1 	beq.w	800df58 <_dtoa_r+0xbc0>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	4639      	mov	r1, r7
 800dbfa:	220a      	movs	r2, #10
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f000 fa27 	bl	800e050 <__multadd>
 800dc02:	9b02      	ldr	r3, [sp, #8]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	4607      	mov	r7, r0
 800dc08:	f300 808e 	bgt.w	800dd28 <_dtoa_r+0x990>
 800dc0c:	9b06      	ldr	r3, [sp, #24]
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	dc51      	bgt.n	800dcb6 <_dtoa_r+0x91e>
 800dc12:	e089      	b.n	800dd28 <_dtoa_r+0x990>
 800dc14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc1a:	e74b      	b.n	800dab4 <_dtoa_r+0x71c>
 800dc1c:	9b03      	ldr	r3, [sp, #12]
 800dc1e:	1e5e      	subs	r6, r3, #1
 800dc20:	9b07      	ldr	r3, [sp, #28]
 800dc22:	42b3      	cmp	r3, r6
 800dc24:	bfbf      	itttt	lt
 800dc26:	9b07      	ldrlt	r3, [sp, #28]
 800dc28:	9607      	strlt	r6, [sp, #28]
 800dc2a:	1af2      	sublt	r2, r6, r3
 800dc2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dc2e:	bfb6      	itet	lt
 800dc30:	189b      	addlt	r3, r3, r2
 800dc32:	1b9e      	subge	r6, r3, r6
 800dc34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dc36:	9b03      	ldr	r3, [sp, #12]
 800dc38:	bfb8      	it	lt
 800dc3a:	2600      	movlt	r6, #0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bfb7      	itett	lt
 800dc40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dc44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dc48:	1a9d      	sublt	r5, r3, r2
 800dc4a:	2300      	movlt	r3, #0
 800dc4c:	e734      	b.n	800dab8 <_dtoa_r+0x720>
 800dc4e:	9e07      	ldr	r6, [sp, #28]
 800dc50:	9d04      	ldr	r5, [sp, #16]
 800dc52:	9f08      	ldr	r7, [sp, #32]
 800dc54:	e73b      	b.n	800dace <_dtoa_r+0x736>
 800dc56:	9a07      	ldr	r2, [sp, #28]
 800dc58:	e767      	b.n	800db2a <_dtoa_r+0x792>
 800dc5a:	9b06      	ldr	r3, [sp, #24]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	dc18      	bgt.n	800dc92 <_dtoa_r+0x8fa>
 800dc60:	f1ba 0f00 	cmp.w	sl, #0
 800dc64:	d115      	bne.n	800dc92 <_dtoa_r+0x8fa>
 800dc66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc6a:	b993      	cbnz	r3, 800dc92 <_dtoa_r+0x8fa>
 800dc6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc70:	0d1b      	lsrs	r3, r3, #20
 800dc72:	051b      	lsls	r3, r3, #20
 800dc74:	b183      	cbz	r3, 800dc98 <_dtoa_r+0x900>
 800dc76:	9b04      	ldr	r3, [sp, #16]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	9b05      	ldr	r3, [sp, #20]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	9305      	str	r3, [sp, #20]
 800dc82:	f04f 0801 	mov.w	r8, #1
 800dc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f47f af6a 	bne.w	800db62 <_dtoa_r+0x7ca>
 800dc8e:	2001      	movs	r0, #1
 800dc90:	e76f      	b.n	800db72 <_dtoa_r+0x7da>
 800dc92:	f04f 0800 	mov.w	r8, #0
 800dc96:	e7f6      	b.n	800dc86 <_dtoa_r+0x8ee>
 800dc98:	4698      	mov	r8, r3
 800dc9a:	e7f4      	b.n	800dc86 <_dtoa_r+0x8ee>
 800dc9c:	f43f af7d 	beq.w	800db9a <_dtoa_r+0x802>
 800dca0:	4618      	mov	r0, r3
 800dca2:	301c      	adds	r0, #28
 800dca4:	e772      	b.n	800db8c <_dtoa_r+0x7f4>
 800dca6:	9b03      	ldr	r3, [sp, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	dc37      	bgt.n	800dd1c <_dtoa_r+0x984>
 800dcac:	9b06      	ldr	r3, [sp, #24]
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	dd34      	ble.n	800dd1c <_dtoa_r+0x984>
 800dcb2:	9b03      	ldr	r3, [sp, #12]
 800dcb4:	9302      	str	r3, [sp, #8]
 800dcb6:	9b02      	ldr	r3, [sp, #8]
 800dcb8:	b96b      	cbnz	r3, 800dcd6 <_dtoa_r+0x93e>
 800dcba:	4631      	mov	r1, r6
 800dcbc:	2205      	movs	r2, #5
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 f9c6 	bl	800e050 <__multadd>
 800dcc4:	4601      	mov	r1, r0
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	ee18 0a10 	vmov	r0, s16
 800dccc:	f000 fbe0 	bl	800e490 <__mcmp>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	f73f adbb 	bgt.w	800d84c <_dtoa_r+0x4b4>
 800dcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd8:	9d01      	ldr	r5, [sp, #4]
 800dcda:	43db      	mvns	r3, r3
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	f04f 0800 	mov.w	r8, #0
 800dce2:	4631      	mov	r1, r6
 800dce4:	4620      	mov	r0, r4
 800dce6:	f000 f991 	bl	800e00c <_Bfree>
 800dcea:	2f00      	cmp	r7, #0
 800dcec:	f43f aea4 	beq.w	800da38 <_dtoa_r+0x6a0>
 800dcf0:	f1b8 0f00 	cmp.w	r8, #0
 800dcf4:	d005      	beq.n	800dd02 <_dtoa_r+0x96a>
 800dcf6:	45b8      	cmp	r8, r7
 800dcf8:	d003      	beq.n	800dd02 <_dtoa_r+0x96a>
 800dcfa:	4641      	mov	r1, r8
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f000 f985 	bl	800e00c <_Bfree>
 800dd02:	4639      	mov	r1, r7
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 f981 	bl	800e00c <_Bfree>
 800dd0a:	e695      	b.n	800da38 <_dtoa_r+0x6a0>
 800dd0c:	2600      	movs	r6, #0
 800dd0e:	4637      	mov	r7, r6
 800dd10:	e7e1      	b.n	800dcd6 <_dtoa_r+0x93e>
 800dd12:	9700      	str	r7, [sp, #0]
 800dd14:	4637      	mov	r7, r6
 800dd16:	e599      	b.n	800d84c <_dtoa_r+0x4b4>
 800dd18:	40240000 	.word	0x40240000
 800dd1c:	9b08      	ldr	r3, [sp, #32]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 80ca 	beq.w	800deb8 <_dtoa_r+0xb20>
 800dd24:	9b03      	ldr	r3, [sp, #12]
 800dd26:	9302      	str	r3, [sp, #8]
 800dd28:	2d00      	cmp	r5, #0
 800dd2a:	dd05      	ble.n	800dd38 <_dtoa_r+0x9a0>
 800dd2c:	4639      	mov	r1, r7
 800dd2e:	462a      	mov	r2, r5
 800dd30:	4620      	mov	r0, r4
 800dd32:	f000 fb3d 	bl	800e3b0 <__lshift>
 800dd36:	4607      	mov	r7, r0
 800dd38:	f1b8 0f00 	cmp.w	r8, #0
 800dd3c:	d05b      	beq.n	800ddf6 <_dtoa_r+0xa5e>
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	4620      	mov	r0, r4
 800dd42:	f000 f923 	bl	800df8c <_Balloc>
 800dd46:	4605      	mov	r5, r0
 800dd48:	b928      	cbnz	r0, 800dd56 <_dtoa_r+0x9be>
 800dd4a:	4b87      	ldr	r3, [pc, #540]	; (800df68 <_dtoa_r+0xbd0>)
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd52:	f7ff bb3b 	b.w	800d3cc <_dtoa_r+0x34>
 800dd56:	693a      	ldr	r2, [r7, #16]
 800dd58:	3202      	adds	r2, #2
 800dd5a:	0092      	lsls	r2, r2, #2
 800dd5c:	f107 010c 	add.w	r1, r7, #12
 800dd60:	300c      	adds	r0, #12
 800dd62:	f7fe fe0d 	bl	800c980 <memcpy>
 800dd66:	2201      	movs	r2, #1
 800dd68:	4629      	mov	r1, r5
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f000 fb20 	bl	800e3b0 <__lshift>
 800dd70:	9b01      	ldr	r3, [sp, #4]
 800dd72:	f103 0901 	add.w	r9, r3, #1
 800dd76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	9305      	str	r3, [sp, #20]
 800dd7e:	f00a 0301 	and.w	r3, sl, #1
 800dd82:	46b8      	mov	r8, r7
 800dd84:	9304      	str	r3, [sp, #16]
 800dd86:	4607      	mov	r7, r0
 800dd88:	4631      	mov	r1, r6
 800dd8a:	ee18 0a10 	vmov	r0, s16
 800dd8e:	f7ff fa77 	bl	800d280 <quorem>
 800dd92:	4641      	mov	r1, r8
 800dd94:	9002      	str	r0, [sp, #8]
 800dd96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dd9a:	ee18 0a10 	vmov	r0, s16
 800dd9e:	f000 fb77 	bl	800e490 <__mcmp>
 800dda2:	463a      	mov	r2, r7
 800dda4:	9003      	str	r0, [sp, #12]
 800dda6:	4631      	mov	r1, r6
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f000 fb8d 	bl	800e4c8 <__mdiff>
 800ddae:	68c2      	ldr	r2, [r0, #12]
 800ddb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ddb4:	4605      	mov	r5, r0
 800ddb6:	bb02      	cbnz	r2, 800ddfa <_dtoa_r+0xa62>
 800ddb8:	4601      	mov	r1, r0
 800ddba:	ee18 0a10 	vmov	r0, s16
 800ddbe:	f000 fb67 	bl	800e490 <__mcmp>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	9207      	str	r2, [sp, #28]
 800ddca:	f000 f91f 	bl	800e00c <_Bfree>
 800ddce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ddd2:	ea43 0102 	orr.w	r1, r3, r2
 800ddd6:	9b04      	ldr	r3, [sp, #16]
 800ddd8:	430b      	orrs	r3, r1
 800ddda:	464d      	mov	r5, r9
 800dddc:	d10f      	bne.n	800ddfe <_dtoa_r+0xa66>
 800ddde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dde2:	d02a      	beq.n	800de3a <_dtoa_r+0xaa2>
 800dde4:	9b03      	ldr	r3, [sp, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	dd02      	ble.n	800ddf0 <_dtoa_r+0xa58>
 800ddea:	9b02      	ldr	r3, [sp, #8]
 800ddec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ddf0:	f88b a000 	strb.w	sl, [fp]
 800ddf4:	e775      	b.n	800dce2 <_dtoa_r+0x94a>
 800ddf6:	4638      	mov	r0, r7
 800ddf8:	e7ba      	b.n	800dd70 <_dtoa_r+0x9d8>
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	e7e2      	b.n	800ddc4 <_dtoa_r+0xa2c>
 800ddfe:	9b03      	ldr	r3, [sp, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	db04      	blt.n	800de0e <_dtoa_r+0xa76>
 800de04:	9906      	ldr	r1, [sp, #24]
 800de06:	430b      	orrs	r3, r1
 800de08:	9904      	ldr	r1, [sp, #16]
 800de0a:	430b      	orrs	r3, r1
 800de0c:	d122      	bne.n	800de54 <_dtoa_r+0xabc>
 800de0e:	2a00      	cmp	r2, #0
 800de10:	ddee      	ble.n	800ddf0 <_dtoa_r+0xa58>
 800de12:	ee18 1a10 	vmov	r1, s16
 800de16:	2201      	movs	r2, #1
 800de18:	4620      	mov	r0, r4
 800de1a:	f000 fac9 	bl	800e3b0 <__lshift>
 800de1e:	4631      	mov	r1, r6
 800de20:	ee08 0a10 	vmov	s16, r0
 800de24:	f000 fb34 	bl	800e490 <__mcmp>
 800de28:	2800      	cmp	r0, #0
 800de2a:	dc03      	bgt.n	800de34 <_dtoa_r+0xa9c>
 800de2c:	d1e0      	bne.n	800ddf0 <_dtoa_r+0xa58>
 800de2e:	f01a 0f01 	tst.w	sl, #1
 800de32:	d0dd      	beq.n	800ddf0 <_dtoa_r+0xa58>
 800de34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de38:	d1d7      	bne.n	800ddea <_dtoa_r+0xa52>
 800de3a:	2339      	movs	r3, #57	; 0x39
 800de3c:	f88b 3000 	strb.w	r3, [fp]
 800de40:	462b      	mov	r3, r5
 800de42:	461d      	mov	r5, r3
 800de44:	3b01      	subs	r3, #1
 800de46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de4a:	2a39      	cmp	r2, #57	; 0x39
 800de4c:	d071      	beq.n	800df32 <_dtoa_r+0xb9a>
 800de4e:	3201      	adds	r2, #1
 800de50:	701a      	strb	r2, [r3, #0]
 800de52:	e746      	b.n	800dce2 <_dtoa_r+0x94a>
 800de54:	2a00      	cmp	r2, #0
 800de56:	dd07      	ble.n	800de68 <_dtoa_r+0xad0>
 800de58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de5c:	d0ed      	beq.n	800de3a <_dtoa_r+0xaa2>
 800de5e:	f10a 0301 	add.w	r3, sl, #1
 800de62:	f88b 3000 	strb.w	r3, [fp]
 800de66:	e73c      	b.n	800dce2 <_dtoa_r+0x94a>
 800de68:	9b05      	ldr	r3, [sp, #20]
 800de6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800de6e:	4599      	cmp	r9, r3
 800de70:	d047      	beq.n	800df02 <_dtoa_r+0xb6a>
 800de72:	ee18 1a10 	vmov	r1, s16
 800de76:	2300      	movs	r3, #0
 800de78:	220a      	movs	r2, #10
 800de7a:	4620      	mov	r0, r4
 800de7c:	f000 f8e8 	bl	800e050 <__multadd>
 800de80:	45b8      	cmp	r8, r7
 800de82:	ee08 0a10 	vmov	s16, r0
 800de86:	f04f 0300 	mov.w	r3, #0
 800de8a:	f04f 020a 	mov.w	r2, #10
 800de8e:	4641      	mov	r1, r8
 800de90:	4620      	mov	r0, r4
 800de92:	d106      	bne.n	800dea2 <_dtoa_r+0xb0a>
 800de94:	f000 f8dc 	bl	800e050 <__multadd>
 800de98:	4680      	mov	r8, r0
 800de9a:	4607      	mov	r7, r0
 800de9c:	f109 0901 	add.w	r9, r9, #1
 800dea0:	e772      	b.n	800dd88 <_dtoa_r+0x9f0>
 800dea2:	f000 f8d5 	bl	800e050 <__multadd>
 800dea6:	4639      	mov	r1, r7
 800dea8:	4680      	mov	r8, r0
 800deaa:	2300      	movs	r3, #0
 800deac:	220a      	movs	r2, #10
 800deae:	4620      	mov	r0, r4
 800deb0:	f000 f8ce 	bl	800e050 <__multadd>
 800deb4:	4607      	mov	r7, r0
 800deb6:	e7f1      	b.n	800de9c <_dtoa_r+0xb04>
 800deb8:	9b03      	ldr	r3, [sp, #12]
 800deba:	9302      	str	r3, [sp, #8]
 800debc:	9d01      	ldr	r5, [sp, #4]
 800debe:	ee18 0a10 	vmov	r0, s16
 800dec2:	4631      	mov	r1, r6
 800dec4:	f7ff f9dc 	bl	800d280 <quorem>
 800dec8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800decc:	9b01      	ldr	r3, [sp, #4]
 800dece:	f805 ab01 	strb.w	sl, [r5], #1
 800ded2:	1aea      	subs	r2, r5, r3
 800ded4:	9b02      	ldr	r3, [sp, #8]
 800ded6:	4293      	cmp	r3, r2
 800ded8:	dd09      	ble.n	800deee <_dtoa_r+0xb56>
 800deda:	ee18 1a10 	vmov	r1, s16
 800dede:	2300      	movs	r3, #0
 800dee0:	220a      	movs	r2, #10
 800dee2:	4620      	mov	r0, r4
 800dee4:	f000 f8b4 	bl	800e050 <__multadd>
 800dee8:	ee08 0a10 	vmov	s16, r0
 800deec:	e7e7      	b.n	800debe <_dtoa_r+0xb26>
 800deee:	9b02      	ldr	r3, [sp, #8]
 800def0:	2b00      	cmp	r3, #0
 800def2:	bfc8      	it	gt
 800def4:	461d      	movgt	r5, r3
 800def6:	9b01      	ldr	r3, [sp, #4]
 800def8:	bfd8      	it	le
 800defa:	2501      	movle	r5, #1
 800defc:	441d      	add	r5, r3
 800defe:	f04f 0800 	mov.w	r8, #0
 800df02:	ee18 1a10 	vmov	r1, s16
 800df06:	2201      	movs	r2, #1
 800df08:	4620      	mov	r0, r4
 800df0a:	f000 fa51 	bl	800e3b0 <__lshift>
 800df0e:	4631      	mov	r1, r6
 800df10:	ee08 0a10 	vmov	s16, r0
 800df14:	f000 fabc 	bl	800e490 <__mcmp>
 800df18:	2800      	cmp	r0, #0
 800df1a:	dc91      	bgt.n	800de40 <_dtoa_r+0xaa8>
 800df1c:	d102      	bne.n	800df24 <_dtoa_r+0xb8c>
 800df1e:	f01a 0f01 	tst.w	sl, #1
 800df22:	d18d      	bne.n	800de40 <_dtoa_r+0xaa8>
 800df24:	462b      	mov	r3, r5
 800df26:	461d      	mov	r5, r3
 800df28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df2c:	2a30      	cmp	r2, #48	; 0x30
 800df2e:	d0fa      	beq.n	800df26 <_dtoa_r+0xb8e>
 800df30:	e6d7      	b.n	800dce2 <_dtoa_r+0x94a>
 800df32:	9a01      	ldr	r2, [sp, #4]
 800df34:	429a      	cmp	r2, r3
 800df36:	d184      	bne.n	800de42 <_dtoa_r+0xaaa>
 800df38:	9b00      	ldr	r3, [sp, #0]
 800df3a:	3301      	adds	r3, #1
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	2331      	movs	r3, #49	; 0x31
 800df40:	7013      	strb	r3, [r2, #0]
 800df42:	e6ce      	b.n	800dce2 <_dtoa_r+0x94a>
 800df44:	4b09      	ldr	r3, [pc, #36]	; (800df6c <_dtoa_r+0xbd4>)
 800df46:	f7ff ba95 	b.w	800d474 <_dtoa_r+0xdc>
 800df4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f47f aa6e 	bne.w	800d42e <_dtoa_r+0x96>
 800df52:	4b07      	ldr	r3, [pc, #28]	; (800df70 <_dtoa_r+0xbd8>)
 800df54:	f7ff ba8e 	b.w	800d474 <_dtoa_r+0xdc>
 800df58:	9b02      	ldr	r3, [sp, #8]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	dcae      	bgt.n	800debc <_dtoa_r+0xb24>
 800df5e:	9b06      	ldr	r3, [sp, #24]
 800df60:	2b02      	cmp	r3, #2
 800df62:	f73f aea8 	bgt.w	800dcb6 <_dtoa_r+0x91e>
 800df66:	e7a9      	b.n	800debc <_dtoa_r+0xb24>
 800df68:	0800f52b 	.word	0x0800f52b
 800df6c:	0800f488 	.word	0x0800f488
 800df70:	0800f4ac 	.word	0x0800f4ac

0800df74 <_localeconv_r>:
 800df74:	4800      	ldr	r0, [pc, #0]	; (800df78 <_localeconv_r+0x4>)
 800df76:	4770      	bx	lr
 800df78:	20000164 	.word	0x20000164

0800df7c <malloc>:
 800df7c:	4b02      	ldr	r3, [pc, #8]	; (800df88 <malloc+0xc>)
 800df7e:	4601      	mov	r1, r0
 800df80:	6818      	ldr	r0, [r3, #0]
 800df82:	f000 bc09 	b.w	800e798 <_malloc_r>
 800df86:	bf00      	nop
 800df88:	20000010 	.word	0x20000010

0800df8c <_Balloc>:
 800df8c:	b570      	push	{r4, r5, r6, lr}
 800df8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df90:	4604      	mov	r4, r0
 800df92:	460d      	mov	r5, r1
 800df94:	b976      	cbnz	r6, 800dfb4 <_Balloc+0x28>
 800df96:	2010      	movs	r0, #16
 800df98:	f7ff fff0 	bl	800df7c <malloc>
 800df9c:	4602      	mov	r2, r0
 800df9e:	6260      	str	r0, [r4, #36]	; 0x24
 800dfa0:	b920      	cbnz	r0, 800dfac <_Balloc+0x20>
 800dfa2:	4b18      	ldr	r3, [pc, #96]	; (800e004 <_Balloc+0x78>)
 800dfa4:	4818      	ldr	r0, [pc, #96]	; (800e008 <_Balloc+0x7c>)
 800dfa6:	2166      	movs	r1, #102	; 0x66
 800dfa8:	f000 fc7a 	bl	800e8a0 <__assert_func>
 800dfac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfb0:	6006      	str	r6, [r0, #0]
 800dfb2:	60c6      	str	r6, [r0, #12]
 800dfb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dfb6:	68f3      	ldr	r3, [r6, #12]
 800dfb8:	b183      	cbz	r3, 800dfdc <_Balloc+0x50>
 800dfba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfc2:	b9b8      	cbnz	r0, 800dff4 <_Balloc+0x68>
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	fa01 f605 	lsl.w	r6, r1, r5
 800dfca:	1d72      	adds	r2, r6, #5
 800dfcc:	0092      	lsls	r2, r2, #2
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 fb60 	bl	800e694 <_calloc_r>
 800dfd4:	b160      	cbz	r0, 800dff0 <_Balloc+0x64>
 800dfd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfda:	e00e      	b.n	800dffa <_Balloc+0x6e>
 800dfdc:	2221      	movs	r2, #33	; 0x21
 800dfde:	2104      	movs	r1, #4
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f000 fb57 	bl	800e694 <_calloc_r>
 800dfe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfe8:	60f0      	str	r0, [r6, #12]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1e4      	bne.n	800dfba <_Balloc+0x2e>
 800dff0:	2000      	movs	r0, #0
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	6802      	ldr	r2, [r0, #0]
 800dff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dffa:	2300      	movs	r3, #0
 800dffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e000:	e7f7      	b.n	800dff2 <_Balloc+0x66>
 800e002:	bf00      	nop
 800e004:	0800f4b9 	.word	0x0800f4b9
 800e008:	0800f53c 	.word	0x0800f53c

0800e00c <_Bfree>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e010:	4605      	mov	r5, r0
 800e012:	460c      	mov	r4, r1
 800e014:	b976      	cbnz	r6, 800e034 <_Bfree+0x28>
 800e016:	2010      	movs	r0, #16
 800e018:	f7ff ffb0 	bl	800df7c <malloc>
 800e01c:	4602      	mov	r2, r0
 800e01e:	6268      	str	r0, [r5, #36]	; 0x24
 800e020:	b920      	cbnz	r0, 800e02c <_Bfree+0x20>
 800e022:	4b09      	ldr	r3, [pc, #36]	; (800e048 <_Bfree+0x3c>)
 800e024:	4809      	ldr	r0, [pc, #36]	; (800e04c <_Bfree+0x40>)
 800e026:	218a      	movs	r1, #138	; 0x8a
 800e028:	f000 fc3a 	bl	800e8a0 <__assert_func>
 800e02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e030:	6006      	str	r6, [r0, #0]
 800e032:	60c6      	str	r6, [r0, #12]
 800e034:	b13c      	cbz	r4, 800e046 <_Bfree+0x3a>
 800e036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e038:	6862      	ldr	r2, [r4, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e040:	6021      	str	r1, [r4, #0]
 800e042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e046:	bd70      	pop	{r4, r5, r6, pc}
 800e048:	0800f4b9 	.word	0x0800f4b9
 800e04c:	0800f53c 	.word	0x0800f53c

0800e050 <__multadd>:
 800e050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e054:	690d      	ldr	r5, [r1, #16]
 800e056:	4607      	mov	r7, r0
 800e058:	460c      	mov	r4, r1
 800e05a:	461e      	mov	r6, r3
 800e05c:	f101 0c14 	add.w	ip, r1, #20
 800e060:	2000      	movs	r0, #0
 800e062:	f8dc 3000 	ldr.w	r3, [ip]
 800e066:	b299      	uxth	r1, r3
 800e068:	fb02 6101 	mla	r1, r2, r1, r6
 800e06c:	0c1e      	lsrs	r6, r3, #16
 800e06e:	0c0b      	lsrs	r3, r1, #16
 800e070:	fb02 3306 	mla	r3, r2, r6, r3
 800e074:	b289      	uxth	r1, r1
 800e076:	3001      	adds	r0, #1
 800e078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e07c:	4285      	cmp	r5, r0
 800e07e:	f84c 1b04 	str.w	r1, [ip], #4
 800e082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e086:	dcec      	bgt.n	800e062 <__multadd+0x12>
 800e088:	b30e      	cbz	r6, 800e0ce <__multadd+0x7e>
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	42ab      	cmp	r3, r5
 800e08e:	dc19      	bgt.n	800e0c4 <__multadd+0x74>
 800e090:	6861      	ldr	r1, [r4, #4]
 800e092:	4638      	mov	r0, r7
 800e094:	3101      	adds	r1, #1
 800e096:	f7ff ff79 	bl	800df8c <_Balloc>
 800e09a:	4680      	mov	r8, r0
 800e09c:	b928      	cbnz	r0, 800e0aa <__multadd+0x5a>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	4b0c      	ldr	r3, [pc, #48]	; (800e0d4 <__multadd+0x84>)
 800e0a2:	480d      	ldr	r0, [pc, #52]	; (800e0d8 <__multadd+0x88>)
 800e0a4:	21b5      	movs	r1, #181	; 0xb5
 800e0a6:	f000 fbfb 	bl	800e8a0 <__assert_func>
 800e0aa:	6922      	ldr	r2, [r4, #16]
 800e0ac:	3202      	adds	r2, #2
 800e0ae:	f104 010c 	add.w	r1, r4, #12
 800e0b2:	0092      	lsls	r2, r2, #2
 800e0b4:	300c      	adds	r0, #12
 800e0b6:	f7fe fc63 	bl	800c980 <memcpy>
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f7ff ffa5 	bl	800e00c <_Bfree>
 800e0c2:	4644      	mov	r4, r8
 800e0c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0c8:	3501      	adds	r5, #1
 800e0ca:	615e      	str	r6, [r3, #20]
 800e0cc:	6125      	str	r5, [r4, #16]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d4:	0800f52b 	.word	0x0800f52b
 800e0d8:	0800f53c 	.word	0x0800f53c

0800e0dc <__hi0bits>:
 800e0dc:	0c03      	lsrs	r3, r0, #16
 800e0de:	041b      	lsls	r3, r3, #16
 800e0e0:	b9d3      	cbnz	r3, 800e118 <__hi0bits+0x3c>
 800e0e2:	0400      	lsls	r0, r0, #16
 800e0e4:	2310      	movs	r3, #16
 800e0e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0ea:	bf04      	itt	eq
 800e0ec:	0200      	lsleq	r0, r0, #8
 800e0ee:	3308      	addeq	r3, #8
 800e0f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0f4:	bf04      	itt	eq
 800e0f6:	0100      	lsleq	r0, r0, #4
 800e0f8:	3304      	addeq	r3, #4
 800e0fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0fe:	bf04      	itt	eq
 800e100:	0080      	lsleq	r0, r0, #2
 800e102:	3302      	addeq	r3, #2
 800e104:	2800      	cmp	r0, #0
 800e106:	db05      	blt.n	800e114 <__hi0bits+0x38>
 800e108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e10c:	f103 0301 	add.w	r3, r3, #1
 800e110:	bf08      	it	eq
 800e112:	2320      	moveq	r3, #32
 800e114:	4618      	mov	r0, r3
 800e116:	4770      	bx	lr
 800e118:	2300      	movs	r3, #0
 800e11a:	e7e4      	b.n	800e0e6 <__hi0bits+0xa>

0800e11c <__lo0bits>:
 800e11c:	6803      	ldr	r3, [r0, #0]
 800e11e:	f013 0207 	ands.w	r2, r3, #7
 800e122:	4601      	mov	r1, r0
 800e124:	d00b      	beq.n	800e13e <__lo0bits+0x22>
 800e126:	07da      	lsls	r2, r3, #31
 800e128:	d423      	bmi.n	800e172 <__lo0bits+0x56>
 800e12a:	0798      	lsls	r0, r3, #30
 800e12c:	bf49      	itett	mi
 800e12e:	085b      	lsrmi	r3, r3, #1
 800e130:	089b      	lsrpl	r3, r3, #2
 800e132:	2001      	movmi	r0, #1
 800e134:	600b      	strmi	r3, [r1, #0]
 800e136:	bf5c      	itt	pl
 800e138:	600b      	strpl	r3, [r1, #0]
 800e13a:	2002      	movpl	r0, #2
 800e13c:	4770      	bx	lr
 800e13e:	b298      	uxth	r0, r3
 800e140:	b9a8      	cbnz	r0, 800e16e <__lo0bits+0x52>
 800e142:	0c1b      	lsrs	r3, r3, #16
 800e144:	2010      	movs	r0, #16
 800e146:	b2da      	uxtb	r2, r3
 800e148:	b90a      	cbnz	r2, 800e14e <__lo0bits+0x32>
 800e14a:	3008      	adds	r0, #8
 800e14c:	0a1b      	lsrs	r3, r3, #8
 800e14e:	071a      	lsls	r2, r3, #28
 800e150:	bf04      	itt	eq
 800e152:	091b      	lsreq	r3, r3, #4
 800e154:	3004      	addeq	r0, #4
 800e156:	079a      	lsls	r2, r3, #30
 800e158:	bf04      	itt	eq
 800e15a:	089b      	lsreq	r3, r3, #2
 800e15c:	3002      	addeq	r0, #2
 800e15e:	07da      	lsls	r2, r3, #31
 800e160:	d403      	bmi.n	800e16a <__lo0bits+0x4e>
 800e162:	085b      	lsrs	r3, r3, #1
 800e164:	f100 0001 	add.w	r0, r0, #1
 800e168:	d005      	beq.n	800e176 <__lo0bits+0x5a>
 800e16a:	600b      	str	r3, [r1, #0]
 800e16c:	4770      	bx	lr
 800e16e:	4610      	mov	r0, r2
 800e170:	e7e9      	b.n	800e146 <__lo0bits+0x2a>
 800e172:	2000      	movs	r0, #0
 800e174:	4770      	bx	lr
 800e176:	2020      	movs	r0, #32
 800e178:	4770      	bx	lr
	...

0800e17c <__i2b>:
 800e17c:	b510      	push	{r4, lr}
 800e17e:	460c      	mov	r4, r1
 800e180:	2101      	movs	r1, #1
 800e182:	f7ff ff03 	bl	800df8c <_Balloc>
 800e186:	4602      	mov	r2, r0
 800e188:	b928      	cbnz	r0, 800e196 <__i2b+0x1a>
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <__i2b+0x24>)
 800e18c:	4805      	ldr	r0, [pc, #20]	; (800e1a4 <__i2b+0x28>)
 800e18e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e192:	f000 fb85 	bl	800e8a0 <__assert_func>
 800e196:	2301      	movs	r3, #1
 800e198:	6144      	str	r4, [r0, #20]
 800e19a:	6103      	str	r3, [r0, #16]
 800e19c:	bd10      	pop	{r4, pc}
 800e19e:	bf00      	nop
 800e1a0:	0800f52b 	.word	0x0800f52b
 800e1a4:	0800f53c 	.word	0x0800f53c

0800e1a8 <__multiply>:
 800e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ac:	4691      	mov	r9, r2
 800e1ae:	690a      	ldr	r2, [r1, #16]
 800e1b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	bfb8      	it	lt
 800e1b8:	460b      	movlt	r3, r1
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	bfbc      	itt	lt
 800e1be:	464c      	movlt	r4, r9
 800e1c0:	4699      	movlt	r9, r3
 800e1c2:	6927      	ldr	r7, [r4, #16]
 800e1c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1c8:	68a3      	ldr	r3, [r4, #8]
 800e1ca:	6861      	ldr	r1, [r4, #4]
 800e1cc:	eb07 060a 	add.w	r6, r7, sl
 800e1d0:	42b3      	cmp	r3, r6
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	bfb8      	it	lt
 800e1d6:	3101      	addlt	r1, #1
 800e1d8:	f7ff fed8 	bl	800df8c <_Balloc>
 800e1dc:	b930      	cbnz	r0, 800e1ec <__multiply+0x44>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	4b44      	ldr	r3, [pc, #272]	; (800e2f4 <__multiply+0x14c>)
 800e1e2:	4845      	ldr	r0, [pc, #276]	; (800e2f8 <__multiply+0x150>)
 800e1e4:	f240 115d 	movw	r1, #349	; 0x15d
 800e1e8:	f000 fb5a 	bl	800e8a0 <__assert_func>
 800e1ec:	f100 0514 	add.w	r5, r0, #20
 800e1f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	4543      	cmp	r3, r8
 800e1fa:	d321      	bcc.n	800e240 <__multiply+0x98>
 800e1fc:	f104 0314 	add.w	r3, r4, #20
 800e200:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e204:	f109 0314 	add.w	r3, r9, #20
 800e208:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e20c:	9202      	str	r2, [sp, #8]
 800e20e:	1b3a      	subs	r2, r7, r4
 800e210:	3a15      	subs	r2, #21
 800e212:	f022 0203 	bic.w	r2, r2, #3
 800e216:	3204      	adds	r2, #4
 800e218:	f104 0115 	add.w	r1, r4, #21
 800e21c:	428f      	cmp	r7, r1
 800e21e:	bf38      	it	cc
 800e220:	2204      	movcc	r2, #4
 800e222:	9201      	str	r2, [sp, #4]
 800e224:	9a02      	ldr	r2, [sp, #8]
 800e226:	9303      	str	r3, [sp, #12]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d80c      	bhi.n	800e246 <__multiply+0x9e>
 800e22c:	2e00      	cmp	r6, #0
 800e22e:	dd03      	ble.n	800e238 <__multiply+0x90>
 800e230:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e234:	2b00      	cmp	r3, #0
 800e236:	d05a      	beq.n	800e2ee <__multiply+0x146>
 800e238:	6106      	str	r6, [r0, #16]
 800e23a:	b005      	add	sp, #20
 800e23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e240:	f843 2b04 	str.w	r2, [r3], #4
 800e244:	e7d8      	b.n	800e1f8 <__multiply+0x50>
 800e246:	f8b3 a000 	ldrh.w	sl, [r3]
 800e24a:	f1ba 0f00 	cmp.w	sl, #0
 800e24e:	d024      	beq.n	800e29a <__multiply+0xf2>
 800e250:	f104 0e14 	add.w	lr, r4, #20
 800e254:	46a9      	mov	r9, r5
 800e256:	f04f 0c00 	mov.w	ip, #0
 800e25a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e25e:	f8d9 1000 	ldr.w	r1, [r9]
 800e262:	fa1f fb82 	uxth.w	fp, r2
 800e266:	b289      	uxth	r1, r1
 800e268:	fb0a 110b 	mla	r1, sl, fp, r1
 800e26c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e270:	f8d9 2000 	ldr.w	r2, [r9]
 800e274:	4461      	add	r1, ip
 800e276:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e27a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e27e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e282:	b289      	uxth	r1, r1
 800e284:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e288:	4577      	cmp	r7, lr
 800e28a:	f849 1b04 	str.w	r1, [r9], #4
 800e28e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e292:	d8e2      	bhi.n	800e25a <__multiply+0xb2>
 800e294:	9a01      	ldr	r2, [sp, #4]
 800e296:	f845 c002 	str.w	ip, [r5, r2]
 800e29a:	9a03      	ldr	r2, [sp, #12]
 800e29c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	f1b9 0f00 	cmp.w	r9, #0
 800e2a6:	d020      	beq.n	800e2ea <__multiply+0x142>
 800e2a8:	6829      	ldr	r1, [r5, #0]
 800e2aa:	f104 0c14 	add.w	ip, r4, #20
 800e2ae:	46ae      	mov	lr, r5
 800e2b0:	f04f 0a00 	mov.w	sl, #0
 800e2b4:	f8bc b000 	ldrh.w	fp, [ip]
 800e2b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2bc:	fb09 220b 	mla	r2, r9, fp, r2
 800e2c0:	4492      	add	sl, r2
 800e2c2:	b289      	uxth	r1, r1
 800e2c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e2c8:	f84e 1b04 	str.w	r1, [lr], #4
 800e2cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2d0:	f8be 1000 	ldrh.w	r1, [lr]
 800e2d4:	0c12      	lsrs	r2, r2, #16
 800e2d6:	fb09 1102 	mla	r1, r9, r2, r1
 800e2da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e2de:	4567      	cmp	r7, ip
 800e2e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2e4:	d8e6      	bhi.n	800e2b4 <__multiply+0x10c>
 800e2e6:	9a01      	ldr	r2, [sp, #4]
 800e2e8:	50a9      	str	r1, [r5, r2]
 800e2ea:	3504      	adds	r5, #4
 800e2ec:	e79a      	b.n	800e224 <__multiply+0x7c>
 800e2ee:	3e01      	subs	r6, #1
 800e2f0:	e79c      	b.n	800e22c <__multiply+0x84>
 800e2f2:	bf00      	nop
 800e2f4:	0800f52b 	.word	0x0800f52b
 800e2f8:	0800f53c 	.word	0x0800f53c

0800e2fc <__pow5mult>:
 800e2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e300:	4615      	mov	r5, r2
 800e302:	f012 0203 	ands.w	r2, r2, #3
 800e306:	4606      	mov	r6, r0
 800e308:	460f      	mov	r7, r1
 800e30a:	d007      	beq.n	800e31c <__pow5mult+0x20>
 800e30c:	4c25      	ldr	r4, [pc, #148]	; (800e3a4 <__pow5mult+0xa8>)
 800e30e:	3a01      	subs	r2, #1
 800e310:	2300      	movs	r3, #0
 800e312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e316:	f7ff fe9b 	bl	800e050 <__multadd>
 800e31a:	4607      	mov	r7, r0
 800e31c:	10ad      	asrs	r5, r5, #2
 800e31e:	d03d      	beq.n	800e39c <__pow5mult+0xa0>
 800e320:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e322:	b97c      	cbnz	r4, 800e344 <__pow5mult+0x48>
 800e324:	2010      	movs	r0, #16
 800e326:	f7ff fe29 	bl	800df7c <malloc>
 800e32a:	4602      	mov	r2, r0
 800e32c:	6270      	str	r0, [r6, #36]	; 0x24
 800e32e:	b928      	cbnz	r0, 800e33c <__pow5mult+0x40>
 800e330:	4b1d      	ldr	r3, [pc, #116]	; (800e3a8 <__pow5mult+0xac>)
 800e332:	481e      	ldr	r0, [pc, #120]	; (800e3ac <__pow5mult+0xb0>)
 800e334:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e338:	f000 fab2 	bl	800e8a0 <__assert_func>
 800e33c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e340:	6004      	str	r4, [r0, #0]
 800e342:	60c4      	str	r4, [r0, #12]
 800e344:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e34c:	b94c      	cbnz	r4, 800e362 <__pow5mult+0x66>
 800e34e:	f240 2171 	movw	r1, #625	; 0x271
 800e352:	4630      	mov	r0, r6
 800e354:	f7ff ff12 	bl	800e17c <__i2b>
 800e358:	2300      	movs	r3, #0
 800e35a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e35e:	4604      	mov	r4, r0
 800e360:	6003      	str	r3, [r0, #0]
 800e362:	f04f 0900 	mov.w	r9, #0
 800e366:	07eb      	lsls	r3, r5, #31
 800e368:	d50a      	bpl.n	800e380 <__pow5mult+0x84>
 800e36a:	4639      	mov	r1, r7
 800e36c:	4622      	mov	r2, r4
 800e36e:	4630      	mov	r0, r6
 800e370:	f7ff ff1a 	bl	800e1a8 <__multiply>
 800e374:	4639      	mov	r1, r7
 800e376:	4680      	mov	r8, r0
 800e378:	4630      	mov	r0, r6
 800e37a:	f7ff fe47 	bl	800e00c <_Bfree>
 800e37e:	4647      	mov	r7, r8
 800e380:	106d      	asrs	r5, r5, #1
 800e382:	d00b      	beq.n	800e39c <__pow5mult+0xa0>
 800e384:	6820      	ldr	r0, [r4, #0]
 800e386:	b938      	cbnz	r0, 800e398 <__pow5mult+0x9c>
 800e388:	4622      	mov	r2, r4
 800e38a:	4621      	mov	r1, r4
 800e38c:	4630      	mov	r0, r6
 800e38e:	f7ff ff0b 	bl	800e1a8 <__multiply>
 800e392:	6020      	str	r0, [r4, #0]
 800e394:	f8c0 9000 	str.w	r9, [r0]
 800e398:	4604      	mov	r4, r0
 800e39a:	e7e4      	b.n	800e366 <__pow5mult+0x6a>
 800e39c:	4638      	mov	r0, r7
 800e39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a2:	bf00      	nop
 800e3a4:	0800f688 	.word	0x0800f688
 800e3a8:	0800f4b9 	.word	0x0800f4b9
 800e3ac:	0800f53c 	.word	0x0800f53c

0800e3b0 <__lshift>:
 800e3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b4:	460c      	mov	r4, r1
 800e3b6:	6849      	ldr	r1, [r1, #4]
 800e3b8:	6923      	ldr	r3, [r4, #16]
 800e3ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3be:	68a3      	ldr	r3, [r4, #8]
 800e3c0:	4607      	mov	r7, r0
 800e3c2:	4691      	mov	r9, r2
 800e3c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3c8:	f108 0601 	add.w	r6, r8, #1
 800e3cc:	42b3      	cmp	r3, r6
 800e3ce:	db0b      	blt.n	800e3e8 <__lshift+0x38>
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	f7ff fddb 	bl	800df8c <_Balloc>
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	b948      	cbnz	r0, 800e3ee <__lshift+0x3e>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	4b2a      	ldr	r3, [pc, #168]	; (800e488 <__lshift+0xd8>)
 800e3de:	482b      	ldr	r0, [pc, #172]	; (800e48c <__lshift+0xdc>)
 800e3e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3e4:	f000 fa5c 	bl	800e8a0 <__assert_func>
 800e3e8:	3101      	adds	r1, #1
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	e7ee      	b.n	800e3cc <__lshift+0x1c>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	f100 0114 	add.w	r1, r0, #20
 800e3f4:	f100 0210 	add.w	r2, r0, #16
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	4553      	cmp	r3, sl
 800e3fc:	db37      	blt.n	800e46e <__lshift+0xbe>
 800e3fe:	6920      	ldr	r0, [r4, #16]
 800e400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e404:	f104 0314 	add.w	r3, r4, #20
 800e408:	f019 091f 	ands.w	r9, r9, #31
 800e40c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e414:	d02f      	beq.n	800e476 <__lshift+0xc6>
 800e416:	f1c9 0e20 	rsb	lr, r9, #32
 800e41a:	468a      	mov	sl, r1
 800e41c:	f04f 0c00 	mov.w	ip, #0
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	fa02 f209 	lsl.w	r2, r2, r9
 800e426:	ea42 020c 	orr.w	r2, r2, ip
 800e42a:	f84a 2b04 	str.w	r2, [sl], #4
 800e42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e432:	4298      	cmp	r0, r3
 800e434:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e438:	d8f2      	bhi.n	800e420 <__lshift+0x70>
 800e43a:	1b03      	subs	r3, r0, r4
 800e43c:	3b15      	subs	r3, #21
 800e43e:	f023 0303 	bic.w	r3, r3, #3
 800e442:	3304      	adds	r3, #4
 800e444:	f104 0215 	add.w	r2, r4, #21
 800e448:	4290      	cmp	r0, r2
 800e44a:	bf38      	it	cc
 800e44c:	2304      	movcc	r3, #4
 800e44e:	f841 c003 	str.w	ip, [r1, r3]
 800e452:	f1bc 0f00 	cmp.w	ip, #0
 800e456:	d001      	beq.n	800e45c <__lshift+0xac>
 800e458:	f108 0602 	add.w	r6, r8, #2
 800e45c:	3e01      	subs	r6, #1
 800e45e:	4638      	mov	r0, r7
 800e460:	612e      	str	r6, [r5, #16]
 800e462:	4621      	mov	r1, r4
 800e464:	f7ff fdd2 	bl	800e00c <_Bfree>
 800e468:	4628      	mov	r0, r5
 800e46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e472:	3301      	adds	r3, #1
 800e474:	e7c1      	b.n	800e3fa <__lshift+0x4a>
 800e476:	3904      	subs	r1, #4
 800e478:	f853 2b04 	ldr.w	r2, [r3], #4
 800e47c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e480:	4298      	cmp	r0, r3
 800e482:	d8f9      	bhi.n	800e478 <__lshift+0xc8>
 800e484:	e7ea      	b.n	800e45c <__lshift+0xac>
 800e486:	bf00      	nop
 800e488:	0800f52b 	.word	0x0800f52b
 800e48c:	0800f53c 	.word	0x0800f53c

0800e490 <__mcmp>:
 800e490:	b530      	push	{r4, r5, lr}
 800e492:	6902      	ldr	r2, [r0, #16]
 800e494:	690c      	ldr	r4, [r1, #16]
 800e496:	1b12      	subs	r2, r2, r4
 800e498:	d10e      	bne.n	800e4b8 <__mcmp+0x28>
 800e49a:	f100 0314 	add.w	r3, r0, #20
 800e49e:	3114      	adds	r1, #20
 800e4a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4b0:	42a5      	cmp	r5, r4
 800e4b2:	d003      	beq.n	800e4bc <__mcmp+0x2c>
 800e4b4:	d305      	bcc.n	800e4c2 <__mcmp+0x32>
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	bd30      	pop	{r4, r5, pc}
 800e4bc:	4283      	cmp	r3, r0
 800e4be:	d3f3      	bcc.n	800e4a8 <__mcmp+0x18>
 800e4c0:	e7fa      	b.n	800e4b8 <__mcmp+0x28>
 800e4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c6:	e7f7      	b.n	800e4b8 <__mcmp+0x28>

0800e4c8 <__mdiff>:
 800e4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	4690      	mov	r8, r2
 800e4d6:	f7ff ffdb 	bl	800e490 <__mcmp>
 800e4da:	1e05      	subs	r5, r0, #0
 800e4dc:	d110      	bne.n	800e500 <__mdiff+0x38>
 800e4de:	4629      	mov	r1, r5
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff fd53 	bl	800df8c <_Balloc>
 800e4e6:	b930      	cbnz	r0, 800e4f6 <__mdiff+0x2e>
 800e4e8:	4b3a      	ldr	r3, [pc, #232]	; (800e5d4 <__mdiff+0x10c>)
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	f240 2132 	movw	r1, #562	; 0x232
 800e4f0:	4839      	ldr	r0, [pc, #228]	; (800e5d8 <__mdiff+0x110>)
 800e4f2:	f000 f9d5 	bl	800e8a0 <__assert_func>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e500:	bfa4      	itt	ge
 800e502:	4643      	movge	r3, r8
 800e504:	46a0      	movge	r8, r4
 800e506:	4630      	mov	r0, r6
 800e508:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e50c:	bfa6      	itte	ge
 800e50e:	461c      	movge	r4, r3
 800e510:	2500      	movge	r5, #0
 800e512:	2501      	movlt	r5, #1
 800e514:	f7ff fd3a 	bl	800df8c <_Balloc>
 800e518:	b920      	cbnz	r0, 800e524 <__mdiff+0x5c>
 800e51a:	4b2e      	ldr	r3, [pc, #184]	; (800e5d4 <__mdiff+0x10c>)
 800e51c:	4602      	mov	r2, r0
 800e51e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e522:	e7e5      	b.n	800e4f0 <__mdiff+0x28>
 800e524:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e528:	6926      	ldr	r6, [r4, #16]
 800e52a:	60c5      	str	r5, [r0, #12]
 800e52c:	f104 0914 	add.w	r9, r4, #20
 800e530:	f108 0514 	add.w	r5, r8, #20
 800e534:	f100 0e14 	add.w	lr, r0, #20
 800e538:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e53c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e540:	f108 0210 	add.w	r2, r8, #16
 800e544:	46f2      	mov	sl, lr
 800e546:	2100      	movs	r1, #0
 800e548:	f859 3b04 	ldr.w	r3, [r9], #4
 800e54c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e550:	fa1f f883 	uxth.w	r8, r3
 800e554:	fa11 f18b 	uxtah	r1, r1, fp
 800e558:	0c1b      	lsrs	r3, r3, #16
 800e55a:	eba1 0808 	sub.w	r8, r1, r8
 800e55e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e562:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e566:	fa1f f888 	uxth.w	r8, r8
 800e56a:	1419      	asrs	r1, r3, #16
 800e56c:	454e      	cmp	r6, r9
 800e56e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e572:	f84a 3b04 	str.w	r3, [sl], #4
 800e576:	d8e7      	bhi.n	800e548 <__mdiff+0x80>
 800e578:	1b33      	subs	r3, r6, r4
 800e57a:	3b15      	subs	r3, #21
 800e57c:	f023 0303 	bic.w	r3, r3, #3
 800e580:	3304      	adds	r3, #4
 800e582:	3415      	adds	r4, #21
 800e584:	42a6      	cmp	r6, r4
 800e586:	bf38      	it	cc
 800e588:	2304      	movcc	r3, #4
 800e58a:	441d      	add	r5, r3
 800e58c:	4473      	add	r3, lr
 800e58e:	469e      	mov	lr, r3
 800e590:	462e      	mov	r6, r5
 800e592:	4566      	cmp	r6, ip
 800e594:	d30e      	bcc.n	800e5b4 <__mdiff+0xec>
 800e596:	f10c 0203 	add.w	r2, ip, #3
 800e59a:	1b52      	subs	r2, r2, r5
 800e59c:	f022 0203 	bic.w	r2, r2, #3
 800e5a0:	3d03      	subs	r5, #3
 800e5a2:	45ac      	cmp	ip, r5
 800e5a4:	bf38      	it	cc
 800e5a6:	2200      	movcc	r2, #0
 800e5a8:	441a      	add	r2, r3
 800e5aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5ae:	b17b      	cbz	r3, 800e5d0 <__mdiff+0x108>
 800e5b0:	6107      	str	r7, [r0, #16]
 800e5b2:	e7a3      	b.n	800e4fc <__mdiff+0x34>
 800e5b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5b8:	fa11 f288 	uxtah	r2, r1, r8
 800e5bc:	1414      	asrs	r4, r2, #16
 800e5be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5c2:	b292      	uxth	r2, r2
 800e5c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5c8:	f84e 2b04 	str.w	r2, [lr], #4
 800e5cc:	1421      	asrs	r1, r4, #16
 800e5ce:	e7e0      	b.n	800e592 <__mdiff+0xca>
 800e5d0:	3f01      	subs	r7, #1
 800e5d2:	e7ea      	b.n	800e5aa <__mdiff+0xe2>
 800e5d4:	0800f52b 	.word	0x0800f52b
 800e5d8:	0800f53c 	.word	0x0800f53c

0800e5dc <__d2b>:
 800e5dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5e0:	4689      	mov	r9, r1
 800e5e2:	2101      	movs	r1, #1
 800e5e4:	ec57 6b10 	vmov	r6, r7, d0
 800e5e8:	4690      	mov	r8, r2
 800e5ea:	f7ff fccf 	bl	800df8c <_Balloc>
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	b930      	cbnz	r0, 800e600 <__d2b+0x24>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	4b25      	ldr	r3, [pc, #148]	; (800e68c <__d2b+0xb0>)
 800e5f6:	4826      	ldr	r0, [pc, #152]	; (800e690 <__d2b+0xb4>)
 800e5f8:	f240 310a 	movw	r1, #778	; 0x30a
 800e5fc:	f000 f950 	bl	800e8a0 <__assert_func>
 800e600:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e608:	bb35      	cbnz	r5, 800e658 <__d2b+0x7c>
 800e60a:	2e00      	cmp	r6, #0
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	d028      	beq.n	800e662 <__d2b+0x86>
 800e610:	4668      	mov	r0, sp
 800e612:	9600      	str	r6, [sp, #0]
 800e614:	f7ff fd82 	bl	800e11c <__lo0bits>
 800e618:	9900      	ldr	r1, [sp, #0]
 800e61a:	b300      	cbz	r0, 800e65e <__d2b+0x82>
 800e61c:	9a01      	ldr	r2, [sp, #4]
 800e61e:	f1c0 0320 	rsb	r3, r0, #32
 800e622:	fa02 f303 	lsl.w	r3, r2, r3
 800e626:	430b      	orrs	r3, r1
 800e628:	40c2      	lsrs	r2, r0
 800e62a:	6163      	str	r3, [r4, #20]
 800e62c:	9201      	str	r2, [sp, #4]
 800e62e:	9b01      	ldr	r3, [sp, #4]
 800e630:	61a3      	str	r3, [r4, #24]
 800e632:	2b00      	cmp	r3, #0
 800e634:	bf14      	ite	ne
 800e636:	2202      	movne	r2, #2
 800e638:	2201      	moveq	r2, #1
 800e63a:	6122      	str	r2, [r4, #16]
 800e63c:	b1d5      	cbz	r5, 800e674 <__d2b+0x98>
 800e63e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e642:	4405      	add	r5, r0
 800e644:	f8c9 5000 	str.w	r5, [r9]
 800e648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e64c:	f8c8 0000 	str.w	r0, [r8]
 800e650:	4620      	mov	r0, r4
 800e652:	b003      	add	sp, #12
 800e654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e65c:	e7d5      	b.n	800e60a <__d2b+0x2e>
 800e65e:	6161      	str	r1, [r4, #20]
 800e660:	e7e5      	b.n	800e62e <__d2b+0x52>
 800e662:	a801      	add	r0, sp, #4
 800e664:	f7ff fd5a 	bl	800e11c <__lo0bits>
 800e668:	9b01      	ldr	r3, [sp, #4]
 800e66a:	6163      	str	r3, [r4, #20]
 800e66c:	2201      	movs	r2, #1
 800e66e:	6122      	str	r2, [r4, #16]
 800e670:	3020      	adds	r0, #32
 800e672:	e7e3      	b.n	800e63c <__d2b+0x60>
 800e674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e67c:	f8c9 0000 	str.w	r0, [r9]
 800e680:	6918      	ldr	r0, [r3, #16]
 800e682:	f7ff fd2b 	bl	800e0dc <__hi0bits>
 800e686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e68a:	e7df      	b.n	800e64c <__d2b+0x70>
 800e68c:	0800f52b 	.word	0x0800f52b
 800e690:	0800f53c 	.word	0x0800f53c

0800e694 <_calloc_r>:
 800e694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e696:	fba1 2402 	umull	r2, r4, r1, r2
 800e69a:	b94c      	cbnz	r4, 800e6b0 <_calloc_r+0x1c>
 800e69c:	4611      	mov	r1, r2
 800e69e:	9201      	str	r2, [sp, #4]
 800e6a0:	f000 f87a 	bl	800e798 <_malloc_r>
 800e6a4:	9a01      	ldr	r2, [sp, #4]
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	b930      	cbnz	r0, 800e6b8 <_calloc_r+0x24>
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	b003      	add	sp, #12
 800e6ae:	bd30      	pop	{r4, r5, pc}
 800e6b0:	220c      	movs	r2, #12
 800e6b2:	6002      	str	r2, [r0, #0]
 800e6b4:	2500      	movs	r5, #0
 800e6b6:	e7f8      	b.n	800e6aa <_calloc_r+0x16>
 800e6b8:	4621      	mov	r1, r4
 800e6ba:	f7fe f96f 	bl	800c99c <memset>
 800e6be:	e7f4      	b.n	800e6aa <_calloc_r+0x16>

0800e6c0 <_free_r>:
 800e6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6c2:	2900      	cmp	r1, #0
 800e6c4:	d044      	beq.n	800e750 <_free_r+0x90>
 800e6c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ca:	9001      	str	r0, [sp, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f1a1 0404 	sub.w	r4, r1, #4
 800e6d2:	bfb8      	it	lt
 800e6d4:	18e4      	addlt	r4, r4, r3
 800e6d6:	f000 f925 	bl	800e924 <__malloc_lock>
 800e6da:	4a1e      	ldr	r2, [pc, #120]	; (800e754 <_free_r+0x94>)
 800e6dc:	9801      	ldr	r0, [sp, #4]
 800e6de:	6813      	ldr	r3, [r2, #0]
 800e6e0:	b933      	cbnz	r3, 800e6f0 <_free_r+0x30>
 800e6e2:	6063      	str	r3, [r4, #4]
 800e6e4:	6014      	str	r4, [r2, #0]
 800e6e6:	b003      	add	sp, #12
 800e6e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6ec:	f000 b920 	b.w	800e930 <__malloc_unlock>
 800e6f0:	42a3      	cmp	r3, r4
 800e6f2:	d908      	bls.n	800e706 <_free_r+0x46>
 800e6f4:	6825      	ldr	r5, [r4, #0]
 800e6f6:	1961      	adds	r1, r4, r5
 800e6f8:	428b      	cmp	r3, r1
 800e6fa:	bf01      	itttt	eq
 800e6fc:	6819      	ldreq	r1, [r3, #0]
 800e6fe:	685b      	ldreq	r3, [r3, #4]
 800e700:	1949      	addeq	r1, r1, r5
 800e702:	6021      	streq	r1, [r4, #0]
 800e704:	e7ed      	b.n	800e6e2 <_free_r+0x22>
 800e706:	461a      	mov	r2, r3
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	b10b      	cbz	r3, 800e710 <_free_r+0x50>
 800e70c:	42a3      	cmp	r3, r4
 800e70e:	d9fa      	bls.n	800e706 <_free_r+0x46>
 800e710:	6811      	ldr	r1, [r2, #0]
 800e712:	1855      	adds	r5, r2, r1
 800e714:	42a5      	cmp	r5, r4
 800e716:	d10b      	bne.n	800e730 <_free_r+0x70>
 800e718:	6824      	ldr	r4, [r4, #0]
 800e71a:	4421      	add	r1, r4
 800e71c:	1854      	adds	r4, r2, r1
 800e71e:	42a3      	cmp	r3, r4
 800e720:	6011      	str	r1, [r2, #0]
 800e722:	d1e0      	bne.n	800e6e6 <_free_r+0x26>
 800e724:	681c      	ldr	r4, [r3, #0]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	6053      	str	r3, [r2, #4]
 800e72a:	4421      	add	r1, r4
 800e72c:	6011      	str	r1, [r2, #0]
 800e72e:	e7da      	b.n	800e6e6 <_free_r+0x26>
 800e730:	d902      	bls.n	800e738 <_free_r+0x78>
 800e732:	230c      	movs	r3, #12
 800e734:	6003      	str	r3, [r0, #0]
 800e736:	e7d6      	b.n	800e6e6 <_free_r+0x26>
 800e738:	6825      	ldr	r5, [r4, #0]
 800e73a:	1961      	adds	r1, r4, r5
 800e73c:	428b      	cmp	r3, r1
 800e73e:	bf04      	itt	eq
 800e740:	6819      	ldreq	r1, [r3, #0]
 800e742:	685b      	ldreq	r3, [r3, #4]
 800e744:	6063      	str	r3, [r4, #4]
 800e746:	bf04      	itt	eq
 800e748:	1949      	addeq	r1, r1, r5
 800e74a:	6021      	streq	r1, [r4, #0]
 800e74c:	6054      	str	r4, [r2, #4]
 800e74e:	e7ca      	b.n	800e6e6 <_free_r+0x26>
 800e750:	b003      	add	sp, #12
 800e752:	bd30      	pop	{r4, r5, pc}
 800e754:	20004b2c 	.word	0x20004b2c

0800e758 <sbrk_aligned>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	4e0e      	ldr	r6, [pc, #56]	; (800e794 <sbrk_aligned+0x3c>)
 800e75c:	460c      	mov	r4, r1
 800e75e:	6831      	ldr	r1, [r6, #0]
 800e760:	4605      	mov	r5, r0
 800e762:	b911      	cbnz	r1, 800e76a <sbrk_aligned+0x12>
 800e764:	f000 f88c 	bl	800e880 <_sbrk_r>
 800e768:	6030      	str	r0, [r6, #0]
 800e76a:	4621      	mov	r1, r4
 800e76c:	4628      	mov	r0, r5
 800e76e:	f000 f887 	bl	800e880 <_sbrk_r>
 800e772:	1c43      	adds	r3, r0, #1
 800e774:	d00a      	beq.n	800e78c <sbrk_aligned+0x34>
 800e776:	1cc4      	adds	r4, r0, #3
 800e778:	f024 0403 	bic.w	r4, r4, #3
 800e77c:	42a0      	cmp	r0, r4
 800e77e:	d007      	beq.n	800e790 <sbrk_aligned+0x38>
 800e780:	1a21      	subs	r1, r4, r0
 800e782:	4628      	mov	r0, r5
 800e784:	f000 f87c 	bl	800e880 <_sbrk_r>
 800e788:	3001      	adds	r0, #1
 800e78a:	d101      	bne.n	800e790 <sbrk_aligned+0x38>
 800e78c:	f04f 34ff 	mov.w	r4, #4294967295
 800e790:	4620      	mov	r0, r4
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	20004b30 	.word	0x20004b30

0800e798 <_malloc_r>:
 800e798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e79c:	1ccd      	adds	r5, r1, #3
 800e79e:	f025 0503 	bic.w	r5, r5, #3
 800e7a2:	3508      	adds	r5, #8
 800e7a4:	2d0c      	cmp	r5, #12
 800e7a6:	bf38      	it	cc
 800e7a8:	250c      	movcc	r5, #12
 800e7aa:	2d00      	cmp	r5, #0
 800e7ac:	4607      	mov	r7, r0
 800e7ae:	db01      	blt.n	800e7b4 <_malloc_r+0x1c>
 800e7b0:	42a9      	cmp	r1, r5
 800e7b2:	d905      	bls.n	800e7c0 <_malloc_r+0x28>
 800e7b4:	230c      	movs	r3, #12
 800e7b6:	603b      	str	r3, [r7, #0]
 800e7b8:	2600      	movs	r6, #0
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c0:	4e2e      	ldr	r6, [pc, #184]	; (800e87c <_malloc_r+0xe4>)
 800e7c2:	f000 f8af 	bl	800e924 <__malloc_lock>
 800e7c6:	6833      	ldr	r3, [r6, #0]
 800e7c8:	461c      	mov	r4, r3
 800e7ca:	bb34      	cbnz	r4, 800e81a <_malloc_r+0x82>
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	4638      	mov	r0, r7
 800e7d0:	f7ff ffc2 	bl	800e758 <sbrk_aligned>
 800e7d4:	1c43      	adds	r3, r0, #1
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	d14d      	bne.n	800e876 <_malloc_r+0xde>
 800e7da:	6834      	ldr	r4, [r6, #0]
 800e7dc:	4626      	mov	r6, r4
 800e7de:	2e00      	cmp	r6, #0
 800e7e0:	d140      	bne.n	800e864 <_malloc_r+0xcc>
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4638      	mov	r0, r7
 800e7e8:	eb04 0803 	add.w	r8, r4, r3
 800e7ec:	f000 f848 	bl	800e880 <_sbrk_r>
 800e7f0:	4580      	cmp	r8, r0
 800e7f2:	d13a      	bne.n	800e86a <_malloc_r+0xd2>
 800e7f4:	6821      	ldr	r1, [r4, #0]
 800e7f6:	3503      	adds	r5, #3
 800e7f8:	1a6d      	subs	r5, r5, r1
 800e7fa:	f025 0503 	bic.w	r5, r5, #3
 800e7fe:	3508      	adds	r5, #8
 800e800:	2d0c      	cmp	r5, #12
 800e802:	bf38      	it	cc
 800e804:	250c      	movcc	r5, #12
 800e806:	4629      	mov	r1, r5
 800e808:	4638      	mov	r0, r7
 800e80a:	f7ff ffa5 	bl	800e758 <sbrk_aligned>
 800e80e:	3001      	adds	r0, #1
 800e810:	d02b      	beq.n	800e86a <_malloc_r+0xd2>
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	442b      	add	r3, r5
 800e816:	6023      	str	r3, [r4, #0]
 800e818:	e00e      	b.n	800e838 <_malloc_r+0xa0>
 800e81a:	6822      	ldr	r2, [r4, #0]
 800e81c:	1b52      	subs	r2, r2, r5
 800e81e:	d41e      	bmi.n	800e85e <_malloc_r+0xc6>
 800e820:	2a0b      	cmp	r2, #11
 800e822:	d916      	bls.n	800e852 <_malloc_r+0xba>
 800e824:	1961      	adds	r1, r4, r5
 800e826:	42a3      	cmp	r3, r4
 800e828:	6025      	str	r5, [r4, #0]
 800e82a:	bf18      	it	ne
 800e82c:	6059      	strne	r1, [r3, #4]
 800e82e:	6863      	ldr	r3, [r4, #4]
 800e830:	bf08      	it	eq
 800e832:	6031      	streq	r1, [r6, #0]
 800e834:	5162      	str	r2, [r4, r5]
 800e836:	604b      	str	r3, [r1, #4]
 800e838:	4638      	mov	r0, r7
 800e83a:	f104 060b 	add.w	r6, r4, #11
 800e83e:	f000 f877 	bl	800e930 <__malloc_unlock>
 800e842:	f026 0607 	bic.w	r6, r6, #7
 800e846:	1d23      	adds	r3, r4, #4
 800e848:	1af2      	subs	r2, r6, r3
 800e84a:	d0b6      	beq.n	800e7ba <_malloc_r+0x22>
 800e84c:	1b9b      	subs	r3, r3, r6
 800e84e:	50a3      	str	r3, [r4, r2]
 800e850:	e7b3      	b.n	800e7ba <_malloc_r+0x22>
 800e852:	6862      	ldr	r2, [r4, #4]
 800e854:	42a3      	cmp	r3, r4
 800e856:	bf0c      	ite	eq
 800e858:	6032      	streq	r2, [r6, #0]
 800e85a:	605a      	strne	r2, [r3, #4]
 800e85c:	e7ec      	b.n	800e838 <_malloc_r+0xa0>
 800e85e:	4623      	mov	r3, r4
 800e860:	6864      	ldr	r4, [r4, #4]
 800e862:	e7b2      	b.n	800e7ca <_malloc_r+0x32>
 800e864:	4634      	mov	r4, r6
 800e866:	6876      	ldr	r6, [r6, #4]
 800e868:	e7b9      	b.n	800e7de <_malloc_r+0x46>
 800e86a:	230c      	movs	r3, #12
 800e86c:	603b      	str	r3, [r7, #0]
 800e86e:	4638      	mov	r0, r7
 800e870:	f000 f85e 	bl	800e930 <__malloc_unlock>
 800e874:	e7a1      	b.n	800e7ba <_malloc_r+0x22>
 800e876:	6025      	str	r5, [r4, #0]
 800e878:	e7de      	b.n	800e838 <_malloc_r+0xa0>
 800e87a:	bf00      	nop
 800e87c:	20004b2c 	.word	0x20004b2c

0800e880 <_sbrk_r>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	4d06      	ldr	r5, [pc, #24]	; (800e89c <_sbrk_r+0x1c>)
 800e884:	2300      	movs	r3, #0
 800e886:	4604      	mov	r4, r0
 800e888:	4608      	mov	r0, r1
 800e88a:	602b      	str	r3, [r5, #0]
 800e88c:	f7f4 fb8c 	bl	8002fa8 <_sbrk>
 800e890:	1c43      	adds	r3, r0, #1
 800e892:	d102      	bne.n	800e89a <_sbrk_r+0x1a>
 800e894:	682b      	ldr	r3, [r5, #0]
 800e896:	b103      	cbz	r3, 800e89a <_sbrk_r+0x1a>
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	bd38      	pop	{r3, r4, r5, pc}
 800e89c:	20004b34 	.word	0x20004b34

0800e8a0 <__assert_func>:
 800e8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8a2:	4614      	mov	r4, r2
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	4b09      	ldr	r3, [pc, #36]	; (800e8cc <__assert_func+0x2c>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4605      	mov	r5, r0
 800e8ac:	68d8      	ldr	r0, [r3, #12]
 800e8ae:	b14c      	cbz	r4, 800e8c4 <__assert_func+0x24>
 800e8b0:	4b07      	ldr	r3, [pc, #28]	; (800e8d0 <__assert_func+0x30>)
 800e8b2:	9100      	str	r1, [sp, #0]
 800e8b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8b8:	4906      	ldr	r1, [pc, #24]	; (800e8d4 <__assert_func+0x34>)
 800e8ba:	462b      	mov	r3, r5
 800e8bc:	f000 f80e 	bl	800e8dc <fiprintf>
 800e8c0:	f000 fa64 	bl	800ed8c <abort>
 800e8c4:	4b04      	ldr	r3, [pc, #16]	; (800e8d8 <__assert_func+0x38>)
 800e8c6:	461c      	mov	r4, r3
 800e8c8:	e7f3      	b.n	800e8b2 <__assert_func+0x12>
 800e8ca:	bf00      	nop
 800e8cc:	20000010 	.word	0x20000010
 800e8d0:	0800f694 	.word	0x0800f694
 800e8d4:	0800f6a1 	.word	0x0800f6a1
 800e8d8:	0800f6cf 	.word	0x0800f6cf

0800e8dc <fiprintf>:
 800e8dc:	b40e      	push	{r1, r2, r3}
 800e8de:	b503      	push	{r0, r1, lr}
 800e8e0:	4601      	mov	r1, r0
 800e8e2:	ab03      	add	r3, sp, #12
 800e8e4:	4805      	ldr	r0, [pc, #20]	; (800e8fc <fiprintf+0x20>)
 800e8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ea:	6800      	ldr	r0, [r0, #0]
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	f000 f84f 	bl	800e990 <_vfiprintf_r>
 800e8f2:	b002      	add	sp, #8
 800e8f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8f8:	b003      	add	sp, #12
 800e8fa:	4770      	bx	lr
 800e8fc:	20000010 	.word	0x20000010

0800e900 <__ascii_mbtowc>:
 800e900:	b082      	sub	sp, #8
 800e902:	b901      	cbnz	r1, 800e906 <__ascii_mbtowc+0x6>
 800e904:	a901      	add	r1, sp, #4
 800e906:	b142      	cbz	r2, 800e91a <__ascii_mbtowc+0x1a>
 800e908:	b14b      	cbz	r3, 800e91e <__ascii_mbtowc+0x1e>
 800e90a:	7813      	ldrb	r3, [r2, #0]
 800e90c:	600b      	str	r3, [r1, #0]
 800e90e:	7812      	ldrb	r2, [r2, #0]
 800e910:	1e10      	subs	r0, r2, #0
 800e912:	bf18      	it	ne
 800e914:	2001      	movne	r0, #1
 800e916:	b002      	add	sp, #8
 800e918:	4770      	bx	lr
 800e91a:	4610      	mov	r0, r2
 800e91c:	e7fb      	b.n	800e916 <__ascii_mbtowc+0x16>
 800e91e:	f06f 0001 	mvn.w	r0, #1
 800e922:	e7f8      	b.n	800e916 <__ascii_mbtowc+0x16>

0800e924 <__malloc_lock>:
 800e924:	4801      	ldr	r0, [pc, #4]	; (800e92c <__malloc_lock+0x8>)
 800e926:	f000 bbf1 	b.w	800f10c <__retarget_lock_acquire_recursive>
 800e92a:	bf00      	nop
 800e92c:	20004b38 	.word	0x20004b38

0800e930 <__malloc_unlock>:
 800e930:	4801      	ldr	r0, [pc, #4]	; (800e938 <__malloc_unlock+0x8>)
 800e932:	f000 bbec 	b.w	800f10e <__retarget_lock_release_recursive>
 800e936:	bf00      	nop
 800e938:	20004b38 	.word	0x20004b38

0800e93c <__sfputc_r>:
 800e93c:	6893      	ldr	r3, [r2, #8]
 800e93e:	3b01      	subs	r3, #1
 800e940:	2b00      	cmp	r3, #0
 800e942:	b410      	push	{r4}
 800e944:	6093      	str	r3, [r2, #8]
 800e946:	da08      	bge.n	800e95a <__sfputc_r+0x1e>
 800e948:	6994      	ldr	r4, [r2, #24]
 800e94a:	42a3      	cmp	r3, r4
 800e94c:	db01      	blt.n	800e952 <__sfputc_r+0x16>
 800e94e:	290a      	cmp	r1, #10
 800e950:	d103      	bne.n	800e95a <__sfputc_r+0x1e>
 800e952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e956:	f000 b94b 	b.w	800ebf0 <__swbuf_r>
 800e95a:	6813      	ldr	r3, [r2, #0]
 800e95c:	1c58      	adds	r0, r3, #1
 800e95e:	6010      	str	r0, [r2, #0]
 800e960:	7019      	strb	r1, [r3, #0]
 800e962:	4608      	mov	r0, r1
 800e964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e968:	4770      	bx	lr

0800e96a <__sfputs_r>:
 800e96a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96c:	4606      	mov	r6, r0
 800e96e:	460f      	mov	r7, r1
 800e970:	4614      	mov	r4, r2
 800e972:	18d5      	adds	r5, r2, r3
 800e974:	42ac      	cmp	r4, r5
 800e976:	d101      	bne.n	800e97c <__sfputs_r+0x12>
 800e978:	2000      	movs	r0, #0
 800e97a:	e007      	b.n	800e98c <__sfputs_r+0x22>
 800e97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e980:	463a      	mov	r2, r7
 800e982:	4630      	mov	r0, r6
 800e984:	f7ff ffda 	bl	800e93c <__sfputc_r>
 800e988:	1c43      	adds	r3, r0, #1
 800e98a:	d1f3      	bne.n	800e974 <__sfputs_r+0xa>
 800e98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e990 <_vfiprintf_r>:
 800e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	460d      	mov	r5, r1
 800e996:	b09d      	sub	sp, #116	; 0x74
 800e998:	4614      	mov	r4, r2
 800e99a:	4698      	mov	r8, r3
 800e99c:	4606      	mov	r6, r0
 800e99e:	b118      	cbz	r0, 800e9a8 <_vfiprintf_r+0x18>
 800e9a0:	6983      	ldr	r3, [r0, #24]
 800e9a2:	b90b      	cbnz	r3, 800e9a8 <_vfiprintf_r+0x18>
 800e9a4:	f000 fb14 	bl	800efd0 <__sinit>
 800e9a8:	4b89      	ldr	r3, [pc, #548]	; (800ebd0 <_vfiprintf_r+0x240>)
 800e9aa:	429d      	cmp	r5, r3
 800e9ac:	d11b      	bne.n	800e9e6 <_vfiprintf_r+0x56>
 800e9ae:	6875      	ldr	r5, [r6, #4]
 800e9b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9b2:	07d9      	lsls	r1, r3, #31
 800e9b4:	d405      	bmi.n	800e9c2 <_vfiprintf_r+0x32>
 800e9b6:	89ab      	ldrh	r3, [r5, #12]
 800e9b8:	059a      	lsls	r2, r3, #22
 800e9ba:	d402      	bmi.n	800e9c2 <_vfiprintf_r+0x32>
 800e9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9be:	f000 fba5 	bl	800f10c <__retarget_lock_acquire_recursive>
 800e9c2:	89ab      	ldrh	r3, [r5, #12]
 800e9c4:	071b      	lsls	r3, r3, #28
 800e9c6:	d501      	bpl.n	800e9cc <_vfiprintf_r+0x3c>
 800e9c8:	692b      	ldr	r3, [r5, #16]
 800e9ca:	b9eb      	cbnz	r3, 800ea08 <_vfiprintf_r+0x78>
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f000 f96e 	bl	800ecb0 <__swsetup_r>
 800e9d4:	b1c0      	cbz	r0, 800ea08 <_vfiprintf_r+0x78>
 800e9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9d8:	07dc      	lsls	r4, r3, #31
 800e9da:	d50e      	bpl.n	800e9fa <_vfiprintf_r+0x6a>
 800e9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e0:	b01d      	add	sp, #116	; 0x74
 800e9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e6:	4b7b      	ldr	r3, [pc, #492]	; (800ebd4 <_vfiprintf_r+0x244>)
 800e9e8:	429d      	cmp	r5, r3
 800e9ea:	d101      	bne.n	800e9f0 <_vfiprintf_r+0x60>
 800e9ec:	68b5      	ldr	r5, [r6, #8]
 800e9ee:	e7df      	b.n	800e9b0 <_vfiprintf_r+0x20>
 800e9f0:	4b79      	ldr	r3, [pc, #484]	; (800ebd8 <_vfiprintf_r+0x248>)
 800e9f2:	429d      	cmp	r5, r3
 800e9f4:	bf08      	it	eq
 800e9f6:	68f5      	ldreq	r5, [r6, #12]
 800e9f8:	e7da      	b.n	800e9b0 <_vfiprintf_r+0x20>
 800e9fa:	89ab      	ldrh	r3, [r5, #12]
 800e9fc:	0598      	lsls	r0, r3, #22
 800e9fe:	d4ed      	bmi.n	800e9dc <_vfiprintf_r+0x4c>
 800ea00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea02:	f000 fb84 	bl	800f10e <__retarget_lock_release_recursive>
 800ea06:	e7e9      	b.n	800e9dc <_vfiprintf_r+0x4c>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea0c:	2320      	movs	r3, #32
 800ea0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea16:	2330      	movs	r3, #48	; 0x30
 800ea18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ebdc <_vfiprintf_r+0x24c>
 800ea1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea20:	f04f 0901 	mov.w	r9, #1
 800ea24:	4623      	mov	r3, r4
 800ea26:	469a      	mov	sl, r3
 800ea28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea2c:	b10a      	cbz	r2, 800ea32 <_vfiprintf_r+0xa2>
 800ea2e:	2a25      	cmp	r2, #37	; 0x25
 800ea30:	d1f9      	bne.n	800ea26 <_vfiprintf_r+0x96>
 800ea32:	ebba 0b04 	subs.w	fp, sl, r4
 800ea36:	d00b      	beq.n	800ea50 <_vfiprintf_r+0xc0>
 800ea38:	465b      	mov	r3, fp
 800ea3a:	4622      	mov	r2, r4
 800ea3c:	4629      	mov	r1, r5
 800ea3e:	4630      	mov	r0, r6
 800ea40:	f7ff ff93 	bl	800e96a <__sfputs_r>
 800ea44:	3001      	adds	r0, #1
 800ea46:	f000 80aa 	beq.w	800eb9e <_vfiprintf_r+0x20e>
 800ea4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea4c:	445a      	add	r2, fp
 800ea4e:	9209      	str	r2, [sp, #36]	; 0x24
 800ea50:	f89a 3000 	ldrb.w	r3, [sl]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 80a2 	beq.w	800eb9e <_vfiprintf_r+0x20e>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea64:	f10a 0a01 	add.w	sl, sl, #1
 800ea68:	9304      	str	r3, [sp, #16]
 800ea6a:	9307      	str	r3, [sp, #28]
 800ea6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea70:	931a      	str	r3, [sp, #104]	; 0x68
 800ea72:	4654      	mov	r4, sl
 800ea74:	2205      	movs	r2, #5
 800ea76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea7a:	4858      	ldr	r0, [pc, #352]	; (800ebdc <_vfiprintf_r+0x24c>)
 800ea7c:	f7f1 fbb8 	bl	80001f0 <memchr>
 800ea80:	9a04      	ldr	r2, [sp, #16]
 800ea82:	b9d8      	cbnz	r0, 800eabc <_vfiprintf_r+0x12c>
 800ea84:	06d1      	lsls	r1, r2, #27
 800ea86:	bf44      	itt	mi
 800ea88:	2320      	movmi	r3, #32
 800ea8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea8e:	0713      	lsls	r3, r2, #28
 800ea90:	bf44      	itt	mi
 800ea92:	232b      	movmi	r3, #43	; 0x2b
 800ea94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea98:	f89a 3000 	ldrb.w	r3, [sl]
 800ea9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea9e:	d015      	beq.n	800eacc <_vfiprintf_r+0x13c>
 800eaa0:	9a07      	ldr	r2, [sp, #28]
 800eaa2:	4654      	mov	r4, sl
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	f04f 0c0a 	mov.w	ip, #10
 800eaaa:	4621      	mov	r1, r4
 800eaac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eab0:	3b30      	subs	r3, #48	; 0x30
 800eab2:	2b09      	cmp	r3, #9
 800eab4:	d94e      	bls.n	800eb54 <_vfiprintf_r+0x1c4>
 800eab6:	b1b0      	cbz	r0, 800eae6 <_vfiprintf_r+0x156>
 800eab8:	9207      	str	r2, [sp, #28]
 800eaba:	e014      	b.n	800eae6 <_vfiprintf_r+0x156>
 800eabc:	eba0 0308 	sub.w	r3, r0, r8
 800eac0:	fa09 f303 	lsl.w	r3, r9, r3
 800eac4:	4313      	orrs	r3, r2
 800eac6:	9304      	str	r3, [sp, #16]
 800eac8:	46a2      	mov	sl, r4
 800eaca:	e7d2      	b.n	800ea72 <_vfiprintf_r+0xe2>
 800eacc:	9b03      	ldr	r3, [sp, #12]
 800eace:	1d19      	adds	r1, r3, #4
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	9103      	str	r1, [sp, #12]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	bfbb      	ittet	lt
 800ead8:	425b      	neglt	r3, r3
 800eada:	f042 0202 	orrlt.w	r2, r2, #2
 800eade:	9307      	strge	r3, [sp, #28]
 800eae0:	9307      	strlt	r3, [sp, #28]
 800eae2:	bfb8      	it	lt
 800eae4:	9204      	strlt	r2, [sp, #16]
 800eae6:	7823      	ldrb	r3, [r4, #0]
 800eae8:	2b2e      	cmp	r3, #46	; 0x2e
 800eaea:	d10c      	bne.n	800eb06 <_vfiprintf_r+0x176>
 800eaec:	7863      	ldrb	r3, [r4, #1]
 800eaee:	2b2a      	cmp	r3, #42	; 0x2a
 800eaf0:	d135      	bne.n	800eb5e <_vfiprintf_r+0x1ce>
 800eaf2:	9b03      	ldr	r3, [sp, #12]
 800eaf4:	1d1a      	adds	r2, r3, #4
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	9203      	str	r2, [sp, #12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	bfb8      	it	lt
 800eafe:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb02:	3402      	adds	r4, #2
 800eb04:	9305      	str	r3, [sp, #20]
 800eb06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ebec <_vfiprintf_r+0x25c>
 800eb0a:	7821      	ldrb	r1, [r4, #0]
 800eb0c:	2203      	movs	r2, #3
 800eb0e:	4650      	mov	r0, sl
 800eb10:	f7f1 fb6e 	bl	80001f0 <memchr>
 800eb14:	b140      	cbz	r0, 800eb28 <_vfiprintf_r+0x198>
 800eb16:	2340      	movs	r3, #64	; 0x40
 800eb18:	eba0 000a 	sub.w	r0, r0, sl
 800eb1c:	fa03 f000 	lsl.w	r0, r3, r0
 800eb20:	9b04      	ldr	r3, [sp, #16]
 800eb22:	4303      	orrs	r3, r0
 800eb24:	3401      	adds	r4, #1
 800eb26:	9304      	str	r3, [sp, #16]
 800eb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb2c:	482c      	ldr	r0, [pc, #176]	; (800ebe0 <_vfiprintf_r+0x250>)
 800eb2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb32:	2206      	movs	r2, #6
 800eb34:	f7f1 fb5c 	bl	80001f0 <memchr>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d03f      	beq.n	800ebbc <_vfiprintf_r+0x22c>
 800eb3c:	4b29      	ldr	r3, [pc, #164]	; (800ebe4 <_vfiprintf_r+0x254>)
 800eb3e:	bb1b      	cbnz	r3, 800eb88 <_vfiprintf_r+0x1f8>
 800eb40:	9b03      	ldr	r3, [sp, #12]
 800eb42:	3307      	adds	r3, #7
 800eb44:	f023 0307 	bic.w	r3, r3, #7
 800eb48:	3308      	adds	r3, #8
 800eb4a:	9303      	str	r3, [sp, #12]
 800eb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb4e:	443b      	add	r3, r7
 800eb50:	9309      	str	r3, [sp, #36]	; 0x24
 800eb52:	e767      	b.n	800ea24 <_vfiprintf_r+0x94>
 800eb54:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb58:	460c      	mov	r4, r1
 800eb5a:	2001      	movs	r0, #1
 800eb5c:	e7a5      	b.n	800eaaa <_vfiprintf_r+0x11a>
 800eb5e:	2300      	movs	r3, #0
 800eb60:	3401      	adds	r4, #1
 800eb62:	9305      	str	r3, [sp, #20]
 800eb64:	4619      	mov	r1, r3
 800eb66:	f04f 0c0a 	mov.w	ip, #10
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb70:	3a30      	subs	r2, #48	; 0x30
 800eb72:	2a09      	cmp	r2, #9
 800eb74:	d903      	bls.n	800eb7e <_vfiprintf_r+0x1ee>
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d0c5      	beq.n	800eb06 <_vfiprintf_r+0x176>
 800eb7a:	9105      	str	r1, [sp, #20]
 800eb7c:	e7c3      	b.n	800eb06 <_vfiprintf_r+0x176>
 800eb7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb82:	4604      	mov	r4, r0
 800eb84:	2301      	movs	r3, #1
 800eb86:	e7f0      	b.n	800eb6a <_vfiprintf_r+0x1da>
 800eb88:	ab03      	add	r3, sp, #12
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	462a      	mov	r2, r5
 800eb8e:	4b16      	ldr	r3, [pc, #88]	; (800ebe8 <_vfiprintf_r+0x258>)
 800eb90:	a904      	add	r1, sp, #16
 800eb92:	4630      	mov	r0, r6
 800eb94:	f7fd ffaa 	bl	800caec <_printf_float>
 800eb98:	4607      	mov	r7, r0
 800eb9a:	1c78      	adds	r0, r7, #1
 800eb9c:	d1d6      	bne.n	800eb4c <_vfiprintf_r+0x1bc>
 800eb9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eba0:	07d9      	lsls	r1, r3, #31
 800eba2:	d405      	bmi.n	800ebb0 <_vfiprintf_r+0x220>
 800eba4:	89ab      	ldrh	r3, [r5, #12]
 800eba6:	059a      	lsls	r2, r3, #22
 800eba8:	d402      	bmi.n	800ebb0 <_vfiprintf_r+0x220>
 800ebaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebac:	f000 faaf 	bl	800f10e <__retarget_lock_release_recursive>
 800ebb0:	89ab      	ldrh	r3, [r5, #12]
 800ebb2:	065b      	lsls	r3, r3, #25
 800ebb4:	f53f af12 	bmi.w	800e9dc <_vfiprintf_r+0x4c>
 800ebb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebba:	e711      	b.n	800e9e0 <_vfiprintf_r+0x50>
 800ebbc:	ab03      	add	r3, sp, #12
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	462a      	mov	r2, r5
 800ebc2:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <_vfiprintf_r+0x258>)
 800ebc4:	a904      	add	r1, sp, #16
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f7fe fa34 	bl	800d034 <_printf_i>
 800ebcc:	e7e4      	b.n	800eb98 <_vfiprintf_r+0x208>
 800ebce:	bf00      	nop
 800ebd0:	0800f80c 	.word	0x0800f80c
 800ebd4:	0800f82c 	.word	0x0800f82c
 800ebd8:	0800f7ec 	.word	0x0800f7ec
 800ebdc:	0800f6da 	.word	0x0800f6da
 800ebe0:	0800f6e4 	.word	0x0800f6e4
 800ebe4:	0800caed 	.word	0x0800caed
 800ebe8:	0800e96b 	.word	0x0800e96b
 800ebec:	0800f6e0 	.word	0x0800f6e0

0800ebf0 <__swbuf_r>:
 800ebf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebf2:	460e      	mov	r6, r1
 800ebf4:	4614      	mov	r4, r2
 800ebf6:	4605      	mov	r5, r0
 800ebf8:	b118      	cbz	r0, 800ec02 <__swbuf_r+0x12>
 800ebfa:	6983      	ldr	r3, [r0, #24]
 800ebfc:	b90b      	cbnz	r3, 800ec02 <__swbuf_r+0x12>
 800ebfe:	f000 f9e7 	bl	800efd0 <__sinit>
 800ec02:	4b21      	ldr	r3, [pc, #132]	; (800ec88 <__swbuf_r+0x98>)
 800ec04:	429c      	cmp	r4, r3
 800ec06:	d12b      	bne.n	800ec60 <__swbuf_r+0x70>
 800ec08:	686c      	ldr	r4, [r5, #4]
 800ec0a:	69a3      	ldr	r3, [r4, #24]
 800ec0c:	60a3      	str	r3, [r4, #8]
 800ec0e:	89a3      	ldrh	r3, [r4, #12]
 800ec10:	071a      	lsls	r2, r3, #28
 800ec12:	d52f      	bpl.n	800ec74 <__swbuf_r+0x84>
 800ec14:	6923      	ldr	r3, [r4, #16]
 800ec16:	b36b      	cbz	r3, 800ec74 <__swbuf_r+0x84>
 800ec18:	6923      	ldr	r3, [r4, #16]
 800ec1a:	6820      	ldr	r0, [r4, #0]
 800ec1c:	1ac0      	subs	r0, r0, r3
 800ec1e:	6963      	ldr	r3, [r4, #20]
 800ec20:	b2f6      	uxtb	r6, r6
 800ec22:	4283      	cmp	r3, r0
 800ec24:	4637      	mov	r7, r6
 800ec26:	dc04      	bgt.n	800ec32 <__swbuf_r+0x42>
 800ec28:	4621      	mov	r1, r4
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f000 f93c 	bl	800eea8 <_fflush_r>
 800ec30:	bb30      	cbnz	r0, 800ec80 <__swbuf_r+0x90>
 800ec32:	68a3      	ldr	r3, [r4, #8]
 800ec34:	3b01      	subs	r3, #1
 800ec36:	60a3      	str	r3, [r4, #8]
 800ec38:	6823      	ldr	r3, [r4, #0]
 800ec3a:	1c5a      	adds	r2, r3, #1
 800ec3c:	6022      	str	r2, [r4, #0]
 800ec3e:	701e      	strb	r6, [r3, #0]
 800ec40:	6963      	ldr	r3, [r4, #20]
 800ec42:	3001      	adds	r0, #1
 800ec44:	4283      	cmp	r3, r0
 800ec46:	d004      	beq.n	800ec52 <__swbuf_r+0x62>
 800ec48:	89a3      	ldrh	r3, [r4, #12]
 800ec4a:	07db      	lsls	r3, r3, #31
 800ec4c:	d506      	bpl.n	800ec5c <__swbuf_r+0x6c>
 800ec4e:	2e0a      	cmp	r6, #10
 800ec50:	d104      	bne.n	800ec5c <__swbuf_r+0x6c>
 800ec52:	4621      	mov	r1, r4
 800ec54:	4628      	mov	r0, r5
 800ec56:	f000 f927 	bl	800eea8 <_fflush_r>
 800ec5a:	b988      	cbnz	r0, 800ec80 <__swbuf_r+0x90>
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec60:	4b0a      	ldr	r3, [pc, #40]	; (800ec8c <__swbuf_r+0x9c>)
 800ec62:	429c      	cmp	r4, r3
 800ec64:	d101      	bne.n	800ec6a <__swbuf_r+0x7a>
 800ec66:	68ac      	ldr	r4, [r5, #8]
 800ec68:	e7cf      	b.n	800ec0a <__swbuf_r+0x1a>
 800ec6a:	4b09      	ldr	r3, [pc, #36]	; (800ec90 <__swbuf_r+0xa0>)
 800ec6c:	429c      	cmp	r4, r3
 800ec6e:	bf08      	it	eq
 800ec70:	68ec      	ldreq	r4, [r5, #12]
 800ec72:	e7ca      	b.n	800ec0a <__swbuf_r+0x1a>
 800ec74:	4621      	mov	r1, r4
 800ec76:	4628      	mov	r0, r5
 800ec78:	f000 f81a 	bl	800ecb0 <__swsetup_r>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	d0cb      	beq.n	800ec18 <__swbuf_r+0x28>
 800ec80:	f04f 37ff 	mov.w	r7, #4294967295
 800ec84:	e7ea      	b.n	800ec5c <__swbuf_r+0x6c>
 800ec86:	bf00      	nop
 800ec88:	0800f80c 	.word	0x0800f80c
 800ec8c:	0800f82c 	.word	0x0800f82c
 800ec90:	0800f7ec 	.word	0x0800f7ec

0800ec94 <__ascii_wctomb>:
 800ec94:	b149      	cbz	r1, 800ecaa <__ascii_wctomb+0x16>
 800ec96:	2aff      	cmp	r2, #255	; 0xff
 800ec98:	bf85      	ittet	hi
 800ec9a:	238a      	movhi	r3, #138	; 0x8a
 800ec9c:	6003      	strhi	r3, [r0, #0]
 800ec9e:	700a      	strbls	r2, [r1, #0]
 800eca0:	f04f 30ff 	movhi.w	r0, #4294967295
 800eca4:	bf98      	it	ls
 800eca6:	2001      	movls	r0, #1
 800eca8:	4770      	bx	lr
 800ecaa:	4608      	mov	r0, r1
 800ecac:	4770      	bx	lr
	...

0800ecb0 <__swsetup_r>:
 800ecb0:	4b32      	ldr	r3, [pc, #200]	; (800ed7c <__swsetup_r+0xcc>)
 800ecb2:	b570      	push	{r4, r5, r6, lr}
 800ecb4:	681d      	ldr	r5, [r3, #0]
 800ecb6:	4606      	mov	r6, r0
 800ecb8:	460c      	mov	r4, r1
 800ecba:	b125      	cbz	r5, 800ecc6 <__swsetup_r+0x16>
 800ecbc:	69ab      	ldr	r3, [r5, #24]
 800ecbe:	b913      	cbnz	r3, 800ecc6 <__swsetup_r+0x16>
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	f000 f985 	bl	800efd0 <__sinit>
 800ecc6:	4b2e      	ldr	r3, [pc, #184]	; (800ed80 <__swsetup_r+0xd0>)
 800ecc8:	429c      	cmp	r4, r3
 800ecca:	d10f      	bne.n	800ecec <__swsetup_r+0x3c>
 800eccc:	686c      	ldr	r4, [r5, #4]
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ecd4:	0719      	lsls	r1, r3, #28
 800ecd6:	d42c      	bmi.n	800ed32 <__swsetup_r+0x82>
 800ecd8:	06dd      	lsls	r5, r3, #27
 800ecda:	d411      	bmi.n	800ed00 <__swsetup_r+0x50>
 800ecdc:	2309      	movs	r3, #9
 800ecde:	6033      	str	r3, [r6, #0]
 800ece0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ece4:	81a3      	strh	r3, [r4, #12]
 800ece6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecea:	e03e      	b.n	800ed6a <__swsetup_r+0xba>
 800ecec:	4b25      	ldr	r3, [pc, #148]	; (800ed84 <__swsetup_r+0xd4>)
 800ecee:	429c      	cmp	r4, r3
 800ecf0:	d101      	bne.n	800ecf6 <__swsetup_r+0x46>
 800ecf2:	68ac      	ldr	r4, [r5, #8]
 800ecf4:	e7eb      	b.n	800ecce <__swsetup_r+0x1e>
 800ecf6:	4b24      	ldr	r3, [pc, #144]	; (800ed88 <__swsetup_r+0xd8>)
 800ecf8:	429c      	cmp	r4, r3
 800ecfa:	bf08      	it	eq
 800ecfc:	68ec      	ldreq	r4, [r5, #12]
 800ecfe:	e7e6      	b.n	800ecce <__swsetup_r+0x1e>
 800ed00:	0758      	lsls	r0, r3, #29
 800ed02:	d512      	bpl.n	800ed2a <__swsetup_r+0x7a>
 800ed04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed06:	b141      	cbz	r1, 800ed1a <__swsetup_r+0x6a>
 800ed08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed0c:	4299      	cmp	r1, r3
 800ed0e:	d002      	beq.n	800ed16 <__swsetup_r+0x66>
 800ed10:	4630      	mov	r0, r6
 800ed12:	f7ff fcd5 	bl	800e6c0 <_free_r>
 800ed16:	2300      	movs	r3, #0
 800ed18:	6363      	str	r3, [r4, #52]	; 0x34
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed20:	81a3      	strh	r3, [r4, #12]
 800ed22:	2300      	movs	r3, #0
 800ed24:	6063      	str	r3, [r4, #4]
 800ed26:	6923      	ldr	r3, [r4, #16]
 800ed28:	6023      	str	r3, [r4, #0]
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	f043 0308 	orr.w	r3, r3, #8
 800ed30:	81a3      	strh	r3, [r4, #12]
 800ed32:	6923      	ldr	r3, [r4, #16]
 800ed34:	b94b      	cbnz	r3, 800ed4a <__swsetup_r+0x9a>
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed40:	d003      	beq.n	800ed4a <__swsetup_r+0x9a>
 800ed42:	4621      	mov	r1, r4
 800ed44:	4630      	mov	r0, r6
 800ed46:	f000 fa09 	bl	800f15c <__smakebuf_r>
 800ed4a:	89a0      	ldrh	r0, [r4, #12]
 800ed4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed50:	f010 0301 	ands.w	r3, r0, #1
 800ed54:	d00a      	beq.n	800ed6c <__swsetup_r+0xbc>
 800ed56:	2300      	movs	r3, #0
 800ed58:	60a3      	str	r3, [r4, #8]
 800ed5a:	6963      	ldr	r3, [r4, #20]
 800ed5c:	425b      	negs	r3, r3
 800ed5e:	61a3      	str	r3, [r4, #24]
 800ed60:	6923      	ldr	r3, [r4, #16]
 800ed62:	b943      	cbnz	r3, 800ed76 <__swsetup_r+0xc6>
 800ed64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed68:	d1ba      	bne.n	800ece0 <__swsetup_r+0x30>
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
 800ed6c:	0781      	lsls	r1, r0, #30
 800ed6e:	bf58      	it	pl
 800ed70:	6963      	ldrpl	r3, [r4, #20]
 800ed72:	60a3      	str	r3, [r4, #8]
 800ed74:	e7f4      	b.n	800ed60 <__swsetup_r+0xb0>
 800ed76:	2000      	movs	r0, #0
 800ed78:	e7f7      	b.n	800ed6a <__swsetup_r+0xba>
 800ed7a:	bf00      	nop
 800ed7c:	20000010 	.word	0x20000010
 800ed80:	0800f80c 	.word	0x0800f80c
 800ed84:	0800f82c 	.word	0x0800f82c
 800ed88:	0800f7ec 	.word	0x0800f7ec

0800ed8c <abort>:
 800ed8c:	b508      	push	{r3, lr}
 800ed8e:	2006      	movs	r0, #6
 800ed90:	f000 fa4c 	bl	800f22c <raise>
 800ed94:	2001      	movs	r0, #1
 800ed96:	f7f4 f88f 	bl	8002eb8 <_exit>
	...

0800ed9c <__sflush_r>:
 800ed9c:	898a      	ldrh	r2, [r1, #12]
 800ed9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda2:	4605      	mov	r5, r0
 800eda4:	0710      	lsls	r0, r2, #28
 800eda6:	460c      	mov	r4, r1
 800eda8:	d458      	bmi.n	800ee5c <__sflush_r+0xc0>
 800edaa:	684b      	ldr	r3, [r1, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	dc05      	bgt.n	800edbc <__sflush_r+0x20>
 800edb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	dc02      	bgt.n	800edbc <__sflush_r+0x20>
 800edb6:	2000      	movs	r0, #0
 800edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edbe:	2e00      	cmp	r6, #0
 800edc0:	d0f9      	beq.n	800edb6 <__sflush_r+0x1a>
 800edc2:	2300      	movs	r3, #0
 800edc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800edc8:	682f      	ldr	r7, [r5, #0]
 800edca:	602b      	str	r3, [r5, #0]
 800edcc:	d032      	beq.n	800ee34 <__sflush_r+0x98>
 800edce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800edd0:	89a3      	ldrh	r3, [r4, #12]
 800edd2:	075a      	lsls	r2, r3, #29
 800edd4:	d505      	bpl.n	800ede2 <__sflush_r+0x46>
 800edd6:	6863      	ldr	r3, [r4, #4]
 800edd8:	1ac0      	subs	r0, r0, r3
 800edda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eddc:	b10b      	cbz	r3, 800ede2 <__sflush_r+0x46>
 800edde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ede0:	1ac0      	subs	r0, r0, r3
 800ede2:	2300      	movs	r3, #0
 800ede4:	4602      	mov	r2, r0
 800ede6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ede8:	6a21      	ldr	r1, [r4, #32]
 800edea:	4628      	mov	r0, r5
 800edec:	47b0      	blx	r6
 800edee:	1c43      	adds	r3, r0, #1
 800edf0:	89a3      	ldrh	r3, [r4, #12]
 800edf2:	d106      	bne.n	800ee02 <__sflush_r+0x66>
 800edf4:	6829      	ldr	r1, [r5, #0]
 800edf6:	291d      	cmp	r1, #29
 800edf8:	d82c      	bhi.n	800ee54 <__sflush_r+0xb8>
 800edfa:	4a2a      	ldr	r2, [pc, #168]	; (800eea4 <__sflush_r+0x108>)
 800edfc:	40ca      	lsrs	r2, r1
 800edfe:	07d6      	lsls	r6, r2, #31
 800ee00:	d528      	bpl.n	800ee54 <__sflush_r+0xb8>
 800ee02:	2200      	movs	r2, #0
 800ee04:	6062      	str	r2, [r4, #4]
 800ee06:	04d9      	lsls	r1, r3, #19
 800ee08:	6922      	ldr	r2, [r4, #16]
 800ee0a:	6022      	str	r2, [r4, #0]
 800ee0c:	d504      	bpl.n	800ee18 <__sflush_r+0x7c>
 800ee0e:	1c42      	adds	r2, r0, #1
 800ee10:	d101      	bne.n	800ee16 <__sflush_r+0x7a>
 800ee12:	682b      	ldr	r3, [r5, #0]
 800ee14:	b903      	cbnz	r3, 800ee18 <__sflush_r+0x7c>
 800ee16:	6560      	str	r0, [r4, #84]	; 0x54
 800ee18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee1a:	602f      	str	r7, [r5, #0]
 800ee1c:	2900      	cmp	r1, #0
 800ee1e:	d0ca      	beq.n	800edb6 <__sflush_r+0x1a>
 800ee20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee24:	4299      	cmp	r1, r3
 800ee26:	d002      	beq.n	800ee2e <__sflush_r+0x92>
 800ee28:	4628      	mov	r0, r5
 800ee2a:	f7ff fc49 	bl	800e6c0 <_free_r>
 800ee2e:	2000      	movs	r0, #0
 800ee30:	6360      	str	r0, [r4, #52]	; 0x34
 800ee32:	e7c1      	b.n	800edb8 <__sflush_r+0x1c>
 800ee34:	6a21      	ldr	r1, [r4, #32]
 800ee36:	2301      	movs	r3, #1
 800ee38:	4628      	mov	r0, r5
 800ee3a:	47b0      	blx	r6
 800ee3c:	1c41      	adds	r1, r0, #1
 800ee3e:	d1c7      	bne.n	800edd0 <__sflush_r+0x34>
 800ee40:	682b      	ldr	r3, [r5, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d0c4      	beq.n	800edd0 <__sflush_r+0x34>
 800ee46:	2b1d      	cmp	r3, #29
 800ee48:	d001      	beq.n	800ee4e <__sflush_r+0xb2>
 800ee4a:	2b16      	cmp	r3, #22
 800ee4c:	d101      	bne.n	800ee52 <__sflush_r+0xb6>
 800ee4e:	602f      	str	r7, [r5, #0]
 800ee50:	e7b1      	b.n	800edb6 <__sflush_r+0x1a>
 800ee52:	89a3      	ldrh	r3, [r4, #12]
 800ee54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee58:	81a3      	strh	r3, [r4, #12]
 800ee5a:	e7ad      	b.n	800edb8 <__sflush_r+0x1c>
 800ee5c:	690f      	ldr	r7, [r1, #16]
 800ee5e:	2f00      	cmp	r7, #0
 800ee60:	d0a9      	beq.n	800edb6 <__sflush_r+0x1a>
 800ee62:	0793      	lsls	r3, r2, #30
 800ee64:	680e      	ldr	r6, [r1, #0]
 800ee66:	bf08      	it	eq
 800ee68:	694b      	ldreq	r3, [r1, #20]
 800ee6a:	600f      	str	r7, [r1, #0]
 800ee6c:	bf18      	it	ne
 800ee6e:	2300      	movne	r3, #0
 800ee70:	eba6 0807 	sub.w	r8, r6, r7
 800ee74:	608b      	str	r3, [r1, #8]
 800ee76:	f1b8 0f00 	cmp.w	r8, #0
 800ee7a:	dd9c      	ble.n	800edb6 <__sflush_r+0x1a>
 800ee7c:	6a21      	ldr	r1, [r4, #32]
 800ee7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee80:	4643      	mov	r3, r8
 800ee82:	463a      	mov	r2, r7
 800ee84:	4628      	mov	r0, r5
 800ee86:	47b0      	blx	r6
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	dc06      	bgt.n	800ee9a <__sflush_r+0xfe>
 800ee8c:	89a3      	ldrh	r3, [r4, #12]
 800ee8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee92:	81a3      	strh	r3, [r4, #12]
 800ee94:	f04f 30ff 	mov.w	r0, #4294967295
 800ee98:	e78e      	b.n	800edb8 <__sflush_r+0x1c>
 800ee9a:	4407      	add	r7, r0
 800ee9c:	eba8 0800 	sub.w	r8, r8, r0
 800eea0:	e7e9      	b.n	800ee76 <__sflush_r+0xda>
 800eea2:	bf00      	nop
 800eea4:	20400001 	.word	0x20400001

0800eea8 <_fflush_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	690b      	ldr	r3, [r1, #16]
 800eeac:	4605      	mov	r5, r0
 800eeae:	460c      	mov	r4, r1
 800eeb0:	b913      	cbnz	r3, 800eeb8 <_fflush_r+0x10>
 800eeb2:	2500      	movs	r5, #0
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	bd38      	pop	{r3, r4, r5, pc}
 800eeb8:	b118      	cbz	r0, 800eec2 <_fflush_r+0x1a>
 800eeba:	6983      	ldr	r3, [r0, #24]
 800eebc:	b90b      	cbnz	r3, 800eec2 <_fflush_r+0x1a>
 800eebe:	f000 f887 	bl	800efd0 <__sinit>
 800eec2:	4b14      	ldr	r3, [pc, #80]	; (800ef14 <_fflush_r+0x6c>)
 800eec4:	429c      	cmp	r4, r3
 800eec6:	d11b      	bne.n	800ef00 <_fflush_r+0x58>
 800eec8:	686c      	ldr	r4, [r5, #4]
 800eeca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d0ef      	beq.n	800eeb2 <_fflush_r+0xa>
 800eed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eed4:	07d0      	lsls	r0, r2, #31
 800eed6:	d404      	bmi.n	800eee2 <_fflush_r+0x3a>
 800eed8:	0599      	lsls	r1, r3, #22
 800eeda:	d402      	bmi.n	800eee2 <_fflush_r+0x3a>
 800eedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eede:	f000 f915 	bl	800f10c <__retarget_lock_acquire_recursive>
 800eee2:	4628      	mov	r0, r5
 800eee4:	4621      	mov	r1, r4
 800eee6:	f7ff ff59 	bl	800ed9c <__sflush_r>
 800eeea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeec:	07da      	lsls	r2, r3, #31
 800eeee:	4605      	mov	r5, r0
 800eef0:	d4e0      	bmi.n	800eeb4 <_fflush_r+0xc>
 800eef2:	89a3      	ldrh	r3, [r4, #12]
 800eef4:	059b      	lsls	r3, r3, #22
 800eef6:	d4dd      	bmi.n	800eeb4 <_fflush_r+0xc>
 800eef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eefa:	f000 f908 	bl	800f10e <__retarget_lock_release_recursive>
 800eefe:	e7d9      	b.n	800eeb4 <_fflush_r+0xc>
 800ef00:	4b05      	ldr	r3, [pc, #20]	; (800ef18 <_fflush_r+0x70>)
 800ef02:	429c      	cmp	r4, r3
 800ef04:	d101      	bne.n	800ef0a <_fflush_r+0x62>
 800ef06:	68ac      	ldr	r4, [r5, #8]
 800ef08:	e7df      	b.n	800eeca <_fflush_r+0x22>
 800ef0a:	4b04      	ldr	r3, [pc, #16]	; (800ef1c <_fflush_r+0x74>)
 800ef0c:	429c      	cmp	r4, r3
 800ef0e:	bf08      	it	eq
 800ef10:	68ec      	ldreq	r4, [r5, #12]
 800ef12:	e7da      	b.n	800eeca <_fflush_r+0x22>
 800ef14:	0800f80c 	.word	0x0800f80c
 800ef18:	0800f82c 	.word	0x0800f82c
 800ef1c:	0800f7ec 	.word	0x0800f7ec

0800ef20 <std>:
 800ef20:	2300      	movs	r3, #0
 800ef22:	b510      	push	{r4, lr}
 800ef24:	4604      	mov	r4, r0
 800ef26:	e9c0 3300 	strd	r3, r3, [r0]
 800ef2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef2e:	6083      	str	r3, [r0, #8]
 800ef30:	8181      	strh	r1, [r0, #12]
 800ef32:	6643      	str	r3, [r0, #100]	; 0x64
 800ef34:	81c2      	strh	r2, [r0, #14]
 800ef36:	6183      	str	r3, [r0, #24]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	2208      	movs	r2, #8
 800ef3c:	305c      	adds	r0, #92	; 0x5c
 800ef3e:	f7fd fd2d 	bl	800c99c <memset>
 800ef42:	4b05      	ldr	r3, [pc, #20]	; (800ef58 <std+0x38>)
 800ef44:	6263      	str	r3, [r4, #36]	; 0x24
 800ef46:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <std+0x3c>)
 800ef48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef4a:	4b05      	ldr	r3, [pc, #20]	; (800ef60 <std+0x40>)
 800ef4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef4e:	4b05      	ldr	r3, [pc, #20]	; (800ef64 <std+0x44>)
 800ef50:	6224      	str	r4, [r4, #32]
 800ef52:	6323      	str	r3, [r4, #48]	; 0x30
 800ef54:	bd10      	pop	{r4, pc}
 800ef56:	bf00      	nop
 800ef58:	0800f265 	.word	0x0800f265
 800ef5c:	0800f287 	.word	0x0800f287
 800ef60:	0800f2bf 	.word	0x0800f2bf
 800ef64:	0800f2e3 	.word	0x0800f2e3

0800ef68 <_cleanup_r>:
 800ef68:	4901      	ldr	r1, [pc, #4]	; (800ef70 <_cleanup_r+0x8>)
 800ef6a:	f000 b8af 	b.w	800f0cc <_fwalk_reent>
 800ef6e:	bf00      	nop
 800ef70:	0800eea9 	.word	0x0800eea9

0800ef74 <__sfmoreglue>:
 800ef74:	b570      	push	{r4, r5, r6, lr}
 800ef76:	2268      	movs	r2, #104	; 0x68
 800ef78:	1e4d      	subs	r5, r1, #1
 800ef7a:	4355      	muls	r5, r2
 800ef7c:	460e      	mov	r6, r1
 800ef7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef82:	f7ff fc09 	bl	800e798 <_malloc_r>
 800ef86:	4604      	mov	r4, r0
 800ef88:	b140      	cbz	r0, 800ef9c <__sfmoreglue+0x28>
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ef90:	300c      	adds	r0, #12
 800ef92:	60a0      	str	r0, [r4, #8]
 800ef94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef98:	f7fd fd00 	bl	800c99c <memset>
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	bd70      	pop	{r4, r5, r6, pc}

0800efa0 <__sfp_lock_acquire>:
 800efa0:	4801      	ldr	r0, [pc, #4]	; (800efa8 <__sfp_lock_acquire+0x8>)
 800efa2:	f000 b8b3 	b.w	800f10c <__retarget_lock_acquire_recursive>
 800efa6:	bf00      	nop
 800efa8:	20004b39 	.word	0x20004b39

0800efac <__sfp_lock_release>:
 800efac:	4801      	ldr	r0, [pc, #4]	; (800efb4 <__sfp_lock_release+0x8>)
 800efae:	f000 b8ae 	b.w	800f10e <__retarget_lock_release_recursive>
 800efb2:	bf00      	nop
 800efb4:	20004b39 	.word	0x20004b39

0800efb8 <__sinit_lock_acquire>:
 800efb8:	4801      	ldr	r0, [pc, #4]	; (800efc0 <__sinit_lock_acquire+0x8>)
 800efba:	f000 b8a7 	b.w	800f10c <__retarget_lock_acquire_recursive>
 800efbe:	bf00      	nop
 800efc0:	20004b3a 	.word	0x20004b3a

0800efc4 <__sinit_lock_release>:
 800efc4:	4801      	ldr	r0, [pc, #4]	; (800efcc <__sinit_lock_release+0x8>)
 800efc6:	f000 b8a2 	b.w	800f10e <__retarget_lock_release_recursive>
 800efca:	bf00      	nop
 800efcc:	20004b3a 	.word	0x20004b3a

0800efd0 <__sinit>:
 800efd0:	b510      	push	{r4, lr}
 800efd2:	4604      	mov	r4, r0
 800efd4:	f7ff fff0 	bl	800efb8 <__sinit_lock_acquire>
 800efd8:	69a3      	ldr	r3, [r4, #24]
 800efda:	b11b      	cbz	r3, 800efe4 <__sinit+0x14>
 800efdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efe0:	f7ff bff0 	b.w	800efc4 <__sinit_lock_release>
 800efe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800efe8:	6523      	str	r3, [r4, #80]	; 0x50
 800efea:	4b13      	ldr	r3, [pc, #76]	; (800f038 <__sinit+0x68>)
 800efec:	4a13      	ldr	r2, [pc, #76]	; (800f03c <__sinit+0x6c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	62a2      	str	r2, [r4, #40]	; 0x28
 800eff2:	42a3      	cmp	r3, r4
 800eff4:	bf04      	itt	eq
 800eff6:	2301      	moveq	r3, #1
 800eff8:	61a3      	streq	r3, [r4, #24]
 800effa:	4620      	mov	r0, r4
 800effc:	f000 f820 	bl	800f040 <__sfp>
 800f000:	6060      	str	r0, [r4, #4]
 800f002:	4620      	mov	r0, r4
 800f004:	f000 f81c 	bl	800f040 <__sfp>
 800f008:	60a0      	str	r0, [r4, #8]
 800f00a:	4620      	mov	r0, r4
 800f00c:	f000 f818 	bl	800f040 <__sfp>
 800f010:	2200      	movs	r2, #0
 800f012:	60e0      	str	r0, [r4, #12]
 800f014:	2104      	movs	r1, #4
 800f016:	6860      	ldr	r0, [r4, #4]
 800f018:	f7ff ff82 	bl	800ef20 <std>
 800f01c:	68a0      	ldr	r0, [r4, #8]
 800f01e:	2201      	movs	r2, #1
 800f020:	2109      	movs	r1, #9
 800f022:	f7ff ff7d 	bl	800ef20 <std>
 800f026:	68e0      	ldr	r0, [r4, #12]
 800f028:	2202      	movs	r2, #2
 800f02a:	2112      	movs	r1, #18
 800f02c:	f7ff ff78 	bl	800ef20 <std>
 800f030:	2301      	movs	r3, #1
 800f032:	61a3      	str	r3, [r4, #24]
 800f034:	e7d2      	b.n	800efdc <__sinit+0xc>
 800f036:	bf00      	nop
 800f038:	0800f474 	.word	0x0800f474
 800f03c:	0800ef69 	.word	0x0800ef69

0800f040 <__sfp>:
 800f040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f042:	4607      	mov	r7, r0
 800f044:	f7ff ffac 	bl	800efa0 <__sfp_lock_acquire>
 800f048:	4b1e      	ldr	r3, [pc, #120]	; (800f0c4 <__sfp+0x84>)
 800f04a:	681e      	ldr	r6, [r3, #0]
 800f04c:	69b3      	ldr	r3, [r6, #24]
 800f04e:	b913      	cbnz	r3, 800f056 <__sfp+0x16>
 800f050:	4630      	mov	r0, r6
 800f052:	f7ff ffbd 	bl	800efd0 <__sinit>
 800f056:	3648      	adds	r6, #72	; 0x48
 800f058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	d503      	bpl.n	800f068 <__sfp+0x28>
 800f060:	6833      	ldr	r3, [r6, #0]
 800f062:	b30b      	cbz	r3, 800f0a8 <__sfp+0x68>
 800f064:	6836      	ldr	r6, [r6, #0]
 800f066:	e7f7      	b.n	800f058 <__sfp+0x18>
 800f068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f06c:	b9d5      	cbnz	r5, 800f0a4 <__sfp+0x64>
 800f06e:	4b16      	ldr	r3, [pc, #88]	; (800f0c8 <__sfp+0x88>)
 800f070:	60e3      	str	r3, [r4, #12]
 800f072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f076:	6665      	str	r5, [r4, #100]	; 0x64
 800f078:	f000 f847 	bl	800f10a <__retarget_lock_init_recursive>
 800f07c:	f7ff ff96 	bl	800efac <__sfp_lock_release>
 800f080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f088:	6025      	str	r5, [r4, #0]
 800f08a:	61a5      	str	r5, [r4, #24]
 800f08c:	2208      	movs	r2, #8
 800f08e:	4629      	mov	r1, r5
 800f090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f094:	f7fd fc82 	bl	800c99c <memset>
 800f098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f09c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0a4:	3468      	adds	r4, #104	; 0x68
 800f0a6:	e7d9      	b.n	800f05c <__sfp+0x1c>
 800f0a8:	2104      	movs	r1, #4
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	f7ff ff62 	bl	800ef74 <__sfmoreglue>
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	6030      	str	r0, [r6, #0]
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d1d5      	bne.n	800f064 <__sfp+0x24>
 800f0b8:	f7ff ff78 	bl	800efac <__sfp_lock_release>
 800f0bc:	230c      	movs	r3, #12
 800f0be:	603b      	str	r3, [r7, #0]
 800f0c0:	e7ee      	b.n	800f0a0 <__sfp+0x60>
 800f0c2:	bf00      	nop
 800f0c4:	0800f474 	.word	0x0800f474
 800f0c8:	ffff0001 	.word	0xffff0001

0800f0cc <_fwalk_reent>:
 800f0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d0:	4606      	mov	r6, r0
 800f0d2:	4688      	mov	r8, r1
 800f0d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0d8:	2700      	movs	r7, #0
 800f0da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0de:	f1b9 0901 	subs.w	r9, r9, #1
 800f0e2:	d505      	bpl.n	800f0f0 <_fwalk_reent+0x24>
 800f0e4:	6824      	ldr	r4, [r4, #0]
 800f0e6:	2c00      	cmp	r4, #0
 800f0e8:	d1f7      	bne.n	800f0da <_fwalk_reent+0xe>
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f0:	89ab      	ldrh	r3, [r5, #12]
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d907      	bls.n	800f106 <_fwalk_reent+0x3a>
 800f0f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	d003      	beq.n	800f106 <_fwalk_reent+0x3a>
 800f0fe:	4629      	mov	r1, r5
 800f100:	4630      	mov	r0, r6
 800f102:	47c0      	blx	r8
 800f104:	4307      	orrs	r7, r0
 800f106:	3568      	adds	r5, #104	; 0x68
 800f108:	e7e9      	b.n	800f0de <_fwalk_reent+0x12>

0800f10a <__retarget_lock_init_recursive>:
 800f10a:	4770      	bx	lr

0800f10c <__retarget_lock_acquire_recursive>:
 800f10c:	4770      	bx	lr

0800f10e <__retarget_lock_release_recursive>:
 800f10e:	4770      	bx	lr

0800f110 <__swhatbuf_r>:
 800f110:	b570      	push	{r4, r5, r6, lr}
 800f112:	460e      	mov	r6, r1
 800f114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f118:	2900      	cmp	r1, #0
 800f11a:	b096      	sub	sp, #88	; 0x58
 800f11c:	4614      	mov	r4, r2
 800f11e:	461d      	mov	r5, r3
 800f120:	da08      	bge.n	800f134 <__swhatbuf_r+0x24>
 800f122:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	602a      	str	r2, [r5, #0]
 800f12a:	061a      	lsls	r2, r3, #24
 800f12c:	d410      	bmi.n	800f150 <__swhatbuf_r+0x40>
 800f12e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f132:	e00e      	b.n	800f152 <__swhatbuf_r+0x42>
 800f134:	466a      	mov	r2, sp
 800f136:	f000 f8fb 	bl	800f330 <_fstat_r>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	dbf1      	blt.n	800f122 <__swhatbuf_r+0x12>
 800f13e:	9a01      	ldr	r2, [sp, #4]
 800f140:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f144:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f148:	425a      	negs	r2, r3
 800f14a:	415a      	adcs	r2, r3
 800f14c:	602a      	str	r2, [r5, #0]
 800f14e:	e7ee      	b.n	800f12e <__swhatbuf_r+0x1e>
 800f150:	2340      	movs	r3, #64	; 0x40
 800f152:	2000      	movs	r0, #0
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	b016      	add	sp, #88	; 0x58
 800f158:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f15c <__smakebuf_r>:
 800f15c:	898b      	ldrh	r3, [r1, #12]
 800f15e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f160:	079d      	lsls	r5, r3, #30
 800f162:	4606      	mov	r6, r0
 800f164:	460c      	mov	r4, r1
 800f166:	d507      	bpl.n	800f178 <__smakebuf_r+0x1c>
 800f168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f16c:	6023      	str	r3, [r4, #0]
 800f16e:	6123      	str	r3, [r4, #16]
 800f170:	2301      	movs	r3, #1
 800f172:	6163      	str	r3, [r4, #20]
 800f174:	b002      	add	sp, #8
 800f176:	bd70      	pop	{r4, r5, r6, pc}
 800f178:	ab01      	add	r3, sp, #4
 800f17a:	466a      	mov	r2, sp
 800f17c:	f7ff ffc8 	bl	800f110 <__swhatbuf_r>
 800f180:	9900      	ldr	r1, [sp, #0]
 800f182:	4605      	mov	r5, r0
 800f184:	4630      	mov	r0, r6
 800f186:	f7ff fb07 	bl	800e798 <_malloc_r>
 800f18a:	b948      	cbnz	r0, 800f1a0 <__smakebuf_r+0x44>
 800f18c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f190:	059a      	lsls	r2, r3, #22
 800f192:	d4ef      	bmi.n	800f174 <__smakebuf_r+0x18>
 800f194:	f023 0303 	bic.w	r3, r3, #3
 800f198:	f043 0302 	orr.w	r3, r3, #2
 800f19c:	81a3      	strh	r3, [r4, #12]
 800f19e:	e7e3      	b.n	800f168 <__smakebuf_r+0xc>
 800f1a0:	4b0d      	ldr	r3, [pc, #52]	; (800f1d8 <__smakebuf_r+0x7c>)
 800f1a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	6020      	str	r0, [r4, #0]
 800f1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ac:	81a3      	strh	r3, [r4, #12]
 800f1ae:	9b00      	ldr	r3, [sp, #0]
 800f1b0:	6163      	str	r3, [r4, #20]
 800f1b2:	9b01      	ldr	r3, [sp, #4]
 800f1b4:	6120      	str	r0, [r4, #16]
 800f1b6:	b15b      	cbz	r3, 800f1d0 <__smakebuf_r+0x74>
 800f1b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f000 f8c9 	bl	800f354 <_isatty_r>
 800f1c2:	b128      	cbz	r0, 800f1d0 <__smakebuf_r+0x74>
 800f1c4:	89a3      	ldrh	r3, [r4, #12]
 800f1c6:	f023 0303 	bic.w	r3, r3, #3
 800f1ca:	f043 0301 	orr.w	r3, r3, #1
 800f1ce:	81a3      	strh	r3, [r4, #12]
 800f1d0:	89a0      	ldrh	r0, [r4, #12]
 800f1d2:	4305      	orrs	r5, r0
 800f1d4:	81a5      	strh	r5, [r4, #12]
 800f1d6:	e7cd      	b.n	800f174 <__smakebuf_r+0x18>
 800f1d8:	0800ef69 	.word	0x0800ef69

0800f1dc <_raise_r>:
 800f1dc:	291f      	cmp	r1, #31
 800f1de:	b538      	push	{r3, r4, r5, lr}
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	460d      	mov	r5, r1
 800f1e4:	d904      	bls.n	800f1f0 <_raise_r+0x14>
 800f1e6:	2316      	movs	r3, #22
 800f1e8:	6003      	str	r3, [r0, #0]
 800f1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ee:	bd38      	pop	{r3, r4, r5, pc}
 800f1f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f1f2:	b112      	cbz	r2, 800f1fa <_raise_r+0x1e>
 800f1f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1f8:	b94b      	cbnz	r3, 800f20e <_raise_r+0x32>
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f000 f830 	bl	800f260 <_getpid_r>
 800f200:	462a      	mov	r2, r5
 800f202:	4601      	mov	r1, r0
 800f204:	4620      	mov	r0, r4
 800f206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f20a:	f000 b817 	b.w	800f23c <_kill_r>
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d00a      	beq.n	800f228 <_raise_r+0x4c>
 800f212:	1c59      	adds	r1, r3, #1
 800f214:	d103      	bne.n	800f21e <_raise_r+0x42>
 800f216:	2316      	movs	r3, #22
 800f218:	6003      	str	r3, [r0, #0]
 800f21a:	2001      	movs	r0, #1
 800f21c:	e7e7      	b.n	800f1ee <_raise_r+0x12>
 800f21e:	2400      	movs	r4, #0
 800f220:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f224:	4628      	mov	r0, r5
 800f226:	4798      	blx	r3
 800f228:	2000      	movs	r0, #0
 800f22a:	e7e0      	b.n	800f1ee <_raise_r+0x12>

0800f22c <raise>:
 800f22c:	4b02      	ldr	r3, [pc, #8]	; (800f238 <raise+0xc>)
 800f22e:	4601      	mov	r1, r0
 800f230:	6818      	ldr	r0, [r3, #0]
 800f232:	f7ff bfd3 	b.w	800f1dc <_raise_r>
 800f236:	bf00      	nop
 800f238:	20000010 	.word	0x20000010

0800f23c <_kill_r>:
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	4d07      	ldr	r5, [pc, #28]	; (800f25c <_kill_r+0x20>)
 800f240:	2300      	movs	r3, #0
 800f242:	4604      	mov	r4, r0
 800f244:	4608      	mov	r0, r1
 800f246:	4611      	mov	r1, r2
 800f248:	602b      	str	r3, [r5, #0]
 800f24a:	f7f3 fe25 	bl	8002e98 <_kill>
 800f24e:	1c43      	adds	r3, r0, #1
 800f250:	d102      	bne.n	800f258 <_kill_r+0x1c>
 800f252:	682b      	ldr	r3, [r5, #0]
 800f254:	b103      	cbz	r3, 800f258 <_kill_r+0x1c>
 800f256:	6023      	str	r3, [r4, #0]
 800f258:	bd38      	pop	{r3, r4, r5, pc}
 800f25a:	bf00      	nop
 800f25c:	20004b34 	.word	0x20004b34

0800f260 <_getpid_r>:
 800f260:	f7f3 be12 	b.w	8002e88 <_getpid>

0800f264 <__sread>:
 800f264:	b510      	push	{r4, lr}
 800f266:	460c      	mov	r4, r1
 800f268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f26c:	f000 f894 	bl	800f398 <_read_r>
 800f270:	2800      	cmp	r0, #0
 800f272:	bfab      	itete	ge
 800f274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f276:	89a3      	ldrhlt	r3, [r4, #12]
 800f278:	181b      	addge	r3, r3, r0
 800f27a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f27e:	bfac      	ite	ge
 800f280:	6563      	strge	r3, [r4, #84]	; 0x54
 800f282:	81a3      	strhlt	r3, [r4, #12]
 800f284:	bd10      	pop	{r4, pc}

0800f286 <__swrite>:
 800f286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f28a:	461f      	mov	r7, r3
 800f28c:	898b      	ldrh	r3, [r1, #12]
 800f28e:	05db      	lsls	r3, r3, #23
 800f290:	4605      	mov	r5, r0
 800f292:	460c      	mov	r4, r1
 800f294:	4616      	mov	r6, r2
 800f296:	d505      	bpl.n	800f2a4 <__swrite+0x1e>
 800f298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f29c:	2302      	movs	r3, #2
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f000 f868 	bl	800f374 <_lseek_r>
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	4632      	mov	r2, r6
 800f2b2:	463b      	mov	r3, r7
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ba:	f000 b817 	b.w	800f2ec <_write_r>

0800f2be <__sseek>:
 800f2be:	b510      	push	{r4, lr}
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c6:	f000 f855 	bl	800f374 <_lseek_r>
 800f2ca:	1c43      	adds	r3, r0, #1
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	bf15      	itete	ne
 800f2d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2da:	81a3      	strheq	r3, [r4, #12]
 800f2dc:	bf18      	it	ne
 800f2de:	81a3      	strhne	r3, [r4, #12]
 800f2e0:	bd10      	pop	{r4, pc}

0800f2e2 <__sclose>:
 800f2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e6:	f000 b813 	b.w	800f310 <_close_r>
	...

0800f2ec <_write_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4d07      	ldr	r5, [pc, #28]	; (800f30c <_write_r+0x20>)
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	602a      	str	r2, [r5, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f7f3 fe03 	bl	8002f06 <_write>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_write_r+0x1e>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_write_r+0x1e>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	20004b34 	.word	0x20004b34

0800f310 <_close_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4d06      	ldr	r5, [pc, #24]	; (800f32c <_close_r+0x1c>)
 800f314:	2300      	movs	r3, #0
 800f316:	4604      	mov	r4, r0
 800f318:	4608      	mov	r0, r1
 800f31a:	602b      	str	r3, [r5, #0]
 800f31c:	f7f3 fe0f 	bl	8002f3e <_close>
 800f320:	1c43      	adds	r3, r0, #1
 800f322:	d102      	bne.n	800f32a <_close_r+0x1a>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	b103      	cbz	r3, 800f32a <_close_r+0x1a>
 800f328:	6023      	str	r3, [r4, #0]
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	20004b34 	.word	0x20004b34

0800f330 <_fstat_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4d07      	ldr	r5, [pc, #28]	; (800f350 <_fstat_r+0x20>)
 800f334:	2300      	movs	r3, #0
 800f336:	4604      	mov	r4, r0
 800f338:	4608      	mov	r0, r1
 800f33a:	4611      	mov	r1, r2
 800f33c:	602b      	str	r3, [r5, #0]
 800f33e:	f7f3 fe0a 	bl	8002f56 <_fstat>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	d102      	bne.n	800f34c <_fstat_r+0x1c>
 800f346:	682b      	ldr	r3, [r5, #0]
 800f348:	b103      	cbz	r3, 800f34c <_fstat_r+0x1c>
 800f34a:	6023      	str	r3, [r4, #0]
 800f34c:	bd38      	pop	{r3, r4, r5, pc}
 800f34e:	bf00      	nop
 800f350:	20004b34 	.word	0x20004b34

0800f354 <_isatty_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4d06      	ldr	r5, [pc, #24]	; (800f370 <_isatty_r+0x1c>)
 800f358:	2300      	movs	r3, #0
 800f35a:	4604      	mov	r4, r0
 800f35c:	4608      	mov	r0, r1
 800f35e:	602b      	str	r3, [r5, #0]
 800f360:	f7f3 fe09 	bl	8002f76 <_isatty>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_isatty_r+0x1a>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_isatty_r+0x1a>
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	20004b34 	.word	0x20004b34

0800f374 <_lseek_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d07      	ldr	r5, [pc, #28]	; (800f394 <_lseek_r+0x20>)
 800f378:	4604      	mov	r4, r0
 800f37a:	4608      	mov	r0, r1
 800f37c:	4611      	mov	r1, r2
 800f37e:	2200      	movs	r2, #0
 800f380:	602a      	str	r2, [r5, #0]
 800f382:	461a      	mov	r2, r3
 800f384:	f7f3 fe02 	bl	8002f8c <_lseek>
 800f388:	1c43      	adds	r3, r0, #1
 800f38a:	d102      	bne.n	800f392 <_lseek_r+0x1e>
 800f38c:	682b      	ldr	r3, [r5, #0]
 800f38e:	b103      	cbz	r3, 800f392 <_lseek_r+0x1e>
 800f390:	6023      	str	r3, [r4, #0]
 800f392:	bd38      	pop	{r3, r4, r5, pc}
 800f394:	20004b34 	.word	0x20004b34

0800f398 <_read_r>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	4d07      	ldr	r5, [pc, #28]	; (800f3b8 <_read_r+0x20>)
 800f39c:	4604      	mov	r4, r0
 800f39e:	4608      	mov	r0, r1
 800f3a0:	4611      	mov	r1, r2
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	602a      	str	r2, [r5, #0]
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	f7f3 fd90 	bl	8002ecc <_read>
 800f3ac:	1c43      	adds	r3, r0, #1
 800f3ae:	d102      	bne.n	800f3b6 <_read_r+0x1e>
 800f3b0:	682b      	ldr	r3, [r5, #0]
 800f3b2:	b103      	cbz	r3, 800f3b6 <_read_r+0x1e>
 800f3b4:	6023      	str	r3, [r4, #0]
 800f3b6:	bd38      	pop	{r3, r4, r5, pc}
 800f3b8:	20004b34 	.word	0x20004b34

0800f3bc <_init>:
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3be:	bf00      	nop
 800f3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3c2:	bc08      	pop	{r3}
 800f3c4:	469e      	mov	lr, r3
 800f3c6:	4770      	bx	lr

0800f3c8 <_fini>:
 800f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ca:	bf00      	nop
 800f3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ce:	bc08      	pop	{r3}
 800f3d0:	469e      	mov	lr, r3
 800f3d2:	4770      	bx	lr
